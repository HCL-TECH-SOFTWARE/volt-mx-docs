Ext.data.JsonP.android_hardware_camera2_utils_TypeReference({"tagname":"class","name":"android.hardware.camera2.utils.TypeReference","autodetected":{},"files":[{"filename":"TypeReference.js","href":"TypeReference.html#android-hardware-camera2-utils-TypeReference"}],"extends":"java.lang.Object","members":[{"name":"containsTypeVariable","tagname":"method","owner":"android.hardware.camera2.utils.TypeReference","id":"method-containsTypeVariable","meta":{}},{"name":"createSpecializedTypeReference","tagname":"method","owner":"android.hardware.camera2.utils.TypeReference","id":"method-createSpecializedTypeReference","meta":{}},{"name":"equals","tagname":"method","owner":"android.hardware.camera2.utils.TypeReference","id":"method-equals","meta":{}},{"name":"getComponentType","tagname":"method","owner":"android.hardware.camera2.utils.TypeReference","id":"method-getComponentType","meta":{}},{"name":"getRawType","tagname":"method","owner":"android.hardware.camera2.utils.TypeReference","id":"method-getRawType","meta":{}},{"name":"getType","tagname":"method","owner":"android.hardware.camera2.utils.TypeReference","id":"method-getType","meta":{}},{"name":"hashCode","tagname":"method","owner":"android.hardware.camera2.utils.TypeReference","id":"method-hashCode","meta":{}},{"name":"toString","tagname":"method","owner":"android.hardware.camera2.utils.TypeReference","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.hardware.camera2.utils.TypeReference","short_doc":"Super type token; allows capturing generic types at runtime by forcing them to be reified. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.hardware.camera2.utils.TypeReference</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference' target='_blank'>TypeReference.js</a></div></pre><div class='doc-contents'><p>Super type token; allows capturing generic types at runtime by forcing them to be reified.</p>\n\n<p> <p>Usage example: <pre>{@code\n      // using anonymous classes (preferred)\n      TypeReference&lt;Integer> intToken = new TypeReference&lt;Integer>() {{ }};</pre></p>\n\n<pre><code>  // using named classes\n  class IntTypeReference extends TypeReference&amp;lt;Integer&gt; {...}\n  TypeReference&amp;lt;Integer&gt; intToken = new IntTypeReference();\n</code></pre>\n\n<p> }</p></p>\n\n<p> <p>Unlike the reference implementation, this bans nested TypeVariables; that is all\n dynamic types must equal to the static types.</p></p>\n\n<p> <p>See <a href=\"http://gafter.blogspot.com/2007/05/limitation-of-super-type-tokens.html\">\n http://gafter.blogspot.com/2007/05/limitation-of-super-type-tokens.html</a>\n for more details.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-containsTypeVariable' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.utils.TypeReference'>android.hardware.camera2.utils.TypeReference</span><br/><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference-method-containsTypeVariable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.utils.TypeReference-method-containsTypeVariable' class='name expandable'>containsTypeVariable</a>( <span class='pre'>type</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Check if the {@code type} contains a TypeVariable recursively. ...</div><div class='long'><p>Check if the {@code type} contains a TypeVariable recursively.</p>\n\n<p> <p>Intuitively, a type variable is a type in a type expression that refers to a generic\n type which is not known at the definition of the expression (commonly seen when\n type parameters are used, e.g. {@code class Foo<T>}).</T></p></p>\n\n<p> <p>See <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.4\">\n http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.4</a>\n for a more formal definition of a type variable</p>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Object {Type}<div class='sub-desc'><p>a type object ({@code null} is allowed)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there were nested type variables; {@code false} otherwise</p>\n</div></li></ul></div></div></div><div id='method-createSpecializedTypeReference' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.utils.TypeReference'>android.hardware.camera2.utils.TypeReference</span><br/><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference-method-createSpecializedTypeReference' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.utils.TypeReference-method-createSpecializedTypeReference' class='name expandable'>createSpecializedTypeReference</a>( <span class='pre'>type</span> ) : Object {android.hardware.camera2.utils.TypeReference}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a specialized type reference from a dynamic Type instance,\n bypassing the standard compile-time checks. ...</div><div class='long'><p>Create a specialized type reference from a dynamic Type instance,\n bypassing the standard compile-time checks.</p>\n\n<p> <p>As with a regular type reference, the {@code type} must not contain\n any type variables.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Object {Type}<div class='sub-desc'><p>a non-{@code null} Type instance</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.hardware.camera2.utils.TypeReference}</span><div class='sub-desc'><p>a type reference which captures {@code T} at runtime</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code type} had any type variables</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.utils.TypeReference'>android.hardware.camera2.utils.TypeReference</span><br/><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.utils.TypeReference-method-equals' class='name expandable'>equals</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Compare two objects for equality. ...</div><div class='long'><p>Compare two objects for equality.</p>\n\n<p> <p>A TypeReference is only equal to another TypeReference if their captured type {@code T}\n is also equal.</p></p>\n</div></div></div><div id='method-getComponentType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.utils.TypeReference'>android.hardware.camera2.utils.TypeReference</span><br/><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference-method-getComponentType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.utils.TypeReference-method-getComponentType' class='name expandable'>getComponentType</a>( <span class='pre'></span> ) : Object {android.hardware.camera2.utils.TypeReference}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the component type, e.g. ...</div><div class='long'><p>Get the component type, e.g. {@code T} from {@code T[]}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.hardware.camera2.utils.TypeReference}</span><div class='sub-desc'><p>component type, or {@code null} if {@code T} is not an array</p>\n</div></li></ul></div></div></div><div id='method-getRawType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.utils.TypeReference'>android.hardware.camera2.utils.TypeReference</span><br/><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference-method-getRawType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.utils.TypeReference-method-getRawType' class='name expandable'>getRawType</a>( <span class='pre'></span> ) : Object {java.lang.Class}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the raw type of T. ...</div><div class='long'><p>Returns the raw type of T.</p>\n\n<p> <p><ul>\n <li>If T is a Class itself, T itself is returned.\n <li>If T is a ParameterizedType, the raw type of the parameterized type is returned.\n <li>If T is a GenericArrayType, the returned type is the corresponding array class.\n For example: {@code List<Integer>[]} => {@code List[]}.\n <li>If T is a type variable or a wildcard type, the raw type of the first upper bound is\n returned. For example: {@code <X extends Foo>} => {@code Foo}.\n </X></li></Integer></li></li></li></ul></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Class}</span><div class='sub-desc'><p>the raw type of {@code T}</p>\n</div></li></ul></div></div></div><div id='method-getType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.utils.TypeReference'>android.hardware.camera2.utils.TypeReference</span><br/><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference-method-getType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.utils.TypeReference-method-getType' class='name expandable'>getType</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the dynamic Type corresponding to the captured type {@code T}. ...</div><div class='long'><p>Return the dynamic Type corresponding to the captured type {@code T}.</p>\n</div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.utils.TypeReference'>android.hardware.camera2.utils.TypeReference</span><br/><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.utils.TypeReference-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc} ...</div><div class='long'><p>{@inheritDoc}</p>\n</div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.utils.TypeReference'>android.hardware.camera2.utils.TypeReference</span><br/><a href='source/TypeReference.html#android-hardware-camera2-utils-TypeReference-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.utils.TypeReference-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc} ...</div><div class='long'><p>{@inheritDoc}</p>\n</div></div></div></div></div></div></div>","meta":{}});