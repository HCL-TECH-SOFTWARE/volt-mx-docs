Ext.data.JsonP.android_hardware_hdmi_HdmiControlManager_VendorCommandListener({"tagname":"class","name":"android.hardware.hdmi.HdmiControlManager.VendorCommandListener","autodetected":{},"files":[{"filename":"VendorCommandListener.js","href":"VendorCommandListener.html#android-hardware-hdmi-HdmiControlManager-VendorCommandListener"}],"members":[{"name":"onControlStateChanged","tagname":"method","owner":"android.hardware.hdmi.HdmiControlManager.VendorCommandListener","id":"method-onControlStateChanged","meta":{}},{"name":"onReceived","tagname":"method","owner":"android.hardware.hdmi.HdmiControlManager.VendorCommandListener","id":"method-onReceived","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.hardware.hdmi.HdmiControlManager.VendorCommandListener","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/VendorCommandListener.html#android-hardware-hdmi-HdmiControlManager-VendorCommandListener' target='_blank'>VendorCommandListener.js</a></div></pre><div class='doc-contents'><p>Listener used to get vendor-specific commands.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onControlStateChanged' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.hdmi.HdmiControlManager.VendorCommandListener'>android.hardware.hdmi.HdmiControlManager.VendorCommandListener</span><br/><a href='source/VendorCommandListener.html#android-hardware-hdmi-HdmiControlManager-VendorCommandListener-method-onControlStateChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.hdmi.HdmiControlManager.VendorCommandListener-method-onControlStateChanged' class='name expandable'>onControlStateChanged</a>( <span class='pre'>enabled, reason</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The callback is called:\n \n      before HdmiControlService is disabled. ...</div><div class='long'><p>The callback is called:\n <ul>\n     <li> before HdmiControlService is disabled.\n     <li> after HdmiControlService is enabled and the local address is assigned.\n </li></li></ul>\n The client shouldn't hold the thread too long since this is a blocking call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>{@code true} if HdmiControlService is enabled.</p>\n</div></li><li><span class='pre'>reason</span> : Number<div class='sub-desc'><p>the reason code why the state of HdmiControlService is changed.\n@see #CONTROL_STATE_CHANGED_REASON_START\n@see #CONTROL_STATE_CHANGED_REASON_SETTING\n@see #CONTROL_STATE_CHANGED_REASON_WAKEUP\n@see #CONTROL_STATE_CHANGED_REASON_STANDBY</p>\n</div></li></ul></div></div></div><div id='method-onReceived' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.hdmi.HdmiControlManager.VendorCommandListener'>android.hardware.hdmi.HdmiControlManager.VendorCommandListener</span><br/><a href='source/VendorCommandListener.html#android-hardware-hdmi-HdmiControlManager-VendorCommandListener-method-onReceived' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.hdmi.HdmiControlManager.VendorCommandListener-method-onReceived' class='name expandable'>onReceived</a>( <span class='pre'>srcAddress, destAddress, params, hasVendorId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a vendor command is received. ...</div><div class='long'><p>Called when a vendor command is received.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>srcAddress</span> : Number<div class='sub-desc'><p>source logical address</p>\n</div></li><li><span class='pre'>destAddress</span> : Number<div class='sub-desc'><p>destination logical address</p>\n</div></li><li><span class='pre'>params</span> : Object {byte[]}<div class='sub-desc'><p>vendor-specific parameters</p>\n</div></li><li><span class='pre'>hasVendorId</span> : Boolean<div class='sub-desc'><p>{@code true} if the command is &lt;Vendor Command\n        With ID&gt;. The first 3 bytes of params is vendor id.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});