Ext.data.JsonP.android_security_keystore_recovery_RecoveryController({"tagname":"class","name":"android.security.keystore.recovery.RecoveryController","autodetected":{},"files":[{"filename":"RecoveryController.js","href":"RecoveryController.html#android-security-keystore-recovery-RecoveryController"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"RECOVERY_STATUS_PERMANENT_FAILURE","tagname":"property","owner":"android.security.keystore.recovery.RecoveryController","id":"property-RECOVERY_STATUS_PERMANENT_FAILURE","meta":{}},{"name":"RECOVERY_STATUS_SYNCED","tagname":"property","owner":"android.security.keystore.recovery.RecoveryController","id":"property-RECOVERY_STATUS_SYNCED","meta":{}},{"name":"RECOVERY_STATUS_SYNC_IN_PROGRESS","tagname":"property","owner":"android.security.keystore.recovery.RecoveryController","id":"property-RECOVERY_STATUS_SYNC_IN_PROGRESS","meta":{}},{"name":"createRecoverySession","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-createRecoverySession","meta":{}},{"name":"generateKey","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-generateKey","meta":{}},{"name":"getAliases","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-getAliases","meta":{}},{"name":"getInstance","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-getInstance","meta":{}},{"name":"getKey","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-getKey","meta":{}},{"name":"getKeyChainSnapshot","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-getKeyChainSnapshot","meta":{}},{"name":"getRecoverySecretTypes","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-getRecoverySecretTypes","meta":{}},{"name":"getRecoveryStatus","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-getRecoveryStatus","meta":{}},{"name":"getRootCertificates","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-getRootCertificates","meta":{}},{"name":"importKey","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-importKey","meta":{}},{"name":"initRecoveryService","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-initRecoveryService","meta":{}},{"name":"isRecoverableKeyStoreEnabled","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-isRecoverableKeyStoreEnabled","meta":{}},{"name":"removeKey","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-removeKey","meta":{}},{"name":"setRecoverySecretTypes","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-setRecoverySecretTypes","meta":{}},{"name":"setRecoveryStatus","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-setRecoveryStatus","meta":{}},{"name":"setServerParams","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-setServerParams","meta":{}},{"name":"setSnapshotCreatedPendingIntent","tagname":"method","owner":"android.security.keystore.recovery.RecoveryController","id":"method-setSnapshotCreatedPendingIntent","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.security.keystore.recovery.RecoveryController","short_doc":"Backs up cryptographic keys to remote secure hardware, encrypted with the user's lock screen. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.security.keystore.recovery.RecoveryController</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController' target='_blank'>RecoveryController.js</a></div></pre><div class='doc-contents'><p>Backs up cryptographic keys to remote secure hardware, encrypted with the user's lock screen.</p>\n\n<p> <p>A system app with the {@code android.permission.RECOVER_KEYSTORE} permission may generate or\n import recoverable keys using this class. To generate a key, the app must call\n <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-generateKey\" rel=\"android.security.keystore.recovery.RecoveryController-method-generateKey\" class=\"docClass\">generateKey</a>(String) with the desired alias for the key. This returns an AndroidKeyStore\n reference to a 256-bit javax.crypto.SecretKey, which can be used for AES/GCM/NoPadding.\n In order to get the same key again at a later time, the app can call <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-getKey\" rel=\"android.security.keystore.recovery.RecoveryController-method-getKey\" class=\"docClass\">getKey</a>(String) with\n the same alias. If a key is generated in this way the key's raw material is never directly\n exposed to the calling app. The system app may also import key material using\n byte[]). The app may only generate and import keys for its own\n {@code uid}.</p>\n\n<p> <p>The same system app must also register a Recovery Agent to manage syncing recoverable keys to\n remote secure hardware. The Recovery Agent is a service that registers itself with the controller\n as follows:</p>\n\n<p> <ul>\n     <li>Invokes byte[], byte[])\n     <ul>\n         <li>The first argument is the alias of the root certificate used to verify trusted\n         hardware modules. Each trusted hardware module must have a public key signed with this\n         root of trust. Roots of trust must be shipped with the framework. The app can list all\n         valid roots of trust by calling <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-getRootCertificates\" rel=\"android.security.keystore.recovery.RecoveryController-method-getRootCertificates\" class=\"docClass\">getRootCertificates</a>().\n         <li>The second argument is the UTF-8 bytes of the XML listing file. It lists the X509\n         certificates containing the public keys of all available remote trusted hardware modules.\n         Each of the X509 certificates can be validated against the chosen root of trust.\n         <li>The third argument is the UTF-8 bytes of the XML signing file. The file contains a\n         signature of the XML listing file. The signature can be validated against the chosen root\n         of trust.\n     </li></li></li></ul>\n     <p>This will cause the controller to choose a random public key from the list. From then\n     on the controller will attempt to sync the key chain with the trusted hardware module to whom\n     that key belongs.\n     <li>Invokes setServerParams(byte[]) with a byte string that identifies the device\n     to a remote server. This server may act as the front-end to the trusted hardware modules. It\n     is up to the Recovery Agent to decide how best to identify devices, but this could be, e.g.,\n     based on the <a href=\"https://developers.google.com/instance-id/\">Instance ID</a> of the\n     system app.\n     <li>Invokes setRecoverySecretTypes(int[]) with a list of types of secret used to\n     secure the recoverable key chain. For now only\n     <a href=\"#!/api/android.security.keystore.recovery.KeyChainProtectionParams-property-TYPE_LOCKSCREEN\" rel=\"android.security.keystore.recovery.KeyChainProtectionParams-property-TYPE_LOCKSCREEN\" class=\"docClass\">android.security.keystore.recovery.KeyChainProtectionParams.TYPE_LOCKSCREEN</a> is supported.\n     <li>Invokes <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-setSnapshotCreatedPendingIntent\" rel=\"android.security.keystore.recovery.RecoveryController-method-setSnapshotCreatedPendingIntent\" class=\"docClass\">setSnapshotCreatedPendingIntent</a>(PendingIntent) with a\n     PendingIntent that is to be invoked whenever a new snapshot is created. Although the\n     controller can create snapshots without the Recovery Agent registering this intent, it is a\n     good idea to register the intent so that the Recovery Agent is able to sync this snapshot to\n     the trusted hardware module as soon as it is available.\n </li></li></li></p></li></ul></p>\n\n<p> <p>The trusted hardware module's public key MUST be generated on secure hardware with protections\n equivalent to those described in the\n <a href=\"https://developer.android.com/preview/features/security/ckv-whitepaper.html\">Google\n Cloud Key Vault Service whitepaper</a>. The trusted hardware module itself must protect the key\n chain from brute-forcing using the methods also described in the whitepaper: i.e., it should\n limit the number of allowed attempts to enter the lock screen. If the number of attempts is\n exceeded the key material must no longer be recoverable.</p>\n\n<p> <p>A recoverable key chain snapshot is considered pending if any of the following conditions\n are met:</p>\n\n<p> <ul>\n     <li>The system app mutates the key chain. i.e., generates, imports, or removes a key.\n     <li>The user changes their lock screen.\n </li></li></ul></p>\n\n<p> <p>Whenever the user unlocks their device, if a snapshot is pending, the Recovery Controller\n generates a new snapshot. It follows these steps to do so:</p>\n\n<p> <ul>\n     <li>Generates a 256-bit AES key using java.security.SecureRandom. This is the\n     Recovery Key.\n     <li>Wraps the key material of all keys in the recoverable key chain with the Recovery Key.\n     <li>Encrypts the Recovery Key with both the public key of the trusted hardware module and a\n     symmetric key derived from the user's lock screen.\n </li></li></li></ul></p>\n\n<p> <p>The controller then writes this snapshot to disk, and uses the PendingIntent that was\n set by the Recovery Agent during initialization to inform it that a new snapshot is available.\n The snapshot only contains keys for that Recovery Agent's {@code uid} - i.e., keys the agent's\n app itself generated. If multiple Recovery Agents exist on the device, each will be notified of\n their new snapshots, and each snapshots' keys will be only those belonging to the same\n {@code uid}.</p>\n\n<p> <p>The Recovery Agent retrieves its most recent snapshot by calling\n <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-getKeyChainSnapshot\" rel=\"android.security.keystore.recovery.RecoveryController-method-getKeyChainSnapshot\" class=\"docClass\">getKeyChainSnapshot</a>(). It syncs the snapshot to the remote server. The snapshot contains\n the public key used for encryption, which the server uses to forward the encrypted recovery key\n to the correct trusted hardware module. The snapshot also contains the server params, which are\n used to identify this device to the server.</p>\n\n<p> <p>The client uses the server params to identify a device whose key chain it wishes to restore.\n This may be on a different device to the device that originally synced the key chain. The client\n sends the server params identifying the previous device to the server. The server returns the\n X509 certificate identifying the trusted hardware module in which the encrypted Recovery Key is\n stored. It also returns some vault parameters identifying that particular Recovery Key to the\n trusted hardware module. And it also returns a vault challenge, which is used as part of the\n vault opening protocol to ensure the recovery claim is fresh. See the whitepaper for more\n details.</p>\n\n<p> <p>The key chain is recovered via a <a href=\"#!/api/android.security.keystore.recovery.RecoverySession\" rel=\"android.security.keystore.recovery.RecoverySession\" class=\"docClass\">android.security.keystore.recovery.RecoverySession</a>. A Recovery Agent creates one by\n invoking <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-createRecoverySession\" rel=\"android.security.keystore.recovery.RecoveryController-method-createRecoverySession\" class=\"docClass\">createRecoverySession</a>(). It then invokes\n CertPath, byte[], byte[], List) with these arguments:</p>\n\n<p> <ul>\n     <li>The alias of the root of trust used to verify the trusted hardware module.\n     <li>The X509 certificate of the trusted hardware module.\n     <li>The vault parameters used to identify the Recovery Key to the trusted hardware module.\n     <li>The vault challenge, as issued by the trusted hardware module.\n     <li>A list of secrets, corresponding to the secrets used to protect the key chain. At the\n     moment this is a single <a href=\"#!/api/android.security.keystore.recovery.KeyChainProtectionParams\" rel=\"android.security.keystore.recovery.KeyChainProtectionParams\" class=\"docClass\">android.security.keystore.recovery.KeyChainProtectionParams</a> containing the lock screen of the\n     device whose key chain is to be recovered.\n </li></li></li></li></li></ul></p>\n\n<p> <p>This method returns a byte array containing the Recovery Claim, which can be issued to the\n remote trusted hardware module. It is encrypted with the trusted hardware module's public key\n (which has itself been certified with the root of trust). It also contains an ephemeral symmetric\n key generated for this recovery session, which the remote trusted hardware module uses to encrypt\n its responses. This is the Session Key.</p>\n\n<p> <p>If the lock screen provided is correct, the remote trusted hardware module decrypts one of the\n layers of lock-screen encryption from the Recovery Key. It then returns this key, encrypted with\n the Session Key to the Recovery Agent. As the Recovery Agent does not know the Session Key, it\n must then invoke List) with the encrypted\n Recovery Key and the list of wrapped application keys. The controller then decrypts the layer of\n encryption provided by the Session Key, and uses the lock screen to decrypt the final layer of\n encryption. It then uses the Recovery Key to decrypt all of the wrapped application keys, and\n imports them into its own KeyStore. The Recovery Agent's app may then access these keys by\n calling <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-getKey\" rel=\"android.security.keystore.recovery.RecoveryController-method-getKey\" class=\"docClass\">getKey</a>(String). Only this app's {@code uid} may access the keys that have been\n recovered.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-RECOVERY_STATUS_PERMANENT_FAILURE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-property-RECOVERY_STATUS_PERMANENT_FAILURE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_PERMANENT_FAILURE' class='name expandable'>RECOVERY_STATUS_PERMANENT_FAILURE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Key cannot be synced. ...</div><div class='long'><p>Key cannot be synced.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-RECOVERY_STATUS_SYNCED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-property-RECOVERY_STATUS_SYNCED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNCED' class='name expandable'>RECOVERY_STATUS_SYNCED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Key has been successfully synced. ...</div><div class='long'><p>Key has been successfully synced.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-RECOVERY_STATUS_SYNC_IN_PROGRESS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-property-RECOVERY_STATUS_SYNC_IN_PROGRESS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNC_IN_PROGRESS' class='name expandable'>RECOVERY_STATUS_SYNC_IN_PROGRESS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Waiting for recovery agent to sync the key. ...</div><div class='long'><p>Waiting for recovery agent to sync the key.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-createRecoverySession' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-createRecoverySession' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-createRecoverySession' class='name expandable'>createRecoverySession</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new android.security.keystore.recovery.RecoverySession. ...</div><div class='long'><p>Returns a new <a href=\"#!/api/android.security.keystore.recovery.RecoverySession\" rel=\"android.security.keystore.recovery.RecoverySession\" class=\"docClass\">android.security.keystore.recovery.RecoverySession</a>.</p>\n\n<p> <p>A recovery session is required to restore keys from a remote store.</p>\n</div></div></div><div id='method-generateKey' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-generateKey' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-generateKey' class='name expandable'>generateKey</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a recoverable key with the given {@code alias} and {@code metadata}. ...</div><div class='long'><p>Generates a recoverable key with the given {@code alias} and {@code metadata}.</p>\n\n<p> <p>The metadata should contain any data that needs to be cryptographically bound to the\n generated key, but does not need to be encrypted by the key. For example, the metadata can\n be a byte string describing the algorithms and non-secret parameters to be used with the\n key. The supplied metadata can later be obtained via\n android.security.keystore.recovery.WrappedApplicationKey.getMetadata().</p>\n\n<p> <p>During the key recovery process, the same metadata has to be supplied via\n android.security.keystore.recovery.WrappedApplicationKey.Builder.setMetadata(byte[]); otherwise, the recovery process\n will fail due to the checking of the cryptographic binding. This can help prevent\n potential attacks that try to swap key materials on the backup server and trick the\n application to use keys with different algorithms or parameters.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>LockScreenRequiredException if the user does not have a lock screen set. A lock\n     screen is required to generate recoverable keys.</p>\n</div></li></ul></div></div></div><div id='method-getAliases' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-getAliases' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-getAliases' class='name expandable'>getAliases</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a list of aliases of keys belonging to the application. ...</div><div class='long'><p>Returns a list of aliases of keys belonging to the application.</p>\n</div></div></div><div id='method-getInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets a new instance of the class. ...</div><div class='long'><p>Gets a new instance of the class.</p>\n</div></div></div><div id='method-getKey' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-getKey' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-getKey' class='name expandable'>getKey</a>( <span class='pre'>alias</span> ) : Object {java.security.Key}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets a key called {@code alias} from the recoverable key store. ...</div><div class='long'><p>Gets a key called {@code alias} from the recoverable key store.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>The key alias.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.Key}</span><div class='sub-desc'><p>The key.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnrecoverableKeyException if key is permanently invalidated or not found.</p>\n</div></li></ul></div></div></div><div id='method-getKeyChainSnapshot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-getKeyChainSnapshot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-getKeyChainSnapshot' class='name expandable'>getKeyChainSnapshot</a>( <span class='pre'></span> ) : Object {android.security.keystore.recovery.KeyChainSnapshot}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns data necessary to store all recoverable keys. ...</div><div class='long'><p>Returns data necessary to store all recoverable keys. Key material is\n encrypted with user secret and recovery public key.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.security.keystore.recovery.KeyChainSnapshot}</span><div class='sub-desc'><p>Data necessary to recover keystore or {@code null} if snapshot is not available.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div><div id='method-getRecoverySecretTypes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-getRecoverySecretTypes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-getRecoverySecretTypes' class='name expandable'>getRecoverySecretTypes</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines a set of secret types used for end-to-end keystore encryption. ...</div><div class='long'><p>Defines a set of secret types used for end-to-end keystore encryption. Knowing all of them is\n necessary to generate KeyChainSnapshot.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>list of recovery secret types\n@see KeyChainSnapshot</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div><div id='method-getRecoveryStatus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-getRecoveryStatus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-getRecoveryStatus' class='name expandable'>getRecoveryStatus</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the recovery status for the key with the given {@code alias}. ...</div><div class='long'><p>Returns the recovery status for the key with the given {@code alias}.</p>\n\n<p> <ul>\n   <li><a href=\"#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNCED\" rel=\"android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNCED\" class=\"docClass\">RECOVERY_STATUS_SYNCED</a>\n   <li><a href=\"#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNC_IN_PROGRESS\" rel=\"android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNC_IN_PROGRESS\" class=\"docClass\">RECOVERY_STATUS_SYNC_IN_PROGRESS</a>\n   <li><a href=\"#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_PERMANENT_FAILURE\" rel=\"android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_PERMANENT_FAILURE\" class=\"docClass\">RECOVERY_STATUS_PERMANENT_FAILURE</a>\n </li></li></li></ul>\n@see <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-setRecoveryStatus\" rel=\"android.security.keystore.recovery.RecoveryController-method-setRecoveryStatus\" class=\"docClass\">setRecoveryStatus</a>(String, int)</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div><div id='method-getRootCertificates' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-getRootCertificates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-getRootCertificates' class='name expandable'>getRootCertificates</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-importKey' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-importKey' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-importKey' class='name expandable'>importKey</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Imports a recoverable 256-bit AES key with the given {@code alias}, the raw bytes {@code\n keyBytes}, and the {@code m...</div><div class='long'><p>Imports a recoverable 256-bit AES key with the given {@code alias}, the raw bytes {@code\n keyBytes}, and the {@code metadata}.</p>\n\n<p> <p>The metadata should contain any data that needs to be cryptographically bound to the\n imported key, but does not need to be encrypted by the key. For example, the metadata can\n be a byte string describing the algorithms and non-secret parameters to be used with the\n key. The supplied metadata can later be obtained via\n android.security.keystore.recovery.WrappedApplicationKey.getMetadata().</p>\n\n<p> <p>During the key recovery process, the same metadata has to be supplied via\n android.security.keystore.recovery.WrappedApplicationKey.Builder.setMetadata(byte[]); otherwise, the recovery process\n will fail due to the checking of the cryptographic binding. This can help prevent\n potential attacks that try to swap key materials on the backup server and trick the\n application to use keys with different algorithms or parameters.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>LockScreenRequiredException if the user does not have a lock screen set. A lock\n     screen is required to generate recoverable keys.</p>\n</div></li></ul></div></div></div><div id='method-initRecoveryService' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-initRecoveryService' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-initRecoveryService' class='name expandable'>initRecoveryService</a>( <span class='pre'>rootCertificateAlias, certificateFile, signatureFile</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initializes the recovery service for the calling application. ...</div><div class='long'><p>Initializes the recovery service for the calling application. The detailed steps should be:\n <ol>\n     <li>Parse {@code signatureFile} to get relevant information.\n     <li>Validate the signer's X509 certificate, contained in {@code signatureFile}, against\n         the root certificate pre-installed in the OS and chosen by {@code\n         rootCertificateAlias}.\n     <li>Verify the public-key signature, contained in {@code signatureFile}, and verify it\n         against the entire {@code certificateFile}.\n     <li>Parse {@code certificateFile} to get relevant information.\n     <li>Check the serial number, contained in {@code certificateFile}, and skip the following\n         steps if the serial number is not larger than the one previously stored.\n     <li>Randomly choose a X509 certificate from the endpoint X509 certificates, contained in\n         {@code certificateFile}, and validate it against the root certificate pre-installed\n         in the OS and chosen by {@code rootCertificateAlias}.\n     <li>Store the chosen X509 certificate and the serial in local database for later use.\n </li></li></li></li></li></li></li></ol></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rootCertificateAlias</span> : String<div class='sub-desc'><p>the alias of a root certificate pre-installed in the OS</p>\n</div></li><li><span class='pre'>certificateFile</span> : Object {byte[]}<div class='sub-desc'><p>the binary content of the XML file containing a list of recovery\n     service X509 certificates, and other metadata including the serial number</p>\n</div></li><li><span class='pre'>signatureFile</span> : Object {byte[]}<div class='sub-desc'><p>the binary content of the XML file containing the public-key signature\n     of the entire certificate file, and a signer's X509 certificate</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CertificateException if the given certificate files cannot be parsed or validated</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div><div id='method-isRecoverableKeyStoreEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-isRecoverableKeyStoreEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-isRecoverableKeyStoreEnabled' class='name expandable'>isRecoverableKeyStoreEnabled</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks whether the recoverable key store is currently available. ...</div><div class='long'><p>Checks whether the recoverable key store is currently available.</p>\n\n<p> <p>If it returns true, the device must currently be using a screen lock that is supported for\n use with the recoverable key store, i.e. AOSP PIN, pattern or password.</p>\n</div></div></div><div id='method-removeKey' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-removeKey' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-removeKey' class='name expandable'>removeKey</a>( <span class='pre'>alias</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a key called {@code alias} from the recoverable key store. ...</div><div class='long'><p>Removes a key called {@code alias} from the recoverable key store.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>The key alias.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div><div id='method-setRecoverySecretTypes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-setRecoverySecretTypes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-setRecoverySecretTypes' class='name expandable'>setRecoverySecretTypes</a>( <span class='pre'>secretTypes</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies a set of secret types used for end-to-end keystore encryption. ...</div><div class='long'><p>Specifies a set of secret types used for end-to-end keystore encryption. Knowing all of them\n is necessary to recover data.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>secretTypes</span> : Object {int[]}<div class='sub-desc'><p>KeyChainProtectionParams.TYPE_LOCKSCREEN</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div><div id='method-setRecoveryStatus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-setRecoveryStatus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-setRecoveryStatus' class='name expandable'>setRecoveryStatus</a>( <span class='pre'>alias, status</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the recovery status for given key. ...</div><div class='long'><p>Sets the recovery status for given key. It is used to notify the keystore that the key was\n successfully stored on the server or that there was an error. An application can check this\n value using String).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>The alias of the key whose status to set.</p>\n</div></li><li><span class='pre'>status</span> : Number<div class='sub-desc'><p>The status of the key. One of <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNCED\" rel=\"android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNCED\" class=\"docClass\">RECOVERY_STATUS_SYNCED</a>,\n     <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNC_IN_PROGRESS\" rel=\"android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_SYNC_IN_PROGRESS\" class=\"docClass\">RECOVERY_STATUS_SYNC_IN_PROGRESS</a> or <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_PERMANENT_FAILURE\" rel=\"android.security.keystore.recovery.RecoveryController-property-RECOVERY_STATUS_PERMANENT_FAILURE\" class=\"docClass\">RECOVERY_STATUS_PERMANENT_FAILURE</a>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div><div id='method-setServerParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-setServerParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-setServerParams' class='name expandable'>setServerParams</a>( <span class='pre'>serverParams</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Server parameters used to generate new recovery key blobs. ...</div><div class='long'><p>Server parameters used to generate new recovery key blobs. This value will be included in\n {@code KeyChainSnapshot.getEncryptedRecoveryKeyBlob()}. The same value must be included\n in vaultParams byte[], byte[], List).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>serverParams</span> : Object {byte[]}<div class='sub-desc'><p>included in recovery key blob.\n@see <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-getKeyChainSnapshot\" rel=\"android.security.keystore.recovery.RecoveryController-method-getKeyChainSnapshot\" class=\"docClass\">getKeyChainSnapshot</a></p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div><div id='method-setSnapshotCreatedPendingIntent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.keystore.recovery.RecoveryController'>android.security.keystore.recovery.RecoveryController</span><br/><a href='source/RecoveryController.html#android-security-keystore-recovery-RecoveryController-method-setSnapshotCreatedPendingIntent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.keystore.recovery.RecoveryController-method-setSnapshotCreatedPendingIntent' class='name expandable'>setSnapshotCreatedPendingIntent</a>( <span class='pre'>intent</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets a listener which notifies recovery agent that new recovery snapshot is available. ...</div><div class='long'><p>Sets a listener which notifies recovery agent that new recovery snapshot is available. <a href=\"#!/api/android.security.keystore.recovery.RecoveryController-method-getKeyChainSnapshot\" rel=\"android.security.keystore.recovery.RecoveryController-method-getKeyChainSnapshot\" class=\"docClass\">getKeyChainSnapshot</a> can be used to get the snapshot. Note that every recovery agent can\n have at most one registered listener at any time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>intent</span> : Object {PendingIntent}<div class='sub-desc'><p>triggered when new snapshot is available. Unregisters listener if the value is\n     {@code null}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InternalRecoveryServiceException if an unexpected error occurred in the recovery\n     service.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});