Ext.data.JsonP.android_provider_ContactsContract_Data({"tagname":"class","name":"android.provider.ContactsContract.Data","autodetected":{},"files":[{"filename":"Data.js","href":"Data.html#android-provider-ContactsContract-Data"}],"extends":"java.lang.Object","members":[{"name":"CONTENT_TYPE","tagname":"property","owner":"android.provider.ContactsContract.Data","id":"property-CONTENT_TYPE","meta":{}},{"name":"CONTENT_URI","tagname":"property","owner":"android.provider.ContactsContract.Data","id":"property-CONTENT_URI","meta":{}},{"name":"VISIBLE_CONTACTS_ONLY","tagname":"property","owner":"android.provider.ContactsContract.Data","id":"property-VISIBLE_CONTACTS_ONLY","meta":{}},{"name":"getContactLookupUri","tagname":"method","owner":"android.provider.ContactsContract.Data","id":"method-getContactLookupUri","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.provider.ContactsContract.Data","short_doc":"implements android.provider.ContactsContract.DataColumnsWithJoins\n\n implements android.provider.ContactsContract.Cont...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.provider.ContactsContract.Data</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Data.html#android-provider-ContactsContract-Data' target='_blank'>Data.js</a></div></pre><div class='doc-contents'><p>implements android.provider.ContactsContract.DataColumnsWithJoins</p>\n\n<p> implements android.provider.ContactsContract.ContactCounts</p>\n\n<p>\n Constants for the data table, which contains data points tied to a raw\n contact.  Each row of the data table is typically used to store a single\n piece of contact\n information (such as a phone number) and its\n associated metadata (such as whether it is a work or home number).\n </p>\n\n\n<p> <h3>Data kinds</h3>\n <p>\n Data is a generic table that can hold any kind of contact data.\n The kind of data stored in a given row is specified by the row's\n MIMETYPE value, which determines the meaning of the\n generic columns DATA1 through\n DATA15.\n For example, if the data kind is\n android.provider.CommonDataKinds.Phone.CONTENT_ITEM_TYPE, then the column\n DATA1 stores the\n phone number, but if the data kind is\n android.provider.android.provider.ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE, then DATA1\n stores the email address.\n Sync adapters and applications can introduce their own data kinds.\n </p>\n <p>\n ContactsContract defines a small number of pre-defined data kinds, e.g.\n <a href=\"#!/api/android.provider.ContactsContract.CommonDataKinds.Phone\" rel=\"android.provider.ContactsContract.CommonDataKinds.Phone\" class=\"docClass\">android.provider.ContactsContract.CommonDataKinds.Phone</a>, <a href=\"#!/api/android.provider.ContactsContract.CommonDataKinds.Email\" rel=\"android.provider.ContactsContract.CommonDataKinds.Email\" class=\"docClass\">android.provider.ContactsContract.CommonDataKinds.Email</a> etc. As a\n convenience, these classes define data kind specific aliases for DATA1 etc.\n For example, android.provider.CommonDataKinds.Phone.NUMBER is the same as\n <a href=\"#!/api/android.provider.ContactsContract.Data\" rel=\"android.provider.ContactsContract.Data\" class=\"docClass\">Data.DATA1</a>.\n </p>\n <p>\n DATA1 is an indexed column and should be used for the data element that is\n expected to be most frequently used in query selections. For example, in the\n case of a row representing email addresses DATA1 should probably\n be used for the email address itself, while DATA2 etc can be\n used for auxiliary information like type of email address.\n <p>\n <p>\n By convention, DATA15 is used for storing BLOBs (binary data).\n </p>\n <p>\n The sync adapter for a given account type must correctly handle every data type\n used in the corresponding raw contacts.  Otherwise it could result in lost or\n corrupted data.\n </p>\n <p>\n Similarly, you should refrain from introducing new kinds of data for an other\n party's account types. For example, if you add a data row for\n \"favorite song\" to a raw contact owned by a Google account, it will not\n get synced to the server, because the Google sync adapter does not know\n how to handle this data kind. Thus new data kinds are typically\n introduced along with new account types, i.e. new sync adapters.\n </p>\n <h3>Batch operations</h3>\n <p>\n Data rows can be inserted/updated/deleted using the traditional\n ContentResolver.insert, ContentResolver.update and\n ContentResolver.delete methods, however the newer mechanism based\n on a batch of ContentProviderOperation will prove to be a better\n choice in almost all cases. All operations in a batch are executed in a\n single transaction, which ensures that the phone-side and server-side\n state of a raw contact are always consistent. Also, the batch-based\n approach is far more efficient: not only are the database operations\n faster when executed in a single transaction, but also sending a batch of\n commands to the content provider saves a lot of time on context switching\n between your process and the process in which the content provider runs.\n </p>\n <p>\n The flip side of using batched operations is that a large batch may lock\n up the database for a long time preventing other applications from\n accessing data and potentially causing ANRs (\"Application Not Responding\"\n dialogs.)\n </p>\n <p>\n To avoid such lockups of the database, make sure to insert \"yield points\"\n in the batch. A yield point indicates to the content provider that before\n executing the next operation it can commit the changes that have already\n been made, yield to other requests, open another transaction and continue\n processing operations. A yield point will not automatically commit the\n transaction, but only if there is another request waiting on the\n database. Normally a sync adapter should insert a yield point at the\n beginning of each raw contact operation sequence in the batch. See\n ContentProviderOperation.Builder.withYieldAllowed(boolean).\n </p>\n <h3>Operations</h3>\n <dl>\n <dt><b>Insert</b></dt>\n <dd>\n <p>\n An individual data row can be inserted using the traditional\n ContentValues) method. Multiple rows\n should always be inserted as a batch.\n </p>\n <p>\n An example of a traditional insert:</p>\n\n<pre> ContentValues values = new ContentValues();\n values.put(Data.RAW_CONTACT_ID, rawContactId);\n values.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);\n values.put(Phone.NUMBER, \"1-800-GOOG-411\");\n values.put(Phone.TYPE, Phone.TYPE_CUSTOM);\n values.put(Phone.LABEL, \"free directory assistance\");\n Uri dataUri = getContentResolver().insert(Data.CONTENT_URI, values);\n </pre>\n\n\n<p> <p>\n The same done using ContentProviderOperations:</p>\n\n<pre> ArrayList&lt;ContentProviderOperation&gt; ops =\n          new ArrayList&lt;ContentProviderOperation&gt;();\n\n ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI)\n          .withValue(Data.RAW_CONTACT_ID, rawContactId)\n          .withValue(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE)\n          .withValue(Phone.NUMBER, \"1-800-GOOG-411\")\n          .withValue(Phone.TYPE, Phone.TYPE_CUSTOM)\n          .withValue(Phone.LABEL, \"free directory assistance\")\n          .build());\n getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);\n </pre>\n\n\n<p> </p>\n <dt><b>Update</b></dt>\n <dd>\n <p>\n Just as with insert, update can be done incrementally or as a batch,\n the batch mode being the preferred method:</p>\n\n<pre> ArrayList&lt;ContentProviderOperation&gt; ops =\n          new ArrayList&lt;ContentProviderOperation&gt;();\n\n ops.add(ContentProviderOperation.newUpdate(Data.CONTENT_URI)\n          .withSelection(Data._ID + \"=?\", new String[]{String.valueOf(dataId)})\n          .withValue(Email.DATA, \"somebody@android.com\")\n          .build());\n getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);\n </pre>\n\n\n<p> </p>\n </dd>\n <dt><b>Delete</b></dt>\n <dd>\n <p>\n Just as with insert and update, deletion can be done either using the\n ContentResolver.delete method or using a ContentProviderOperation:</p>\n\n<pre> ArrayList&lt;ContentProviderOperation&gt; ops =\n          new ArrayList&lt;ContentProviderOperation&gt;();\n\n ops.add(ContentProviderOperation.newDelete(Data.CONTENT_URI)\n          .withSelection(Data._ID + \"=?\", new String[]{String.valueOf(dataId)})\n          .build());\n getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);\n </pre>\n\n\n<p> </p>\n </dd>\n <dt><b>Query</b></dt>\n <dd>\n <p>\n <dl>\n <dt>Finding all Data of a given type for a given contact</dt>\n <dd></dd></dl></p>\n\n<pre> Cursor c = getContentResolver().query(Data.CONTENT_URI,\n          new String[] {Data._ID, Phone.NUMBER, Phone.TYPE, Phone.LABEL},\n          Data.CONTACT_ID + &quot;=?&quot; + \" AND \"\n                  + Data.MIMETYPE + \"='\" + Phone.CONTENT_ITEM_TYPE + \"'\",\n          new String[] {String.valueOf(contactId)}, null);\n </pre>\n\n\n<p> </p>\n <p>\n </p></dd>\n <dt>Finding all Data of a given type for a given raw contact</dt>\n <dd></dd></p>\n\n<pre> Cursor c = getContentResolver().query(Data.CONTENT_URI,\n          new String[] {Data._ID, Phone.NUMBER, Phone.TYPE, Phone.LABEL},\n          Data.RAW_CONTACT_ID + &quot;=?&quot; + \" AND \"\n                  + Data.MIMETYPE + \"='\" + Phone.CONTENT_ITEM_TYPE + \"'\",\n          new String[] {String.valueOf(rawContactId)}, null);\n </pre>\n\n\n<p> </p></dd>\n <dt>Finding all Data for a given raw contact</dt>\n <dd>\n Most sync adapters will want to read all data rows for a raw contact\n along with the raw contact itself.  For that you should use the\n <a href=\"#!/api/android.provider.ContactsContract.RawContactsEntity\" rel=\"android.provider.ContactsContract.RawContactsEntity\" class=\"docClass\">android.provider.ContactsContract.RawContactsEntity</a>. See also <a href=\"#!/api/android.provider.ContactsContract.RawContacts\" rel=\"android.provider.ContactsContract.RawContacts\" class=\"docClass\">android.provider.ContactsContract.RawContacts</a>.\n </dd>\n </dl>\n </p>\n \n \n <h2>Columns</h2>\n <p>\n Many columns are available via a <a href=\"#!/api/android.provider.ContactsContract.Data-property-CONTENT_URI\" rel=\"android.provider.ContactsContract.Data-property-CONTENT_URI\" class=\"docClass\">CONTENT_URI</a> query.  For best performance you\n should explicitly specify a projection to only those columns that you need.\n </p>\n <table class=\"jd-sumtable\">\n <tr>\n <th colspan='4'>Data</th>\n </tr>\n <tr>\n <td style=\"width: 7em;\">long</td>\n <td style=\"width: 20em;\">_ID</td>\n <td style=\"width: 5em;\">read-only</td>\n <td>Row ID. Sync adapter should try to preserve row IDs during updates. In other words,\n it would be a bad idea to delete and reinsert a data row. A sync adapter should\n always do an update instead.</td>\n </tr>\n <tr>\n <td>String</td>\n <td>MIMETYPE</td>\n <td>read/write-once</td>\n <td>\n <p>The MIME type of the item represented by this row. Examples of common\n MIME types are:\n <ul>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE</li>\n <li>android.provider.CommonDataKinds.Phone.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE</li>\n <li>android.provider.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE</li>\n <li>android.provider.Contacts.GroupMembership.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.Relation.CONTENT_ITEM_TYPE</li>\n <li>android.provider.android.provider.ContactsContract.CommonDataKinds.SipAddress.CONTENT_ITEM_TYPE</li>\n </ul>\n </p>\n </td>\n </tr>\n <tr>\n <td>long</td>\n <td>RAW_CONTACT_ID</td>\n <td>read/write-once</td>\n <td>The id of the row in the <a href=\"#!/api/android.provider.ContactsContract.RawContacts\" rel=\"android.provider.ContactsContract.RawContacts\" class=\"docClass\">android.provider.ContactsContract.RawContacts</a> table that this data belongs to.</td>\n </tr>\n <tr>\n <td>int</td>\n <td>IS_PRIMARY</td>\n <td>read/write</td>\n <td>Whether this is the primary entry of its kind for the raw contact it belongs to.\n \"1\" if true, \"0\" if false.\n </td>\n </tr>\n <tr>\n <td>int</td>\n <td>IS_SUPER_PRIMARY</td>\n <td>read/write</td>\n <td>Whether this is the primary entry of its kind for the aggregate\n contact it belongs to. Any data record that is \"super primary\" must\n also be \"primary\".  For example, the super-primary entry may be\n interpreted as the default contact value of its kind (for example,\n the default phone number to use for the contact).</td>\n </tr>\n <tr>\n <td>int</td>\n <td>DATA_VERSION</td>\n <td>read-only</td>\n <td>The version of this data record. Whenever the data row changes\n the version goes up. This value is monotonically increasing.</td>\n </tr>\n <tr>\n <td>Any type</td>\n <td>\n DATA1<br>\n DATA2<br>\n DATA3<br>\n DATA4<br>\n DATA5<br>\n DATA6<br>\n DATA7<br>\n DATA8<br>\n DATA9<br>\n DATA10<br>\n DATA11<br>\n DATA12<br>\n DATA13<br>\n DATA14<br>\n DATA15\n </td>\n <td>read/write</td>\n <td>\n <p>\n Generic data columns.  The meaning of each column is determined by the\n MIMETYPE.  By convention, DATA15 is used for storing\n BLOBs (binary data).\n </p>\n <p>\n Data columns whose meaning is not explicitly defined for a given MIMETYPE\n should not be used.  There is no guarantee that any sync adapter will\n preserve them.  Sync adapters themselves should not use such columns either,\n but should instead use SYNC1-SYNC4.\n </p>\n </td>\n </tr>\n <tr>\n <td>Any type</td>\n <td>\n SYNC1<br>\n SYNC2<br>\n SYNC3<br>\n SYNC4\n </td>\n <td>read/write</td>\n <td>Generic columns for use by sync adapters. For example, a Photo row\n may store the image URL in SYNC1, a status (not loaded, loading, loaded, error)\n in SYNC2, server-side version number in SYNC3 and error code in SYNC4.</td>\n </tr>\n </table></p>\n\n<p> <p>\n Some columns from the most recent associated status update are also available\n through an implicit join.\n </p>\n <table class=\"jd-sumtable\">\n <tr>\n <th colspan='4'>Join with android.provider.VoicemailContract.StatusUpdates</th>\n </tr>\n <tr>\n <td style=\"width: 7em;\">int</td>\n <td style=\"width: 20em;\">PRESENCE</td>\n <td style=\"width: 5em;\">read-only</td>\n <td>IM presence status linked to this data row. Compare with\n CONTACT_PRESENCE, which contains the contact's presence across\n all IM rows. See android.provider.VoicemailContract.StatusUpdates for individual status definitions.\n The provider may choose not to store this value\n in persistent storage. The expectation is that presence status will be\n updated on a regular basis.\n </td>\n </tr>\n <tr>\n <td>String</td>\n <td>STATUS</td>\n <td>read-only</td>\n <td>Latest status update linked with this data row.</td>\n </tr>\n <tr>\n <td>long</td>\n <td>STATUS_TIMESTAMP</td>\n <td>read-only</td>\n <td>The absolute time in milliseconds when the latest status was\n inserted/updated for this data row.</td>\n </tr>\n <tr>\n <td>String</td>\n <td>STATUS_RES_PACKAGE</td>\n <td>read-only</td>\n <td>The package containing resources for this status: label and icon.</td>\n </tr>\n <tr>\n <td>long</td>\n <td>STATUS_LABEL</td>\n <td>read-only</td>\n <td>The resource ID of the label describing the source of status update linked\n to this data row. This resource is scoped by the STATUS_RES_PACKAGE.</td>\n </tr>\n <tr>\n <td>long</td>\n <td>STATUS_ICON</td>\n <td>read-only</td>\n <td>The resource ID of the icon for the source of the status update linked\n to this data row. This resource is scoped by the STATUS_RES_PACKAGE.</td>\n </tr>\n </table></p>\n\n<p> <p>\n Some columns from the associated raw contact are also available through an\n implicit join.  The other columns are excluded as uninteresting in this\n context.\n </p></p>\n\n<p> <table class=\"jd-sumtable\">\n <tr>\n <th colspan='4'>Join with <a href=\"#!/api/android.provider.ContactsContract.RawContacts\" rel=\"android.provider.ContactsContract.RawContacts\" class=\"docClass\">android.provider.ContactsContract.RawContacts</a></th>\n </tr>\n <tr>\n <td style=\"width: 7em;\">long</td>\n <td style=\"width: 20em;\">CONTACT_ID</td>\n <td style=\"width: 5em;\">read-only</td>\n <td>The id of the row in the <a href=\"#!/api/android.provider.Contacts\" rel=\"android.provider.Contacts\" class=\"docClass\">android.provider.Contacts</a> table that this data belongs\n to.</td>\n </tr>\n <tr>\n <td>int</td>\n <td>AGGREGATION_MODE</td>\n <td>read-only</td>\n <td>See <a href=\"#!/api/android.provider.ContactsContract.RawContacts\" rel=\"android.provider.ContactsContract.RawContacts\" class=\"docClass\">android.provider.ContactsContract.RawContacts</a>.</td>\n </tr>\n <tr>\n <td>int</td>\n <td>DELETED</td>\n <td>read-only</td>\n <td>See <a href=\"#!/api/android.provider.ContactsContract.RawContacts\" rel=\"android.provider.ContactsContract.RawContacts\" class=\"docClass\">android.provider.ContactsContract.RawContacts</a>.</td>\n </tr>\n </table></p>\n\n<p> <p>\n The ID column for the associated aggregated contact table\n android.provider.ContactsContract.Contacts is available\n via the implicit join to the <a href=\"#!/api/android.provider.ContactsContract.RawContacts\" rel=\"android.provider.ContactsContract.RawContacts\" class=\"docClass\">android.provider.ContactsContract.RawContacts</a> table, see above.\n The remaining columns from this table are also\n available, through an implicit join.  This\n facilitates lookup by\n the value of a single data element, such as the email address.\n </p></p>\n\n<p> <table class=\"jd-sumtable\">\n <tr>\n <th colspan='4'>Join with android.provider.ContactsContract.Contacts</th>\n </tr>\n <tr>\n <td style=\"width: 7em;\">String</td>\n <td style=\"width: 20em;\">LOOKUP_KEY</td>\n <td style=\"width: 5em;\">read-only</td>\n <td>See android.provider.ContactsContract.Contacts</td>\n </tr>\n <tr>\n <td>String</td>\n <td>DISPLAY_NAME</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts</td>\n </tr>\n <tr>\n <td>long</td>\n <td>PHOTO_ID</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>int</td>\n <td>IN_VISIBLE_GROUP</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>int</td>\n <td>HAS_PHONE_NUMBER</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>int</td>\n <td>STARRED</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>String</td>\n <td>CUSTOM_RINGTONE</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>int</td>\n <td>SEND_TO_VOICEMAIL</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>int</td>\n <td>CONTACT_PRESENCE</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>String</td>\n <td>CONTACT_STATUS</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>long</td>\n <td>CONTACT_STATUS_TIMESTAMP</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>String</td>\n <td>CONTACT_STATUS_RES_PACKAGE</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>long</td>\n <td>CONTACT_STATUS_LABEL</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n <tr>\n <td>long</td>\n <td>CONTACT_STATUS_ICON</td>\n <td>read-only</td>\n <td>See android.provider.ContactsContract.Contacts.</td>\n </tr>\n </table></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-CONTENT_TYPE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.provider.ContactsContract.Data'>android.provider.ContactsContract.Data</span><br/><a href='source/Data.html#android-provider-ContactsContract-Data-property-CONTENT_TYPE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.provider.ContactsContract.Data-property-CONTENT_TYPE' class='name expandable'>CONTENT_TYPE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The MIME type of the results from CONTENT_URI. ...</div><div class='long'><p>The MIME type of the results from <a href=\"#!/api/android.provider.ContactsContract.Data-property-CONTENT_URI\" rel=\"android.provider.ContactsContract.Data-property-CONTENT_URI\" class=\"docClass\">CONTENT_URI</a>.</p>\n<p>Defaults to: <code>&quot;vnd.android.cursor.dir/data&quot;</code></p></div></div></div><div id='property-CONTENT_URI' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.provider.ContactsContract.Data'>android.provider.ContactsContract.Data</span><br/><a href='source/Data.html#android-provider-ContactsContract-Data-property-CONTENT_URI' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.provider.ContactsContract.Data-property-CONTENT_URI' class='name expandable'>CONTENT_URI</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The content:// style URI for this table, which requests a directory\nof data rows matching the selection criteria. ...</div><div class='long'><p>The content:// style URI for this table, which requests a directory\nof data rows matching the selection criteria.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-VISIBLE_CONTACTS_ONLY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.provider.ContactsContract.Data'>android.provider.ContactsContract.Data</span><br/><a href='source/Data.html#android-provider-ContactsContract-Data-property-VISIBLE_CONTACTS_ONLY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.provider.ContactsContract.Data-property-VISIBLE_CONTACTS_ONLY' class='name expandable'>VISIBLE_CONTACTS_ONLY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A boolean parameter for CONTENT_URI. ...</div><div class='long'><p>A boolean parameter for <a href=\"#!/api/android.provider.ContactsContract.Data-property-CONTENT_URI\" rel=\"android.provider.ContactsContract.Data-property-CONTENT_URI\" class=\"docClass\">CONTENT_URI</a>.\nThis specifies whether or not the returned data items should be filtered to show\ndata items belonging to visible contacts only.</p>\n<p>Defaults to: <code>&quot;visible_contacts_only&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getContactLookupUri' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.provider.ContactsContract.Data'>android.provider.ContactsContract.Data</span><br/><a href='source/Data.html#android-provider-ContactsContract-Data-method-getContactLookupUri' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.provider.ContactsContract.Data-method-getContactLookupUri' class='name expandable'>getContactLookupUri</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Build a android.provider.ContactsContract.Contacts.CONTENT_LOOKUP_URI\n style Uri for the parent android.provider.Cont...</div><div class='long'><p>\n Build a android.provider.ContactsContract.Contacts.CONTENT_LOOKUP_URI\n style Uri for the parent android.provider.ContactsContract.Contacts\n entry of the given <a href=\"#!/api/android.provider.ContactsContract.Data\" rel=\"android.provider.ContactsContract.Data\" class=\"docClass\">android.provider.ContactsContract.Data</a> entry.\n </p>\n\n\n<p> <p>\n Returns the Uri for the contact in the first entry returned by\n String[], String, String[], String)\n for the provided {@code dataUri}.  If the query returns null or empty\n results, silently returns null.\n </p></p>\n</div></div></div></div></div></div></div>","meta":{}});