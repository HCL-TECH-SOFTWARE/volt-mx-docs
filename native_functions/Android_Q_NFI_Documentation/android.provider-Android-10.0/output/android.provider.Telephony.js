Ext.data.JsonP.android_provider_Telephony({"tagname":"class","name":"android.provider.Telephony","autodetected":{},"files":[{"filename":"Telephony.js","href":"Telephony.html#android-provider-Telephony"}],"extends":"java.lang.Object","members":[],"alternateClassNames":[],"aliases":{},"id":"class-android.provider.Telephony","short_doc":"The Telephony provider contains data related to phone operation, specifically SMS and MMS\n messages, access to the AP...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.provider.Telephony</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Telephony.html#android-provider-Telephony' target='_blank'>Telephony.js</a></div></pre><div class='doc-contents'><p>The Telephony provider contains data related to phone operation, specifically SMS and MMS\n messages, access to the APN list, including the MMSC to use, and the service state.</p>\n\n<p> <p class=\"note\"><strong>Note:</strong> These APIs are not available on all Android-powered\n devices. If your app depends on telephony features such as for managing SMS messages, include\n a <a href=\"{@docRoot}guide/topics/manifest/uses-feature-element.html\">{@code <uses-feature>}\n </uses></a> element in your manifest that declares the {@code \"android.hardware.telephony\"} hardware\n feature. Alternatively, you can check for telephony availability at runtime using either\n hasSystemFeature(PackageManager.FEATURE_TELEPHONY) or android.telephony.TelephonyManager.getPhoneType.</p></p>\n\n<p> <h3>Creating an SMS app</h3></p>\n\n<p> <p>Only the default SMS app (selected by the user in system settings) is able to write to the\n SMS Provider (the tables defined within the {@code Telephony} class) and only the default SMS\n app receives the android.provider.Telephony.Sms.Intents.SMS_DELIVER_ACTION broadcast\n when the user receives an SMS or the android.provider.Telephony.Sms.Intents.WAP_PUSH_DELIVER_ACTION broadcast when the user\n receives an MMS.</p></p>\n\n<p> <p>Any app that wants to behave as the user's default SMS app must handle the following intents:\n <ul>\n <li>In a broadcast receiver, include an intent filter for android.provider.Telephony.Sms.Intents.SMS_DELIVER_ACTION\n (<code>\"android.provider.Telephony.SMS_DELIVER\"</code>). The broadcast receiver must also\n require the android.Manifest.permission.BROADCAST_SMS permission.\n <p>This allows your app to directly receive incoming SMS messages.</p></li>\n <li>In a broadcast receiver, include an intent filter for android.provider.Telephony.Sms.Intents.WAP_PUSH_DELIVER_ACTION} ({@code \"android.provider.Telephony.WAP_PUSH_DELIVER\"})\n with the MIME type <code>\"application/vnd.wap.mms-message\"</code>.\n The broadcast receiver must also require the android.Manifest.permission.BROADCAST_WAP_PUSH permission.\n <p>This allows your app to directly receive incoming MMS messages.</p></li>\n <li>In your activity that delivers new messages, include an intent filter for\n android.content.Intent.ACTION_SENDTO (<code>\"android.intent.action.SENDTO\"\n </code>) with schemas, <code>sms:</code>, <code>smsto:</code>, <code>mms:</code>, and\n <code>mmsto:</code>.\n <p>This allows your app to receive intents from other apps that want to deliver a\n message.</p></li>\n <li>In a service, include an intent filter for android.telephony.TelephonyManager.ACTION_RESPOND_VIA_MESSAGE\n (<code>\"android.intent.action.RESPOND_VIA_MESSAGE\"</code>) with schemas,\n <code>sms:</code>, <code>smsto:</code>, <code>mms:</code>, and <code>mmsto:</code>.\n This service must also require the android.Manifest.permission.SEND_RESPOND_VIA_MESSAGE permission.\n <p>This allows users to respond to incoming phone calls with an immediate text message\n using your app.</p></li>\n </ul></p>\n\n<p> <p>Other apps that are not selected as the default SMS app can only <em>read</em> the SMS\n Provider, but may also be notified when a new SMS arrives by listening for the android.provider.Telephony.Sms.Intents.SMS_RECEIVED_ACTION\n broadcast, which is a non-abortable broadcast that may be delivered to multiple apps. This\n broadcast is intended for apps that&mdash;while not selected as the default SMS app&mdash;need to\n read special incoming messages such as to perform phone number verification.</p></p>\n\n<p> <p>For more information about building SMS apps, read the blog post, &lt;a\n href=\"http://android-developers.blogspot.com/2013/10/getting-your-sms-apps-ready-for-kitkat.html\"</p>\n\n<blockquote><p>Getting Your SMS Apps Ready for KitKat.</p></blockquote></p>\n</div><div class='members'></div></div>","meta":{}});