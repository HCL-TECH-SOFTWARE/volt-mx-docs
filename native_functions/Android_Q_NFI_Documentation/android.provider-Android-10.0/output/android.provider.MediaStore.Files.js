Ext.data.JsonP.android_provider_MediaStore_Files({"tagname":"class","name":"android.provider.MediaStore.Files","autodetected":{},"files":[{"filename":"Files.js","href":"Files.html#android-provider-MediaStore-Files"}],"extends":"java.lang.Object","members":[{"name":"getContentUri","tagname":"method","owner":"android.provider.MediaStore.Files","id":"method-getContentUri","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.provider.MediaStore.Files","short_doc":"Media provider table containing an index of all files in the media storage,\n including non-media files. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.provider.MediaStore.Files</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Files.html#android-provider-MediaStore-Files' target='_blank'>Files.js</a></div></pre><div class='doc-contents'><p>Media provider table containing an index of all files in the media storage,\n including non-media files.  This should be used by applications that work with\n non-media file types (text, HTML, PDF, etc) as well as applications that need to\n work with multiple media file types in a single query.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getContentUri' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.provider.MediaStore.Files'>android.provider.MediaStore.Files</span><br/><a href='source/Files.html#android-provider-MediaStore-Files-method-getContentUri' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.provider.MediaStore.Files-method-getContentUri' class='name expandable'>getContentUri</a>( <span class='pre'>volumeName, rowId</span> ) : Object {android.net.Uri}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the content:// style URI for a single row in the files table on the\n given volume. ...</div><div class='long'><p>Get the content:// style URI for a single row in the files table on the\n given volume.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>volumeName</span> : String<div class='sub-desc'><p>the name of the volume to get the URI for</p>\n</div></li><li><span class='pre'>rowId</span> : Number<div class='sub-desc'><p>the file to get the URI for</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.Uri}</span><div class='sub-desc'><p>the URI to the files table on the given volume</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});