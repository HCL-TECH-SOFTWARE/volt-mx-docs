Ext.data.JsonP.android_provider_ContactsContract_StreamItemPhotos({"tagname":"class","name":"android.provider.ContactsContract.StreamItemPhotos","autodetected":{},"files":[{"filename":"StreamItemPhotos.js","href":"StreamItemPhotos.html#android-provider-ContactsContract-StreamItemPhotos"}],"extends":"java.lang.Object","deprecated":{"text":"<ul>\n<li>Do not use. This will not be supported in the future. In the future,\ncursors returned from related queries will be empty.</li>\n</ul>\n\n"},"removed":{"text":"\n"},"members":[{"name":"PHOTO","tagname":"property","owner":"android.provider.ContactsContract.StreamItemPhotos","id":"property-PHOTO","meta":{"deprecated":{"text":"<ul>\n<li>Do not use. This will not be supported in the future. In the future,\ncursors returned from related queries will be empty.</li>\n</ul>\n\n"}}}],"alternateClassNames":[],"aliases":{},"id":"class-android.provider.ContactsContract.StreamItemPhotos","short_doc":"implements android.provider.BaseColumns\n\n implements android.provider.ContactsContract.StreamItemPhotosColumns\n\n\n Con...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.provider.ContactsContract.StreamItemPhotos</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/StreamItemPhotos.html#android-provider-ContactsContract-StreamItemPhotos' target='_blank'>StreamItemPhotos.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/android.provider.BaseColumns\" rel=\"android.provider.BaseColumns\" class=\"docClass\">android.provider.BaseColumns</a></p>\n\n<p> implements android.provider.ContactsContract.StreamItemPhotosColumns</p>\n\n<p>\n Constants for the stream_item_photos table, which contains photos associated with\n social stream updates.\n </p>\n\n\n<p> <p>\n Access to social stream photos requires additional permissions beyond the read/write\n contact permissions required by the provider.  Querying for social stream photos\n requires android.permission.READ_SOCIAL_STREAM permission, and inserting or updating\n social stream photos requires android.permission.WRITE_SOCIAL_STREAM permission.\n </p>\n <h3>Account check</h3>\n <p>\n The content URIs to the insert, update and delete operations are required to have the account\n information matching that of the owning raw contact as query parameters, namely\n android.provider.ContactsContract.RawContacts.ACCOUNT_TYPE and android.provider.ContactsContract.RawContacts.ACCOUNT_NAME.\n android.provider.ContactsContract.RawContacts.DATA_SET isn't required.\n </p>\n <h3>Operations</h3>\n <dl>\n <dt><b>Insert</b></dt>\n <dd>\n <p>Social stream photo entries are associated with a social stream item.  Photos\n can be inserted into a social stream item in a couple of ways:\n <dl>\n <dt>\n Via the android.provider.ContactsContract.StreamItems.StreamItemPhotos.CONTENT_DIRECTORY sub-path of a\n stream item:\n </dt>\n <dd></dd></dl></p>\n\n<pre> ContentValues values = new ContentValues();\n values.put(StreamItemPhotos.SORT_INDEX, 1);\n values.put(StreamItemPhotos.PHOTO, photoData);\n Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n ContentUris.appendId(builder, streamItemId);\n builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);\n builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n Uri photoUri = getContentResolver().insert(builder.build(), values);\n long photoId = ContentUris.parseId(photoUri);\n </pre>\n\n\n<p> </p></dd>\n <dt>Via the <a href=\"#!/api/android.provider.ContactsContract.StreamItems-property-CONTENT_PHOTO_URI\" rel=\"android.provider.ContactsContract.StreamItems-property-CONTENT_PHOTO_URI\" class=\"docClass\">android.provider.ContactsContract.StreamItems.CONTENT_PHOTO_URI</a> URI:</dt>\n <dd></dd></dl></p>\n\n<pre> ContentValues values = new ContentValues();\n values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);\n values.put(StreamItemPhotos.SORT_INDEX, 1);\n values.put(StreamItemPhotos.PHOTO, photoData);\n Uri.Builder builder = StreamItems.CONTENT_PHOTO_URI.buildUpon();\n builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n Uri photoUri = getContentResolver().insert(builder.build(), values);\n long photoId = ContentUris.parseId(photoUri);\n </pre>\n\n\n<p> \n \n </p>\n \n <dt><b>Update</b></dt>\n <dd>\n <p>Updates can only be made against a specific <a href=\"#!/api/android.provider.ContactsContract.StreamItemPhotos\" rel=\"android.provider.ContactsContract.StreamItemPhotos\" class=\"docClass\">android.provider.ContactsContract.StreamItemPhotos</a> entry,\n identified by both the stream item ID it belongs to and the stream item photo ID.\n This can be specified in two ways.\n <dl>\n <dt>Via the android.provider.ContactsContract.StreamItems.StreamItemPhotos.CONTENT_DIRECTORY sub-path of a\n stream item:\n </dt>\n <dd></dd></dl></p>\n\n<pre> ContentValues values = new ContentValues();\n values.put(StreamItemPhotos.PHOTO, newPhotoData);\n Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n ContentUris.appendId(builder, streamItemId);\n builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);\n ContentUris.appendId(builder, streamItemPhotoId);\n builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n getContentResolver().update(builder.build(), values, null, null);\n </pre>\n\n\n<p> </p></dd>\n <dt>Via the <a href=\"#!/api/android.provider.ContactsContract.StreamItems-property-CONTENT_PHOTO_URI\" rel=\"android.provider.ContactsContract.StreamItems-property-CONTENT_PHOTO_URI\" class=\"docClass\">android.provider.ContactsContract.StreamItems.CONTENT_PHOTO_URI</a> URI:</dt>\n <dd>\n\n<pre> ContentValues values = new ContentValues();\n values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);\n values.put(StreamItemPhotos.PHOTO, newPhotoData);\n Uri.Builder builder = StreamItems.CONTENT_PHOTO_URI.buildUpon();\n builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n getContentResolver().update(builder.build(), values);\n </pre>\n\n\n<p> </p></dd>\n \n \n \n <dt><b>Delete</b></dt>\n <dd>Deletes can be made against either a specific photo item in a stream item, or\n against all or a selected subset of photo items under a stream item.\n For example:\n <dl>\n <dt>Deleting a single photo via the\n android.provider.ContactsContract.StreamItems.StreamItemPhotos.CONTENT_DIRECTORY sub-path of a stream item:\n </dt>\n <dd>\n\n<pre> Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n ContentUris.appendId(builder, streamItemId);\n builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);\n ContentUris.appendId(builder, streamItemPhotoId);\n builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n getContentResolver().delete(builder.build(), null, null);\n </pre>\n\n\n<p> </p></dd>\n <dt>Deleting all photos under a stream item</dt>\n <dd>\n\n<pre> Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n ContentUris.appendId(builder, streamItemId);\n builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);\n builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n getContentResolver().delete(builder.build(), null, null);\n </pre>\n\n\n<p> </p></dd>\n </dl>\n </dd>\n <dt><b>Query</b></dt>\n <dl>\n <dt>Querying for a specific photo in a stream item</dt>\n <dd>\n\n<pre> Cursor c = getContentResolver().query(\n     ContentUris.withAppendedId(\n         Uri.withAppendedPath(\n             ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)\n             StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),\n         streamItemPhotoId), null, null, null, null);\n </pre>\n\n\n<p> </p></dd>\n <dt>Querying for all photos in a stream item</dt>\n <dd>\n\n<pre> Cursor c = getContentResolver().query(\n     Uri.withAppendedPath(\n         ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)\n         StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),\n     null, null, null, StreamItemPhotos.SORT_INDEX);\n </pre>\n\n\n<p> </p></dd></dl>\n The record will contain both a PHOTO_FILE_ID and a\n PHOTO_URI.  The PHOTO_FILE_ID\n can be used in conjunction with the <a href=\"#!/api/android.provider.ContactsContract.DisplayPhoto\" rel=\"android.provider.ContactsContract.DisplayPhoto\" class=\"docClass\">android.provider.ContactsContract.DisplayPhoto</a> API to\n retrieve photo content, or you can open the PHOTO_URI as\n an asset file, as follows:\n\n<p><pre> public InputStream openDisplayPhoto(String photoUri) {\n     try {\n         AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(photoUri, \"r\");\n         return fd.createInputStream();\n     } catch (IOException e) {\n         return null;\n     }\n }</pre></p>\n\n<p><pre> \n </pre></p>\n        <div class='rounded-box removed-box deprecated-tag-box'>\n        <p>This class has been <strong>removed</strong> </p>\n        \n\n        </div>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This class has been <strong>deprecated</strong> </p>\n        <ul>\n<li>Do not use. This will not be supported in the future. In the future,\ncursors returned from related queries will be empty.</li>\n</ul>\n\n\n        </div>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-PHOTO' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.provider.ContactsContract.StreamItemPhotos'>android.provider.ContactsContract.StreamItemPhotos</span><br/><a href='source/StreamItemPhotos.html#android-provider-ContactsContract-StreamItemPhotos-property-PHOTO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.provider.ContactsContract.StreamItemPhotos-property-PHOTO' class='name expandable'>PHOTO</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>The binary representation of the photo. ...</div><div class='long'><p>\nThe binary representation of the photo.  Any size photo can be inserted;\nthe provider will resize it appropriately for storage and display.\n</p>\n\n\n<p>\nThis is only intended for use when inserting or updating a stream item photo.\nTo retrieve the photo that was stored, open PHOTO_URI\nas an asset file.\n</p>\n\n\n<P>Type: BLOB</P>\n\n<p>Defaults to: <code>&quot;photo&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <ul>\n<li>Do not use. This will not be supported in the future. In the future,\ncursors returned from related queries will be empty.</li>\n</ul>\n\n\n        </div>\n</div></div></div></div></div></div></div>","meta":{"deprecated":{"text":"<ul>\n<li>Do not use. This will not be supported in the future. In the future,\ncursors returned from related queries will be empty.</li>\n</ul>\n\n"},"removed":{"text":"\n"}}});