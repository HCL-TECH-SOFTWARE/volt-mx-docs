Ext.data.JsonP.java_lang_invoke_MethodHandleInfo({"tagname":"class","name":"java.lang.invoke.MethodHandleInfo","autodetected":{},"files":[{"filename":"MethodHandleInfo.js","href":"MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo"}],"since":"1.8","members":[{"name":"REF_getField","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_getField","meta":{}},{"name":"REF_getStatic","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_getStatic","meta":{}},{"name":"REF_invokeInterface","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_invokeInterface","meta":{}},{"name":"REF_invokeSpecial","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_invokeSpecial","meta":{}},{"name":"REF_invokeStatic","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_invokeStatic","meta":{}},{"name":"REF_invokeVirtual","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_invokeVirtual","meta":{}},{"name":"REF_newInvokeSpecial","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_newInvokeSpecial","meta":{}},{"name":"REF_putField","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_putField","meta":{}},{"name":"REF_putStatic","tagname":"property","owner":"java.lang.invoke.MethodHandleInfo","id":"property-REF_putStatic","meta":{}},{"name":"getDeclaringClass","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-getDeclaringClass","meta":{}},{"name":"getMethodType","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-getMethodType","meta":{}},{"name":"getModifiers","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-getModifiers","meta":{}},{"name":"getName","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-getName","meta":{}},{"name":"getReferenceKind","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-getReferenceKind","meta":{}},{"name":"isVarArgs","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-isVarArgs","meta":{}},{"name":"refKindIsField","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-refKindIsField","meta":{"deprecated":{"text":"<p>This internal method was accidentally added to API 26 and must not be used. No\n             replacement is available but it is possible to replicate using information from\n             the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>, e.g.\n             {@code refKind >= 1 &amp;&amp; refKind &lt;= 4}.  There are no guarantees that this logic\n             will work if future versions extend the table.</p>\n"}}},{"name":"refKindIsValid","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-refKindIsValid","meta":{"deprecated":{"text":"<p>This internal method was accidentally added to API 26 and must not be used. No\n             replacement is available but it is possible to replicate using information from\n             the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>, e.g.\n             {@code refKind >= 1 &amp;&amp; refKind &lt;= 9}. There are no guarantees that this logic\n             will work if future versions extend the table.</p>\n"}}},{"name":"refKindName","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-refKindName","meta":{"deprecated":{"text":"<p>This internal method was accidentally added to API 26 and must not be used. Use\n             MethodHandleInfo.referenceKindToString(int) instead.</p>\n"}}},{"name":"referenceKindToString","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-referenceKindToString","meta":{}},{"name":"reflectAs","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-reflectAs","meta":{}},{"name":"toString","tagname":"method","owner":"java.lang.invoke.MethodHandleInfo","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.MethodHandleInfo","short_doc":"A symbolic reference obtained by cracking a direct method handle\n into its consitutent symbolic parts. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo' target='_blank'>MethodHandleInfo.js</a></div></pre><div class='doc-contents'><p>A symbolic reference obtained by cracking a direct method handle\n into its consitutent symbolic parts.\n To crack a direct method handle, call <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-revealDirect\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-revealDirect\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.revealDirect</a>.\n <h1><a name=\"directmh\"></a>Direct Method Handles</h1>\n A <em>direct method handle</em> represents a method, constructor, or field without\n any intervening argument bindings or other transformations.\n The method, constructor, or field referred to by a direct method handle is called\n its <em>underlying member</em>.\n Direct method handles may be obtained in any of these ways:\n <ul>\n <li>By executing an {@code ldc} instruction on a {@code CONSTANT_MethodHandle} constant.\n     (See the Java Virtual Machine Specification, sections 4.4.8 and 5.4.3.)\n <li>By calling one of the <a href=\"MethodHandles.Lookup.html#lookups\">Lookup Factory Methods</a>,\n     such as <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.findVirtual</a>,\n     to resolve a symbolic reference into a method handle.\n     A symbolic reference consists of a class, name string, and type.\n <li>By calling the factory method <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflect\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflect\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.unreflect</a>\n     or <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectSpecial\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflectSpecial\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.unreflectSpecial</a>\n     to convert a Method into a method handle.\n <li>By calling the factory method <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectConstructor\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflectConstructor\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.unreflectConstructor</a>\n     to convert a Constructor into a method handle.\n <li>By calling the factory method <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectGetter\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflectGetter\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.unreflectGetter</a>\n     or <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectSetter\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflectSetter\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.unreflectSetter</a>\n     to convert a Field into a method handle.\n </li></li></li></li></li></ul></p>\n\n<p> <h1>Restrictions on Cracking</h1>\n Given a suitable {@code Lookup} object, it is possible to crack any direct method handle\n to recover a symbolic reference for the underlying method, constructor, or field.\n Cracking must be done via a {@code Lookup} object equivalent to that which created\n the target method handle, or which has enough access permissions to recreate\n an equivalent method handle.\n <p>\n If the underlying method is <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a>,\n the direct method handle will have been \"bound\" to a particular caller class, the\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupClass\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupClass\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.lookupClass</a>() lookup class}\n of the lookup object used to create it.\n Cracking this method handle with a different lookup class will fail\n even if the underlying method is public (like {@code Class.forName}).\n <p>\n The requirement of lookup object matching provides a \"fast fail\" behavior\n for programs which may otherwise trust erroneous revelation of a method\n handle with symbolic information (or caller binding) from an unexpected scope.\n Use <a href=\"#!/api/java.lang.invoke.MethodHandles-method-reflectAs\" rel=\"java.lang.invoke.MethodHandles-method-reflectAs\" class=\"docClass\">java.lang.invoke.MethodHandles.reflectAs</a> to override this limitation.</p>\n\n<p> <h1><a name=\"refkinds\"></a>Reference kinds</h1>\n The <a href=\"MethodHandles.Lookup.html#lookups\">Lookup Factory Methods</a>\n correspond to all major use cases for methods, constructors, and fields.\n These use cases may be distinguished using small integers as follows:\n <table border=1 cellpadding=5 summary=\"reference kinds\">\n <tr><th>reference kind</th><th>descriptive name</th><th>scope</th><th>member</th><th>behavior</th></tr>\n <tr>\n     <td>{@code 1}</td><td>{@code REF_getField}</td><td>{@code class}</td>\n     <td>{@code FT f;}</td><td>{@code (T) this.f;}</td>\n </tr>\n <tr>\n     <td>{@code 2}</td><td>{@code REF_getStatic}</td><td>{@code class} or {@code interface}</td>\n     <td>{@code static}<br>{@code FT f;}</td><td>{@code (T) C.f;}</td>\n </tr>\n <tr>\n     <td>{@code 3}</td><td>{@code REF_putField}</td><td>{@code class}</td>\n     <td>{@code FT f;}</td><td>{@code this.f = x;}</td>\n </tr>\n <tr>\n     <td>{@code 4}</td><td>{@code REF_putStatic}</td><td>{@code class}</td>\n     <td>{@code static}<br>{@code FT f;}</td><td>{@code C.f = arg;}</td>\n </tr>\n <tr>\n     <td>{@code 5}</td><td>{@code REF_invokeVirtual}</td><td>{@code class}</td>\n     <td>{@code T m(A<em>);}</em></td><td>{@code (T) this.m(arg);}</td>\n </tr>\n <tr>\n     <td>{@code 6}</td><td>{@code REF_invokeStatic}</td><td>{@code class} or {@code interface}</td>\n     <td>{@code static}<br>{@code T m(A<em>);}</em></td><td>{@code (T) C.m(arg);}</td>\n </tr>\n <tr>\n     <td>{@code 7}</td><td>{@code REF_invokeSpecial}</td><td>{@code class} or {@code interface}</td>\n     <td>{@code T m(A<em>);}</em></td><td>{@code (T) super.m(arg);}</td>\n </tr>\n <tr>\n     <td>{@code 8}</td><td>{@code REF_newInvokeSpecial}</td><td>{@code class}</td>\n     <td>{@code C(A<em>);}</em></td><td>{@code new C(arg);}</td>\n </tr>\n <tr>\n     <td>{@code 9}</td><td>{@code REF_invokeInterface}</td><td>{@code interface}</td>\n     <td>{@code T m(A<em>);}</em></td><td>{@code (T) this.m(arg);}</td>\n </tr>\n </table></p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-REF_getField' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_getField' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_getField' class='name expandable'>REF_getField</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-REF_getStatic' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_getStatic' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_getStatic' class='name expandable'>REF_getStatic</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-REF_invokeInterface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_invokeInterface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_invokeInterface' class='name expandable'>REF_invokeInterface</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;9&quot;</code></p></div></div></div><div id='property-REF_invokeSpecial' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_invokeSpecial' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_invokeSpecial' class='name expandable'>REF_invokeSpecial</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;7&quot;</code></p></div></div></div><div id='property-REF_invokeStatic' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_invokeStatic' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_invokeStatic' class='name expandable'>REF_invokeStatic</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;6&quot;</code></p></div></div></div><div id='property-REF_invokeVirtual' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_invokeVirtual' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_invokeVirtual' class='name expandable'>REF_invokeVirtual</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;5&quot;</code></p></div></div></div><div id='property-REF_newInvokeSpecial' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_newInvokeSpecial' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_newInvokeSpecial' class='name expandable'>REF_newInvokeSpecial</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-REF_putField' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_putField' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_putField' class='name expandable'>REF_putField</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-REF_putStatic' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-property-REF_putStatic' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-property-REF_putStatic' class='name expandable'>REF_putStatic</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A direct method handle reference kind,\nas defined in the table above. ...</div><div class='long'><p>A direct method handle reference kind,\nas defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getDeclaringClass' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-getDeclaringClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-getDeclaringClass' class='name expandable'>getDeclaringClass</a>( <span class='pre'></span> ) : Object {java.lang.Class}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the class in which the cracked method handle's underlying member was defined. ...</div><div class='long'><p>Returns the class in which the cracked method handle's underlying member was defined.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Class}</span><div class='sub-desc'><p>the declaring class of the underlying member</p>\n</div></li></ul></div></div></div><div id='method-getMethodType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-getMethodType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-getMethodType' class='name expandable'>getMethodType</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the nominal type of the cracked symbolic reference, expressed as a method type. ...</div><div class='long'><p>Returns the nominal type of the cracked symbolic reference, expressed as a method type.\n If the reference is to a constructor, the return type will be {@code void}.\n If it is to a non-static method, the method type will not mention the {@code this} parameter.\n If it is to a field and the requested access is to read the field,\n the method type will have no parameters and return the field type.\n If it is to a field and the requested access is to write the field,\n the method type will have one parameter of the field type and return {@code void}.\n <p>\n Note that original direct method handle may include a leading {@code this} parameter,\n or (in the case of a constructor) will replace the {@code void} return type\n with the constructed class.\n The nominal type does not include any {@code this} parameter,\n and (in the case of a constructor) will return {@code void}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the type of the underlying member, expressed as a method type</p>\n</div></li></ul></div></div></div><div id='method-getModifiers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-getModifiers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-getModifiers' class='name expandable'>getModifiers</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the access modifiers of the underlying member. ...</div><div class='long'><p>Returns the access modifiers of the underlying member.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the Java language modifiers for underlying member,\n         or -1 if the member cannot be accessed\n@see Modifier\n@see <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-reflectAs\" rel=\"java.lang.invoke.MethodHandleInfo-method-reflectAs\" class=\"docClass\">reflectAs</a></p>\n</div></li></ul></div></div></div><div id='method-getName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-getName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-getName' class='name expandable'>getName</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name of the cracked method handle's underlying member. ...</div><div class='long'><p>Returns the name of the cracked method handle's underlying member.\n This is {@code \"<init>\"} if the underlying member was a constructor,\n else it is a simple method name or field name.</init></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the simple name of the underlying member</p>\n</div></li></ul></div></div></div><div id='method-getReferenceKind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-getReferenceKind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-getReferenceKind' class='name expandable'>getReferenceKind</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the reference kind of the cracked method handle, which in turn\n determines whether the method handle's underl...</div><div class='long'><p>Returns the reference kind of the cracked method handle, which in turn\n determines whether the method handle's underlying member was a constructor, method, or field.\n See the <a href=\"MethodHandleInfo.html#refkinds\">table above</a> for definitions.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the integer code for the kind of reference used to access the underlying member</p>\n</div></li></ul></div></div></div><div id='method-isVarArgs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-isVarArgs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-isVarArgs' class='name expandable'>isVarArgs</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Determines if the underlying member was a variable arity method or constructor. ...</div><div class='long'><p>Determines if the underlying member was a variable arity method or constructor.\n Such members are represented by method handles that are varargs collectors.\n@implSpec This produces a result equivalent to:\n <pre>{@code\n     getReferenceKind() >= REF_invokeVirtual &amp;&amp; Modifier.isTransient(getModifiers())\n }</pre></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if and only if the underlying member was declared with variable arity.</p>\n</div></li></ul></div></div></div><div id='method-refKindIsField' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-refKindIsField' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-refKindIsField' class='name expandable'>refKindIsField</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This internal method was accidentally added to API 26 and must not be used. No\n             replacement is available but it is possible to replicate using information from\n             the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>, e.g.\n             {@code refKind >= 1 &amp;&amp; refKind &lt;= 4}.  There are no guarantees that this logic\n             will work if future versions extend the table.</p>\n\n        </div>\n</div></div></div><div id='method-refKindIsValid' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-refKindIsValid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-refKindIsValid' class='name expandable'>refKindIsValid</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This internal method was accidentally added to API 26 and must not be used. No\n             replacement is available but it is possible to replicate using information from\n             the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>, e.g.\n             {@code refKind >= 1 &amp;&amp; refKind &lt;= 9}. There are no guarantees that this logic\n             will work if future versions extend the table.</p>\n\n        </div>\n</div></div></div><div id='method-refKindName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-refKindName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-refKindName' class='name expandable'>refKindName</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This internal method was accidentally added to API 26 and must not be used. Use\n             MethodHandleInfo.referenceKindToString(int) instead.</p>\n\n        </div>\n</div></div></div><div id='method-referenceKindToString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-referenceKindToString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-referenceKindToString' class='name expandable'>referenceKindToString</a>( <span class='pre'>referenceKind</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the descriptive name of the given reference kind,\n as defined in the table above. ...</div><div class='long'><p>Returns the descriptive name of the given reference kind,\n as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\n The conventional prefix \"REF_\" is omitted.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>referenceKind</span> : Number<div class='sub-desc'><p>an integer code for a kind of reference used to access a class member</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a mixed-case string such as {@code \"getField\"}\n@exception IllegalArgumentException if the argument is not a valid\n            <a href=\"MethodHandleInfo.html#refkinds\">reference kind number</a></p>\n</div></li></ul></div></div></div><div id='method-reflectAs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-reflectAs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-reflectAs' class='name expandable'>reflectAs</a>( <span class='pre'>expected, lookup, lookup</span> ) : Object {java.lang.reflect.Member}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reflects the underlying member as a method, constructor, or field object. ...</div><div class='long'><p>Reflects the underlying member as a method, constructor, or field object.\n If the underlying member is public, it is reflected as if by\n {@code getMethod}, {@code getConstructor}, or {@code getField}.\n Otherwise, it is reflected as if by\n {@code getDeclaredMethod}, {@code getDeclaredConstructor}, or {@code getDeclaredField}.\n The underlying member must be accessible to the given lookup object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expected</span> : Object {java.lang.Class}<div class='sub-desc'><p>a class object representing the desired result type {@code T}</p>\n</div></li><li><span class='pre'>lookup</span> : Object {MethodHandles.Lookup}<div class='sub-desc'><p>the lookup object that created this MethodHandleInfo, or one with equivalent access privileges</p>\n</div></li><li><span class='pre'>lookup</span> : Object<div class='sub-desc'><p>the lookup object that created this MethodHandleInfo, or one with equivalent access privileges</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.reflect.Member}</span><div class='sub-desc'><p>a reference to the method, constructor, or field object\n@exception ClassCastException if the member is not of the expected type\n@exception NullPointerException if either argument is {@code null}\n@exception IllegalArgumentException if the underlying member is not accessible to the given lookup object</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandleInfo'>java.lang.invoke.MethodHandleInfo</span><br/><a href='source/MethodHandleInfo.html#java-lang-invoke-MethodHandleInfo-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandleInfo-method-toString' class='name expandable'>toString</a>( <span class='pre'>kind, defc, name, type, type</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string representation for a {@code MethodHandleInfo},\n given the four parts of its symbolic reference. ...</div><div class='long'><p>Returns a string representation for a {@code MethodHandleInfo},\n given the four parts of its symbolic reference.\n This is defined to be of the form {@code \"RK C.N:MT\"}, where {@code RK} is the\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-referenceKindToString\" rel=\"java.lang.invoke.MethodHandleInfo-method-referenceKindToString\" class=\"docClass\">referenceKindToString</a> reference kind string} for {@code kind},\n {@code C} is the {@linkplain java.lang.Class#getName name} of {@code defc}\n {@code N} is the {@code name}, and\n {@code MT} is the {@code type}.\n These four values may be obtained from the\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getReferenceKind\" rel=\"java.lang.invoke.MethodHandleInfo-method-getReferenceKind\" class=\"docClass\">getReferenceKind</a> reference kind},\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getDeclaringClass\" rel=\"java.lang.invoke.MethodHandleInfo-method-getDeclaringClass\" class=\"docClass\">getDeclaringClass</a> declaring class},\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getName\" rel=\"java.lang.invoke.MethodHandleInfo-method-getName\" class=\"docClass\">getName</a> member name},\n and {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getMethodType\" rel=\"java.lang.invoke.MethodHandleInfo-method-getMethodType\" class=\"docClass\">getMethodType</a> method type}\n of a {@code MethodHandleInfo} object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>kind</span> : Number<div class='sub-desc'><p>the {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getReferenceKind\" rel=\"java.lang.invoke.MethodHandleInfo-method-getReferenceKind\" class=\"docClass\">getReferenceKind</a> reference kind} part of the symbolic reference</p>\n</div></li><li><span class='pre'>defc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getDeclaringClass\" rel=\"java.lang.invoke.MethodHandleInfo-method-getDeclaringClass\" class=\"docClass\">getDeclaringClass</a> declaring class} part of the symbolic reference</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getName\" rel=\"java.lang.invoke.MethodHandleInfo-method-getName\" class=\"docClass\">getName</a> member name} part of the symbolic reference</p>\n</div></li><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getMethodType\" rel=\"java.lang.invoke.MethodHandleInfo-method-getMethodType\" class=\"docClass\">getMethodType</a> method type} part of the symbolic reference</p>\n</div></li><li><span class='pre'>type</span> : Object<div class='sub-desc'><p>the {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-getMethodType\" rel=\"java.lang.invoke.MethodHandleInfo-method-getMethodType\" class=\"docClass\">getMethodType</a> method type} part of the symbolic reference</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string of the form {@code \"RK C.N:MT\"}\n@exception IllegalArgumentException if the first argument is not a valid\n            <a href=\"MethodHandleInfo.html#refkinds\">reference kind number</a>\n@exception NullPointerException if any reference argument is {@code null}</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});