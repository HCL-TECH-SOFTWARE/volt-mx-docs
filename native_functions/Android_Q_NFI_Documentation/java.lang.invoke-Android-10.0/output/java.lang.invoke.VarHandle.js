Ext.data.JsonP.java_lang_invoke_VarHandle({"tagname":"class","name":"java.lang.invoke.VarHandle","autodetected":{},"files":[{"filename":"VarHandle.js","href":"VarHandle.html#java-lang-invoke-VarHandle"}],"extends":"java.lang.Object","since":"9","hide":true,"members":[{"name":"accessModeType","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-accessModeType","meta":{}},{"name":"acquireFence","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-acquireFence","meta":{}},{"name":"compareAndExchange","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-compareAndExchange","meta":{}},{"name":"compareAndExchangeAcquire","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-compareAndExchangeAcquire","meta":{}},{"name":"compareAndExchangeRelease","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-compareAndExchangeRelease","meta":{}},{"name":"compareAndSet","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-compareAndSet","meta":{}},{"name":"coordinateTypes","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-coordinateTypes","meta":{}},{"name":"fullFence","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-fullFence","meta":{}},{"name":"get","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-get","meta":{}},{"name":"getAcquire","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAcquire","meta":{}},{"name":"getAndAdd","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndAdd","meta":{}},{"name":"getAndAddAcquire","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndAddAcquire","meta":{}},{"name":"getAndAddRelease","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndAddRelease","meta":{}},{"name":"getAndBitwiseAnd","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseAnd","meta":{}},{"name":"getAndBitwiseAndAcquire","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseAndAcquire","meta":{}},{"name":"getAndBitwiseAndRelease","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseAndRelease","meta":{}},{"name":"getAndBitwiseOr","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseOr","meta":{}},{"name":"getAndBitwiseOrAcquire","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseOrAcquire","meta":{}},{"name":"getAndBitwiseOrRelease","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseOrRelease","meta":{}},{"name":"getAndBitwiseXor","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseXor","meta":{}},{"name":"getAndBitwiseXorAcquire","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseXorAcquire","meta":{}},{"name":"getAndBitwiseXorRelease","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndBitwiseXorRelease","meta":{}},{"name":"getAndSet","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndSet","meta":{}},{"name":"getAndSetAcquire","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndSetAcquire","meta":{}},{"name":"getAndSetRelease","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getAndSetRelease","meta":{}},{"name":"getOpaque","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getOpaque","meta":{}},{"name":"getVolatile","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-getVolatile","meta":{}},{"name":"isAccessModeSupported","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-isAccessModeSupported","meta":{}},{"name":"loadLoadFence","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-loadLoadFence","meta":{}},{"name":"releaseFence","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-releaseFence","meta":{}},{"name":"set","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-set","meta":{}},{"name":"setOpaque","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-setOpaque","meta":{}},{"name":"setRelease","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-setRelease","meta":{}},{"name":"setVolatile","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-setVolatile","meta":{}},{"name":"storeStoreFence","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-storeStoreFence","meta":{}},{"name":"toMethodHandle","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-toMethodHandle","meta":{}},{"name":"varType","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-varType","meta":{}},{"name":"weakCompareAndSet","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-weakCompareAndSet","meta":{}},{"name":"weakCompareAndSetAcquire","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-weakCompareAndSetAcquire","meta":{}},{"name":"weakCompareAndSetPlain","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-weakCompareAndSetPlain","meta":{}},{"name":"weakCompareAndSetRelease","tagname":"method","owner":"java.lang.invoke.VarHandle","id":"method-weakCompareAndSetRelease","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.VarHandle","short_doc":"A VarHandle is a dynamically strongly typed reference to a variable, or to a\n parametrically-defined family of variab...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.lang.invoke.VarHandle</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/VarHandle.html#java-lang-invoke-VarHandle' target='_blank'>VarHandle.js</a></div></pre><div class='doc-contents'><p>A VarHandle is a dynamically strongly typed reference to a variable, or to a\n parametrically-defined family of variables, including static fields,\n non-static fields, array elements, or components of an off-heap data\n structure.  Access to such variables is supported under various\n <em>access modes</em>, including plain read/write access, volatile\n read/write access, and compare-and-swap.</p>\n\n<p> <p>VarHandles are immutable and have no visible state.  VarHandles cannot be\n subclassed by the user.</p>\n\n<p> <p>A VarHandle has:\n <ul>\n <li>a <a href=\"#!/api/java.lang.invoke.VarHandle-method-varType\" rel=\"java.lang.invoke.VarHandle-method-varType\" class=\"docClass\">variable type</a> T, the type of every variable referenced\n by this VarHandle; and\n <li>a list of <a href=\"#!/api/java.lang.invoke.VarHandle-method-coordinateTypes\" rel=\"java.lang.invoke.VarHandle-method-coordinateTypes\" class=\"docClass\">coordinate types</a>\n {@code CT1, CT2, ..., CTn}, the types of <em>coordinate expressions</em> that\n jointly locate a variable referenced by this VarHandle.\n </li></li></ul>\n Variable and coordinate types may be primitive or reference, and are\n represented by {@code Class} objects.  The list of coordinate types may be\n empty.</p>\n\n<p> <p>Factory methods that produce or <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup\" rel=\"java.lang.invoke.MethodHandles.Lookup\" class=\"docClass\">lookup</a> VarHandle instances document the supported variable type and the list\n of coordinate types.</p>\n\n<p> <p>Each access mode is associated with one <em>access mode method</em>, a\n <a href=\"MethodHandle.html#sigpoly\">signature polymorphic</a> method named\n for the access mode.  When an access mode method is invoked on a VarHandle\n instance, the initial arguments to the invocation are coordinate expressions\n that indicate in precisely which object the variable is to be accessed.\n Trailing arguments to the invocation represent values of importance to the\n access mode.  For example, the various compare-and-set or compare-and-exchange\n access modes require two trailing arguments for the variable's expected value\n and new value.</p>\n\n<p> <p>The arity and types of arguments to the invocation of an access mode\n method are not checked statically.  Instead, each access mode method\n specifies an access mode type,\n represented as an instance of <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>, that serves as a kind of\n method signature against which the arguments are checked dynamically.  An\n access mode type gives formal parameter types in terms of the coordinate\n types of a VarHandle instance and the types for values of importance to the\n access mode.  An access mode type also gives a return type, often in terms of\n the variable type of a VarHandle instance.  When an access mode method is\n invoked on a VarHandle instance, the symbolic type descriptor at the\n call site, the run time types of arguments to the invocation, and the run\n time type of the return value, must <a href=\"#invoke\">match</a> the types\n given in the access mode type.  A runtime exception will be thrown if the\n match fails.</p>\n\n<p> For example, the access mode method <a href=\"#!/api/java.lang.invoke.VarHandle-method-compareAndSet\" rel=\"java.lang.invoke.VarHandle-method-compareAndSet\" class=\"docClass\">compareAndSet</a> specifies that if\n its receiver is a VarHandle instance with coordinate types\n {@code CT1, ..., CTn} and variable type {@code T}, then its access mode type\n is {@code (CT1 c1, ..., CTn cn, T expectedValue, T newValue)boolean}.\n Suppose that a VarHandle instance can access array elements, and that its\n coordinate types are {@code String[]} and {@code int} while its variable type\n is {@code String}.  The access mode type for {@code compareAndSet} on this\n VarHandle instance would be\n {@code (String[] c1, int c2, String expectedValue, String newValue)boolean}.\n Such a VarHandle instance may produced by the\n array factory method and\n access array elements as follows:\n <pre> {@code\n String[] sa = ...\n VarHandle avh = MethodHandles.arrayElementVarHandle(String[].class);\n boolean r = avh.compareAndSet(sa, 10, \"expected\", \"new\");\n }</pre></p>\n\n<p> <p>Access modes control atomicity and consistency properties.\n <em>Plain</em> read ({@code get}) and write ({@code set})\n accesses are guaranteed to be bitwise atomic only for references\n and for primitive values of at most 32 bits, and impose no observable\n ordering constraints with respect to threads other than the\n executing thread. <em>Opaque</em> operations are bitwise atomic and\n coherently ordered with respect to accesses to the same variable.\n In addition to obeying Opaque properties, <em>Acquire</em> mode\n reads and their subsequent accesses are ordered after matching\n <em>Release</em> mode writes and their previous accesses.  In\n addition to obeying Acquire and Release properties, all\n <em>Volatile</em> operations are totally ordered with respect to\n each other.</p>\n\n<p> <p>Access modes are grouped into the following categories:\n <ul>\n <li>read access modes that get the value of a variable under specified\n memory ordering effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getOpaque\" rel=\"java.lang.invoke.VarHandle-method-getOpaque\" class=\"docClass\">getOpaque</a>.\n <li>write access modes that set the value of a variable under specified\n memory ordering effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-setOpaque\" rel=\"java.lang.invoke.VarHandle-method-setOpaque\" class=\"docClass\">setOpaque</a>.\n <li>atomic update access modes that, for example, atomically compare and set\n the value of a variable under specified memory ordering effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-compareAndSet\" rel=\"java.lang.invoke.VarHandle-method-compareAndSet\" class=\"docClass\">compareAndSet</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-weakCompareAndSetPlain\" rel=\"java.lang.invoke.VarHandle-method-weakCompareAndSetPlain\" class=\"docClass\">weakCompareAndSetPlain</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-weakCompareAndSet\" rel=\"java.lang.invoke.VarHandle-method-weakCompareAndSet\" class=\"docClass\">weakCompareAndSet</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-weakCompareAndSetAcquire\" rel=\"java.lang.invoke.VarHandle-method-weakCompareAndSetAcquire\" class=\"docClass\">weakCompareAndSetAcquire</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-weakCompareAndSetRelease\" rel=\"java.lang.invoke.VarHandle-method-weakCompareAndSetRelease\" class=\"docClass\">weakCompareAndSetRelease</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-compareAndExchangeAcquire\" rel=\"java.lang.invoke.VarHandle-method-compareAndExchangeAcquire\" class=\"docClass\">compareAndExchangeAcquire</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-compareAndExchange\" rel=\"java.lang.invoke.VarHandle-method-compareAndExchange\" class=\"docClass\">compareAndExchange</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-compareAndExchangeRelease\" rel=\"java.lang.invoke.VarHandle-method-compareAndExchangeRelease\" class=\"docClass\">compareAndExchangeRelease</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndSet\" rel=\"java.lang.invoke.VarHandle-method-getAndSet\" class=\"docClass\">getAndSet</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndSetAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAndSetAcquire\" class=\"docClass\">getAndSetAcquire</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndSetRelease\" rel=\"java.lang.invoke.VarHandle-method-getAndSetRelease\" class=\"docClass\">getAndSetRelease</a>.\n <li>numeric atomic update access modes that, for example, atomically get and\n set with addition the value of a variable under specified memory ordering\n effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndAdd\" rel=\"java.lang.invoke.VarHandle-method-getAndAdd\" class=\"docClass\">getAndAdd</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndAddAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAndAddAcquire\" class=\"docClass\">getAndAddAcquire</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndAddRelease\" rel=\"java.lang.invoke.VarHandle-method-getAndAddRelease\" class=\"docClass\">getAndAddRelease</a>,\n <li>bitwise atomic update access modes that, for example, atomically get and\n bitwise OR the value of a variable under specified memory ordering\n effects.\n The set of corresponding access mode methods belonging to this group\n consists of the methods\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseOr\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseOr\" class=\"docClass\">getAndBitwiseOr</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseOrAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseOrAcquire\" class=\"docClass\">getAndBitwiseOrAcquire</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseOrRelease\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseOrRelease\" class=\"docClass\">getAndBitwiseOrRelease</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseAnd\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseAnd\" class=\"docClass\">getAndBitwiseAnd</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseAndAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseAndAcquire\" class=\"docClass\">getAndBitwiseAndAcquire</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseAndRelease\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseAndRelease\" class=\"docClass\">getAndBitwiseAndRelease</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseXor\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseXor\" class=\"docClass\">getAndBitwiseXor</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseXorAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseXorAcquire\" class=\"docClass\">getAndBitwiseXorAcquire</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseXorRelease\" rel=\"java.lang.invoke.VarHandle-method-getAndBitwiseXorRelease\" class=\"docClass\">getAndBitwiseXorRelease</a>.\n </li></li></li></li></li></ul></p>\n\n<p> <p>Factory methods that produce or <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup\" rel=\"java.lang.invoke.MethodHandles.Lookup\" class=\"docClass\">lookup</a> VarHandle instances document the set of access modes that are\n supported, which may also include documenting restrictions based on the\n variable type and whether a variable is read-only.  If an access mode is not\n supported then the corresponding access mode method will on invocation throw\n an {@code UnsupportedOperationException}.  Factory methods should document\n any additional undeclared exceptions that may be thrown by access mode\n methods.\n The <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a> access mode is supported for all\n VarHandle instances and the corresponding method never throws\n {@code UnsupportedOperationException}.\n If a VarHandle references a read-only variable (for example a {@code final}\n field) then write, atomic update, numeric atomic update, and bitwise atomic\n update access modes are not supported and corresponding methods throw\n {@code UnsupportedOperationException}.\n Read/write access modes (if supported), with the exception of\n {@code get} and {@code set}, provide atomic access for\n reference types and all primitive types.\n Unless stated otherwise in the documentation of a factory method, the access\n modes {@code get} and {@code set} (if supported) provide atomic access for\n reference types and all primitives types, with the exception of {@code long}\n and {@code double} on 32-bit platforms.</p>\n\n<p> <p>Access modes will override any memory ordering effects specified at\n the declaration site of a variable.  For example, a VarHandle accessing a\n a field using the {@code get} access mode will access the field as\n specified <em>by its access mode</em> even if that field is declared\n {@code volatile}.  When mixed access is performed extreme care should be\n taken since the Java Memory Model may permit surprising results.</p>\n\n<p> <p>In addition to supporting access to variables under various access modes,\n a set of static methods, referred to as memory fence methods, is also\n provided for fine-grained control of memory ordering.</p>\n\n<p> The Java Language Specification permits other threads to observe operations\n as if they were executed in orders different than are apparent in program\n source code, subject to constraints arising, for example, from the use of\n locks, {@code volatile} fields or VarHandles.  The static methods,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-fullFence\" rel=\"java.lang.invoke.VarHandle-method-fullFence\" class=\"docClass\">fullFence</a>, <a href=\"#!/api/java.lang.invoke.VarHandle-method-acquireFence\" rel=\"java.lang.invoke.VarHandle-method-acquireFence\" class=\"docClass\">acquireFence</a>,\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-releaseFence\" rel=\"java.lang.invoke.VarHandle-method-releaseFence\" class=\"docClass\">releaseFence</a>, <a href=\"#!/api/java.lang.invoke.VarHandle-method-loadLoadFence\" rel=\"java.lang.invoke.VarHandle-method-loadLoadFence\" class=\"docClass\">loadLoadFence</a> and\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-storeStoreFence\" rel=\"java.lang.invoke.VarHandle-method-storeStoreFence\" class=\"docClass\">storeStoreFence</a>, can also be used to impose\n constraints.  Their specifications, as is the case for certain access modes,\n are phrased in terms of the lack of \"reorderings\" -- observable ordering\n effects that might otherwise occur if the fence was not present.  More\n precise phrasing of the specification of access mode methods and memory fence\n methods may accompany future updates of the Java Language Specification.</p>\n\n<p> <h1>Compiling invocation of access mode methods</h1>\n A Java method call expression naming an access mode method can invoke a\n VarHandle from Java source code.  From the viewpoint of source code, these\n methods can take any arguments and their polymorphic result (if expressed)\n can be cast to any return type.  Formally this is accomplished by giving the\n access mode methods variable arity {@code Object} arguments and\n {@code Object} return types (if the return type is polymorphic), but they\n have an additional quality called <em>signature polymorphism</em> which\n connects this freedom of invocation directly to the JVM execution stack.\n <p>\n As is usual with virtual methods, source-level calls to access mode methods\n compile to an {@code invokevirtual} instruction.  More unusually, the\n compiler must record the actual argument types, and may not perform method\n invocation conversions on the arguments.  Instead, it must generate\n instructions to push them on the stack according to their own unconverted\n types.  The VarHandle object itself will be pushed on the stack before the\n arguments.  The compiler then generates an {@code invokevirtual} instruction\n that invokes the access mode method with a symbolic type descriptor which\n describes the argument and return types.\n <p>\n To issue a complete symbolic type descriptor, the compiler must also\n determine the return type (if polymorphic).  This is based on a cast on the\n method invocation expression, if there is one, or else {@code Object} if the\n invocation is an expression, or else {@code void} if the invocation is a\n statement.  The cast may be to a primitive type (but not {@code void}).\n <p>\n As a corner case, an uncasted {@code null} argument is given a symbolic type\n descriptor of {@code java.lang.Void}.  The ambiguity with the type\n {@code Void} is harmless, since there are no references of type {@code Void}\n except the null reference.</p>\n\n<p> <h1><a id=\"invoke\">Performing invocation of access mode methods</a></h1>\n The first time an {@code invokevirtual} instruction is executed it is linked\n by symbolically resolving the names in the instruction and verifying that\n the method call is statically legal.  This also holds for calls to access mode\n methods.  In this case, the symbolic type descriptor emitted by the compiler\n is checked for correct syntax, and names it contains are resolved.  Thus, an\n {@code invokevirtual} instruction which invokes an access mode method will\n always link, as long as the symbolic type descriptor is syntactically\n well-formed and the types exist.\n <p>\n When the {@code invokevirtual} is executed after linking, the receiving\n VarHandle's access mode type is first checked by the JVM to ensure that it\n matches the symbolic type descriptor.  If the type\n match fails, it means that the access mode method which the caller is\n invoking is not present on the individual VarHandle being invoked.</p>\n\n<p> <p>\n Invocation of an access mode method behaves as if an invocation of\n <a href=\"#!/api/java.lang.invoke.MethodHandle-method-invoke\" rel=\"java.lang.invoke.MethodHandle-method-invoke\" class=\"docClass\">java.lang.invoke.MethodHandle.invoke</a>, where the receiving method handle accepts the\n VarHandle instance as the leading argument.  More specifically, the\n following, where {@code {access-mode}} corresponds to the access mode method\n name:\n <pre> {@code\n VarHandle vh = ..\n R r = (R) vh.{access-mode}(p1, p2, ..., pN);\n }</pre>\n behaves as if:\n <pre> {@code\n VarHandle vh = ..\n VarHandle.AccessMode am = VarHandle.AccessMode.valueFromMethodName(\"{access-mode}\");\n MethodHandle mh = MethodHandles.varHandleExactInvoker(\n                       am,\n                       vh.accessModeType(am));</pre></p>\n\n<p> R r = (R) mh.invoke(vh, p1, p2, ..., pN)\n }\n (modulo access mode methods do not declare throwing of {@code Throwable}).\n This is equivalent to:\n <pre> {@code\n MethodHandle mh = MethodHandles.lookup().findVirtual(\n                       VarHandle.class,\n                       \"{access-mode}\",\n                       MethodType.methodType(R, p1, p2, ..., pN));</pre></p>\n\n<p> R r = (R) mh.invokeExact(vh, p1, p2, ..., pN)\n }\n where the desired method type is the symbolic type descriptor and a\n <a href=\"#!/api/java.lang.invoke.MethodHandle-method-invokeExact\" rel=\"java.lang.invoke.MethodHandle-method-invokeExact\" class=\"docClass\">java.lang.invoke.MethodHandle.invokeExact</a> is performed, since before invocation of the\n target, the handle will apply reference casts as necessary and box, unbox, or\n widen primitive values, as if by <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asType\" rel=\"java.lang.invoke.MethodHandle-method-asType\" class=\"docClass\">asType</a> (see also\n java.lang.invoke.MethodHandles.varHandleInvoker).</p>\n\n<p> More concisely, such behaviour is equivalent to:\n <pre> {@code\n VarHandle vh = ..\n VarHandle.AccessMode am = VarHandle.AccessMode.valueFromMethodName(\"{access-mode}\");\n MethodHandle mh = vh.toMethodHandle(am);</pre></p>\n\n<p> R r = (R) mh.invoke(p1, p2, ..., pN)\n }\n Where, in this case, the method handle is bound to the VarHandle instance.</p>\n\n<p> <h1>Invocation checking</h1>\n In typical programs, VarHandle access mode type matching will usually\n succeed.  But if a match fails, the JVM will throw a\n <a href=\"#!/api/java.lang.invoke.WrongMethodTypeException\" rel=\"java.lang.invoke.WrongMethodTypeException\" class=\"docClass\">java.lang.invoke.WrongMethodTypeException</a>.\n <p>\n Thus, an access mode type mismatch which might show up as a linkage error\n in a statically typed program can show up as a dynamic\n {@code WrongMethodTypeException} in a program which uses VarHandles.\n <p>\n Because access mode types contain \"live\" {@code Class} objects, method type\n matching takes into account both type names and class loaders.\n Thus, even if a VarHandle {@code VH} is created in one class loader\n {@code L1} and used in another {@code L2}, VarHandle access mode method\n calls are type-safe, because the caller's symbolic type descriptor, as\n resolved in {@code L2}, is matched against the original callee method's\n symbolic type descriptor, as resolved in {@code L1}.  The resolution in\n {@code L1} happens when {@code VH} is created and its access mode types are\n assigned, while the resolution in {@code L2} happens when the\n {@code invokevirtual} instruction is linked.\n <p>\n Apart from type descriptor checks, a VarHandles's capability to\n access it's variables is unrestricted.\n If a VarHandle is formed on a non-public variable by a class that has access\n to that variable, the resulting VarHandle can be used in any place by any\n caller who receives a reference to it.\n <p>\n Unlike with the Core Reflection API, where access is checked every time a\n reflective method is invoked, VarHandle access checking is performed\n <a href=\"MethodHandles.Lookup.html#access\">when the VarHandle is\n created</a>.\n Thus, VarHandles to non-public variables, or to variables in non-public\n classes, should generally be kept secret.  They should not be passed to\n untrusted code unless their use from the untrusted code would be harmless.</p>\n\n<p> <h1>VarHandle creation</h1>\n Java code can create a VarHandle that directly accesses any field that is\n accessible to that code.  This is done via a reflective, capability-based\n API called <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup\" rel=\"java.lang.invoke.MethodHandles.Lookup\" class=\"docClass\">MethodHandles.Lookup</a>.\n For example, a VarHandle for a non-static field can be obtained\n from Lookup.findVarHandle.\n There is also a conversion method from Core Reflection API objects,\n Lookup.unreflectVarHandle.\n <p>\n Access to protected field members is restricted to receivers only of the\n accessing class, or one of its subclasses, and the accessing class must in\n turn be a subclass (or package sibling) of the protected member's defining\n class.  If a VarHandle refers to a protected non-static field of a declaring\n class outside the current package, the receiver argument will be narrowed to\n the type of the accessing class.</p>\n\n<p> <h1>Interoperation between VarHandles and the Core Reflection API</h1>\n Using factory methods in the <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup\" rel=\"java.lang.invoke.MethodHandles.Lookup\" class=\"docClass\">Lookup</a> API, any field represented by a Core Reflection API object\n can be converted to a behaviorally equivalent VarHandle.\n For example, a reflective Field can\n be converted to a VarHandle using\n Lookup.unreflectVarHandle.\n The resulting VarHandles generally provide more direct and efficient\n access to the underlying fields.\n <p>\n As a special case, when the Core Reflection API is used to view the\n signature polymorphic access mode methods in this class, they appear as\n ordinary non-polymorphic methods.  Their reflective appearance, as viewed by\n Class.getDeclaredMethod,\n is unaffected by their special status in this API.\n For example, Method.getModifiers\n will report exactly those modifier bits required for any similarly\n declared method, including in this case {@code native} and {@code varargs}\n bits.\n <p>\n As with any reflected method, these methods (when reflected) may be invoked\n directly via java.lang.reflect.Method.invoke,\n via JNI, or indirectly via\n <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflect\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflect\" class=\"docClass\">Lookup.unreflect</a>.\n However, such reflective calls do not result in access mode method\n invocations.  Such a call, if passed the required argument (a single one, of\n type {@code Object[]}), will ignore the argument and will throw an\n {@code UnsupportedOperationException}.\n <p>\n Since {@code invokevirtual} instructions can natively invoke VarHandle\n access mode methods under any symbolic type descriptor, this reflective view\n conflicts with the normal presentation of these methods via bytecodes.\n Thus, these native methods, when reflectively viewed by\n {@code Class.getDeclaredMethod}, may be regarded as placeholders only.\n <p>\n In order to obtain an invoker method for a particular access mode type,\n use java.lang.invoke.MethodHandles.varHandleExactInvoker or\n java.lang.invoke.MethodHandles.varHandleInvoker.  The\n <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" class=\"docClass\">Lookup.findVirtual</a>\n API is also able to return a method handle to call an access mode method for\n any specified access mode type and is equivalent in behaviour to\n java.lang.invoke.MethodHandles.varHandleInvoker.</p>\n\n<p> <h1>Interoperation between VarHandles and Java generics</h1>\n A VarHandle can be obtained for a variable, such as a a field, which is\n declared with Java generic types.  As with the Core Reflection API, the\n VarHandle's variable type will be constructed from the erasure of the\n source-level type.  When a VarHandle access mode method is invoked, the\n types\n of its arguments or the return value cast type may be generic types or type\n instances.  If this occurs, the compiler will replace those types by their\n erasures when it constructs the symbolic type descriptor for the\n {@code invokevirtual} instruction.</p>\n\n<p> @see MethodHandle\n @see MethodHandles\n @see MethodType</p>\n        <p>Available since: <b>9</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-accessModeType' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-accessModeType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-accessModeType' class='name expandable'>accessModeType</a>( <span class='pre'>accessMode</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains the access mode type for this VarHandle and a given access mode. ...</div><div class='long'><p>Obtains the access mode type for this VarHandle and a given access mode.</p>\n\n<p> <p>The access mode type's parameter types will consist of a prefix that\n is the coordinate types of this VarHandle followed by further\n types as defined by the access mode method.\n The access mode type's return type is defined by the return type of the\n access mode method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>accessMode</span> : Object {VarHandle.AccessMode}<div class='sub-desc'><p>the access mode, corresponding to the\n signature-polymorphic method of the same name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the access mode type for the given access mode</p>\n</div></li></ul></div></div></div><div id='method-acquireFence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-acquireFence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-acquireFence' class='name expandable'>acquireFence</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ensures that loads before the fence will not be reordered with loads and\n stores after the fence. ...</div><div class='long'><p>Ensures that loads before the fence will not be reordered with loads and\n stores after the fence.\n@apiNote Ignoring the many semantic differences from C and C++, this\n method has memory ordering effects compatible with\n {@code atomic_thread_fence(memory_order_acquire)}</p>\n</div></div></div><div id='method-compareAndExchange' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-compareAndExchange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-compareAndExchange' class='name expandable'>compareAndExchange</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of setVolatile if the vari...</div><div class='long'><p>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a> if the variable's current value,\n referred to as the <em>witness value</em>, {@code ==} the\n {@code expectedValue}, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code\n compareAndExchange}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.COMPARE_AND_EXCHANGE)}\n on this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the witness value, which\n will be the same as the {@code expectedValue} if successful\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type is not\n compatible with the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type is compatible with the\n caller's symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-compareAndExchangeAcquire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-compareAndExchangeAcquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-compareAndExchangeAcquire' class='name expandable'>compareAndExchangeAcquire</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of set if the variable's c...</div><div class='long'><p>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a> if the variable's current value,\n referred to as the <em>witness value</em>, {@code ==} the\n {@code expectedValue}, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code\n compareAndExchangeAcquire}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_ACQUIRE)} on\n this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the witness value, which\n will be the same as the {@code expectedValue} if successful\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-compareAndExchangeRelease' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-compareAndExchangeRelease' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-compareAndExchangeRelease' class='name expandable'>compareAndExchangeRelease</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of setRelease if the varia...</div><div class='long'><p>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a> if the variable's current value,\n referred to as the <em>witness value</em>, {@code ==} the\n {@code expectedValue}, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code\n compareAndExchangeRelease}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.COMPARE_AND_EXCHANGE_RELEASE)}\n on this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the witness value, which\n will be the same as the {@code expectedValue} if successful\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-compareAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-compareAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-compareAndSet' class='name expandable'>compareAndSet</a>( <span class='pre'>args</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of setVolatile if the vari...</div><div class='long'><p>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a> if the variable's current value,\n referred to as the <em>witness value</em>, {@code ==} the\n {@code expectedValue}, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code\n compareAndSet} must match the access mode type that is the result of\n calling {@code accessModeType(VarHandle.AccessMode.COMPARE_AND_SET)} on\n this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, otherwise {@code false} if the\n witness value was not the same as the {@code expectedValue}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-coordinateTypes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-coordinateTypes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-coordinateTypes' class='name expandable'>coordinateTypes</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the coordinate types for this VarHandle. ...</div><div class='long'><p>Returns the coordinate types for this VarHandle.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>the coordinate types for this VarHandle. The returned\n list is unmodifiable</p>\n</div></li></ul></div></div></div><div id='method-fullFence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-fullFence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-fullFence' class='name expandable'>fullFence</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ensures that loads and stores before the fence will not be reordered\n with\n loads and stores after the fence. ...</div><div class='long'><p>Ensures that loads and stores before the fence will not be reordered\n with\n loads and stores after the fence.\n@apiNote Ignoring the many semantic differences from C and C++, this\n method has memory ordering effects compatible with\n {@code atomic_thread_fence(memory_order_seq_cst)}</p>\n</div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-get' class='name expandable'>get</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of a variable, with memory semantics of reading as\n if the variable was declared non-{@code volatile}. ...</div><div class='long'><p>Returns the value of a variable, with memory semantics of reading as\n if the variable was declared non-{@code volatile}.  Commonly referred to\n as plain read access.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code get}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET)} on this VarHandle.</p>\n\n<p> <p>This access mode is supported by all VarHandle instances and never\n throws {@code UnsupportedOperationException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the value of the\n variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.</p>\n</div></li></ul></div></div></div><div id='method-getAcquire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAcquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAcquire' class='name expandable'>getAcquire</a>( <span class='pre'>args, args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of a variable, and ensures that subsequent loads and\n stores are not reordered before this access. ...</div><div class='long'><p>Returns the value of a variable, and ensures that subsequent loads and\n stores are not reordered before this access.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAcquire}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_ACQUIRE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn)}\n , statically represented using varargs.</p>\n</div></li><li><span class='pre'>args</span> : Object<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the value of the\n variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.</p>\n</div></li></ul></div></div></div><div id='method-getAndAdd' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndAdd' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndAdd' class='name expandable'>getAndAdd</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically adds the {@code value} to the current value of a variable with\n the memory semantics of setVolatile, and r...</div><div class='long'><p>Atomically adds the {@code value} to the current value of a variable with\n the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>, and returns the variable's\n previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T value)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndAdd}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_ADD)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T value)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndAddAcquire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndAddAcquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndAddAcquire' class='name expandable'>getAndAddAcquire</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically adds the {@code value} to the current value of a variable with\n the memory semantics of set, and returns t...</div><div class='long'><p>Atomically adds the {@code value} to the current value of a variable with\n the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a>, and returns the variable's\n previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T value)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndAddAcquire}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_ADD_ACQUIRE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T value)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndAddRelease' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndAddRelease' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndAddRelease' class='name expandable'>getAndAddRelease</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically adds the {@code value} to the current value of a variable with\n the memory semantics of setRelease, and re...</div><div class='long'><p>Atomically adds the {@code value} to the current value of a variable with\n the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a>, and returns the variable's\n previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T value)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndAddRelease}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_ADD_RELEASE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T value)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseAnd' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseAnd' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseAnd' class='name expandable'>getAndBitwiseAnd</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the {@...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical AND is performed instead of a bitwise AND.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseAnd}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_AND)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseAndAcquire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseAndAcquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseAndAcquire' class='name expandable'>getAndBitwiseAndAcquire</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the {@...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical AND is performed instead of a bitwise AND.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseAndAcquire}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_AND_ACQUIRE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseAndRelease' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseAndRelease' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseAndRelease' class='name expandable'>getAndBitwiseAndRelease</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the {@...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise AND between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical AND is performed instead of a bitwise AND.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseAndRelease}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_AND_RELEASE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseOr' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseOr' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseOr' class='name expandable'>getAndBitwiseOr</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the {@c...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical OR is performed instead of a bitwise OR.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseOr}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_OR)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseOrAcquire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseOrAcquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseOrAcquire' class='name expandable'>getAndBitwiseOrAcquire</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the {@c...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical OR is performed instead of a bitwise OR.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseOrAcquire}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_OR_ACQUIRE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseOrRelease' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseOrRelease' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseOrRelease' class='name expandable'>getAndBitwiseOrRelease</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the {@c...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise OR between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical OR is performed instead of a bitwise OR.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseOrRelease}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_OR_RELEASE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseXor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseXor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseXor' class='name expandable'>getAndBitwiseXor</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the {@...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical XOR is performed instead of a bitwise XOR.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseXor}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_XOR)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseXorAcquire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseXorAcquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseXorAcquire' class='name expandable'>getAndBitwiseXorAcquire</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the {@...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical XOR is performed instead of a bitwise XOR.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseXorAcquire}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_XOR_ACQUIRE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndBitwiseXorRelease' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndBitwiseXorRelease' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndBitwiseXorRelease' class='name expandable'>getAndBitwiseXorRelease</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the {@...</div><div class='long'><p>Atomically sets the value of a variable to the result of\n bitwise XOR between the variable's current value and the {@code mask}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a> and returns the\n variable's previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>.</p>\n\n<p> <p>If the variable type is the non-integral {@code boolean} type then a\n logical XOR is performed instead of a bitwise XOR.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T mask)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndBitwiseXorRelease}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_BITWISE_XOR_RELEASE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T mask)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndSet' class='name expandable'>getAndSet</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of setVolatile and returns...</div><div class='long'><p>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a> and returns the variable's\n previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T newValue)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndSet}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_SET)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndSetAcquire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndSetAcquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndSetAcquire' class='name expandable'>getAndSetAcquire</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of set and returns the var...</div><div class='long'><p>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a> and returns the variable's\n previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T newValue)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndSetAcquire}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_SET_ACQUIRE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getAndSetRelease' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getAndSetRelease' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getAndSetRelease' class='name expandable'>getAndSetRelease</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of setRelease and returns ...</div><div class='long'><p>Atomically sets the value of a variable to the {@code newValue} with the\n memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a> and returns the variable's\n previous value, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T newValue)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getAndSetRelease}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_AND_SET_RELEASE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the previous value of\n the variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-getOpaque' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getOpaque' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getOpaque' class='name expandable'>getOpaque</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of a variable, accessed in program order, but with no\n assurance of memory ordering effects with re...</div><div class='long'><p>Returns the value of a variable, accessed in program order, but with no\n assurance of memory ordering effects with respect to other threads.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getOpaque}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_OPAQUE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the value of the\n variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.</p>\n</div></li></ul></div></div></div><div id='method-getVolatile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-getVolatile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-getVolatile' class='name expandable'>getVolatile</a>( <span class='pre'>args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of a variable, with memory semantics of reading as if\n the variable was declared {@code volatile}. ...</div><div class='long'><p>Returns the value of a variable, with memory semantics of reading as if\n the variable was declared {@code volatile}.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn)T}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code getVolatile}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.GET_VOLATILE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the signature-polymorphic result that is the value of the\n variable\n , statically represented using {@code Object}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.</p>\n</div></li></ul></div></div></div><div id='method-isAccessModeSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-isAccessModeSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-isAccessModeSupported' class='name expandable'>isAccessModeSupported</a>( <span class='pre'>accessMode</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if the given access mode is supported, otherwise\n {@code false}. ...</div><div class='long'><p>Returns {@code true} if the given access mode is supported, otherwise\n {@code false}.</p>\n\n<p> <p>The return of a {@code false} value for a given access mode indicates\n that an {@code UnsupportedOperationException} is thrown on invocation\n of the corresponding access mode method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>accessMode</span> : Object {VarHandle.AccessMode}<div class='sub-desc'><p>the access mode, corresponding to the\n signature-polymorphic method of the same name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the given access mode is supported, otherwise\n {@code false}.</p>\n</div></li></ul></div></div></div><div id='method-loadLoadFence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-loadLoadFence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-loadLoadFence' class='name expandable'>loadLoadFence</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ensures that loads before the fence will not be reordered with\n loads after the fence. ...</div><div class='long'><p>Ensures that loads before the fence will not be reordered with\n loads after the fence.</p>\n</div></div></div><div id='method-releaseFence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-releaseFence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-releaseFence' class='name expandable'>releaseFence</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ensures that loads and stores before the fence will not be\n reordered with stores after the fence. ...</div><div class='long'><p>Ensures that loads and stores before the fence will not be\n reordered with stores after the fence.\n@apiNote Ignoring the many semantic differences from C and C++, this\n method has memory ordering effects compatible with\n {@code atomic_thread_fence(memory_order_release)}</p>\n</div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-set' class='name expandable'>set</a>( <span class='pre'>args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the value of a variable to the {@code newValue}, with memory\n semantics of setting as if the variable was declar...</div><div class='long'><p>Sets the value of a variable to the {@code newValue}, with memory\n semantics of setting as if the variable was declared non-{@code volatile}\n and non-{@code final}.  Commonly referred to as plain write access.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T newValue)void}</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code set}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.SET)} on this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.</p>\n</div></li></ul></div></div></div><div id='method-setOpaque' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-setOpaque' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-setOpaque' class='name expandable'>setOpaque</a>( <span class='pre'>args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the value of a variable to the {@code newValue}, in program order,\n but with no assurance of memory ordering eff...</div><div class='long'><p>Sets the value of a variable to the {@code newValue}, in program order,\n but with no assurance of memory ordering effects with respect to other\n threads.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T newValue)void}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code setOpaque}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.SET_OPAQUE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.</p>\n</div></li></ul></div></div></div><div id='method-setRelease' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-setRelease' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-setRelease' class='name expandable'>setRelease</a>( <span class='pre'>args, args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the value of a variable to the {@code newValue}, and ensures that\n prior loads and stores are not reordered afte...</div><div class='long'><p>Sets the value of a variable to the {@code newValue}, and ensures that\n prior loads and stores are not reordered after this access.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T newValue)void}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code setRelease}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.SET_RELEASE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li><li><span class='pre'>args</span> : Object<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.</p>\n</div></li></ul></div></div></div><div id='method-setVolatile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-setVolatile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-setVolatile' class='name expandable'>setVolatile</a>( <span class='pre'>args, args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the value of a variable to the {@code newValue}, with memory\n semantics of setting as if the variable was declar...</div><div class='long'><p>Sets the value of a variable to the {@code newValue}, with memory\n semantics of setting as if the variable was declared {@code volatile}.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T newValue)void}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code setVolatile}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.SET_VOLATILE)} on this\n VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li><li><span class='pre'>args</span> : Object<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.</p>\n</div></li></ul></div></div></div><div id='method-storeStoreFence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-storeStoreFence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-storeStoreFence' class='name expandable'>storeStoreFence</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ensures that stores before the fence will not be reordered with\n stores after the fence. ...</div><div class='long'><p>Ensures that stores before the fence will not be reordered with\n stores after the fence.</p>\n</div></div></div><div id='method-toMethodHandle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-toMethodHandle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-toMethodHandle' class='name expandable'>toMethodHandle</a>( <span class='pre'>accessMode, accessMode</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a method handle bound to this VarHandle and the given access\n mode. ...</div><div class='long'><p>Obtains a method handle bound to this VarHandle and the given access\n mode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>accessMode</span> : Object {VarHandle.AccessMode}<div class='sub-desc'><p>the access mode, corresponding to the\n signature-polymorphic method of the same name</p>\n</div></li><li><span class='pre'>accessMode</span> : Object<div class='sub-desc'><p>the access mode, corresponding to the\n signature-polymorphic method of the same name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle bound to this VarHandle and the given access mode</p>\n</div></li></ul></div></div></div><div id='method-varType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-varType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-varType' class='name expandable'>varType</a>( <span class='pre'></span> ) : Object {java.lang.Class}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the variable type of variables referenced by this VarHandle. ...</div><div class='long'><p>Returns the variable type of variables referenced by this VarHandle.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Class}</span><div class='sub-desc'><p>the variable type of variables referenced by this VarHandle</p>\n</div></li></ul></div></div></div><div id='method-weakCompareAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-weakCompareAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-weakCompareAndSet' class='name expandable'>weakCompareAndSet</a>( <span class='pre'>args</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly atomically sets the value of a variable to the {@code newValue}\n with the memory semantics of setVolatile if...</div><div class='long'><p>Possibly atomically sets the value of a variable to the {@code newValue}\n with the memory semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a> if the variable's\n current value, referred to as the <em>witness value</em>, {@code ==} the\n {@code expectedValue}, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>.</p>\n\n<p> <p>This operation may fail spuriously (typically, due to memory\n contention) even if the witness value does match the expected value.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code\n weakCompareAndSet} must match the access mode type that is the\n result of calling {@code accessModeType(VarHandle.AccessMode.WEAK_COMPARE_AND_SET)}\n on this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, otherwise {@code false} if the\n witness value was not the same as the {@code expectedValue} or if this\n operation spuriously failed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setVolatile\" rel=\"java.lang.invoke.VarHandle-method-setVolatile\" class=\"docClass\">setVolatile</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getVolatile\" rel=\"java.lang.invoke.VarHandle-method-getVolatile\" class=\"docClass\">getVolatile</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-weakCompareAndSetAcquire' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-weakCompareAndSetAcquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-weakCompareAndSetAcquire' class='name expandable'>weakCompareAndSetAcquire</a>( <span class='pre'>args</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly atomically sets the value of a variable to the {@code newValue}\n with the semantics of set if the variable's...</div><div class='long'><p>Possibly atomically sets the value of a variable to the {@code newValue}\n with the semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a> if the variable's current value,\n referred to as the <em>witness value</em>, {@code ==} the\n {@code expectedValue}, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>.</p>\n\n<p> <p>This operation may fail spuriously (typically, due to memory\n contention) even if the witness value does match the expected value.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code\n weakCompareAndSetAcquire}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_ACQUIRE)}\n on this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, otherwise {@code false} if the\n witness value was not the same as the {@code expectedValue} or if this\n operation spuriously failed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-getAcquire\" rel=\"java.lang.invoke.VarHandle-method-getAcquire\" class=\"docClass\">getAcquire</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-weakCompareAndSetPlain' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-weakCompareAndSetPlain' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-weakCompareAndSetPlain' class='name expandable'>weakCompareAndSetPlain</a>( <span class='pre'>args</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly atomically sets the value of a variable to the {@code newValue}\n with the semantics of set if the variable's...</div><div class='long'><p>Possibly atomically sets the value of a variable to the {@code newValue}\n with the semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a> if the variable's current value,\n referred to as the <em>witness value</em>, {@code ==} the\n {@code expectedValue}, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>.</p>\n\n<p> <p>This operation may fail spuriously (typically, due to memory\n contention) even if the witness value does match the expected value.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code\n weakCompareAndSetPlain} must match the access mode type that is the result of\n calling {@code accessModeType(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_PLAIN)}\n on this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, otherwise {@code false} if the\n witness value was not the same as the {@code expectedValue} or if this\n operation spuriously failed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-set\" rel=\"java.lang.invoke.VarHandle-method-set\" class=\"docClass\">set</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>(Object...)</p>\n</div></li></ul></div></div></div><div id='method-weakCompareAndSetRelease' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VarHandle'>java.lang.invoke.VarHandle</span><br/><a href='source/VarHandle.html#java-lang-invoke-VarHandle-method-weakCompareAndSetRelease' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VarHandle-method-weakCompareAndSetRelease' class='name expandable'>weakCompareAndSetRelease</a>( <span class='pre'>args</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly atomically sets the value of a variable to the {@code newValue}\n with the semantics of setRelease if the var...</div><div class='long'><p>Possibly atomically sets the value of a variable to the {@code newValue}\n with the semantics of <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a> if the variable's current\n value, referred to as the <em>witness value</em>, {@code ==} the\n {@code expectedValue}, as accessed with the memory semantics of\n <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>.</p>\n\n<p> <p>This operation may fail spuriously (typically, due to memory\n contention) even if the witness value does match the expected value.</p>\n\n<p> <p>The method signature is of the form {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)boolean}.</p>\n\n<p> <p>The symbolic type descriptor at the call site of {@code\n weakCompareAndSetRelease}\n must match the access mode type that is the result of calling\n {@code accessModeType(VarHandle.AccessMode.WEAK_COMPARE_AND_SET_RELEASE)}\n on this VarHandle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the signature-polymorphic parameter list of the form\n {@code (CT1 ct1, ..., CTn ctn, T expectedValue, T newValue)}\n , statically represented using varargs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, otherwise {@code false} if the\n witness value was not the same as the {@code expectedValue} or if this\n operation spuriously failed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the access mode is unsupported\n for this VarHandle.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the access mode type does not\n match the caller's symbolic type descriptor.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the access mode type matches the caller's\n symbolic type descriptor, but a reference cast fails.\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-setRelease\" rel=\"java.lang.invoke.VarHandle-method-setRelease\" class=\"docClass\">setRelease</a>(Object...)\n@see <a href=\"#!/api/java.lang.invoke.VarHandle-method-get\" rel=\"java.lang.invoke.VarHandle-method-get\" class=\"docClass\">get</a>(Object...)</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});