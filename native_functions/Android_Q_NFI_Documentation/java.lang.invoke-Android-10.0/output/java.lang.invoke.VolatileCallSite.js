Ext.data.JsonP.java_lang_invoke_VolatileCallSite({"tagname":"class","name":"java.lang.invoke.VolatileCallSite","autodetected":{},"files":[{"filename":"VolatileCallSite.js","href":"VolatileCallSite.html#java-lang-invoke-VolatileCallSite"}],"extends":"java.lang.invoke.CallSite","author":[{"tagname":"author","name":"John Rose, JSR 292 EG","email":null}],"members":[{"name":"dynamicInvoker","tagname":"method","owner":"java.lang.invoke.VolatileCallSite","id":"method-dynamicInvoker","meta":{}},{"name":"getTarget","tagname":"method","owner":"java.lang.invoke.VolatileCallSite","id":"method-getTarget","meta":{}},{"name":"setTarget","tagname":"method","owner":"java.lang.invoke.VolatileCallSite","id":"method-setTarget","meta":{}},{"name":"type","tagname":"method","owner":"java.lang.invoke.CallSite","id":"method-type","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.VolatileCallSite","short_doc":"A {@code VolatileCallSite} is a java.lang.invoke.CallSite whose target acts like a volatile variable. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.lang.invoke.CallSite"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.lang.invoke.CallSite' rel='java.lang.invoke.CallSite' class='docClass'>java.lang.invoke.CallSite</a><div class='subclass '><strong>java.lang.invoke.VolatileCallSite</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/VolatileCallSite.html#java-lang-invoke-VolatileCallSite' target='_blank'>VolatileCallSite.js</a></div></pre><div class='doc-contents'><p>A {@code VolatileCallSite} is a <a href=\"#!/api/java.lang.invoke.CallSite\" rel=\"java.lang.invoke.CallSite\" class=\"docClass\">java.lang.invoke.CallSite</a> whose target acts like a volatile variable.\n An {@code invokedynamic} instruction linked to a {@code VolatileCallSite} sees updates\n to its call site target immediately, even if the update occurs in another thread.\n There may be a performance penalty for such tight coupling between threads.\n <p>\n In other respects, a {@code VolatileCallSite} is interchangeable\n with {@code MutableCallSite}.\n @see MutableCallSite</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-dynamicInvoker' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VolatileCallSite'>java.lang.invoke.VolatileCallSite</span><br/><a href='source/VolatileCallSite.html#java-lang-invoke-VolatileCallSite-method-dynamicInvoker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VolatileCallSite-method-dynamicInvoker' class='name expandable'>dynamicInvoker</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc} ...</div><div class='long'><p>{@inheritDoc}</p>\n<p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-dynamicInvoker\" rel=\"java.lang.invoke.CallSite-method-dynamicInvoker\" class=\"docClass\">java.lang.invoke.CallSite.dynamicInvoker</a></p></div></div></div><div id='method-getTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VolatileCallSite'>java.lang.invoke.VolatileCallSite</span><br/><a href='source/VolatileCallSite.html#java-lang-invoke-VolatileCallSite-method-getTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VolatileCallSite-method-getTarget' class='name expandable'>getTarget</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the target method of the call site, which behaves\n like a {@code volatile} field of the {@code VolatileCallSi...</div><div class='long'><p>Returns the target method of the call site, which behaves\n like a {@code volatile} field of the {@code VolatileCallSite}.\n <p>\n The interactions of {@code getTarget} with memory are the same\n as of a read from a {@code volatile} field.\n <p>\n In particular, the current thread is required to issue a fresh\n read of the target from memory, and must not fail to see\n a recent update to the target by another thread.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the linkage state of this call site, a method handle which can change over time\n@see <a href=\"#!/api/java.lang.invoke.VolatileCallSite-method-setTarget\" rel=\"java.lang.invoke.VolatileCallSite-method-setTarget\" class=\"docClass\">setTarget</a></p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-getTarget\" rel=\"java.lang.invoke.CallSite-method-getTarget\" class=\"docClass\">java.lang.invoke.CallSite.getTarget</a></p></div></div></div><div id='method-setTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.VolatileCallSite'>java.lang.invoke.VolatileCallSite</span><br/><a href='source/VolatileCallSite.html#java-lang-invoke-VolatileCallSite-method-setTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.VolatileCallSite-method-setTarget' class='name expandable'>setTarget</a>( <span class='pre'>newTarget</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates the target method of this call site, as a volatile variable. ...</div><div class='long'><p>Updates the target method of this call site, as a volatile variable.\n The type of the new target must agree with the type of the old target.\n <p>\n The interactions with memory are the same as of a write to a volatile field.\n In particular, any threads is guaranteed to see the updated target\n the next time it calls {@code getTarget}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newTarget</span> : Object {MethodHandle}<div class='sub-desc'><p>the new target</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the proposed new target is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the proposed new target\n         has a method type that differs from the previous target\n@see <a href=\"#!/api/java.lang.invoke.VolatileCallSite-method-getTarget\" rel=\"java.lang.invoke.VolatileCallSite-method-getTarget\" class=\"docClass\">getTarget</a></p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-setTarget\" rel=\"java.lang.invoke.CallSite-method-setTarget\" class=\"docClass\">java.lang.invoke.CallSite.setTarget</a></p></div></div></div><div id='method-type' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.invoke.CallSite' rel='java.lang.invoke.CallSite' class='defined-in docClass'>java.lang.invoke.CallSite</a><br/><a href='source/CallSite.html#java-lang-invoke-CallSite-method-type' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.CallSite-method-type' class='name expandable'>type</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the type of this call site's target. ...</div><div class='long'><p>Returns the type of this call site's target.\n Although targets may change, any call site's type is permanent, and can never change to an unequal type.\n The {@code setTarget} method enforces this invariant by refusing any new target that does\n not have the previous target's type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the type of the current target, which is also the type of any future target</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});