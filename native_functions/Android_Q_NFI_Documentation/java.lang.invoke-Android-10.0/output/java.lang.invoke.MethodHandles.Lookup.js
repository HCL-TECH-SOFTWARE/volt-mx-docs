Ext.data.JsonP.java_lang_invoke_MethodHandles_Lookup({"tagname":"class","name":"java.lang.invoke.MethodHandles.Lookup","autodetected":{},"files":[{"filename":"Lookup.js","href":"Lookup.html#java-lang-invoke-MethodHandles-Lookup"}],"extends":"java.lang.Object","members":[{"name":"PACKAGE","tagname":"property","owner":"java.lang.invoke.MethodHandles.Lookup","id":"property-PACKAGE","meta":{}},{"name":"PRIVATE","tagname":"property","owner":"java.lang.invoke.MethodHandles.Lookup","id":"property-PRIVATE","meta":{}},{"name":"PROTECTED","tagname":"property","owner":"java.lang.invoke.MethodHandles.Lookup","id":"property-PROTECTED","meta":{}},{"name":"PUBLIC","tagname":"property","owner":"java.lang.invoke.MethodHandles.Lookup","id":"property-PUBLIC","meta":{}},{"name":"bind","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-bind","meta":{}},{"name":"findConstructor","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-findConstructor","meta":{}},{"name":"findGetter","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-findGetter","meta":{}},{"name":"findSetter","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-findSetter","meta":{}},{"name":"findSpecial","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-findSpecial","meta":{}},{"name":"findStatic","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-findStatic","meta":{}},{"name":"findStaticGetter","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-findStaticGetter","meta":{}},{"name":"findStaticSetter","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-findStaticSetter","meta":{}},{"name":"findVirtual","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-findVirtual","meta":{}},{"name":"in","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-in","meta":{}},{"name":"lookupClass","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-lookupClass","meta":{}},{"name":"lookupModes","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-lookupModes","meta":{}},{"name":"revealDirect","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-revealDirect","meta":{}},{"name":"toString","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-toString","meta":{}},{"name":"unreflect","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-unreflect","meta":{}},{"name":"unreflectConstructor","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-unreflectConstructor","meta":{}},{"name":"unreflectGetter","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-unreflectGetter","meta":{}},{"name":"unreflectSetter","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-unreflectSetter","meta":{}},{"name":"unreflectSpecial","tagname":"method","owner":"java.lang.invoke.MethodHandles.Lookup","id":"method-unreflectSpecial","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.MethodHandles.Lookup","short_doc":"A lookup object is a factory for creating method handles,\n when the creation requires access checking. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.lang.invoke.MethodHandles.Lookup</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup' target='_blank'>Lookup.js</a></div></pre><div class='doc-contents'><p>A <em>lookup object</em> is a factory for creating method handles,\n when the creation requires access checking.\n Method handles do not perform\n access checks when they are called, but rather when they are created.\n Therefore, method handle access\n restrictions must be enforced when a method handle is created.\n The caller class against which those restrictions are enforced\n is known as the {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupClass\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupClass\" class=\"docClass\">lookupClass</a> lookup class}.\n <p>\n A lookup class which needs to create method handles will call\n java.lang.invoke.MethodHandles.lookup to create a factory for itself.\n When the {@code Lookup} factory object is created, the identity of the lookup class is\n determined, and securely stored in the {@code Lookup} object.\n The lookup class (or its delegates) may then use factory methods\n on the {@code Lookup} object to create method handles for access-checked members.\n This includes all methods, constructors, and fields which are allowed to the lookup class,\n even private ones.</p>\n\n<p> <h1><a name=\"lookups\"></a>Lookup Factory Methods</h1>\n The factory methods on a {@code Lookup} object correspond to all major\n use cases for methods, constructors, and fields.\n Each method handle created by a factory method is the functional\n equivalent of a particular <em>bytecode behavior</em>.\n (Bytecode behaviors are described in section 5.4.3.5 of the Java Virtual Machine Specification.)\n Here is a summary of the correspondence between these factory methods and\n the behavior the resulting method handles:\n <table border=1 cellpadding=5 summary=\"lookup method behaviors\">\n <tr>\n     <th><a name=\"equiv\"></a>lookup expression</th>\n     <th>member</th>\n     <th>bytecode behavior</th>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findGetter\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findGetter\" class=\"docClass\">lookup.findGetter(C.class,&quot;f&quot;,FT.class)</a></td>\n     <td>{@code FT f;}</td><td>{@code (T) this.f;}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findStaticGetter\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findStaticGetter\" class=\"docClass\">lookup.findStaticGetter(C.class,&quot;f&quot;,FT.class)</a></td>\n     <td>{@code static}<br>{@code FT f;}</td><td>{@code (T) C.f;}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findSetter\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findSetter\" class=\"docClass\">lookup.findSetter(C.class,&quot;f&quot;,FT.class)</a></td>\n     <td>{@code FT f;}</td><td>{@code this.f = x;}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findStaticSetter\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findStaticSetter\" class=\"docClass\">lookup.findStaticSetter(C.class,&quot;f&quot;,FT.class)</a></td>\n     <td>{@code static}<br>{@code FT f;}</td><td>{@code C.f = arg;}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" class=\"docClass\">lookup.findVirtual(C.class,&quot;m&quot;,MT)</a></td>\n     <td>{@code T m(A<em>);}</em></td><td>{@code (T) this.m(arg);}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findStatic\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findStatic\" class=\"docClass\">lookup.findStatic(C.class,&quot;m&quot;,MT)</a></td>\n     <td>{@code static}<br>{@code T m(A<em>);}</em></td><td>{@code (T) C.m(arg);}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findSpecial\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findSpecial\" class=\"docClass\">lookup.findSpecial(C.class,&quot;m&quot;,MT,this.class)</a></td>\n     <td>{@code T m(A<em>);}</em></td><td>{@code (T) super.m(arg);}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findConstructor\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findConstructor\" class=\"docClass\">lookup.findConstructor(C.class,MT)</a></td>\n     <td>{@code C(A<em>);}</em></td><td>{@code new C(arg);}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectGetter\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflectGetter\" class=\"docClass\">lookup.unreflectGetter(aField)</a></td>\n     <td>({@code static})?<br>{@code FT f;}</td><td>{@code (FT) aField.get(thisOrNull);}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectSetter\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflectSetter\" class=\"docClass\">lookup.unreflectSetter(aField)</a></td>\n     <td>({@code static})?<br>{@code FT f;}</td><td>{@code aField.set(thisOrNull, arg);}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflect\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflect\" class=\"docClass\">lookup.unreflect(aMethod)</a></td>\n     <td>({@code static})?<br>{@code T m(A<em>);}</em></td><td>{@code (T) aMethod.invoke(thisOrNull, arg);}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectConstructor\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflectConstructor\" class=\"docClass\">lookup.unreflectConstructor(aConstructor)</a></td>\n     <td>{@code C(A<em>);}</em></td><td>{@code (C) aConstructor.newInstance(arg);}</td>\n </tr>\n <tr>\n     <td><a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflect\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-unreflect\" class=\"docClass\">lookup.unreflect(aMethod)</a></td>\n     <td>({@code static})?<br>{@code T m(A<em>);}</em></td><td>{@code (T) aMethod.invoke(thisOrNull, arg);}</td>\n </tr>\n </table></p>\n\n<p> Here, the type {@code C} is the class or interface being searched for a member,\n documented as a parameter named {@code refc} in the lookup methods.\n The method type {@code MT} is composed from the return type {@code T}\n and the sequence of argument types {@code A<em>}.\n The constructor also has a sequence of argument types {@code A</em>} and\n is deemed to return the newly-created object of type {@code C}.\n Both {@code MT} and the field type {@code FT} are documented as a parameter named {@code type}.\n The formal parameter {@code this} stands for the self-reference of type {@code C};\n if it is present, it is always the leading argument to the method handle invocation.\n (In the case of some {@code protected} members, {@code this} may be\n restricted in type to the lookup class; see below.)\n The name {@code arg} stands for all the other method handle arguments.\n In the code examples for the Core Reflection API, the name {@code thisOrNull}\n stands for a null reference if the accessed method or field is static,\n and {@code this} otherwise.\n The names {@code aMethod}, {@code aField}, and {@code aConstructor} stand\n for reflective objects corresponding to the given members.\n <p>\n In cases where the given member is of variable arity (i.e., a method or constructor)\n the returned method handle will also be of {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity}.\n In all other cases, the returned method handle will be of fixed arity.\n <p style=\"font-size:smaller;\">\n <em>Discussion:</em>\n The equivalence between looked-up method handles and underlying\n class members and bytecode behaviors\n can break down in a few ways:\n <ul style=\"font-size:smaller;\">\n <li>If {@code C} is not symbolically accessible from the lookup class's loader,\n the lookup can still succeed, even when there is no equivalent\n Java expression or bytecoded constant.\n <li>Likewise, if {@code T} or {@code MT}\n is not symbolically accessible from the lookup class's loader,\n the lookup can still succeed.\n For example, lookups for {@code MethodHandle.invokeExact} and\n {@code MethodHandle.invoke} will always succeed, regardless of requested type.\n <li>If there is a security manager installed, it can forbid the lookup\n on various grounds (<a href=\"MethodHandles.Lookup.html#secmgr\">see below</a>).\n By contrast, the {@code ldc} instruction on a {@code CONSTANT_MethodHandle}\n constant is not subject to security manager checks.\n <li>If the looked-up method has a\n <a href=\"MethodHandle.html#maxarity\">very large arity</a>,\n the method handle creation may fail, due to the method handle\n type having too many parameters.\n </li></li></li></li></ul></p>\n\n<p> <h1><a name=\"access\"></a>Access checking</h1>\n Access checks are applied in the factory methods of {@code Lookup},\n when a method handle is created.\n This is a key difference from the Core Reflection API, since\n java.lang.reflect.Method.invoke\n performs access checking against every caller, on every call.\n <p>\n All access checks start from a {@code Lookup} object, which\n compares its recorded lookup class against all requests to\n create method handles.\n A single {@code Lookup} object can be used to create any number\n of access-checked method handles, all checked against a single\n lookup class.\n <p>\n A {@code Lookup} object can be shared with other trusted code,\n such as a metaobject protocol.\n A shared {@code Lookup} object delegates the capability\n to create method handles on private members of the lookup class.\n Even if privileged code uses the {@code Lookup} object,\n the access checking is confined to the privileges of the\n original lookup class.\n <p>\n A lookup can fail, because\n the containing class is not accessible to the lookup class, or\n because the desired class member is missing, or because the\n desired class member is not accessible to the lookup class, or\n because the lookup object is not trusted enough to access the member.\n In any of these cases, a {@code ReflectiveOperationException} will be\n thrown from the attempted lookup.  The exact class will be one of\n the following:\n <ul>\n <li>NoSuchMethodException &mdash; if a method is requested but does not exist\n <li>NoSuchFieldException &mdash; if a field is requested but does not exist\n <li>IllegalAccessException &mdash; if the member exists but an access check fails\n </li></li></li></ul>\n <p>\n In general, the conditions under which a method handle may be\n looked up for a method {@code M} are no more restrictive than the conditions\n under which the lookup class could have compiled, verified, and resolved a call to {@code M}.\n Where the JVM would raise exceptions like {@code NoSuchMethodError},\n a method handle lookup will generally raise a corresponding\n checked exception, such as {@code NoSuchMethodException}.\n And the effect of invoking the method handle resulting from the lookup\n is <a href=\"MethodHandles.Lookup.html#equiv\">exactly equivalent</a>\n to executing the compiled, verified, and resolved call to {@code M}.\n The same point is true of fields and constructors.\n <p style=\"font-size:smaller;\">\n <em>Discussion:</em>\n Access checks only apply to named and reflected methods,\n constructors, and fields.\n Other method handle creation methods, such as\n <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asType\" rel=\"java.lang.invoke.MethodHandle-method-asType\" class=\"docClass\">java.lang.invoke.MethodHandle.asType</a>,\n do not require any access checks, and are used\n independently of any {@code Lookup} object.\n <p>\n If the desired member is {@code protected}, the usual JVM rules apply,\n including the requirement that the lookup class must be either be in the\n same package as the desired member, or must inherit that member.\n (See the Java Virtual Machine Specification, sections 4.9.2, 5.4.3.5, and 6.4.)\n In addition, if the desired member is a non-static field or method\n in a different package, the resulting method handle may only be applied\n to objects of the lookup class or one of its subclasses.\n This requirement is enforced by narrowing the type of the leading\n {@code this} parameter from {@code C}\n (which will necessarily be a superclass of the lookup class)\n to the lookup class itself.\n <p>\n The JVM imposes a similar requirement on {@code invokespecial} instruction,\n that the receiver argument must match both the resolved method <em>and</em>\n the current class.  Again, this requirement is enforced by narrowing the\n type of the leading parameter to the resulting method handle.\n (See the Java Virtual Machine Specification, section 4.10.1.9.)\n <p>\n The JVM represents constructors and static initializer blocks as internal methods\n with special names ({@code \"<init>\"} and {@code \"<clinit>\"}).\n The internal syntax of invocation instructions allows them to refer to such internal\n methods as if they were normal methods, but the JVM bytecode verifier rejects them.\n A lookup of such an internal method will produce a {@code NoSuchMethodException}.\n <p>\n In some cases, access between nested classes is obtained by the Java compiler by creating\n an wrapper method to access a private method of another class\n in the same top-level declaration.\n For example, a nested class {@code C.D}\n can access private members within other related classes such as\n {@code C}, {@code C.D.E}, or {@code C.B},\n but the Java compiler may need to generate wrapper methods in\n those related classes.  In such cases, a {@code Lookup} object on\n {@code C.E} would be unable to those private members.\n A workaround for this limitation is the <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-in\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-in\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.in</a> method,\n which can transform a lookup on {@code C.E} into one on any of those other\n classes, without special elevation of privilege.\n <p>\n The accesses permitted to a given lookup object may be limited,\n according to its set of <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" class=\"docClass\">lookupModes</a>,\n to a subset of members normally accessible to the lookup class.\n For example, the publicLookup\n method produces a lookup object which is only allowed to access\n public members in public classes.\n The caller sensitive method lookup\n produces a lookup object with full capabilities relative to\n its caller class, to emulate all supported bytecode behaviors.\n Also, the <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-in\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-in\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.in</a> method may produce a lookup object\n with fewer access modes than the original lookup object.</p>\n\n<p> <p style=\"font-size:smaller;\">\n <a name=\"privacc\"></a>\n <em>Discussion of private access:</em>\n We say that a lookup has <em>private access</em>\n if its {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" class=\"docClass\">lookupModes</a> lookup modes}\n include the possibility of accessing {@code private} members.\n As documented in the relevant methods elsewhere,\n only lookups with private access possess the following capabilities:\n <ul style=\"font-size:smaller;\">\n <li>access private fields, methods, and constructors of the lookup class\n <li>create method handles which invoke <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a> methods,\n     such as {@code Class.forName}\n <li>create method handles which <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findSpecial\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findSpecial\" class=\"docClass\">emulate invokespecial</a> instructions\n <li>avoid <a href=\"MethodHandles.Lookup.html#secmgr\">package access checks</a>\n     for classes accessible to the lookup class\n <li>create <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-in\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-in\" class=\"docClass\">delegated lookup objects</a> which have private access to other classes\n     within the same package member\n </li></li></li></li></li></ul>\n <p style=\"font-size:smaller;\">\n Each of these permissions is a consequence of the fact that a lookup object\n with private access can be securely traced back to an originating class,\n whose <a href=\"MethodHandles.Lookup.html#equiv\">bytecode behaviors</a> and Java language access permissions\n can be reliably determined and emulated by method handles.</p>\n\n<p> <h1><a name=\"secmgr\"></a>Security manager interactions</h1>\n Although bytecode instructions can only refer to classes in\n a related class loader, this API can search for methods in any\n class, as long as a reference to its {@code Class} object is\n available.  Such cross-loader references are also possible with the\n Core Reflection API, and are impossible to bytecode instructions\n such as {@code invokestatic} or {@code getfield}.\n There is a {@linkplain java.lang.SecurityManager security manager API}\n to allow applications to check such cross-loader references.\n These checks apply to both the {@code MethodHandles.Lookup} API\n and the Core Reflection API\n (as found on Class).\n <p>\n If a security manager is present, member lookups are subject to\n additional checks.\n From one to three calls are made to the security manager.\n Any of these calls can refuse access by throwing a\n SecurityException.\n Define {@code smgr} as the security manager,\n {@code lookc} as the lookup class of the current lookup object,\n {@code refc} as the containing class in which the member\n is being sought, and {@code defc} as the class in which the\n member is actually defined.\n The value {@code lookc} is defined as <em>not present</em>\n if the current lookup object does not have\n <a href=\"MethodHandles.Lookup.html#privacc\">private access</a>.\n The calls are made according to the following rules:\n <ul>\n <li><b>Step 1:</b>\n     If {@code lookc} is not present, or if its class loader is not\n     the same as or an ancestor of the class loader of {@code refc},\n     then smgr.checkPackageAccess(refcPkg) is called,\n     where {@code refcPkg} is the package of {@code refc}.\n <li><b>Step 2:</b>\n     If the retrieved member is not public and\n     {@code lookc} is not present, then\n     smgr.checkPermission\n     with {@code RuntimePermission(\"accessDeclaredMembers\")} is called.\n <li><b>Step 3:</b>\n     If the retrieved member is not public,\n     and if {@code lookc} is not present,\n     and if {@code defc} and {@code refc} are different,\n     then smgr.checkPackageAccess(defcPkg) is called,\n     where {@code defcPkg} is the package of {@code defc}.\n </li></li></li></ul>\n Security checks are performed after other access checks have passed.\n Therefore, the above rules presuppose a member that is public,\n or else that is being accessed from a lookup class that has\n rights to access the member.</p>\n\n<p> <h1><a name=\"callsens\"></a>Caller sensitive methods</h1>\n A small number of Java methods have a special property called caller sensitivity.\n A <em>caller-sensitive</em> method can behave differently depending on the\n identity of its immediate caller.\n <p>\n If a method handle for a caller-sensitive method is requested,\n the general rules for <a href=\"MethodHandles.Lookup.html#equiv\">bytecode behaviors</a> apply,\n but they take account of the lookup class in a special way.\n The resulting method handle behaves as if it were called\n from an instruction contained in the lookup class,\n so that the caller-sensitive method detects the lookup class.\n (By contrast, the invoker of the method handle is disregarded.)\n Thus, in the case of caller-sensitive methods,\n different lookup classes may give rise to\n differently behaving method handles.\n <p>\n In cases where the lookup object is\n publicLookup(),\n or some other lookup object without\n <a href=\"MethodHandles.Lookup.html#privacc\">private access</a>,\n the lookup class is disregarded.\n In such cases, no caller-sensitive method handle can be created,\n access is forbidden, and the lookup fails with an\n {@code IllegalAccessException}.\n <p style=\"font-size:smaller;\">\n <em>Discussion:</em>\n For example, the caller-sensitive method\n Class.forName(x)\n can return varying classes or throw varying exceptions,\n depending on the class loader of the class that calls it.\n A public lookup of {@code Class.forName} will fail, because\n there is no reasonable way to determine its bytecode behavior.\n <p style=\"font-size:smaller;\">\n If an application caches method handles for broad sharing,\n it should use {@code publicLookup()} to create them.\n If there is a lookup of {@code Class.forName}, it will fail,\n and the application must take appropriate action in that case.\n It may be that a later lookup, perhaps during the invocation of a\n bootstrap method, can incorporate the specific identity\n of the caller, making the method accessible.\n <p style=\"font-size:smaller;\">\n The function {@code MethodHandles.lookup} is caller sensitive\n so that there can be a secure foundation for lookups.\n Nearly all other methods in the JSR 292 API rely on lookup\n objects to check access requests.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-PACKAGE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-property-PACKAGE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-property-PACKAGE' class='name expandable'>PACKAGE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A single-bit mask representing {@code package} access (default access),\n  which may contribute to the result of looku...</div><div class='long'><p>A single-bit mask representing {@code package} access (default access),\n  which may contribute to the result of <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" class=\"docClass\">lookupModes</a>.\n  The value is {@code 0x08}, which does not correspond meaningfully to\n  any particular {@linkplain java.lang.reflect.Modifier modifier bit}.</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-PRIVATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-property-PRIVATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-property-PRIVATE' class='name expandable'>PRIVATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A single-bit mask representing {@code private} access,\n  which may contribute to the result of lookupModes. ...</div><div class='long'><p>A single-bit mask representing {@code private} access,\n  which may contribute to the result of <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" class=\"docClass\">lookupModes</a>.\n  The value, {@code 0x02}, happens to be the same as the value of the\n  {@code private} {@linkplain java.lang.reflect.Modifier#PRIVATE modifier bit}.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-PROTECTED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-property-PROTECTED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-property-PROTECTED' class='name expandable'>PROTECTED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A single-bit mask representing {@code protected} access,\n  which may contribute to the result of lookupModes. ...</div><div class='long'><p>A single-bit mask representing {@code protected} access,\n  which may contribute to the result of <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" class=\"docClass\">lookupModes</a>.\n  The value, {@code 0x04}, happens to be the same as the value of the\n  {@code protected} {@linkplain java.lang.reflect.Modifier#PROTECTED modifier bit}.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-PUBLIC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-property-PUBLIC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-property-PUBLIC' class='name expandable'>PUBLIC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A single-bit mask representing {@code public} access,\n  which may contribute to the result of lookupModes. ...</div><div class='long'><p>A single-bit mask representing {@code public} access,\n  which may contribute to the result of <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" class=\"docClass\">lookupModes</a>.\n  The value, {@code 0x01}, happens to be the same as the value of the\n  {@code public} {@linkplain java.lang.reflect.Modifier#PUBLIC modifier bit}.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-bind' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-bind' class='name expandable'>bind</a>( <span class='pre'>receiver, name, type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces an early-bound method handle for a non-static method. ...</div><div class='long'><p>Produces an early-bound method handle for a non-static method.\n The receiver must have a supertype {@code defc} in which a method\n of the given name and type is accessible to the lookup class.\n The method and all its argument types must be accessible to the lookup object.\n The type of the method handle will be that of the method,\n without any insertion of an additional receiver parameter.\n The given receiver will be bound into the method handle,\n so that every call to the method handle will invoke the\n requested method on the given receiver.\n <p>\n The returned method handle will have\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity} if and only if\n the method's variable arity modifier bit ({@code 0x0080}) is set\n <em>and</em> the trailing array argument is not the only argument.\n (If the trailing array argument is the only argument,\n the given receiver value will be bound to it.)\n <p>\n This is equivalent to the following code:\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle mh0 = lookup().findVirtual(defc, name, type);\nMethodHandle mh1 = mh0.bindTo(receiver);\nMethodType mt1 = mh1.type();\nif (mh0.isVarargsCollector())\n  mh1 = mh1.asVarargsCollector(mt1.parameterType(mt1.parameterCount()-1));\nreturn mh1;\n }</pre></blockquote>\n where {@code defc} is either {@code receiver.getClass()} or a super\n type of that class, in which the requested method is accessible\n to the lookup class.\n (Note that {@code bindTo} does not preserve variable arity.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>receiver</span> : Object {Object}<div class='sub-desc'><p>the object from which the method is accessed</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the name of the method</p>\n</div></li><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the type of the method, with the receiver argument omitted</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the desired method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchMethodException if the method does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails\n                                or if the method's variable arity modifier bit\n                                is set and {@code asVarargsCollector} fails\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null\n@see MethodHandle#bindTo\n@see <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" class=\"docClass\">findVirtual</a></p>\n</div></li></ul></div></div></div><div id='method-findConstructor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-findConstructor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-findConstructor' class='name expandable'>findConstructor</a>( <span class='pre'>refc, type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle which creates an object and initializes it, using\n the constructor of the specified type. ...</div><div class='long'><p>Produces a method handle which creates an object and initializes it, using\n the constructor of the specified type.\n The parameter types of the method handle will be those of the constructor,\n while the return type will be a reference to the constructor's class.\n The constructor and all its argument types must be accessible to the lookup object.\n <p>\n The requested type must have a return type of {@code void}.\n (This is consistent with the JVM's treatment of constructor type descriptors.)\n <p>\n The returned method handle will have\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity} if and only if\n the constructor's variable arity modifier bit ({@code 0x0080}) is set.\n <p>\n If the returned method handle is invoked, the constructor's class will\n be initialized, if it has not already been initialized.\n <p><b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle MH_newArrayList = publicLookup().findConstructor(\n  ArrayList.class, methodType(void.class, Collection.class));\nCollection orig = Arrays.asList(\"x\", \"y\");\nCollection copy = (ArrayList) MH_newArrayList.invokeExact(orig);\nassert(orig != copy);\nassertEquals(orig, copy);\n// a variable-arity constructor:\nMethodHandle MH_newProcessBuilder = publicLookup().findConstructor(\n  ProcessBuilder.class, methodType(void.class, String[].class));\nProcessBuilder pb = (ProcessBuilder)\n  MH_newProcessBuilder.invoke(\"x\", \"y\", \"z\");\nassertEquals(\"[x, y, z]\", pb.command().toString());\n }</pre></blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class or interface from which the method is accessed</p>\n</div></li><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the type of the method, with the receiver argument omitted, and a void return type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the desired method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchMethodException if the constructor does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails\n                                or if the method's variable arity modifier bit\n                                is set and {@code asVarargsCollector} fails\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div><div id='method-findGetter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-findGetter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-findGetter' class='name expandable'>findGetter</a>( <span class='pre'>refc, name, type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle giving read access to a non-static field. ...</div><div class='long'><p>Produces a method handle giving read access to a non-static field.\n The type of the method handle will have a return type of the field's\n value type.\n The method handle's single argument will be the instance containing\n the field.\n Access checking is performed immediately on behalf of the lookup class.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class or interface from which the method is accessed</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the field's name</p>\n</div></li><li><span class='pre'>type</span> : Object {java.lang.Class}<div class='sub-desc'><p>the field's type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can load values from the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFieldException if the field does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails, or if the field is {@code static}\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div><div id='method-findSetter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-findSetter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-findSetter' class='name expandable'>findSetter</a>( <span class='pre'>refc, name, type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle giving write access to a non-static field. ...</div><div class='long'><p>Produces a method handle giving write access to a non-static field.\n The type of the method handle will have a void return type.\n The method handle will take two arguments, the instance containing\n the field, and the value to be stored.\n The second argument will be of the field's value type.\n Access checking is performed immediately on behalf of the lookup class.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class or interface from which the method is accessed</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the field's name</p>\n</div></li><li><span class='pre'>type</span> : Object {java.lang.Class}<div class='sub-desc'><p>the field's type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can store values into the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFieldException if the field does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails, or if the field is {@code static}\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div><div id='method-findSpecial' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-findSpecial' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-findSpecial' class='name expandable'>findSpecial</a>( <span class='pre'>refc, name, type, specialCaller</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces an early-bound method handle for a virtual method. ...</div><div class='long'><p>Produces an early-bound method handle for a virtual method.\n It will bypass checks for overriding methods on the receiver,\n <a href=\"MethodHandles.Lookup.html#equiv\">as if called</a> from an {@code invokespecial}\n instruction from within the explicitly specified {@code specialCaller}.\n The type of the method handle will be that of the method,\n with a suitably restricted receiver type prepended.\n (The receiver type will be {@code specialCaller} or a subtype.)\n The method and all its argument types must be accessible\n to the lookup object.\n <p>\n Before method resolution,\n if the explicitly specified caller class is not identical with the\n lookup class, or if this lookup object does not have\n <a href=\"MethodHandles.Lookup.html#privacc\">private access</a>\n privileges, the access fails.\n <p>\n The returned method handle will have\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity} if and only if\n the method's variable arity modifier bit ({@code 0x0080}) is set.\n <p style=\"font-size:smaller;\">\n <em>(Note:  JVM internal methods named {@code \"<init>\"} are not visible to this API,\n even though the {@code invokespecial} instruction can refer to them\n in special circumstances.  Use <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findConstructor\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findConstructor\" class=\"docClass\">findConstructor</a>\n to access instance initialization methods in a safe manner.)</init></em>\n <p><b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nstatic class Listie extends ArrayList {\n  public String toString() { return \"[wee Listie]\"; }\n  static Lookup lookup() { return MethodHandles.lookup(); }\n}\n...\n// no access to constructor via invokeSpecial:\nMethodHandle MH_newListie = Listie.lookup()\n  .findConstructor(Listie.class, methodType(void.class));\nListie l = (Listie) MH_newListie.invokeExact();\ntry { assertEquals(\"impossible\", Listie.lookup().findSpecial(\n        Listie.class, \"<init>\", methodType(void.class), Listie.class));\n } catch (NoSuchMethodException ex) { } // OK\n// access to super and self methods via invokeSpecial:\nMethodHandle MH_super = Listie.lookup().findSpecial(\n  ArrayList.class, \"toString\" , methodType(String.class), Listie.class);\nMethodHandle MH_this = Listie.lookup().findSpecial(\n  Listie.class, \"toString\" , methodType(String.class), Listie.class);\nMethodHandle MH_duper = Listie.lookup().findSpecial(\n  Object.class, \"toString\" , methodType(String.class), Listie.class);\nassertEquals(\"[]\", (String) MH_super.invokeExact(l));\nassertEquals(\"\"+l, (String) MH_this.invokeExact(l));\nassertEquals(\"[]\", (String) MH_duper.invokeExact(l)); // ArrayList method\ntry { assertEquals(\"inaccessible\", Listie.lookup().findSpecial(\n        String.class, \"toString\", methodType(String.class), Listie.class));\n } catch (IllegalAccessException ex) { } // OK\nListie subl = new Listie() { public String toString() { return \"[subclass]\"; } };\nassertEquals(\"\"+l, (String) MH_this.invokeExact(subl)); // Listie method\n }</init></pre></blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class or interface from which the method is accessed</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the name of the method (which must not be \"&lt;init&gt;\")</p>\n</div></li><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the type of the method, with the receiver argument omitted</p>\n</div></li><li><span class='pre'>specialCaller</span> : Object {java.lang.Class}<div class='sub-desc'><p>the proposed calling class to perform the {@code invokespecial}</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the desired method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchMethodException if the method does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails\n                                or if the method's variable arity modifier bit\n                                is set and {@code asVarargsCollector} fails\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div><div id='method-findStatic' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-findStatic' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-findStatic' class='name expandable'>findStatic</a>( <span class='pre'>refc, name, type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle for a static method. ...</div><div class='long'><p>Produces a method handle for a static method.\n The type of the method handle will be that of the method.\n (Since static methods do not take receivers, there is no\n additional receiver argument inserted into the method handle type,\n as there would be with <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findVirtual\" class=\"docClass\">findVirtual</a> or <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-findSpecial\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-findSpecial\" class=\"docClass\">findSpecial</a>.)\n The method and all its argument types must be accessible to the lookup object.\n <p>\n The returned method handle will have\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity} if and only if\n the method's variable arity modifier bit ({@code 0x0080}) is set.\n <p>\n If the returned method handle is invoked, the method's class will\n be initialized, if it has not already been initialized.\n <p><b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle MH_asList = publicLookup().findStatic(Arrays.class,\n  \"asList\", methodType(List.class, Object[].class));\nassertEquals(\"[x, y]\", MH_asList.invoke(\"x\", \"y\").toString());\n }</pre></blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class from which the method is accessed</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the name of the method</p>\n</div></li><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the type of the method</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the desired method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchMethodException if the method does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails,\n                                or if the method is not {@code static},\n                                or if the method's variable arity modifier bit\n                                is set and {@code asVarargsCollector} fails\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div><div id='method-findStaticGetter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-findStaticGetter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-findStaticGetter' class='name expandable'>findStaticGetter</a>( <span class='pre'>refc, name, type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle giving read access to a static field. ...</div><div class='long'><p>Produces a method handle giving read access to a static field.\n The type of the method handle will have a return type of the field's\n value type.\n The method handle will take no arguments.\n Access checking is performed immediately on behalf of the lookup class.\n <p>\n If the returned method handle is invoked, the field's class will\n be initialized, if it has not already been initialized.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class or interface from which the method is accessed</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the field's name</p>\n</div></li><li><span class='pre'>type</span> : Object {java.lang.Class}<div class='sub-desc'><p>the field's type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can load values from the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFieldException if the field does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails, or if the field is not {@code static}\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div><div id='method-findStaticSetter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-findStaticSetter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-findStaticSetter' class='name expandable'>findStaticSetter</a>( <span class='pre'>refc, name, type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle giving write access to a static field. ...</div><div class='long'><p>Produces a method handle giving write access to a static field.\n The type of the method handle will have a void return type.\n The method handle will take a single\n argument, of the field's value type, the value to be stored.\n Access checking is performed immediately on behalf of the lookup class.\n <p>\n If the returned method handle is invoked, the field's class will\n be initialized, if it has not already been initialized.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class or interface from which the method is accessed</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the field's name</p>\n</div></li><li><span class='pre'>type</span> : Object {java.lang.Class}<div class='sub-desc'><p>the field's type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can store values into the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFieldException if the field does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails, or if the field is not {@code static}\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div><div id='method-findVirtual' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-findVirtual' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-findVirtual' class='name expandable'>findVirtual</a>( <span class='pre'>refc, name, type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle for a virtual method. ...</div><div class='long'><p>Produces a method handle for a virtual method.\n The type of the method handle will be that of the method,\n with the receiver type (usually {@code refc}) prepended.\n The method and all its argument types must be accessible to the lookup object.\n <p>\n When called, the handle will treat the first argument as a receiver\n and dispatch on the receiver's type to determine which method\n implementation to enter.\n (The dispatching action is identical with that performed by an\n {@code invokevirtual} or {@code invokeinterface} instruction.)\n <p>\n The first argument will be of type {@code refc} if the lookup\n class has full privileges to access the member.  Otherwise\n the member must be {@code protected} and the first argument\n will be restricted in type to the lookup class.\n <p>\n The returned method handle will have\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity} if and only if\n the method's variable arity modifier bit ({@code 0x0080}) is set.\n <p>\n Because of the general <a href=\"MethodHandles.Lookup.html#equiv\">equivalence</a> between {@code invokevirtual}\n instructions and method handles produced by {@code findVirtual},\n if the class is {@code MethodHandle} and the name string is\n {@code invokeExact} or {@code invoke}, the resulting\n method handle is equivalent to one produced by\n <a href=\"#!/api/java.lang.invoke.MethodHandles-method-exactInvoker\" rel=\"java.lang.invoke.MethodHandles-method-exactInvoker\" class=\"docClass\">MethodHandles.exactInvoker</a> or\n <a href=\"#!/api/java.lang.invoke.MethodHandles-method-invoker\" rel=\"java.lang.invoke.MethodHandles-method-invoker\" class=\"docClass\">MethodHandles.invoker</a>\n with the same {@code type} argument.</p>\n\n<p> <b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle MH_concat = publicLookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle MH_hashCode = publicLookup().findVirtual(Object.class,\n  \"hashCode\", methodType(int.class));\nMethodHandle MH_hashCode_String = publicLookup().findVirtual(String.class,\n  \"hashCode\", methodType(int.class));\nassertEquals(\"xy\", (String) MH_concat.invokeExact(\"x\", \"y\"));\nassertEquals(\"xy\".hashCode(), (int) MH_hashCode.invokeExact((Object)\"xy\"));\nassertEquals(\"xy\".hashCode(), (int) MH_hashCode_String.invokeExact(\"xy\"));\n// interface method:\nMethodHandle MH_subSequence = publicLookup().findVirtual(CharSequence.class,\n  \"subSequence\", methodType(CharSequence.class, int.class, int.class));\nassertEquals(\"def\", MH_subSequence.invoke(\"abcdefghi\", 3, 6).toString());\n// constructor \"internal method\" must be accessed differently:\nMethodType MT_newString = methodType(void.class); //()V for new String()\ntry { assertEquals(\"impossible\", lookup()\n        .findVirtual(String.class, \"<init>\", MT_newString));\n } catch (NoSuchMethodException ex) { } // OK\nMethodHandle MH_newString = publicLookup()\n  .findConstructor(String.class, MT_newString);\nassertEquals(\"\", (String) MH_newString.invokeExact());\n }</init></pre></blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refc</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class or interface from which the method is accessed</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the name of the method</p>\n</div></li><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the type of the method, with the receiver argument omitted</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the desired method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchMethodException if the method does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails,\n                                or if the method is {@code static}\n                                or if the method's variable arity modifier bit\n                                is set and {@code asVarargsCollector} fails\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div><div id='method-in' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-in' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-in' class='name expandable'>in</a>( <span class='pre'>requestedLookupClass</span> ) : Object {java.lang.invoke.MethodHandles.Lookup}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a lookup on the specified new lookup class. ...</div><div class='long'><p>Creates a lookup on the specified new lookup class.\n The resulting object will report the specified\n class as its own <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupClass\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupClass\" class=\"docClass\">lookupClass</a>.\n <p>\n However, the resulting {@code Lookup} object is guaranteed\n to have no more access capabilities than the original.\n In particular, access capabilities can be lost as follows:<ul>\n <li>If the new lookup class differs from the old one,\n protected members will not be accessible by virtue of inheritance.\n (Protected members may continue to be accessible because of package sharing.)\n <li>If the new lookup class is in a different package\n than the old one, protected and default (package) members will not be accessible.\n <li>If the new lookup class is not within the same package member\n as the old one, private members will not be accessible.\n <li>If the new lookup class is not accessible to the old lookup class,\n then no members, not even public members, will be accessible.\n (In all other cases, public members will continue to be accessible.)\n </li></li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>requestedLookupClass</span> : Object {java.lang.Class}<div class='sub-desc'><p>the desired lookup class for the new lookup object</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandles.Lookup}</span><div class='sub-desc'><p>a lookup object which reports the desired lookup class</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the argument is null</p>\n</div></li></ul></div></div></div><div id='method-lookupClass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-lookupClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupClass' class='name expandable'>lookupClass</a>( <span class='pre'></span> ) : Object {java.lang.Class}<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells which class is performing the lookup. ...</div><div class='long'><p>Tells which class is performing the lookup.  It is this class against\n  which checks are performed for visibility and access permissions.\n  <p>\n  The class implies a maximum level of access permission,\n  but the permissions may be additionally limited by the bitmask\n  <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupModes\" class=\"docClass\">lookupModes</a>, which controls whether non-public members\n  can be accessed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Class}</span><div class='sub-desc'><p>the lookup class, on behalf of which this lookup object finds members</p>\n</div></li></ul></div></div></div><div id='method-lookupModes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-lookupModes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupModes' class='name expandable'>lookupModes</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells which access-protection classes of members this lookup object can produce. ...</div><div class='long'><p>Tells which access-protection classes of members this lookup object can produce.\n  The result is a bit-mask of the bits\n  {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-property-PUBLIC\" rel=\"java.lang.invoke.MethodHandles.Lookup-property-PUBLIC\" class=\"docClass\">PUBLIC</a> PUBLIC (0x01)},\n  {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-property-PRIVATE\" rel=\"java.lang.invoke.MethodHandles.Lookup-property-PRIVATE\" class=\"docClass\">PRIVATE</a> PRIVATE (0x02)},\n  {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-property-PROTECTED\" rel=\"java.lang.invoke.MethodHandles.Lookup-property-PROTECTED\" class=\"docClass\">PROTECTED</a> PROTECTED (0x04)},\n  and {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-property-PACKAGE\" rel=\"java.lang.invoke.MethodHandles.Lookup-property-PACKAGE\" class=\"docClass\">PACKAGE</a> PACKAGE (0x08)}.\n  <p>\n  A freshly-created lookup object\n  on the {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles-method-lookup\" rel=\"java.lang.invoke.MethodHandles-method-lookup\" class=\"docClass\">java.lang.invoke.MethodHandles.lookup</a>() caller's class}\n  has all possible bits set, since the caller class can access all its own members.\n  A lookup object on a new lookup class\n  {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-in\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-in\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.in</a> created from a previous lookup object}\n  may have some mode bits set to zero.\n  The purpose of this is to restrict access via the new lookup object,\n  so that it can access only names which can be reached by the original\n  lookup object, and also by the new lookup class.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the lookup modes, which limit the kinds of access performed by this lookup object</p>\n</div></li></ul></div></div></div><div id='method-revealDirect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-revealDirect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-revealDirect' class='name expandable'>revealDirect</a>( <span class='pre'>target</span> ) : Object {java.lang.invoke.MethodHandleInfo}<span class=\"signature\"></span></div><div class='description'><div class='short'>Cracks a direct method handle\n created by this lookup object or a similar one. ...</div><div class='long'><p>Cracks a <a href=\"MethodHandleInfo.html#directmh\">direct method handle</a>\n created by this lookup object or a similar one.\n Security and access checks are performed to ensure that this lookup object\n is capable of reproducing the target method handle.\n This means that the cracking may fail if target is a direct method handle\n but was created by an unrelated lookup object.\n This can happen if the method handle is <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a>\n and was created by a lookup object for a different class.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>a direct method handle to crack into symbolic reference components</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandleInfo}</span><div class='sub-desc'><p>a symbolic reference which can be used to reconstruct this method handle from this lookup object\n@exception SecurityException if a security manager is present and it\n                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a></p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the target is not a direct method handle or if access checking fails\n@exception NullPointerException if the target is {@code null}\n@see MethodHandleInfo</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Displays the name of the class from which lookups are to be made. ...</div><div class='long'><p>Displays the name of the class from which lookups are to be made.\n (The name is the one reported by Class.getName.)\n If there are restrictions on the access permitted to this lookup,\n this is indicated by adding a suffix to the class name, consisting\n of a slash and a keyword.  The keyword represents the strongest\n allowed access, and is chosen as follows:\n <ul>\n <li>If no access is allowed, the suffix is \"/noaccess\".\n <li>If only public access is allowed, the suffix is \"/public\".\n <li>If only public and package access are allowed, the suffix is \"/package\".\n <li>If only public, package, and private access are allowed, the suffix is \"/private\".\n </li></li></li></li></ul>\n If none of the above cases apply, it is the case that full\n access (public, package, private, and protected) is allowed.\n In this case, no suffix is added.\n This is true only of an object obtained originally from\n <a href=\"#!/api/java.lang.invoke.MethodHandles-method-lookup\" rel=\"java.lang.invoke.MethodHandles-method-lookup\" class=\"docClass\">MethodHandles.lookup</a>.\n Objects created by <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-in\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-in\" class=\"docClass\">Lookup.in</a>\n always have restricted access, and will display a suffix.\n <p>\n (It may seem strange that protected access should be\n stronger than private access.  Viewed independently from\n package access, protected access is the first to be lost,\n because it requires a direct subclass relationship between\n caller and callee.)\n@see <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-in\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-in\" class=\"docClass\">in</a></p>\n</div></div></div><div id='method-unreflect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-unreflect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflect' class='name expandable'>unreflect</a>( <span class='pre'>m</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Makes a direct method handle\n to m, if the lookup class has permission. ...</div><div class='long'><p>Makes a <a href=\"MethodHandleInfo.html#directmh\">direct method handle</a>\n to <i>m</i>, if the lookup class has permission.\n If <i>m</i> is non-static, the receiver argument is treated as an initial argument.\n If <i>m</i> is virtual, overriding is respected on every call.\n Unlike the Core Reflection API, exceptions are <em>not</em> wrapped.\n The type of the method handle will be that of the method,\n with the receiver type prepended (but only if it is non-static).\n If the method's {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n If <i>m</i> is not public, do not share the resulting handle with untrusted parties.\n <p>\n The returned method handle will have\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity} if and only if\n the method's variable arity modifier bit ({@code 0x0080}) is set.\n <p>\n If <i>m</i> is static, and\n if the returned method handle is invoked, the method's class will\n be initialized, if it has not already been initialized.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>m</span> : Object {Method}<div class='sub-desc'><p>the reflected method</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can invoke the reflected method</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails\n                                or if the method's variable arity modifier bit\n                                is set and {@code asVarargsCollector} fails</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the argument is null</p>\n</div></li></ul></div></div></div><div id='method-unreflectConstructor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-unreflectConstructor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectConstructor' class='name expandable'>unreflectConstructor</a>( <span class='pre'>c</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle for a reflected constructor. ...</div><div class='long'><p>Produces a method handle for a reflected constructor.\n The type of the method handle will be that of the constructor,\n with the return type changed to the declaring class.\n The method handle will perform a {@code newInstance} operation,\n creating a new instance of the constructor's class on the\n arguments passed to the method handle.\n <p>\n If the constructor's {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n <p>\n The returned method handle will have\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity} if and only if\n the constructor's variable arity modifier bit ({@code 0x0080}) is set.\n <p>\n If the returned method handle is invoked, the constructor's class will\n be initialized, if it has not already been initialized.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : Object {java.lang.reflect.Constructor}<div class='sub-desc'><p>the reflected constructor</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can invoke the reflected constructor</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails\n                                or if the method's variable arity modifier bit\n                                is set and {@code asVarargsCollector} fails</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the argument is null</p>\n</div></li></ul></div></div></div><div id='method-unreflectGetter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-unreflectGetter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectGetter' class='name expandable'>unreflectGetter</a>( <span class='pre'>f</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle giving read access to a reflected field. ...</div><div class='long'><p>Produces a method handle giving read access to a reflected field.\n The type of the method handle will have a return type of the field's\n value type.\n If the field is static, the method handle will take no arguments.\n Otherwise, its single argument will be the instance containing\n the field.\n If the field's {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n <p>\n If the field is static, and\n if the returned method handle is invoked, the field's class will\n be initialized, if it has not already been initialized.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f</span> : Object {Field}<div class='sub-desc'><p>the reflected field</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can load values from the reflected field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the argument is null</p>\n</div></li></ul></div></div></div><div id='method-unreflectSetter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-unreflectSetter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectSetter' class='name expandable'>unreflectSetter</a>( <span class='pre'>f</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle giving write access to a reflected field. ...</div><div class='long'><p>Produces a method handle giving write access to a reflected field.\n The type of the method handle will have a void return type.\n If the field is static, the method handle will take a single\n argument, of the field's value type, the value to be stored.\n Otherwise, the two arguments will be the instance containing\n the field, and the value to be stored.\n If the field's {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class.\n <p>\n If the field is static, and\n if the returned method handle is invoked, the field's class will\n be initialized, if it has not already been initialized.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f</span> : Object {Field}<div class='sub-desc'><p>the reflected field</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can store values into the reflected field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the argument is null</p>\n</div></li></ul></div></div></div><div id='method-unreflectSpecial' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles.Lookup'>java.lang.invoke.MethodHandles.Lookup</span><br/><a href='source/Lookup.html#java-lang-invoke-MethodHandles-Lookup-method-unreflectSpecial' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles.Lookup-method-unreflectSpecial' class='name expandable'>unreflectSpecial</a>( <span class='pre'>m, specialCaller</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle for a reflected method. ...</div><div class='long'><p>Produces a method handle for a reflected method.\n It will bypass checks for overriding methods on the receiver,\n <a href=\"MethodHandles.Lookup.html#equiv\">as if called</a> from an {@code invokespecial}\n instruction from within the explicitly specified {@code specialCaller}.\n The type of the method handle will be that of the method,\n with a suitably restricted receiver type prepended.\n (The receiver type will be {@code specialCaller} or a subtype.)\n If the method's {@code accessible} flag is not set,\n access checking is performed immediately on behalf of the lookup class,\n as if {@code invokespecial} instruction were being linked.\n <p>\n Before method resolution,\n if the explicitly specified caller class is not identical with the\n lookup class, or if this lookup object does not have\n <a href=\"MethodHandles.Lookup.html#privacc\">private access</a>\n privileges, the access fails.\n <p>\n The returned method handle will have\n {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity} if and only if\n the method's variable arity modifier bit ({@code 0x0080}) is set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>m</span> : Object {Method}<div class='sub-desc'><p>the reflected method</p>\n</div></li><li><span class='pre'>specialCaller</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class nominally calling the method</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which can invoke the reflected method</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalAccessException if access checking fails\n                                or if the method's variable arity modifier bit\n                                is set and {@code asVarargsCollector} fails</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});