Ext.data.JsonP.java_lang_invoke_MutableCallSite({"tagname":"class","name":"java.lang.invoke.MutableCallSite","autodetected":{},"files":[{"filename":"MutableCallSite.js","href":"MutableCallSite.html#java-lang-invoke-MutableCallSite"}],"extends":"java.lang.invoke.CallSite","author":[{"tagname":"author","name":"John Rose, JSR 292 EG","email":null}],"members":[{"name":"dynamicInvoker","tagname":"method","owner":"java.lang.invoke.MutableCallSite","id":"method-dynamicInvoker","meta":{}},{"name":"getTarget","tagname":"method","owner":"java.lang.invoke.MutableCallSite","id":"method-getTarget","meta":{}},{"name":"setTarget","tagname":"method","owner":"java.lang.invoke.MutableCallSite","id":"method-setTarget","meta":{}},{"name":"type","tagname":"method","owner":"java.lang.invoke.CallSite","id":"method-type","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.MutableCallSite","short_doc":"A {@code MutableCallSite} is a java.lang.invoke.CallSite whose target variable\n behaves like an ordinary field. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.lang.invoke.CallSite"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.lang.invoke.CallSite' rel='java.lang.invoke.CallSite' class='docClass'>java.lang.invoke.CallSite</a><div class='subclass '><strong>java.lang.invoke.MutableCallSite</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/MutableCallSite.html#java-lang-invoke-MutableCallSite' target='_blank'>MutableCallSite.js</a></div></pre><div class='doc-contents'><p>A {@code MutableCallSite} is a <a href=\"#!/api/java.lang.invoke.CallSite\" rel=\"java.lang.invoke.CallSite\" class=\"docClass\">java.lang.invoke.CallSite</a> whose target variable\n behaves like an ordinary field.\n An {@code invokedynamic} instruction linked to a {@code MutableCallSite} delegates\n all calls to the site's current target.\n The {@linkplain <a href=\"#!/api/java.lang.invoke.CallSite-method-dynamicInvoker\" rel=\"java.lang.invoke.CallSite-method-dynamicInvoker\" class=\"docClass\">java.lang.invoke.CallSite.dynamicInvoker</a> dynamic invoker} of a mutable call site\n also delegates each call to the site's current target.\n <p>\n Here is an example of a mutable call site which introduces a\n state variable into a method handle chain.\n <!-- JavaDocExamplesTest.testMutableCallSite -->\n <blockquote><pre>{@code\nMutableCallSite name = new MutableCallSite(MethodType.methodType(String.class));\nMethodHandle MH_name = name.dynamicInvoker();\nMethodType MT_str1 = MethodType.methodType(String.class);\nMethodHandle MH_upcase = MethodHandles.lookup()\n    .findVirtual(String.class, \"toUpperCase\", MT_str1);\nMethodHandle worker1 = MethodHandles.filterReturnValue(MH_name, MH_upcase);\nname.setTarget(MethodHandles.constant(String.class, \"Rocky\"));\nassertEquals(\"ROCKY\", (String) worker1.invokeExact());\nname.setTarget(MethodHandles.constant(String.class, \"Fred\"));\nassertEquals(\"FRED\", (String) worker1.invokeExact());\n// (mutation can be continued indefinitely)\n }</pre></blockquote>\n <p>\n The same call site may be used in several places at once.\n <blockquote><pre>{@code\nMethodType MT_str2 = MethodType.methodType(String.class, String.class);\nMethodHandle MH_cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle MH_dear = MethodHandles.insertArguments(MH_cat, 1, \", dear?\");\nMethodHandle worker2 = MethodHandles.filterReturnValue(MH_name, MH_dear);\nassertEquals(\"Fred, dear?\", (String) worker2.invokeExact());\nname.setTarget(MethodHandles.constant(String.class, \"Wilma\"));\nassertEquals(\"WILMA\", (String) worker1.invokeExact());\nassertEquals(\"Wilma, dear?\", (String) worker2.invokeExact());\n }</pre></blockquote>\n <p>\n <em>Non-synchronization of target values:</em>\n A write to a mutable call site's target does not force other threads\n to become aware of the updated value.  Threads which do not perform\n suitable synchronization actions relative to the updated call site\n may cache the old target value and delay their use of the new target\n value indefinitely.\n (This is a normal consequence of the Java Memory Model as applied\n to object fields.)\n <p>\n For target values which will be frequently updated, consider using\n a {@linkplain <a href=\"#!/api/java.lang.invoke.VolatileCallSite\" rel=\"java.lang.invoke.VolatileCallSite\" class=\"docClass\">java.lang.invoke.VolatileCallSite</a> volatile call site} instead.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-dynamicInvoker' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MutableCallSite'>java.lang.invoke.MutableCallSite</span><br/><a href='source/MutableCallSite.html#java-lang-invoke-MutableCallSite-method-dynamicInvoker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MutableCallSite-method-dynamicInvoker' class='name expandable'>dynamicInvoker</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc} ...</div><div class='long'><p>{@inheritDoc}</p>\n<p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-dynamicInvoker\" rel=\"java.lang.invoke.CallSite-method-dynamicInvoker\" class=\"docClass\">java.lang.invoke.CallSite.dynamicInvoker</a></p></div></div></div><div id='method-getTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MutableCallSite'>java.lang.invoke.MutableCallSite</span><br/><a href='source/MutableCallSite.html#java-lang-invoke-MutableCallSite-method-getTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MutableCallSite-method-getTarget' class='name expandable'>getTarget</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the target method of the call site, which behaves\n like a normal field of the {@code MutableCallSite}. ...</div><div class='long'><p>Returns the target method of the call site, which behaves\n like a normal field of the {@code MutableCallSite}.\n <p>\n The interactions of {@code getTarget} with memory are the same\n as of a read from an ordinary variable, such as an array element or a\n non-volatile, non-final field.\n <p>\n In particular, the current thread may choose to reuse the result\n of a previous read of the target from memory, and may fail to see\n a recent update to the target by another thread.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the linkage state of this call site, a method handle which can change over time\n@see <a href=\"#!/api/java.lang.invoke.MutableCallSite-method-setTarget\" rel=\"java.lang.invoke.MutableCallSite-method-setTarget\" class=\"docClass\">setTarget</a></p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-getTarget\" rel=\"java.lang.invoke.CallSite-method-getTarget\" class=\"docClass\">java.lang.invoke.CallSite.getTarget</a></p></div></div></div><div id='method-setTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MutableCallSite'>java.lang.invoke.MutableCallSite</span><br/><a href='source/MutableCallSite.html#java-lang-invoke-MutableCallSite-method-setTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MutableCallSite-method-setTarget' class='name expandable'>setTarget</a>( <span class='pre'>newTarget</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates the target method of this call site, as a normal variable. ...</div><div class='long'><p>Updates the target method of this call site, as a normal variable.\n The type of the new target must agree with the type of the old target.\n <p>\n The interactions with memory are the same\n as of a write to an ordinary variable, such as an array element or a\n non-volatile, non-final field.\n <p>\n In particular, unrelated threads may fail to see the updated target\n until they perform a read from memory.\n Stronger guarantees can be created by putting appropriate operations\n into the bootstrap method and/or the target methods used\n at any given call site.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newTarget</span> : Object {MethodHandle}<div class='sub-desc'><p>the new target</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the proposed new target is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the proposed new target\n         has a method type that differs from the previous target\n@see <a href=\"#!/api/java.lang.invoke.MutableCallSite-method-getTarget\" rel=\"java.lang.invoke.MutableCallSite-method-getTarget\" class=\"docClass\">getTarget</a></p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-setTarget\" rel=\"java.lang.invoke.CallSite-method-setTarget\" class=\"docClass\">java.lang.invoke.CallSite.setTarget</a></p></div></div></div><div id='method-type' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.invoke.CallSite' rel='java.lang.invoke.CallSite' class='defined-in docClass'>java.lang.invoke.CallSite</a><br/><a href='source/CallSite.html#java-lang-invoke-CallSite-method-type' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.CallSite-method-type' class='name expandable'>type</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the type of this call site's target. ...</div><div class='long'><p>Returns the type of this call site's target.\n Although targets may change, any call site's type is permanent, and can never change to an unequal type.\n The {@code setTarget} method enforces this invariant by refusing any new target that does\n not have the previous target's type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the type of the current target, which is also the type of any future target</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});