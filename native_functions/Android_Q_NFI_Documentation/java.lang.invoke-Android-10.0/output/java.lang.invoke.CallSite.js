Ext.data.JsonP.java_lang_invoke_CallSite({"tagname":"class","name":"java.lang.invoke.CallSite","autodetected":{},"files":[{"filename":"CallSite.js","href":"CallSite.html#java-lang-invoke-CallSite"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"John Rose, JSR 292 EG","email":null}],"members":[{"name":"dynamicInvoker","tagname":"method","owner":"java.lang.invoke.CallSite","id":"method-dynamicInvoker","meta":{}},{"name":"getTarget","tagname":"method","owner":"java.lang.invoke.CallSite","id":"method-getTarget","meta":{}},{"name":"setTarget","tagname":"method","owner":"java.lang.invoke.CallSite","id":"method-setTarget","meta":{}},{"name":"type","tagname":"method","owner":"java.lang.invoke.CallSite","id":"method-type","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.CallSite","short_doc":"A {@code CallSite} is a holder for a variable java.lang.invoke.MethodHandle,\n which is called its {@code target}. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.lang.invoke.ConstantCallSite","java.lang.invoke.MutableCallSite","java.lang.invoke.VolatileCallSite"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.lang.invoke.CallSite</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.lang.invoke.ConstantCallSite' rel='java.lang.invoke.ConstantCallSite' class='docClass'>java.lang.invoke.ConstantCallSite</a></div><div class='dependency'><a href='#!/api/java.lang.invoke.MutableCallSite' rel='java.lang.invoke.MutableCallSite' class='docClass'>java.lang.invoke.MutableCallSite</a></div><div class='dependency'><a href='#!/api/java.lang.invoke.VolatileCallSite' rel='java.lang.invoke.VolatileCallSite' class='docClass'>java.lang.invoke.VolatileCallSite</a></div><h4>Files</h4><div class='dependency'><a href='source/CallSite.html#java-lang-invoke-CallSite' target='_blank'>CallSite.js</a></div></pre><div class='doc-contents'><p>A {@code CallSite} is a holder for a variable <a href=\"#!/api/java.lang.invoke.MethodHandle\" rel=\"java.lang.invoke.MethodHandle\" class=\"docClass\">java.lang.invoke.MethodHandle</a>,\n which is called its {@code target}.\n An {@code invokedynamic} instruction linked to a {@code CallSite} delegates\n all calls to the site's current target.\n A {@code CallSite} may be associated with several {@code invokedynamic}\n instructions, or it may be \"free floating\", associated with none.\n In any case, it may be invoked through an associated method handle\n called its {@linkplain <a href=\"#!/api/java.lang.invoke.CallSite-method-dynamicInvoker\" rel=\"java.lang.invoke.CallSite-method-dynamicInvoker\" class=\"docClass\">dynamicInvoker</a> dynamic invoker}.\n <p>\n {@code CallSite} is an abstract class which does not allow\n direct subclassing by users.  It has three immediate,\n concrete subclasses that may be either instantiated or subclassed.\n <ul>\n <li>If a mutable target is not required, an {@code invokedynamic} instruction\n may be permanently bound by means of a {@linkplain java.lang.invoke.Transformers.ConstantCallSite constant call site}.\n <li>If a mutable target is required which has volatile variable semantics,\n because updates to the target must be immediately and reliably witnessed by other threads,\n a {@linkplain <a href=\"#!/api/java.lang.invoke.VolatileCallSite\" rel=\"java.lang.invoke.VolatileCallSite\" class=\"docClass\">java.lang.invoke.VolatileCallSite</a> volatile call site} may be used.\n <li>Otherwise, if a mutable target is required,\n a {@linkplain <a href=\"#!/api/java.lang.invoke.MutableCallSite\" rel=\"java.lang.invoke.MutableCallSite\" class=\"docClass\">java.lang.invoke.MutableCallSite</a> mutable call site} may be used.\n </li></li></li></ul>\n <p>\n A non-constant call site may be <em>relinked</em> by changing its target.\n The new target must have the same {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-type\" rel=\"java.lang.invoke.MethodHandle-method-type\" class=\"docClass\">java.lang.invoke.MethodHandle.type</a>() type}\n as the previous target.\n Thus, though a call site can be relinked to a series of\n successive targets, it cannot change its type.\n <p>\n Here is a sample use of call sites and bootstrap methods which links every\n dynamic call site to print its arguments:</p>\n\n<blockquote><pre>{@code\nstatic void test() throws Throwable {\n    // THE FOLLOWING LINE IS PSEUDOCODE FOR A JVM INSTRUCTION\n    InvokeDynamic[#bootstrapDynamic].baz(\"baz arg\", 2, 3.14);\n}\nprivate static void printArgs(Object... args) {\n  System.out.println(java.util.Arrays.deepToString(args));\n}\nprivate static final MethodHandle printArgs;\nstatic {\n  MethodHandles.Lookup lookup = MethodHandles.lookup();\n  Class thisClass = lookup.lookupClass();  // (who am I?)\n  printArgs = lookup.findStatic(thisClass,\n      \"printArgs\", MethodType.methodType(void.class, Object[].class));\n}\nprivate static CallSite bootstrapDynamic(MethodHandles.Lookup caller, String name, MethodType type) {\n  // ignore caller and name, but match the type:\n  return new ConstantCallSite(printArgs.asType(type));\n}\n}</pre></blockquote>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-dynamicInvoker' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.CallSite'>java.lang.invoke.CallSite</span><br/><a href='source/CallSite.html#java-lang-invoke-CallSite-method-dynamicInvoker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.CallSite-method-dynamicInvoker' class='name expandable'>dynamicInvoker</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle equivalent to an invokedynamic instruction\n which has been linked to this call site. ...</div><div class='long'><p>Produces a method handle equivalent to an invokedynamic instruction\n which has been linked to this call site.\n <p>\n This method is equivalent to the following code:\n <blockquote><pre>{@code\n MethodHandle getTarget, invoker, result;\n getTarget = MethodHandles.publicLookup().bind(this, \"getTarget\", MethodType.methodType(MethodHandle.class));\n invoker = MethodHandles.exactInvoker(this.type());\n result = MethodHandles.foldArguments(invoker, getTarget)\n }</pre></blockquote></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which always invokes this call site's current target</p>\n</div></li></ul></div></div></div><div id='method-getTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.CallSite'>java.lang.invoke.CallSite</span><br/><a href='source/CallSite.html#java-lang-invoke-CallSite-method-getTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.CallSite-method-getTarget' class='name expandable'>getTarget</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the target method of the call site, according to the\n behavior defined by this call site's specific class. ...</div><div class='long'><p>Returns the target method of the call site, according to the\n behavior defined by this call site's specific class.\n The immediate subclasses of {@code CallSite} document the\n class-specific behaviors of this method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the current linkage state of the call site, its target method handle\n@see ConstantCallSite\n@see VolatileCallSite\n@see <a href=\"#!/api/java.lang.invoke.CallSite-method-setTarget\" rel=\"java.lang.invoke.CallSite-method-setTarget\" class=\"docClass\">setTarget</a>\n@see ConstantCallSite#getTarget\n@see MutableCallSite#getTarget\n@see VolatileCallSite#getTarget</p>\n</div></li></ul></div></div></div><div id='method-setTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.CallSite'>java.lang.invoke.CallSite</span><br/><a href='source/CallSite.html#java-lang-invoke-CallSite-method-setTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.CallSite-method-setTarget' class='name expandable'>setTarget</a>( <span class='pre'>newTarget</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates the target method of this call site, according to the\n behavior defined by this call site's specific class. ...</div><div class='long'><p>Updates the target method of this call site, according to the\n behavior defined by this call site's specific class.\n The immediate subclasses of {@code CallSite} document the\n class-specific behaviors of this method.\n <p>\n The type of the new target must be {@linkplain <a href=\"#!/api/java.lang.invoke.MethodType-method-equals\" rel=\"java.lang.invoke.MethodType-method-equals\" class=\"docClass\">java.lang.invoke.MethodType.equals</a> equal to}\n the type of the old target.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newTarget</span> : Object {MethodHandle}<div class='sub-desc'><p>the new target</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the proposed new target is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the proposed new target\n         has a method type that differs from the previous target\n@see CallSite#getTarget\n@see ConstantCallSite#setTarget\n@see MutableCallSite#setTarget\n@see VolatileCallSite#setTarget</p>\n</div></li></ul></div></div></div><div id='method-type' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.CallSite'>java.lang.invoke.CallSite</span><br/><a href='source/CallSite.html#java-lang-invoke-CallSite-method-type' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.CallSite-method-type' class='name expandable'>type</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the type of this call site's target. ...</div><div class='long'><p>Returns the type of this call site's target.\n Although targets may change, any call site's type is permanent, and can never change to an unequal type.\n The {@code setTarget} method enforces this invariant by refusing any new target that does\n not have the previous target's type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the type of the current target, which is also the type of any future target</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});