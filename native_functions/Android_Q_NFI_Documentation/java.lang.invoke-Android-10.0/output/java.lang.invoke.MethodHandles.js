Ext.data.JsonP.java_lang_invoke_MethodHandles({"tagname":"class","name":"java.lang.invoke.MethodHandles","autodetected":{},"files":[{"filename":"MethodHandles.js","href":"MethodHandles.html#java-lang-invoke-MethodHandles"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"John Rose, JSR 292 EG","email":null}],"since":"1.7","members":[{"name":"catchException","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-catchException","meta":{}},{"name":"collectArguments","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-collectArguments","meta":{}},{"name":"constant","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-constant","meta":{}},{"name":"dropArguments","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-dropArguments","meta":{}},{"name":"exactInvoker","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-exactInvoker","meta":{}},{"name":"explicitCastArguments","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-explicitCastArguments","meta":{}},{"name":"filterArguments","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-filterArguments","meta":{}},{"name":"filterReturnValue","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-filterReturnValue","meta":{}},{"name":"foldArguments","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-foldArguments","meta":{}},{"name":"guardWithTest","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-guardWithTest","meta":{}},{"name":"insertArguments","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-insertArguments","meta":{}},{"name":"invoker","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-invoker","meta":{}},{"name":"lookup","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-lookup","meta":{}},{"name":"permuteArguments","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-permuteArguments","meta":{}},{"name":"publicLookup","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-publicLookup","meta":{}},{"name":"reflectAs","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-reflectAs","meta":{}},{"name":"spreadInvoker","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-spreadInvoker","meta":{}},{"name":"throwException","tagname":"method","owner":"java.lang.invoke.MethodHandles","id":"method-throwException","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.MethodHandles","short_doc":"This class consists exclusively of static methods that operate on or return\n method handles. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.lang.invoke.MethodHandles</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles' target='_blank'>MethodHandles.js</a></div></pre><div class='doc-contents'><p>This class consists exclusively of static methods that operate on or return\n method handles. They fall into several categories:\n <ul>\n <li>Lookup methods which help create method handles for methods and fields.\n <li>Combinator methods, which combine or transform pre-existing method handles into new ones.\n <li>Other factory methods to create method handles that emulate other common JVM operations or control flow patterns.\n </li></li></li></ul>\n <p></p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-catchException' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-catchException' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-catchException' class='name expandable'>catchException</a>( <span class='pre'>target, exType, handler</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Makes a method handle which adapts a target method handle,\n by running it inside an exception handler. ...</div><div class='long'><p>Makes a method handle which adapts a target method handle,\n by running it inside an exception handler.\n If the target returns normally, the adapter returns that value.\n If an exception matching the specified type is thrown, the fallback\n handle is called instead on the exception, plus the original arguments.\n <p>\n The target and handler must have the same corresponding\n argument and return types, except that handler may omit trailing arguments\n (similarly to the predicate in <a href=\"#!/api/java.lang.invoke.MethodHandles-method-guardWithTest\" rel=\"java.lang.invoke.MethodHandles-method-guardWithTest\" class=\"docClass\">guardWithTest</a>).\n Also, the handler must have an extra leading parameter of {@code exType} or a supertype.\n <p> Here is pseudocode for the resulting adapter:\n <blockquote><pre>{@code\n T target(A..., B...);\n T handler(ExType, A...);\n T adapter(A... a, B... b) {\n   try {\n     return target(a..., b...);\n   } catch (ExType ex) {\n     return handler(ex, a...);\n   }\n }\n }</pre></blockquote>\n Note that the saved arguments ({@code a...} in the pseudocode) cannot\n be modified by execution of the target, and so are passed unchanged\n from the caller to the handler, if the handler is invoked.\n <p>\n The target and handler must return the same type, even if the handler\n always throws.  (This might happen, for instance, because the handler\n is simulating a {@code finally} clause).\n To create such a throwing handler, compose the handler creation logic\n with <a href=\"#!/api/java.lang.invoke.MethodHandles-method-throwException\" rel=\"java.lang.invoke.MethodHandles-method-throwException\" class=\"docClass\">throwException</a>,\n in order to create a method handle of the correct return type.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>method handle to call</p>\n</div></li><li><span class='pre'>exType</span> : Object {java.lang.Class}<div class='sub-desc'><p>the type of exception which the handler will catch</p>\n</div></li><li><span class='pre'>handler</span> : Object {MethodHandle}<div class='sub-desc'><p>method handle to call if a matching exception is thrown</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>method handle which incorporates the specified try/catch logic</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code handler} does not accept\n          the given exception type, or if the method handle types do\n          not match in their return types and their\n          corresponding parameters</p>\n</div></li></ul></div></div></div><div id='method-collectArguments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-collectArguments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-collectArguments' class='name expandable'>collectArguments</a>( <span class='pre'>target, pos, filter</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adapts a target method handle by pre-processing\n a sub-sequence of its arguments with a filter (another method handle). ...</div><div class='long'><p>Adapts a target method handle by pre-processing\n a sub-sequence of its arguments with a filter (another method handle).\n The pre-processed arguments are replaced by the result (if any) of the\n filter function.\n The target is then called on the modified (usually shortened) argument list.\n <p>\n If the filter returns a value, the target must accept that value as\n its argument in position {@code pos}, preceded and/or followed by\n any arguments not passed to the filter.\n If the filter returns void, the target must accept all arguments\n not passed to the filter.\n No arguments are reordered, and a result returned from the filter\n replaces (in order) the whole subsequence of arguments originally\n passed to the adapter.\n <p>\n The argument types (if any) of the filter\n replace zero or one argument types of the target, at position {@code pos},\n in the resulting adapted method handle.\n The return type of the filter (if any) must be identical to the\n argument type of the target at position {@code pos}, and that target argument\n is supplied by the return value of the filter.\n <p>\n In all cases, {@code pos} must be greater than or equal to zero, and\n {@code pos} must also be less than or equal to the target's arity.\n <p><b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle deepToString = publicLookup()\n  .findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));</pre></blockquote></p>\n\n<p>MethodHandle ts1 = deepToString.asCollector(String[].class, 1);\nassertEquals(\"[strange]\", (String) ts1.invokeExact(\"strange\"));</p>\n\n<p>MethodHandle ts2 = deepToString.asCollector(String[].class, 2);\nassertEquals(\"[up, down]\", (String) ts2.invokeExact(\"up\", \"down\"));</p>\n\n<p>MethodHandle ts3 = deepToString.asCollector(String[].class, 3);\nMethodHandle ts3_ts2 = collectArguments(ts3, 1, ts2);\nassertEquals(\"[top, [up, down], strange]\",\n             (String) ts3_ts2.invokeExact(\"top\", \"up\", \"down\", \"strange\"));</p>\n\n<p>MethodHandle ts3_ts2_ts1 = collectArguments(ts3_ts2, 3, ts1);\nassertEquals(\"[top, [up, down], [strange]]\",\n             (String) ts3_ts2_ts1.invokeExact(\"top\", \"up\", \"down\", \"strange\"));</p>\n\n<p>MethodHandle ts3_ts2_ts3 = collectArguments(ts3_ts2, 1, ts3);\nassertEquals(\"[top, [[up, down, strange], charm], bottom]\",\n             (String) ts3_ts2_ts3.invokeExact(\"top\", \"up\", \"down\", \"strange\", \"charm\", \"bottom\"));\n }\n <p> Here is pseudocode for the resulting adapter:\n <blockquote><pre>{@code\n T target(A...,V,C...);\n V filter(B...);\n T adapter(A... a,B... b,C... c) {\n   V v = filter(b...);\n   return target(a...,v,c...);\n }\n // and if the filter has no arguments:\n T target2(A...,V,C...);\n V filter2();\n T adapter2(A... a,C... c) {\n   V v = filter2();\n   return target2(a...,v,c...);\n }\n // and if the filter has a void return:\n T target3(A...,C...);\n void filter3(B...);\n void adapter3(A... a,B... b,C... c) {\n   filter3(b...);\n   return target3(a...,c...);\n }\n }</pre></blockquote>\n <p>\n A collection adapter {@code collectArguments(mh, 0, coll)} is equivalent to\n one which first \"folds\" the affected arguments, and then drops them, in separate\n steps as follows:\n <blockquote><pre>{@code\n mh = MethodHandles.dropArguments(mh, 1, coll.type().parameterList()); //step 2\n mh = MethodHandles.foldArguments(mh, coll); //step 1\n }</pre></blockquote>\n If the target method handle consumes no arguments besides than the result\n (if any) of the filter {@code coll}, then {@code collectArguments(mh, 0, coll)}\n is equivalent to {@code filterReturnValue(coll, mh)}.\n If the filter method handle {@code coll} consumes one argument and produces\n a non-void result, then {@code collectArguments(mh, N, coll)}\n is equivalent to {@code filterArguments(mh, N, coll)}.\n Other equivalences are possible but would require argument permutation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>the method handle to invoke after filtering the subsequence of arguments</p>\n</div></li><li><span class='pre'>pos</span> : Number<div class='sub-desc'><p>the position of the first adapter argument to pass to the filter,\n            and/or the target argument which receives the result of the filter</p>\n</div></li><li><span class='pre'>filter</span> : Object {MethodHandle}<div class='sub-desc'><p>method handle to call on the subsequence of arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>method handle which incorporates the specified argument subsequence filtering logic</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if either argument is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the return type of {@code filter}\n          is non-void and is not the same as the {@code pos} argument of the target,\n          or if {@code pos} is not between 0 and the target's arity, inclusive,\n          or if the resulting method handle's type would have\n          <a href=\"MethodHandle.html#maxarity\">too many parameters</a>\n@see MethodHandles#foldArguments\n@see MethodHandles#filterArguments\n@see MethodHandles#filterReturnValue</p>\n</div></li></ul></div></div></div><div id='method-constant' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-constant' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-constant' class='name expandable'>constant</a>( <span class='pre'>type, value</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle of the requested return type which returns the given\n constant value every time it is invoked. ...</div><div class='long'><p>Produces a method handle of the requested return type which returns the given\n constant value every time it is invoked.\n <p>\n Before the method handle is returned, the passed-in value is converted to the requested type.\n If the requested type is primitive, widening primitive conversions are attempted,\n else reference conversions are attempted.\n <p>The returned method handle is equivalent to {@code identity(type).bindTo(value)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Object {java.lang.Class}<div class='sub-desc'><p>the return type of the desired method handle</p>\n</div></li><li><span class='pre'>value</span> : Object {Object}<div class='sub-desc'><p>the value to return</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle of the given return type and no arguments, which always returns the given value</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the {@code type} argument is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the value cannot be converted to the required return type</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given type is {@code void.class}</p>\n</div></li></ul></div></div></div><div id='method-dropArguments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-dropArguments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-dropArguments' class='name expandable'>dropArguments</a>( <span class='pre'>target, valueTypes, pos</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle which will discard some dummy arguments\n before calling some other specified target method h...</div><div class='long'><p>Produces a method handle which will discard some dummy arguments\n before calling some other specified <i>target</i> method handle.\n The type of the new method handle will be the same as the target's type,\n except it will also include the dummy argument types,\n at some given position.\n <p>\n The {@code pos} argument may range between zero and <i>N</i>,\n where <i>N</i> is the arity of the target.\n If {@code pos} is zero, the dummy arguments will precede\n the target's real arguments; if {@code pos} is <i>N</i>\n they will come after.\n <p>\n <b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nassertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\"));\nMethodHandle d0 = dropArguments(cat, 0, String.class);\nassertEquals(\"yz\", (String) d0.invokeExact(\"x\", \"y\", \"z\"));\nMethodHandle d1 = dropArguments(cat, 1, String.class);\nassertEquals(\"xz\", (String) d1.invokeExact(\"x\", \"y\", \"z\"));\nMethodHandle d2 = dropArguments(cat, 2, String.class);\nassertEquals(\"xy\", (String) d2.invokeExact(\"x\", \"y\", \"z\"));\nMethodHandle d12 = dropArguments(cat, 1, int.class, boolean.class);\nassertEquals(\"xz\", (String) d12.invokeExact(\"x\", 12, true, \"z\"));\n }</pre></blockquote>\n <p>\n This method is also equivalent to the following code:\n <blockquote></blockquote></p>\n\n<pre> dropArguments{@code (target, pos, Arrays.asList(valueTypes))}\n </pre>\n\n\n<p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>the method handle to invoke after the arguments are dropped</p>\n</div></li><li><span class='pre'>valueTypes</span> : Number<div class='sub-desc'><p>the type(s) of the argument(s) to drop</p>\n</div></li><li><span class='pre'>pos</span> : Object {java.lang.Class[]}<div class='sub-desc'><p>position of first argument to drop (zero for the leftmost)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which drops arguments of the given types,\n         before calling the original method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the target is null,\n                              or if the {@code valueTypes} array or any of its elements is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if any element of {@code valueTypes} is {@code void.class},\n                  or if {@code pos} is negative or greater than the arity of the target,\n                  or if the new method handle's type would have\n                  <a href=\"MethodHandle.html#maxarity\">too many parameters</a></p>\n</div></li></ul></div></div></div><div id='method-exactInvoker' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-exactInvoker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-exactInvoker' class='name expandable'>exactInvoker</a>( <span class='pre'>type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a special invoker method handle which can be used to\n invoke any method handle of the given type, as if by i...</div><div class='long'><p>Produces a special <em>invoker method handle</em> which can be used to\n invoke any method handle of the given type, as if by <a href=\"#!/api/java.lang.invoke.MethodHandle-method-invokeExact\" rel=\"java.lang.invoke.MethodHandle-method-invokeExact\" class=\"docClass\">invokeExact</a>.\n The resulting invoker will have a type which is\n exactly equal to the desired type, except that it will accept\n an additional leading argument of type {@code MethodHandle}.\n <p>\n This method is equivalent to the following code (though it may be more efficient):\n {@code publicLookup().findVirtual(MethodHandle.class, \"invokeExact\", type)}</p>\n\n<p> <p style=\"font-size:smaller;\">\n <em>Discussion:</em>\n Invoker method handles can be useful when working with variable method handles\n of unknown types.\n For example, to emulate an {@code invokeExact} call to a variable method\n handle {@code M}, extract its type {@code T},\n look up the invoker method {@code X} for {@code T},\n and call the invoker method, as {@code X.invoke(T, A...)}.\n (It would not work to call {@code X.invokeExact}, since the type {@code T}\n is unknown.)\n If spreading, collecting, or other argument transformations are required,\n they can be applied once to the invoker {@code X} and reused on many {@code M}\n method handle values, as long as they are compatible with the type of {@code X}.\n <p style=\"font-size:smaller;\">\n <em>(Note:  The invoker method is not available via the Core Reflection API.\n An attempt to call {@linkplain java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}\n on the declared {@code invokeExact} or {@code invoke} method will raise an\n UnsupportedOperationException.)</em>\n <p>\n This method throws no reflective or security exceptions.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the desired target type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle suitable for invoking any method handle of the given type</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the resulting method handle's type would have\n          <a href=\"MethodHandle.html#maxarity\">too many parameters</a></p>\n</div></li></ul></div></div></div><div id='method-explicitCastArguments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-explicitCastArguments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-explicitCastArguments' class='name expandable'>explicitCastArguments</a>( <span class='pre'>target, newType</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle which adapts the type of the\n given method handle to a new type by pairwise argument and ret...</div><div class='long'><p>Produces a method handle which adapts the type of the\n given method handle to a new type by pairwise argument and return type conversion.\n The original type and new type must have the same number of arguments.\n The resulting method handle is guaranteed to report a type\n which is equal to the desired new type.\n <p>\n If the original type and new type are equal, returns target.\n <p>\n The same conversions are allowed as for <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asType\" rel=\"java.lang.invoke.MethodHandle-method-asType\" class=\"docClass\">java.lang.invoke.MethodHandle.asType</a>,\n and some additional conversions are also applied if those conversions fail.\n Given types <em>T0</em>, <em>T1</em>, one of the following conversions is applied\n if possible, before or instead of any conversions done by {@code asType}:\n <ul>\n <li>If <em>T0</em> and <em>T1</em> are references, and <em>T1</em> is an interface type,\n     then the value of type <em>T0</em> is passed as a <em>T1</em> without a cast.\n     (This treatment of interfaces follows the usage of the bytecode verifier.)\n <li>If <em>T0</em> is boolean and <em>T1</em> is another primitive,\n     the boolean is converted to a byte value, 1 for true, 0 for false.\n     (This treatment follows the usage of the bytecode verifier.)\n <li>If <em>T1</em> is boolean and <em>T0</em> is another primitive,\n     <em>T0</em> is converted to byte via Java casting conversion (JLS 5.5),\n     and the low order bit of the result is tested, as if by {@code (x &amp; 1) != 0}.\n <li>If <em>T0</em> and <em>T1</em> are primitives other than boolean,\n     then a Java casting conversion (JLS 5.5) is applied.\n     (Specifically, <em>T0</em> will convert to <em>T1</em> by\n     widening and/or narrowing.)\n <li>If <em>T0</em> is a reference and <em>T1</em> a primitive, an unboxing\n     conversion will be applied at runtime, possibly followed\n     by a Java casting conversion (JLS 5.5) on the primitive value,\n     possibly followed by a conversion from byte to boolean by testing\n     the low-order bit.\n <li>If <em>T0</em> is a reference and <em>T1</em> a primitive,\n     and if the reference is null at runtime, a zero value is introduced.\n </li></li></li></li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>the method handle to invoke after arguments are retyped</p>\n</div></li><li><span class='pre'>newType</span> : Object {MethodType}<div class='sub-desc'><p>the expected type of the new method handle</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which delegates to the target after performing\n           any necessary argument conversions, and arranges for any\n           necessary return value conversions</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if either argument is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>WrongMethodTypeException if the conversion cannot be made\n@see MethodHandle#asType</p>\n</div></li></ul></div></div></div><div id='method-filterArguments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-filterArguments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-filterArguments' class='name expandable'>filterArguments</a>( <span class='pre'>target, pos, filters</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adapts a target method handle by pre-processing\n one or more of its arguments, each with its own unary filter functio...</div><div class='long'><p>Adapts a target method handle by pre-processing\n one or more of its arguments, each with its own unary filter function,\n and then calling the target with each pre-processed argument\n replaced by the result of its corresponding filter function.\n <p>\n The pre-processing is performed by one or more method handles,\n specified in the elements of the {@code filters} array.\n The first element of the filter array corresponds to the {@code pos}\n argument of the target, and so on in sequence.\n <p>\n Null arguments in the array are treated as identity functions,\n and the corresponding arguments left unchanged.\n (If there are no non-null elements in the array, the original target is returned.)\n Each filter is applied to the corresponding argument of the adapter.\n <p>\n If a filter {@code F} applies to the {@code N}th argument of\n the target, then {@code F} must be a method handle which\n takes exactly one argument.  The type of {@code F}'s sole argument\n replaces the corresponding argument type of the target\n in the resulting adapted method handle.\n The return type of {@code F} must be identical to the corresponding\n parameter type of the target.\n <p>\n It is an error if there are elements of {@code filters}\n (null or not)\n which do not correspond to argument positions in the target.\n <p><b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle upcase = lookup().findVirtual(String.class,\n  \"toUpperCase\", methodType(String.class));\nassertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\"));\nMethodHandle f0 = filterArguments(cat, 0, upcase);\nassertEquals(\"Xy\", (String) f0.invokeExact(\"x\", \"y\")); // Xy\nMethodHandle f1 = filterArguments(cat, 1, upcase);\nassertEquals(\"xY\", (String) f1.invokeExact(\"x\", \"y\")); // xY\nMethodHandle f2 = filterArguments(cat, 0, upcase, upcase);\nassertEquals(\"XY\", (String) f2.invokeExact(\"x\", \"y\")); // XY\n }</pre></blockquote>\n <p> Here is pseudocode for the resulting adapter:\n <blockquote><pre>{@code\n V target(P... p, A[i]... a[i], B... b);\n A[i] filter<a href=\"V[i]\">i</a>;\n T adapter(P... p, V[i]... v[i], B... b) {\n   return target(p..., f<a href=\"v[i]\">i</a>..., b...);\n }\n }</pre></blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>the method handle to invoke after arguments are filtered</p>\n</div></li><li><span class='pre'>pos</span> : Number<div class='sub-desc'><p>the position of the first argument to filter</p>\n</div></li><li><span class='pre'>filters</span> : Object {java.lang.invoke.MethodHandle[]}<div class='sub-desc'><p>method handles to call initially on filtered arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>method handle which incorporates the specified argument filtering logic</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the target is null\n                              or if the {@code filters} array is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if a non-null element of {@code filters}\n          does not match a corresponding argument type of target as described above,\n          or if the {@code pos+filters.length} is greater than {@code target.type().parameterCount()},\n          or if the resulting method handle's type would have\n          <a href=\"MethodHandle.html#maxarity\">too many parameters</a></p>\n</div></li></ul></div></div></div><div id='method-filterReturnValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-filterReturnValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-filterReturnValue' class='name expandable'>filterReturnValue</a>( <span class='pre'>target, filter</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adapts a target method handle by post-processing\n its return value (if any) with a filter (another method handle). ...</div><div class='long'><p>Adapts a target method handle by post-processing\n its return value (if any) with a filter (another method handle).\n The result of the filter is returned from the adapter.\n <p>\n If the target returns a value, the filter must accept that value as\n its only argument.\n If the target returns void, the filter must accept no arguments.\n <p>\n The return type of the filter\n replaces the return type of the target\n in the resulting adapted method handle.\n The argument type of the filter (if any) must be identical to the\n return type of the target.\n <p><b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle length = lookup().findVirtual(String.class,\n  \"length\", methodType(int.class));\nSystem.out.println((String) cat.invokeExact(\"x\", \"y\")); // xy\nMethodHandle f0 = filterReturnValue(cat, length);\nSystem.out.println((int) f0.invokeExact(\"x\", \"y\")); // 2\n }</pre></blockquote>\n <p> Here is pseudocode for the resulting adapter:\n <blockquote><pre>{@code\n V target(A...);\n T filter(V);\n T adapter(A... a) {\n   V v = target(a...);\n   return filter(v);\n }\n // and if the target has a void return:\n void target2(A...);\n T filter2();\n T adapter2(A... a) {\n   target2(a...);\n   return filter2();\n }\n // and if the filter has a void return:\n V target3(A...);\n void filter3(V);\n void adapter3(A... a) {\n   V v = target3(a...);\n   filter3(v);\n }\n }</pre></blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>the method handle to invoke before filtering the return value</p>\n</div></li><li><span class='pre'>filter</span> : Object {MethodHandle}<div class='sub-desc'><p>method handle to call on the return value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>method handle which incorporates the specified return value filtering logic</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if either argument is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the argument list of {@code filter}\n          does not match the return type of target as described above</p>\n</div></li></ul></div></div></div><div id='method-foldArguments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-foldArguments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-foldArguments' class='name expandable'>foldArguments</a>( <span class='pre'>target, combiner</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adapts a target method handle by pre-processing\n some of its arguments, and then calling the target with\n the result ...</div><div class='long'><p>Adapts a target method handle by pre-processing\n some of its arguments, and then calling the target with\n the result of the pre-processing, inserted into the original\n sequence of arguments.\n <p>\n The pre-processing is performed by {@code combiner}, a second method handle.\n Of the arguments passed to the adapter, the first {@code N} arguments\n are copied to the combiner, which is then called.\n (Here, {@code N} is defined as the parameter count of the combiner.)\n After this, control passes to the target, with any result\n from the combiner inserted before the original {@code N} incoming\n arguments.\n <p>\n If the combiner returns a value, the first parameter type of the target\n must be identical with the return type of the combiner, and the next\n {@code N} parameter types of the target must exactly match the parameters\n of the combiner.\n <p>\n If the combiner has a void return, no result will be inserted,\n and the first {@code N} parameter types of the target\n must exactly match the parameters of the combiner.\n <p>\n The resulting adapter is the same type as the target, except that the\n first parameter type is dropped,\n if it corresponds to the result of the combiner.\n <p>\n (Note that dropArguments can be used to remove any arguments\n that either the combiner or the target does not wish to receive.\n If some of the incoming arguments are destined only for the combiner,\n consider using <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asCollector\" rel=\"java.lang.invoke.MethodHandle-method-asCollector\" class=\"docClass\">asCollector</a> instead, since those\n arguments will not need to be live on the stack on entry to the\n target.)\n <p><b>Example:</b>\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodHandle trace = publicLookup().findVirtual(java.io.PrintStream.class,\n  \"println\", methodType(void.class, String.class))\n    .bindTo(System.out);\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nassertEquals(\"boojum\", (String) cat.invokeExact(\"boo\", \"jum\"));\nMethodHandle catTrace = foldArguments(cat, trace);\n// also prints \"boo\":\nassertEquals(\"boojum\", (String) catTrace.invokeExact(\"boo\", \"jum\"));\n }</pre></blockquote>\n <p> Here is pseudocode for the resulting adapter:\n <blockquote><pre>{@code\n // there are N arguments in A...\n T target(V, A[N]..., B...);\n V combiner(A...);\n T adapter(A... a, B... b) {\n   V v = combiner(a...);\n   return target(v, a..., b...);\n }\n // and if the combiner has a void return:\n T target2(A[N]..., B...);\n void combiner2(A...);\n T adapter2(A... a, B... b) {\n   combiner2(a...);\n   return target2(a..., b...);\n }\n }</pre></blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>the method handle to invoke after arguments are combined</p>\n</div></li><li><span class='pre'>combiner</span> : Object {MethodHandle}<div class='sub-desc'><p>method handle to call initially on the incoming arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>method handle which incorporates the specified argument folding logic</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if either argument is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code combiner}'s return type\n          is non-void and not the same as the first argument type of\n          the target, or if the initial {@code N} argument types\n          of the target\n          (skipping one matching the {@code combiner}'s return type)\n          are not identical with the argument types of {@code combiner}</p>\n</div></li></ul></div></div></div><div id='method-guardWithTest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-guardWithTest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-guardWithTest' class='name expandable'>guardWithTest</a>( <span class='pre'>test, target, fallback</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Makes a method handle which adapts a target method handle,\n by guarding it with a test, a boolean-valued method handle. ...</div><div class='long'><p>Makes a method handle which adapts a target method handle,\n by guarding it with a test, a boolean-valued method handle.\n If the guard fails, a fallback handle is called instead.\n All three method handles must have the same corresponding\n argument and return types, except that the return type\n of the test must be boolean, and the test is allowed\n to have fewer arguments than the other two method handles.\n <p> Here is pseudocode for the resulting adapter:\n <blockquote><pre>{@code\n boolean test(A...);\n T target(A...,B...);\n T fallback(A...,B...);\n T adapter(A... a,B... b) {\n   if (test(a...))\n     return target(a..., b...);\n   else\n     return fallback(a..., b...);\n }\n }</pre></blockquote>\n Note that the test arguments ({@code a...} in the pseudocode) cannot\n be modified by execution of the test, and so are passed unchanged\n from the caller to the target or fallback as appropriate.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>test</span> : Object {MethodHandle}<div class='sub-desc'><p>method handle used for test, must return boolean</p>\n</div></li><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>method handle to call if test passes</p>\n</div></li><li><span class='pre'>fallback</span> : Object {MethodHandle}<div class='sub-desc'><p>method handle to call if test fails</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>method handle which incorporates the specified if/then/else logic</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code test} does not return boolean,\n          or if all three method types do not match (with the return\n          type of {@code test} changed to match that of the target).</p>\n</div></li></ul></div></div></div><div id='method-insertArguments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-insertArguments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-insertArguments' class='name expandable'>insertArguments</a>( <span class='pre'>target, pos, values</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Provides a target method handle with one or more bound arguments\n in advance of the method handle's invocation. ...</div><div class='long'><p>Provides a target method handle with one or more <em>bound arguments</em>\n in advance of the method handle's invocation.\n The formal parameters to the target corresponding to the bound\n arguments are called <em>bound parameters</em>.\n Returns a new method handle which saves away the bound arguments.\n When it is invoked, it receives arguments for any non-bound parameters,\n binds the saved arguments to their corresponding parameters,\n and calls the original target.\n <p>\n The type of the new method handle will drop the types for the bound\n parameters from the original target type, since the new method handle\n will no longer require those arguments to be supplied by its callers.\n <p>\n Each given argument object must match the corresponding bound parameter type.\n If a bound parameter type is a primitive, the argument object\n must be a wrapper, and will be unboxed to produce the primitive value.\n <p>\n The {@code pos} argument selects which parameters are to be bound.\n It may range between zero and <i>N-L</i> (inclusively),\n where <i>N</i> is the arity of the target method handle\n and <i>L</i> is the length of the values array.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>the method handle to invoke after the argument is inserted</p>\n</div></li><li><span class='pre'>pos</span> : Number<div class='sub-desc'><p>where to insert the argument (zero for the first)</p>\n</div></li><li><span class='pre'>values</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the series of arguments to insert</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which inserts an additional argument,\n         before calling the original method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the target or the {@code values} array is null\n@see MethodHandle#bindTo</p>\n</div></li></ul></div></div></div><div id='method-invoker' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-invoker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-invoker' class='name expandable'>invoker</a>( <span class='pre'>type</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a special invoker method handle which can be used to\n invoke any method handle compatible with the given typ...</div><div class='long'><p>Produces a special <em>invoker method handle</em> which can be used to\n invoke any method handle compatible with the given type, as if by <a href=\"#!/api/java.lang.invoke.MethodHandle-method-invoke\" rel=\"java.lang.invoke.MethodHandle-method-invoke\" class=\"docClass\">invoke</a>.\n The resulting invoker will have a type which is\n exactly equal to the desired type, except that it will accept\n an additional leading argument of type {@code MethodHandle}.\n <p>\n Before invoking its target, if the target differs from the expected type,\n the invoker will apply reference casts as\n necessary and box, unbox, or widen primitive values, as if by <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asType\" rel=\"java.lang.invoke.MethodHandle-method-asType\" class=\"docClass\">asType</a>.\n Similarly, the return value will be converted as necessary.\n If the target is a {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asVarargsCollector\" rel=\"java.lang.invoke.MethodHandle-method-asVarargsCollector\" class=\"docClass\">java.lang.invoke.MethodHandle.asVarargsCollector</a> variable arity method handle},\n the required arity conversion will be made, again as if by <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asType\" rel=\"java.lang.invoke.MethodHandle-method-asType\" class=\"docClass\">asType</a>.\n <p>\n This method is equivalent to the following code (though it may be more efficient):\n {@code publicLookup().findVirtual(MethodHandle.class, \"invoke\", type)}\n <p style=\"font-size:smaller;\">\n <em>Discussion:</em>\n A {@linkplain java.lang.invoke.MethodType#genericjava.lang.invoke.MethodType general method type} is one which\n mentions only {@code Object} arguments and return values.\n An invoker for such a type is capable of calling any method handle\n of the same arity as the general type.\n <p style=\"font-size:smaller;\">\n <em>(Note:  The invoker method is not available via the Core Reflection API.\n An attempt to call {@linkplain java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}\n on the declared {@code invokeExact} or {@code invoke} method will raise an\n UnsupportedOperationException.)</em>\n <p>\n This method throws no reflective or security exceptions.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the desired target type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle suitable for invoking any method handle convertible to the given type</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the resulting method handle's type would have\n          <a href=\"MethodHandle.html#maxarity\">too many parameters</a></p>\n</div></li></ul></div></div></div><div id='method-lookup' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-lookup' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-lookup' class='name expandable'>lookup</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodHandles.Lookup}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a lookup object with\n full capabilities to emulate all supported bytecode behaviors of the caller. ...</div><div class='long'><p>Returns a <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup\" rel=\"java.lang.invoke.MethodHandles.Lookup\" class=\"docClass\">lookup object</a> with\n full capabilities to emulate all supported bytecode behaviors of the caller.\n These capabilities include <a href=\"MethodHandles.Lookup.html#privacc\">private access</a> to the caller.\n Factory methods on the lookup object can create\n <a href=\"MethodHandleInfo.html#directmh\">direct method handles</a>\n for any member that the caller has access to via bytecodes,\n including protected and private fields and methods.\n This lookup object is a <em>capability</em> which may be delegated to trusted agents.\n Do not store it in place where untrusted code can access it.\n <p>\n This method is caller sensitive, which means that it may return different\n values to different callers.\n <p>\n For any given caller class {@code C}, the lookup object returned by this call\n has equivalent capabilities to any lookup object\n supplied by the JVM to the bootstrap method of an\n <a href=\"package-summary.html#indyinsn\">invokedynamic instruction</a>\n executing in the same caller class {@code C}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandles.Lookup}</span><div class='sub-desc'><p>a lookup object for the caller of this method, with private access</p>\n</div></li></ul></div></div></div><div id='method-permuteArguments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-permuteArguments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-permuteArguments' class='name expandable'>permuteArguments</a>( <span class='pre'>target, newType, reorder</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle which adapts the calling sequence of the\n given method handle to a new type, by reordering t...</div><div class='long'><p>Produces a method handle which adapts the calling sequence of the\n given method handle to a new type, by reordering the arguments.\n The resulting method handle is guaranteed to report a type\n which is equal to the desired new type.\n <p>\n The given array controls the reordering.\n Call {@code #I} the number of incoming parameters (the value\n {@code newType.parameterCount()}, and call {@code #O} the number\n of outgoing parameters (the value {@code target.type().parameterCount()}).\n Then the length of the reordering array must be {@code #O},\n and each element must be a non-negative number less than {@code #I}.\n For every {@code N} less than {@code #O}, the {@code N}-th\n outgoing argument will be taken from the {@code I}-th incoming\n argument, where {@code I} is {@code reorder[N]}.\n <p>\n No argument or return value conversions are applied.\n The type of each incoming argument, as determined by {@code newType},\n must be identical to the type of the corresponding outgoing parameter\n or parameters in the target method handle.\n The return type of {@code newType} must be identical to the return\n type of the original target.\n <p>\n The reordering array need not specify an actual permutation.\n An incoming argument will be duplicated if its index appears\n more than once in the array, and an incoming argument will be dropped\n if its index does not appear in the array.\n As in the case of dropArguments,\n incoming arguments which are not mentioned in the reordering array\n are may be any type, as determined only by {@code newType}.\n <blockquote><pre>{@code\nimport static <a href=\"#!/api/java.lang.invoke.MethodHandles\" rel=\"java.lang.invoke.MethodHandles\" class=\"docClass\">java.lang.invoke.MethodHandles</a>.<em>;\nimport static <a href=\"#!/api/java.lang.invoke.MethodType\" rel=\"java.lang.invoke.MethodType\" class=\"docClass\">java.lang.invoke.MethodType</a>.</em>;\n...\nMethodType intfn1 = methodType(int.class, int.class);\nMethodType intfn2 = methodType(int.class, int.class, int.class);\nMethodHandle sub = ... (int x, int y) -> (x-y) ...;\nassert(sub.type().equals(intfn2));\nMethodHandle sub1 = permuteArguments(sub, intfn2, 0, 1);\nMethodHandle rsub = permuteArguments(sub, intfn2, 1, 0);\nassert((int)rsub.invokeExact(1, 100) == 99);\nMethodHandle add = ... (int x, int y) -> (x+y) ...;\nassert(add.type().equals(intfn2));\nMethodHandle twice = permuteArguments(add, intfn1, 0, 0);\nassert(twice.type().equals(intfn1));\nassert((int)twice.invokeExact(21) == 42);\n }</pre></blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {MethodHandle}<div class='sub-desc'><p>the method handle to invoke after arguments are reordered</p>\n</div></li><li><span class='pre'>newType</span> : Object {MethodType}<div class='sub-desc'><p>the expected type of the new method handle</p>\n</div></li><li><span class='pre'>reorder</span> : Object {int[]}<div class='sub-desc'><p>an index array which controls the reordering</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle which delegates to the target after it\n           drops unused arguments and moves and/or duplicates the other arguments</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if any argument is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the index array length is not equal to\n                  the arity of the target, or if any index array element\n                  not a valid index for a parameter of {@code newType},\n                  or if two corresponding parameter types in\n                  {@code target.type()} and {@code newType} are not identical,</p>\n</div></li></ul></div></div></div><div id='method-publicLookup' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-publicLookup' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-publicLookup' class='name expandable'>publicLookup</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodHandles.Lookup}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a lookup object which is trusted minimally. ...</div><div class='long'><p>Returns a <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup\" rel=\"java.lang.invoke.MethodHandles.Lookup\" class=\"docClass\">lookup object</a> which is trusted minimally.\n It can only be used to create method handles to\n publicly accessible fields and methods.\n <p>\n As a matter of pure convention, the {@linkplain <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-lookupClass\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-lookupClass\" class=\"docClass\">java.lang.invoke.MethodHandles.Lookup.lookupClass</a> lookup class}\n of this lookup object will be java.lang.Object.</p>\n\n<p> <p style=\"font-size:smaller;\">\n <em>Discussion:</em>\n The lookup class can be changed to any other class {@code C} using an expression of the form\n <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-in\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-in\" class=\"docClass\">publicjava.lang.invoke.MethodHandles.Lookup().in(C.class)</a>.\n Since all classes have equal access to public names,\n such a change would confer no new access rights.\n A public lookup object is always subject to\n <a href=\"MethodHandles.Lookup.html#secmgr\">security manager checks</a>.\n Also, it cannot access\n <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive methods</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandles.Lookup}</span><div class='sub-desc'><p>a lookup object which is trusted minimally</p>\n</div></li></ul></div></div></div><div id='method-reflectAs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-reflectAs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-reflectAs' class='name expandable'>reflectAs</a>( <span class='pre'>target, expected, expected</span> ) : Object {java.lang.reflect.Member}<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs an unchecked \"crack\" of a\n direct method handle. ...</div><div class='long'><p>Performs an unchecked \"crack\" of a\n <a href=\"MethodHandleInfo.html#directmh\">direct method handle</a>.\n The result is as if the user had obtained a lookup object capable enough\n to crack the target method handle, called\n <a href=\"#!/api/java.lang.invoke.MethodHandles.Lookup-method-revealDirect\" rel=\"java.lang.invoke.MethodHandles.Lookup-method-revealDirect\" class=\"docClass\">Lookup.revealDirect</a>\n on the target to obtain its symbolic reference, and then called\n <a href=\"#!/api/java.lang.invoke.MethodHandleInfo-method-reflectAs\" rel=\"java.lang.invoke.MethodHandleInfo-method-reflectAs\" class=\"docClass\">MethodHandleInfo.reflectAs</a>\n to resolve the symbolic reference to a member.\n <p>\n If there is a security manager, its {@code checkPermission} method\n is called with a {@code ReflectPermission(\"suppressAccessChecks\")} permission.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {java.lang.Class}<div class='sub-desc'><p>a direct method handle to crack into symbolic reference components</p>\n</div></li><li><span class='pre'>expected</span> : Object {MethodHandle}<div class='sub-desc'><p>a class object representing the desired result type {@code T}</p>\n</div></li><li><span class='pre'>expected</span> : Object<div class='sub-desc'><p>a class object representing the desired result type {@code T}</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.reflect.Member}</span><div class='sub-desc'><p>a reference to the method, constructor, or field object\n@exception SecurityException if the caller is not privileged to call {@code setAccessible}\n@exception NullPointerException if either argument is {@code null}\n@exception IllegalArgumentException if the target is not a direct method handle\n@exception ClassCastException if the member is not of the expected type</p>\n</div></li></ul></div></div></div><div id='method-spreadInvoker' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-spreadInvoker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-spreadInvoker' class='name expandable'>spreadInvoker</a>( <span class='pre'>type, leadingArgCount</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle which will invoke any method handle of the\n given {@code type}, with a given number of trail...</div><div class='long'><p>Produces a method handle which will invoke any method handle of the\n given {@code type}, with a given number of trailing arguments replaced by\n a single trailing {@code Object[]} array.\n The resulting invoker will be a method handle with the following\n arguments:\n <ul>\n <li>a single {@code MethodHandle} target\n <li>zero or more leading values (counted by {@code leadingArgCount})\n <li>an {@code Object[]} array containing trailing arguments\n </li></li></li></ul>\n <p>\n The invoker will invoke its target like a call to <a href=\"#!/api/java.lang.invoke.MethodHandle-method-invoke\" rel=\"java.lang.invoke.MethodHandle-method-invoke\" class=\"docClass\">invoke</a> with\n the indicated {@code type}.\n That is, if the target is exactly of the given {@code type}, it will behave\n like {@code invokeExact}; otherwise it behave as if <a href=\"#!/api/java.lang.invoke.MethodHandle-method-asType\" rel=\"java.lang.invoke.MethodHandle-method-asType\" class=\"docClass\">asType</a>\n is used to convert the target to the required {@code type}.\n <p>\n The type of the returned invoker will not be the given {@code type}, but rather\n will have all parameters except the first {@code leadingArgCount}\n replaced by a single array of type {@code Object[]}, which will be\n the final parameter.\n <p>\n Before invoking its target, the invoker will spread the final array, apply\n reference casts as necessary, and unbox and widen primitive arguments.\n If, when the invoker is called, the supplied array argument does\n not have the correct number of elements, the invoker will throw\n an IllegalArgumentException instead of invoking the target.\n <p>\n This method is equivalent to the following code (though it may be more efficient):\n <blockquote><pre>{@code\nMethodHandle invoker = MethodHandles.invoker(type);\nint spreadArgCount = type.parameterCount() - leadingArgCount;\ninvoker = invoker.asSpreader(Object[].class, spreadArgCount);\nreturn invoker;\n }</pre></blockquote>\n This method throws no reflective or security exceptions.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Object {MethodType}<div class='sub-desc'><p>the desired target type</p>\n</div></li><li><span class='pre'>leadingArgCount</span> : Number<div class='sub-desc'><p>number of fixed arguments, to be passed unchanged to the target</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>a method handle suitable for invoking any method handle of the given type</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code type} is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code leadingArgCount} is not in\n                  the range from 0 to {@code type.parameterCount()} inclusive,\n                  or if the resulting method handle's type would have\n          <a href=\"MethodHandle.html#maxarity\">too many parameters</a></p>\n</div></li></ul></div></div></div><div id='method-throwException' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodHandles'>java.lang.invoke.MethodHandles</span><br/><a href='source/MethodHandles.html#java-lang-invoke-MethodHandles-method-throwException' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodHandles-method-throwException' class='name expandable'>throwException</a>( <span class='pre'>returnType, exType</span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a method handle which will throw exceptions of the given {@code exType}. ...</div><div class='long'><p>Produces a method handle which will throw exceptions of the given {@code exType}.\n The method handle will accept a single argument of {@code exType},\n and immediately throw it as an exception.\n The method type will nominally specify a return of {@code returnType}.\n The return type may be anything convenient:  It doesn't matter to the\n method handle's behavior, since it will never return normally.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>returnType</span> : Object {java.lang.Class}<div class='sub-desc'><p>the return type of the desired method handle</p>\n</div></li><li><span class='pre'>exType</span> : Object {java.lang.Class}<div class='sub-desc'><p>the parameter type of the desired method handle</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>method handle which can throw the given exceptions</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if either argument is null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});