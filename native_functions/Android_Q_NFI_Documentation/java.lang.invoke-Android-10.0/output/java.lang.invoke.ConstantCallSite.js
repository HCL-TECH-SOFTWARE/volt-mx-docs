Ext.data.JsonP.java_lang_invoke_ConstantCallSite({"tagname":"class","name":"java.lang.invoke.ConstantCallSite","autodetected":{},"files":[{"filename":"ConstantCallSite.js","href":"ConstantCallSite.html#java-lang-invoke-ConstantCallSite"}],"extends":"java.lang.invoke.CallSite","author":[{"tagname":"author","name":"John Rose, JSR 292 EG","email":null}],"members":[{"name":"dynamicInvoker","tagname":"method","owner":"java.lang.invoke.ConstantCallSite","id":"method-dynamicInvoker","meta":{}},{"name":"getTarget","tagname":"method","owner":"java.lang.invoke.ConstantCallSite","id":"method-getTarget","meta":{}},{"name":"setTarget","tagname":"method","owner":"java.lang.invoke.ConstantCallSite","id":"method-setTarget","meta":{}},{"name":"type","tagname":"method","owner":"java.lang.invoke.CallSite","id":"method-type","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.ConstantCallSite","short_doc":"A {@code ConstantCallSite} is a java.lang.invoke.CallSite whose target is permanent, and can never be changed. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.lang.invoke.CallSite"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.lang.invoke.CallSite' rel='java.lang.invoke.CallSite' class='docClass'>java.lang.invoke.CallSite</a><div class='subclass '><strong>java.lang.invoke.ConstantCallSite</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/ConstantCallSite.html#java-lang-invoke-ConstantCallSite' target='_blank'>ConstantCallSite.js</a></div></pre><div class='doc-contents'><p>A {@code ConstantCallSite} is a <a href=\"#!/api/java.lang.invoke.CallSite\" rel=\"java.lang.invoke.CallSite\" class=\"docClass\">java.lang.invoke.CallSite</a> whose target is permanent, and can never be changed.\n An {@code invokedynamic} instruction linked to a {@code ConstantCallSite} is permanently\n bound to the call site's target.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-dynamicInvoker' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.ConstantCallSite'>java.lang.invoke.ConstantCallSite</span><br/><a href='source/ConstantCallSite.html#java-lang-invoke-ConstantCallSite-method-dynamicInvoker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.ConstantCallSite-method-dynamicInvoker' class='name expandable'>dynamicInvoker</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this call site's permanent target. ...</div><div class='long'><p>Returns this call site's permanent target.\n Since that target will never change, this is a correct implementation\n of <a href=\"#!/api/java.lang.invoke.CallSite-method-dynamicInvoker\" rel=\"java.lang.invoke.CallSite-method-dynamicInvoker\" class=\"docClass\">java.lang.invoke.CallSite.dynamicInvoker</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the immutable linkage state of this call site, a constant method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the {@code ConstantCallSite} constructor has not completed</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-dynamicInvoker\" rel=\"java.lang.invoke.CallSite-method-dynamicInvoker\" class=\"docClass\">java.lang.invoke.CallSite.dynamicInvoker</a></p></div></div></div><div id='method-getTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.ConstantCallSite'>java.lang.invoke.ConstantCallSite</span><br/><a href='source/ConstantCallSite.html#java-lang-invoke-ConstantCallSite-method-getTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.ConstantCallSite-method-getTarget' class='name expandable'>getTarget</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the target method of the call site, which behaves\n like a {@code final} field of the {@code ConstantCallSite}. ...</div><div class='long'><p>Returns the target method of the call site, which behaves\n like a {@code final} field of the {@code ConstantCallSite}.\n That is, the target is always the original value passed\n to the constructor call which created this instance.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodHandle}</span><div class='sub-desc'><p>the immutable linkage state of this call site, a constant method handle</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the {@code ConstantCallSite} constructor has not completed</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-getTarget\" rel=\"java.lang.invoke.CallSite-method-getTarget\" class=\"docClass\">java.lang.invoke.CallSite.getTarget</a></p></div></div></div><div id='method-setTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.ConstantCallSite'>java.lang.invoke.ConstantCallSite</span><br/><a href='source/ConstantCallSite.html#java-lang-invoke-ConstantCallSite-method-setTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.ConstantCallSite-method-setTarget' class='name expandable'>setTarget</a>( <span class='pre'>ignore</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Always throws an UnsupportedOperationException. ...</div><div class='long'><p>Always throws an UnsupportedOperationException.\n This kind of call site cannot change its target.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ignore</span> : Object {MethodHandle}<div class='sub-desc'><p>a new target proposed for the call site, which is ignored</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException because this kind of call site cannot change its target</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.lang.invoke.CallSite-method-setTarget\" rel=\"java.lang.invoke.CallSite-method-setTarget\" class=\"docClass\">java.lang.invoke.CallSite.setTarget</a></p></div></div></div><div id='method-type' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.invoke.CallSite' rel='java.lang.invoke.CallSite' class='defined-in docClass'>java.lang.invoke.CallSite</a><br/><a href='source/CallSite.html#java-lang-invoke-CallSite-method-type' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.CallSite-method-type' class='name expandable'>type</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the type of this call site's target. ...</div><div class='long'><p>Returns the type of this call site's target.\n Although targets may change, any call site's type is permanent, and can never change to an unequal type.\n The {@code setTarget} method enforces this invariant by refusing any new target that does\n not have the previous target's type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the type of the current target, which is also the type of any future target</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});