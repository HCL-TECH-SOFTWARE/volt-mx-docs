Ext.data.JsonP.java_lang_invoke_MethodType({"tagname":"class","name":"java.lang.invoke.MethodType","autodetected":{},"files":[{"filename":"MethodType.js","href":"MethodType.html#java-lang-invoke-MethodType"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"John Rose, JSR 292 EG","email":null}],"members":[{"name":"appendParameterTypes","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-appendParameterTypes","meta":{}},{"name":"changeParameterType","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-changeParameterType","meta":{}},{"name":"changeReturnType","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-changeReturnType","meta":{}},{"name":"dropParameterTypes","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-dropParameterTypes","meta":{}},{"name":"equals","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-equals","meta":{}},{"name":"erase","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-erase","meta":{}},{"name":"fromMethodDescriptorString","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-fromMethodDescriptorString","meta":{}},{"name":"generic","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-generic","meta":{}},{"name":"genericMethodType","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-genericMethodType","meta":{}},{"name":"hasPrimitives","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-hasPrimitives","meta":{}},{"name":"hasWrappers","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-hasWrappers","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-hashCode","meta":{}},{"name":"insertParameterTypes","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-insertParameterTypes","meta":{}},{"name":"methodType","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-methodType","meta":{}},{"name":"parameterArray","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-parameterArray","meta":{}},{"name":"parameterCount","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-parameterCount","meta":{}},{"name":"parameterList","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-parameterList","meta":{}},{"name":"parameterType","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-parameterType","meta":{}},{"name":"returnType","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-returnType","meta":{}},{"name":"toMethodDescriptorString","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-toMethodDescriptorString","meta":{}},{"name":"toString","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-toString","meta":{}},{"name":"unwrap","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-unwrap","meta":{}},{"name":"wrap","tagname":"method","owner":"java.lang.invoke.MethodType","id":"method-wrap","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.invoke.MethodType","short_doc":"implements java.io.Serializable\n\nA method type represents the arguments and return type accepted and\n returned by a m...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.lang.invoke.MethodType</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/MethodType.html#java-lang-invoke-MethodType' target='_blank'>MethodType.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p>A method type represents the arguments and return type accepted and\n returned by a method handle, or the arguments and return type passed\n and expected  by a method handle caller.  Method types must be properly\n matched between a method handle and all its callers,\n and the JVM's operations enforce this matching at, specifically\n during calls to <a href=\"#!/api/java.lang.invoke.MethodHandle-method-invokeExact\" rel=\"java.lang.invoke.MethodHandle-method-invokeExact\" class=\"docClass\">java.lang.invoke.MethodHandle.invokeExact</a>\n and <a href=\"#!/api/java.lang.invoke.MethodHandle-method-invoke\" rel=\"java.lang.invoke.MethodHandle-method-invoke\" class=\"docClass\">java.lang.invoke.MethodHandle.invoke</a>, and during execution\n of {@code invokedynamic} instructions.\n <p>\n The structure is a return type accompanied by any number of parameter types.\n The types (primitive, {@code void}, and reference) are represented by Class objects.\n (For ease of exposition, we treat {@code void} as if it were a type.\n In fact, it denotes the absence of a return type.)\n <p>\n All instances of {@code MethodType} are immutable.\n Two instances are completely interchangeable if they compare equal.\n Equality depends on pairwise correspondence of the return and parameter types and on nothing else.\n <p>\n This type can be created only by factory methods.\n All factory methods may cache values, though caching is not guaranteed.\n Some factory methods are static, while others are virtual methods which\n modify precursor method types, e.g., by changing a selected parameter.\n <p>\n Factory methods which operate on groups of parameter types\n are systematically presented in two versions, so that both Java arrays and\n Java lists can be used to work with groups of parameter types.\n The query methods {@code parameterArray} and {@code parameterList}\n also provide a choice between arrays and lists.\n <p>\n {@code MethodType} objects are sometimes derived from bytecode instructions\n such as {@code invokedynamic}, specifically from the type descriptor strings associated\n with the instructions in a class file's constant pool.\n <p>\n Like classes and strings, method types can also be represented directly\n in a class file's constant pool as constants.\n A method type may be loaded by an {@code ldc} instruction which refers\n to a suitable {@code CONSTANT_MethodType} constant pool entry.\n The entry refers to a {@code CONSTANT_Utf8} spelling for the descriptor string.\n (For full details on method type constants,\n see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)\n <p>\n When the JVM materializes a {@code MethodType} from a descriptor string,\n all classes named in the descriptor must be accessible, and will be loaded.\n (But the classes need not be initialized, as is the case with a {@code CONSTANT_Class}.)\n This loading may occur at any time before the {@code MethodType} object is first derived.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-appendParameterTypes' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-appendParameterTypes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-appendParameterTypes' class='name expandable'>appendParameterTypes</a>( <span class='pre'>ptypesToInsert</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds or creates a method type with additional parameter types. ...</div><div class='long'><p>Finds or creates a method type with additional parameter types.\n Convenience method for java.lang.Class[]) methodType.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ptypesToInsert</span> : Object {java.util.List}<div class='sub-desc'><p>zero or more new parameter types to insert after the end of the parameter list</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the same type, except with the selected parameter(s) appended</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}\n                                  or if the resulting method type would have more than 255 parameter slots</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code ptypesToInsert} or any of its elements is null</p>\n</div></li></ul></div></div></div><div id='method-changeParameterType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-changeParameterType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-changeParameterType' class='name expandable'>changeParameterType</a>( <span class='pre'>num, nptype</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds or creates a method type with a single different parameter type. ...</div><div class='long'><p>Finds or creates a method type with a single different parameter type.\n Convenience method for java.lang.Class[]) methodType.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>num</span> : Number<div class='sub-desc'><p>the index (zero-based) of the parameter type to change</p>\n</div></li><li><span class='pre'>nptype</span> : Object {java.lang.Class}<div class='sub-desc'><p>a new parameter type to replace the old one with</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the same type, except with the selected parameter changed</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException if {@code num} is not a valid index into {@code parameterArray()}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code nptype} is {@code void.class}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code nptype} is null</p>\n</div></li></ul></div></div></div><div id='method-changeReturnType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-changeReturnType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-changeReturnType' class='name expandable'>changeReturnType</a>( <span class='pre'>nrtype</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds or creates a method type with a different return type. ...</div><div class='long'><p>Finds or creates a method type with a different return type.\n Convenience method for java.lang.Class[]) methodType.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nrtype</span> : Object {java.lang.Class}<div class='sub-desc'><p>a return parameter type to replace the old one with</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the same type, except with the return type change</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code nrtype} is null</p>\n</div></li></ul></div></div></div><div id='method-dropParameterTypes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-dropParameterTypes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-dropParameterTypes' class='name expandable'>dropParameterTypes</a>( <span class='pre'>start, end</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds or creates a method type with some parameter types omitted. ...</div><div class='long'><p>Finds or creates a method type with some parameter types omitted.\n Convenience method for java.lang.Class[]) methodType.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>start</span> : Number<div class='sub-desc'><p>the index (zero-based) of the first parameter type to remove</p>\n</div></li><li><span class='pre'>end</span> : Number<div class='sub-desc'><p>the index (greater than {@code start}) of the first parameter type after not to remove</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the same type, except with the selected parameter(s) removed</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException if {@code start} is negative or greater than {@code parameterCount()}\n                                  or if {@code end} is negative or greater than {@code parameterCount()}\n                                  or if {@code start} is greater than {@code end}</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-equals' class='name expandable'>equals</a>( <span class='pre'>x</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Compares the specified object with this type for equality. ...</div><div class='long'><p>Compares the specified object with this type for equality.\n That is, it returns <tt>true</tt> if and only if the specified object\n is also a method type with exactly the same parameters and return type.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Object {Object}<div class='sub-desc'><p>object to compare\n@see Object#equals(Object)</p>\n</div></li></ul></div></div></div><div id='method-erase' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-erase' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-erase' class='name expandable'>erase</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Erases all reference types to {@code Object}. ...</div><div class='long'><p>Erases all reference types to {@code Object}.\n Convenience method for java.lang.Class[]) methodType.\n All primitive types (including {@code void}) will remain unchanged.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>a version of the original type with all reference types replaced</p>\n</div></li></ul></div></div></div><div id='method-fromMethodDescriptorString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-fromMethodDescriptorString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-fromMethodDescriptorString' class='name expandable'>fromMethodDescriptorString</a>( <span class='pre'>descriptor, loader</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds or creates an instance of a method type, given the spelling of its bytecode descriptor. ...</div><div class='long'><p>Finds or creates an instance of a method type, given the spelling of its bytecode descriptor.\n Convenience method for java.lang.Class[]) methodType.\n Any class or interface name embedded in the descriptor string\n will be resolved by calling ClassLoader.loadClass(java.lang.String)\n on the given loader (or if it is null, on the system class loader).\n <p>\n Note that it is possible to encounter method types which cannot be\n constructed by this method, because their component types are\n not all reachable from a common class loader.\n <p>\n This method is included for the benefit of applications that must\n generate bytecodes that process method handles and {@code invokedynamic}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>descriptor</span> : String<div class='sub-desc'><p>a bytecode-level type descriptor string \"(T...)T\"</p>\n</div></li><li><span class='pre'>loader</span> : Object {ClassLoader}<div class='sub-desc'><p>the class loader in which to look up the types</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>a method type matching the bytecode-level type descriptor</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the string is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the string is not well-formed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TypeNotPresentException if a named type cannot be found</p>\n</div></li></ul></div></div></div><div id='method-generic' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-generic' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-generic' class='name expandable'>generic</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts all types, both reference and primitive, to {@code Object}. ...</div><div class='long'><p>Converts all types, both reference and primitive, to {@code Object}.\n Convenience method for genericMethodType.\n The expression {@code type.wrap().erase()} produces the same value\n as {@code type.generic()}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>a version of the original type with all types replaced</p>\n</div></li></ul></div></div></div><div id='method-genericMethodType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-genericMethodType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-genericMethodType' class='name expandable'>genericMethodType</a>( <span class='pre'>objectArgCount</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds or creates a method type whose components are all {@code Object}. ...</div><div class='long'><p>Finds or creates a method type whose components are all {@code Object}.\n Convenience method for java.lang.Class[]) methodType.\n All parameters and the return type will be Object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>objectArgCount</span> : Number<div class='sub-desc'><p>number of parameters</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>a generally applicable method type, for all calls of the given argument count</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code objectArgCount} is negative or greater than 255\n@see <a href=\"#!/api/java.lang.invoke.MethodType-method-genericMethodType\" rel=\"java.lang.invoke.MethodType-method-genericMethodType\" class=\"docClass\">genericMethodType</a>(int, boolean)</p>\n</div></li></ul></div></div></div><div id='method-hasPrimitives' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-hasPrimitives' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-hasPrimitives' class='name expandable'>hasPrimitives</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Reports if this type contains a primitive argument or return value. ...</div><div class='long'><p>Reports if this type contains a primitive argument or return value.\n The return type {@code void} counts as a primitive.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if any of the types are primitives</p>\n</div></li></ul></div></div></div><div id='method-hasWrappers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-hasWrappers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-hasWrappers' class='name expandable'>hasWrappers</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Reports if this type contains a wrapper argument or return value. ...</div><div class='long'><p>Reports if this type contains a wrapper argument or return value.\n Wrappers are types which box primitive values, such as Integer.\n The reference type {@code java.lang.Void} counts as a wrapper,\n if it occurs as a return type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if any of the types are wrappers</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the hash code value for this method type. ...</div><div class='long'><p>Returns the hash code value for this method type.\n It is defined to be the same as the hashcode of a List\n whose elements are the return type followed by the\n parameter types.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the hash code value for this method type\n@see Object#hashCode()\n@see <a href=\"#!/api/java.lang.invoke.MethodType-method-equals\" rel=\"java.lang.invoke.MethodType-method-equals\" class=\"docClass\">equals</a>(Object)\n@see List#hashCode()</p>\n</div></li></ul></div></div></div><div id='method-insertParameterTypes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-insertParameterTypes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-insertParameterTypes' class='name expandable'>insertParameterTypes</a>( <span class='pre'>num, ptypesToInsert</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds or creates a method type with additional parameter types. ...</div><div class='long'><p>Finds or creates a method type with additional parameter types.\n Convenience method for java.lang.Class[]) methodType.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>num</span> : Number<div class='sub-desc'><p>the position (zero-based) of the inserted parameter type(s)</p>\n</div></li><li><span class='pre'>ptypesToInsert</span> : Object {java.util.List}<div class='sub-desc'><p>zero or more new parameter types to insert into the parameter list</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>the same type, except with the selected parameter(s) inserted</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException if {@code num} is negative or greater than {@code parameterCount()}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}\n                                  or if the resulting method type would have more than 255 parameter slots</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code ptypesToInsert} or any of its elements is null</p>\n</div></li></ul></div></div></div><div id='method-methodType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-methodType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-methodType' class='name expandable'>methodType</a>( <span class='pre'>rtype, ptypes</span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds or creates a method type with the given components. ...</div><div class='long'><p>Finds or creates a method type with the given components.\n Convenience method for java.lang.Class[]) methodType.\n The resulting method has the same parameter types as {@code ptypes},\n and the specified return type.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rtype</span> : Object {java.lang.Class}<div class='sub-desc'><p>the return type</p>\n</div></li><li><span class='pre'>ptypes</span> : Object {MethodType}<div class='sub-desc'><p>the method type which supplies the parameter types</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>a method type with the given components</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code rtype} or {@code ptypes} is null</p>\n</div></li></ul></div></div></div><div id='method-parameterArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-parameterArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-parameterArray' class='name expandable'>parameterArray</a>( <span class='pre'></span> ) : Object {java.lang.Class}<span class=\"signature\"></span></div><div class='description'><div class='short'>Presents the parameter types as an array (a convenience method). ...</div><div class='long'><p>Presents the parameter types as an array (a convenience method).\n Changes to the array will not result in changes to the type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Class}</span><div class='sub-desc'><p>the parameter types (as a fresh copy if necessary)</p>\n</div></li></ul></div></div></div><div id='method-parameterCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-parameterCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-parameterCount' class='name expandable'>parameterCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of parameter types in this method type. ...</div><div class='long'><p>Returns the number of parameter types in this method type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of parameter types</p>\n</div></li></ul></div></div></div><div id='method-parameterList' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-parameterList' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-parameterList' class='name expandable'>parameterList</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Presents the parameter types as a list (a convenience method). ...</div><div class='long'><p>Presents the parameter types as a list (a convenience method).\n The list will be immutable.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>the parameter types (as an immutable list)</p>\n</div></li></ul></div></div></div><div id='method-parameterType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-parameterType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-parameterType' class='name expandable'>parameterType</a>( <span class='pre'>num</span> ) : Object {java.lang.Class}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the parameter type at the specified index, within this method type. ...</div><div class='long'><p>Returns the parameter type at the specified index, within this method type.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>num</span> : Number<div class='sub-desc'><p>the index (zero-based) of the desired parameter type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Class}</span><div class='sub-desc'><p>the selected parameter type</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException if {@code num} is not a valid index into {@code parameterArray()}</p>\n</div></li></ul></div></div></div><div id='method-returnType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-returnType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-returnType' class='name expandable'>returnType</a>( <span class='pre'></span> ) : Object {java.lang.Class}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the return type of this method type. ...</div><div class='long'><p>Returns the return type of this method type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Class}</span><div class='sub-desc'><p>the return type</p>\n</div></li></ul></div></div></div><div id='method-toMethodDescriptorString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-toMethodDescriptorString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-toMethodDescriptorString' class='name expandable'>toMethodDescriptorString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Produces a bytecode descriptor representation of the method type. ...</div><div class='long'><p>Produces a bytecode descriptor representation of the method type.\n <p>\n Note that this is not a strict inverse of <a href=\"#!/api/java.lang.invoke.MethodType-method-fromMethodDescriptorString\" rel=\"java.lang.invoke.MethodType-method-fromMethodDescriptorString\" class=\"docClass\">fromMethodDescriptorString</a>.\n Two distinct classes which share a common name but have different class loaders\n will appear identical when viewed within descriptor strings.\n <p>\n This method is included for the benefit of applications that must\n generate bytecodes that process method handles and {@code invokedynamic}.\n java.lang.ClassLoader) fromMethodDescriptorString,\n because the latter requires a suitable class loader argument.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the bytecode type descriptor representation</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string representation of the method type,\n of the form {@code \"(PT0,PT1...)RT\"}. ...</div><div class='long'><p>Returns a string representation of the method type,\n of the form {@code \"(PT0,PT1...)RT\"}.\n The string representation of a method type is a\n parenthesis enclosed, comma separated list of type names,\n followed immediately by the return type.\n <p>\n Each type is represented by its\n simple name.</p>\n</div></div></div><div id='method-unwrap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-unwrap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-unwrap' class='name expandable'>unwrap</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts all wrapper types to their corresponding primitive types. ...</div><div class='long'><p>Converts all wrapper types to their corresponding primitive types.\n Convenience method for java.lang.Class[]) methodType.\n All primitive types (including {@code void}) will remain unchanged.\n A return type of {@code java.lang.Void} is changed to {@code void}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>a version of the original type with all wrapper types replaced</p>\n</div></li></ul></div></div></div><div id='method-wrap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.invoke.MethodType'>java.lang.invoke.MethodType</span><br/><a href='source/MethodType.html#java-lang-invoke-MethodType-method-wrap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.invoke.MethodType-method-wrap' class='name expandable'>wrap</a>( <span class='pre'></span> ) : Object {java.lang.invoke.MethodType}<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts all primitive types to their corresponding wrapper types. ...</div><div class='long'><p>Converts all primitive types to their corresponding wrapper types.\n Convenience method for java.lang.Class[]) methodType.\n All reference types (including wrapper types) will remain unchanged.\n A {@code void} return type is changed to the type {@code java.lang.Void}.\n The expression {@code type.wrap().erase()} produces the same value\n as {@code type.generic()}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.invoke.MethodType}</span><div class='sub-desc'><p>a version of the original type with all primitive types replaced</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});