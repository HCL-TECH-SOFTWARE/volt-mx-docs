Ext.data.JsonP.android_opengl_Visibility({"tagname":"class","name":"android.opengl.Visibility","autodetected":{},"files":[{"filename":"Visibility.js","href":"Visibility.html#android-opengl-Visibility"}],"extends":"java.lang.Object","members":[{"name":"computeBoundingSphere","tagname":"method","owner":"android.opengl.Visibility","id":"method-computeBoundingSphere","meta":{}},{"name":"frustumCullSpheres","tagname":"method","owner":"android.opengl.Visibility","id":"method-frustumCullSpheres","meta":{}},{"name":"visibilityTest","tagname":"method","owner":"android.opengl.Visibility","id":"method-visibilityTest","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.opengl.Visibility","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.opengl.Visibility</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Visibility.html#android-opengl-Visibility' target='_blank'>Visibility.js</a></div></pre><div class='doc-contents'><p>A collection of utility methods for computing the visibility of triangle\n meshes.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-computeBoundingSphere' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.Visibility'>android.opengl.Visibility</span><br/><a href='source/Visibility.html#android-opengl-Visibility-method-computeBoundingSphere' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.Visibility-method-computeBoundingSphere' class='name expandable'>computeBoundingSphere</a>( <span class='pre'>positions, positionsOffset, positionsCount, sphere, sphereOffset</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Compute a bounding sphere for a set of points. ...</div><div class='long'><p>Compute a bounding sphere for a set of points. It is approximately the\n minimal bounding sphere of an axis-aligned box that bounds the points.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>positions</span> : Object {float[]}<div class='sub-desc'><p>positions in x, y, z triples</p>\n</div></li><li><span class='pre'>positionsOffset</span> : Number<div class='sub-desc'><p>offset into positions array</p>\n</div></li><li><span class='pre'>positionsCount</span> : Number<div class='sub-desc'><p>number of position triples to process</p>\n</div></li><li><span class='pre'>sphere</span> : Object {float[]}<div class='sub-desc'><p>array containing the output as (x, y, z, r)</p>\n</div></li><li><span class='pre'>sphereOffset</span> : Number<div class='sub-desc'><p>offset where the sphere data will be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if positions is null,\n positionsOffset &lt; 0, positionsOffset > positions.length - positionsCount,\n sphere is null, sphereOffset &lt; 0, sphereOffset > sphere.length - 4.</p>\n</div></li></ul></div></div></div><div id='method-frustumCullSpheres' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.Visibility'>android.opengl.Visibility</span><br/><a href='source/Visibility.html#android-opengl-Visibility-method-frustumCullSpheres' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.Visibility-method-frustumCullSpheres' class='name expandable'>frustumCullSpheres</a>( <span class='pre'>mvp, mvpOffset, spheres, spheresOffset, spheresCount, results, resultsOffset, resultsCapacity</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Given an OpenGL ES ModelView-Projection matrix (which implicitly\n describes a frustum) and a list of spheres, determi...</div><div class='long'><p>Given an OpenGL ES ModelView-Projection matrix (which implicitly\n describes a frustum) and a list of spheres, determine which spheres\n intersect the frustum.\n <p>\n A ModelView-Projection matrix can be computed by multiplying the\n a Projection matrix by the a ModelView matrix (in that order.). There\n are several possible ways to obtain the current ModelView and\n Projection matrices. The most generally applicable way is to keep\n track of the current matrices in application code. If that is not\n convenient, there are two optional OpenGL ES extensions which may\n be used to read the current matrices from OpenGL ES:\n <ul>\n <li>GL10Ext.glQueryMatrixxOES\n <li>GL11.GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES and\n GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES\n </li></li></ul>\n The problem with reading back the matrices is that your application\n will only work with devices that support the extension(s) that\n it uses.\n <p>\n A frustum is a six-sided truncated pyramid that defines the portion of\n world space that is visible in the view.\n <p>\n Spheres are described as four floating point values: x, y, z, and r, in\n world-space coordinates. R is the radius of the sphere.\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mvp</span> : Object {float[]}<div class='sub-desc'><p>a float array containing the mode-view-projection matrix</p>\n</div></li><li><span class='pre'>mvpOffset</span> : Number<div class='sub-desc'><p>The offset of the mvp data within the mvp array.</p>\n</div></li><li><span class='pre'>spheres</span> : Object {float[]}<div class='sub-desc'><p>a float array containing the sphere data.</p>\n</div></li><li><span class='pre'>spheresOffset</span> : Number<div class='sub-desc'><p>an offset into the sphere array where the sphere\n        data starts</p>\n</div></li><li><span class='pre'>spheresCount</span> : Number<div class='sub-desc'><p>the number of spheres to cull.</p>\n</div></li><li><span class='pre'>results</span> : Object {int[]}<div class='sub-desc'><p>an integer array containing the indices of the spheres\n that are either contained entirely within or intersect the frustum.</p>\n</div></li><li><span class='pre'>resultsOffset</span> : Number<div class='sub-desc'><p>an offset into the results array where the results\n        start.</p>\n</div></li><li><span class='pre'>resultsCapacity</span> : Number<div class='sub-desc'><p>the number of array elements available for storing\n        results.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of spheres that intersected the frustum. Can be\n larger than resultsCapacity, in which case only the first resultsCapacity\n results are written into the results array.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if mvp is null, mvpOffset &lt; 0,\n mvpOffset > mvp.length - 16, spheres is null, spheresOffset &lt; 0,\n spheresOffset > spheres.length - sphereCount,\n results is null, resultsOffset &lt; 0, resultsOffset > results.length -\n resultsCapacity.</p>\n</div></li></ul></div></div></div><div id='method-visibilityTest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.Visibility'>android.opengl.Visibility</span><br/><a href='source/Visibility.html#android-opengl-Visibility-method-visibilityTest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.Visibility-method-visibilityTest' class='name expandable'>visibilityTest</a>( <span class='pre'>ws, wsOffset, positions, positionsOffset, indices, indicesOffset, indexCount</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Test whether a given triangle mesh is visible on the screen. ...</div><div class='long'><p>Test whether a given triangle mesh is visible on the screen. The mesh\n is specified as an indexed triangle list.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ws</span> : Object {float[]}<div class='sub-desc'><p>the world space to screen space transform matrix, as an OpenGL\n column matrix.</p>\n</div></li><li><span class='pre'>wsOffset</span> : Number<div class='sub-desc'><p>an index into the ws array where the data starts.</p>\n</div></li><li><span class='pre'>positions</span> : Object {float[]}<div class='sub-desc'><p>the vertex positions (x, y, z).</p>\n</div></li><li><span class='pre'>positionsOffset</span> : Number<div class='sub-desc'><p>the index in the positions array where the data\n        starts.</p>\n</div></li><li><span class='pre'>indices</span> : Object {char[]}<div class='sub-desc'><p>the indices of the triangle list. The indices are\n expressed as chars because they are unsigned 16-bit values.</p>\n</div></li><li><span class='pre'>indicesOffset</span> : Number<div class='sub-desc'><p>the index in the indices array where the index data\n        starts.</p>\n</div></li><li><span class='pre'>indexCount</span> : Number<div class='sub-desc'><p>the number of indices in use. Typically a multiple of\n three. If not a multiple of three, the remaining one or two indices will\n be ignored.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>2 if all of the mesh is visible, 1 if some part of the mesh is\n         visible, 0 if no part is visible.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if ws is null, wsOffset &lt; 0,\n positions is null, positionsOffset &lt; 0, indices is null,\n indicesOffset &lt; 0, indicesOffset > indices.length - indexCount</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});