Ext.data.JsonP.android_opengl_GLSurfaceView_Renderer({"tagname":"class","name":"android.opengl.GLSurfaceView.Renderer","autodetected":{},"files":[{"filename":"Renderer.js","href":"Renderer.html#android-opengl-GLSurfaceView-Renderer"}],"members":[{"name":"onDrawFrame","tagname":"method","owner":"android.opengl.GLSurfaceView.Renderer","id":"method-onDrawFrame","meta":{}},{"name":"onSurfaceChanged","tagname":"method","owner":"android.opengl.GLSurfaceView.Renderer","id":"method-onSurfaceChanged","meta":{}},{"name":"onSurfaceCreated","tagname":"method","owner":"android.opengl.GLSurfaceView.Renderer","id":"method-onSurfaceCreated","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.opengl.GLSurfaceView.Renderer","short_doc":"A generic renderer interface. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Renderer.html#android-opengl-GLSurfaceView-Renderer' target='_blank'>Renderer.js</a></div></pre><div class='doc-contents'><p>A generic renderer interface.\n <p>\n The renderer is responsible for making OpenGL calls to render a frame.\n <p>\n GLSurfaceView clients typically create their own classes that implement\n this interface, and then call <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">android.opengl.GLSurfaceView.setRenderer</a> to\n register the renderer with the GLSurfaceView.\n <p></p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about how to use OpenGL, read the\n <a href=\"{@docRoot}guide/topics/graphics/opengl.html\">OpenGL</a> developer guide.</p>\n </div></p>\n\n<p> <h3>Threading</h3>\n The renderer will be called on a separate thread, so that rendering\n performance is decoupled from the UI thread. Clients typically need to\n communicate with the renderer from the UI thread, because that's where\n input events are received. Clients can communicate using any of the\n standard Java techniques for cross-thread communication, or they can\n use the android.opengl.GLSurfaceView.queueEvent(Runnable) convenience method.\n <p>\n <h3>EGL Context Lost</h3>\n There are situations where the EGL rendering context will be lost. This\n typically happens when device wakes up after going to sleep. When\n the EGL context is lost, all OpenGL resources (such as textures) that are\n associated with that context will be automatically deleted. In order to\n keep rendering correctly, a renderer must recreate any lost resources\n that it still needs. The android.opengl.EGLConfig) method\n is a convenient place to do this.</p>\n\n<p> @see #setRenderer(Renderer)</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onDrawFrame' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView.Renderer'>android.opengl.GLSurfaceView.Renderer</span><br/><a href='source/Renderer.html#android-opengl-GLSurfaceView-Renderer-method-onDrawFrame' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView.Renderer-method-onDrawFrame' class='name expandable'>onDrawFrame</a>( <span class='pre'>gl</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to draw the current frame. ...</div><div class='long'><p>Called to draw the current frame.\n <p>\n This method is responsible for drawing the current frame.\n <p>\n The implementation of this method typically looks like this:\n <pre class=\"prettyprint\">\n void onDrawFrame(GL10 gl) {\n     gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);\n     //... other gl calls to render the scene ...\n }\n </pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>gl</span> : Object {GL10}<div class='sub-desc'><p>the GL interface. Use <code>instanceof</code> to\n test if the interface supports GL11 or higher interfaces.</p>\n</div></li></ul></div></div></div><div id='method-onSurfaceChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView.Renderer'>android.opengl.GLSurfaceView.Renderer</span><br/><a href='source/Renderer.html#android-opengl-GLSurfaceView-Renderer-method-onSurfaceChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView.Renderer-method-onSurfaceChanged' class='name expandable'>onSurfaceChanged</a>( <span class='pre'>gl, width, height</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the surface changed size. ...</div><div class='long'><p>Called when the surface changed size.\n <p>\n Called after the surface is created and whenever\n the OpenGL ES surface size changes.\n <p>\n Typically you will set your viewport here. If your camera\n is fixed then you could also set your projection matrix here:\n <pre class=\"prettyprint\">\n void onSurfaceChanged(GL10 gl, int width, int height) {\n     gl.glViewport(0, 0, width, height);\n     // for a fixed camera, set the projection too\n     float ratio = (float) width / height;\n     gl.glMatrixMode(GL10.GL_PROJECTION);\n     gl.glLoadIdentity();\n     gl.glFrustumf(-ratio, ratio, -1, 1, 1, 10);\n }\n </pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>gl</span> : Object {GL10}<div class='sub-desc'><p>the GL interface. Use <code>instanceof</code> to\n test if the interface supports GL11 or higher interfaces.</p>\n</div></li><li><span class='pre'>width</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>height</span> : Number<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-onSurfaceCreated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView.Renderer'>android.opengl.GLSurfaceView.Renderer</span><br/><a href='source/Renderer.html#android-opengl-GLSurfaceView-Renderer-method-onSurfaceCreated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView.Renderer-method-onSurfaceCreated' class='name expandable'>onSurfaceCreated</a>( <span class='pre'>gl, config</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the surface is created or recreated. ...</div><div class='long'><p>Called when the surface is created or recreated.\n <p>\n Called when the rendering thread\n starts and whenever the EGL context is lost. The EGL context will typically\n be lost when the Android device awakes after going to sleep.\n <p>\n Since this method is called at the beginning of rendering, as well as\n every time the EGL context is lost, this method is a convenient place to put\n code to create resources that need to be created when the rendering\n starts, and that need to be recreated when the EGL context is lost.\n Textures are an example of a resource that you might want to create\n here.\n <p>\n Note that when the EGL context is lost, all OpenGL resources associated\n with that context will be automatically deleted. You do not need to call\n the corresponding \"glDelete\" methods such as glDeleteTextures to\n manually delete these lost resources.\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>gl</span> : Object {GL10}<div class='sub-desc'><p>the GL interface. Use <code>instanceof</code> to\n test if the interface supports GL11 or higher interfaces.</p>\n</div></li><li><span class='pre'>config</span> : Object {EGLConfig}<div class='sub-desc'><p>the EGLConfig of the created surface. Can be used\n to create matching pbuffers.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});