Ext.data.JsonP.android_opengl_GLSurfaceView({"tagname":"class","name":"android.opengl.GLSurfaceView","autodetected":{},"files":[{"filename":"GLSurfaceView.js","href":"GLSurfaceView.html#android-opengl-GLSurfaceView"}],"extends":"android.view.SurfaceView","members":[{"name":"DEBUG_CHECK_GL_ERROR","tagname":"property","owner":"android.opengl.GLSurfaceView","id":"property-DEBUG_CHECK_GL_ERROR","meta":{}},{"name":"DEBUG_LOG_GL_CALLS","tagname":"property","owner":"android.opengl.GLSurfaceView","id":"property-DEBUG_LOG_GL_CALLS","meta":{}},{"name":"RENDERMODE_CONTINUOUSLY","tagname":"property","owner":"android.opengl.GLSurfaceView","id":"property-RENDERMODE_CONTINUOUSLY","meta":{}},{"name":"RENDERMODE_WHEN_DIRTY","tagname":"property","owner":"android.opengl.GLSurfaceView","id":"property-RENDERMODE_WHEN_DIRTY","meta":{}},{"name":"getDebugFlags","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-getDebugFlags","meta":{}},{"name":"getPreserveEGLContextOnPause","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-getPreserveEGLContextOnPause","meta":{}},{"name":"getRenderMode","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-getRenderMode","meta":{}},{"name":"onPause","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-onPause","meta":{}},{"name":"onResume","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-onResume","meta":{}},{"name":"queueEvent","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-queueEvent","meta":{}},{"name":"requestRender","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-requestRender","meta":{}},{"name":"setDebugFlags","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setDebugFlags","meta":{}},{"name":"setEGLConfigChooser","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setEGLConfigChooser","meta":{}},{"name":"setEGLContextClientVersion","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setEGLContextClientVersion","meta":{}},{"name":"setEGLContextFactory","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setEGLContextFactory","meta":{}},{"name":"setEGLWindowSurfaceFactory","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setEGLWindowSurfaceFactory","meta":{}},{"name":"setGLWrapper","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setGLWrapper","meta":{}},{"name":"setPreserveEGLContextOnPause","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setPreserveEGLContextOnPause","meta":{}},{"name":"setRenderMode","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setRenderMode","meta":{}},{"name":"setRenderer","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-setRenderer","meta":{}},{"name":"surfaceChanged","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-surfaceChanged","meta":{}},{"name":"surfaceCreated","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-surfaceCreated","meta":{}},{"name":"surfaceDestroyed","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-surfaceDestroyed","meta":{}},{"name":"surfaceRedrawNeeded","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-surfaceRedrawNeeded","meta":{}},{"name":"surfaceRedrawNeededAsync","tagname":"method","owner":"android.opengl.GLSurfaceView","id":"method-surfaceRedrawNeededAsync","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.opengl.GLSurfaceView","short_doc":"implements android.view.SurfaceHolder.Callback2\n\nAn implementation of SurfaceView that uses the dedicated surface for...","classIcon":"icon-class","superclasses":["android.view.SurfaceView"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>android.view.SurfaceView<div class='subclass '><strong>android.opengl.GLSurfaceView</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView' target='_blank'>GLSurfaceView.js</a></div></pre><div class='doc-contents'><p>implements android.view.SurfaceHolder.Callback2</p>\n\n<p>An implementation of SurfaceView that uses the dedicated surface for\n displaying OpenGL rendering.\n <p>\n A GLSurfaceView provides the following features:\n <p>\n <ul>\n <li>Manages a surface, which is a special piece of memory that can be\n composited into the Android view system.\n <li>Manages an EGL display, which enables OpenGL to render into a surface.\n <li>Accepts a user-provided Renderer object that does the actual rendering.\n <li>Renders on a dedicated thread to decouple rendering performance from the\n UI thread.\n <li>Supports both on-demand and continuous rendering.\n <li>Optionally wraps, traces, and/or error-checks the renderer's OpenGL calls.\n </li></li></li></li></li></li></ul></p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about how to use OpenGL, read the\n <a href=\"{@docRoot}guide/topics/graphics/opengl.html\">OpenGL</a> developer guide.</p>\n </div></p>\n\n<p> <h3>Using GLSurfaceView</h3>\n <p>\n Typically you use GLSurfaceView by subclassing it and overriding one or more of the\n View system input event methods. If your application does not need to override event\n methods then GLSurfaceView can be used as-is. For the most part\n GLSurfaceView behavior is customized by calling \"set\" methods rather than by subclassing.\n For example, unlike a regular View, drawing is delegated to a separate Renderer object which\n is registered with the GLSurfaceView\n using the <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">setRenderer</a>(Renderer) call.\n <p>\n <h3>Initializing GLSurfaceView</h3>\n All you have to do to initialize a GLSurfaceView is call <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">setRenderer</a>(Renderer).\n However, if desired, you can modify the default behavior of GLSurfaceView by calling one or\n more of these methods before calling setRenderer:\n <ul>\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-setDebugFlags\" rel=\"android.opengl.GLSurfaceView-method-setDebugFlags\" class=\"docClass\">setDebugFlags</a>(int)\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-setEGLConfigChooser\" rel=\"android.opengl.GLSurfaceView-method-setEGLConfigChooser\" class=\"docClass\">setEGLConfigChooser</a>(boolean)\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-setEGLConfigChooser\" rel=\"android.opengl.GLSurfaceView-method-setEGLConfigChooser\" class=\"docClass\">setEGLConfigChooser</a>(EGLConfigChooser)\n <li>int, int, int, int, int)\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-setGLWrapper\" rel=\"android.opengl.GLSurfaceView-method-setGLWrapper\" class=\"docClass\">setGLWrapper</a>(GLWrapper)\n </li></li></li></li></li></ul>\n <p>\n <h4>Specifying the android.view.Surface</h4>\n By default GLSurfaceView will create a PixelFormat.RGB_888 format surface. If a translucent\n surface is required, call getHolder().setFormat(PixelFormat.TRANSLUCENT).\n The exact format of a TRANSLUCENT surface is device dependent, but it will be\n a 32-bit-per-pixel surface with 8 bits per component.\n <p>\n <h4>Choosing an EGL Configuration</h4>\n A given Android device may support multiple EGLConfig rendering configurations.\n The available configurations may differ in how many channels of data are present, as\n well as how many bits are allocated to each channel. Therefore, the first thing\n GLSurfaceView has to do when starting to render is choose what EGLConfig to use.\n <p>\n By default GLSurfaceView chooses a EGLConfig that has an RGB_888 pixel format,\n with at least a 16-bit depth buffer and no stencil.\n <p>\n If you would prefer a different EGLConfig\n you can override the default behavior by calling one of the\n setEGLConfigChooser methods.\n <p>\n <h4>Debug Behavior</h4>\n You can optionally modify the behavior of GLSurfaceView by calling\n one or more of the debugging methods <a href=\"#!/api/android.opengl.GLSurfaceView-method-setDebugFlags\" rel=\"android.opengl.GLSurfaceView-method-setDebugFlags\" class=\"docClass\">setDebugFlags</a>(int),\n and <a href=\"#!/api/android.opengl.GLSurfaceView-method-setGLWrapper\" rel=\"android.opengl.GLSurfaceView-method-setGLWrapper\" class=\"docClass\">setGLWrapper</a>. These methods may be called before and/or after setRenderer, but\n typically they are called before setRenderer so that they take effect immediately.\n <p>\n <h4>Setting a Renderer</h4>\n Finally, you must call <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">setRenderer</a> to register a <a href=\"#!/api/android.opengl.GLSurfaceView.Renderer\" rel=\"android.opengl.GLSurfaceView.Renderer\" class=\"docClass\">android.opengl.GLSurfaceView.Renderer</a>.\n The renderer is\n responsible for doing the actual OpenGL rendering.\n <p>\n <h3>Rendering Mode</h3>\n Once the renderer is set, you can control whether the renderer draws\n continuously or on-demand by calling\n <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderMode\" rel=\"android.opengl.GLSurfaceView-method-setRenderMode\" class=\"docClass\">setRenderMode</a>. The default is continuous rendering.\n <p>\n <h3>Activity Life-cycle</h3>\n A GLSurfaceView must be notified when to pause and resume rendering. GLSurfaceView clients\n are required to call <a href=\"#!/api/android.opengl.GLSurfaceView-method-onPause\" rel=\"android.opengl.GLSurfaceView-method-onPause\" class=\"docClass\">onPause</a>() when the activity stops and\n <a href=\"#!/api/android.opengl.GLSurfaceView-method-onResume\" rel=\"android.opengl.GLSurfaceView-method-onResume\" class=\"docClass\">onResume</a>() when the activity starts. These calls allow GLSurfaceView to\n pause and resume the rendering thread, and also allow GLSurfaceView to release and recreate\n the OpenGL display.\n <p>\n <h3>Handling events</h3>\n <p>\n To handle an event you will typically subclass GLSurfaceView and override the\n appropriate method, just as you would with any other View. However, when handling\n the event, you may need to communicate with the Renderer object\n that's running in the rendering thread. You can do this using any\n standard Java cross-thread communication mechanism. In addition,\n one relatively easy way to communicate with your renderer is\n to call\n <a href=\"#!/api/android.opengl.GLSurfaceView-method-queueEvent\" rel=\"android.opengl.GLSurfaceView-method-queueEvent\" class=\"docClass\">queueEvent</a>(Runnable). For example:\n <pre class=\"prettyprint\">\n class MyGLSurfaceView extends GLSurfaceView {</pre></p>\n\n<pre><code> private MyRenderer mMyRenderer;\n\n public void start() {\n     mMyRenderer = ...;\n     setRenderer(mMyRenderer);\n }\n\n public boolean onKeyDown(int keyCode, KeyEvent event) {\n     if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {\n         queueEvent(new Runnable() {\n             // This method will be called on the rendering\n             // thread:\n             public void run() {\n                 mMyRenderer.handleDpadCenter();\n             }});\n         return true;\n     }\n     return super.onKeyDown(keyCode, event);\n }\n</code></pre>\n\n<p> }\n </p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DEBUG_CHECK_GL_ERROR' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-property-DEBUG_CHECK_GL_ERROR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-property-DEBUG_CHECK_GL_ERROR' class='name expandable'>DEBUG_CHECK_GL_ERROR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Check glError() after every GL call and throw an exception if glError indicates\nthat an error has occurred. ...</div><div class='long'><p>Check glError() after every GL call and throw an exception if glError indicates\nthat an error has occurred. This can be used to help track down which OpenGL ES call\nis causing an error.</p>\n\n<p>@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-getDebugFlags\" rel=\"android.opengl.GLSurfaceView-method-getDebugFlags\" class=\"docClass\">getDebugFlags</a>\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-setDebugFlags\" rel=\"android.opengl.GLSurfaceView-method-setDebugFlags\" class=\"docClass\">setDebugFlags</a></p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-DEBUG_LOG_GL_CALLS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-property-DEBUG_LOG_GL_CALLS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-property-DEBUG_LOG_GL_CALLS' class='name expandable'>DEBUG_LOG_GL_CALLS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Log GL calls to the system log at \"verbose\" level with tag \"GLSurfaceView\". ...</div><div class='long'><p>Log GL calls to the system log at \"verbose\" level with tag \"GLSurfaceView\".</p>\n\n<p>@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-getDebugFlags\" rel=\"android.opengl.GLSurfaceView-method-getDebugFlags\" class=\"docClass\">getDebugFlags</a>\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-setDebugFlags\" rel=\"android.opengl.GLSurfaceView-method-setDebugFlags\" class=\"docClass\">setDebugFlags</a></p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-RENDERMODE_CONTINUOUSLY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-property-RENDERMODE_CONTINUOUSLY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-property-RENDERMODE_CONTINUOUSLY' class='name expandable'>RENDERMODE_CONTINUOUSLY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The renderer is called\ncontinuously to re-render the scene. ...</div><div class='long'><p>The renderer is called\ncontinuously to re-render the scene.</p>\n\n<p>@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-getRenderMode\" rel=\"android.opengl.GLSurfaceView-method-getRenderMode\" class=\"docClass\">getRenderMode</a>()\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderMode\" rel=\"android.opengl.GLSurfaceView-method-setRenderMode\" class=\"docClass\">setRenderMode</a>(int)</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-RENDERMODE_WHEN_DIRTY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-property-RENDERMODE_WHEN_DIRTY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-property-RENDERMODE_WHEN_DIRTY' class='name expandable'>RENDERMODE_WHEN_DIRTY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The renderer only renders\nwhen the surface is created, or when requestRender is called. ...</div><div class='long'><p>The renderer only renders\nwhen the surface is created, or when <a href=\"#!/api/android.opengl.GLSurfaceView-method-requestRender\" rel=\"android.opengl.GLSurfaceView-method-requestRender\" class=\"docClass\">requestRender</a> is called.</p>\n\n<p>@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-getRenderMode\" rel=\"android.opengl.GLSurfaceView-method-getRenderMode\" class=\"docClass\">getRenderMode</a>()\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderMode\" rel=\"android.opengl.GLSurfaceView-method-setRenderMode\" class=\"docClass\">setRenderMode</a>(int)\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-method-requestRender\" rel=\"android.opengl.GLSurfaceView-method-requestRender\" class=\"docClass\">requestRender</a>()</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getDebugFlags' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-getDebugFlags' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-getDebugFlags' class='name expandable'>getDebugFlags</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the current value of the debug flags. ...</div><div class='long'><p>Get the current value of the debug flags.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current value of the debug flags.</p>\n</div></li></ul></div></div></div><div id='method-getPreserveEGLContextOnPause' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-getPreserveEGLContextOnPause' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-getPreserveEGLContextOnPause' class='name expandable'>getPreserveEGLContextOnPause</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the EGL context will be preserved when paused</p>\n</div></li></ul></div></div></div><div id='method-getRenderMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-getRenderMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-getRenderMode' class='name expandable'>getRenderMode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the current rendering mode. ...</div><div class='long'><p>Get the current rendering mode. May be called\n from any thread. Must not be called before a renderer has been set.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current rendering mode.\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-property-RENDERMODE_CONTINUOUSLY\" rel=\"android.opengl.GLSurfaceView-property-RENDERMODE_CONTINUOUSLY\" class=\"docClass\">RENDERMODE_CONTINUOUSLY</a>\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-property-RENDERMODE_WHEN_DIRTY\" rel=\"android.opengl.GLSurfaceView-property-RENDERMODE_WHEN_DIRTY\" class=\"docClass\">RENDERMODE_WHEN_DIRTY</a></p>\n</div></li></ul></div></div></div><div id='method-onPause' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-onPause' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-onPause' class='name expandable'>onPause</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Pause the rendering thread, optionally tearing down the EGL context\n depending upon the value of setPreserveEGLContex...</div><div class='long'><p>Pause the rendering thread, optionally tearing down the EGL context\n depending upon the value of <a href=\"#!/api/android.opengl.GLSurfaceView-method-setPreserveEGLContextOnPause\" rel=\"android.opengl.GLSurfaceView-method-setPreserveEGLContextOnPause\" class=\"docClass\">setPreserveEGLContextOnPause</a>(boolean).</p>\n\n<p> This method should be called when it is no longer desirable for the\n GLSurfaceView to continue rendering, such as in response to\n Activity.onStop.</p>\n\n<p> Must not be called before a renderer has been set.</p>\n</div></div></div><div id='method-onResume' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-onResume' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-onResume' class='name expandable'>onResume</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resumes the rendering thread, re-creating the OpenGL context if necessary. ...</div><div class='long'><p>Resumes the rendering thread, re-creating the OpenGL context if necessary. It\n is the counterpart to <a href=\"#!/api/android.opengl.GLSurfaceView-method-onPause\" rel=\"android.opengl.GLSurfaceView-method-onPause\" class=\"docClass\">onPause</a>().</p>\n\n<p> This method should typically be called in\n Activity.onStart.</p>\n\n<p> Must not be called before a renderer has been set.</p>\n</div></div></div><div id='method-queueEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-queueEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-queueEvent' class='name expandable'>queueEvent</a>( <span class='pre'>r</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Queue a runnable to be run on the GL rendering thread. ...</div><div class='long'><p>Queue a runnable to be run on the GL rendering thread. This can be used\n to communicate with the Renderer on the rendering thread.\n Must not be called before a renderer has been set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>r</span> : Object {Runnable}<div class='sub-desc'><p>the runnable to be run on the GL rendering thread.</p>\n</div></li></ul></div></div></div><div id='method-requestRender' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-requestRender' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-requestRender' class='name expandable'>requestRender</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Request that the renderer render a frame. ...</div><div class='long'><p>Request that the renderer render a frame.\n This method is typically used when the render mode has been set to\n <a href=\"#!/api/android.opengl.GLSurfaceView-property-RENDERMODE_WHEN_DIRTY\" rel=\"android.opengl.GLSurfaceView-property-RENDERMODE_WHEN_DIRTY\" class=\"docClass\">RENDERMODE_WHEN_DIRTY</a>, so that frames are only rendered on demand.\n May be called\n from any thread. Must not be called before a renderer has been set.</p>\n</div></div></div><div id='method-setDebugFlags' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setDebugFlags' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setDebugFlags' class='name expandable'>setDebugFlags</a>( <span class='pre'>debugFlags</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the debug flags to a new value. ...</div><div class='long'><p>Set the debug flags to a new value. The value is\n constructed by OR-together zero or more\n of the DEBUG_CHECK_* constants. The debug flags take effect\n whenever a surface is created. The default value is zero.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>debugFlags</span> : Number<div class='sub-desc'><p>the new debug flags\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-property-DEBUG_CHECK_GL_ERROR\" rel=\"android.opengl.GLSurfaceView-property-DEBUG_CHECK_GL_ERROR\" class=\"docClass\">DEBUG_CHECK_GL_ERROR</a>\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-property-DEBUG_LOG_GL_CALLS\" rel=\"android.opengl.GLSurfaceView-property-DEBUG_LOG_GL_CALLS\" class=\"docClass\">DEBUG_LOG_GL_CALLS</a></p>\n</div></li></ul></div></div></div><div id='method-setEGLConfigChooser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setEGLConfigChooser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setEGLConfigChooser' class='name expandable'>setEGLConfigChooser</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Install a config chooser which will choose a config\n with at least the specified depthSize and stencilSize,\n and exac...</div><div class='long'><p>Install a config chooser which will choose a config\n with at least the specified depthSize and stencilSize,\n and exactly the specified redSize, greenSize, blueSize and alphaSize.\n <p>If this method is\n called, it must be called before <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">setRenderer</a>(Renderer)\n is called.\n <p>\n If no setEGLConfigChooser method is called, then by default the\n view will choose an RGB_888 surface with a depth buffer depth of\n at least 16 bits.</p>\n</div></div></div><div id='method-setEGLContextClientVersion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setEGLContextClientVersion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setEGLContextClientVersion' class='name expandable'>setEGLContextClientVersion</a>( <span class='pre'>version</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inform the default EGLContextFactory and default EGLConfigChooser\n which EGLContext client version to pick. ...</div><div class='long'><p>Inform the default EGLContextFactory and default EGLConfigChooser\n which EGLContext client version to pick.\n <p>Use this method to create an OpenGL ES 2.0-compatible context.\n Example:\n <pre class=\"prettyprint\">\n     public MyView(Context context) {\n         super(context);\n         setEGLContextClientVersion(2); // Pick an OpenGL ES 2.0 context.\n         setRenderer(new MyRenderer());\n     }\n </pre>\n <p>Note: Activities which require OpenGL ES 2.0 should indicate this by\n setting @lt;uses-feature android:glEsVersion=\"0x00020000\" /> in the activity's\n AndroidManifest.xml file.\n <p>If this method is called, it must be called before <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">setRenderer</a>(Renderer)\n is called.\n <p>This method only affects the behavior of the default EGLContexFactory and the\n default EGLConfigChooser. If\n <a href=\"#!/api/android.opengl.GLSurfaceView-method-setEGLContextFactory\" rel=\"android.opengl.GLSurfaceView-method-setEGLContextFactory\" class=\"docClass\">setEGLContextFactory</a>(EGLContextFactory) has been called, then the supplied\n EGLContextFactory is responsible for creating an OpenGL ES 2.0-compatible context.\n If\n <a href=\"#!/api/android.opengl.GLSurfaceView-method-setEGLConfigChooser\" rel=\"android.opengl.GLSurfaceView-method-setEGLConfigChooser\" class=\"docClass\">setEGLConfigChooser</a>(EGLConfigChooser) has been called, then the supplied\n EGLConfigChooser is responsible for choosing an OpenGL ES 2.0-compatible config.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>version</span> : Number<div class='sub-desc'><p>The EGLContext client version to choose. Use 2 for OpenGL ES 2.0</p>\n</div></li></ul></div></div></div><div id='method-setEGLContextFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setEGLContextFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setEGLContextFactory' class='name expandable'>setEGLContextFactory</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Install a custom EGLContextFactory. ...</div><div class='long'><p>Install a custom EGLContextFactory.\n <p>If this method is\n called, it must be called before <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">setRenderer</a>(Renderer)\n is called.\n <p>\n If this method is not called, then by default\n a context will be created with no shared context and\n with a null attribute list.</p>\n</div></div></div><div id='method-setEGLWindowSurfaceFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setEGLWindowSurfaceFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setEGLWindowSurfaceFactory' class='name expandable'>setEGLWindowSurfaceFactory</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Install a custom EGLWindowSurfaceFactory. ...</div><div class='long'><p>Install a custom EGLWindowSurfaceFactory.\n <p>If this method is\n called, it must be called before <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">setRenderer</a>(Renderer)\n is called.\n <p>\n If this method is not called, then by default\n a window surface will be created with a null attribute list.</p>\n</div></div></div><div id='method-setGLWrapper' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setGLWrapper' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setGLWrapper' class='name expandable'>setGLWrapper</a>( <span class='pre'>glWrapper</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the glWrapper. ...</div><div class='long'><p>Set the glWrapper. If the glWrapper is not null, its\n android.opengl.GLSurfaceView.GLWrapper.wrap(GL) method is called\n whenever a surface is created. A GLWrapper can be used to wrap\n the GL object that's passed to the renderer. Wrapping a GL\n object enables examining and modifying the behavior of the\n GL calls made by the renderer.\n <p>\n Wrapping is typically used for debugging purposes.\n <p>\n The default value is null.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>glWrapper</span> : Object {GLSurfaceView.GLWrapper}<div class='sub-desc'><p>the new GLWrapper</p>\n</div></li></ul></div></div></div><div id='method-setPreserveEGLContextOnPause' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setPreserveEGLContextOnPause' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setPreserveEGLContextOnPause' class='name expandable'>setPreserveEGLContextOnPause</a>( <span class='pre'>preserveOnPause</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Control whether the EGL context is preserved when the GLSurfaceView is paused and\n resumed. ...</div><div class='long'><p>Control whether the EGL context is preserved when the GLSurfaceView is paused and\n resumed.\n <p>\n If set to true, then the EGL context may be preserved when the GLSurfaceView is paused.\n <p>\n Prior to API level 11, whether the EGL context is actually preserved or not\n depends upon whether the Android device can support an arbitrary number of\n EGL contexts or not. Devices that can only support a limited number of EGL\n contexts must release the EGL context in order to allow multiple applications\n to share the GPU.\n <p>\n If set to false, the EGL context will be released when the GLSurfaceView is paused,\n and recreated when the GLSurfaceView is resumed.\n <p></p>\n\n<p> The default is false.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>preserveOnPause</span> : Boolean<div class='sub-desc'><p>preserve the EGL context when paused</p>\n</div></li></ul></div></div></div><div id='method-setRenderMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setRenderMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setRenderMode' class='name expandable'>setRenderMode</a>( <span class='pre'>renderMode</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the rendering mode. ...</div><div class='long'><p>Set the rendering mode. When renderMode is\n RENDERMODE_CONTINUOUSLY, the renderer is called\n repeatedly to re-render the scene. When renderMode\n is RENDERMODE_WHEN_DIRTY, the renderer only rendered when the surface\n is created, or when <a href=\"#!/api/android.opengl.GLSurfaceView-method-requestRender\" rel=\"android.opengl.GLSurfaceView-method-requestRender\" class=\"docClass\">requestRender</a> is called. Defaults to RENDERMODE_CONTINUOUSLY.\n <p>\n Using RENDERMODE_WHEN_DIRTY can improve battery life and overall system performance\n by allowing the GPU and CPU to idle when the view does not need to be updated.\n <p>\n This method can only be called after <a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderer\" rel=\"android.opengl.GLSurfaceView-method-setRenderer\" class=\"docClass\">setRenderer</a>(Renderer)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>renderMode</span> : Number<div class='sub-desc'><p>one of the RENDERMODE_X constants\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-property-RENDERMODE_CONTINUOUSLY\" rel=\"android.opengl.GLSurfaceView-property-RENDERMODE_CONTINUOUSLY\" class=\"docClass\">RENDERMODE_CONTINUOUSLY</a>\n@see <a href=\"#!/api/android.opengl.GLSurfaceView-property-RENDERMODE_WHEN_DIRTY\" rel=\"android.opengl.GLSurfaceView-property-RENDERMODE_WHEN_DIRTY\" class=\"docClass\">RENDERMODE_WHEN_DIRTY</a></p>\n</div></li></ul></div></div></div><div id='method-setRenderer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-setRenderer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-setRenderer' class='name expandable'>setRenderer</a>( <span class='pre'>renderer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the renderer associated with this view. ...</div><div class='long'><p>Set the renderer associated with this view. Also starts the thread that\n will call the renderer, which in turn causes the rendering to start.\n <p>This method should be called once and only once in the life-cycle of\n a GLSurfaceView.\n <p>The following GLSurfaceView methods can only be called <em>before</em>\n setRenderer is called:\n <ul>\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-setEGLConfigChooser\" rel=\"android.opengl.GLSurfaceView-method-setEGLConfigChooser\" class=\"docClass\">setEGLConfigChooser</a>(boolean)\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-setEGLConfigChooser\" rel=\"android.opengl.GLSurfaceView-method-setEGLConfigChooser\" class=\"docClass\">setEGLConfigChooser</a>(EGLConfigChooser)\n <li>int, int, int, int, int)\n </li></li></li></ul>\n <p>\n The following GLSurfaceView methods can only be called <em>after</em>\n setRenderer is called:\n <ul>\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-getRenderMode\" rel=\"android.opengl.GLSurfaceView-method-getRenderMode\" class=\"docClass\">getRenderMode</a>()\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-onPause\" rel=\"android.opengl.GLSurfaceView-method-onPause\" class=\"docClass\">onPause</a>()\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-onResume\" rel=\"android.opengl.GLSurfaceView-method-onResume\" class=\"docClass\">onResume</a>()\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-queueEvent\" rel=\"android.opengl.GLSurfaceView-method-queueEvent\" class=\"docClass\">queueEvent</a>(Runnable)\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-requestRender\" rel=\"android.opengl.GLSurfaceView-method-requestRender\" class=\"docClass\">requestRender</a>()\n <li><a href=\"#!/api/android.opengl.GLSurfaceView-method-setRenderMode\" rel=\"android.opengl.GLSurfaceView-method-setRenderMode\" class=\"docClass\">setRenderMode</a>(int)\n </li></li></li></li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>renderer</span> : Object {GLSurfaceView.Renderer}<div class='sub-desc'><p>the renderer to use to perform OpenGL drawing.</p>\n</div></li></ul></div></div></div><div id='method-surfaceChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-surfaceChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-surfaceChanged' class='name expandable'>surfaceChanged</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is part of the SurfaceHolder.Callback interface, and is\n not normally called or subclassed by clients of ...</div><div class='long'><p>This method is part of the SurfaceHolder.Callback interface, and is\n not normally called or subclassed by clients of GLSurfaceView.</p>\n</div></div></div><div id='method-surfaceCreated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-surfaceCreated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-surfaceCreated' class='name expandable'>surfaceCreated</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is part of the SurfaceHolder.Callback interface, and is\n not normally called or subclassed by clients of ...</div><div class='long'><p>This method is part of the SurfaceHolder.Callback interface, and is\n not normally called or subclassed by clients of GLSurfaceView.</p>\n</div></div></div><div id='method-surfaceDestroyed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-surfaceDestroyed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-surfaceDestroyed' class='name expandable'>surfaceDestroyed</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is part of the SurfaceHolder.Callback interface, and is\n not normally called or subclassed by clients of ...</div><div class='long'><p>This method is part of the SurfaceHolder.Callback interface, and is\n not normally called or subclassed by clients of GLSurfaceView.</p>\n</div></div></div><div id='method-surfaceRedrawNeeded' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-surfaceRedrawNeeded' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-surfaceRedrawNeeded' class='name expandable'>surfaceRedrawNeeded</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is part of the SurfaceHolder.Callback2 interface, and is\n not normally called or subclassed by clients of...</div><div class='long'><p>This method is part of the SurfaceHolder.Callback2 interface, and is\n not normally called or subclassed by clients of GLSurfaceView.</p>\n</div></div></div><div id='method-surfaceRedrawNeededAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView'>android.opengl.GLSurfaceView</span><br/><a href='source/GLSurfaceView.html#android-opengl-GLSurfaceView-method-surfaceRedrawNeededAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView-method-surfaceRedrawNeededAsync' class='name expandable'>surfaceRedrawNeededAsync</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is part of the SurfaceHolder.Callback2 interface, and is\n not normally called or subclassed by clients of...</div><div class='long'><p>This method is part of the SurfaceHolder.Callback2 interface, and is\n not normally called or subclassed by clients of GLSurfaceView.</p>\n</div></div></div></div></div></div></div>","meta":{}});