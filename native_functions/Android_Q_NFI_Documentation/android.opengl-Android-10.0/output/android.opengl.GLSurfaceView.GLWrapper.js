Ext.data.JsonP.android_opengl_GLSurfaceView_GLWrapper({"tagname":"class","name":"android.opengl.GLSurfaceView.GLWrapper","autodetected":{},"files":[{"filename":"GLWrapper.js","href":"GLWrapper.html#android-opengl-GLSurfaceView-GLWrapper"}],"members":[{"name":"wrap","tagname":"method","owner":"android.opengl.GLSurfaceView.GLWrapper","id":"method-wrap","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.opengl.GLSurfaceView.GLWrapper","short_doc":"An interface used to wrap a GL interface. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/GLWrapper.html#android-opengl-GLSurfaceView-GLWrapper' target='_blank'>GLWrapper.js</a></div></pre><div class='doc-contents'><p>An interface used to wrap a GL interface.\n <p>Typically\n used for implementing debugging and tracing on top of the default\n GL interface. You would typically use this by creating your own class\n that implemented all the GL methods by delegating to another GL instance.\n Then you could add your own behavior before or after calling the\n delegate. All the GLWrapper would do was instantiate and return the\n wrapper GL instance:\n <pre class=\"prettyprint\">\n class MyGLWrapper implements GLWrapper {\n     GL wrap(GL gl) {\n         return new MyGLImplementation(gl);\n     }\n     static class MyGLImplementation implements GL,GL10,GL11,... {\n         ...\n     }\n }\n </pre>\n @see #setGLWrapper(GLWrapper)</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-wrap' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.opengl.GLSurfaceView.GLWrapper'>android.opengl.GLSurfaceView.GLWrapper</span><br/><a href='source/GLWrapper.html#android-opengl-GLSurfaceView-GLWrapper-method-wrap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.opengl.GLSurfaceView.GLWrapper-method-wrap' class='name expandable'>wrap</a>( <span class='pre'>gl</span> ) : Object {javax.microedition.khronos.opengles.GL}<span class=\"signature\"></span></div><div class='description'><div class='short'>Wraps a gl interface in another gl interface. ...</div><div class='long'><p>Wraps a gl interface in another gl interface.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>gl</span> : Object {GL}<div class='sub-desc'><p>a GL interface that is to be wrapped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.microedition.khronos.opengles.GL}</span><div class='sub-desc'><p>either the input argument or another GL object that wraps the input argument.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});