Ext.data.JsonP.com_android_systemui_plugins_Plugin({"tagname":"class","name":"com.android.systemui.plugins.Plugin","autodetected":{},"files":[{"filename":"Plugin.js","href":"Plugin.html#com-android-systemui-plugins-Plugin"}],"members":[{"name":"getVersion","tagname":"method","owner":"com.android.systemui.plugins.Plugin","id":"method-getVersion","meta":{"deprecated":{"text":"<p>@see Requires</p>\n"}}},{"name":"onCreate","tagname":"method","owner":"com.android.systemui.plugins.Plugin","id":"method-onCreate","meta":{}},{"name":"onDestroy","tagname":"method","owner":"com.android.systemui.plugins.Plugin","id":"method-onDestroy","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.systemui.plugins.Plugin","short_doc":"Plugins are separate APKs that\n are expected to implement interfaces provided by SystemUI. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Plugin.html#com-android-systemui-plugins-Plugin' target='_blank'>Plugin.js</a></div></pre><div class='doc-contents'><p>Plugins are separate APKs that\n are expected to implement interfaces provided by SystemUI.  Their\n code is dynamically loaded into the SysUI process which can allow\n for multiple prototypes to be created and run on a single android\n build.</p>\n\n<p> PluginLifecycle:\n <pre class=\"prettyprint\"></pre></p>\n\n<p> plugin.onCreate(Context sysuiContext, Context pluginContext);\n --- This is always called before any other calls</p>\n\n<p> pluginListener.onPluginConnected(Plugin p);\n --- This lets the plugin hook know that a plugin is now connected.</p>\n\n<ul>\n<li>Any other calls back and forth between sysui/plugin **</li>\n</ul>\n\n\n<p> pluginListener.onPluginDisconnected(Plugin p);\n --- Lets the plugin hook know that it should stop interacting with\n     this plugin and drop all references to it.</p>\n\n<p> plugin.onDestroy();\n --- Finally the plugin can perform any cleanup to ensure that its not\n     leaking into the SysUI process.</p>\n\n<p> Any time a plugin APK is updated the plugin is destroyed and recreated\n to load the new code/resources.</p>\n\n<p> </p>\n\n<p> Creating plugin hooks:</p>\n\n<p> To create a plugin hook, first create an interface in\n frameworks/base/packages/SystemUI/plugin that extends Plugin.\n Include in it any hooks you want to be able to call into from\n sysui and create callback interfaces for anything you need to\n pass through into the plugin.</p>\n\n<p> Then to attach to any plugins simply add a plugin listener and\n onPluginConnected will get called whenever new plugins are installed,\n updated, or enabled.  Like this example from SystemUIApplication:</p>\n\n<p> <pre class=\"prettyprint\">\n {@literal\n PluginManager.getInstance(this).addPluginListener(OverlayPlugin.COMPONENT,\n        new PluginListener<OverlayPlugin>() {\n        @Override\n        public void onPluginConnected(OverlayPlugin plugin) {\n            StatusBar phoneStatusBar = getComponent(StatusBar.class);\n            if (phoneStatusBar != null) {\n                plugin.setup(phoneStatusBar.getStatusBarWindow(),\n                phoneStatusBar.getNavigationBarView());\n            }\n        }\n }, OverlayPlugin.VERSION, true /<em> Allow multiple plugins </em>\\/);\n }\n </OverlayPlugin></pre>\n Note the VERSION included here.  Any time incompatible changes in the\n interface are made, this version should be changed to ensure old plugins\n aren't accidentally loaded.  Since the plugin library is provided by\n SystemUI, default implementations can be added for new methods to avoid\n version changes when possible.</p>\n\n<p> Implementing a Plugin:</p>\n\n<p> See the ExamplePlugin for an example Android.mk on how to compile\n a plugin.  Note that SystemUILib is not static for plugins, its classes\n are provided by SystemUI.</p>\n\n<p> Plugin security is based around a signature permission, so plugins must\n hold the following permission in their manifest.</p>\n\n<p> <pre class=\"prettyprint\">\n {@literal\n <uses-permission android:name=\"com.android.systemui.permission.PLUGIN\" />\n }\n </uses></pre></p>\n\n<p> A plugin is found through a querying for services, so to let SysUI know\n about it, create a service with a name that points at your implementation\n of the plugin interface with the action accompanying it:</p>\n\n<p> <pre class=\"prettyprint\">\n {@literal\n <service android:name=\".TestOverlayPlugin\">\n    <intent-filter>\n        <action android:name=\"com.android.systemui.action.PLUGIN_COMPONENT\" />\n    </intent-filter>\n </action></intent></service>\n }\n </pre></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getVersion' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.plugins.Plugin'>com.android.systemui.plugins.Plugin</span><br/><a href='source/Plugin.html#com-android-systemui-plugins-Plugin-method-getVersion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.plugins.Plugin-method-getVersion' class='name expandable'>getVersion</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>@see Requires</p>\n\n        </div>\n</div></div></div><div id='method-onCreate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.plugins.Plugin'>com.android.systemui.plugins.Plugin</span><br/><a href='source/Plugin.html#com-android-systemui-plugins-Plugin-method-onCreate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.plugins.Plugin-method-onCreate' class='name expandable'>onCreate</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onDestroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.plugins.Plugin'>com.android.systemui.plugins.Plugin</span><br/><a href='source/Plugin.html#com-android-systemui-plugins-Plugin-method-onDestroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.plugins.Plugin-method-onDestroy' class='name expandable'>onDestroy</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});