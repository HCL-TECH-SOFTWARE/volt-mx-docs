Ext.data.JsonP.java_nio_DoubleBuffer({"tagname":"class","name":"java.nio.DoubleBuffer","autodetected":{},"files":[{"filename":"DoubleBuffer.js","href":"DoubleBuffer.html#java-nio-DoubleBuffer"}],"extends":"java.nio.Buffer","author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"allocate","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-allocate","meta":{}},{"name":"array","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-array","meta":{}},{"name":"arrayOffset","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-arrayOffset","meta":{}},{"name":"asReadOnlyBuffer","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-asReadOnlyBuffer","meta":{}},{"name":"capacity","tagname":"method","owner":"java.nio.Buffer","id":"method-capacity","meta":{}},{"name":"clear","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-clear","meta":{}},{"name":"compact","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-compact","meta":{}},{"name":"compareTo","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-compareTo","meta":{}},{"name":"duplicate","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-duplicate","meta":{}},{"name":"equals","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-equals","meta":{}},{"name":"flip","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-flip","meta":{}},{"name":"get","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-get","meta":{}},{"name":"hasArray","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-hasArray","meta":{}},{"name":"hasRemaining","tagname":"method","owner":"java.nio.Buffer","id":"method-hasRemaining","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-hashCode","meta":{}},{"name":"isDirect","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-isDirect","meta":{}},{"name":"isReadOnly","tagname":"method","owner":"java.nio.Buffer","id":"method-isReadOnly","meta":{}},{"name":"limit","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-limit","meta":{}},{"name":"mark","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-mark","meta":{}},{"name":"order","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-order","meta":{}},{"name":"position","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-position","meta":{}},{"name":"put","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-put","meta":{}},{"name":"remaining","tagname":"method","owner":"java.nio.Buffer","id":"method-remaining","meta":{}},{"name":"reset","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-reset","meta":{}},{"name":"rewind","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-rewind","meta":{}},{"name":"slice","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-slice","meta":{}},{"name":"toString","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-toString","meta":{}},{"name":"wrap","tagname":"method","owner":"java.nio.DoubleBuffer","id":"method-wrap","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.DoubleBuffer","short_doc":"implements java.lang.Comparable\n\nA double buffer. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.nio.Buffer"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.nio.Buffer' rel='java.nio.Buffer' class='docClass'>java.nio.Buffer</a><div class='subclass '><strong>java.nio.DoubleBuffer</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer' target='_blank'>DoubleBuffer.js</a></div></pre><div class='doc-contents'><p>implements java.lang.Comparable</p>\n\n<p>A double buffer.</p>\n\n<p> <p> This class defines four categories of operations upon\n double buffers:</p>\n\n<p> <ul></ul></p>\n\n<p>   <li><p> Absolute and relative <i>get</i> and\n   <i>put</i> methods that read and write\n   single doubles; </p></li></p>\n\n<p>   <li><p> Relative <i>bulk get</i>\n   methods that transfer contiguous sequences of doubles from this buffer\n   into an array; and</p></li></p>\n\n<p>   <li><p> Relative <i>bulk put</i>\n   methods that transfer contiguous sequences of doubles from a\n   double array or some other double\n   buffer into this buffer;&#32;and </p></li></p>\n\n<p>   <li><p> Methods for <a href=\"#!/api/java.nio.DoubleBuffer-method-compact\" rel=\"java.nio.DoubleBuffer-method-compact\" class=\"docClass\">compacting</a>, <a href=\"#!/api/java.nio.DoubleBuffer-method-duplicate\" rel=\"java.nio.DoubleBuffer-method-duplicate\" class=\"docClass\">duplicating</a>, and <a href=\"#!/api/java.nio.DoubleBuffer-method-slice\" rel=\"java.nio.DoubleBuffer-method-slice\" class=\"docClass\">slicing</a>\n   a double buffer.  </p></li></p>\n\n<p> </p>\n\n<p> <p> Double buffers can be created either by <a href=\"#!/api/java.nio.DoubleBuffer-method-allocate\" rel=\"java.nio.DoubleBuffer-method-allocate\" class=\"docClass\">&lt;i&gt;allocation&lt;/i&gt;</a>, which allocates space for the buffer's</p>\n\n<p> content, by <i>wrapping</i> an existing\n double array  into a buffer, or by creating a\n <a href=\"ByteBuffer.html#views\"><i>view</i></a> of an existing byte buffer.</p>\n\n<p> <p> Like a byte buffer, a double buffer is either <a\n href=\"ByteBuffer.html#direct\"><i>direct</i> or <i>non-direct</i></a>.  A\n double buffer created via the <tt>wrap</tt> methods of this class will\n be non-direct.  A double buffer created as a view of a byte buffer will\n be direct if, and only if, the byte buffer itself is direct.  Whether or not\n a double buffer is direct may be determined by invoking the <a href=\"#!/api/java.nio.DoubleBuffer-method-isDirect\" rel=\"java.nio.DoubleBuffer-method-isDirect\" class=\"docClass\">isDirect</a> method.  </p></p>\n\n<p> <p> Methods in this class that do not otherwise have a value to return are\n specified to return the buffer upon which they are invoked.  This allows\n method invocations to be chained.</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-allocate' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-allocate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-allocate' class='name expandable'>allocate</a>( <span class='pre'>capacity</span> ) : Object {java.nio.DoubleBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Allocates a new double buffer. ...</div><div class='long'><p>Allocates a new double buffer.</p>\n\n<p> <p> The new buffer's position will be zero, its limit will be its\n capacity, its mark will be undefined, and each of its elements will be\n initialized to zero.  It will have a <a href=\"#!/api/java.nio.DoubleBuffer-method-array\" rel=\"java.nio.DoubleBuffer-method-array\" class=\"docClass\">backing array</a>,\n and its <a href=\"#!/api/java.nio.DoubleBuffer-method-arrayOffset\" rel=\"java.nio.DoubleBuffer-method-arrayOffset\" class=\"docClass\">array offset</a> will be zero.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>capacity</span> : Number<div class='sub-desc'><p>The new buffer's capacity, in doubles</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.DoubleBuffer}</span><div class='sub-desc'><p>The new double buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the <tt>capacity</tt> is a negative integer</p>\n</div></li></ul></div></div></div><div id='method-array' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-array' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-array' class='name expandable'>array</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the double array that backs this\n buffer&nbsp;&nbsp;(optional operation). ...</div><div class='long'><p>Returns the double array that backs this\n buffer&nbsp;&nbsp;<i>(optional operation)</i>.</p>\n\n<p> <p> Modifications to this buffer's content will cause the returned\n array's content to be modified, and vice versa.</p>\n\n<p> <p> Invoke the <a href=\"#!/api/java.nio.DoubleBuffer-method-hasArray\" rel=\"java.nio.DoubleBuffer-method-hasArray\" class=\"docClass\">hasArray</a> method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The array that backs this buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ReadOnlyBufferException\n          If this buffer is backed by an array but is read-only</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this buffer is not backed by an accessible array</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-array\" rel=\"java.nio.Buffer-method-array\" class=\"docClass\">java.nio.Buffer.array</a></p></div></div></div><div id='method-arrayOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-arrayOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-arrayOffset' class='name expandable'>arrayOffset</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the offset within this buffer's backing array of the first\n element of the buffer&nbsp;&nbsp;(optional operat...</div><div class='long'><p>Returns the offset within this buffer's backing array of the first\n element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>.</p>\n\n<p> <p> If this buffer is backed by an array then buffer position <i>p</i>\n corresponds to array index <i>p</i>&nbsp;+&nbsp;<tt>arrayOffset()</tt>.</p>\n\n<p> <p> Invoke the <a href=\"#!/api/java.nio.DoubleBuffer-method-hasArray\" rel=\"java.nio.DoubleBuffer-method-hasArray\" class=\"docClass\">hasArray</a> method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The offset within this buffer's array\n          of the first element of the buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ReadOnlyBufferException\n          If this buffer is backed by an array but is read-only</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this buffer is not backed by an accessible array</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-arrayOffset\" rel=\"java.nio.Buffer-method-arrayOffset\" class=\"docClass\">java.nio.Buffer.arrayOffset</a></p></div></div></div><div id='method-asReadOnlyBuffer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-asReadOnlyBuffer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-asReadOnlyBuffer' class='name expandable'>asReadOnlyBuffer</a>( <span class='pre'></span> ) : Object {java.nio.DoubleBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new, read-only double buffer that shares this buffer's\n content. ...</div><div class='long'><p>Creates a new, read-only double buffer that shares this buffer's\n content.</p>\n\n<p> <p> The content of the new buffer will be that of this buffer.  Changes\n to this buffer's content will be visible in the new buffer; the new\n buffer itself, however, will be read-only and will not allow the shared\n content to be modified.  The two buffers' position, limit, and mark\n values will be independent.</p>\n\n<p> <p> The new buffer's capacity, limit, position, and mark values will be\n identical to those of this buffer.</p>\n\n<p> <p> If this buffer is itself read-only then this method behaves in\n exactly the same way as the <a href=\"#!/api/java.nio.DoubleBuffer-method-duplicate\" rel=\"java.nio.DoubleBuffer-method-duplicate\" class=\"docClass\">duplicate</a> method.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.DoubleBuffer}</span><div class='sub-desc'><p>The new, read-only double buffer</p>\n</div></li></ul></div></div></div><div id='method-capacity' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.nio.Buffer' rel='java.nio.Buffer' class='defined-in docClass'>java.nio.Buffer</a><br/><a href='source/Buffer.html#java-nio-Buffer-method-capacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-capacity' class='name expandable'>capacity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this buffer's capacity. ...</div><div class='long'><p>Returns this buffer's capacity.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The capacity of this buffer</p>\n</div></li></ul></div></div></div><div id='method-clear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-clear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-clear' class='name expandable'>clear</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-clear\" rel=\"java.nio.Buffer-method-clear\" class=\"docClass\">java.nio.Buffer.clear</a></p></div></div></div><div id='method-compact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-compact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-compact' class='name expandable'>compact</a>( <span class='pre'></span> ) : Object {java.nio.DoubleBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Compacts this buffer&nbsp;&nbsp;(optional operation). ...</div><div class='long'><p>Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>.</p>\n\n<p> <p> The doubles between the buffer's current position and its limit,\n if any, are copied to the beginning of the buffer.  That is, the\n double at index <i>p</i>&nbsp;=&nbsp;<tt>position()</tt> is copied\n to index zero, the double at index <i>p</i>&nbsp;+&nbsp;1 is copied\n to index one, and so forth until the double at index\n <tt>limit()</tt>&nbsp;-&nbsp;1 is copied to index\n <i>n</i>&nbsp;=&nbsp;<tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>&nbsp;-&nbsp;<i>p</i>.\n The buffer's position is then set to <i>n+1</i> and its limit is set to\n its capacity.  The mark, if defined, is discarded.</p>\n\n<p> <p> The buffer's position is set to the number of doubles copied,\n rather than to zero, so that an invocation of this method can be\n followed immediately by an invocation of another relative <i>put</i>\n method. </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.DoubleBuffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ReadOnlyBufferException\n          If this buffer is read-only</p>\n</div></li></ul></div></div></div><div id='method-compareTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compares this buffer to another. ...</div><div class='long'><p>Compares this buffer to another.</p>\n\n<p> <p> Two double buffers are compared by comparing their sequences of\n remaining elements lexicographically, without regard to the starting\n position of each sequence within its corresponding buffer.</p>\n\n<p> Pairs of {@code double} elements are compared as if by invoking\n Double.compare(double,double), except that\n {@code -0.0} and {@code 0.0} are considered to be equal.\n {@code Double.NaN} is considered by this method to be equal\n to itself and greater than all other {@code double} values\n (including {@code Double.POSITIVE_INFINITY}).</p>\n\n<p> <p> A double buffer is not comparable to any other type of object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>A negative integer, zero, or a positive integer as this buffer\n          is less than, equal to, or greater than the given buffer</p>\n</div></li></ul></div></div></div><div id='method-duplicate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-duplicate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-duplicate' class='name expandable'>duplicate</a>( <span class='pre'></span> ) : Object {java.nio.DoubleBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new double buffer that shares this buffer's content. ...</div><div class='long'><p>Creates a new double buffer that shares this buffer's content.</p>\n\n<p> <p> The content of the new buffer will be that of this buffer.  Changes\n to this buffer's content will be visible in the new buffer, and vice\n versa; the two buffers' position, limit, and mark values will be\n independent.</p>\n\n<p> <p> The new buffer's capacity, limit, position, and mark values will be\n identical to those of this buffer.  The new buffer will be direct if,\n and only if, this buffer is direct, and it will be read-only if, and\n only if, this buffer is read-only.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.DoubleBuffer}</span><div class='sub-desc'><p>The new double buffer</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-equals' class='name expandable'>equals</a>( <span class='pre'>ob</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this buffer is equal to another object. ...</div><div class='long'><p>Tells whether or not this buffer is equal to another object.</p>\n\n<p> <p> Two double buffers are equal if, and only if,</p>\n\n<p> <ol></ol></p>\n\n<p>   <li><p> They have the same element type,  </p></li></p>\n\n<p>   <li><p> They have the same number of remaining elements, and\n   </p></li></p>\n\n<p>   <li><p> The two sequences of remaining elements, considered\n   independently of their starting positions, are pointwise equal.</p>\n\n<p>   This method considers two double elements {@code a} and {@code b}\n   to be equal if\n   {@code (a == b) || (Double.isNaN(a) &amp;&amp; Double.isNaN(b))}.\n   The values {@code -0.0} and {@code +0.0} are considered to be\n   equal, unlike Double.equals(Object).</p>\n\n<p>   </p></li></p>\n\n<p> </p>\n\n<p> <p> A double buffer is not equal to any other type of object.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ob</span> : Object {Object}<div class='sub-desc'><p>The object to which this buffer is to be compared</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, this buffer is equal to the\n           given object</p>\n</div></li></ul></div></div></div><div id='method-flip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-flip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-flip' class='name expandable'>flip</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-flip\" rel=\"java.nio.Buffer-method-flip\" class=\"docClass\">java.nio.Buffer.flip</a></p></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-get' class='name expandable'>get</a>( <span class='pre'>dst</span> ) : Object {java.nio.DoubleBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Relative bulk get method. ...</div><div class='long'><p>Relative bulk <i>get</i> method.</p>\n\n<p> <p> This method transfers doubles from this buffer into the given\n destination array.  An invocation of this method of the form\n <tt>src.get(a)</tt> behaves in exactly the same way as the invocation</p>\n\n<pre>     src.get(a, 0, a.length) </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dst</span> : Object {double[]}<div class='sub-desc'><p>The destination array</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.DoubleBuffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BufferUnderflowException\n          If there are fewer than <tt>length</tt> doubles\n          remaining in this buffer</p>\n</div></li></ul></div></div></div><div id='method-hasArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-hasArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-hasArray' class='name expandable'>hasArray</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this buffer is backed by an accessible double\n array. ...</div><div class='long'><p>Tells whether or not this buffer is backed by an accessible double\n array.</p>\n\n<p> <p> If this method returns <tt>true</tt> then the array\n and arrayOffset methods may safely be invoked.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, this buffer\n          is backed by an array and is not read-only</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-hasArray\" rel=\"java.nio.Buffer-method-hasArray\" class=\"docClass\">java.nio.Buffer.hasArray</a></p></div></div></div><div id='method-hasRemaining' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.nio.Buffer' rel='java.nio.Buffer' class='defined-in docClass'>java.nio.Buffer</a><br/><a href='source/Buffer.html#java-nio-Buffer-method-hasRemaining' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-hasRemaining' class='name expandable'>hasRemaining</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether there are any elements between the current position and\n the limit. ...</div><div class='long'><p>Tells whether there are any elements between the current position and\n the limit.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, there is at least one element\n          remaining in this buffer</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current hash code of this buffer. ...</div><div class='long'><p>Returns the current hash code of this buffer.</p>\n\n<p> <p> The hash code of a double buffer depends only upon its remaining\n elements; that is, upon the elements from <tt>position()</tt> up to, and\n including, the element at <tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>.</p>\n\n<p> <p> Because buffer hash codes are content-dependent, it is inadvisable\n to use buffers as keys in hash maps or similar data structures unless it\n is known that their contents will not change.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current hash code of this buffer</p>\n</div></li></ul></div></div></div><div id='method-isDirect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-isDirect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-isDirect' class='name expandable'>isDirect</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this double buffer is direct. ...</div><div class='long'><p>Tells whether or not this double buffer is direct.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, this buffer is direct</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-isDirect\" rel=\"java.nio.Buffer-method-isDirect\" class=\"docClass\">java.nio.Buffer.isDirect</a></p></div></div></div><div id='method-isReadOnly' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.nio.Buffer' rel='java.nio.Buffer' class='defined-in docClass'>java.nio.Buffer</a><br/><a href='source/Buffer.html#java-nio-Buffer-method-isReadOnly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-isReadOnly' class='name expandable'>isReadOnly</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this buffer is read-only. ...</div><div class='long'><p>Tells whether or not this buffer is read-only.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, this buffer is read-only</p>\n</div></li></ul></div></div></div><div id='method-limit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-limit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-limit' class='name expandable'>limit</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-limit\" rel=\"java.nio.Buffer-method-limit\" class=\"docClass\">java.nio.Buffer.limit</a></p></div></div></div><div id='method-mark' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-mark' class='name expandable'>mark</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-mark\" rel=\"java.nio.Buffer-method-mark\" class=\"docClass\">java.nio.Buffer.mark</a></p></div></div></div><div id='method-order' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-order' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-order' class='name expandable'>order</a>( <span class='pre'></span> ) : Object {java.nio.ByteOrder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves this buffer's byte order. ...</div><div class='long'><p>Retrieves this buffer's byte order.</p>\n\n<p> <p> The byte order of a double buffer created by allocation or by\n wrapping an existing <tt>double</tt> array is the <a href=\"#!/api/java.nio.ByteOrder-method-nativeOrder\" rel=\"java.nio.ByteOrder-method-nativeOrder\" class=\"docClass\">native order</a> of the underlying\n hardware.  The byte order of a double buffer created as a <a\n href=\"ByteBuffer.html#views\">view</a> of a byte buffer is that of the\n byte buffer at the moment that the view is created.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.ByteOrder}</span><div class='sub-desc'><p>This buffer's byte order</p>\n</div></li></ul></div></div></div><div id='method-position' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-position' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-position' class='name expandable'>position</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-position\" rel=\"java.nio.Buffer-method-position\" class=\"docClass\">java.nio.Buffer.position</a></p></div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-put' class='name expandable'>put</a>( <span class='pre'>src</span> ) : Object {java.nio.DoubleBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Relative bulk put method&nbsp;&nbsp;(optional operation). ...</div><div class='long'><p>Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>.</p>\n\n<p> <p> This method transfers the entire content of the given source\n double array into this buffer.  An invocation of this method of the\n form <tt>dst.put(a)</tt> behaves in exactly the same way as the\n invocation</p>\n\n<pre>     dst.put(a, 0, a.length) </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object {double[]}<div class='sub-desc'><p>The source array</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.DoubleBuffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BufferOverflowException\n          If there is insufficient space in this buffer</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ReadOnlyBufferException\n          If this buffer is read-only</p>\n</div></li></ul></div></div></div><div id='method-remaining' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.nio.Buffer' rel='java.nio.Buffer' class='defined-in docClass'>java.nio.Buffer</a><br/><a href='source/Buffer.html#java-nio-Buffer-method-remaining' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-remaining' class='name expandable'>remaining</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of elements between the current position and the\n limit. ...</div><div class='long'><p>Returns the number of elements between the current position and the\n limit.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of elements remaining in this buffer</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-reset\" rel=\"java.nio.Buffer-method-reset\" class=\"docClass\">java.nio.Buffer.reset</a></p></div></div></div><div id='method-rewind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-rewind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-rewind' class='name expandable'>rewind</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.nio.Buffer-method-rewind\" rel=\"java.nio.Buffer-method-rewind\" class=\"docClass\">java.nio.Buffer.rewind</a></p></div></div></div><div id='method-slice' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-slice' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-slice' class='name expandable'>slice</a>( <span class='pre'></span> ) : Object {java.nio.DoubleBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new double buffer whose content is a shared subsequence of\n this buffer's content. ...</div><div class='long'><p>Creates a new double buffer whose content is a shared subsequence of\n this buffer's content.</p>\n\n<p> <p> The content of the new buffer will start at this buffer's current\n position.  Changes to this buffer's content will be visible in the new\n buffer, and vice versa; the two buffers' position, limit, and mark\n values will be independent.</p>\n\n<p> <p> The new buffer's position will be zero, its capacity and its limit\n will be the number of doubles remaining in this buffer, and its mark\n will be undefined.  The new buffer will be direct if, and only if, this\n buffer is direct, and it will be read-only if, and only if, this buffer\n is read-only.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.DoubleBuffer}</span><div class='sub-desc'><p>The new double buffer</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string summarizing the state of this buffer. ...</div><div class='long'><p>Returns a string summarizing the state of this buffer.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>A summary string</p>\n</div></li></ul></div></div></div><div id='method-wrap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.DoubleBuffer'>java.nio.DoubleBuffer</span><br/><a href='source/DoubleBuffer.html#java-nio-DoubleBuffer-method-wrap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.DoubleBuffer-method-wrap' class='name expandable'>wrap</a>( <span class='pre'>array</span> ) : Object {java.nio.DoubleBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Wraps a double array into a buffer. ...</div><div class='long'><p>Wraps a double array into a buffer.</p>\n\n<p> <p> The new buffer will be backed by the given double array;\n that is, modifications to the buffer will cause the array to be modified\n and vice versa.  The new buffer's capacity and limit will be\n <tt>array.length</tt>, its position will be zero, and its mark will be\n undefined.  Its <a href=\"#!/api/java.nio.DoubleBuffer-method-array\" rel=\"java.nio.DoubleBuffer-method-array\" class=\"docClass\">backing array</a> will be the\n given array, and its <a href=\"#!/api/java.nio.DoubleBuffer-method-arrayOffset\" rel=\"java.nio.DoubleBuffer-method-arrayOffset\" class=\"docClass\">array offset&gt;</a> will\n be zero.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>array</span> : Object {double[]}<div class='sub-desc'><p>The array that will back this buffer</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.DoubleBuffer}</span><div class='sub-desc'><p>The new double buffer</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});