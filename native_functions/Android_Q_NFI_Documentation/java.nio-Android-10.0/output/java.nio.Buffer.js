Ext.data.JsonP.java_nio_Buffer({"tagname":"class","name":"java.nio.Buffer","autodetected":{},"files":[{"filename":"Buffer.js","href":"Buffer.html#java-nio-Buffer"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"array","tagname":"method","owner":"java.nio.Buffer","id":"method-array","meta":{}},{"name":"arrayOffset","tagname":"method","owner":"java.nio.Buffer","id":"method-arrayOffset","meta":{}},{"name":"capacity","tagname":"method","owner":"java.nio.Buffer","id":"method-capacity","meta":{}},{"name":"clear","tagname":"method","owner":"java.nio.Buffer","id":"method-clear","meta":{}},{"name":"flip","tagname":"method","owner":"java.nio.Buffer","id":"method-flip","meta":{}},{"name":"hasArray","tagname":"method","owner":"java.nio.Buffer","id":"method-hasArray","meta":{}},{"name":"hasRemaining","tagname":"method","owner":"java.nio.Buffer","id":"method-hasRemaining","meta":{}},{"name":"isDirect","tagname":"method","owner":"java.nio.Buffer","id":"method-isDirect","meta":{}},{"name":"isReadOnly","tagname":"method","owner":"java.nio.Buffer","id":"method-isReadOnly","meta":{}},{"name":"limit","tagname":"method","owner":"java.nio.Buffer","id":"method-limit","meta":{}},{"name":"mark","tagname":"method","owner":"java.nio.Buffer","id":"method-mark","meta":{}},{"name":"position","tagname":"method","owner":"java.nio.Buffer","id":"method-position","meta":{}},{"name":"remaining","tagname":"method","owner":"java.nio.Buffer","id":"method-remaining","meta":{}},{"name":"reset","tagname":"method","owner":"java.nio.Buffer","id":"method-reset","meta":{}},{"name":"rewind","tagname":"method","owner":"java.nio.Buffer","id":"method-rewind","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.Buffer","short_doc":"A container for data of a specific primitive type. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.nio.ByteBuffer","java.nio.CharBuffer","java.nio.DoubleBuffer","java.nio.FloatBuffer","java.nio.IntBuffer","java.nio.LongBuffer","java.nio.ShortBuffer"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.Buffer</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.nio.ByteBuffer' rel='java.nio.ByteBuffer' class='docClass'>java.nio.ByteBuffer</a></div><div class='dependency'><a href='#!/api/java.nio.CharBuffer' rel='java.nio.CharBuffer' class='docClass'>java.nio.CharBuffer</a></div><div class='dependency'><a href='#!/api/java.nio.DoubleBuffer' rel='java.nio.DoubleBuffer' class='docClass'>java.nio.DoubleBuffer</a></div><div class='dependency'><a href='#!/api/java.nio.FloatBuffer' rel='java.nio.FloatBuffer' class='docClass'>java.nio.FloatBuffer</a></div><div class='dependency'><a href='#!/api/java.nio.IntBuffer' rel='java.nio.IntBuffer' class='docClass'>java.nio.IntBuffer</a></div><div class='dependency'><a href='#!/api/java.nio.LongBuffer' rel='java.nio.LongBuffer' class='docClass'>java.nio.LongBuffer</a></div><div class='dependency'><a href='#!/api/java.nio.ShortBuffer' rel='java.nio.ShortBuffer' class='docClass'>java.nio.ShortBuffer</a></div><h4>Files</h4><div class='dependency'><a href='source/Buffer.html#java-nio-Buffer' target='_blank'>Buffer.js</a></div></pre><div class='doc-contents'><p>A container for data of a specific primitive type.</p>\n\n<p> <p> A buffer is a linear, finite sequence of elements of a specific\n primitive type.  Aside from its content, the essential properties of a\n buffer are its capacity, limit, and position: </p></p>\n\n<p> <blockquote></blockquote></p>\n\n<p>   <p> A buffer's <i>capacity</i> is the number of elements it contains.  The\n   capacity of a buffer is never negative and never changes.  </p></p>\n\n<p>   <p> A buffer's <i>limit</i> is the index of the first element that should\n   not be read or written.  A buffer's limit is never negative and is never\n   greater than its capacity.  </p></p>\n\n<p>   <p> A buffer's <i>position</i> is the index of the next element to be\n   read or written.  A buffer's position is never negative and is never\n   greater than its limit.  </p></p>\n\n<p> </p>\n\n<p> <p> There is one subclass of this class for each non-boolean primitive type.</p>\n\n<p> <h2> Transferring data </h2></p>\n\n<p> <p> Each subclass of this class defines two categories of <i>get</i> and\n <i>put</i> operations: </p></p>\n\n<p> <blockquote></blockquote></p>\n\n<p>   <p> <i>Relative</i> operations read or write one or more elements starting\n   at the current position and then increment the position by the number of\n   elements transferred.  If the requested transfer exceeds the limit then a\n   relative <i>get</i> operation throws a <a href=\"#!/api/java.nio.BufferUnderflowException\" rel=\"java.nio.BufferUnderflowException\" class=\"docClass\">java.nio.BufferUnderflowException</a>\n   and a relative <i>put</i> operation throws a <a href=\"#!/api/java.nio.BufferOverflowException\" rel=\"java.nio.BufferOverflowException\" class=\"docClass\">java.nio.BufferOverflowException</a>; in either case, no data is transferred.  </p></p>\n\n<p>   <p> <i>Absolute</i> operations take an explicit element index and do not\n   affect the position.  Absolute <i>get</i> and <i>put</i> operations throw\n   an IndexOutOfBoundsException if the index argument exceeds the\n   limit.  </p></p>\n\n<p> </p>\n\n<p> <p> Data may also, of course, be transferred in to or out of a buffer by the\n I/O operations of an appropriate channel, which are always relative to the\n current position.</p>\n\n<p> <h2> Marking and resetting </h2></p>\n\n<p> <p> A buffer's <i>mark</i> is the index to which its position will be reset\n when the <a href=\"#!/api/java.nio.Buffer-method-reset\" rel=\"java.nio.Buffer-method-reset\" class=\"docClass\">reset</a> method is invoked.  The mark is not always\n defined, but when it is defined it is never negative and is never greater\n than the position.  If the mark is defined then it is discarded when the\n position or the limit is adjusted to a value smaller than the mark.  If the\n mark is not defined then invoking the <a href=\"#!/api/java.nio.Buffer-method-reset\" rel=\"java.nio.Buffer-method-reset\" class=\"docClass\">reset</a> method causes an\n <a href=\"#!/api/java.nio.InvalidMarkException\" rel=\"java.nio.InvalidMarkException\" class=\"docClass\">java.nio.InvalidMarkException</a> to be thrown.</p>\n\n<p> <h2> Invariants </h2></p>\n\n<p> <p> The following invariant holds for the mark, position, limit, and\n capacity values:</p>\n\n<p> <blockquote>\n     <tt>0</tt> <tt>&lt;=</tt>\n     <i>mark</i> <tt>&lt;=</tt>\n     <i>position</i> <tt>&lt;=</tt>\n     <i>limit</i> <tt>&lt;=</tt>\n     <i>capacity</i>\n </blockquote></p>\n\n<p> <p> A newly-created buffer always has a position of zero and a mark that is\n undefined.  The initial limit may be zero, or it may be some other value\n that depends upon the type of the buffer and the manner in which it is\n constructed.  Each element of a newly-allocated buffer is initialized\n to zero.</p>\n\n<p> <h2> Clearing, flipping, and rewinding </h2></p>\n\n<p> <p> In addition to methods for accessing the position, limit, and capacity\n values and for marking and resetting, this class also defines the following\n operations upon buffers:</p>\n\n<p> <ul></ul></p>\n\n<p>   <li><p> <a href=\"#!/api/java.nio.Buffer-method-clear\" rel=\"java.nio.Buffer-method-clear\" class=\"docClass\">clear</a> makes a buffer ready for a new sequence of\n   channel-read or relative <i>put</i> operations: It sets the limit to the\n   capacity and the position to zero.  </p></li></p>\n\n<p>   <li><p> <a href=\"#!/api/java.nio.Buffer-method-flip\" rel=\"java.nio.Buffer-method-flip\" class=\"docClass\">flip</a> makes a buffer ready for a new sequence of\n   channel-write or relative <i>get</i> operations: It sets the limit to the\n   current position and then sets the position to zero.  </p></li></p>\n\n<p>   <li><p> <a href=\"#!/api/java.nio.Buffer-method-rewind\" rel=\"java.nio.Buffer-method-rewind\" class=\"docClass\">rewind</a> makes a buffer ready for re-reading the data that\n   it already contains: It leaves the limit unchanged and sets the position\n   to zero.  </p></li></p>\n\n<p> </p>\n\n<p> <h2> Read-only buffers </h2></p>\n\n<p> <p> Every buffer is readable, but not every buffer is writable.  The\n mutation methods of each buffer class are specified as <i>optional\n operations</i> that will throw a <a href=\"#!/api/java.nio.ReadOnlyBufferException\" rel=\"java.nio.ReadOnlyBufferException\" class=\"docClass\">java.nio.ReadOnlyBufferException</a> when\n invoked upon a read-only buffer.  A read-only buffer does not allow its\n content to be changed, but its mark, position, and limit values are mutable.\n Whether or not a buffer is read-only may be determined by invoking its\n <a href=\"#!/api/java.nio.Buffer-method-isReadOnly\" rel=\"java.nio.Buffer-method-isReadOnly\" class=\"docClass\">isReadOnly</a> method.</p>\n\n<p> <h2> Thread safety </h2></p>\n\n<p> <p> Buffers are not safe for use by multiple concurrent threads.  If a\n buffer is to be used by more than one thread then access to the buffer\n should be controlled by appropriate synchronization.</p>\n\n<p> <h2> Invocation chaining </h2></p>\n\n<p> <p> Methods in this class that do not otherwise have a value to return are\n specified to return the buffer upon which they are invoked.  This allows\n method invocations to be chained; for example, the sequence of statements</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> b.flip();\n b.position(23);\n b.limit(42);</pre>\n\n\n<p></p>\n\n<p> can be replaced by the single, more compact statement</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> b.flip().position(23).limit(42);</pre>\n\n\n<p></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-array' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-array' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-array' class='name expandable'>array</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the array that backs this\n buffer&nbsp;&nbsp;(optional operation). ...</div><div class='long'><p>Returns the array that backs this\n buffer&nbsp;&nbsp;<i>(optional operation)</i>.</p>\n\n<p> <p> This method is intended to allow array-backed buffers to be\n passed to native code more efficiently. Concrete subclasses\n provide more strongly-typed return values for this method.</p>\n\n<p> <p> Modifications to this buffer's content will cause the returned\n array's content to be modified, and vice versa.</p>\n\n<p> <p> Invoke the <a href=\"#!/api/java.nio.Buffer-method-hasArray\" rel=\"java.nio.Buffer-method-hasArray\" class=\"docClass\">hasArray</a> method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  </p></p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>The array that backs this buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ReadOnlyBufferException\n          If this buffer is backed by an array but is read-only</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this buffer is not backed by an accessible array</p>\n</div></li></ul></div></div></div><div id='method-arrayOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-arrayOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-arrayOffset' class='name expandable'>arrayOffset</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the offset within this buffer's backing array of the first\n element of the buffer&nbsp;&nbsp;(optional operat...</div><div class='long'><p>Returns the offset within this buffer's backing array of the first\n element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>.</p>\n\n<p> <p> If this buffer is backed by an array then buffer position <i>p</i>\n corresponds to array index <i>p</i>&nbsp;+&nbsp;<tt>arrayOffset()</tt>.</p>\n\n<p> <p> Invoke the <a href=\"#!/api/java.nio.Buffer-method-hasArray\" rel=\"java.nio.Buffer-method-hasArray\" class=\"docClass\">hasArray</a> method before invoking this\n method in order to ensure that this buffer has an accessible backing\n array.  </p></p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The offset within this buffer's array\n          of the first element of the buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ReadOnlyBufferException\n          If this buffer is backed by an array but is read-only</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this buffer is not backed by an accessible array</p>\n</div></li></ul></div></div></div><div id='method-capacity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-capacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-capacity' class='name expandable'>capacity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this buffer's capacity. ...</div><div class='long'><p>Returns this buffer's capacity.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The capacity of this buffer</p>\n</div></li></ul></div></div></div><div id='method-clear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-clear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-clear' class='name expandable'>clear</a>( <span class='pre'></span> ) : Object {java.nio.Buffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Clears this buffer. ...</div><div class='long'><p>Clears this buffer.  The position is set to zero, the limit is set to\n the capacity, and the mark is discarded.</p>\n\n<p> <p> Invoke this method before using a sequence of channel-read or\n <i>put</i> operations to fill this buffer.  For example:</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> buf.clear();     // Prepare buffer for reading\n in.read(buf);    // Read data</pre>\n\n\n<p></p>\n\n<p> <p> This method does not actually erase the data in the buffer, but it\n is named as if it did because it will most often be used in situations\n in which that might as well be the case. </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.Buffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul></div></div></div><div id='method-flip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-flip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-flip' class='name expandable'>flip</a>( <span class='pre'></span> ) : Object {java.nio.Buffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Flips this buffer. ...</div><div class='long'><p>Flips this buffer.  The limit is set to the current position and then\n the position is set to zero.  If the mark is defined then it is\n discarded.</p>\n\n<p> <p> After a sequence of channel-read or <i>put</i> operations, invoke\n this method to prepare for a sequence of channel-write or relative\n <i>get</i> operations.  For example:</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> buf.put(magic);    // Prepend header\n in.read(buf);      // Read data into rest of buffer\n buf.flip();        // Flip buffer\n out.write(buf);    // Write header + data to channel</pre>\n\n\n<p></p>\n\n<p> <p> This method is often used in conjunction with the <a href=\"#!/api/java.nio.ByteBuffer-method-compact\" rel=\"java.nio.ByteBuffer-method-compact\" class=\"docClass\">compact</a> method when transferring data from\n one place to another.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.Buffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul></div></div></div><div id='method-hasArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-hasArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-hasArray' class='name expandable'>hasArray</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this buffer is backed by an accessible\n array. ...</div><div class='long'><p>Tells whether or not this buffer is backed by an accessible\n array.</p>\n\n<p> <p> If this method returns <tt>true</tt> then the array\n and arrayOffset methods may safely be invoked.\n </p></p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, this buffer\n          is backed by an array and is not read-only</p>\n</div></li></ul></div></div></div><div id='method-hasRemaining' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-hasRemaining' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-hasRemaining' class='name expandable'>hasRemaining</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether there are any elements between the current position and\n the limit. ...</div><div class='long'><p>Tells whether there are any elements between the current position and\n the limit.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, there is at least one element\n          remaining in this buffer</p>\n</div></li></ul></div></div></div><div id='method-isDirect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-isDirect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-isDirect' class='name expandable'>isDirect</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this buffer is\n direct. ...</div><div class='long'><p>Tells whether or not this buffer is\n <a href=\"ByteBuffer.html#direct\"><i>direct</i></a>.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, this buffer is direct</p>\n</div></li></ul></div></div></div><div id='method-isReadOnly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-isReadOnly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-isReadOnly' class='name expandable'>isReadOnly</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this buffer is read-only. ...</div><div class='long'><p>Tells whether or not this buffer is read-only.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if, and only if, this buffer is read-only</p>\n</div></li></ul></div></div></div><div id='method-limit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-limit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-limit' class='name expandable'>limit</a>( <span class='pre'>newLimit</span> ) : Object {java.nio.Buffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets this buffer's limit. ...</div><div class='long'><p>Sets this buffer's limit.  If the position is larger than the new limit\n then it is set to the new limit.  If the mark is defined and larger than\n the new limit then it is discarded.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newLimit</span> : Number<div class='sub-desc'><p>The new limit value; must be non-negative\n         and no larger than this buffer's capacity</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.Buffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the preconditions on <tt>newLimit</tt> do not hold</p>\n</div></li></ul></div></div></div><div id='method-mark' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-mark' class='name expandable'>mark</a>( <span class='pre'></span> ) : Object {java.nio.Buffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets this buffer's mark at its position. ...</div><div class='long'><p>Sets this buffer's mark at its position.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.Buffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul></div></div></div><div id='method-position' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-position' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-position' class='name expandable'>position</a>( <span class='pre'>newPosition</span> ) : Object {java.nio.Buffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets this buffer's position. ...</div><div class='long'><p>Sets this buffer's position.  If the mark is defined and larger than the\n new position then it is discarded.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newPosition</span> : Number<div class='sub-desc'><p>The new position value; must be non-negative\n         and no larger than the current limit</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.Buffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the preconditions on <tt>newPosition</tt> do not hold</p>\n</div></li></ul></div></div></div><div id='method-remaining' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-remaining' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-remaining' class='name expandable'>remaining</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of elements between the current position and the\n limit. ...</div><div class='long'><p>Returns the number of elements between the current position and the\n limit.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of elements remaining in this buffer</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> ) : Object {java.nio.Buffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets this buffer's position to the previously-marked position. ...</div><div class='long'><p>Resets this buffer's position to the previously-marked position.</p>\n\n<p> <p> Invoking this method neither changes nor discards the mark's\n value. </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.Buffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidMarkException\n          If the mark has not been set</p>\n</div></li></ul></div></div></div><div id='method-rewind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.Buffer'>java.nio.Buffer</span><br/><a href='source/Buffer.html#java-nio-Buffer-method-rewind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.Buffer-method-rewind' class='name expandable'>rewind</a>( <span class='pre'></span> ) : Object {java.nio.Buffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Rewinds this buffer. ...</div><div class='long'><p>Rewinds this buffer.  The position is set to zero and the mark is\n discarded.</p>\n\n<p> <p> Invoke this method before a sequence of channel-write or <i>get</i>\n operations, assuming that the limit has already been set\n appropriately.  For example:</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> out.write(buf);    // Write remaining data\n buf.rewind();      // Rewind buffer\n buf.get(array);    // Copy data into array</pre>\n\n\n<p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.Buffer}</span><div class='sub-desc'><p>This buffer</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});