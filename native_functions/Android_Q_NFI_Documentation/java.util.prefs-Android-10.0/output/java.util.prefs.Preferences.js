Ext.data.JsonP.java_util_prefs_Preferences({"tagname":"class","name":"java.util.prefs.Preferences","autodetected":{},"files":[{"filename":"Preferences.js","href":"Preferences.html#java-util-prefs-Preferences"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Josh Bloch","email":null}],"since":"1.4","members":[{"name":"MAX_KEY_LENGTH","tagname":"property","owner":"java.util.prefs.Preferences","id":"property-MAX_KEY_LENGTH","meta":{}},{"name":"MAX_NAME_LENGTH","tagname":"property","owner":"java.util.prefs.Preferences","id":"property-MAX_NAME_LENGTH","meta":{}},{"name":"MAX_VALUE_LENGTH","tagname":"property","owner":"java.util.prefs.Preferences","id":"property-MAX_VALUE_LENGTH","meta":{}},{"name":"absolutePath","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-absolutePath","meta":{}},{"name":"addNodeChangeListener","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-addNodeChangeListener","meta":{}},{"name":"addPreferenceChangeListener","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-addPreferenceChangeListener","meta":{}},{"name":"childrenNames","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-childrenNames","meta":{}},{"name":"clear","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-clear","meta":{}},{"name":"exportNode","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-exportNode","meta":{}},{"name":"exportSubtree","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-exportSubtree","meta":{}},{"name":"flush","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-flush","meta":{}},{"name":"get","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-get","meta":{}},{"name":"getBoolean","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-getBoolean","meta":{}},{"name":"getByteArray","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-getByteArray","meta":{}},{"name":"getDouble","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-getDouble","meta":{}},{"name":"getFloat","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-getFloat","meta":{}},{"name":"getInt","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-getInt","meta":{}},{"name":"getLong","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-getLong","meta":{}},{"name":"importPreferences","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-importPreferences","meta":{}},{"name":"isUserNode","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-isUserNode","meta":{}},{"name":"keys","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-keys","meta":{}},{"name":"name","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-name","meta":{}},{"name":"node","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-node","meta":{}},{"name":"nodeExists","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-nodeExists","meta":{}},{"name":"parent","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-parent","meta":{}},{"name":"put","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-put","meta":{}},{"name":"putBoolean","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-putBoolean","meta":{}},{"name":"putByteArray","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-putByteArray","meta":{}},{"name":"putDouble","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-putDouble","meta":{}},{"name":"putFloat","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-putFloat","meta":{}},{"name":"putInt","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-putInt","meta":{}},{"name":"putLong","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-putLong","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-remove","meta":{}},{"name":"removeNode","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-removeNode","meta":{}},{"name":"removeNodeChangeListener","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-removeNodeChangeListener","meta":{}},{"name":"removePreferenceChangeListener","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-removePreferenceChangeListener","meta":{}},{"name":"sync","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-sync","meta":{}},{"name":"systemNodeForPackage","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-systemNodeForPackage","meta":{}},{"name":"systemRoot","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-systemRoot","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-toString","meta":{}},{"name":"userNodeForPackage","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-userNodeForPackage","meta":{}},{"name":"userRoot","tagname":"method","owner":"java.util.prefs.Preferences","id":"method-userRoot","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.prefs.Preferences","short_doc":"A node in a hierarchical collection of preference data. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.util.prefs.AbstractPreferences"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.prefs.Preferences</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.util.prefs.AbstractPreferences' rel='java.util.prefs.AbstractPreferences' class='docClass'>java.util.prefs.AbstractPreferences</a></div><h4>Files</h4><div class='dependency'><a href='source/Preferences.html#java-util-prefs-Preferences' target='_blank'>Preferences.js</a></div></pre><div class='doc-contents'><p>A node in a hierarchical collection of preference data.  This class\n allows applications to store and retrieve user and system\n preference and configuration data.  This data is stored\n persistently in an implementation-dependent backing store.  Typical\n implementations include flat files, OS-specific registries,\n directory servers and SQL databases.  The user of this class needn't\n be concerned with details of the backing store.</p>\n\n<p> <p>There are two separate trees of preference nodes, one for user\n preferences and one for system preferences.  Each user has a separate user\n preference tree, and all users in a given system share the same system\n preference tree.  The precise description of \"user\" and \"system\" will vary\n from implementation to implementation.  Typical information stored in the\n user preference tree might include font choice, color choice, or preferred\n window location and size for a particular application.  Typical information\n stored in the system preference tree might include installation\n configuration data for an application.</p>\n\n<p> <p>Nodes in a preference tree are named in a similar fashion to\n directories in a hierarchical file system.   Every node in a preference\n tree has a <i>node name</i> (which is not necessarily unique),\n a unique <i>absolute path name</i>, and a path name <i>relative</i> to each\n ancestor including itself.</p>\n\n<p> <p>The root node has a node name of the empty string (\"\").  Every other\n node has an arbitrary node name, specified at the time it is created.  The\n only restrictions on this name are that it cannot be the empty string, and\n it cannot contain the slash character ('/').</p>\n\n<p> <p>The root node has an absolute path name of <tt>\"/\"</tt>.  Children of\n the root node have absolute path names of <tt>\"/\" + </tt><i>&lt;node\n name&gt;</i>.  All other nodes have absolute path names of <i>&lt;parent's\n absolute path name&gt;</i><tt> + \"/\" + </tt><i>&lt;node name&gt;</i>.\n Note that all absolute path names begin with the slash character.</p>\n\n<p> <p>A node <i>n</i>'s path name relative to its ancestor <i>a</i>\n is simply the string that must be appended to <i>a</i>'s absolute path name\n in order to form <i>n</i>'s absolute path name, with the initial slash\n character (if present) removed.  Note that:\n <ul>\n <li>No relative path names begin with the slash character.\n <li>Every node's path name relative to itself is the empty string.\n <li>Every node's path name relative to its parent is its node name (except\n for the root node, which does not have a parent).\n <li>Every node's path name relative to the root is its absolute path name\n with the initial slash character removed.\n </li></li></li></li></ul></p>\n\n<p> <p>Note finally that:\n <ul>\n <li>No path name contains multiple consecutive slash characters.\n <li>No path name with the exception of the root's absolute path name\n ends in the slash character.\n <li>Any string that conforms to these two rules is a valid path name.\n </li></li></li></ul></p>\n\n<p> <p>All of the methods that modify preferences data are permitted to operate\n asynchronously; they may return immediately, and changes will eventually\n propagate to the persistent backing store with an implementation-dependent\n delay.  The <tt>flush</tt> method may be used to synchronously force\n updates to the backing store.  Normal termination of the Java Virtual\n Machine will <i>not</i> result in the loss of pending updates -- an explicit\n <tt>flush</tt> invocation is <i>not</i> required upon termination to ensure\n that pending updates are made persistent.</p>\n\n<p> <p>All of the methods that read preferences from a <tt>Preferences</tt>\n object require the invoker to provide a default value.  The default value is\n returned if no value has been previously set <i>or if the backing store is\n unavailable</i>.  The intent is to allow applications to operate, albeit\n with slightly degraded functionality, even if the backing store becomes\n unavailable.  Several methods, like <tt>flush</tt>, have semantics that\n prevent them from operating if the backing store is unavailable.  Ordinary\n applications should have no need to invoke any of these methods, which can\n be identified by the fact that they are declared to throw <a href=\"#!/api/java.util.prefs.BackingStoreException\" rel=\"java.util.prefs.BackingStoreException\" class=\"docClass\">java.util.prefs.BackingStoreException</a>.</p>\n\n<p> <p>The methods in this class may be invoked concurrently by multiple threads\n in a single JVM without the need for external synchronization, and the\n results will be equivalent to some serial execution.  If this class is used\n concurrently <i>by multiple JVMs</i> that store their preference data in\n the same backing store, the data store will not be corrupted, but no\n other guarantees are made concerning the consistency of the preference\n data.</p>\n\n<p> <p>This class contains an export/import facility, allowing preferences\n to be \"exported\" to an XML document, and XML documents representing\n preferences to be \"imported\" back into the system.  This facility\n may be used to back up all or part of a preference tree, and\n subsequently restore from the backup.</p>\n\n<p> <p>The XML document has the following DOCTYPE declaration:\n <pre>{@code\n &lt;!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">\n }</pre>\n Note that the system URI (http://java.sun.com/dtd/preferences.dtd) is\n <i>not</i> accessed when exporting or importing preferences; it merely\n serves as a string to uniquely identify the DTD, which is:\n <pre>{@code\n    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></pre></p>\n\n<pre><code>&lt;!-- DTD for a Preferences tree. --&gt;\n\n&lt;!-- The preferences element is at the root of an XML document\n     representing a Preferences tree. --&gt;\n&lt;!ELEMENT preferences (root)&gt;\n\n&lt;!-- The preferences element contains an optional version attribute,\n      which specifies version of DTD. --&gt;\n&lt;!ATTLIST preferences EXTERNAL_XML_VERSION CDATA \"0.0\" &gt;\n\n&lt;!-- The root element has a map representing the root's preferences\n     (if any), and one node for each child of the root (if any). --&gt;\n&lt;!ELEMENT root (map, node*) &gt;\n\n&lt;!-- Additionally, the root contains a type attribute, which\n     specifies whether it's the system or user root. --&gt;\n&lt;!ATTLIST root\n          type (system|user) #REQUIRED &gt;\n\n&lt;!-- Each node has a map representing its preferences (if any),\n     and one node for each child (if any). --&gt;\n&lt;!ELEMENT node (map, node*) &gt;\n\n&lt;!-- Additionally, each node has a name attribute --&gt;\n&lt;!ATTLIST node\n          name CDATA #REQUIRED &gt;\n\n&lt;!-- A map represents the preferences stored at a node (if any). --&gt;\n&lt;!ELEMENT map (entry*) &gt;\n\n&lt;!-- An entry represents a single preference, which is simply\n      a key-value pair. --&gt;\n&lt;!ELEMENT entry EMPTY &gt;\n&lt;!ATTLIST entry\n          key   CDATA #REQUIRED\n          value CDATA #REQUIRED &gt;\n</code></pre>\n\n<p> }</p>\n\n<p> Every <tt>Preferences</tt> implementation must have an associated <a href=\"#!/api/java.util.prefs.PreferencesFactory\" rel=\"java.util.prefs.PreferencesFactory\" class=\"docClass\">java.util.prefs.PreferencesFactory</a> implementation.  Every Java(TM) SE implementation must provide\n some means of specifying which <tt>PreferencesFactory</tt> implementation\n is used to generate the root preferences nodes.  This allows the\n administrator to replace the default preferences implementation with an\n alternative implementation.</p>\n\n<p> <p>Implementation note: In Sun's JRE, the <tt>PreferencesFactory</tt>\n implementation is located as follows:</p>\n\n<p> <ol></ol></p>\n\n<p> <li><p>If the system property\n <tt><a href=\"#!/api/java.util.prefs.PreferencesFactory\" rel=\"java.util.prefs.PreferencesFactory\" class=\"docClass\">java.util.prefs.PreferencesFactory</a></tt> is defined, then it is\n taken to be the fully-qualified name of a class implementing the\n <tt>PreferencesFactory</tt> interface.  The class is loaded and\n instantiated; if this process fails then an unspecified error is\n thrown.</p></li></p>\n\n<p> <li><p> If a <tt>PreferencesFactory</tt> implementation class file\n has been installed in a jar file that is visible to the\n system class loader,\n and that jar file contains a provider-configuration file named\n <tt><a href=\"#!/api/java.util.prefs.PreferencesFactory\" rel=\"java.util.prefs.PreferencesFactory\" class=\"docClass\">java.util.prefs.PreferencesFactory</a></tt> in the resource\n directory <tt>META-INF/services</tt>, then the first class name\n specified in that file is taken.  If more than one such jar file is\n provided, the first one found will be used.  The class is loaded\n and instantiated; if this process fails then an unspecified error\n is thrown.  </p></li></p>\n\n<p> <li><p>Finally, if neither the above-mentioned system property nor\n an extension jar file is provided, then the system-wide default\n <tt>PreferencesFactory</tt> implementation for the underlying\n platform is loaded and instantiated.</p></li></p>\n\n<p> </p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-MAX_KEY_LENGTH' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-property-MAX_KEY_LENGTH' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-property-MAX_KEY_LENGTH' class='name expandable'>MAX_KEY_LENGTH</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Maximum length of string allowed as a key (80 characters). ...</div><div class='long'><p>Maximum length of string allowed as a key (80 characters).</p>\n<p>Defaults to: <code>&quot;80&quot;</code></p></div></div></div><div id='property-MAX_NAME_LENGTH' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-property-MAX_NAME_LENGTH' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-property-MAX_NAME_LENGTH' class='name expandable'>MAX_NAME_LENGTH</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Maximum length of a node name (80 characters). ...</div><div class='long'><p>Maximum length of a node name (80 characters).</p>\n<p>Defaults to: <code>&quot;80&quot;</code></p></div></div></div><div id='property-MAX_VALUE_LENGTH' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-property-MAX_VALUE_LENGTH' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-property-MAX_VALUE_LENGTH' class='name expandable'>MAX_VALUE_LENGTH</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Maximum length of string allowed as a value (8192 characters). ...</div><div class='long'><p>Maximum length of string allowed as a value (8192 characters).</p>\n<p>Defaults to: <code>&quot;8192&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-absolutePath' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-absolutePath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-absolutePath' class='name expandable'>absolutePath</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this preference node's absolute path name. ...</div><div class='long'><p>Returns this preference node's absolute path name.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>this preference node's absolute path name.</p>\n</div></li></ul></div></div></div><div id='method-addNodeChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-addNodeChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-addNodeChangeListener' class='name expandable'>addNodeChangeListener</a>( <span class='pre'>ncl</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers the specified listener to receive node change events\n for this node. ...</div><div class='long'><p>Registers the specified listener to receive <i>node change events</i>\n for this node.  A node change event is generated when a child node is\n added to or removed from this node.  (A single <a href=\"#!/api/java.util.prefs.Preferences-method-removeNode\" rel=\"java.util.prefs.Preferences-method-removeNode\" class=\"docClass\">removeNode</a>()\n invocation results in multiple <i>node change events</i>, one for every\n node in the subtree rooted at the removed node.)</p>\n\n<p> <p>Events are only guaranteed for changes made within the same JVM\n as the registered listener, though some implementations may generate\n events for changes made outside this JVM.  Events may be generated\n before the changes have become permanent.  Events are not generated\n when indirect descendants of this node are added or removed; a\n caller desiring such events must register with each descendant.</p>\n\n<p> <p>Few guarantees can be made regarding node creation.  Because nodes\n are created implicitly upon access, it may not be feasible for an\n implementation to determine whether a child node existed in the backing\n store prior to access (for example, because the backing store is\n unreachable or cached information is out of date).  Under these\n circumstances, implementations are neither required to generate node\n change events nor prohibited from doing so.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ncl</span> : Object {NodeChangeListener}<div class='sub-desc'><p>The <tt>NodeChangeListener</tt> to add.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>ncl</tt> is null.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-removeNodeChangeListener\" rel=\"java.util.prefs.Preferences-method-removeNodeChangeListener\" class=\"docClass\">removeNodeChangeListener</a>(NodeChangeListener)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-addPreferenceChangeListener\" rel=\"java.util.prefs.Preferences-method-addPreferenceChangeListener\" class=\"docClass\">addPreferenceChangeListener</a>(PreferenceChangeListener)</p>\n</div></li></ul></div></div></div><div id='method-addPreferenceChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-addPreferenceChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-addPreferenceChangeListener' class='name expandable'>addPreferenceChangeListener</a>( <span class='pre'>pcl</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers the specified listener to receive preference change\n events for this preference node. ...</div><div class='long'><p>Registers the specified listener to receive <i>preference change\n events</i> for this preference node.  A preference change event is\n generated when a preference is added to this node, removed from this\n node, or when the value associated with a preference is changed.\n (Preference change events are <i>not</i> generated by the <a href=\"#!/api/java.util.prefs.Preferences-method-removeNode\" rel=\"java.util.prefs.Preferences-method-removeNode\" class=\"docClass\">removeNode</a>() method, which generates a <i>node change event</i>.\n Preference change events <i>are</i> generated by the <tt>clear</tt>\n method.)</p>\n\n<p> <p>Events are only guaranteed for changes made within the same JVM\n as the registered listener, though some implementations may generate\n events for changes made outside this JVM.  Events may be generated\n before the changes have been made persistent.  Events are not generated\n when preferences are modified in descendants of this node; a caller\n desiring such events must register with each descendant.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pcl</span> : Object {PreferenceChangeListener}<div class='sub-desc'><p>The preference change listener to add.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>pcl</tt> is null.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-removePreferenceChangeListener\" rel=\"java.util.prefs.Preferences-method-removePreferenceChangeListener\" class=\"docClass\">removePreferenceChangeListener</a>(PreferenceChangeListener)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-addNodeChangeListener\" rel=\"java.util.prefs.Preferences-method-addNodeChangeListener\" class=\"docClass\">addNodeChangeListener</a>(NodeChangeListener)</p>\n</div></li></ul></div></div></div><div id='method-childrenNames' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-childrenNames' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-childrenNames' class='name expandable'>childrenNames</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the names of the children of this preference node, relative to\n this node. ...</div><div class='long'><p>Returns the names of the children of this preference node, relative to\n this node.  (The returned array will be of size zero if this node has\n no children.)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the names of the children of this preference node.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li></ul></div></div></div><div id='method-clear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-clear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-clear' class='name expandable'>clear</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes all of the preferences (key-value associations) in this\n preference node. ...</div><div class='long'><p>Removes all of the preferences (key-value associations) in this\n preference node.  This call has no effect on any descendants\n of this node.</p>\n\n<p> <p>If this implementation supports <i>stored defaults</i>, and this\n node in the preferences hierarchy contains any such defaults,\n the stored defaults will be \"exposed\" by this call, in the sense that\n they will be returned by succeeding calls to <tt>get</tt>.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-removeNode\" rel=\"java.util.prefs.Preferences-method-removeNode\" class=\"docClass\">removeNode</a>()</p>\n</div></li></ul></div></div></div><div id='method-exportNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-exportNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-exportNode' class='name expandable'>exportNode</a>( <span class='pre'>os</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Emits on the specified output stream an XML document representing all\n of the preferences contained in this node (but...</div><div class='long'><p>Emits on the specified output stream an XML document representing all\n of the preferences contained in this node (but not its descendants).\n This XML document is, in effect, an offline backup of the node.</p>\n\n<p> <p>The XML document will have the following DOCTYPE declaration:\n <pre>{@code\n &lt;!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">\n }</pre>\n The UTF-8 character encoding will be used.</p>\n\n<p> <p>This method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  If the preferences\n at this node are modified concurrently with an invocation of this\n method, the exported preferences comprise a \"fuzzy snapshot\" of the\n preferences contained in the node; some of the concurrent modifications\n may be reflected in the exported data while others may not.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>os</span> : Object {OutputStream}<div class='sub-desc'><p>the output stream on which to emit the XML document.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if writing to the specified output stream\n         results in an <tt>IOException</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if preference data cannot be read from\n         backing store.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-importPreferences\" rel=\"java.util.prefs.Preferences-method-importPreferences\" class=\"docClass\">importPreferences</a>(InputStream)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li></ul></div></div></div><div id='method-exportSubtree' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-exportSubtree' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-exportSubtree' class='name expandable'>exportSubtree</a>( <span class='pre'>os</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Emits an XML document representing all of the preferences contained\n in this node and all of its descendants. ...</div><div class='long'><p>Emits an XML document representing all of the preferences contained\n in this node and all of its descendants.  This XML document is, in\n effect, an offline backup of the subtree rooted at the node.</p>\n\n<p> <p>The XML document will have the following DOCTYPE declaration:\n <pre>{@code\n &lt;!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">\n }</pre>\n The UTF-8 character encoding will be used.</p>\n\n<p> <p>This method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  If the preferences\n or nodes in the subtree rooted at this node are modified concurrently\n with an invocation of this method, the exported preferences comprise a\n \"fuzzy snapshot\" of the subtree; some of the concurrent modifications\n may be reflected in the exported data while others may not.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>os</span> : Object {OutputStream}<div class='sub-desc'><p>the output stream on which to emit the XML document.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if writing to the specified output stream\n         results in an <tt>IOException</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if preference data cannot be read from\n         backing store.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-importPreferences\" rel=\"java.util.prefs.Preferences-method-importPreferences\" class=\"docClass\">importPreferences</a>(InputStream)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-exportNode\" rel=\"java.util.prefs.Preferences-method-exportNode\" class=\"docClass\">exportNode</a>(OutputStream)</p>\n</div></li></ul></div></div></div><div id='method-flush' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Forces any changes in the contents of this preference node and its\n descendants to the persistent store. ...</div><div class='long'><p>Forces any changes in the contents of this preference node and its\n descendants to the persistent store.  Once this method returns\n successfully, it is safe to assume that all changes made in the\n subtree rooted at this node prior to the method invocation have become\n permanent.</p>\n\n<p> <p>Implementations are free to flush changes into the persistent store\n at any time.  They do not need to wait for this method to be called.</p>\n\n<p> <p>When a flush occurs on a newly created node, it is made persistent,\n as are any ancestors (and descendants) that have yet to be made\n persistent.  Note however that any preference value changes in\n ancestors are <i>not</i> guaranteed to be made persistent.</p>\n\n<p> <p> If this method is invoked on a node that has been removed with\n the <a href=\"#!/api/java.util.prefs.Preferences-method-removeNode\" rel=\"java.util.prefs.Preferences-method-removeNode\" class=\"docClass\">removeNode</a>() method, flushSpi() is invoked on this node,\n but not on others.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-sync\" rel=\"java.util.prefs.Preferences-method-sync\" class=\"docClass\">sync</a>()</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-get' class='name expandable'>get</a>( <span class='pre'>key, def</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value associated with the specified key in this preference\n node. ...</div><div class='long'><p>Returns the value associated with the specified key in this preference\n node.  Returns the specified default if there is no value associated\n with the key, or the backing store is inaccessible.</p>\n\n<p> <p>Some implementations may store default values in their backing\n stores.  If there is no value associated with the specified key\n but there is such a <i>stored default</i>, it is returned in\n preference to the specified default.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key whose associated value is to be returned.</p>\n</div></li><li><span class='pre'>def</span> : String<div class='sub-desc'><p>the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the value associated with <tt>key</tt>, or <tt>def</tt>\n         if no value is associated with <tt>key</tt>, or the backing\n         store is inaccessible.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.  (A\n         <tt>null</tt> value for <tt>def</tt> <i>is</i> permitted.)</p>\n</div></li></ul></div></div></div><div id='method-getBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-getBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-getBoolean' class='name expandable'>getBoolean</a>( <span class='pre'>key, def</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the boolean value represented by the string associated with the\n specified key in this preference node. ...</div><div class='long'><p>Returns the boolean value represented by the string associated with the\n specified key in this preference node.  Valid strings\n are <tt>\"true\"</tt>, which represents true, and <tt>\"false\"</tt>, which\n represents false.  Case is ignored, so, for example, <tt>\"TRUE\"</tt>\n and <tt>\"False\"</tt> are also valid.  This method is intended for use in\n conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-putBoolean\" rel=\"java.util.prefs.Preferences-method-putBoolean\" class=\"docClass\">putBoolean</a>.</p>\n\n<p> <p>Returns the specified default if there is no value\n associated with the key, the backing store is inaccessible, or if the\n associated value is something other than <tt>\"true\"</tt> or\n <tt>\"false\"</tt>, ignoring case.</p>\n\n<p> <p>If the implementation supports <i>stored defaults</i> and such a\n default exists and is accessible, it is used in preference to the\n specified default, unless the stored default is something other than\n <tt>\"true\"</tt> or <tt>\"false\"</tt>, ignoring case, in which case the\n specified default is used.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key whose associated value is to be returned as a boolean.</p>\n</div></li><li><span class='pre'>def</span> : Boolean<div class='sub-desc'><p>the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a boolean,\n        or the backing store is inaccessible.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the boolean value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a boolean.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-get\" rel=\"java.util.prefs.Preferences-method-get\" class=\"docClass\">get</a>(String,String)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-putBoolean\" rel=\"java.util.prefs.Preferences-method-putBoolean\" class=\"docClass\">putBoolean</a>(String,boolean)</p>\n</div></li></ul></div></div></div><div id='method-getByteArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-getByteArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-getByteArray' class='name expandable'>getByteArray</a>( <span class='pre'>key, def</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the byte array value represented by the string associated with\n the specified key in this preference node. ...</div><div class='long'><p>Returns the byte array value represented by the string associated with\n the specified key in this preference node.  Valid strings are\n <i>Base64</i> encoded binary data, as defined in <a\n href=http://www.ietf.org/rfc/rfc2045.txt>RFC 2045</a>, Section 6.8,\n with one minor change: the string must consist solely of characters\n from the <i>Base64 Alphabet</i>; no newline characters or\n extraneous characters are permitted.  This method is intended for use\n in conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-putByteArray\" rel=\"java.util.prefs.Preferences-method-putByteArray\" class=\"docClass\">putByteArray</a>.</p>\n\n<p> <p>Returns the specified default if there is no value\n associated with the key, the backing store is inaccessible, or if the\n associated value is not a valid Base64 encoded byte array\n (as defined above).</p>\n\n<p> <p>If the implementation supports <i>stored defaults</i> and such a\n default exists and is accessible, it is used in preference to the\n specified default, unless the stored default is not a valid Base64\n encoded byte array (as defined above), in which case the\n specified default is used.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key whose associated value is to be returned as a byte array.</p>\n</div></li><li><span class='pre'>def</span> : Object {byte[]}<div class='sub-desc'><p>the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a byte array,\n        or the backing store is inaccessible.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the byte array value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a byte array.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.  (A\n         <tt>null</tt> value for <tt>def</tt> <i>is</i> permitted.)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-get\" rel=\"java.util.prefs.Preferences-method-get\" class=\"docClass\">get</a>(String,String)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-putByteArray\" rel=\"java.util.prefs.Preferences-method-putByteArray\" class=\"docClass\">putByteArray</a>(String,byte[])</p>\n</div></li></ul></div></div></div><div id='method-getDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-getDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-getDouble' class='name expandable'>getDouble</a>( <span class='pre'>key, def</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the double value represented by the string associated with the\n specified key in this preference node. ...</div><div class='long'><p>Returns the double value represented by the string associated with the\n specified key in this preference node.  The string is converted to an\n integer as by Double.parseDouble(String).  Returns the specified\n default if there is no value associated with the key, the backing store\n is inaccessible, or if <tt>Double.parseDouble(String)</tt> would throw a\n NumberFormatException if the associated value were passed.\n This method is intended for use in conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-putDouble\" rel=\"java.util.prefs.Preferences-method-putDouble\" class=\"docClass\">putDouble</a>.</p>\n\n<p> <p>If the implementation supports <i>stored defaults</i> and such a\n default exists, is accessible, and could be converted to a double\n with <tt>Double.parseDouble</tt>, this double is returned in preference\n to the specified default.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key whose associated value is to be returned as a double.</p>\n</div></li><li><span class='pre'>def</span> : Number<div class='sub-desc'><p>the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a double,\n        or the backing store is inaccessible.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the double value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a double.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-putDouble\" rel=\"java.util.prefs.Preferences-method-putDouble\" class=\"docClass\">putDouble</a>(String,double)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-get\" rel=\"java.util.prefs.Preferences-method-get\" class=\"docClass\">get</a>(String,String)</p>\n</div></li></ul></div></div></div><div id='method-getFloat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-getFloat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-getFloat' class='name expandable'>getFloat</a>( <span class='pre'>key, def</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the float value represented by the string associated with the\n specified key in this preference node. ...</div><div class='long'><p>Returns the float value represented by the string associated with the\n specified key in this preference node.  The string is converted to an\n integer as by Float.parseFloat(String).  Returns the specified\n default if there is no value associated with the key, the backing store\n is inaccessible, or if <tt>Float.parseFloat(String)</tt> would throw a\n NumberFormatException if the associated value were passed.\n This method is intended for use in conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-putFloat\" rel=\"java.util.prefs.Preferences-method-putFloat\" class=\"docClass\">putFloat</a>.</p>\n\n<p> <p>If the implementation supports <i>stored defaults</i> and such a\n default exists, is accessible, and could be converted to a float\n with <tt>Float.parseFloat</tt>, this float is returned in preference to\n the specified default.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key whose associated value is to be returned as a float.</p>\n</div></li><li><span class='pre'>def</span> : Number<div class='sub-desc'><p>the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a float,\n        or the backing store is inaccessible.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the float value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a float.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-putFloat\" rel=\"java.util.prefs.Preferences-method-putFloat\" class=\"docClass\">putFloat</a>(String,float)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-get\" rel=\"java.util.prefs.Preferences-method-get\" class=\"docClass\">get</a>(String,String)</p>\n</div></li></ul></div></div></div><div id='method-getInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-getInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-getInt' class='name expandable'>getInt</a>( <span class='pre'>key, def</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the int value represented by the string associated with the\n specified key in this preference node. ...</div><div class='long'><p>Returns the int value represented by the string associated with the\n specified key in this preference node.  The string is converted to\n an integer as by Integer.parseInt(String).  Returns the\n specified default if there is no value associated with the key,\n the backing store is inaccessible, or if\n <tt>Integer.parseInt(String)</tt> would throw a NumberFormatException if the associated value were passed.  This\n method is intended for use in conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-putInt\" rel=\"java.util.prefs.Preferences-method-putInt\" class=\"docClass\">putInt</a>.</p>\n\n<p> <p>If the implementation supports <i>stored defaults</i> and such a\n default exists, is accessible, and could be converted to an int\n with <tt>Integer.parseInt</tt>, this int is returned in preference to\n the specified default.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key whose associated value is to be returned as an int.</p>\n</div></li><li><span class='pre'>def</span> : Number<div class='sub-desc'><p>the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as an int,\n        or the backing store is inaccessible.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the int value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         an int.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-putInt\" rel=\"java.util.prefs.Preferences-method-putInt\" class=\"docClass\">putInt</a>(String,int)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-get\" rel=\"java.util.prefs.Preferences-method-get\" class=\"docClass\">get</a>(String,String)</p>\n</div></li></ul></div></div></div><div id='method-getLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-getLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-getLong' class='name expandable'>getLong</a>( <span class='pre'>key, def</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the long value represented by the string associated with the\n specified key in this preference node. ...</div><div class='long'><p>Returns the long value represented by the string associated with the\n specified key in this preference node.  The string is converted to\n a long as by Long.parseLong(String).  Returns the\n specified default if there is no value associated with the key,\n the backing store is inaccessible, or if\n <tt>Long.parseLong(String)</tt> would throw a NumberFormatException if the associated value were passed.  This\n method is intended for use in conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-putLong\" rel=\"java.util.prefs.Preferences-method-putLong\" class=\"docClass\">putLong</a>.</p>\n\n<p> <p>If the implementation supports <i>stored defaults</i> and such a\n default exists, is accessible, and could be converted to a long\n with <tt>Long.parseLong</tt>, this long is returned in preference to\n the specified default.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key whose associated value is to be returned as a long.</p>\n</div></li><li><span class='pre'>def</span> : Number<div class='sub-desc'><p>the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as a long,\n        or the backing store is inaccessible.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the long value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         a long.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-putLong\" rel=\"java.util.prefs.Preferences-method-putLong\" class=\"docClass\">putLong</a>(String,long)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-get\" rel=\"java.util.prefs.Preferences-method-get\" class=\"docClass\">get</a>(String,String)</p>\n</div></li></ul></div></div></div><div id='method-importPreferences' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-importPreferences' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-importPreferences' class='name expandable'>importPreferences</a>( <span class='pre'>is</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Imports all of the preferences represented by the XML document on the\n specified input stream. ...</div><div class='long'><p>Imports all of the preferences represented by the XML document on the\n specified input stream.  The document may represent user preferences or\n system preferences.  If it represents user preferences, the preferences\n will be imported into the calling user's preference tree (even if they\n originally came from a different user's preference tree).  If any of\n the preferences described by the document inhabit preference nodes that\n do not exist, the nodes will be created.</p>\n\n<p> <p>The XML document must have the following DOCTYPE declaration:\n <pre>{@code\n &lt;!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">\n }</pre>\n (This method is designed for use in conjunction with\n <a href=\"#!/api/java.util.prefs.Preferences-method-exportNode\" rel=\"java.util.prefs.Preferences-method-exportNode\" class=\"docClass\">exportNode</a>(OutputStream) and\n <a href=\"#!/api/java.util.prefs.Preferences-method-exportSubtree\" rel=\"java.util.prefs.Preferences-method-exportSubtree\" class=\"docClass\">exportSubtree</a>(OutputStream).</p>\n\n<p> <p>This method is an exception to the general rule that the results of\n concurrently executing multiple methods in this class yields\n results equivalent to some serial execution.  The method behaves\n as if implemented on top of the other public methods in this class,\n notably <a href=\"#!/api/java.util.prefs.Preferences-method-node\" rel=\"java.util.prefs.Preferences-method-node\" class=\"docClass\">node</a>(String) and String).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>is</span> : Object {InputStream}<div class='sub-desc'><p>the input stream from which to read the XML document.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if reading from the specified input stream\n         results in an <tt>IOException</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidPreferencesFormatException Data on input stream does not\n         constitute a valid XML document with the mandated document type.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException If a security manager is present and\n         it denies <tt>RuntimePermission(\"preferences\")</tt>.\n@see RuntimePermission</p>\n</div></li></ul></div></div></div><div id='method-isUserNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-isUserNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-isUserNode' class='name expandable'>isUserNode</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this preference node is in the user\n preference tree, false if it's in the system preference tree. ...</div><div class='long'><p>Returns <tt>true</tt> if this preference node is in the user\n preference tree, <tt>false</tt> if it's in the system preference tree.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if this preference node is in the user\n         preference tree, <tt>false</tt> if it's in the system\n         preference tree.</p>\n</div></li></ul></div></div></div><div id='method-keys' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-keys' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-keys' class='name expandable'>keys</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns all of the keys that have an associated value in this\n preference node. ...</div><div class='long'><p>Returns all of the keys that have an associated value in this\n preference node.  (The returned array will be of size zero if\n this node has no preferences.)</p>\n\n<p> <p>If the implementation supports <i>stored defaults</i> and there\n are any such defaults at this node that have not been overridden,\n by explicit preferences, the defaults are returned in the array in\n addition to any explicit preferences.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>an array of the keys that have an associated value in this\n         preference node.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li></ul></div></div></div><div id='method-name' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-name' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-name' class='name expandable'>name</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this preference node's name, relative to its parent. ...</div><div class='long'><p>Returns this preference node's name, relative to its parent.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>this preference node's name, relative to its parent.</p>\n</div></li></ul></div></div></div><div id='method-node' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-node' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-node' class='name expandable'>node</a>( <span class='pre'>pathName</span> ) : Object {java.util.prefs.Preferences}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the named preference node in the same tree as this node,\n creating it and any of its ancestors if they do not...</div><div class='long'><p>Returns the named preference node in the same tree as this node,\n creating it and any of its ancestors if they do not already exist.\n Accepts a relative or absolute path name.  Relative path names\n (which do not begin with the slash character <tt>('/')</tt>) are\n interpreted relative to this preference node.</p>\n\n<p> <p>If the returned node did not exist prior to this call, this node and\n any ancestors that were created by this call are not guaranteed\n to become permanent until the <tt>flush</tt> method is called on\n the returned node (or one of its ancestors or descendants).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pathName</span> : String<div class='sub-desc'><p>the path name of the preference node to return.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.prefs.Preferences}</span><div class='sub-desc'><p>the specified preference node.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the path name is invalid (i.e.,\n         it contains multiple consecutive slash characters, or ends\n         with a slash character and is more than one character long).</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if path name is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-flush\" rel=\"java.util.prefs.Preferences-method-flush\" class=\"docClass\">flush</a>()</p>\n</div></li></ul></div></div></div><div id='method-nodeExists' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-nodeExists' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-nodeExists' class='name expandable'>nodeExists</a>( <span class='pre'>pathName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the named preference node exists in the same tree\n as this node. ...</div><div class='long'><p>Returns true if the named preference node exists in the same tree\n as this node.  Relative path names (which do not begin with the slash\n character <tt>('/')</tt>) are interpreted relative to this preference\n node.</p>\n\n<p> <p>If this node (or an ancestor) has already been removed with the\n <a href=\"#!/api/java.util.prefs.Preferences-method-removeNode\" rel=\"java.util.prefs.Preferences-method-removeNode\" class=\"docClass\">removeNode</a>() method, it <i>is</i> legal to invoke this method,\n but only with the path name <tt>\"\"</tt>; the invocation will return\n <tt>false</tt>.  Thus, the idiom <tt>p.nodeExists(\"\")</tt> may be\n used to test whether <tt>p</tt> has been removed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pathName</span> : String<div class='sub-desc'><p>the path name of the node whose existence\n        is to be checked.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the specified node exists.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the path name is invalid (i.e.,\n         it contains multiple consecutive slash characters, or ends\n         with a slash character and is more than one character long).</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if path name is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method and\n         <tt>pathName</tt> is not the empty string (<tt>\"\"</tt>).</p>\n</div></li></ul></div></div></div><div id='method-parent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-parent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-parent' class='name expandable'>parent</a>( <span class='pre'></span> ) : Object {java.util.prefs.Preferences}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the parent of this preference node, or null if this is\n the root. ...</div><div class='long'><p>Returns the parent of this preference node, or <tt>null</tt> if this is\n the root.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.prefs.Preferences}</span><div class='sub-desc'><p>the parent of this preference node.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li></ul></div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-put' class='name expandable'>put</a>( <span class='pre'>key, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Associates the specified value with the specified key in this\n preference node. ...</div><div class='long'><p>Associates the specified value with the specified key in this\n preference node.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key with which the specified value is to be associated.</p>\n</div></li><li><span class='pre'>value</span> : String<div class='sub-desc'><p>value to be associated with the specified key.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if key or value is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if <tt>key.length()</tt> exceeds\n       <tt>MAX_KEY_LENGTH</tt> or if <tt>value.length</tt> exceeds\n       <tt>MAX_VALUE_LENGTH</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li></ul></div></div></div><div id='method-putBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-putBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-putBoolean' class='name expandable'>putBoolean</a>( <span class='pre'>key, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Associates a string representing the specified boolean value with the\n specified key in this preference node. ...</div><div class='long'><p>Associates a string representing the specified boolean value with the\n specified key in this preference node.  The associated string is\n <tt>\"true\"</tt> if the value is true, and <tt>\"false\"</tt> if it is\n false.  This method is intended for use in conjunction with\n <a href=\"#!/api/java.util.prefs.Preferences-method-getBoolean\" rel=\"java.util.prefs.Preferences-method-getBoolean\" class=\"docClass\">getBoolean</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key with which the string form of value is to be associated.</p>\n</div></li><li><span class='pre'>value</span> : Boolean<div class='sub-desc'><p>value whose string form is to be associated with key.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-getBoolean\" rel=\"java.util.prefs.Preferences-method-getBoolean\" class=\"docClass\">getBoolean</a>(String,boolean)\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-get\" rel=\"java.util.prefs.Preferences-method-get\" class=\"docClass\">get</a>(String,String)</p>\n</div></li></ul></div></div></div><div id='method-putByteArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-putByteArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-putByteArray' class='name expandable'>putByteArray</a>( <span class='pre'>key, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Associates a string representing the specified byte array with the\n specified key in this preference node. ...</div><div class='long'><p>Associates a string representing the specified byte array with the\n specified key in this preference node.  The associated string is\n the <i>Base64</i> encoding of the byte array, as defined in <a\n href=http://www.ietf.org/rfc/rfc2045.txt>RFC 2045</a>, Section 6.8,\n with one minor change: the string will consist solely of characters\n from the <i>Base64 Alphabet</i>; it will not contain any newline\n characters.  Note that the maximum length of the byte array is limited\n to three quarters of <tt>MAX_VALUE_LENGTH</tt> so that the length\n of the Base64 encoded String does not exceed <tt>MAX_VALUE_LENGTH</tt>.\n This method is intended for use in conjunction with\n <a href=\"#!/api/java.util.prefs.Preferences-method-getByteArray\" rel=\"java.util.prefs.Preferences-method-getByteArray\" class=\"docClass\">getByteArray</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key with which the string form of value is to be associated.</p>\n</div></li><li><span class='pre'>value</span> : Object {byte[]}<div class='sub-desc'><p>value whose string form is to be associated with key.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if key or value is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if key.length() exceeds MAX_KEY_LENGTH\n         or if value.length exceeds MAX_VALUE_LENGTH*3/4.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-getByteArray\" rel=\"java.util.prefs.Preferences-method-getByteArray\" class=\"docClass\">getByteArray</a>(String,byte[])\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-get\" rel=\"java.util.prefs.Preferences-method-get\" class=\"docClass\">get</a>(String,String)</p>\n</div></li></ul></div></div></div><div id='method-putDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-putDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-putDouble' class='name expandable'>putDouble</a>( <span class='pre'>key, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Associates a string representing the specified double value with the\n specified key in this preference node. ...</div><div class='long'><p>Associates a string representing the specified double value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the double value were passed to\n Double.toString(double).  This method is intended for use in\n conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-getDouble\" rel=\"java.util.prefs.Preferences-method-getDouble\" class=\"docClass\">getDouble</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key with which the string form of value is to be associated.</p>\n</div></li><li><span class='pre'>value</span> : Number<div class='sub-desc'><p>value whose string form is to be associated with key.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-getDouble\" rel=\"java.util.prefs.Preferences-method-getDouble\" class=\"docClass\">getDouble</a>(String,double)</p>\n</div></li></ul></div></div></div><div id='method-putFloat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-putFloat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-putFloat' class='name expandable'>putFloat</a>( <span class='pre'>key, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Associates a string representing the specified float value with the\n specified key in this preference node. ...</div><div class='long'><p>Associates a string representing the specified float value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the float value were passed to\n Float.toString(float).  This method is intended for use in\n conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-getFloat\" rel=\"java.util.prefs.Preferences-method-getFloat\" class=\"docClass\">getFloat</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key with which the string form of value is to be associated.</p>\n</div></li><li><span class='pre'>value</span> : Number<div class='sub-desc'><p>value whose string form is to be associated with key.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-getFloat\" rel=\"java.util.prefs.Preferences-method-getFloat\" class=\"docClass\">getFloat</a>(String,float)</p>\n</div></li></ul></div></div></div><div id='method-putInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-putInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-putInt' class='name expandable'>putInt</a>( <span class='pre'>key, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Associates a string representing the specified int value with the\n specified key in this preference node. ...</div><div class='long'><p>Associates a string representing the specified int value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the int value were passed to\n Integer.toString(int).  This method is intended for use in\n conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-getInt\" rel=\"java.util.prefs.Preferences-method-getInt\" class=\"docClass\">getInt</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key with which the string form of value is to be associated.</p>\n</div></li><li><span class='pre'>value</span> : Number<div class='sub-desc'><p>value whose string form is to be associated with key.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-getInt\" rel=\"java.util.prefs.Preferences-method-getInt\" class=\"docClass\">getInt</a>(String,int)</p>\n</div></li></ul></div></div></div><div id='method-putLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-putLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-putLong' class='name expandable'>putLong</a>( <span class='pre'>key, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Associates a string representing the specified long value with the\n specified key in this preference node. ...</div><div class='long'><p>Associates a string representing the specified long value with the\n specified key in this preference node.  The associated string is the\n one that would be returned if the long value were passed to\n Long.toString(long).  This method is intended for use in\n conjunction with <a href=\"#!/api/java.util.prefs.Preferences-method-getLong\" rel=\"java.util.prefs.Preferences-method-getLong\" class=\"docClass\">getLong</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key with which the string form of value is to be associated.</p>\n</div></li><li><span class='pre'>value</span> : Number<div class='sub-desc'><p>value whose string form is to be associated with key.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if <tt>key.length()</tt> exceeds\n         <tt>MAX_KEY_LENGTH</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-getLong\" rel=\"java.util.prefs.Preferences-method-getLong\" class=\"docClass\">getLong</a>(String,long)</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-remove' class='name expandable'>remove</a>( <span class='pre'>key</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the value associated with the specified key in this preference\n node, if any. ...</div><div class='long'><p>Removes the value associated with the specified key in this preference\n node, if any.</p>\n\n<p> <p>If this implementation supports <i>stored defaults</i>, and there is\n such a default for the specified preference, the stored default will be\n \"exposed\" by this call, in the sense that it will be returned\n by a succeeding call to <tt>get</tt>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>key whose mapping is to be removed from the preference node.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>key</tt> is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.</p>\n</div></li></ul></div></div></div><div id='method-removeNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-removeNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-removeNode' class='name expandable'>removeNode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes this preference node and all of its descendants, invalidating\n any preferences contained in the removed nodes. ...</div><div class='long'><p>Removes this preference node and all of its descendants, invalidating\n any preferences contained in the removed nodes.  Once a node has been\n removed, attempting any method other than <a href=\"#!/api/java.util.prefs.Preferences-method-name\" rel=\"java.util.prefs.Preferences-method-name\" class=\"docClass\">name</a>(),\n <a href=\"#!/api/java.util.prefs.Preferences-method-absolutePath\" rel=\"java.util.prefs.Preferences-method-absolutePath\" class=\"docClass\">absolutePath</a>(), <a href=\"#!/api/java.util.prefs.Preferences-method-isUserNode\" rel=\"java.util.prefs.Preferences-method-isUserNode\" class=\"docClass\">isUserNode</a>(), <a href=\"#!/api/java.util.prefs.Preferences-method-flush\" rel=\"java.util.prefs.Preferences-method-flush\" class=\"docClass\">flush</a>() or\n nodeExists(\"\") on the corresponding\n <tt>Preferences</tt> instance will fail with an\n <tt>IllegalStateException</tt>.  (The methods defined on Object\n can still be invoked on a node after it has been removed; they will not\n throw <tt>IllegalStateException</tt>.)</p>\n\n<p> <p>The removal is not guaranteed to be persistent until the\n <tt>flush</tt> method is called on this node (or an ancestor).</p>\n\n<p> <p>If this implementation supports <i>stored defaults</i>, removing a\n node exposes any stored defaults at or below this node.  Thus, a\n subsequent call to <tt>nodeExists</tt> on this node's path name may\n return <tt>true</tt>, and a subsequent call to <tt>node</tt> on this\n path name may return a (different) <tt>Preferences</tt> instance\n representing a non-empty collection of preferences and/or children.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has already\n         been removed with the removeNode() method.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if this method is invoked on\n         the root node.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-flush\" rel=\"java.util.prefs.Preferences-method-flush\" class=\"docClass\">flush</a>()</p>\n</div></li></ul></div></div></div><div id='method-removeNodeChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-removeNodeChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-removeNodeChangeListener' class='name expandable'>removeNodeChangeListener</a>( <span class='pre'>ncl</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the specified NodeChangeListener, so it no longer\n receives change events. ...</div><div class='long'><p>Removes the specified <tt>NodeChangeListener</tt>, so it no longer\n receives change events.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ncl</span> : Object {NodeChangeListener}<div class='sub-desc'><p>The <tt>NodeChangeListener</tt> to remove.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if <tt>ncl</tt> was not a registered\n         <tt>NodeChangeListener</tt> on this node.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-addNodeChangeListener\" rel=\"java.util.prefs.Preferences-method-addNodeChangeListener\" class=\"docClass\">addNodeChangeListener</a>(NodeChangeListener)</p>\n</div></li></ul></div></div></div><div id='method-removePreferenceChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-removePreferenceChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-removePreferenceChangeListener' class='name expandable'>removePreferenceChangeListener</a>( <span class='pre'>pcl</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the specified preference change listener, so it no longer\n receives preference change events. ...</div><div class='long'><p>Removes the specified preference change listener, so it no longer\n receives preference change events.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pcl</span> : Object {PreferenceChangeListener}<div class='sub-desc'><p>The preference change listener to remove.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if <tt>pcl</tt> was not a registered\n         preference change listener on this node.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-addPreferenceChangeListener\" rel=\"java.util.prefs.Preferences-method-addPreferenceChangeListener\" class=\"docClass\">addPreferenceChangeListener</a>(PreferenceChangeListener)</p>\n</div></li></ul></div></div></div><div id='method-sync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-sync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-sync' class='name expandable'>sync</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ensures that future reads from this preference node and its\n descendants reflect any changes that were committed to t...</div><div class='long'><p>Ensures that future reads from this preference node and its\n descendants reflect any changes that were committed to the persistent\n store (from any VM) prior to the <tt>sync</tt> invocation.  As a\n side-effect, forces any changes in the contents of this preference node\n and its descendants to the persistent store, as if the <tt>flush</tt>\n method had been invoked on this node.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>BackingStoreException if this operation cannot be completed\n         due to a failure in the backing store, or inability to\n         communicate with it.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this node (or an ancestor) has been\n         removed with the removeNode() method.\n@see <a href=\"#!/api/java.util.prefs.Preferences-method-flush\" rel=\"java.util.prefs.Preferences-method-flush\" class=\"docClass\">flush</a>()</p>\n</div></li></ul></div></div></div><div id='method-systemNodeForPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-systemNodeForPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-systemNodeForPackage' class='name expandable'>systemNodeForPackage</a>( <span class='pre'>c</span> ) : Object {java.util.prefs.Preferences}<span class=\"signature\"></span></div><div class='description'><div class='short'>WARNING: On Android, the Preference nodes\n corresponding to the \"system\" and \"user\" preferences are stored in section...</div><div class='long'><p><strong>WARNING:</strong> On Android, the Preference nodes\n corresponding to the \"system\" and \"user\" preferences are stored in sections\n of the file system that are inaccessible to apps. Further, allowing apps to set\n \"system wide\" preferences is contrary to android's security model.</p>\n\n<p> Returns the preference node from the system preference tree that is\n associated (by convention) with the specified class's package.  The\n convention is as follows: the absolute path name of the node is the\n fully qualified package name, preceded by a slash (<tt>'/'</tt>), and\n with each period (<tt>'.'</tt>) replaced by a slash.  For example the\n absolute path name of the node associated with the class\n <tt>com.acme.widget.Foo</tt> is <tt>/com/acme/widget</tt>.</p>\n\n<p> <p>This convention does not apply to the unnamed package, whose\n associated preference node is <tt>&lt;unnamed&gt;</tt>.  This node\n is not intended for long term use, but for convenience in the early\n development of programs that do not yet belong to a package, and\n for \"throwaway\" programs.  <i>Valuable data should not be stored\n at this node as it is shared by all programs that use it.</i></p>\n\n<p> <p>A class <tt>Foo</tt> wishing to access preferences pertaining to its\n package can obtain a preference node as follows:</p>\n\n<pre>  static Preferences prefs = Preferences.systemNodeForPackage(Foo.class);\n </pre>\n\n\n<p> This idiom obviates the need for using a string to describe the\n preferences node and decreases the likelihood of a run-time failure.\n (If the class name is misspelled, it will typically result in a\n compile-time error.)</p>\n\n<p> <p>Invoking this method will result in the creation of the returned\n node and its ancestors if they do not already exist.  If the returned\n node did not exist prior to this call, this node and any ancestors that\n were created by this call are not guaranteed to become permanent until\n the <tt>flush</tt> method is called on the returned node (or one of its\n ancestors or descendants).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class for whose package a system preference node is desired.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.prefs.Preferences}</span><div class='sub-desc'><p>the system preference node associated with the package of which\n         <tt>c</tt> is a member.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>c</tt> is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if a security manager is present and\n         it denies <tt>RuntimePermission(\"preferences\")</tt>.\n@see RuntimePermission</p>\n</div></li></ul></div></div></div><div id='method-systemRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-systemRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-systemRoot' class='name expandable'>systemRoot</a>( <span class='pre'></span> ) : Object {java.util.prefs.Preferences}<span class=\"signature\"></span></div><div class='description'><div class='short'>WARNING: On Android, the Preference nodes\n corresponding to the \"system\" and \"user\" preferences are stored in section...</div><div class='long'><p><strong>WARNING:</strong> On Android, the Preference nodes\n corresponding to the \"system\" and \"user\" preferences are stored in sections\n of the file system that are inaccessible to apps. Further, allowing apps to set\n \"system wide\" preferences is contrary to android's security model.</p>\n\n<p> Returns the root preference node for the system.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.prefs.Preferences}</span><div class='sub-desc'><p>the root preference node for the system.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException If a security manager is present and\n         it denies <tt>RuntimePermission(\"preferences\")</tt>.\n@see RuntimePermission</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string representation of this preferences node,\n as if computed by the expression:(this.isUserNode() ? \"Use...</div><div class='long'><p>Returns a string representation of this preferences node,\n as if computed by the expression:<tt>(this.isUserNode() ? \"User\" :\n \"System\") + \" Preference Node: \" + this.absolutePath()</tt>.</p>\n</div></div></div><div id='method-userNodeForPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-userNodeForPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-userNodeForPackage' class='name expandable'>userNodeForPackage</a>( <span class='pre'>c</span> ) : Object {java.util.prefs.Preferences}<span class=\"signature\"></span></div><div class='description'><div class='short'>WARNING: On Android, the Preference nodes\n corresponding to the \"system\" and \"user\" preferences are stored in section...</div><div class='long'><p><strong>WARNING:</strong> On Android, the Preference nodes\n corresponding to the \"system\" and \"user\" preferences are stored in sections\n of the file system that are inaccessible to apps. Further, allowing apps to set\n \"system wide\" preferences is contrary to android's security model.</p>\n\n<p> Returns the preference node from the calling user's preference tree\n that is associated (by convention) with the specified class's package.\n The convention is as follows: the absolute path name of the node is the\n fully qualified package name, preceded by a slash (<tt>'/'</tt>), and\n with each period (<tt>'.'</tt>) replaced by a slash.  For example the\n absolute path name of the node associated with the class\n <tt>com.acme.widget.Foo</tt> is <tt>/com/acme/widget</tt>.</p>\n\n<p> <p>This convention does not apply to the unnamed package, whose\n associated preference node is <tt>&lt;unnamed&gt;</tt>.  This node\n is not intended for long term use, but for convenience in the early\n development of programs that do not yet belong to a package, and\n for \"throwaway\" programs.  <i>Valuable data should not be stored\n at this node as it is shared by all programs that use it.</i></p>\n\n<p> <p>A class <tt>Foo</tt> wishing to access preferences pertaining to its\n package can obtain a preference node as follows:</p>\n\n<pre>    static Preferences prefs = Preferences.userNodeForPackage(Foo.class);\n </pre>\n\n\n<p> This idiom obviates the need for using a string to describe the\n preferences node and decreases the likelihood of a run-time failure.\n (If the class name is misspelled, it will typically result in a\n compile-time error.)</p>\n\n<p> <p>Invoking this method will result in the creation of the returned\n node and its ancestors if they do not already exist.  If the returned\n node did not exist prior to this call, this node and any ancestors that\n were created by this call are not guaranteed to become permanent until\n the <tt>flush</tt> method is called on the returned node (or one of its\n ancestors or descendants).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class for whose package a user preference node is desired.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.prefs.Preferences}</span><div class='sub-desc'><p>the user preference node associated with the package of which\n         <tt>c</tt> is a member.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <tt>c</tt> is <tt>null</tt>.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if a security manager is present and\n         it denies <tt>RuntimePermission(\"preferences\")</tt>.\n@see RuntimePermission</p>\n</div></li></ul></div></div></div><div id='method-userRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.prefs.Preferences'>java.util.prefs.Preferences</span><br/><a href='source/Preferences.html#java-util-prefs-Preferences-method-userRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.prefs.Preferences-method-userRoot' class='name expandable'>userRoot</a>( <span class='pre'></span> ) : Object {java.util.prefs.Preferences}<span class=\"signature\"></span></div><div class='description'><div class='short'>WARNING: On Android, the Preference nodes\n corresponding to the \"system\" and \"user\" preferences are stored in section...</div><div class='long'><p><strong>WARNING:</strong> On Android, the Preference nodes\n corresponding to the \"system\" and \"user\" preferences are stored in sections\n of the file system that are inaccessible to apps. Further, allowing apps to set\n \"system wide\" preferences is contrary to android's security model.</p>\n\n<p> Returns the root preference node for the calling user.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.prefs.Preferences}</span><div class='sub-desc'><p>the root preference node for the calling user.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException If a security manager is present and\n         it denies <tt>RuntimePermission(\"preferences\")</tt>.\n@see RuntimePermission</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});