Ext.data.JsonP.android_view_WindowManager({"tagname":"class","name":"android.view.WindowManager","autodetected":{},"files":[{"filename":"WindowManager.js","href":"WindowManager.html#android-view-WindowManager"}],"members":[{"name":"getDefaultDisplay","tagname":"method","owner":"android.view.WindowManager","id":"method-getDefaultDisplay","meta":{}},{"name":"removeViewImmediate","tagname":"method","owner":"android.view.WindowManager","id":"method-removeViewImmediate","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.view.WindowManager","short_doc":"implements android.view.ViewManager\n\n The interface that apps use to talk to the window manager. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/WindowManager.html#android-view-WindowManager' target='_blank'>WindowManager.js</a></div></pre><div class='doc-contents'><p>implements android.view.ViewManager</p>\n\n<p> The interface that apps use to talk to the window manager.\n </p><p>\n Each window manager instance is bound to a particular android.view.Display.\n To obtain a <a href=\"#!/api/android.view.WindowManager\" rel=\"android.view.WindowManager\" class=\"docClass\">android.view.WindowManager</a> for a different display, use\n Context.createDisplayContext to obtain a Context for that\n display, then use <code>Context.getSystemService(Context.WINDOW_SERVICE)</code>\n to get the WindowManager.\n </p><p>\n The simplest way to show a window on another display is to create a\n Presentation.  The presentation will automatically obtain a\n <a href=\"#!/api/android.view.WindowManager\" rel=\"android.view.WindowManager\" class=\"docClass\">android.view.WindowManager</a> and Context for that display.\n </p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getDefaultDisplay' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.WindowManager'>android.view.WindowManager</span><br/><a href='source/WindowManager.html#android-view-WindowManager-method-getDefaultDisplay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.WindowManager-method-getDefaultDisplay' class='name expandable'>getDefaultDisplay</a>( <span class='pre'></span> ) : Object {android.view.Display}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the android.view.Display upon which this android.view.WindowManager instance\n will create new windows. ...</div><div class='long'><p>Returns the android.view.Display upon which this <a href=\"#!/api/android.view.WindowManager\" rel=\"android.view.WindowManager\" class=\"docClass\">android.view.WindowManager</a> instance\n will create new windows.\n <p>\n Despite the name of this method, the display that is returned is not\n necessarily the primary display of the system (see android.view.Display.DEFAULT_DISPLAY).\n The returned display could instead be a secondary display that this\n window manager instance is managing.  Think of it as the display that\n this <a href=\"#!/api/android.view.WindowManager\" rel=\"android.view.WindowManager\" class=\"docClass\">android.view.WindowManager</a> instance uses by default.\n </p><p>\n To create windows on a different display, you need to obtain a\n <a href=\"#!/api/android.view.WindowManager\" rel=\"android.view.WindowManager\" class=\"docClass\">android.view.WindowManager</a> for that android.view.Display.  (See the <a href=\"#!/api/android.view.WindowManager\" rel=\"android.view.WindowManager\" class=\"docClass\">android.view.WindowManager</a>\n class documentation for more information.)\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.Display}</span><div class='sub-desc'><p>The display that this window manager is managing.</p>\n</div></li></ul></div></div></div><div id='method-removeViewImmediate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.WindowManager'>android.view.WindowManager</span><br/><a href='source/WindowManager.html#android-view-WindowManager-method-removeViewImmediate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.WindowManager-method-removeViewImmediate' class='name expandable'>removeViewImmediate</a>( <span class='pre'>view</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Special variation of removeView that immediately invokes\n the given view hierarchy's android.view.View.onDetachedFrom...</div><div class='long'><p>Special variation of removeView that immediately invokes\n the given view hierarchy's android.view.View.onDetachedFromWindow() methods before returning.  This is not\n for normal applications; using it correctly requires great care.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view to be removed.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});