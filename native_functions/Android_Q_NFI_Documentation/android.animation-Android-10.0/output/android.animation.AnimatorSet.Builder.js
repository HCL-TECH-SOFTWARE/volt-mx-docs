Ext.data.JsonP.android_animation_AnimatorSet_Builder({"tagname":"class","name":"android.animation.AnimatorSet.Builder","autodetected":{},"files":[{"filename":"Builder.js","href":"Builder.html#android-animation-AnimatorSet-Builder"}],"extends":"java.lang.Object","members":[{"name":"after","tagname":"method","owner":"android.animation.AnimatorSet.Builder","id":"method-after","meta":{}},{"name":"before","tagname":"method","owner":"android.animation.AnimatorSet.Builder","id":"method-before","meta":{}},{"name":"with","tagname":"method","owner":"android.animation.AnimatorSet.Builder","id":"method-with","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.animation.AnimatorSet.Builder","short_doc":"The Builder object is a utility class to facilitate adding animations to a\n AnimatorSet along with the relationships ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.animation.AnimatorSet.Builder</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Builder.html#android-animation-AnimatorSet-Builder' target='_blank'>Builder.js</a></div></pre><div class='doc-contents'><p>The <code>Builder</code> object is a utility class to facilitate adding animations to a\n <code>AnimatorSet</code> along with the relationships between the various animations. The\n intention of the <code>Builder</code> methods, along with the play() method of <code>AnimatorSet</code> is to make it possible\n to express the dependency relationships of animations in a natural way. Developers can also\n use the playTogether() and playSequentially() methods if these suit the need,\n but it might be easier in some situations to express the AnimatorSet of animations in pairs.\n <p/>\n <p>The <code>Builder</code> object cannot be constructed directly, but is rather constructed\n internally via a call to android.animation.AnimatorSet.play(Animator).</p>\n <p/>\n <p>For example, this sets up a AnimatorSet to play anim1 and anim2 at the same time, anim3 to\n play when anim2 finishes, and anim4 to play when anim3 finishes:</p></p>\n\n<pre>     AnimatorSet s = new AnimatorSet();\n     s.play(anim1).with(anim2);\n     s.play(anim2).before(anim3);\n     s.play(anim4).after(anim3);\n </pre>\n\n\n<p> <p/>\n <p>Note in the example that both before(Animator) and after(Animator) are used. These are just different ways of expressing the same\n relationship and are provided to make it easier to say things in a way that is more natural,\n depending on the situation.</p>\n <p/>\n <p>It is possible to make several calls into the same <code>Builder</code> object to express\n multiple relationships. However, note that it is only the animation passed into the initial\n android.animation.AnimatorSet.play(Animator) method that is the dependency in any of the successive\n calls to the <code>Builder</code> object. For example, the following code starts both anim2\n and anim3 when anim1 ends; there is no direct dependency relationship between anim2 and\n anim3:</p>\n\n<pre>   AnimatorSet s = new AnimatorSet();\n   s.play(anim1).before(anim2).before(anim3);\n </pre>\n\n\n<p> If the desired result is to play anim1 then anim2 then anim3, this code expresses the\n relationship correctly:</p></p>\n\n<pre>   AnimatorSet s = new AnimatorSet();\n   s.play(anim1).before(anim2);\n   s.play(anim2).before(anim3);\n </pre>\n\n\n<p> <p/>\n <p>Note that it is possible to express relationships that cannot be resolved and will not\n result in sensible results. For example, <code>play(anim1).after(anim1)</code> makes no\n sense. In general, circular dependencies like this one (or more indirect ones where a depends\n on b, which depends on c, which depends on a) should be avoided. Only create AnimatorSets\n that can boil down to a simple, one-way relationship of animations starting with, before, and\n after other, different, animations.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-after' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.AnimatorSet.Builder'>android.animation.AnimatorSet.Builder</span><br/><a href='source/Builder.html#android-animation-AnimatorSet-Builder-method-after' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.AnimatorSet.Builder-method-after' class='name expandable'>after</a>( <span class='pre'>delay</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets up the animation supplied in the\n android.animation.AnimatorSet.play(Animator) call that created this Builder ob...</div><div class='long'><p>Sets up the animation supplied in the\n android.animation.AnimatorSet.play(Animator) call that created this <code>Builder</code> object\n to play when the given amount of time elapses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>delay</span> : Number<div class='sub-desc'><p>The number of milliseconds that should elapse before the\n animation starts.</p>\n</div></li></ul></div></div></div><div id='method-before' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.AnimatorSet.Builder'>android.animation.AnimatorSet.Builder</span><br/><a href='source/Builder.html#android-animation-AnimatorSet-Builder-method-before' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.AnimatorSet.Builder-method-before' class='name expandable'>before</a>( <span class='pre'>anim</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets up the given animation to play when the animation supplied in the\n android.animation.AnimatorSet.play(Animator) ...</div><div class='long'><p>Sets up the given animation to play when the animation supplied in the\n android.animation.AnimatorSet.play(Animator) call that created this <code>Builder</code> object\n ends.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>anim</span> : Object {Animator}<div class='sub-desc'><p>The animation that will play when the animation supplied to the\n AnimatorSet.play(Animator) method ends.</p>\n</div></li></ul></div></div></div><div id='method-with' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.AnimatorSet.Builder'>android.animation.AnimatorSet.Builder</span><br/><a href='source/Builder.html#android-animation-AnimatorSet-Builder-method-with' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.AnimatorSet.Builder-method-with' class='name expandable'>with</a>( <span class='pre'>anim</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets up the given animation to play at the same time as the animation supplied in the\n android.animation.AnimatorSet....</div><div class='long'><p>Sets up the given animation to play at the same time as the animation supplied in the\n android.animation.AnimatorSet.play(Animator) call that created this <code>Builder</code> object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>anim</span> : Object {Animator}<div class='sub-desc'><p>The animation that will play when the animation supplied to the\n AnimatorSet.play(Animator) method starts.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});