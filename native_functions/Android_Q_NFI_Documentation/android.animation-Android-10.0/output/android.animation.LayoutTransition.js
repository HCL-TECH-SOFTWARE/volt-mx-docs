Ext.data.JsonP.android_animation_LayoutTransition({"tagname":"class","name":"android.animation.LayoutTransition","autodetected":{},"files":[{"filename":"LayoutTransition.js","href":"LayoutTransition.html#android-animation-LayoutTransition"}],"extends":"java.lang.Object","members":[{"name":"APPEARING","tagname":"property","owner":"android.animation.LayoutTransition","id":"property-APPEARING","meta":{}},{"name":"CHANGE_APPEARING","tagname":"property","owner":"android.animation.LayoutTransition","id":"property-CHANGE_APPEARING","meta":{}},{"name":"CHANGE_DISAPPEARING","tagname":"property","owner":"android.animation.LayoutTransition","id":"property-CHANGE_DISAPPEARING","meta":{}},{"name":"CHANGING","tagname":"property","owner":"android.animation.LayoutTransition","id":"property-CHANGING","meta":{}},{"name":"DISAPPEARING","tagname":"property","owner":"android.animation.LayoutTransition","id":"property-DISAPPEARING","meta":{}},{"name":"addChild","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-addChild","meta":{}},{"name":"addTransitionListener","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-addTransitionListener","meta":{}},{"name":"disableTransitionType","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-disableTransitionType","meta":{}},{"name":"enableTransitionType","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-enableTransitionType","meta":{}},{"name":"getAnimator","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-getAnimator","meta":{}},{"name":"getDuration","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-getDuration","meta":{}},{"name":"getInterpolator","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-getInterpolator","meta":{}},{"name":"getStagger","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-getStagger","meta":{}},{"name":"getStartDelay","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-getStartDelay","meta":{}},{"name":"getTransitionListeners","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-getTransitionListeners","meta":{}},{"name":"hideChild","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-hideChild","meta":{}},{"name":"isChangingLayout","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-isChangingLayout","meta":{}},{"name":"isRunning","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-isRunning","meta":{}},{"name":"isTransitionTypeEnabled","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-isTransitionTypeEnabled","meta":{}},{"name":"removeChild","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-removeChild","meta":{}},{"name":"removeTransitionListener","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-removeTransitionListener","meta":{}},{"name":"setAnimateParentHierarchy","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-setAnimateParentHierarchy","meta":{}},{"name":"setAnimator","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-setAnimator","meta":{}},{"name":"setDuration","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-setDuration","meta":{}},{"name":"setInterpolator","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-setInterpolator","meta":{}},{"name":"setStagger","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-setStagger","meta":{}},{"name":"setStartDelay","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-setStartDelay","meta":{}},{"name":"showChild","tagname":"method","owner":"android.animation.LayoutTransition","id":"method-showChild","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.animation.LayoutTransition","short_doc":"This class enables automatic animations on layout changes in ViewGroup objects. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.animation.LayoutTransition</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/LayoutTransition.html#android-animation-LayoutTransition' target='_blank'>LayoutTransition.js</a></div></pre><div class='doc-contents'><p>This class enables automatic animations on layout changes in ViewGroup objects. To enable\n transitions for a layout container, create a LayoutTransition object and set it on any\n ViewGroup by calling ViewGroup.setLayoutTransition(LayoutTransition). This will cause\n default animations to run whenever items are added to or removed from that container. To specify\n custom animations, use the Animator)\n setAnimator() method.</p>\n\n<p> <p>One of the core concepts of these transition animations is that there are two types of\n changes that cause the transition and four different animations that run because of\n those changes. The changes that trigger the transition are items being added to a container\n (referred to as an \"appearing\" transition) or removed from a container (also known as\n \"disappearing\"). Setting the visibility of views (between GONE and VISIBLE) will trigger\n the same add/remove logic. The animations that run due to those events are one that animates\n items being added, one that animates items being removed, and two that animate the other\n items in the container that change due to the add/remove occurrence. Users of\n the transition may want different animations for the changing items depending on whether\n they are changing due to an appearing or disappearing event, so there is one animation for\n each of these variations of the changing event. Most of the API of this class is concerned\n with setting up the basic properties of the animations used in these four situations,\n or with setting up custom animations for any or all of the four.</p></p>\n\n<p> <p>By default, the DISAPPEARING animation begins immediately, as does the CHANGE_APPEARING\n animation. The other animations begin after a delay that is set to the default duration\n of the animations. This behavior facilitates a sequence of animations in transitions as\n follows: when an item is being added to a layout, the other children of that container will\n move first (thus creating space for the new item), then the appearing animation will run to\n animate the item being added. Conversely, when an item is removed from a container, the\n animation to remove it will run first, then the animations of the other children in the\n layout will run (closing the gap created in the layout when the item was removed). If this\n default choreography behavior is not desired, the long) and\n long) of any or all of the animations can be changed as\n appropriate. Keep in mind, however, that if you start an APPEARING animation before a\n DISAPPEARING animation is completed, the DISAPPEARING animation stops, and any effects from\n the DISAPPEARING animation are reverted. If you instead start a DISAPPEARING animation\n before an APPEARING animation is completed, a similar set of effects occurs for the\n APPEARING animation.</p></p>\n\n<p> <p>The animations specified for the transition, both the defaults and any custom animations\n set on the transition object, are templates only. That is, these animations exist to hold the\n basic animation properties, such as the duration, start delay, and properties being animated.\n But the actual target object, as well as the start and end values for those properties, are\n set automatically in the process of setting up the transition each time it runs. Each of the\n animations is cloned from the original copy and the clone is then populated with the dynamic\n values of the target being animated (such as one of the items in a layout container that is\n moving as a result of the layout event) as well as the values that are changing (such as the\n position and size of that object). The actual values that are pushed to each animation\n depends on what properties are specified for the animation. For example, the default\n CHANGE_APPEARING animation animates the <code>left</code>, <code>top</code>, <code>right</code>,\n <code>bottom</code>, <code>scrollX</code>, and <code>scrollY</code> properties.\n Values for these properties are updated with the pre- and post-layout\n values when the transition begins. Custom animations will be similarly populated with\n the target and values being animated, assuming they use ObjectAnimator objects with\n property names that are known on the target object.</p></p>\n\n<p> <p>This class, and the associated XML flag for containers, animateLayoutChanges=\"true\",\n provides a simple utility meant for automating changes in straightforward situations.\n Using LayoutTransition at multiple levels of a nested view hierarchy may not work due to the\n interrelationship of the various levels of layout. Also, a container that is being scrolled\n at the same time as items are being added or removed is probably not a good candidate for\n this utility, because the before/after locations calculated by LayoutTransition\n may not match the actual locations when the animations finish due to the container\n being scrolled as the animations are running. You can work around that\n particular issue by disabling the 'changing' animations by setting the CHANGE_APPEARING\n and CHANGE_DISAPPEARING animations to null, and setting the startDelay of the\n other animations appropriately.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-APPEARING' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-property-APPEARING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-property-APPEARING' class='name expandable'>APPEARING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A flag indicating the animation that runs on those items that are appearing\nin the container. ...</div><div class='long'><p>A flag indicating the animation that runs on those items that are appearing\nin the container.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-CHANGE_APPEARING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-property-CHANGE_APPEARING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING' class='name expandable'>CHANGE_APPEARING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A flag indicating the animation that runs on those items that are changing\ndue to a new item appearing in the container. ...</div><div class='long'><p>A flag indicating the animation that runs on those items that are changing\ndue to a new item appearing in the container.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-CHANGE_DISAPPEARING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-property-CHANGE_DISAPPEARING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING' class='name expandable'>CHANGE_DISAPPEARING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A flag indicating the animation that runs on those items that are changing\ndue to an item disappearing from the conta...</div><div class='long'><p>A flag indicating the animation that runs on those items that are changing\ndue to an item disappearing from the container.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-CHANGING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-property-CHANGING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-property-CHANGING' class='name expandable'>CHANGING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A flag indicating the animation that runs on those items that are changing\ndue to a layout change not caused by items...</div><div class='long'><p>A flag indicating the animation that runs on those items that are changing\ndue to a layout change not caused by items being added to or removed\nfrom the container. This transition type is not enabled by default; it can be\nenabled via <a href=\"#!/api/android.animation.LayoutTransition-method-enableTransitionType\" rel=\"android.animation.LayoutTransition-method-enableTransitionType\" class=\"docClass\">enableTransitionType</a>(int).</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-DISAPPEARING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-property-DISAPPEARING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-property-DISAPPEARING' class='name expandable'>DISAPPEARING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A flag indicating the animation that runs on those items that are disappearing\nfrom the container. ...</div><div class='long'><p>A flag indicating the animation that runs on those items that are disappearing\nfrom the container.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addChild' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-addChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-addChild' class='name expandable'>addChild</a>( <span class='pre'>parent, child</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is called by ViewGroup when a child view is about to be added to the\n container. ...</div><div class='long'><p>This method is called by ViewGroup when a child view is about to be added to the\n container. This callback starts the process of a transition; we grab the starting\n values, listen for changes to all of the children of the container, and start appropriate\n animations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parent</span> : Object {ViewGroup}<div class='sub-desc'><p>The ViewGroup to which the View is being added.</p>\n</div></li><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>The View being added to the ViewGroup.</p>\n</div></li></ul></div></div></div><div id='method-addTransitionListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-addTransitionListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-addTransitionListener' class='name expandable'>addTransitionListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a listener that will be called when the bounds of the view change due to\n layout processing. ...</div><div class='long'><p>Add a listener that will be called when the bounds of the view change due to\n layout processing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {LayoutTransition.TransitionListener}<div class='sub-desc'><p>The listener that will be called when layout bounds change.</p>\n</div></li></ul></div></div></div><div id='method-disableTransitionType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-disableTransitionType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-disableTransitionType' class='name expandable'>disableTransitionType</a>( <span class='pre'>transitionType</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Disables the specified transitionType for this LayoutTransition object. ...</div><div class='long'><p>Disables the specified transitionType for this LayoutTransition object.\n By default, all transition types except <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a> are enabled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>.</p>\n</div></li></ul></div></div></div><div id='method-enableTransitionType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-enableTransitionType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-enableTransitionType' class='name expandable'>enableTransitionType</a>( <span class='pre'>transitionType</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Enables the specified transitionType for this LayoutTransition object. ...</div><div class='long'><p>Enables the specified transitionType for this LayoutTransition object.\n By default, a LayoutTransition listens for changes in children being\n added/remove/hidden/shown in the container, and runs the animations associated with\n those events. That is, all transition types besides <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a> are enabled by default.\n You can also enable <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a> animations by calling this method with the\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a> transitionType.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>.</p>\n</div></li></ul></div></div></div><div id='method-getAnimator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-getAnimator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-getAnimator' class='name expandable'>getAnimator</a>( <span class='pre'>transitionType</span> ) : Object {android.animation.Animator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the animation used during one of the transition types that may run. ...</div><div class='long'><p>Gets the animation used during one of the transition types that may run.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>, which determines\n the animation whose animator is being returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.animation.Animator}</span><div class='sub-desc'><p>Animator The animation being used for the given transition type.\n@see <a href=\"#!/api/android.animation.LayoutTransition-method-setAnimator\" rel=\"android.animation.LayoutTransition-method-setAnimator\" class=\"docClass\">setAnimator</a>(int, Animator)</p>\n</div></li></ul></div></div></div><div id='method-getDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-getDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-getDuration' class='name expandable'>getDuration</a>( <span class='pre'>transitionType</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the duration on one of the animation objects used by this transition. ...</div><div class='long'><p>Gets the duration on one of the animation objects used by this transition. The\n <code>transitionType</code> parameter determines the animation whose duration\n is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>, which determines\n the animation whose duration is returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>long The duration of the specified animation.\n@see Animator#getDuration()</p>\n</div></li></ul></div></div></div><div id='method-getInterpolator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-getInterpolator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-getInterpolator' class='name expandable'>getInterpolator</a>( <span class='pre'>transitionType</span> ) : Object {android.animation.TimeInterpolator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the interpolator on one of the animation objects used by this transition. ...</div><div class='long'><p>Gets the interpolator on one of the animation objects used by this transition. The\n <code>transitionType</code> parameter determines the animation whose interpolator\n is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>, which determines\n the animation whose interpolator is being returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.animation.TimeInterpolator}</span><div class='sub-desc'><p>TimeInterpolator The interpolator that the specified animation uses.\n@see Animator#setInterpolator(TimeInterpolator)</p>\n</div></li></ul></div></div></div><div id='method-getStagger' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-getStagger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-getStagger' class='name expandable'>getStagger</a>( <span class='pre'>transitionType</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the length of time to delay between starting each animation during one of the\n change animations. ...</div><div class='long'><p>Gets the length of time to delay between starting each animation during one of the\n change animations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>A value of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>, or\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>long The length of time, in milliseconds, to delay before launching the next\n animation in the sequence.</p>\n</div></li></ul></div></div></div><div id='method-getStartDelay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-getStartDelay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-getStartDelay' class='name expandable'>getStartDelay</a>( <span class='pre'>transitionType</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the start delay on one of the animation objects used by this transition. ...</div><div class='long'><p>Gets the start delay on one of the animation objects used by this transition. The\n <code>transitionType</code> parameter determines the animation whose start delay\n is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>, which determines\n the animation whose start delay is returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>long The start delay of the specified animation.\n@see Animator#getStartDelay()</p>\n</div></li></ul></div></div></div><div id='method-getTransitionListeners' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-getTransitionListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-getTransitionListeners' class='name expandable'>getTransitionListeners</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current list of listeners for layout changes. ...</div><div class='long'><p>Gets the current list of listeners for layout changes.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-hideChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-hideChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-hideChild' class='name expandable'>hideChild</a>( <span class='pre'>parent, child, newVisibility</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is called by ViewGroup when a child view is about to be hidden in\n container. ...</div><div class='long'><p>This method is called by ViewGroup when a child view is about to be hidden in\n container. This callback starts the process of a transition; we grab the starting\n values, listen for changes to all of the children of the container, and start appropriate\n animations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parent</span> : Object {ViewGroup}<div class='sub-desc'><p>The parent ViewGroup of the View being hidden.</p>\n</div></li><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>The View being hidden.</p>\n</div></li><li><span class='pre'>newVisibility</span> : Number<div class='sub-desc'><p>The new visibility value of the child View, either\n View.GONE or View.INVISIBLE.</p>\n</div></li></ul></div></div></div><div id='method-isChangingLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-isChangingLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-isChangingLayout' class='name expandable'>isChangingLayout</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if animations are running which animate layout-related properties. ...</div><div class='long'><p>Returns true if animations are running which animate layout-related properties. This\n essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations\n are running, since these animations operate on layout-related properties.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if CHANGE_APPEARING or CHANGE_DISAPPEARING animations are currently\n running.</p>\n</div></li></ul></div></div></div><div id='method-isRunning' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-isRunning' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-isRunning' class='name expandable'>isRunning</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if any of the animations in this transition are currently running. ...</div><div class='long'><p>Returns true if any of the animations in this transition are currently running.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if any animations in the transition are running.</p>\n</div></li></ul></div></div></div><div id='method-isTransitionTypeEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-isTransitionTypeEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-isTransitionTypeEnabled' class='name expandable'>isTransitionTypeEnabled</a>( <span class='pre'>transitionType</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the specified transitionType is enabled for this LayoutTransition object. ...</div><div class='long'><p>Returns whether the specified transitionType is enabled for this LayoutTransition object.\n By default, all transition types except <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a> are enabled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the specified transitionType is currently enabled, false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-removeChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-removeChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-removeChild' class='name expandable'>removeChild</a>( <span class='pre'>parent, child</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is called by ViewGroup when a child view is about to be removed from the\n container. ...</div><div class='long'><p>This method is called by ViewGroup when a child view is about to be removed from the\n container. This callback starts the process of a transition; we grab the starting\n values, listen for changes to all of the children of the container, and start appropriate\n animations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parent</span> : Object {ViewGroup}<div class='sub-desc'><p>The ViewGroup from which the View is being removed.</p>\n</div></li><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>The View being removed from the ViewGroup.</p>\n</div></li></ul></div></div></div><div id='method-removeTransitionListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-removeTransitionListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-removeTransitionListener' class='name expandable'>removeTransitionListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a listener for layout changes. ...</div><div class='long'><p>Remove a listener for layout changes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {LayoutTransition.TransitionListener}<div class='sub-desc'><p>The listener for layout bounds change.</p>\n</div></li></ul></div></div></div><div id='method-setAnimateParentHierarchy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-setAnimateParentHierarchy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-setAnimateParentHierarchy' class='name expandable'>setAnimateParentHierarchy</a>( <span class='pre'>animateParentHierarchy</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will\n cause the default changing animat...</div><div class='long'><p>This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will\n cause the default changing animation to be run on the parent hierarchy as well. This allows\n containers of transitioning views to also transition, which may be necessary in situations\n where the containers bounds change between the before/after states and may clip their\n children during the transition animations. For example, layouts with wrap_content will\n adjust their bounds according to the dimensions of their children.</p>\n\n<p> <p>The default changing transitions animate the bounds and scroll positions of the\n target views. These are the animations that will run on the parent hierarchy, not\n the custom animations that happen to be set on the transition. This allows custom\n behavior for the children of the transitioning container, but uses standard behavior\n of resizing/rescrolling on any changing parents.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>animateParentHierarchy</span> : Boolean<div class='sub-desc'><p>A boolean value indicating whether the parents of\n transitioning views should also be animated during the transition. Default value is true.</p>\n</div></li></ul></div></div></div><div id='method-setAnimator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-setAnimator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-setAnimator' class='name expandable'>setAnimator</a>( <span class='pre'>transitionType, animator</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the animation used during one of the transition types that may run. ...</div><div class='long'><p>Sets the animation used during one of the transition types that may run. Any\n Animator object can be used, but to be most useful in the context of layout\n transitions, the animation should either be a ObjectAnimator or a AnimatorSet\n of animations including PropertyAnimators. Also, these ObjectAnimator objects\n should be able to get and set values on their target objects automatically. For\n example, a ObjectAnimator that animates the property \"left\" is able to set and get the\n <code>left</code> property from the View objects being animated by the layout\n transition. The transition works by setting target objects and properties\n dynamically, according to the pre- and post-layoout values of those objects, so\n having animations that can handle those properties appropriately will work best\n for custom animation. The dynamic setting of values is only the case for the\n CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with\n the values they have.</p>\n\n<p> <p>It is also worth noting that any and all animations (and their underlying\n PropertyValuesHolder objects) will have their start and end values set according\n to the pre- and post-layout values. So, for example, a custom animation on \"alpha\"\n as the CHANGE_APPEARING animation will inherit the real value of alpha on the target\n object (presumably 1) as its starting and ending value when the animation begins.\n Animations which need to use values at the beginning and end that may not match the\n values queried when the transition begins may need to use a different mechanism\n than a standard ObjectAnimator object.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>, which determines the\n animation whose animator is being set.</p>\n</div></li><li><span class='pre'>animator</span> : Object {Animator}<div class='sub-desc'><p>The animation being assigned. A value of <code>null</code> means that no\n animation will be run for the specified transitionType.</p>\n</div></li></ul></div></div></div><div id='method-setDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-setDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-setDuration' class='name expandable'>setDuration</a>( <span class='pre'>transitionType, duration</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the duration on one of the animation objects used by this transition. ...</div><div class='long'><p>Sets the duration on one of the animation objects used by this transition. The\n <code>transitionType</code> parameter determines the animation whose duration\n is being set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>, which determines\n the animation whose duration is being set.</p>\n</div></li><li><span class='pre'>duration</span> : Number<div class='sub-desc'><p>The length of time, in milliseconds, that the specified animation should run.\n@see Animator#setDuration(long)</p>\n</div></li></ul></div></div></div><div id='method-setInterpolator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-setInterpolator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-setInterpolator' class='name expandable'>setInterpolator</a>( <span class='pre'>transitionType, interpolator</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the interpolator on one of the animation objects used by this transition. ...</div><div class='long'><p>Sets the interpolator on one of the animation objects used by this transition. The\n <code>transitionType</code> parameter determines the animation whose interpolator\n is being set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>, which determines\n the animation whose interpolator is being set.</p>\n</div></li><li><span class='pre'>interpolator</span> : Object {TimeInterpolator}<div class='sub-desc'><p>The interpolator that the specified animation should use.\n@see Animator#setInterpolator(TimeInterpolator)</p>\n</div></li></ul></div></div></div><div id='method-setStagger' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-setStagger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-setStagger' class='name expandable'>setStagger</a>( <span class='pre'>transitionType, duration</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the length of time to delay between starting each animation during one of the\n change animations. ...</div><div class='long'><p>Sets the length of time to delay between starting each animation during one of the\n change animations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>A value of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>, or\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>.</p>\n</div></li><li><span class='pre'>duration</span> : Number<div class='sub-desc'><p>The length of time, in milliseconds, to delay before launching the next\n animation in the sequence.</p>\n</div></li></ul></div></div></div><div id='method-setStartDelay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-setStartDelay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-setStartDelay' class='name expandable'>setStartDelay</a>( <span class='pre'>transitionType, delay</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the start delay on one of the animation objects used by this transition. ...</div><div class='long'><p>Sets the start delay on one of the animation objects used by this transition. The\n <code>transitionType</code> parameter determines the animation whose start delay\n is being set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transitionType</span> : Number<div class='sub-desc'><p>One of <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_APPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_APPEARING\" class=\"docClass\">CHANGE_APPEARING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-CHANGE_DISAPPEARING\" class=\"docClass\">CHANGE_DISAPPEARING</a>,\n <a href=\"#!/api/android.animation.LayoutTransition-property-CHANGING\" rel=\"android.animation.LayoutTransition-property-CHANGING\" class=\"docClass\">CHANGING</a>, <a href=\"#!/api/android.animation.LayoutTransition-property-APPEARING\" rel=\"android.animation.LayoutTransition-property-APPEARING\" class=\"docClass\">APPEARING</a>, or <a href=\"#!/api/android.animation.LayoutTransition-property-DISAPPEARING\" rel=\"android.animation.LayoutTransition-property-DISAPPEARING\" class=\"docClass\">DISAPPEARING</a>, which determines\n the animation whose start delay is being set.</p>\n</div></li><li><span class='pre'>delay</span> : Number<div class='sub-desc'><p>The length of time, in milliseconds, to delay before starting the animation.\n@see Animator#setStartDelay(long)</p>\n</div></li></ul></div></div></div><div id='method-showChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.animation.LayoutTransition'>android.animation.LayoutTransition</span><br/><a href='source/LayoutTransition.html#android-animation-LayoutTransition-method-showChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.animation.LayoutTransition-method-showChild' class='name expandable'>showChild</a>( <span class='pre'>parent, child, oldVisibility</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is called by ViewGroup when a child view is about to be made visible in the\n container. ...</div><div class='long'><p>This method is called by ViewGroup when a child view is about to be made visible in the\n container. This callback starts the process of a transition; we grab the starting\n values, listen for changes to all of the children of the container, and start appropriate\n animations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parent</span> : Object {ViewGroup}<div class='sub-desc'><p>The ViewGroup in which the View is being made visible.</p>\n</div></li><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>The View being made visible.</p>\n</div></li><li><span class='pre'>oldVisibility</span> : Number<div class='sub-desc'><p>The previous visibility value of the child View, either\n View.GONE or View.INVISIBLE.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});