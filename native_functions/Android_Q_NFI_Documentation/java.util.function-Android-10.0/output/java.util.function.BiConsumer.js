Ext.data.JsonP.java_util_function_BiConsumer({"tagname":"class","name":"java.util.function.BiConsumer","autodetected":{},"files":[{"filename":"BiConsumer.js","href":"BiConsumer.html#java-util-function-BiConsumer"}],"params":[{"tagname":"params","doc":"<p><T> the type of the first argument to the operation</T></p>\n"},{"tagname":"params","doc":"<p><U> the type of the second argument to the operation</U></p>\n\n<p> @see Consumer</p>\n"}],"since":"1.8","members":[{"name":"accept","tagname":"method","owner":"java.util.function.BiConsumer","id":"method-accept","meta":{}},{"name":"andThen","tagname":"method","owner":"java.util.function.BiConsumer","id":"method-andThen","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.function.BiConsumer","short_doc":"Represents an operation that accepts two input arguments and returns no\n result. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/BiConsumer.html#java-util-function-BiConsumer' target='_blank'>BiConsumer.js</a></div></pre><div class='doc-contents'><p>Represents an operation that accepts two input arguments and returns no\n result.  This is the two-arity specialization of <a href=\"#!/api/java.util.function.Consumer\" rel=\"java.util.function.Consumer\" class=\"docClass\">java.util.function.Consumer</a>.\n Unlike most other functional interfaces, {@code BiConsumer} is expected\n to operate via side-effects.</p>\n\n<p> <p>This is a <a href=\"package-summary.html\">functional interface</a>\n whose functional method is Object).</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> the type of the first argument to the operation</T></p>\n</div></li><li><span class='pre'></span> : <div class='sub-desc'><p><U> the type of the second argument to the operation</U></p>\n\n<p> @see Consumer</p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-accept' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.function.BiConsumer'>java.util.function.BiConsumer</span><br/><a href='source/BiConsumer.html#java-util-function-BiConsumer-method-accept' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.function.BiConsumer-method-accept' class='name expandable'>accept</a>( <span class='pre'>t, u</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs this operation on the given arguments. ...</div><div class='long'><p>Performs this operation on the given arguments.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>t</span> : Object {Object}<div class='sub-desc'><p>the first input argument</p>\n</div></li><li><span class='pre'>u</span> : Object {Object}<div class='sub-desc'><p>the second input argument</p>\n</div></li></ul></div></div></div><div id='method-andThen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.function.BiConsumer'>java.util.function.BiConsumer</span><br/><a href='source/BiConsumer.html#java-util-function-BiConsumer-method-andThen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.function.BiConsumer-method-andThen' class='name expandable'>andThen</a>( <span class='pre'>after</span> ) : Object {java.util.function.BiConsumer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a composed {@code BiConsumer} that performs, in sequence, this\n operation followed by the {@code after} opera...</div><div class='long'><p>Returns a composed {@code BiConsumer} that performs, in sequence, this\n operation followed by the {@code after} operation. If performing either\n operation throws an exception, it is relayed to the caller of the\n composed operation.  If performing this operation throws an exception,\n the {@code after} operation will not be performed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>after</span> : Object {java.util.function.BiConsumer}<div class='sub-desc'><p>the operation to perform after this operation</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.function.BiConsumer}</span><div class='sub-desc'><p>a composed {@code BiConsumer} that performs in sequence this\n operation followed by the {@code after} operation</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code after} is null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});