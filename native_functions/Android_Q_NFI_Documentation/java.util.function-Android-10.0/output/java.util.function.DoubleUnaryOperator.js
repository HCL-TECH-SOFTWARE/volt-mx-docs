Ext.data.JsonP.java_util_function_DoubleUnaryOperator({"tagname":"class","name":"java.util.function.DoubleUnaryOperator","autodetected":{},"files":[{"filename":"DoubleUnaryOperator.js","href":"DoubleUnaryOperator.html#java-util-function-DoubleUnaryOperator"}],"since":"1.8","members":[{"name":"andThen","tagname":"method","owner":"java.util.function.DoubleUnaryOperator","id":"method-andThen","meta":{}},{"name":"applyAsDouble","tagname":"method","owner":"java.util.function.DoubleUnaryOperator","id":"method-applyAsDouble","meta":{}},{"name":"compose","tagname":"method","owner":"java.util.function.DoubleUnaryOperator","id":"method-compose","meta":{}},{"name":"identity","tagname":"method","owner":"java.util.function.DoubleUnaryOperator","id":"method-identity","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.function.DoubleUnaryOperator","short_doc":"Represents an operation on a single {@code double}-valued operand that produces\n a {@code double}-valued result. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/DoubleUnaryOperator.html#java-util-function-DoubleUnaryOperator' target='_blank'>DoubleUnaryOperator.js</a></div></pre><div class='doc-contents'><p>Represents an operation on a single {@code double}-valued operand that produces\n a {@code double}-valued result.  This is the primitive type specialization of\n <a href=\"#!/api/java.util.function.UnaryOperator\" rel=\"java.util.function.UnaryOperator\" class=\"docClass\">java.util.function.UnaryOperator</a> for {@code double}.</p>\n\n<p> <p>This is a <a href=\"package-summary.html\">functional interface</a>\n whose functional method is <a href=\"#!/api/java.util.function.DoubleUnaryOperator-method-applyAsDouble\" rel=\"java.util.function.DoubleUnaryOperator-method-applyAsDouble\" class=\"docClass\">applyAsDouble</a>(double).</p>\n\n<p> @see UnaryOperator</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-andThen' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.function.DoubleUnaryOperator'>java.util.function.DoubleUnaryOperator</span><br/><a href='source/DoubleUnaryOperator.html#java-util-function-DoubleUnaryOperator-method-andThen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.function.DoubleUnaryOperator-method-andThen' class='name expandable'>andThen</a>( <span class='pre'>after</span> ) : Object {java.util.function.DoubleUnaryOperator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a composed operator that first applies this operator to\n its input, and then applies the {@code after} operat...</div><div class='long'><p>Returns a composed operator that first applies this operator to\n its input, and then applies the {@code after} operator to the result.\n If evaluation of either operator throws an exception, it is relayed to\n the caller of the composed operator.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>after</span> : Object {DoubleUnaryOperator}<div class='sub-desc'><p>the operator to apply after this operator is applied</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.function.DoubleUnaryOperator}</span><div class='sub-desc'><p>a composed operator that first applies this operator and then\n applies the {@code after} operator</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if after is null\n@see <a href=\"#!/api/java.util.function.DoubleUnaryOperator-method-compose\" rel=\"java.util.function.DoubleUnaryOperator-method-compose\" class=\"docClass\">compose</a>(DoubleUnaryOperator)</p>\n</div></li></ul></div></div></div><div id='method-applyAsDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.function.DoubleUnaryOperator'>java.util.function.DoubleUnaryOperator</span><br/><a href='source/DoubleUnaryOperator.html#java-util-function-DoubleUnaryOperator-method-applyAsDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.function.DoubleUnaryOperator-method-applyAsDouble' class='name expandable'>applyAsDouble</a>( <span class='pre'>operand</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Applies this operator to the given operand. ...</div><div class='long'><p>Applies this operator to the given operand.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>operand</span> : Number<div class='sub-desc'><p>the operand</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the operator result</p>\n</div></li></ul></div></div></div><div id='method-compose' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.function.DoubleUnaryOperator'>java.util.function.DoubleUnaryOperator</span><br/><a href='source/DoubleUnaryOperator.html#java-util-function-DoubleUnaryOperator-method-compose' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.function.DoubleUnaryOperator-method-compose' class='name expandable'>compose</a>( <span class='pre'>before</span> ) : Object {java.util.function.DoubleUnaryOperator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a composed operator that first applies the {@code before}\n operator to its input, and then applies this opera...</div><div class='long'><p>Returns a composed operator that first applies the {@code before}\n operator to its input, and then applies this operator to the result.\n If evaluation of either operator throws an exception, it is relayed to\n the caller of the composed operator.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>before</span> : Object {DoubleUnaryOperator}<div class='sub-desc'><p>the operator to apply before this operator is applied</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.function.DoubleUnaryOperator}</span><div class='sub-desc'><p>a composed operator that first applies the {@code before}\n operator and then applies this operator</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if before is null\n@see <a href=\"#!/api/java.util.function.DoubleUnaryOperator-method-andThen\" rel=\"java.util.function.DoubleUnaryOperator-method-andThen\" class=\"docClass\">andThen</a>(DoubleUnaryOperator)</p>\n</div></li></ul></div></div></div><div id='method-identity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.function.DoubleUnaryOperator'>java.util.function.DoubleUnaryOperator</span><br/><a href='source/DoubleUnaryOperator.html#java-util-function-DoubleUnaryOperator-method-identity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.function.DoubleUnaryOperator-method-identity' class='name expandable'>identity</a>( <span class='pre'></span> ) : Object {java.util.function.DoubleUnaryOperator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a unary operator that always returns its input argument. ...</div><div class='long'><p>Returns a unary operator that always returns its input argument.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.function.DoubleUnaryOperator}</span><div class='sub-desc'><p>a unary operator that always returns its input argument</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});