Ext.data.JsonP.java_util_function_DoubleConsumer({"tagname":"class","name":"java.util.function.DoubleConsumer","autodetected":{},"files":[{"filename":"DoubleConsumer.js","href":"DoubleConsumer.html#java-util-function-DoubleConsumer"}],"since":"1.8","members":[{"name":"accept","tagname":"method","owner":"java.util.function.DoubleConsumer","id":"method-accept","meta":{}},{"name":"andThen","tagname":"method","owner":"java.util.function.DoubleConsumer","id":"method-andThen","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.function.DoubleConsumer","short_doc":"Represents an operation that accepts a single {@code double}-valued argument and\n returns no result. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/DoubleConsumer.html#java-util-function-DoubleConsumer' target='_blank'>DoubleConsumer.js</a></div></pre><div class='doc-contents'><p>Represents an operation that accepts a single {@code double}-valued argument and\n returns no result.  This is the primitive type specialization of\n <a href=\"#!/api/java.util.function.Consumer\" rel=\"java.util.function.Consumer\" class=\"docClass\">java.util.function.Consumer</a> for {@code double}.  Unlike most other functional interfaces,\n {@code DoubleConsumer} is expected to operate via side-effects.</p>\n\n<p> <p>This is a <a href=\"package-summary.html\">functional interface</a>\n whose functional method is <a href=\"#!/api/java.util.function.DoubleConsumer-method-accept\" rel=\"java.util.function.DoubleConsumer-method-accept\" class=\"docClass\">accept</a>(double).</p>\n\n<p> @see Consumer</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-accept' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.function.DoubleConsumer'>java.util.function.DoubleConsumer</span><br/><a href='source/DoubleConsumer.html#java-util-function-DoubleConsumer-method-accept' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.function.DoubleConsumer-method-accept' class='name expandable'>accept</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs this operation on the given argument. ...</div><div class='long'><p>Performs this operation on the given argument.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Number<div class='sub-desc'><p>the input argument</p>\n</div></li></ul></div></div></div><div id='method-andThen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.function.DoubleConsumer'>java.util.function.DoubleConsumer</span><br/><a href='source/DoubleConsumer.html#java-util-function-DoubleConsumer-method-andThen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.function.DoubleConsumer-method-andThen' class='name expandable'>andThen</a>( <span class='pre'>after</span> ) : Object {java.util.function.DoubleConsumer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a composed {@code DoubleConsumer} that performs, in sequence, this\n operation followed by the {@code after} o...</div><div class='long'><p>Returns a composed {@code DoubleConsumer} that performs, in sequence, this\n operation followed by the {@code after} operation. If performing either\n operation throws an exception, it is relayed to the caller of the\n composed operation.  If performing this operation throws an exception,\n the {@code after} operation will not be performed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>after</span> : Object {DoubleConsumer}<div class='sub-desc'><p>the operation to perform after this operation</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.function.DoubleConsumer}</span><div class='sub-desc'><p>a composed {@code DoubleConsumer} that performs in sequence this\n operation followed by the {@code after} operation</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code after} is null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});