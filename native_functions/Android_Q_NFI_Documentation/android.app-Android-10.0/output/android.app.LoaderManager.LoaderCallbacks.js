Ext.data.JsonP.android_app_LoaderManager_LoaderCallbacks({"tagname":"class","name":"android.app.LoaderManager.LoaderCallbacks","autodetected":{},"files":[{"filename":"LoaderCallbacks.js","href":"LoaderCallbacks.html#android-app-LoaderManager-LoaderCallbacks"}],"deprecated":{"text":"<p>Use the <a href=\"{@docRoot}tools/extras/support-library.html\">\n      Support Library</a> android.support.v4.app.LoaderManager.LoaderCallbacks</p>\n"},"members":[{"name":"onCreateLoader","tagname":"method","owner":"android.app.LoaderManager.LoaderCallbacks","id":"method-onCreateLoader","meta":{}},{"name":"onLoadFinished","tagname":"method","owner":"android.app.LoaderManager.LoaderCallbacks","id":"method-onLoadFinished","meta":{}},{"name":"onLoaderReset","tagname":"method","owner":"android.app.LoaderManager.LoaderCallbacks","id":"method-onLoaderReset","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.app.LoaderManager.LoaderCallbacks","short_doc":"Callback interface for a client to interact with the manager. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/LoaderCallbacks.html#android-app-LoaderManager-LoaderCallbacks' target='_blank'>LoaderCallbacks.js</a></div></pre><div class='doc-contents'><p>Callback interface for a client to interact with the manager.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This class has been <strong>deprecated</strong> </p>\n        <p>Use the <a href=\"{@docRoot}tools/extras/support-library.html\">\n      Support Library</a> android.support.v4.app.LoaderManager.LoaderCallbacks</p>\n\n        </div>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onCreateLoader' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.LoaderManager.LoaderCallbacks'>android.app.LoaderManager.LoaderCallbacks</span><br/><a href='source/LoaderCallbacks.html#android-app-LoaderManager-LoaderCallbacks-method-onCreateLoader' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.LoaderManager.LoaderCallbacks-method-onCreateLoader' class='name expandable'>onCreateLoader</a>( <span class='pre'>id, args</span> ) : Object {android.content.Loader}<span class=\"signature\"></span></div><div class='description'><div class='short'>Instantiate and return a new Loader for the given ID. ...</div><div class='long'><p>Instantiate and return a new Loader for the given ID.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>id</span> : Number<div class='sub-desc'><p>The ID whose loader is to be created.</p>\n</div></li><li><span class='pre'>args</span> : Object {Bundle}<div class='sub-desc'><p>Any arguments supplied by the caller.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.Loader}</span><div class='sub-desc'><p>Return a new Loader instance that is ready to start loading.</p>\n</div></li></ul></div></div></div><div id='method-onLoadFinished' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.LoaderManager.LoaderCallbacks'>android.app.LoaderManager.LoaderCallbacks</span><br/><a href='source/LoaderCallbacks.html#android-app-LoaderManager-LoaderCallbacks-method-onLoadFinished' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.LoaderManager.LoaderCallbacks-method-onLoadFinished' class='name expandable'>onLoadFinished</a>( <span class='pre'>loader, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a previously created loader has finished its load. ...</div><div class='long'><p>Called when a previously created loader has finished its load.  Note\n that normally an application is <em>not</em> allowed to commit fragment\n transactions while in this call, since it can happen after an\n activity's state is saved.  See android.app.FragmentManager.openTransaction() for further discussion on this.</p>\n\n<p> <p>This function is guaranteed to be called prior to the release of\n the last data that was supplied for this Loader.  At this point\n you should remove all use of the old data (since it will be released\n soon), but should not do your own release of the data since its Loader\n owns it and will take care of that.  The Loader will take care of\n management of its data so you don't have to.  In particular:</p>\n\n<p> <ul>\n <li> <p>The Loader will monitor for changes to the data, and report\n them to you through new calls here.  You should not monitor the\n data yourself.  For example, if the data is a android.database.Cursor\n and you place it in a android.widget.CursorAdapter, use\n the android.database.Cursor, int) constructor <em>without</em> passing\n in either android.widget.CursorAdapter.FLAG_AUTO_REQUERY\n or android.widget.CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER\n (that is, use 0 for the flags argument).  This prevents the CursorAdapter\n from doing its own observing of the Cursor, which is not needed since\n when a change happens you will get a new Cursor throw another call\n here.\n <li> The Loader will release the data once it knows the application\n is no longer using it.  For example, if the data is\n a android.database.Cursor from a android.content.CursorLoader,\n you should not call close() on it yourself.  If the Cursor is being placed in a\n android.widget.CursorAdapter, you should use the\n android.widget.CursorAdapter.swapCursor(android.database.Cursor)\n method so that the old Cursor is not closed.\n </li></p></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>loader</span> : Object {android.content.Loader}<div class='sub-desc'><p>The Loader that has finished.</p>\n</div></li><li><span class='pre'>data</span> : Object {Object}<div class='sub-desc'><p>The data generated by the Loader.</p>\n</div></li></ul></div></div></div><div id='method-onLoaderReset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.LoaderManager.LoaderCallbacks'>android.app.LoaderManager.LoaderCallbacks</span><br/><a href='source/LoaderCallbacks.html#android-app-LoaderManager-LoaderCallbacks-method-onLoaderReset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.LoaderManager.LoaderCallbacks-method-onLoaderReset' class='name expandable'>onLoaderReset</a>( <span class='pre'>loader</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a previously created loader is being reset, and thus\n making its data unavailable. ...</div><div class='long'><p>Called when a previously created loader is being reset, and thus\n making its data unavailable.  The application should at this point\n remove any references it has to the Loader's data.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>loader</span> : Object {android.content.Loader}<div class='sub-desc'><p>The Loader that is being reset.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"deprecated":{"text":"<p>Use the <a href=\"{@docRoot}tools/extras/support-library.html\">\n      Support Library</a> android.support.v4.app.LoaderManager.LoaderCallbacks</p>\n"}}});