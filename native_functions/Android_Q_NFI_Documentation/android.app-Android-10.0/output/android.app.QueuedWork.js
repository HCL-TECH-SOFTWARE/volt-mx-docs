Ext.data.JsonP.android_app_QueuedWork({"tagname":"class","name":"android.app.QueuedWork","autodetected":{},"files":[{"filename":"QueuedWork.js","href":"QueuedWork.html#android-app-QueuedWork"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"addFinisher","tagname":"method","owner":"android.app.QueuedWork","id":"method-addFinisher","meta":{}},{"name":"hasPendingWork","tagname":"method","owner":"android.app.QueuedWork","id":"method-hasPendingWork","meta":{}},{"name":"queue","tagname":"method","owner":"android.app.QueuedWork","id":"method-queue","meta":{}},{"name":"removeFinisher","tagname":"method","owner":"android.app.QueuedWork","id":"method-removeFinisher","meta":{}},{"name":"waitToFinish","tagname":"method","owner":"android.app.QueuedWork","id":"method-waitToFinish","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.app.QueuedWork","short_doc":"Internal utility class to keep track of process-global work that's outstanding and hasn't been\n finished yet. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.app.QueuedWork</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/QueuedWork.html#android-app-QueuedWork' target='_blank'>QueuedWork.js</a></div></pre><div class='doc-contents'><p>Internal utility class to keep track of process-global work that's outstanding and hasn't been\n finished yet.</p>\n\n<p> New work will be <a href=\"#!/api/android.app.QueuedWork-method-queue\" rel=\"android.app.QueuedWork-method-queue\" class=\"docClass\">queued</a>.</p>\n\n<p> It is possible to add 'finisher'-runnables that are <a href=\"#!/api/android.app.QueuedWork-method-waitToFinish\" rel=\"android.app.QueuedWork-method-waitToFinish\" class=\"docClass\">guaranteed to be run</a>.\n This is used to make sure the work has been finished.</p>\n\n<p> This was created for writing SharedPreference edits out asynchronously so we'd have a mechanism\n to wait for the writes in Activity.onPause and similar places, but we may use this mechanism for\n other things in the future.</p>\n\n<p> The queued asynchronous work is performed on a separate, dedicated thread.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addFinisher' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.QueuedWork'>android.app.QueuedWork</span><br/><a href='source/QueuedWork.html#android-app-QueuedWork-method-addFinisher' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.QueuedWork-method-addFinisher' class='name expandable'>addFinisher</a>( <span class='pre'>finisher</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a finisher-runnable to wait for asynchronously processed work. ...</div><div class='long'><p>Add a finisher-runnable to wait for <a href=\"#!/api/android.app.QueuedWork-method-queue\" rel=\"android.app.QueuedWork-method-queue\" class=\"docClass\">asynchronously processed work</a>.</p>\n\n<p> Used by SharedPreferences$Editor#startCommit().</p>\n\n<p> Note that this doesn't actually start it running.  This is just a scratch set for callers\n doing async work to keep updated with what's in-flight. In the common case, caller code\n (e.g. SharedPreferences) will pretty quickly call remove() after an add(). The only time\n these Runnables are run is from <a href=\"#!/api/android.app.QueuedWork-method-waitToFinish\" rel=\"android.app.QueuedWork-method-waitToFinish\" class=\"docClass\">waitToFinish</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>finisher</span> : Object {Runnable}<div class='sub-desc'><p>The runnable to add as finisher</p>\n</div></li></ul></div></div></div><div id='method-hasPendingWork' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.QueuedWork'>android.app.QueuedWork</span><br/><a href='source/QueuedWork.html#android-app-QueuedWork-method-hasPendingWork' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.QueuedWork-method-hasPendingWork' class='name expandable'>hasPendingWork</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True iff there is any <a href=\"#!/api/android.app.QueuedWork-method-queue\" rel=\"android.app.QueuedWork-method-queue\" class=\"docClass\">async work queued</a>.</p>\n</div></li></ul></div></div></div><div id='method-queue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.QueuedWork'>android.app.QueuedWork</span><br/><a href='source/QueuedWork.html#android-app-QueuedWork-method-queue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.QueuedWork-method-queue' class='name expandable'>queue</a>( <span class='pre'>work, shouldDelay</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Queue a work-runnable for processing asynchronously. ...</div><div class='long'><p>Queue a work-runnable for processing asynchronously.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>work</span> : Object {Runnable}<div class='sub-desc'><p>The new runnable to process</p>\n</div></li><li><span class='pre'>shouldDelay</span> : Boolean<div class='sub-desc'><p>If the message should be delayed</p>\n</div></li></ul></div></div></div><div id='method-removeFinisher' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.QueuedWork'>android.app.QueuedWork</span><br/><a href='source/QueuedWork.html#android-app-QueuedWork-method-removeFinisher' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.QueuedWork-method-removeFinisher' class='name expandable'>removeFinisher</a>( <span class='pre'>finisher</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a previously added finisher-runnable. ...</div><div class='long'><p>Remove a previously <a href=\"#!/api/android.app.QueuedWork-method-addFinisher\" rel=\"android.app.QueuedWork-method-addFinisher\" class=\"docClass\">added</a> finisher-runnable.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>finisher</span> : Object {Runnable}<div class='sub-desc'><p>The runnable to remove.</p>\n</div></li></ul></div></div></div><div id='method-waitToFinish' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.QueuedWork'>android.app.QueuedWork</span><br/><a href='source/QueuedWork.html#android-app-QueuedWork-method-waitToFinish' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.QueuedWork-method-waitToFinish' class='name expandable'>waitToFinish</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Trigger queued work to be processed immediately. ...</div><div class='long'><p>Trigger queued work to be processed immediately. The queued work is processed on a separate\n thread asynchronous. While doing that run and process all finishers on this thread. The\n finishers can be implemented in a way to check weather the queued work is finished.</p>\n\n<p> Is called from the Activity base class's onPause(), after BroadcastReceiver's onReceive,\n after Service command handling, etc. (so async work is never lost)</p>\n</div></div></div></div></div></div></div>","meta":{}});