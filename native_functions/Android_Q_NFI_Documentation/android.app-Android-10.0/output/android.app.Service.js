Ext.data.JsonP.android_app_Service({"tagname":"class","name":"android.app.Service","autodetected":{},"files":[{"filename":"Service.js","href":"Service.html#android-app-Service"}],"extends":"android.content.ContextWrapper","members":[{"name":"START_CONTINUATION_MASK","tagname":"property","owner":"android.app.Service","id":"property-START_CONTINUATION_MASK","meta":{}},{"name":"START_FLAG_REDELIVERY","tagname":"property","owner":"android.app.Service","id":"property-START_FLAG_REDELIVERY","meta":{}},{"name":"START_FLAG_RETRY","tagname":"property","owner":"android.app.Service","id":"property-START_FLAG_RETRY","meta":{}},{"name":"START_NOT_STICKY","tagname":"property","owner":"android.app.Service","id":"property-START_NOT_STICKY","meta":{}},{"name":"START_REDELIVER_INTENT","tagname":"property","owner":"android.app.Service","id":"property-START_REDELIVER_INTENT","meta":{}},{"name":"START_STICKY","tagname":"property","owner":"android.app.Service","id":"property-START_STICKY","meta":{}},{"name":"START_STICKY_COMPATIBILITY","tagname":"property","owner":"android.app.Service","id":"property-START_STICKY_COMPATIBILITY","meta":{}},{"name":"STOP_FOREGROUND_DETACH","tagname":"property","owner":"android.app.Service","id":"property-STOP_FOREGROUND_DETACH","meta":{}},{"name":"STOP_FOREGROUND_REMOVE","tagname":"property","owner":"android.app.Service","id":"property-STOP_FOREGROUND_REMOVE","meta":{}},{"name":"getApplication","tagname":"method","owner":"android.app.Service","id":"method-getApplication","meta":{}},{"name":"getForegroundServiceType","tagname":"method","owner":"android.app.Service","id":"method-getForegroundServiceType","meta":{}},{"name":"onBind","tagname":"method","owner":"android.app.Service","id":"method-onBind","meta":{}},{"name":"onConfigurationChanged","tagname":"method","owner":"android.app.Service","id":"method-onConfigurationChanged","meta":{}},{"name":"onCreate","tagname":"method","owner":"android.app.Service","id":"method-onCreate","meta":{}},{"name":"onDestroy","tagname":"method","owner":"android.app.Service","id":"method-onDestroy","meta":{}},{"name":"onLowMemory","tagname":"method","owner":"android.app.Service","id":"method-onLowMemory","meta":{}},{"name":"onRebind","tagname":"method","owner":"android.app.Service","id":"method-onRebind","meta":{}},{"name":"onStart","tagname":"method","owner":"android.app.Service","id":"method-onStart","meta":{"deprecated":{"text":"<p>Implement int, int) instead.</p>\n"}}},{"name":"onStartCommand","tagname":"method","owner":"android.app.Service","id":"method-onStartCommand","meta":{}},{"name":"onTaskRemoved","tagname":"method","owner":"android.app.Service","id":"method-onTaskRemoved","meta":{}},{"name":"onTrimMemory","tagname":"method","owner":"android.app.Service","id":"method-onTrimMemory","meta":{}},{"name":"onUnbind","tagname":"method","owner":"android.app.Service","id":"method-onUnbind","meta":{}},{"name":"startForeground","tagname":"method","owner":"android.app.Service","id":"method-startForeground","meta":{}},{"name":"stopForeground","tagname":"method","owner":"android.app.Service","id":"method-stopForeground","meta":{}},{"name":"stopSelf","tagname":"method","owner":"android.app.Service","id":"method-stopSelf","meta":{}},{"name":"stopSelfResult","tagname":"method","owner":"android.app.Service","id":"method-stopSelfResult","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.app.Service","short_doc":"implements android.content.ComponentCallbacks2\n\nA Service is an application component representing either an applicat...","classIcon":"icon-class","superclasses":["android.content.ContextWrapper"],"subclasses":["android.app.InstantAppResolverService","android.app.IntentService"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>android.content.ContextWrapper<div class='subclass '><strong>android.app.Service</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/android.app.InstantAppResolverService' rel='android.app.InstantAppResolverService' class='docClass'>android.app.InstantAppResolverService</a></div><div class='dependency'><a href='#!/api/android.app.IntentService' rel='android.app.IntentService' class='docClass'>android.app.IntentService</a></div><h4>Files</h4><div class='dependency'><a href='source/Service.html#android-app-Service' target='_blank'>Service.js</a></div></pre><div class='doc-contents'><p>implements android.content.ComponentCallbacks2</p>\n\n<p>A Service is an application component representing either an application's desire\n to perform a longer-running operation while not interacting with the user\n or to supply functionality for other applications to use.  Each service\n class must have a corresponding\n &lt;service&gt;\n declaration in its package's <code>AndroidManifest.xml</code>.  Services\n can be started with\n Context.startService() and\n Context.bindService().</p>\n\n<p> <p>Note that services, like other application objects, run in the main\n thread of their hosting process.  This means that, if your service is going\n to do any CPU intensive (such as MP3 playback) or blocking (such as\n networking) operations, it should spawn its own thread in which to do that\n work.  More information on this can be found in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html\">Processes and\n Threads</a>.  The <a href=\"#!/api/android.app.IntentService\" rel=\"android.app.IntentService\" class=\"docClass\">android.app.IntentService</a> class is available\n as a standard implementation of Service that has its own thread where it\n schedules its work to be done.</p></p>\n\n<p> <p>Topics covered here:\n <ol>\n <li><a href=\"#WhatIsAService\">What is a Service?</a>\n <li><a href=\"#ServiceLifecycle\">Service Lifecycle</a>\n <li><a href=\"#Permissions\">Permissions</a>\n <li><a href=\"#ProcessLifecycle\">Process Lifecycle</a>\n <li><a href=\"#LocalServiceSample\">Local Service Sample</a>\n <li><a href=\"#RemoteMessengerServiceSample\">Remote Messenger Service Sample</a>\n </li></li></li></li></li></li></ol></p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For a detailed discussion about how to create services, read the\n <a href=\"{@docRoot}guide/topics/fundamentals/services.html\">Services</a> developer guide.</p>\n </div></p>\n\n<p> <a name=\"WhatIsAService\"></a>\n <h3>What is a Service?</h3></p>\n\n<p> <p>Most confusion about the Service class actually revolves around what\n it is <em>not</em>:</p></p>\n\n<p> <ul>\n <li> A Service is <b>not</b> a separate process.  The Service object itself\n does not imply it is running in its own process; unless otherwise specified,\n it runs in the same process as the application it is part of.\n <li> A Service is <b>not</b> a thread.  It is not a means itself to do work off\n of the main thread (to avoid Application Not Responding errors).\n </li></li></ul></p>\n\n<p> <p>Thus a Service itself is actually very simple, providing two main features:</p></p>\n\n<p> <ul>\n <li>A facility for the application to tell the system <em>about</em>\n something it wants to be doing in the background (even when the user is not\n directly interacting with the application).  This corresponds to calls to\n Context.startService(), which\n ask the system to schedule work for the service, to be run until the service\n or someone else explicitly stop it.\n <li>A facility for an application to expose some of its functionality to\n other applications.  This corresponds to calls to\n Context.bindService(), which\n allows a long-standing connection to be made to the service in order to\n interact with it.\n </li></li></ul></p>\n\n<p> <p>When a Service component is actually created, for either of these reasons,\n all that the system actually does is instantiate the component\n and call its <a href=\"#!/api/android.app.Service-method-onCreate\" rel=\"android.app.Service-method-onCreate\" class=\"docClass\">onCreate</a> and any other appropriate callbacks on the\n main thread.  It is up to the Service to implement these with the appropriate\n behavior, such as creating a secondary thread in which it does its work.</p></p>\n\n<p> <p>Note that because Service itself is so simple, you can make your\n interaction with it as simple or complicated as you want: from treating it\n as a local Java object that you make direct method calls on (as illustrated\n by <a href=\"#LocalServiceSample\">Local Service Sample</a>), to providing\n a full remoteable interface using AIDL.</p></p>\n\n<p> <a name=\"ServiceLifecycle\"></a>\n <h3>Service Lifecycle</h3></p>\n\n<p> <p>There are two reasons that a service can be run by the system.  If someone\n calls Context.startService() then the system will\n retrieve the service (creating it and calling its <a href=\"#!/api/android.app.Service-method-onCreate\" rel=\"android.app.Service-method-onCreate\" class=\"docClass\">onCreate</a> method\n if needed) and then call its <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a> method with the\n arguments supplied by the client.  The service will at this point continue\n running until Context.stopService() or\n <a href=\"#!/api/android.app.Service-method-stopSelf\" rel=\"android.app.Service-method-stopSelf\" class=\"docClass\">stopSelf</a>() is called.  Note that multiple calls to\n Context.startService() do not nest (though they do result in multiple corresponding\n calls to onStartCommand()), so no matter how many times it is started a service\n will be stopped once Context.stopService() or stopSelf() is called; however,\n services can use their <a href=\"#!/api/android.app.Service-method-stopSelf\" rel=\"android.app.Service-method-stopSelf\" class=\"docClass\">stopSelf</a>(int) method to ensure the service is\n not stopped until started intents have been processed.</p>\n\n<p> <p>For started services, there are two additional major modes of operation\n they can decide to run in, depending on the value they return from\n onStartCommand(): <a href=\"#!/api/android.app.Service-property-START_STICKY\" rel=\"android.app.Service-property-START_STICKY\" class=\"docClass\">START_STICKY</a> is used for services that are\n explicitly started and stopped as needed, while <a href=\"#!/api/android.app.Service-property-START_NOT_STICKY\" rel=\"android.app.Service-property-START_NOT_STICKY\" class=\"docClass\">START_NOT_STICKY</a>\n or <a href=\"#!/api/android.app.Service-property-START_REDELIVER_INTENT\" rel=\"android.app.Service-property-START_REDELIVER_INTENT\" class=\"docClass\">START_REDELIVER_INTENT</a> are used for services that should only\n remain running while processing any commands sent to them.  See the linked\n documentation for more detail on the semantics.</p>\n\n<p> <p>Clients can also use Context.bindService() to\n obtain a persistent connection to a service.  This likewise creates the\n service if it is not already running (calling <a href=\"#!/api/android.app.Service-method-onCreate\" rel=\"android.app.Service-method-onCreate\" class=\"docClass\">onCreate</a> while\n doing so), but does not call onStartCommand().  The client will receive the\n android.os.IBinder object that the service returns from its\n <a href=\"#!/api/android.app.Service-method-onBind\" rel=\"android.app.Service-method-onBind\" class=\"docClass\">onBind</a> method, allowing the client to then make calls back\n to the service.  The service will remain running as long as the connection\n is established (whether or not the client retains a reference on the\n service's IBinder).  Usually the IBinder returned is for a complex\n interface that has been <a href=\"{@docRoot}guide/components/aidl.html\">written\n in aidl</a>.</p>\n\n<p> <p>A service can be both started and have connections bound to it.  In such\n a case, the system will keep the service running as long as either it is\n started <em>or</em> there are one or more connections to it with the\n Context.BIND_AUTO_CREATE\n flag.  Once neither\n of these situations hold, the service's <a href=\"#!/api/android.app.Service-method-onDestroy\" rel=\"android.app.Service-method-onDestroy\" class=\"docClass\">onDestroy</a> method is called\n and the service is effectively terminated.  All cleanup (stopping threads,\n unregistering receivers) should be complete upon returning from onDestroy().</p>\n\n<p> <a name=\"Permissions\"></a>\n <h3>Permissions</h3></p>\n\n<p> <p>Global access to a service can be enforced when it is declared in its\n manifest's &lt;service&gt;\n tag.  By doing so, other applications will need to declare a corresponding\n &lt;uses-permission&gt;\n element in their own manifest to be able to start, stop, or bind to\n the service.</p>\n\n<p> <p>As of android.os.Build.VERSION_CODES.GINGERBREAD, when using\n Context.startService(Intent), you can\n also set Intent.FLAG_GRANT_READ_URI_PERMISSION and/or Intent.FLAG_GRANT_WRITE_URI_PERMISSION on the Intent.  This will grant the\n Service temporary access to the specific URIs in the Intent.  Access will\n remain until the Service has called <a href=\"#!/api/android.app.Service-method-stopSelf\" rel=\"android.app.Service-method-stopSelf\" class=\"docClass\">stopSelf</a>(int) for that start\n command or a later one, or until the Service has been completely stopped.\n This works for granting access to the other apps that have not requested\n the permission protecting the Service, or even when the Service is not\n exported at all.</p>\n\n<p> <p>In addition, a service can protect individual IPC calls into it with\n permissions, by calling the\n checkCallingPermission\n method before executing the implementation of that call.</p>\n\n<p> <p>See the <a href=\"{@docRoot}guide/topics/security/security.html\">Security and Permissions</a>\n document for more information on permissions and security in general.</p>\n\n<p> <a name=\"ProcessLifecycle\"></a>\n <h3>Process Lifecycle</h3></p>\n\n<p> <p>The Android system will attempt to keep the process hosting a service\n around as long as the service has been started or has clients bound to it.\n When running low on memory and needing to kill existing processes, the\n priority of a process hosting the service will be the higher of the\n following possibilities:</p>\n\n<p> <ul>\n <li><p>If the service is currently executing code in its\n <a href=\"#!/api/android.app.Service-method-onCreate\" rel=\"android.app.Service-method-onCreate\" class=\"docClass\">onCreate()</a>, <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand()</a>,\n or <a href=\"#!/api/android.app.Service-method-onDestroy\" rel=\"android.app.Service-method-onDestroy\" class=\"docClass\">onDestroy()</a> methods, then the hosting process will\n be a foreground process to ensure this code can execute without\n being killed.\n <li><p>If the service has been started, then its hosting process is considered\n to be less important than any processes that are currently visible to the\n user on-screen, but more important than any process not visible.  Because\n only a few processes are generally visible to the user, this means that\n the service should not be killed except in low memory conditions.  However, since\n the user is not directly aware of a background service, in that state it <em>is</em>\n considered a valid candidate to kill, and you should be prepared for this to\n happen.  In particular, long-running services will be increasingly likely to\n kill and are guaranteed to be killed (and restarted if appropriate) if they\n remain started long enough.\n <li><p>If there are clients bound to the service, then the service's hosting\n process is never less important than the most important client.  That is,\n if one of its clients is visible to the user, then the service itself is\n considered to be visible.  The way a client's importance impacts the service's\n importance can be adjusted through Context.BIND_ABOVE_CLIENT,\n Context.BIND_ALLOW_OOM_MANAGEMENT, Context.BIND_WAIVE_PRIORITY,\n Context.BIND_IMPORTANT, and Context.BIND_ADJUST_WITH_ACTIVITY.\n <li><p>A started service can use the android.app.Notification)\n API to put the service in a foreground state, where the system considers\n it to be something the user is actively aware of and thus not a candidate\n for killing when low on memory.  (It is still theoretically possible for\n the service to be killed under extreme memory pressure from the current\n foreground application, but in practice this should not be a concern.)\n </p></li></p></li></p></li></p></li></ul></p>\n\n<p> <p>Note this means that most of the time your service is running, it may\n be killed by the system if it is under heavy memory pressure.  If this\n happens, the system will later try to restart the service.  An important\n consequence of this is that if you implement <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand()</a>\n to schedule work to be done asynchronously or in another thread, then you\n may want to use <a href=\"#!/api/android.app.Service-property-START_FLAG_REDELIVERY\" rel=\"android.app.Service-property-START_FLAG_REDELIVERY\" class=\"docClass\">START_FLAG_REDELIVERY</a> to have the system\n re-deliver an Intent for you so that it does not get lost if your service\n is killed while processing it.</p>\n\n<p> <p>Other application components running in the same process as the service\n (such as an <a href=\"#!/api/android.app.Activity\" rel=\"android.app.Activity\" class=\"docClass\">android.app.Activity</a>) can, of course, increase the\n importance of the overall\n process beyond just the importance of the service itself.</p>\n\n<p> <a name=\"LocalServiceSample\"></a>\n <h3>Local Service Sample</h3></p>\n\n<p> <p>One of the most common uses of a Service is as a secondary component\n running alongside other parts of an application, in the same process as\n the rest of the components.  All components of an .apk run in the same\n process unless explicitly stated otherwise, so this is a typical situation.</p>\n\n<p> <p>When used in this way, by assuming the\n components are in the same process, you can greatly simplify the interaction\n between them: clients of the service can simply cast the IBinder they\n receive from it to a concrete class published by the service.</p>\n\n<p> <p>An example of this use of a Service is shown here.  First is the Service\n itself, publishing a custom class when bound:</p>\n\n<p> {@sample development/samples/ApiDemos/src/com/example/android/apis/app/LocalService.java\n      service}</p>\n\n<p> <p>With that done, one can now write client code that directly accesses the\n running service, such as:</p>\n\n<p> {@sample development/samples/ApiDemos/src/com/example/android/apis/app/LocalServiceActivities.java\n      bind}</p>\n\n<p> <a name=\"RemoteMessengerServiceSample\"></a>\n <h3>Remote Messenger Service Sample</h3></p>\n\n<p> <p>If you need to be able to write a Service that can perform complicated\n communication with clients in remote processes (beyond simply the use of\n Context.startService to send\n commands to it), then you can use the android.os.Messenger class\n instead of writing full AIDL files.</p>\n\n<p> <p>An example of a Service that uses Messenger as its client interface\n is shown here.  First is the Service itself, publishing a Messenger to\n an internal Handler when bound:</p>\n\n<p> {@sample development/samples/ApiDemos/src/com/example/android/apis/app/MessengerService.java\n      service}</p>\n\n<p> <p>If we want to make this service run in a remote process (instead of the\n standard one for its .apk), we can use <code>android:process</code> in its\n manifest tag to specify one:</p>\n\n<p> {@sample development/samples/ApiDemos/AndroidManifest.xml remote_service_declaration}</p>\n\n<p> <p>Note that the name \"remote\" chosen here is arbitrary, and you can use\n other names if you want additional processes.  The ':' prefix appends the\n name to your package's standard process name.</p>\n\n<p> <p>With that done, clients can now bind to the service and send messages\n to it.  Note that this allows clients to register with it to receive\n messages back as well:</p>\n\n<p> {@sample development/samples/ApiDemos/src/com/example/android/apis/app/MessengerServiceActivities.java\n      bind}</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-START_CONTINUATION_MASK' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-START_CONTINUATION_MASK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-START_CONTINUATION_MASK' class='name expandable'>START_CONTINUATION_MASK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Bits returned by onStartCommand describing how to continue\nthe service if it is killed. ...</div><div class='long'><p>Bits returned by <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a> describing how to continue\nthe service if it is killed.  May be <a href=\"#!/api/android.app.Service-property-START_STICKY\" rel=\"android.app.Service-property-START_STICKY\" class=\"docClass\">START_STICKY</a>,\n<a href=\"#!/api/android.app.Service-property-START_NOT_STICKY\" rel=\"android.app.Service-property-START_NOT_STICKY\" class=\"docClass\">START_NOT_STICKY</a>, <a href=\"#!/api/android.app.Service-property-START_REDELIVER_INTENT\" rel=\"android.app.Service-property-START_REDELIVER_INTENT\" class=\"docClass\">START_REDELIVER_INTENT</a>,\nor <a href=\"#!/api/android.app.Service-property-START_STICKY_COMPATIBILITY\" rel=\"android.app.Service-property-START_STICKY_COMPATIBILITY\" class=\"docClass\">START_STICKY_COMPATIBILITY</a>.</p>\n<p>Defaults to: <code>&quot;15&quot;</code></p></div></div></div><div id='property-START_FLAG_REDELIVERY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-START_FLAG_REDELIVERY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-START_FLAG_REDELIVERY' class='name expandable'>START_FLAG_REDELIVERY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This flag is set in onStartCommand if the Intent is a\nre-delivery of a previously delivered intent, because the servi...</div><div class='long'><p>This flag is set in <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a> if the Intent is a\nre-delivery of a previously delivered intent, because the service\nhad previously returned <a href=\"#!/api/android.app.Service-property-START_REDELIVER_INTENT\" rel=\"android.app.Service-property-START_REDELIVER_INTENT\" class=\"docClass\">START_REDELIVER_INTENT</a> but had been\nkilled before calling <a href=\"#!/api/android.app.Service-method-stopSelf\" rel=\"android.app.Service-method-stopSelf\" class=\"docClass\">stopSelf</a>(int) for that Intent.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-START_FLAG_RETRY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-START_FLAG_RETRY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-START_FLAG_RETRY' class='name expandable'>START_FLAG_RETRY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This flag is set in onStartCommand if the Intent is a\nretry because the original attempt never got to or returned fro...</div><div class='long'><p>This flag is set in <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a> if the Intent is a\nretry because the original attempt never got to or returned from\nint, int).</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-START_NOT_STICKY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-START_NOT_STICKY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-START_NOT_STICKY' class='name expandable'>START_NOT_STICKY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to return from onStartCommand: if this service's\nprocess is killed while it is started (after returning from...</div><div class='long'><p>Constant to return from <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>: if this service's\nprocess is killed while it is started (after returning from\n<a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>), and there are no new start intents to\ndeliver to it, then take the service out of the started state and\ndon't recreate until a future explicit call to\nContext.startService(Intent).  The\nservice will not receive a int, int)\ncall with a null Intent because it will not be restarted if there\nare no pending Intents to deliver.</p>\n\n<p><p>This mode makes sense for things that want to do some work as a\nresult of being started, but can be stopped when under memory pressure\nand will explicit start themselves again later to do more work.  An\nexample of such a service would be one that polls for data from\na server: it could schedule an alarm to poll every N minutes by having\nthe alarm start its service.  When its <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a> is\ncalled from the alarm, it schedules a new alarm for N minutes later,\nand spawns a thread to do its networking.  If its process is killed\nwhile doing that check, the service will not be restarted until the\nalarm goes off.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-START_REDELIVER_INTENT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-START_REDELIVER_INTENT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-START_REDELIVER_INTENT' class='name expandable'>START_REDELIVER_INTENT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to return from onStartCommand: if this service's\nprocess is killed while it is started (after returning from...</div><div class='long'><p>Constant to return from <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>: if this service's\nprocess is killed while it is started (after returning from\n<a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>), then it will be scheduled for a restart\nand the last delivered Intent re-delivered to it again via\n<a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>.  This Intent will remain scheduled for\nredelivery until the service calls <a href=\"#!/api/android.app.Service-method-stopSelf\" rel=\"android.app.Service-method-stopSelf\" class=\"docClass\">stopSelf</a>(int) with the\nstart ID provided to <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>.  The\nservice will not receive a int, int)\ncall with a null Intent because it will only be restarted if\nit is not finished processing all Intents sent to it (and any such\npending events will be delivered at the point of restart).</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-START_STICKY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-START_STICKY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-START_STICKY' class='name expandable'>START_STICKY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to return from onStartCommand: if this service's\nprocess is killed while it is started (after returning from...</div><div class='long'><p>Constant to return from <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>: if this service's\nprocess is killed while it is started (after returning from\n<a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>), then leave it in the started state but\ndon't retain this delivered intent.  Later the system will try to\nre-create the service.  Because it is in the started state, it will\nguarantee to call <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a> after creating the new\nservice instance; if there are not any pending start commands to be\ndelivered to the service, it will be called with a null intent\nobject, so you must take care to check for this.</p>\n\n<p><p>This mode makes sense for things that will be explicitly started\nand stopped to run for arbitrary periods of time, such as a service\nperforming background music playback.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-START_STICKY_COMPATIBILITY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-START_STICKY_COMPATIBILITY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-START_STICKY_COMPATIBILITY' class='name expandable'>START_STICKY_COMPATIBILITY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to return from onStartCommand: compatibility\nversion of START_STICKY that does not guarantee that\nonStartCom...</div><div class='long'><p>Constant to return from <a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a>: compatibility\nversion of <a href=\"#!/api/android.app.Service-property-START_STICKY\" rel=\"android.app.Service-property-START_STICKY\" class=\"docClass\">START_STICKY</a> that does not guarantee that\n<a href=\"#!/api/android.app.Service-method-onStartCommand\" rel=\"android.app.Service-method-onStartCommand\" class=\"docClass\">onStartCommand</a> will be called again after being killed.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-STOP_FOREGROUND_DETACH' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-STOP_FOREGROUND_DETACH' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-STOP_FOREGROUND_DETACH' class='name expandable'>STOP_FOREGROUND_DETACH</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for stopForeground(int): if set, the notification previously provided\nto startForeground will be detached from t...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.Service-method-stopForeground\" rel=\"android.app.Service-method-stopForeground\" class=\"docClass\">stopForeground</a>(int): if set, the notification previously provided\nto <a href=\"#!/api/android.app.Service-method-startForeground\" rel=\"android.app.Service-method-startForeground\" class=\"docClass\">startForeground</a> will be detached from the service.  Only makes sense\nwhen <a href=\"#!/api/android.app.Service-property-STOP_FOREGROUND_REMOVE\" rel=\"android.app.Service-property-STOP_FOREGROUND_REMOVE\" class=\"docClass\">STOP_FOREGROUND_REMOVE</a> is <b>not</b> set -- in this case, the notification\nwill remain shown, but be completely detached from the service and so no longer changed\nexcept through direct calls to the notification manager.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-STOP_FOREGROUND_REMOVE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-property-STOP_FOREGROUND_REMOVE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-property-STOP_FOREGROUND_REMOVE' class='name expandable'>STOP_FOREGROUND_REMOVE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for stopForeground(int): if set, the notification previously provided\nto startForeground will be removed. ...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.Service-method-stopForeground\" rel=\"android.app.Service-method-stopForeground\" class=\"docClass\">stopForeground</a>(int): if set, the notification previously provided\nto <a href=\"#!/api/android.app.Service-method-startForeground\" rel=\"android.app.Service-method-startForeground\" class=\"docClass\">startForeground</a> will be removed.  Otherwise it will remain\nuntil a later call (to android.app.Notification) or\n<a href=\"#!/api/android.app.Service-method-stopForeground\" rel=\"android.app.Service-method-stopForeground\" class=\"docClass\">stopForeground</a>(int) removes it, or the service is destroyed.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getApplication' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-getApplication' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-getApplication' class='name expandable'>getApplication</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the application that owns this service. ...</div><div class='long'><p>Return the application that owns this service.</p>\n</div></div></div><div id='method-getForegroundServiceType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-getForegroundServiceType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-getForegroundServiceType' class='name expandable'>getForegroundServiceType</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>If the service has become a foreground service by calling\n android.app.Notification)\n or android.app.Notification, in...</div><div class='long'><p>If the service has become a foreground service by calling\n android.app.Notification)\n or android.app.Notification, int), <a href=\"#!/api/android.app.Service-method-getForegroundServiceType\" rel=\"android.app.Service-method-getForegroundServiceType\" class=\"docClass\">getForegroundServiceType</a>()\n returns the current foreground service type.</p>\n\n<p> <p>If there is no foregroundServiceType specified\n in manifest, android.app.ServiceInfo.FOREGROUND_SERVICE_TYPE_NONE is returned. </p></p>\n\n<p> <p>If the service is not a foreground service,\n android.app.ServiceInfo.FOREGROUND_SERVICE_TYPE_NONE is returned.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>current foreground service type flags.</p>\n</div></li></ul></div></div></div><div id='method-onBind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onBind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onBind' class='name expandable'>onBind</a>( <span class='pre'>intent</span> ) : Object {android.os.IBinder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the communication channel to the service. ...</div><div class='long'><p>Return the communication channel to the service.  May return null if\n clients can not bind to the service.  The returned\n android.os.IBinder is usually for a complex interface\n that has been <a href=\"{@docRoot}guide/components/aidl.html\">described using\n aidl</a>.</p>\n\n<p> <p><em>Note that unlike other application components, calls on to the\n IBinder interface returned here may not happen on the main thread\n of the process</em>.  More information about the main thread can be found in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html\">Processes and\n Threads</a>.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>The Intent that was used to bind to this service,\n as given to Context.bindService.  Note that any extras that were included with\n the Intent at that point will <em>not</em> be seen here.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.IBinder}</span><div class='sub-desc'><p>Return an IBinder through which clients can call on to the\n         service.</p>\n</div></li></ul></div></div></div><div id='method-onConfigurationChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onConfigurationChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onConfigurationChanged' class='name expandable'>onConfigurationChanged</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onCreate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onCreate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onCreate' class='name expandable'>onCreate</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the system when the service is first created. ...</div><div class='long'><p>Called by the system when the service is first created.  Do not call this method directly.</p>\n</div></div></div><div id='method-onDestroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onDestroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onDestroy' class='name expandable'>onDestroy</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the system to notify a Service that it is no longer used and is being removed. ...</div><div class='long'><p>Called by the system to notify a Service that it is no longer used and is being removed.  The\n service should clean up any resources it holds (threads, registered\n receivers, etc) at this point.  Upon return, there will be no more calls\n in to this Service object and it is effectively dead.  Do not call this method directly.</p>\n</div></div></div><div id='method-onLowMemory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onLowMemory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onLowMemory' class='name expandable'>onLowMemory</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onRebind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onRebind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onRebind' class='name expandable'>onRebind</a>( <span class='pre'>intent</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when new clients have connected to the service, after it had\n previously been notified that all had disconnect...</div><div class='long'><p>Called when new clients have connected to the service, after it had\n previously been notified that all had disconnected in its\n <a href=\"#!/api/android.app.Service-method-onUnbind\" rel=\"android.app.Service-method-onUnbind\" class=\"docClass\">onUnbind</a>.  This will only be called if the implementation\n of <a href=\"#!/api/android.app.Service-method-onUnbind\" rel=\"android.app.Service-method-onUnbind\" class=\"docClass\">onUnbind</a> was overridden to return true.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>The Intent that was used to bind to this service,\n as given to Context.bindService.  Note that any extras that were included with\n the Intent at that point will <em>not</em> be seen here.</p>\n</div></li></ul></div></div></div><div id='method-onStart' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onStart' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onStart' class='name expandable'>onStart</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Implement int, int) instead.</p>\n\n        </div>\n</div></div></div><div id='method-onStartCommand' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onStartCommand' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onStartCommand' class='name expandable'>onStartCommand</a>( <span class='pre'>intent, flags, startId</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the system every time a client explicitly starts the service by calling\n android.content.Context.startServi...</div><div class='long'><p>Called by the system every time a client explicitly starts the service by calling\n android.content.Context.startService, providing the arguments it supplied and a\n unique integer token representing the start request.  Do not call this method directly.</p>\n\n<p> <p>For backwards compatibility, the default implementation calls\n <a href=\"#!/api/android.app.Service-method-onStart\" rel=\"android.app.Service-method-onStart\" class=\"docClass\">onStart</a> and returns either <a href=\"#!/api/android.app.Service-property-START_STICKY\" rel=\"android.app.Service-property-START_STICKY\" class=\"docClass\">START_STICKY</a>\n or <a href=\"#!/api/android.app.Service-property-START_STICKY_COMPATIBILITY\" rel=\"android.app.Service-property-START_STICKY_COMPATIBILITY\" class=\"docClass\">START_STICKY_COMPATIBILITY</a>.</p>\n\n<p> <p class=\"caution\">Note that the system calls this on your\n service's main thread.  A service's main thread is the same\n thread where UI operations take place for Activities running in the\n same process.  You should always avoid stalling the main\n thread's event loop.  When doing long-running operations,\n network calls, or heavy disk I/O, you should kick off a new\n thread, or use android.os.AsyncTask.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>The Intent supplied to android.content.Context.startService,\n as given.  This may be null if the service is being restarted after\n its process has gone away, and it had previously returned anything\n except <a href=\"#!/api/android.app.Service-property-START_STICKY_COMPATIBILITY\" rel=\"android.app.Service-property-START_STICKY_COMPATIBILITY\" class=\"docClass\">START_STICKY_COMPATIBILITY</a>.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Additional data about this start request.</p>\n</div></li><li><span class='pre'>startId</span> : Number<div class='sub-desc'><p>A unique integer representing this specific request to\n start.  Use with stopSelfResult(int).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The return value indicates what semantics the system should\n use for the service's current started state.  It may be one of the\n constants associated with the <a href=\"#!/api/android.app.Service-property-START_CONTINUATION_MASK\" rel=\"android.app.Service-property-START_CONTINUATION_MASK\" class=\"docClass\">START_CONTINUATION_MASK</a> bits.\n@see <a href=\"#!/api/android.app.Service-method-stopSelfResult\" rel=\"android.app.Service-method-stopSelfResult\" class=\"docClass\">stopSelfResult</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-onTaskRemoved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onTaskRemoved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onTaskRemoved' class='name expandable'>onTaskRemoved</a>( <span class='pre'>rootIntent</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This is called if the service is currently running and the user has\n removed a task that comes from the service's app...</div><div class='long'><p>This is called if the service is currently running and the user has\n removed a task that comes from the service's application.  If you have\n set android.app.ServiceInfo.FLAG_STOP_WITH_TASK\n then you will not receive this callback; instead, the service will simply\n be stopped.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rootIntent</span> : Object {Intent}<div class='sub-desc'><p>The original root Intent that was used to launch\n the task that is being removed.</p>\n</div></li></ul></div></div></div><div id='method-onTrimMemory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onTrimMemory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onTrimMemory' class='name expandable'>onTrimMemory</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onUnbind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-onUnbind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-onUnbind' class='name expandable'>onUnbind</a>( <span class='pre'>intent</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when all clients have disconnected from a particular interface\n published by the service. ...</div><div class='long'><p>Called when all clients have disconnected from a particular interface\n published by the service.  The default implementation does nothing and\n returns false.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>The Intent that was used to bind to this service,\n as given to Context.bindService.  Note that any extras that were included with\n the Intent at that point will <em>not</em> be seen here.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Return true if you would like to have the service's\n <a href=\"#!/api/android.app.Service-method-onRebind\" rel=\"android.app.Service-method-onRebind\" class=\"docClass\">onRebind</a> method later called when new clients bind to it.</p>\n</div></li></ul></div></div></div><div id='method-startForeground' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-startForeground' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-startForeground' class='name expandable'>startForeground</a>( <span class='pre'>id, notification, foregroundServiceType</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>An overloaded version of android.app.Notification) with additional\n foregroundServiceType parameter. ...</div><div class='long'><p>An overloaded version of android.app.Notification) with additional\n foregroundServiceType parameter.</p>\n\n<p> <p>Apps built with SDK version android.os.Build.VERSION_CODES.Q or later can specify\n the foreground service types using attribute android.R.attr.foregroundServiceType in\n service element of manifest file. The value of attribute\n android.R.attr.foregroundServiceType can be multiple flags ORed together.</p></p>\n\n<p> <p>The foregroundServiceType parameter must be a subset flags of what is specified in manifest\n attribute android.R.attr.foregroundServiceType, if not, an IllegalArgumentException is\n thrown. Specify foregroundServiceType parameter as\n android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_MANIFEST to use all flags that\n is specified in manifest attribute foregroundServiceType.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>id</span> : Number<div class='sub-desc'><p>The identifier for this notification as per\n Notification)\n NotificationManager.notify(int, Notification); must not be 0.</p>\n</div></li><li><span class='pre'>notification</span> : Object {Notification}<div class='sub-desc'><p>The Notification to be displayed.</p>\n</div></li><li><span class='pre'>foregroundServiceType</span> : Number<div class='sub-desc'><p>must be a subset flags of manifest attribute\n android.R.attr.foregroundServiceType flags.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if param foregroundServiceType is not subset of manifest\n     attribute android.R.attr.foregroundServiceType.\n@see android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MANIFEST</p>\n</div></li></ul></div></div></div><div id='method-stopForeground' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-stopForeground' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-stopForeground' class='name expandable'>stopForeground</a>( <span class='pre'>flags</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove this service from foreground state, allowing it to be killed if\n more memory is needed. ...</div><div class='long'><p>Remove this service from foreground state, allowing it to be killed if\n more memory is needed.  This does not stop the service from running (for that\n you use <a href=\"#!/api/android.app.Service-method-stopSelf\" rel=\"android.app.Service-method-stopSelf\" class=\"docClass\">stopSelf</a>() or related methods), just takes it out of the\n foreground state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>additional behavior options.\n@see <a href=\"#!/api/android.app.Service-method-startForeground\" rel=\"android.app.Service-method-startForeground\" class=\"docClass\">startForeground</a>(int, Notification)</p>\n</div></li></ul></div></div></div><div id='method-stopSelf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-stopSelf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-stopSelf' class='name expandable'>stopSelf</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Old version of stopSelfResult that doesn't return a result. ...</div><div class='long'><p>Old version of <a href=\"#!/api/android.app.Service-method-stopSelfResult\" rel=\"android.app.Service-method-stopSelfResult\" class=\"docClass\">stopSelfResult</a> that doesn't return a result.\n@see <a href=\"#!/api/android.app.Service-method-stopSelfResult\" rel=\"android.app.Service-method-stopSelfResult\" class=\"docClass\">stopSelfResult</a></p>\n</div></div></div><div id='method-stopSelfResult' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.Service'>android.app.Service</span><br/><a href='source/Service.html#android-app-Service-method-stopSelfResult' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.Service-method-stopSelfResult' class='name expandable'>stopSelfResult</a>( <span class='pre'>startId</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Stop the service if the most recent time it was started was\n startId. ...</div><div class='long'><p>Stop the service if the most recent time it was started was\n <var>startId</var>.  This is the same as calling android.content.Context.stopService for this particular service but allows you to\n safely avoid stopping if there is a start request from a client that you\n haven't yet seen in <a href=\"#!/api/android.app.Service-method-onStart\" rel=\"android.app.Service-method-onStart\" class=\"docClass\">onStart</a>.</p>\n\n<p> <p><em>Be careful about ordering of your calls to this function.</em>.\n If you call this function with the most-recently received ID before\n you have called it for previously received IDs, the service will be\n immediately stopped anyway.  If you may end up processing IDs out\n of order (such as by dispatching them on separate threads), then you\n are responsible for stopping them in the same order you received them.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>startId</span> : Number<div class='sub-desc'><p>The most recent start identifier received in <a href=\"#!/api/android.app.Service-method-onStart\" rel=\"android.app.Service-method-onStart\" class=\"docClass\">onStart</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if the startId matches the last start request\n and the service will be stopped, else false.\n@see <a href=\"#!/api/android.app.Service-method-stopSelf\" rel=\"android.app.Service-method-stopSelf\" class=\"docClass\">stopSelf</a>()</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});