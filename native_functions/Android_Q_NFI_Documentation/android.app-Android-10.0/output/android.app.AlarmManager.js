Ext.data.JsonP.android_app_AlarmManager({"tagname":"class","name":"android.app.AlarmManager","autodetected":{},"files":[{"filename":"AlarmManager.js","href":"AlarmManager.html#android-app-AlarmManager"}],"extends":"java.lang.Object","members":[{"name":"ACTION_NEXT_ALARM_CLOCK_CHANGED","tagname":"property","owner":"android.app.AlarmManager","id":"property-ACTION_NEXT_ALARM_CLOCK_CHANGED","meta":{}},{"name":"ELAPSED_REALTIME","tagname":"property","owner":"android.app.AlarmManager","id":"property-ELAPSED_REALTIME","meta":{}},{"name":"ELAPSED_REALTIME_WAKEUP","tagname":"property","owner":"android.app.AlarmManager","id":"property-ELAPSED_REALTIME_WAKEUP","meta":{}},{"name":"INTERVAL_DAY","tagname":"property","owner":"android.app.AlarmManager","id":"property-INTERVAL_DAY","meta":{}},{"name":"INTERVAL_FIFTEEN_MINUTES","tagname":"property","owner":"android.app.AlarmManager","id":"property-INTERVAL_FIFTEEN_MINUTES","meta":{}},{"name":"INTERVAL_HALF_DAY","tagname":"property","owner":"android.app.AlarmManager","id":"property-INTERVAL_HALF_DAY","meta":{}},{"name":"INTERVAL_HALF_HOUR","tagname":"property","owner":"android.app.AlarmManager","id":"property-INTERVAL_HALF_HOUR","meta":{}},{"name":"INTERVAL_HOUR","tagname":"property","owner":"android.app.AlarmManager","id":"property-INTERVAL_HOUR","meta":{}},{"name":"RTC","tagname":"property","owner":"android.app.AlarmManager","id":"property-RTC","meta":{}},{"name":"RTC_WAKEUP","tagname":"property","owner":"android.app.AlarmManager","id":"property-RTC_WAKEUP","meta":{}},{"name":"cancel","tagname":"method","owner":"android.app.AlarmManager","id":"method-cancel","meta":{}},{"name":"setAlarmClock","tagname":"method","owner":"android.app.AlarmManager","id":"method-setAlarmClock","meta":{}},{"name":"setAndAllowWhileIdle","tagname":"method","owner":"android.app.AlarmManager","id":"method-setAndAllowWhileIdle","meta":{}},{"name":"setExact","tagname":"method","owner":"android.app.AlarmManager","id":"method-setExact","meta":{}},{"name":"setExactAndAllowWhileIdle","tagname":"method","owner":"android.app.AlarmManager","id":"method-setExactAndAllowWhileIdle","meta":{}},{"name":"setInexactRepeating","tagname":"method","owner":"android.app.AlarmManager","id":"method-setInexactRepeating","meta":{}},{"name":"setRepeating","tagname":"method","owner":"android.app.AlarmManager","id":"method-setRepeating","meta":{}},{"name":"setTime","tagname":"method","owner":"android.app.AlarmManager","id":"method-setTime","meta":{}},{"name":"setTimeZone","tagname":"method","owner":"android.app.AlarmManager","id":"method-setTimeZone","meta":{}},{"name":"setWindow","tagname":"method","owner":"android.app.AlarmManager","id":"method-setWindow","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.app.AlarmManager","short_doc":"This class provides access to the system alarm services. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.app.AlarmManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AlarmManager.html#android-app-AlarmManager' target='_blank'>AlarmManager.js</a></div></pre><div class='doc-contents'><p>This class provides access to the system alarm services.  These allow you\n to schedule your application to be run at some point in the future.  When\n an alarm goes off, the Intent that had been registered for it\n is broadcast by the system, automatically starting the target application\n if it is not already running.  Registered alarms are retained while the\n device is asleep (and can optionally wake the device up if they go off\n during that time), but will be cleared if it is turned off and rebooted.</p>\n\n<p> <p>The Alarm Manager holds a CPU wake lock as long as the alarm receiver's\n onReceive() method is executing. This guarantees that the phone will not sleep\n until you have finished handling the broadcast. Once onReceive() returns, the\n Alarm Manager releases this wake lock. This means that the phone will in some\n cases sleep as soon as your onReceive() method completes.  If your alarm receiver\n called Context.startService(), it\n is possible that the phone will sleep before the requested service is launched.\n To prevent this, your BroadcastReceiver and Service will need to implement a\n separate wake lock policy to ensure that the phone continues running until the\n service becomes available.</p>\n\n<p> <p><b>Note: The Alarm Manager is intended for cases where you want to have\n your application code run at a specific time, even if your application is\n not currently running.  For normal timing operations (ticks, timeouts,\n etc) it is easier and much more efficient to use\n android.os.Handler.</b></p>\n\n<p> <p class=\"caution\"><strong>Note:</strong> Beginning with API 19\n (android.os.Build.VERSION_CODES.KITKAT) alarm delivery is inexact:\n the OS will shift alarms in order to minimize wakeups and battery use.  There are\n new APIs to support applications which need strict delivery guarantees; see\n long, long, android.app.PendingIntent) and\n long, android.app.PendingIntent).  Applications whose {@code targetSdkVersion}\n is earlier than API 19 will continue to see the previous behavior in which all\n alarms are delivered exactly when requested.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ACTION_NEXT_ALARM_CLOCK_CHANGED' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-ACTION_NEXT_ALARM_CLOCK_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-ACTION_NEXT_ALARM_CLOCK_CHANGED' class='name expandable'>ACTION_NEXT_ALARM_CLOCK_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast Action: Sent after the value returned by\ngetNextAlarmClock() has changed. ...</div><div class='long'><p>Broadcast Action: Sent after the value returned by\ngetNextAlarmClock() has changed.</p>\n\n<p class=\"note\">This is a protected intent that can only be sent by the system.\nIt is only sent to registered receivers.</p>\n\n<p>Defaults to: <code>&quot;android.app.action.NEXT_ALARM_CLOCK_CHANGED&quot;</code></p></div></div></div><div id='property-ELAPSED_REALTIME' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-ELAPSED_REALTIME' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME' class='name expandable'>ELAPSED_REALTIME</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Alarm time in SystemClock.elapsedRealtime() (time since boot, including sleep). ...</div><div class='long'><p>Alarm time in SystemClock.elapsedRealtime() (time since boot, including sleep).\nThis alarm does not wake the device up; if it goes off while the device\nis asleep, it will not be delivered until the next time the device\nwakes up.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-ELAPSED_REALTIME_WAKEUP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-ELAPSED_REALTIME_WAKEUP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP' class='name expandable'>ELAPSED_REALTIME_WAKEUP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Alarm time in SystemClock.elapsedRealtime() (time since boot, including sleep),\nwhich will wake up the device when it...</div><div class='long'><p>Alarm time in SystemClock.elapsedRealtime() (time since boot, including sleep),\nwhich will wake up the device when it goes off.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-INTERVAL_DAY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-INTERVAL_DAY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-INTERVAL_DAY' class='name expandable'>INTERVAL_DAY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android pr...</div><div class='long'><p>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android prior to API 19.</p>\n<p>Defaults to: <code>&quot;86400000&quot;</code></p></div></div></div><div id='property-INTERVAL_FIFTEEN_MINUTES' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-INTERVAL_FIFTEEN_MINUTES' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-INTERVAL_FIFTEEN_MINUTES' class='name expandable'>INTERVAL_FIFTEEN_MINUTES</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android pr...</div><div class='long'><p>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android prior to API 19.</p>\n<p>Defaults to: <code>&quot;900000&quot;</code></p></div></div></div><div id='property-INTERVAL_HALF_DAY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-INTERVAL_HALF_DAY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-INTERVAL_HALF_DAY' class='name expandable'>INTERVAL_HALF_DAY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android pr...</div><div class='long'><p>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android prior to API 19.</p>\n<p>Defaults to: <code>&quot;43200000&quot;</code></p></div></div></div><div id='property-INTERVAL_HALF_HOUR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-INTERVAL_HALF_HOUR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-INTERVAL_HALF_HOUR' class='name expandable'>INTERVAL_HALF_HOUR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android pr...</div><div class='long'><p>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android prior to API 19.</p>\n<p>Defaults to: <code>&quot;1800000&quot;</code></p></div></div></div><div id='property-INTERVAL_HOUR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-INTERVAL_HOUR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-INTERVAL_HOUR' class='name expandable'>INTERVAL_HOUR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android pr...</div><div class='long'><p>Available inexact recurrence interval recognized by\nlong, long, android.app.PendingIntent)\nwhen running on Android prior to API 19.</p>\n<p>Defaults to: <code>&quot;3600000&quot;</code></p></div></div></div><div id='property-RTC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-RTC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-RTC' class='name expandable'>RTC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Alarm time in System.currentTimeMillis()\n(wall clock time in UTC). ...</div><div class='long'><p>Alarm time in System.currentTimeMillis()\n(wall clock time in UTC).  This alarm does not wake the\ndevice up; if it goes off while the device is asleep, it will not be\ndelivered until the next time the device wakes up.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-RTC_WAKEUP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-property-RTC_WAKEUP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-property-RTC_WAKEUP' class='name expandable'>RTC_WAKEUP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Alarm time in System.currentTimeMillis()\n(wall clock time in UTC), which will wake up the device when\nit goes off. ...</div><div class='long'><p>Alarm time in System.currentTimeMillis()\n(wall clock time in UTC), which will wake up the device when\nit goes off.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cancel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-cancel' class='name expandable'>cancel</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove any alarm scheduled to be delivered to the given android.app.AlarmManager.OnAlarmListener. ...</div><div class='long'><p>Remove any alarm scheduled to be delivered to the given <a href=\"#!/api/android.app.AlarmManager.OnAlarmListener\" rel=\"android.app.AlarmManager.OnAlarmListener\" class=\"docClass\">android.app.AlarmManager.OnAlarmListener</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {AlarmManager.OnAlarmListener}<div class='sub-desc'><p>OnAlarmListener instance that is the target of a currently-set alarm.</p>\n</div></li></ul></div></div></div><div id='method-setAlarmClock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setAlarmClock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setAlarmClock' class='name expandable'>setAlarmClock</a>( <span class='pre'>info, operation</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Schedule an alarm that represents an alarm clock, which will be used to notify the user\n when it goes off. ...</div><div class='long'><p>Schedule an alarm that represents an alarm clock, which will be used to notify the user\n when it goes off.  The expectation is that when this alarm triggers, the application will\n further wake up the device to tell the user about the alarm -- turning on the screen,\n playing a sound, vibrating, etc.  As such, the system will typically also use the\n information supplied here to tell the user about this upcoming alarm if appropriate.</p>\n\n<p> <p>Due to the nature of this kind of alarm, similar to <a href=\"#!/api/android.app.AlarmManager-method-setExactAndAllowWhileIdle\" rel=\"android.app.AlarmManager-method-setExactAndAllowWhileIdle\" class=\"docClass\">setExactAndAllowWhileIdle</a>,\n these alarms will be allowed to trigger even if the system is in a low-power idle\n (a.k.a. doze) mode.  The system may also do some prep-work when it sees that such an\n alarm coming up, to reduce the amount of background work that could happen if this\n causes the device to fully wake up -- this is to avoid situations such as a large number\n of devices having an alarm set at the same time in the morning, all waking up at that\n time and suddenly swamping the network with pending background work.  As such, these\n types of alarms can be extremely expensive on battery use and should only be used for\n their intended purpose.</p></p>\n\n<p> <p>\n This method is like long, android.app.PendingIntent), but implies\n <a href=\"#!/api/android.app.AlarmManager-property-RTC_WAKEUP\" rel=\"android.app.AlarmManager-property-RTC_WAKEUP\" class=\"docClass\">RTC_WAKEUP</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>info</span> : Object {AlarmManager.AlarmClockInfo}<div class='sub-desc'>\n</div></li><li><span class='pre'>operation</span> : Object {PendingIntent}<div class='sub-desc'><p>Action to perform when the alarm goes off;\n        typically comes from IntentSender.getBroadcast().\n@see #set\n@see <a href=\"#!/api/android.app.AlarmManager-method-setRepeating\" rel=\"android.app.AlarmManager-method-setRepeating\" class=\"docClass\">setRepeating</a>\n@see <a href=\"#!/api/android.app.AlarmManager-method-setWindow\" rel=\"android.app.AlarmManager-method-setWindow\" class=\"docClass\">setWindow</a>\n@see <a href=\"#!/api/android.app.AlarmManager-method-setExact\" rel=\"android.app.AlarmManager-method-setExact\" class=\"docClass\">setExact</a>\n@see <a href=\"#!/api/android.app.AlarmManager-method-cancel\" rel=\"android.app.AlarmManager-method-cancel\" class=\"docClass\">cancel</a>\n@see #getNextAlarmClock()\n@see android.content.Context#sendBroadcast\n@see android.content.Context#registerReceiver\n@see android.content.Intent#filterEquals</p>\n</div></li></ul></div></div></div><div id='method-setAndAllowWhileIdle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setAndAllowWhileIdle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setAndAllowWhileIdle' class='name expandable'>setAndAllowWhileIdle</a>( <span class='pre'>type, triggerAtMillis, operation</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Like long, android.app.PendingIntent), but this alarm will be allowed to execute\n even when the system is in low-powe...</div><div class='long'><p>Like long, android.app.PendingIntent), but this alarm will be allowed to execute\n even when the system is in low-power idle (a.k.a. doze) modes.  This type of alarm must\n <b>only</b> be used for situations where it is actually required that the alarm go off while\n in idle -- a reasonable example would be for a calendar notification that should make a\n sound so the user is aware of it.  When the alarm is dispatched, the app will also be\n added to the system's temporary whitelist for approximately 10 seconds to allow that\n application to acquire further wake locks in which to complete its work.</p>\n\n<p> <p>These alarms can significantly impact the power use\n of the device when idle (and thus cause significant battery blame to the app scheduling\n them), so they should be used with care.  To reduce abuse, there are restrictions on how\n frequently these alarms will go off for a particular application.\n Under normal system operation, it will not dispatch these\n alarms more than about every minute (at which point every such pending alarm is\n dispatched); when in low-power idle modes this duration may be significantly longer,\n such as 15 minutes.</p></p>\n\n<p> <p>Unlike other alarms, the system is free to reschedule this type of alarm to happen\n out of order with any other alarms, even those from the same app.  This will clearly happen\n when the device is idle (since this alarm can go off while idle, when any other alarms\n from the app will be held until later), but may also happen even when not idle.</p></p>\n\n<p> <p>Regardless of the app's target SDK version, this call always allows batching of the\n alarm.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Number<div class='sub-desc'><p>type of alarm.</p>\n</div></li><li><span class='pre'>triggerAtMillis</span> : Number<div class='sub-desc'><p>time in milliseconds that the alarm should go\n off, using the appropriate clock (depending on the alarm type).</p>\n</div></li><li><span class='pre'>operation</span> : Object {PendingIntent}<div class='sub-desc'><p>Action to perform when the alarm goes off;\n typically comes from IntentSender.getBroadcast().\n@see #set(int, long, PendingIntent)\n@see <a href=\"#!/api/android.app.AlarmManager-method-setExactAndAllowWhileIdle\" rel=\"android.app.AlarmManager-method-setExactAndAllowWhileIdle\" class=\"docClass\">setExactAndAllowWhileIdle</a>\n@see <a href=\"#!/api/android.app.AlarmManager-method-cancel\" rel=\"android.app.AlarmManager-method-cancel\" class=\"docClass\">cancel</a>\n@see android.content.Context#sendBroadcast\n@see android.content.Context#registerReceiver\n@see android.content.Intent#filterEquals\n@see <a href=\"#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME\" rel=\"android.app.AlarmManager-property-ELAPSED_REALTIME\" class=\"docClass\">ELAPSED_REALTIME</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP\" rel=\"android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP\" class=\"docClass\">ELAPSED_REALTIME_WAKEUP</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-RTC\" rel=\"android.app.AlarmManager-property-RTC\" class=\"docClass\">RTC</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-RTC_WAKEUP\" rel=\"android.app.AlarmManager-property-RTC_WAKEUP\" class=\"docClass\">RTC_WAKEUP</a></p>\n</div></li></ul></div></div></div><div id='method-setExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setExact' class='name expandable'>setExact</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Direct callback version of long, android.app.PendingIntent). ...</div><div class='long'><p>Direct callback version of long, android.app.PendingIntent).  Rather\n than supplying a PendingIntent to be sent when the alarm time is reached, this variant\n supplies an <a href=\"#!/api/android.app.AlarmManager.OnAlarmListener\" rel=\"android.app.AlarmManager.OnAlarmListener\" class=\"docClass\">android.app.AlarmManager.OnAlarmListener</a> instance that will be invoked at that time.\n <p>\n The OnAlarmListener's onAlarm() method will be\n invoked via the specified target Handler, or on the application's main looper\n if {@code null} is passed as the {@code targetHandler} parameter.</p>\n</div></div></div><div id='method-setExactAndAllowWhileIdle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setExactAndAllowWhileIdle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setExactAndAllowWhileIdle' class='name expandable'>setExactAndAllowWhileIdle</a>( <span class='pre'>type, triggerAtMillis, operation</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Like long, android.app.PendingIntent), but this alarm will be allowed to execute\n even when the system is in low-powe...</div><div class='long'><p>Like long, android.app.PendingIntent), but this alarm will be allowed to execute\n even when the system is in low-power idle modes.  If you don't need exact scheduling of\n the alarm but still need to execute while idle, consider using\n <a href=\"#!/api/android.app.AlarmManager-method-setAndAllowWhileIdle\" rel=\"android.app.AlarmManager-method-setAndAllowWhileIdle\" class=\"docClass\">setAndAllowWhileIdle</a>.  This type of alarm must <b>only</b>\n be used for situations where it is actually required that the alarm go off while in\n idle -- a reasonable example would be for a calendar notification that should make a\n sound so the user is aware of it.  When the alarm is dispatched, the app will also be\n added to the system's temporary whitelist for approximately 10 seconds to allow that\n application to acquire further wake locks in which to complete its work.</p>\n\n<p> <p>These alarms can significantly impact the power use\n of the device when idle (and thus cause significant battery blame to the app scheduling\n them), so they should be used with care.  To reduce abuse, there are restrictions on how\n frequently these alarms will go off for a particular application.\n Under normal system operation, it will not dispatch these\n alarms more than about every minute (at which point every such pending alarm is\n dispatched); when in low-power idle modes this duration may be significantly longer,\n such as 15 minutes.</p></p>\n\n<p> <p>Unlike other alarms, the system is free to reschedule this type of alarm to happen\n out of order with any other alarms, even those from the same app.  This will clearly happen\n when the device is idle (since this alarm can go off while idle, when any other alarms\n from the app will be held until later), but may also happen even when not idle.\n Note that the OS will allow itself more flexibility for scheduling these alarms than\n regular exact alarms, since the application has opted into this behavior.  When the\n device is idle it may take even more liberties with scheduling in order to optimize\n for battery life.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Number<div class='sub-desc'><p>type of alarm.</p>\n</div></li><li><span class='pre'>triggerAtMillis</span> : Number<div class='sub-desc'><p>time in milliseconds that the alarm should go\n        off, using the appropriate clock (depending on the alarm type).</p>\n</div></li><li><span class='pre'>operation</span> : Object {PendingIntent}<div class='sub-desc'><p>Action to perform when the alarm goes off;\n        typically comes from IntentSender.getBroadcast().\n@see #set\n@see <a href=\"#!/api/android.app.AlarmManager-method-setRepeating\" rel=\"android.app.AlarmManager-method-setRepeating\" class=\"docClass\">setRepeating</a>\n@see <a href=\"#!/api/android.app.AlarmManager-method-setWindow\" rel=\"android.app.AlarmManager-method-setWindow\" class=\"docClass\">setWindow</a>\n@see <a href=\"#!/api/android.app.AlarmManager-method-cancel\" rel=\"android.app.AlarmManager-method-cancel\" class=\"docClass\">cancel</a>\n@see android.content.Context#sendBroadcast\n@see android.content.Context#registerReceiver\n@see android.content.Intent#filterEquals\n@see <a href=\"#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME\" rel=\"android.app.AlarmManager-property-ELAPSED_REALTIME\" class=\"docClass\">ELAPSED_REALTIME</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP\" rel=\"android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP\" class=\"docClass\">ELAPSED_REALTIME_WAKEUP</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-RTC\" rel=\"android.app.AlarmManager-property-RTC\" class=\"docClass\">RTC</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-RTC_WAKEUP\" rel=\"android.app.AlarmManager-property-RTC_WAKEUP\" class=\"docClass\">RTC_WAKEUP</a></p>\n</div></li></ul></div></div></div><div id='method-setInexactRepeating' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setInexactRepeating' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setInexactRepeating' class='name expandable'>setInexactRepeating</a>( <span class='pre'>type, triggerAtMillis, intervalMillis, operation</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Schedule a repeating alarm that has inexact trigger time requirements;\n for example, an alarm that repeats every hour...</div><div class='long'><p>Schedule a repeating alarm that has inexact trigger time requirements;\n for example, an alarm that repeats every hour, but not necessarily at\n the top of every hour.  These alarms are more power-efficient than\n the strict recurrences traditionally supplied by <a href=\"#!/api/android.app.AlarmManager-method-setRepeating\" rel=\"android.app.AlarmManager-method-setRepeating\" class=\"docClass\">setRepeating</a>, since the\n system can adjust alarms' delivery times to cause them to fire simultaneously,\n avoiding waking the device from sleep more than necessary.</p>\n\n<p> <p>Your alarm's first trigger will not be before the requested time,\n but it might not occur for almost a full interval after that time.  In\n addition, while the overall period of the repeating alarm will be as\n requested, the time between any two successive firings of the alarm\n may vary.  If your application demands very low jitter, use\n one-shot alarms with an appropriate window instead; see long, long, android.app.PendingIntent) and\n long, android.app.PendingIntent).</p>\n\n<p> <p class=\"note\">\n As of API 19, all repeating alarms are inexact.  Because this method has\n been available since API 3, your application can safely call it and be\n assured that it will get similar behavior on both current and older versions\n of Android.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Number<div class='sub-desc'><p>type of alarm.</p>\n</div></li><li><span class='pre'>triggerAtMillis</span> : Number<div class='sub-desc'><p>time in milliseconds that the alarm should first\n go off, using the appropriate clock (depending on the alarm type).  This\n is inexact: the alarm will not fire before this time, but there may be a\n delay of almost an entire alarm interval before the first invocation of\n the alarm.</p>\n</div></li><li><span class='pre'>intervalMillis</span> : Number<div class='sub-desc'><p>interval in milliseconds between subsequent repeats\n of the alarm.  Prior to API 19, if this is one of INTERVAL_FIFTEEN_MINUTES,\n INTERVAL_HALF_HOUR, INTERVAL_HOUR, INTERVAL_HALF_DAY, or INTERVAL_DAY\n then the alarm will be phase-aligned with other alarms to reduce the\n number of wakeups.  Otherwise, the alarm will be set as though the\n application had called <a href=\"#!/api/android.app.AlarmManager-method-setRepeating\" rel=\"android.app.AlarmManager-method-setRepeating\" class=\"docClass\">setRepeating</a>.  As of API 19, all repeating\n alarms will be inexact and subject to batching with other alarms regardless\n of their stated repeat interval.</p>\n</div></li><li><span class='pre'>operation</span> : Object {PendingIntent}<div class='sub-desc'><p>Action to perform when the alarm goes off;\n typically comes from IntentSender.getBroadcast().\n@see android.os.Handler\n@see #set\n@see <a href=\"#!/api/android.app.AlarmManager-method-cancel\" rel=\"android.app.AlarmManager-method-cancel\" class=\"docClass\">cancel</a>\n@see android.content.Context#sendBroadcast\n@see android.content.Context#registerReceiver\n@see android.content.Intent#filterEquals\n@see <a href=\"#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME\" rel=\"android.app.AlarmManager-property-ELAPSED_REALTIME\" class=\"docClass\">ELAPSED_REALTIME</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP\" rel=\"android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP\" class=\"docClass\">ELAPSED_REALTIME_WAKEUP</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-RTC\" rel=\"android.app.AlarmManager-property-RTC\" class=\"docClass\">RTC</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-RTC_WAKEUP\" rel=\"android.app.AlarmManager-property-RTC_WAKEUP\" class=\"docClass\">RTC_WAKEUP</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-INTERVAL_FIFTEEN_MINUTES\" rel=\"android.app.AlarmManager-property-INTERVAL_FIFTEEN_MINUTES\" class=\"docClass\">INTERVAL_FIFTEEN_MINUTES</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-INTERVAL_HALF_HOUR\" rel=\"android.app.AlarmManager-property-INTERVAL_HALF_HOUR\" class=\"docClass\">INTERVAL_HALF_HOUR</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-INTERVAL_HOUR\" rel=\"android.app.AlarmManager-property-INTERVAL_HOUR\" class=\"docClass\">INTERVAL_HOUR</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-INTERVAL_HALF_DAY\" rel=\"android.app.AlarmManager-property-INTERVAL_HALF_DAY\" class=\"docClass\">INTERVAL_HALF_DAY</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-INTERVAL_DAY\" rel=\"android.app.AlarmManager-property-INTERVAL_DAY\" class=\"docClass\">INTERVAL_DAY</a></p>\n</div></li></ul></div></div></div><div id='method-setRepeating' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setRepeating' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setRepeating' class='name expandable'>setRepeating</a>( <span class='pre'>type, triggerAtMillis, intervalMillis, operation</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Schedule a repeating alarm. ...</div><div class='long'><p>Schedule a repeating alarm.  <b>Note: for timing operations (ticks,\n timeouts, etc) it is easier and much more efficient to use\n android.os.Handler.</b>  If there is already an alarm scheduled\n for the same IntentSender, it will first be canceled.</p>\n\n<p> <p>Like set, except you can also supply a period at which\n the alarm will automatically repeat.  This alarm continues\n repeating until explicitly removed with <a href=\"#!/api/android.app.AlarmManager-method-cancel\" rel=\"android.app.AlarmManager-method-cancel\" class=\"docClass\">cancel</a>.  If the stated\n trigger time is in the past, the alarm will be triggered immediately, with an\n alarm count depending on how far in the past the trigger time is relative\n to the repeat interval.</p>\n\n<p> <p>If an alarm is delayed (by system sleep, for example, for non\n _WAKEUP alarm types), a skipped repeat will be delivered as soon as\n possible.  After that, future alarms will be delivered according to the\n original schedule; they do not drift over time.  For example, if you have\n set a recurring alarm for the top of every hour but the phone was asleep\n from 7:45 until 8:45, an alarm will be sent as soon as the phone awakens,\n then the next alarm will be sent at 9:00.</p>\n\n<p> <p>If your application wants to allow the delivery times to drift in\n order to guarantee that at least a certain time interval always elapses\n between alarms, then the approach to take is to use one-time alarms,\n scheduling the next one yourself when handling each alarm delivery.</p>\n\n<p> <p class=\"note\">\n <b>Note:</b> as of API 19, all repeating alarms are inexact.  If your\n application needs precise delivery times then it must use one-time\n exact alarms, rescheduling each time as described above. Legacy applications\n whose {@code targetSdkVersion} is earlier than API 19 will continue to have all\n of their alarms, including repeating alarms, treated as exact.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : Number<div class='sub-desc'><p>type of alarm.</p>\n</div></li><li><span class='pre'>triggerAtMillis</span> : Number<div class='sub-desc'><p>time in milliseconds that the alarm should first\n go off, using the appropriate clock (depending on the alarm type).</p>\n</div></li><li><span class='pre'>intervalMillis</span> : Number<div class='sub-desc'><p>interval in milliseconds between subsequent repeats\n of the alarm.</p>\n</div></li><li><span class='pre'>operation</span> : Object {PendingIntent}<div class='sub-desc'><p>Action to perform when the alarm goes off;\n typically comes from IntentSender.getBroadcast().\n@see android.os.Handler\n@see #set\n@see <a href=\"#!/api/android.app.AlarmManager-method-setExact\" rel=\"android.app.AlarmManager-method-setExact\" class=\"docClass\">setExact</a>\n@see <a href=\"#!/api/android.app.AlarmManager-method-setWindow\" rel=\"android.app.AlarmManager-method-setWindow\" class=\"docClass\">setWindow</a>\n@see <a href=\"#!/api/android.app.AlarmManager-method-cancel\" rel=\"android.app.AlarmManager-method-cancel\" class=\"docClass\">cancel</a>\n@see android.content.Context#sendBroadcast\n@see android.content.Context#registerReceiver\n@see android.content.Intent#filterEquals\n@see <a href=\"#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME\" rel=\"android.app.AlarmManager-property-ELAPSED_REALTIME\" class=\"docClass\">ELAPSED_REALTIME</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP\" rel=\"android.app.AlarmManager-property-ELAPSED_REALTIME_WAKEUP\" class=\"docClass\">ELAPSED_REALTIME_WAKEUP</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-RTC\" rel=\"android.app.AlarmManager-property-RTC\" class=\"docClass\">RTC</a>\n@see <a href=\"#!/api/android.app.AlarmManager-property-RTC_WAKEUP\" rel=\"android.app.AlarmManager-property-RTC_WAKEUP\" class=\"docClass\">RTC_WAKEUP</a></p>\n</div></li></ul></div></div></div><div id='method-setTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setTime' class='name expandable'>setTime</a>( <span class='pre'>millis</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the system wall clock time. ...</div><div class='long'><p>Set the system wall clock time.\n Requires the permission android.permission.SET_TIME.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>millis</span> : Number<div class='sub-desc'><p>time in milliseconds since the Epoch</p>\n</div></li></ul></div></div></div><div id='method-setTimeZone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setTimeZone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setTimeZone' class='name expandable'>setTimeZone</a>( <span class='pre'>timeZone</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the system's persistent default time zone. ...</div><div class='long'><p>Sets the system's persistent default time zone. This is the time zone for all apps, even\n after a reboot. Use java.util.TimeZone.setDefault if you just want to change the\n time zone within your app, and even then prefer to pass an explicit\n java.util.TimeZone to APIs that require it rather than changing the time zone for\n all threads.</p>\n\n<p> <p> On android M and above, it is an error to pass in a non-Olson timezone to this\n function. Note that this is a bad idea on all Android releases because POSIX and\n the {@code TimeZone} class have opposite interpretations of {@code '+'} and {@code '-'}\n in the same non-Olson ID.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeZone</span> : String<div class='sub-desc'><p>one of the Olson ids from the list returned by\n     java.util.TimeZone.getAvailableIDs</p>\n</div></li></ul></div></div></div><div id='method-setWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.AlarmManager'>android.app.AlarmManager</span><br/><a href='source/AlarmManager.html#android-app-AlarmManager-method-setWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.AlarmManager-method-setWindow' class='name expandable'>setWindow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Direct callback version of long, long, android.app.PendingIntent). ...</div><div class='long'><p>Direct callback version of long, long, android.app.PendingIntent).  Rather\n than supplying a PendingIntent to be sent when the alarm time is reached, this variant\n supplies an <a href=\"#!/api/android.app.AlarmManager.OnAlarmListener\" rel=\"android.app.AlarmManager.OnAlarmListener\" class=\"docClass\">android.app.AlarmManager.OnAlarmListener</a> instance that will be invoked at that time.\n <p>\n The OnAlarmListener onAlarm() method will be\n invoked via the specified target Handler, or on the application's main looper\n if {@code null} is passed as the {@code targetHandler} parameter.</p>\n</div></div></div></div></div></div></div>","meta":{}});