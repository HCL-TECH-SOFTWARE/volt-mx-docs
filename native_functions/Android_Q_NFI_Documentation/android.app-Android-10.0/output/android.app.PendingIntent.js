Ext.data.JsonP.android_app_PendingIntent({"tagname":"class","name":"android.app.PendingIntent","autodetected":{},"files":[{"filename":"PendingIntent.js","href":"PendingIntent.html#android-app-PendingIntent"}],"extends":"java.lang.Object","members":[{"name":"CREATOR","tagname":"property","owner":"android.app.PendingIntent","id":"property-CREATOR","meta":{}},{"name":"FLAG_CANCEL_CURRENT","tagname":"property","owner":"android.app.PendingIntent","id":"property-FLAG_CANCEL_CURRENT","meta":{}},{"name":"FLAG_IMMUTABLE","tagname":"property","owner":"android.app.PendingIntent","id":"property-FLAG_IMMUTABLE","meta":{}},{"name":"FLAG_NO_CREATE","tagname":"property","owner":"android.app.PendingIntent","id":"property-FLAG_NO_CREATE","meta":{}},{"name":"FLAG_ONE_SHOT","tagname":"property","owner":"android.app.PendingIntent","id":"property-FLAG_ONE_SHOT","meta":{}},{"name":"FLAG_UPDATE_CURRENT","tagname":"property","owner":"android.app.PendingIntent","id":"property-FLAG_UPDATE_CURRENT","meta":{}},{"name":"cancel","tagname":"method","owner":"android.app.PendingIntent","id":"method-cancel","meta":{}},{"name":"describeContents","tagname":"method","owner":"android.app.PendingIntent","id":"method-describeContents","meta":{}},{"name":"equals","tagname":"method","owner":"android.app.PendingIntent","id":"method-equals","meta":{}},{"name":"getActivities","tagname":"method","owner":"android.app.PendingIntent","id":"method-getActivities","meta":{}},{"name":"getActivity","tagname":"method","owner":"android.app.PendingIntent","id":"method-getActivity","meta":{}},{"name":"getBroadcast","tagname":"method","owner":"android.app.PendingIntent","id":"method-getBroadcast","meta":{}},{"name":"getCreatorPackage","tagname":"method","owner":"android.app.PendingIntent","id":"method-getCreatorPackage","meta":{}},{"name":"getCreatorUid","tagname":"method","owner":"android.app.PendingIntent","id":"method-getCreatorUid","meta":{}},{"name":"getCreatorUserHandle","tagname":"method","owner":"android.app.PendingIntent","id":"method-getCreatorUserHandle","meta":{}},{"name":"getForegroundService","tagname":"method","owner":"android.app.PendingIntent","id":"method-getForegroundService","meta":{}},{"name":"getIntentSender","tagname":"method","owner":"android.app.PendingIntent","id":"method-getIntentSender","meta":{}},{"name":"getService","tagname":"method","owner":"android.app.PendingIntent","id":"method-getService","meta":{}},{"name":"getTargetPackage","tagname":"method","owner":"android.app.PendingIntent","id":"method-getTargetPackage","meta":{"deprecated":{"text":"<p>Renamed to getCreatorPackage().</p>\n"}}},{"name":"hashCode","tagname":"method","owner":"android.app.PendingIntent","id":"method-hashCode","meta":{}},{"name":"readPendingIntentOrNullFromParcel","tagname":"method","owner":"android.app.PendingIntent","id":"method-readPendingIntentOrNullFromParcel","meta":{}},{"name":"send","tagname":"method","owner":"android.app.PendingIntent","id":"method-send","meta":{}},{"name":"toString","tagname":"method","owner":"android.app.PendingIntent","id":"method-toString","meta":{}},{"name":"writePendingIntentOrNullToParcel","tagname":"method","owner":"android.app.PendingIntent","id":"method-writePendingIntentOrNullToParcel","meta":{}},{"name":"writeToParcel","tagname":"method","owner":"android.app.PendingIntent","id":"method-writeToParcel","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.app.PendingIntent","short_doc":"implements android.os.Parcelable\n\nA description of an Intent and target action to perform with it. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.app.PendingIntent</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/PendingIntent.html#android-app-PendingIntent' target='_blank'>PendingIntent.js</a></div></pre><div class='doc-contents'><p>implements android.os.Parcelable</p>\n\n<p>A description of an Intent and target action to perform with it.  Instances\n of this class are created with <a href=\"#!/api/android.app.PendingIntent-method-getActivity\" rel=\"android.app.PendingIntent-method-getActivity\" class=\"docClass\">getActivity</a>, <a href=\"#!/api/android.app.PendingIntent-method-getActivities\" rel=\"android.app.PendingIntent-method-getActivities\" class=\"docClass\">getActivities</a>,\n <a href=\"#!/api/android.app.PendingIntent-method-getBroadcast\" rel=\"android.app.PendingIntent-method-getBroadcast\" class=\"docClass\">getBroadcast</a>, and <a href=\"#!/api/android.app.PendingIntent-method-getService\" rel=\"android.app.PendingIntent-method-getService\" class=\"docClass\">getService</a>; the returned object can be\n handed to other applications so that they can perform the action you\n described on your behalf at a later time.</p>\n\n<p> <p>By giving a PendingIntent to another application,\n you are granting it the right to perform the operation you have specified\n as if the other application was yourself (with the same permissions and\n identity).  As such, you should be careful about how you build the PendingIntent:\n almost always, for example, the base Intent you supply should have the component\n name explicitly set to one of your own components, to ensure it is ultimately\n sent there and nowhere else.</p>\n\n<p> <p>A PendingIntent itself is simply a reference to a token maintained by\n the system describing the original data used to retrieve it.  This means\n that, even if its owning application's process is killed, the\n PendingIntent itself will remain usable from other processes that\n have been given it.  If the creating application later re-retrieves the\n same kind of PendingIntent (same operation, same Intent action, data,\n categories, and components, and same flags), it will receive a PendingIntent\n representing the same token if that is still valid, and can thus call\n <a href=\"#!/api/android.app.PendingIntent-method-cancel\" rel=\"android.app.PendingIntent-method-cancel\" class=\"docClass\">cancel</a> to remove it.</p>\n\n<p> <p>Because of this behavior, it is important to know when two Intents\n are considered to be the same for purposes of retrieving a PendingIntent.\n A common mistake people make is to create multiple PendingIntent objects\n with Intents that only vary in their \"extra\" contents, expecting to get\n a different PendingIntent each time.  This does <em>not</em> happen.  The\n parts of the Intent that are used for matching are the same ones defined\n by Intent.filterEquals.  If you use two\n Intent objects that are equivalent as per\n Intent.filterEquals, then you will get\n the same PendingIntent for both of them.</p>\n\n<p> <p>There are two typical ways to deal with this.</p>\n\n<p> <p>If you truly need multiple distinct PendingIntent objects active at\n the same time (such as to use as two notifications that are both shown\n at the same time), then you will need to ensure there is something that\n is different about them to associate them with different PendingIntents.\n This may be any of the Intent attributes considered by\n Intent.filterEquals, or different\n request code integers supplied to <a href=\"#!/api/android.app.PendingIntent-method-getActivity\" rel=\"android.app.PendingIntent-method-getActivity\" class=\"docClass\">getActivity</a>, <a href=\"#!/api/android.app.PendingIntent-method-getActivities\" rel=\"android.app.PendingIntent-method-getActivities\" class=\"docClass\">getActivities</a>,\n <a href=\"#!/api/android.app.PendingIntent-method-getBroadcast\" rel=\"android.app.PendingIntent-method-getBroadcast\" class=\"docClass\">getBroadcast</a>, or <a href=\"#!/api/android.app.PendingIntent-method-getService\" rel=\"android.app.PendingIntent-method-getService\" class=\"docClass\">getService</a>.</p>\n\n<p> <p>If you only need one PendingIntent active at a time for any of the\n Intents you will use, then you can alternatively use the flags\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" class=\"docClass\">FLAG_CANCEL_CURRENT</a> or <a href=\"#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" class=\"docClass\">FLAG_UPDATE_CURRENT</a> to either\n cancel or modify whatever current PendingIntent is associated with the\n Intent you are supplying.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-CREATOR' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-property-CREATOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-property-CREATOR' class='name expandable'>CREATOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-FLAG_CANCEL_CURRENT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-property-FLAG_CANCEL_CURRENT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-property-FLAG_CANCEL_CURRENT' class='name expandable'>FLAG_CANCEL_CURRENT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag indicating that if the described PendingIntent already exists,\nthe current one should be canceled before generat...</div><div class='long'><p>Flag indicating that if the described PendingIntent already exists,\nthe current one should be canceled before generating a new one.\nFor use with <a href=\"#!/api/android.app.PendingIntent-method-getActivity\" rel=\"android.app.PendingIntent-method-getActivity\" class=\"docClass\">getActivity</a>, <a href=\"#!/api/android.app.PendingIntent-method-getBroadcast\" rel=\"android.app.PendingIntent-method-getBroadcast\" class=\"docClass\">getBroadcast</a>, and\n<a href=\"#!/api/android.app.PendingIntent-method-getService\" rel=\"android.app.PendingIntent-method-getService\" class=\"docClass\">getService</a>. <p>You can use\nthis to retrieve a new PendingIntent when you are only changing the\nextra data in the Intent; by canceling the previous pending intent,\nthis ensures that only entities given the new data will be able to\nlaunch it.  If this assurance is not an issue, consider\n<a href=\"#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" class=\"docClass\">FLAG_UPDATE_CURRENT</a>.</p>\n<p>Defaults to: <code>&quot;268435456&quot;</code></p></div></div></div><div id='property-FLAG_IMMUTABLE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-property-FLAG_IMMUTABLE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-property-FLAG_IMMUTABLE' class='name expandable'>FLAG_IMMUTABLE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag indicating that the created PendingIntent should be immutable. ...</div><div class='long'><p>Flag indicating that the created PendingIntent should be immutable.\nThis means that the additional intent argument passed to the send\nmethods to fill in unpopulated properties of this intent will be\nignored.</p>\n<p>Defaults to: <code>&quot;67108864&quot;</code></p></div></div></div><div id='property-FLAG_NO_CREATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-property-FLAG_NO_CREATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE' class='name expandable'>FLAG_NO_CREATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag indicating that if the described PendingIntent does not\nalready exist, then simply return null instead of creati...</div><div class='long'><p>Flag indicating that if the described PendingIntent does not\nalready exist, then simply return null instead of creating it.\nFor use with <a href=\"#!/api/android.app.PendingIntent-method-getActivity\" rel=\"android.app.PendingIntent-method-getActivity\" class=\"docClass\">getActivity</a>, <a href=\"#!/api/android.app.PendingIntent-method-getBroadcast\" rel=\"android.app.PendingIntent-method-getBroadcast\" class=\"docClass\">getBroadcast</a>, and\n<a href=\"#!/api/android.app.PendingIntent-method-getService\" rel=\"android.app.PendingIntent-method-getService\" class=\"docClass\">getService</a>.</p>\n<p>Defaults to: <code>&quot;536870912&quot;</code></p></div></div></div><div id='property-FLAG_ONE_SHOT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-property-FLAG_ONE_SHOT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-property-FLAG_ONE_SHOT' class='name expandable'>FLAG_ONE_SHOT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag indicating that this PendingIntent can be used only once. ...</div><div class='long'><p>Flag indicating that this PendingIntent can be used only once.\nFor use with <a href=\"#!/api/android.app.PendingIntent-method-getActivity\" rel=\"android.app.PendingIntent-method-getActivity\" class=\"docClass\">getActivity</a>, <a href=\"#!/api/android.app.PendingIntent-method-getBroadcast\" rel=\"android.app.PendingIntent-method-getBroadcast\" class=\"docClass\">getBroadcast</a>, and\n<a href=\"#!/api/android.app.PendingIntent-method-getService\" rel=\"android.app.PendingIntent-method-getService\" class=\"docClass\">getService</a>. <p>If set, after\n<a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a>() is called on it, it will be automatically\ncanceled for you and any future attempt to send through it will fail.</p>\n<p>Defaults to: <code>&quot;1073741824&quot;</code></p></div></div></div><div id='property-FLAG_UPDATE_CURRENT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-property-FLAG_UPDATE_CURRENT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT' class='name expandable'>FLAG_UPDATE_CURRENT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag indicating that if the described PendingIntent already exists,\nthen keep it but replace its extra data with what...</div><div class='long'><p>Flag indicating that if the described PendingIntent already exists,\nthen keep it but replace its extra data with what is in this new\nIntent. For use with <a href=\"#!/api/android.app.PendingIntent-method-getActivity\" rel=\"android.app.PendingIntent-method-getActivity\" class=\"docClass\">getActivity</a>, <a href=\"#!/api/android.app.PendingIntent-method-getBroadcast\" rel=\"android.app.PendingIntent-method-getBroadcast\" class=\"docClass\">getBroadcast</a>, and\n<a href=\"#!/api/android.app.PendingIntent-method-getService\" rel=\"android.app.PendingIntent-method-getService\" class=\"docClass\">getService</a>. <p>This can be used if you are creating intents where only the\nextras change, and don't care that any entities that received your\nprevious PendingIntent will be able to launch it with your new\nextras even if they are not explicitly given to it.</p>\n<p>Defaults to: <code>&quot;134217728&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cancel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-cancel' class='name expandable'>cancel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancel a currently active PendingIntent. ...</div><div class='long'><p>Cancel a currently active PendingIntent.  Only the original application\n owning a PendingIntent can cancel it.</p>\n</div></div></div><div id='method-describeContents' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-describeContents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-describeContents' class='name expandable'>describeContents</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-equals' class='name expandable'>equals</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Comparison operator on two PendingIntent objects, such that true\n is returned then they both represent the same opera...</div><div class='long'><p>Comparison operator on two PendingIntent objects, such that true\n is returned then they both represent the same operation from the\n same package.  This allows you to use <a href=\"#!/api/android.app.PendingIntent-method-getActivity\" rel=\"android.app.PendingIntent-method-getActivity\" class=\"docClass\">getActivity</a>,\n <a href=\"#!/api/android.app.PendingIntent-method-getBroadcast\" rel=\"android.app.PendingIntent-method-getBroadcast\" class=\"docClass\">getBroadcast</a>, or <a href=\"#!/api/android.app.PendingIntent-method-getService\" rel=\"android.app.PendingIntent-method-getService\" class=\"docClass\">getService</a> multiple times (even\n across a process being killed), resulting in different PendingIntent\n objects but whose equals() method identifies them as being the same\n operation.</p>\n</div></div></div><div id='method-getActivities' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getActivities' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getActivities' class='name expandable'>getActivities</a>( <span class='pre'>context, requestCode, intents, flags</span> ) : Object {android.app.PendingIntent}<span class=\"signature\"></span></div><div class='description'><div class='short'>Like int, Intent, int), but allows an\n array of Intents to be supplied. ...</div><div class='long'><p>Like int, Intent, int), but allows an\n array of Intents to be supplied.  The last Intent in the array is\n taken as the primary key for the PendingIntent, like the single Intent\n given to int, Intent, int).  Upon sending\n the resulting PendingIntent, all of the Intents are started in the same\n way as they would be by passing them to Context.startActivities(Intent[]).</p>\n\n<p> <p class=\"note\">\n The <em>first</em> intent in the array will be started outside of the context of an\n existing activity, so you must use the Intent.FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.  (Activities after\n the first in the array are started in the context of the previous activity\n in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.)\n </p></p>\n\n<p> <p class=\"note\">\n The <em>last</em> intent in the array represents the key for the\n PendingIntent.  In other words, it is the significant element for matching\n (as done with the single intent given to int, Intent, int),\n its content will be the subject of replacement by\n int, Intent) and <a href=\"#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" class=\"docClass\">FLAG_UPDATE_CURRENT</a>, etc.\n This is because it is the most specific of the supplied intents, and the\n UI the user actually sees when the intents are started.\n </p></p>\n\n<p> <p class=\"note\">For security reasons, the android.content.Intent objects\n you supply here should almost always be <em>explicit intents</em>,\n that is specify an explicit component to be delivered to through\n Class) Intent.setClass</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>The Context in which this PendingIntent should start\n the activity.</p>\n</div></li><li><span class='pre'>requestCode</span> : Number<div class='sub-desc'><p>Private request code for the sender</p>\n</div></li><li><span class='pre'>intents</span> : Object {android.content.Intent[]}<div class='sub-desc'><p>Array of Intents of the activities to be launched.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>May be <a href=\"#!/api/android.app.PendingIntent-property-FLAG_ONE_SHOT\" rel=\"android.app.PendingIntent-property-FLAG_ONE_SHOT\" class=\"docClass\">FLAG_ONE_SHOT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" class=\"docClass\">FLAG_CANCEL_CURRENT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" class=\"docClass\">FLAG_UPDATE_CURRENT</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_IMMUTABLE\" rel=\"android.app.PendingIntent-property-FLAG_IMMUTABLE\" class=\"docClass\">FLAG_IMMUTABLE</a> or any of the flags as supported by\n Intent.fillIn() to control which unspecified parts\n of the intent that can be supplied when the actual send happens.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.PendingIntent}</span><div class='sub-desc'><p>Returns an existing or new PendingIntent matching the given\n parameters.  May return null only if <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a> has been\n supplied.</p>\n</div></li></ul></div></div></div><div id='method-getActivity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getActivity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getActivity' class='name expandable'>getActivity</a>( <span class='pre'>context, requestCode, intent, flags, options</span> ) : Object {android.app.PendingIntent}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve a PendingIntent that will start a new activity, like calling\n Context.startActivity(Intent). ...</div><div class='long'><p>Retrieve a PendingIntent that will start a new activity, like calling\n Context.startActivity(Intent).\n Note that the activity will be started outside of the context of an\n existing activity, so you must use the Intent.FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.</p>\n\n<p> <p class=\"note\">For security reasons, the android.content.Intent\n you supply here should almost always be an <em>explicit intent</em>,\n that is specify an explicit component to be delivered to through\n Class) Intent.setClass</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>The Context in which this PendingIntent should start\n the activity.</p>\n</div></li><li><span class='pre'>requestCode</span> : Number<div class='sub-desc'><p>Private request code for the sender</p>\n</div></li><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>Intent of the activity to be launched.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>May be <a href=\"#!/api/android.app.PendingIntent-property-FLAG_ONE_SHOT\" rel=\"android.app.PendingIntent-property-FLAG_ONE_SHOT\" class=\"docClass\">FLAG_ONE_SHOT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" class=\"docClass\">FLAG_CANCEL_CURRENT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" class=\"docClass\">FLAG_UPDATE_CURRENT</a>,\n or any of the flags as supported by\n Intent.fillIn() to control which unspecified parts\n of the intent that can be supplied when the actual send happens.</p>\n</div></li><li><span class='pre'>options</span> : Object {Bundle}<div class='sub-desc'><p>Additional options for how the Activity should be started.\n May be null if there are no options.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.PendingIntent}</span><div class='sub-desc'><p>Returns an existing or new PendingIntent matching the given\n parameters.  May return null only if <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a> has been\n supplied.</p>\n</div></li></ul></div></div></div><div id='method-getBroadcast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getBroadcast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getBroadcast' class='name expandable'>getBroadcast</a>( <span class='pre'>context, requestCode, intent, flags</span> ) : Object {android.app.PendingIntent}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve a PendingIntent that will perform a broadcast, like calling\n Context.sendBroadcast(). ...</div><div class='long'><p>Retrieve a PendingIntent that will perform a broadcast, like calling\n Context.sendBroadcast().</p>\n\n<p> <p class=\"note\">For security reasons, the android.content.Intent\n you supply here should almost always be an <em>explicit intent</em>,\n that is specify an explicit component to be delivered to through\n Class) Intent.setClass</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>The Context in which this PendingIntent should perform\n the broadcast.</p>\n</div></li><li><span class='pre'>requestCode</span> : Number<div class='sub-desc'><p>Private request code for the sender</p>\n</div></li><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>The Intent to be broadcast.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>May be <a href=\"#!/api/android.app.PendingIntent-property-FLAG_ONE_SHOT\" rel=\"android.app.PendingIntent-property-FLAG_ONE_SHOT\" class=\"docClass\">FLAG_ONE_SHOT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" class=\"docClass\">FLAG_CANCEL_CURRENT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" class=\"docClass\">FLAG_UPDATE_CURRENT</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_IMMUTABLE\" rel=\"android.app.PendingIntent-property-FLAG_IMMUTABLE\" class=\"docClass\">FLAG_IMMUTABLE</a> or any of the flags as supported by\n Intent.fillIn() to control which unspecified parts\n of the intent that can be supplied when the actual send happens.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.PendingIntent}</span><div class='sub-desc'><p>Returns an existing or new PendingIntent matching the given\n parameters.  May return null only if <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a> has been\n supplied.</p>\n</div></li></ul></div></div></div><div id='method-getCreatorPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getCreatorPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getCreatorPackage' class='name expandable'>getCreatorPackage</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the package name of the application that created this\n PendingIntent, that is the identity under which you wil...</div><div class='long'><p>Return the package name of the application that created this\n PendingIntent, that is the identity under which you will actually be\n sending the Intent.  The returned string is supplied by the system, so\n that an application can not spoof its package.</p>\n\n<p> <p class=\"note\">Be careful about how you use this.  All this tells you is\n who created the PendingIntent.  It does <strong>not</strong> tell you who\n handed the PendingIntent to you: that is, PendingIntent objects are intended to be\n passed between applications, so the PendingIntent you receive from an application\n could actually be one it received from another application, meaning the result\n you get here will identify the original application.  Because of this, you should\n only use this information to identify who you expect to be interacting with\n through a <a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a> call, not who gave you the PendingIntent.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The package name of the PendingIntent, or null if there is\n none associated with it.</p>\n</div></li></ul></div></div></div><div id='method-getCreatorUid' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getCreatorUid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getCreatorUid' class='name expandable'>getCreatorUid</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the uid of the application that created this\n PendingIntent, that is the identity under which you will actuall...</div><div class='long'><p>Return the uid of the application that created this\n PendingIntent, that is the identity under which you will actually be\n sending the Intent.  The returned integer is supplied by the system, so\n that an application can not spoof its uid.</p>\n\n<p> <p class=\"note\">Be careful about how you use this.  All this tells you is\n who created the PendingIntent.  It does <strong>not</strong> tell you who\n handed the PendingIntent to you: that is, PendingIntent objects are intended to be\n passed between applications, so the PendingIntent you receive from an application\n could actually be one it received from another application, meaning the result\n you get here will identify the original application.  Because of this, you should\n only use this information to identify who you expect to be interacting with\n through a <a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a> call, not who gave you the PendingIntent.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The uid of the PendingIntent, or -1 if there is\n none associated with it.</p>\n</div></li></ul></div></div></div><div id='method-getCreatorUserHandle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getCreatorUserHandle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getCreatorUserHandle' class='name expandable'>getCreatorUserHandle</a>( <span class='pre'></span> ) : Object {android.os.UserHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the user handle of the application that created this\n PendingIntent, that is the user under which you will act...</div><div class='long'><p>Return the user handle of the application that created this\n PendingIntent, that is the user under which you will actually be\n sending the Intent.  The returned UserHandle is supplied by the system, so\n that an application can not spoof its user.  See\n Process.myUserHandle() for\n more explanation of user handles.</p>\n\n<p> <p class=\"note\">Be careful about how you use this.  All this tells you is\n who created the PendingIntent.  It does <strong>not</strong> tell you who\n handed the PendingIntent to you: that is, PendingIntent objects are intended to be\n passed between applications, so the PendingIntent you receive from an application\n could actually be one it received from another application, meaning the result\n you get here will identify the original application.  Because of this, you should\n only use this information to identify who you expect to be interacting with\n through a <a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a> call, not who gave you the PendingIntent.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.UserHandle}</span><div class='sub-desc'><p>The user handle of the PendingIntent, or null if there is\n none associated with it.</p>\n</div></li></ul></div></div></div><div id='method-getForegroundService' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getForegroundService' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getForegroundService' class='name expandable'>getForegroundService</a>( <span class='pre'>context, requestCode, intent, flags</span> ) : Object {android.app.PendingIntent}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve a PendingIntent that will start a foreground service, like calling\n Context.startForegroundService(). ...</div><div class='long'><p>Retrieve a PendingIntent that will start a foreground service, like calling\n Context.startForegroundService().  The start\n arguments given to the service will come from the extras of the Intent.</p>\n\n<p> <p class=\"note\">For security reasons, the android.content.Intent\n you supply here should almost always be an <em>explicit intent</em>,\n that is specify an explicit component to be delivered to through\n Class) Intent.setClass</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>The Context in which this PendingIntent should start\n the service.</p>\n</div></li><li><span class='pre'>requestCode</span> : Number<div class='sub-desc'><p>Private request code for the sender</p>\n</div></li><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>An Intent describing the service to be started.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>May be <a href=\"#!/api/android.app.PendingIntent-property-FLAG_ONE_SHOT\" rel=\"android.app.PendingIntent-property-FLAG_ONE_SHOT\" class=\"docClass\">FLAG_ONE_SHOT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" class=\"docClass\">FLAG_CANCEL_CURRENT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" class=\"docClass\">FLAG_UPDATE_CURRENT</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_IMMUTABLE\" rel=\"android.app.PendingIntent-property-FLAG_IMMUTABLE\" class=\"docClass\">FLAG_IMMUTABLE</a> or any of the flags as supported by\n Intent.fillIn() to control which unspecified parts\n of the intent that can be supplied when the actual send happens.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.PendingIntent}</span><div class='sub-desc'><p>Returns an existing or new PendingIntent matching the given\n parameters.  May return null only if <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a> has been\n supplied.</p>\n</div></li></ul></div></div></div><div id='method-getIntentSender' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getIntentSender' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getIntentSender' class='name expandable'>getIntentSender</a>( <span class='pre'></span> ) : Object {android.content.IntentSender}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve a IntentSender object that wraps the existing sender of the PendingIntent ...</div><div class='long'><p>Retrieve a IntentSender object that wraps the existing sender of the PendingIntent</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.IntentSender}</span><div class='sub-desc'><p>Returns a IntentSender object that wraps the sender of PendingIntent</p>\n</div></li></ul></div></div></div><div id='method-getService' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getService' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getService' class='name expandable'>getService</a>( <span class='pre'>context, requestCode, intent, flags</span> ) : Object {android.app.PendingIntent}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve a PendingIntent that will start a service, like calling\n Context.startService(). ...</div><div class='long'><p>Retrieve a PendingIntent that will start a service, like calling\n Context.startService().  The start\n arguments given to the service will come from the extras of the Intent.</p>\n\n<p> <p class=\"note\">For security reasons, the android.content.Intent\n you supply here should almost always be an <em>explicit intent</em>,\n that is specify an explicit component to be delivered to through\n Class) Intent.setClass</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>The Context in which this PendingIntent should start\n the service.</p>\n</div></li><li><span class='pre'>requestCode</span> : Number<div class='sub-desc'><p>Private request code for the sender</p>\n</div></li><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>An Intent describing the service to be started.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>May be <a href=\"#!/api/android.app.PendingIntent-property-FLAG_ONE_SHOT\" rel=\"android.app.PendingIntent-property-FLAG_ONE_SHOT\" class=\"docClass\">FLAG_ONE_SHOT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_CANCEL_CURRENT\" class=\"docClass\">FLAG_CANCEL_CURRENT</a>, <a href=\"#!/api/android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" rel=\"android.app.PendingIntent-property-FLAG_UPDATE_CURRENT\" class=\"docClass\">FLAG_UPDATE_CURRENT</a>,\n <a href=\"#!/api/android.app.PendingIntent-property-FLAG_IMMUTABLE\" rel=\"android.app.PendingIntent-property-FLAG_IMMUTABLE\" class=\"docClass\">FLAG_IMMUTABLE</a> or any of the flags as supported by\n Intent.fillIn() to control which unspecified parts\n of the intent that can be supplied when the actual send happens.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.PendingIntent}</span><div class='sub-desc'><p>Returns an existing or new PendingIntent matching the given\n parameters.  May return null only if <a href=\"#!/api/android.app.PendingIntent-property-FLAG_NO_CREATE\" rel=\"android.app.PendingIntent-property-FLAG_NO_CREATE\" class=\"docClass\">FLAG_NO_CREATE</a> has been\n supplied.</p>\n</div></li></ul></div></div></div><div id='method-getTargetPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-getTargetPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-getTargetPackage' class='name expandable'>getTargetPackage</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Renamed to getCreatorPackage().</p>\n\n        </div>\n</div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-readPendingIntentOrNullFromParcel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-readPendingIntentOrNullFromParcel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-readPendingIntentOrNullFromParcel' class='name expandable'>readPendingIntentOrNullFromParcel</a>( <span class='pre'>in</span> ) : Object {android.app.PendingIntent}<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience function for reading either a PendingIntent or null pointer from\n a Parcel. ...</div><div class='long'><p>Convenience function for reading either a PendingIntent or null pointer from\n a Parcel.  You must have previously written the PendingIntent with\n <a href=\"#!/api/android.app.PendingIntent-method-writePendingIntentOrNullToParcel\" rel=\"android.app.PendingIntent-method-writePendingIntentOrNullToParcel\" class=\"docClass\">writePendingIntentOrNullToParcel</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>in</span> : Object {Parcel}<div class='sub-desc'><p>The Parcel containing the written PendingIntent.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.PendingIntent}</span><div class='sub-desc'><p>Returns the PendingIntent read from the Parcel, or null if null had\n been written.</p>\n</div></li></ul></div></div></div><div id='method-send' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-send' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-send' class='name expandable'>send</a>( <span class='pre'>context, code, intent, onFinished, handler, requiredPermission, options</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Perform the operation associated with this PendingIntent, allowing the\n caller to specify information about the Inten...</div><div class='long'><p>Perform the operation associated with this PendingIntent, allowing the\n caller to specify information about the Intent to use and be notified\n when the send has completed.</p>\n\n<p> <p>For the intent parameter, a PendingIntent\n often has restrictions on which fields can be supplied here, based on\n how the PendingIntent was retrieved in <a href=\"#!/api/android.app.PendingIntent-method-getActivity\" rel=\"android.app.PendingIntent-method-getActivity\" class=\"docClass\">getActivity</a>,\n <a href=\"#!/api/android.app.PendingIntent-method-getBroadcast\" rel=\"android.app.PendingIntent-method-getBroadcast\" class=\"docClass\">getBroadcast</a>, or <a href=\"#!/api/android.app.PendingIntent-method-getService\" rel=\"android.app.PendingIntent-method-getService\" class=\"docClass\">getService</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>The Context of the caller.  This may be null if\n <var>intent</var> is also null.</p>\n</div></li><li><span class='pre'>code</span> : Number<div class='sub-desc'><p>Result code to supply back to the PendingIntent's target.</p>\n</div></li><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>Additional Intent data.  See Intent.fillIn() for information on how this is applied to the\n original Intent.  Use null to not modify the original Intent.\n If flag <a href=\"#!/api/android.app.PendingIntent-property-FLAG_IMMUTABLE\" rel=\"android.app.PendingIntent-property-FLAG_IMMUTABLE\" class=\"docClass\">FLAG_IMMUTABLE</a> was set when this pending intent was\n created, this argument will be ignored.</p>\n</div></li><li><span class='pre'>onFinished</span> : Object {PendingIntent.OnFinished}<div class='sub-desc'><p>The object to call back on when the send has\n completed, or null for no callback.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>Handler identifying the thread on which the callback\n should happen.  If null, the callback will happen from the thread\n pool of the process.</p>\n</div></li><li><span class='pre'>requiredPermission</span> : String<div class='sub-desc'><p>Name of permission that a recipient of the PendingIntent\n is required to hold.  This is only valid for broadcast intents, and\n corresponds to the permission argument in\n String) Context.sendOrderedBroadcast(Intent, String).\n If null, no permission is required.</p>\n</div></li><li><span class='pre'>options</span> : Object {Bundle}<div class='sub-desc'><p>Additional options the caller would like to provide to modify the sending\n behavior.  May be built from an ActivityOptions to apply to an activity start.\n@see <a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a>()\n@see <a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a>(int)\n@see <a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a>(Context, int, Intent)\n@see <a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a>(int, <a href=\"#!/api/android.app.PendingIntent.OnFinished\" rel=\"android.app.PendingIntent.OnFinished\" class=\"docClass\">android.app.PendingIntent.OnFinished</a>, Handler)\n@see <a href=\"#!/api/android.app.PendingIntent-method-send\" rel=\"android.app.PendingIntent-method-send\" class=\"docClass\">send</a>(Context, int, Intent, OnFinished, Handler)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CanceledException Throws CanceledException if the PendingIntent\n is no longer allowing more intents to be sent through it.</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-writePendingIntentOrNullToParcel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-writePendingIntentOrNullToParcel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-writePendingIntentOrNullToParcel' class='name expandable'>writePendingIntentOrNullToParcel</a>( <span class='pre'>sender, out</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience function for writing either a PendingIntent or null pointer to\n a Parcel. ...</div><div class='long'><p>Convenience function for writing either a PendingIntent or null pointer to\n a Parcel.  You must use this with <a href=\"#!/api/android.app.PendingIntent-method-readPendingIntentOrNullFromParcel\" rel=\"android.app.PendingIntent-method-readPendingIntentOrNullFromParcel\" class=\"docClass\">readPendingIntentOrNullFromParcel</a>\n for later reading it.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sender</span> : Object {PendingIntent}<div class='sub-desc'><p>The PendingIntent to write, or null.</p>\n</div></li><li><span class='pre'>out</span> : Object {Parcel}<div class='sub-desc'><p>Where to write the PendingIntent.</p>\n</div></li></ul></div></div></div><div id='method-writeToParcel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.PendingIntent'>android.app.PendingIntent</span><br/><a href='source/PendingIntent.html#android-app-PendingIntent-method-writeToParcel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.PendingIntent-method-writeToParcel' class='name expandable'>writeToParcel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});