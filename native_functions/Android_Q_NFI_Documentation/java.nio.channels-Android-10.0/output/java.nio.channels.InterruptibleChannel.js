Ext.data.JsonP.java_nio_channels_InterruptibleChannel({"tagname":"class","name":"java.nio.channels.InterruptibleChannel","autodetected":{},"files":[{"filename":"InterruptibleChannel.js","href":"InterruptibleChannel.html#java-nio-channels-InterruptibleChannel"}],"author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"close","tagname":"method","owner":"java.nio.channels.InterruptibleChannel","id":"method-close","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.InterruptibleChannel","short_doc":"implements java.nio.channels.Channel\n\n A channel that can be asynchronously closed and interrupted. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/InterruptibleChannel.html#java-nio-channels-InterruptibleChannel' target='_blank'>InterruptibleChannel.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.channels.Channel\" rel=\"java.nio.channels.Channel\" class=\"docClass\">java.nio.channels.Channel</a></p>\n\n<p> A channel that can be asynchronously closed and interrupted.</p>\n\n<p> <p> A channel that implements this interface is <i>asynchronously\n closeable:</i> If a thread is blocked in an I/O operation on an\n interruptible channel then another thread may invoke the channel's <a href=\"#!/api/java.nio.channels.InterruptibleChannel-method-close\" rel=\"java.nio.channels.InterruptibleChannel-method-close\" class=\"docClass\">close</a> method.  This will cause the blocked thread to receive an\n <a href=\"#!/api/java.nio.channels.AsynchronousCloseException\" rel=\"java.nio.channels.AsynchronousCloseException\" class=\"docClass\">java.nio.channels.AsynchronousCloseException</a>.</p>\n\n<p> <p> A channel that implements this interface is also <i>interruptible:</i>\n If a thread is blocked in an I/O operation on an interruptible channel then\n another thread may invoke the blocked thread's interrupt method.  This will cause the channel to be closed, the blocked\n thread to receive a <a href=\"#!/api/java.nio.channels.ClosedByInterruptException\" rel=\"java.nio.channels.ClosedByInterruptException\" class=\"docClass\">java.nio.channels.ClosedByInterruptException</a>, and the blocked\n thread's interrupt status to be set.</p>\n\n<p> <p> If a thread's interrupt status is already set and it invokes a blocking\n I/O operation upon a channel then the channel will be closed and the thread\n will immediately receive a <a href=\"#!/api/java.nio.channels.ClosedByInterruptException\" rel=\"java.nio.channels.ClosedByInterruptException\" class=\"docClass\">java.nio.channels.ClosedByInterruptException</a>; its interrupt\n status will remain set.</p>\n\n<p> <p> A channel supports asynchronous closing and interruption if, and only\n if, it implements this interface.  This can be tested at runtime, if\n necessary, via the <tt>instanceof</tt> operator.</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.InterruptibleChannel'>java.nio.channels.InterruptibleChannel</span><br/><a href='source/InterruptibleChannel.html#java-nio-channels-InterruptibleChannel-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.InterruptibleChannel-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this channel. ...</div><div class='long'><p>Closes this channel.</p>\n\n<p> <p> Any thread currently blocked in an I/O operation upon this channel\n will receive an <a href=\"#!/api/java.nio.channels.AsynchronousCloseException\" rel=\"java.nio.channels.AsynchronousCloseException\" class=\"docClass\">java.nio.channels.AsynchronousCloseException</a>.</p>\n\n<p> <p> This method otherwise behaves exactly as specified by the <a href=\"#!/api/java.nio.channels.Channel-method-close\" rel=\"java.nio.channels.Channel-method-close\" class=\"docClass\">java.nio.channels.Channel</a> interface.  </p></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  If an I/O error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});