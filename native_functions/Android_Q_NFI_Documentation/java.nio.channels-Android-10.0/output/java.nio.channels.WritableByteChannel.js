Ext.data.JsonP.java_nio_channels_WritableByteChannel({"tagname":"class","name":"java.nio.channels.WritableByteChannel","autodetected":{},"files":[{"filename":"WritableByteChannel.js","href":"WritableByteChannel.html#java-nio-channels-WritableByteChannel"}],"author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"write","tagname":"method","owner":"java.nio.channels.WritableByteChannel","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.WritableByteChannel","short_doc":"implements java.nio.channels.Channel\n\n A channel that can write bytes. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/WritableByteChannel.html#java-nio-channels-WritableByteChannel' target='_blank'>WritableByteChannel.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.channels.Channel\" rel=\"java.nio.channels.Channel\" class=\"docClass\">java.nio.channels.Channel</a></p>\n\n<p> A channel that can write bytes.</p>\n\n<p> <p> Only one write operation upon a writable channel may be in progress at\n any given time.  If one thread initiates a write operation upon a channel\n then any other thread that attempts to initiate another write operation will\n block until the first operation is complete.  Whether or not other kinds of\n I/O operations may proceed concurrently with a write operation depends upon\n the type of the channel. </p></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-write' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.WritableByteChannel'>java.nio.channels.WritableByteChannel</span><br/><a href='source/WritableByteChannel.html#java-nio-channels-WritableByteChannel-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.WritableByteChannel-method-write' class='name expandable'>write</a>( <span class='pre'>src</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a sequence of bytes to this channel from the given buffer. ...</div><div class='long'><p>Writes a sequence of bytes to this channel from the given buffer.</p>\n\n<p> <p> An attempt is made to write up to <i>r</i> bytes to the channel,\n where <i>r</i> is the number of bytes remaining in the buffer, that is,\n <tt>src.remaining()</tt>, at the moment this method is invoked.</p>\n\n<p> <p> Suppose that a byte sequence of length <i>n</i> is written, where\n <tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.\n This byte sequence will be transferred from the buffer starting at index\n <i>p</i>, where <i>p</i> is the buffer's position at the moment this\n method is invoked; the index of the last byte written will be\n <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>.\n Upon return the buffer's position will be equal to\n <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not have changed.</p>\n\n<p> <p> Unless otherwise specified, a write operation will return only after\n writing all of the <i>r</i> requested bytes.  Some types of channels,\n depending upon their state, may write only some of the bytes or possibly\n none at all.  A socket channel in non-blocking mode, for example, cannot\n write any more bytes than are free in the socket's output buffer.</p>\n\n<p> <p> This method may be invoked at any time.  If another thread has\n already initiated a write operation upon this channel, however, then an\n invocation of this method will block until the first operation is\n complete. </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object {ByteBuffer}<div class='sub-desc'><p>The buffer from which bytes are to be retrieved</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes written, possibly zero</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If this channel was not opened for writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AsynchronousCloseException\n          If another thread closes this channel\n          while the write operation is in progress</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedByInterruptException\n          If another thread interrupts the current thread\n          while the write operation is in progress, thereby\n          closing the channel and setting the current thread's\n          interrupt status</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});