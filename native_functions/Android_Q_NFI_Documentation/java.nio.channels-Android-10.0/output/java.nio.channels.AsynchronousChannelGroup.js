Ext.data.JsonP.java_nio_channels_AsynchronousChannelGroup({"tagname":"class","name":"java.nio.channels.AsynchronousChannelGroup","autodetected":{},"files":[{"filename":"AsynchronousChannelGroup.js","href":"AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"awaitTermination","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-awaitTermination","meta":{}},{"name":"isShutdown","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-isShutdown","meta":{}},{"name":"isTerminated","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-isTerminated","meta":{}},{"name":"provider","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-provider","meta":{}},{"name":"shutdown","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-shutdown","meta":{}},{"name":"shutdownNow","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-shutdownNow","meta":{}},{"name":"withCachedThreadPool","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-withCachedThreadPool","meta":{}},{"name":"withFixedThreadPool","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-withFixedThreadPool","meta":{}},{"name":"withThreadPool","tagname":"method","owner":"java.nio.channels.AsynchronousChannelGroup","id":"method-withThreadPool","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.AsynchronousChannelGroup","short_doc":"A grouping of asynchronous channels for the purpose of resource sharing. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.channels.AsynchronousChannelGroup</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup' target='_blank'>AsynchronousChannelGroup.js</a></div></pre><div class='doc-contents'><p>A grouping of asynchronous channels for the purpose of resource sharing.</p>\n\n<p> <p> An asynchronous channel group encapsulates the mechanics required to\n handle the completion of I/O operations initiated by <a href=\"#!/api/java.nio.channels.AsynchronousChannel\" rel=\"java.nio.channels.AsynchronousChannel\" class=\"docClass\">asynchronous channels</a> that are bound to the group. A group has an associated\n thread pool to which tasks are submitted to handle I/O events and dispatch to\n <a href=\"#!/api/java.nio.channels.CompletionHandler\" rel=\"java.nio.channels.CompletionHandler\" class=\"docClass\">completion-handlers</a> that consume the result of\n asynchronous operations performed on channels in the group. In addition to\n handling I/O events, the pooled threads may also execute other tasks required\n to support the execution of asynchronous I/O operations.</p>\n\n<p> <p> An asynchronous channel group is created by invoking the <a href=\"#!/api/java.nio.channels.AsynchronousChannelGroup-method-withFixedThreadPool\" rel=\"java.nio.channels.AsynchronousChannelGroup-method-withFixedThreadPool\" class=\"docClass\">withFixedThreadPool</a> or <a href=\"#!/api/java.nio.channels.AsynchronousChannelGroup-method-withCachedThreadPool\" rel=\"java.nio.channels.AsynchronousChannelGroup-method-withCachedThreadPool\" class=\"docClass\">withCachedThreadPool</a> methods defined here. Channels are bound to a group by\n specifying the group when constructing the channel. The associated thread\n pool is <em>owned</em> by the group; termination of the group results in the\n shutdown of the associated thread pool.</p>\n\n<p> <p> In addition to groups created explicitly, the Java virtual machine\n maintains a system-wide <em>default group</em> that is constructed\n automatically. Asynchronous channels that do not specify a group at\n construction time are bound to the default group. The default group has an\n associated thread pool that creates new threads as needed. The default group\n may be configured by means of system properties defined in the table below.\n Where the ThreadFactory for the\n default group is not configured then the pooled threads of the default group\n are daemon threads.</p>\n\n<p> <table border summary=\"System properties\">\n   <tr>\n     <th>System property</th>\n     <th>Description</th>\n   </tr>\n   <tr>\n     <td> {@code java.nio.channels.DefaultThreadPool.threadFactory} </td>\n     <td> The value of this property is taken to be the fully-qualified name\n     of a concrete ThreadFactory\n     class. The class is loaded using the system class loader and instantiated.\n     The factory's newThread method is invoked to create each thread for the default\n     group's thread pool. If the process to load and instantiate the value\n     of the property fails then an unspecified error is thrown during the\n     construction of the default group. </td>\n   </tr>\n   <tr>\n     <td> {@code java.nio.channels.DefaultThreadPool.initialSize} </td>\n     <td> The value of the {@code initialSize} parameter for the default\n     group (see <a href=\"#!/api/java.nio.channels.AsynchronousChannelGroup-method-withCachedThreadPool\" rel=\"java.nio.channels.AsynchronousChannelGroup-method-withCachedThreadPool\" class=\"docClass\">withCachedThreadPool</a>).\n     The value of the property is taken to be the {@code String}\n     representation of an {@code Integer} that is the initial size parameter.\n     If the value cannot be parsed as an {@code Integer} it causes an\n     unspecified error to be thrown during the construction of the default\n     group. </td>\n   </tr>\n </table></p>\n\n<p> <a name=\"threading\"></a><h2>Threading</h2></p>\n\n<p> <p> The completion handler for an I/O operation initiated on a channel bound\n to a group is guaranteed to be invoked by one of the pooled threads in the\n group. This ensures that the completion handler is run by a thread with the\n expected <em>identity</em>.</p>\n\n<p> <p> Where an I/O operation completes immediately, and the initiating thread\n is one of the pooled threads in the group then the completion handler may\n be invoked directly by the initiating thread. To avoid stack overflow, an\n implementation may impose a limit as to the number of activations on the\n thread stack. Some I/O operations may prohibit invoking the completion\n handler directly by the initiating thread (see accept).</p>\n\n<p> <a name=\"shutdown\"></a><h2>Shutdown and Termination</h2></p>\n\n<p> <p> The shutdown method is used to initiate an <em>orderly\n shutdown</em> of a group. An orderly shutdown marks the group as shutdown;\n further attempts to construct a channel that binds to the group will throw\n <a href=\"#!/api/java.nio.channels.ShutdownChannelGroupException\" rel=\"java.nio.channels.ShutdownChannelGroupException\" class=\"docClass\">java.nio.channels.ShutdownChannelGroupException</a>. Whether or not a group is shutdown can\n be tested using the isShutdown method. Once shutdown,\n the group <em>terminates</em> when all asynchronous channels that are bound to\n the group are closed, all actively executing completion handlers have run to\n completion, and resources used by the group are released. No attempt is made\n to stop or interrupt threads that are executing completion handlers. The\n isTerminated method is used to test if the group has\n terminated, and the <a href=\"#!/api/java.nio.channels.AsynchronousChannelGroup-method-awaitTermination\" rel=\"java.nio.channels.AsynchronousChannelGroup-method-awaitTermination\" class=\"docClass\">awaitTermination</a> method can be\n used to block until the group has terminated.</p>\n\n<p> <p> The shutdownNow method can be used to initiate a\n <em>forceful shutdown</em> of the group. In addition to the actions performed\n by an orderly shutdown, the {@code shutdownNow} method closes all open channels\n in the group as if by invoking the <a href=\"#!/api/java.nio.channels.AsynchronousChannel-method-close\" rel=\"java.nio.channels.AsynchronousChannel-method-close\" class=\"docClass\">close</a>\n method.</p>\n\n<p> @see AsynchronousSocketChannel#open(AsynchronousChannelGroup)\n @see AsynchronousServerSocketChannel#open(AsynchronousChannelGroup)</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-awaitTermination' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-awaitTermination' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-awaitTermination' class='name expandable'>awaitTermination</a>( <span class='pre'>timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Awaits termination of the group. ...</div><div class='long'><p>Awaits termination of the group.</p>\n\n<p> <p> This method blocks until the group has terminated, or the timeout\n occurs, or the current thread is interrupted, whichever happens first.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>The maximum time to wait, or zero or less to not wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>The time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the group has terminated; {@code false} if the\n          timeout elapsed before termination</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException\n          If interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-isShutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-isShutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-isShutdown' class='name expandable'>isShutdown</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this asynchronous channel group is shutdown. ...</div><div class='long'><p>Tells whether or not this asynchronous channel group is shutdown.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this asynchronous channel group is shutdown or\n          has been marked for shutdown.</p>\n</div></li></ul></div></div></div><div id='method-isTerminated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-isTerminated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-isTerminated' class='name expandable'>isTerminated</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this group has terminated. ...</div><div class='long'><p>Tells whether or not this group has terminated.</p>\n\n<p> <p> Where this method returns {@code true}, then the associated thread\n pool has also terminated.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this group has terminated</p>\n</div></li></ul></div></div></div><div id='method-provider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-provider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-provider' class='name expandable'>provider</a>( <span class='pre'></span> ) : Object {java.nio.channels.spi.AsynchronousChannelProvider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the provider that created this channel group. ...</div><div class='long'><p>Returns the provider that created this channel group.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.spi.AsynchronousChannelProvider}</span><div class='sub-desc'><p>The provider that created this channel group</p>\n</div></li></ul></div></div></div><div id='method-shutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-shutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-shutdown' class='name expandable'>shutdown</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initiates an orderly shutdown of the group. ...</div><div class='long'><p>Initiates an orderly shutdown of the group.</p>\n\n<p> <p> This method marks the group as shutdown. Further attempts to construct\n channel that binds to this group will throw <a href=\"#!/api/java.nio.channels.ShutdownChannelGroupException\" rel=\"java.nio.channels.ShutdownChannelGroupException\" class=\"docClass\">java.nio.channels.ShutdownChannelGroupException</a>.\n The group terminates when all asynchronous channels in the group are\n closed, all actively executing completion handlers have run to completion,\n and all resources have been released. This method has no effect if the\n group is already shutdown.</p>\n</div></div></div><div id='method-shutdownNow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-shutdownNow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-shutdownNow' class='name expandable'>shutdownNow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Shuts down the group and closes all open channels in the group. ...</div><div class='long'><p>Shuts down the group and closes all open channels in the group.</p>\n\n<p> <p> In addition to the actions performed by the shutdown\n method, this method invokes the <a href=\"#!/api/java.nio.channels.AsynchronousChannel-method-close\" rel=\"java.nio.channels.AsynchronousChannel-method-close\" class=\"docClass\">close</a>\n method on all open channels in the group. This method does not attempt to\n stop or interrupt threads that are executing completion handlers. The\n group terminates when all actively executing completion handlers have run\n to completion and all resources have been released. This method may be\n invoked at any time. If some other thread has already invoked it, then\n another invocation will block until the first invocation is complete,\n after which it will return without effect.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-withCachedThreadPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-withCachedThreadPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-withCachedThreadPool' class='name expandable'>withCachedThreadPool</a>( <span class='pre'>executor, initialSize</span> ) : Object {java.nio.channels.AsynchronousChannelGroup}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates an asynchronous channel group with a given thread pool that\n creates new threads as needed. ...</div><div class='long'><p>Creates an asynchronous channel group with a given thread pool that\n creates new threads as needed.</p>\n\n<p> <p> The {@code executor} parameter is an {@code ExecutorService} that\n creates new threads as needed to execute tasks that are submitted to\n handle I/O events and dispatch completion results for operations initiated\n on asynchronous channels in the group. It may reuse previously constructed\n threads when they are available.</p>\n\n<p> <p> The {@code initialSize} parameter may be used by the implementation\n as a <em>hint</em> as to the initial number of tasks it may submit. For\n example, it may be used to indicate the initial number of threads that\n wait on I/O events.</p>\n\n<p> <p> The executor is intended to be used exclusively by the resulting\n asynchronous channel group. Termination of the group results in the\n orderly  shutdown of the executor\n service. Shutting down the executor service by other means results in\n unspecified behavior.</p>\n\n<p> <p> The group is created by invoking the openjava.nio.channels.AsynchronousChannelGroup(ExecutorService,int) method of the system-wide\n default java.nio.channels.AsynchronousChannelProvider object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {ExecutorService}<div class='sub-desc'><p>The thread pool for the resulting group</p>\n</div></li><li><span class='pre'>initialSize</span> : Number<div class='sub-desc'><p>A value {@code >=0} or a negative value for implementation\n          specific default</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousChannelGroup}</span><div class='sub-desc'><p>A new asynchronous channel group</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs\n@see java.util.concurrent.Executors#newCachedThreadPool</p>\n</div></li></ul></div></div></div><div id='method-withFixedThreadPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-withFixedThreadPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-withFixedThreadPool' class='name expandable'>withFixedThreadPool</a>( <span class='pre'>nThreads, threadFactory</span> ) : Object {java.nio.channels.AsynchronousChannelGroup}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates an asynchronous channel group with a fixed thread pool. ...</div><div class='long'><p>Creates an asynchronous channel group with a fixed thread pool.</p>\n\n<p> <p> The resulting asynchronous channel group reuses a fixed number of\n threads. At any point, at most {@code nThreads} threads will be active\n processing tasks that are submitted to handle I/O events and dispatch\n completion results for operations initiated on asynchronous channels in\n the group.</p>\n\n<p> <p> The group is created by invoking the openjava.nio.channels.AsynchronousChannelGroup(int,ThreadFactory) method of the system-wide\n default java.nio.channels.AsynchronousChannelProvider object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nThreads</span> : Number<div class='sub-desc'><p>The number of threads in the pool</p>\n</div></li><li><span class='pre'>threadFactory</span> : Object {ThreadFactory}<div class='sub-desc'><p>The factory to use when creating new threads</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousChannelGroup}</span><div class='sub-desc'><p>A new asynchronous channel group</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If {@code nThreads &lt;= 0}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-withThreadPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousChannelGroup'>java.nio.channels.AsynchronousChannelGroup</span><br/><a href='source/AsynchronousChannelGroup.html#java-nio-channels-AsynchronousChannelGroup-method-withThreadPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousChannelGroup-method-withThreadPool' class='name expandable'>withThreadPool</a>( <span class='pre'>executor</span> ) : Object {java.nio.channels.AsynchronousChannelGroup}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates an asynchronous channel group with a given thread pool. ...</div><div class='long'><p>Creates an asynchronous channel group with a given thread pool.</p>\n\n<p> <p> The {@code executor} parameter is an {@code ExecutorService} that\n executes tasks submitted to dispatch completion results for operations\n initiated on asynchronous channels in the group.</p>\n\n<p> <p> Care should be taken when configuring the executor service. It\n should support <em>direct handoff</em> or <em>unbounded queuing</em> of\n submitted tasks, and the thread that invokes the execute method should never invoke the task\n directly. An implementation may mandate additional constraints.</p>\n\n<p> <p> The executor is intended to be used exclusively by the resulting\n asynchronous channel group. Termination of the group results in the\n orderly  shutdown of the executor\n service. Shutting down the executor service by other means results in\n unspecified behavior.</p>\n\n<p> <p> The group is created by invoking the openjava.nio.channels.AsynchronousChannelGroup(ExecutorService,int) method of the system-wide\n default java.nio.channels.AsynchronousChannelProvider object with an {@code\n initialSize} of {@code 0}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {ExecutorService}<div class='sub-desc'><p>The thread pool for the resulting group</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousChannelGroup}</span><div class='sub-desc'><p>A new asynchronous channel group</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});