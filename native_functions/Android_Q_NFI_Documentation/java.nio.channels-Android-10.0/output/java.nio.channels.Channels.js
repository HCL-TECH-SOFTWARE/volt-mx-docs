Ext.data.JsonP.java_nio_channels_Channels({"tagname":"class","name":"java.nio.channels.Channels","autodetected":{},"files":[{"filename":"Channels.js","href":"Channels.html#java-nio-channels-Channels"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"Mike McCloskey","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"newChannel","tagname":"method","owner":"java.nio.channels.Channels","id":"method-newChannel","meta":{}},{"name":"newInputStream","tagname":"method","owner":"java.nio.channels.Channels","id":"method-newInputStream","meta":{}},{"name":"newOutputStream","tagname":"method","owner":"java.nio.channels.Channels","id":"method-newOutputStream","meta":{}},{"name":"newReader","tagname":"method","owner":"java.nio.channels.Channels","id":"method-newReader","meta":{}},{"name":"newWriter","tagname":"method","owner":"java.nio.channels.Channels","id":"method-newWriter","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.Channels","short_doc":"Utility methods for channels and streams. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.channels.Channels</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Channels.html#java-nio-channels-Channels' target='_blank'>Channels.js</a></div></pre><div class='doc-contents'><p>Utility methods for channels and streams.</p>\n\n<p> <p> This class defines static methods that support the interoperation of the\n stream classes of the <tt>java.io</tt> package with the channel\n classes of this package.  </p></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-newChannel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.Channels'>java.nio.channels.Channels</span><br/><a href='source/Channels.html#java-nio-channels-Channels-method-newChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.Channels-method-newChannel' class='name expandable'>newChannel</a>( <span class='pre'>out</span> ) : Object {java.nio.channels.WritableByteChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a channel that writes bytes to the given stream. ...</div><div class='long'><p>Constructs a channel that writes bytes to the given stream.</p>\n\n<p> <p> The resulting channel will not be buffered; it will simply redirect\n its I/O operations to the given stream.  Closing the channel will in\n turn cause the stream to be closed.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>out</span> : Object {OutputStream}<div class='sub-desc'><p>The stream to which bytes are to be written</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.WritableByteChannel}</span><div class='sub-desc'><p>A new writable byte channel</p>\n</div></li></ul></div></div></div><div id='method-newInputStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.Channels'>java.nio.channels.Channels</span><br/><a href='source/Channels.html#java-nio-channels-Channels-method-newInputStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.Channels-method-newInputStream' class='name expandable'>newInputStream</a>( <span class='pre'>ch</span> ) : Object {java.io.InputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a stream that reads bytes from the given channel. ...</div><div class='long'><p>Constructs a stream that reads bytes from the given channel.</p>\n\n<p> <p> The stream will not be buffered, and it will not support the mark or reset methods.  The\n stream will be safe for access by multiple concurrent threads.  Closing\n the stream will in turn cause the channel to be closed.  </p></p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ch</span> : Object {AsynchronousByteChannel}<div class='sub-desc'><p>The channel from which bytes will be read</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.InputStream}</span><div class='sub-desc'><p>A new input stream</p>\n</div></li></ul></div></div></div><div id='method-newOutputStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.Channels'>java.nio.channels.Channels</span><br/><a href='source/Channels.html#java-nio-channels-Channels-method-newOutputStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.Channels-method-newOutputStream' class='name expandable'>newOutputStream</a>( <span class='pre'>ch</span> ) : Object {java.io.OutputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a stream that writes bytes to the given channel. ...</div><div class='long'><p>Constructs a stream that writes bytes to the given channel.</p>\n\n<p> <p> The stream will not be buffered. The stream will be safe for access\n by multiple concurrent threads.  Closing the stream will in turn cause\n the channel to be closed.  </p></p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ch</span> : Object {AsynchronousByteChannel}<div class='sub-desc'><p>The channel to which bytes will be written</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.OutputStream}</span><div class='sub-desc'><p>A new output stream</p>\n</div></li></ul></div></div></div><div id='method-newReader' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.Channels'>java.nio.channels.Channels</span><br/><a href='source/Channels.html#java-nio-channels-Channels-method-newReader' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.Channels-method-newReader' class='name expandable'>newReader</a>( <span class='pre'>ch, csName</span> ) : Object {java.io.Reader}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a reader that decodes bytes from the given channel according\n to the named charset. ...</div><div class='long'><p>Constructs a reader that decodes bytes from the given channel according\n to the named charset.</p>\n\n<p> <p> An invocation of this method of the form</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> Channels.newReader(ch, csname)</pre>\n\n\n<p></p>\n\n<p> behaves in exactly the same way as the expression</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> Channels.newReader(ch,\n                    Charset.forName(csName)\n                        .newDecoder(),\n                    -1);</pre>\n\n\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ch</span> : Object {ReadableByteChannel}<div class='sub-desc'><p>The channel from which bytes will be read</p>\n</div></li><li><span class='pre'>csName</span> : String<div class='sub-desc'><p>The name of the charset to be used</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.Reader}</span><div class='sub-desc'><p>A new reader</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedCharsetException\n          If no support for the named charset is available\n          in this instance of the Java virtual machine</p>\n</div></li></ul></div></div></div><div id='method-newWriter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.Channels'>java.nio.channels.Channels</span><br/><a href='source/Channels.html#java-nio-channels-Channels-method-newWriter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.Channels-method-newWriter' class='name expandable'>newWriter</a>( <span class='pre'>ch, csName</span> ) : Object {java.io.Writer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a writer that encodes characters according to the named\n charset and writes the resulting bytes to the giv...</div><div class='long'><p>Constructs a writer that encodes characters according to the named\n charset and writes the resulting bytes to the given channel.</p>\n\n<p> <p> An invocation of this method of the form</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> Channels.newWriter(ch, csname)</pre>\n\n\n<p></p>\n\n<p> behaves in exactly the same way as the expression</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> Channels.newWriter(ch,\n                    Charset.forName(csName)\n                        .newEncoder(),\n                    -1);</pre>\n\n\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ch</span> : Object {WritableByteChannel}<div class='sub-desc'><p>The channel to which bytes will be written</p>\n</div></li><li><span class='pre'>csName</span> : String<div class='sub-desc'><p>The name of the charset to be used</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.Writer}</span><div class='sub-desc'><p>A new writer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedCharsetException\n          If no support for the named charset is available\n          in this instance of the Java virtual machine</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});