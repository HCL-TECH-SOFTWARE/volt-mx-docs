Ext.data.JsonP.java_nio_channels_ScatteringByteChannel({"tagname":"class","name":"java.nio.channels.ScatteringByteChannel","autodetected":{},"files":[{"filename":"ScatteringByteChannel.js","href":"ScatteringByteChannel.html#java-nio-channels-ScatteringByteChannel"}],"author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"read","tagname":"method","owner":"java.nio.channels.ScatteringByteChannel","id":"method-read","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.ScatteringByteChannel","short_doc":"implements java.nio.channels.ReadableByteChannel\n\n A channel that can read bytes into a sequence of buffers. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ScatteringByteChannel.html#java-nio-channels-ScatteringByteChannel' target='_blank'>ScatteringByteChannel.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.channels.ReadableByteChannel\" rel=\"java.nio.channels.ReadableByteChannel\" class=\"docClass\">java.nio.channels.ReadableByteChannel</a></p>\n\n<p> A channel that can read bytes into a sequence of buffers.</p>\n\n<p> <p> A <i>scattering</i> read operation reads, in a single invocation, a\n sequence of bytes into one or more of a given sequence of buffers.\n Scattering reads are often useful when implementing network protocols or\n file formats that, for example, group data into segments consisting of one\n or more fixed-length headers followed by a variable-length body.  Similar\n <i>gathering</i> write operations are defined in the <a href=\"#!/api/java.nio.channels.GatheringByteChannel\" rel=\"java.nio.channels.GatheringByteChannel\" class=\"docClass\">java.nio.channels.GatheringByteChannel</a> interface.  </p></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-read' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.ScatteringByteChannel'>java.nio.channels.ScatteringByteChannel</span><br/><a href='source/ScatteringByteChannel.html#java-nio-channels-ScatteringByteChannel-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.ScatteringByteChannel-method-read' class='name expandable'>read</a>( <span class='pre'>dsts</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a sequence of bytes from this channel into the given buffers. ...</div><div class='long'><p>Reads a sequence of bytes from this channel into the given buffers.</p>\n\n<p> <p> An invocation of this method of the form <tt>c.read(dsts)</tt>\n behaves in exactly the same manner as the invocation</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> c.read(dsts, 0, dsts.length);</pre>\n\n\n<p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dsts</span> : Object {java.nio.ByteBuffer[]}<div class='sub-desc'><p>The buffers into which bytes are to be transferred</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes read, possibly zero,\n         or <tt>-1</tt> if the channel has reached end-of-stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NonReadableChannelException\n          If this channel was not opened for reading</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AsynchronousCloseException\n          If another thread closes this channel\n          while the read operation is in progress</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedByInterruptException\n          If another thread interrupts the current thread\n          while the read operation is in progress, thereby\n          closing the channel and setting the current thread's\n          interrupt status</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});