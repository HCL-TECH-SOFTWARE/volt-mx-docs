Ext.data.JsonP.java_nio_channels_FileChannel({"tagname":"class","name":"java.nio.channels.FileChannel","autodetected":{},"files":[{"filename":"FileChannel.js","href":"FileChannel.html#java-nio-channels-FileChannel"}],"extends":"java.nio.channels.spi.AbstractInterruptibleChannel","author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"Mike McCloskey","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"force","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-force","meta":{}},{"name":"lock","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-lock","meta":{}},{"name":"map","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-map","meta":{}},{"name":"open","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-open","meta":{}},{"name":"position","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-position","meta":{}},{"name":"read","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-read","meta":{}},{"name":"size","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-size","meta":{}},{"name":"transferFrom","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-transferFrom","meta":{}},{"name":"transferTo","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-transferTo","meta":{}},{"name":"truncate","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-truncate","meta":{}},{"name":"tryLock","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-tryLock","meta":{}},{"name":"write","tagname":"method","owner":"java.nio.channels.FileChannel","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.FileChannel","short_doc":"implements java.nio.channels.SeekableByteChannel\n\n implements java.nio.channels.GatheringByteChannel\n\n implements jav...","classIcon":"icon-class","superclasses":["java.nio.channels.spi.AbstractInterruptibleChannel"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.nio.channels.spi.AbstractInterruptibleChannel<div class='subclass '><strong>java.nio.channels.FileChannel</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/FileChannel.html#java-nio-channels-FileChannel' target='_blank'>FileChannel.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.channels.SeekableByteChannel\" rel=\"java.nio.channels.SeekableByteChannel\" class=\"docClass\">java.nio.channels.SeekableByteChannel</a></p>\n\n<p> implements <a href=\"#!/api/java.nio.channels.GatheringByteChannel\" rel=\"java.nio.channels.GatheringByteChannel\" class=\"docClass\">java.nio.channels.GatheringByteChannel</a></p>\n\n<p> implements <a href=\"#!/api/java.nio.channels.ScatteringByteChannel\" rel=\"java.nio.channels.ScatteringByteChannel\" class=\"docClass\">java.nio.channels.ScatteringByteChannel</a></p>\n\n<p>A channel for reading, writing, mapping, and manipulating a file.</p>\n\n<p> <p> A file channel is a <a href=\"#!/api/java.nio.channels.SeekableByteChannel\" rel=\"java.nio.channels.SeekableByteChannel\" class=\"docClass\">java.nio.channels.SeekableByteChannel</a> that is connected to\n a file. It has a current <i>position</i> within its file which can\n be both <i>queried</i> and <i>modified</i>.  The file itself contains a variable-length sequence\n of bytes that can be read and written and whose current <a href=\"#!/api/java.nio.channels.FileChannel-method-size\" rel=\"java.nio.channels.FileChannel-method-size\" class=\"docClass\">&lt;i&gt;size&lt;/i&gt;</a> can be queried.  The size of the file increases\n when bytes are written beyond its current size; the size of the file\n decreases when it is <a href=\"#!/api/java.nio.channels.FileChannel-method-truncate\" rel=\"java.nio.channels.FileChannel-method-truncate\" class=\"docClass\">&lt;i&gt;truncated&lt;/i&gt;</a>.  The\n file may also have some associated <i>metadata</i> such as access\n permissions, content type, and last-modification time; this class does not\n define methods for metadata access.</p>\n\n<p> <p> In addition to the familiar read, write, and close operations of byte\n channels, this class defines the following file-specific operations: </p></p>\n\n<p> <ul></ul></p>\n\n<p>   <li><p> Bytes may be long) read or\n   long) <i>written</i> at an absolute\n   position in a file in a way that does not affect the channel's current\n   position.  </p></li></p>\n\n<p>   <li><p> A region of a file may be <a href=\"#!/api/java.nio.channels.FileChannel-method-map\" rel=\"java.nio.channels.FileChannel-method-map\" class=\"docClass\">&lt;i&gt;mapped&lt;/i&gt;</a>\n   directly into memory; for large files this is often much more efficient\n   than invoking the usual <tt>read</tt> or <tt>write</tt> methods.\n   </p></li></p>\n\n<p>   <li><p> Updates made to a file may be <a href=\"#!/api/java.nio.channels.FileChannel-method-force\" rel=\"java.nio.channels.FileChannel-method-force\" class=\"docClass\">&lt;i&gt;forced\n   out&lt;/i&gt;</a> to the underlying storage device, ensuring that data are not\n   lost in the event of a system crash.  </p></li></p>\n\n<p>   <li><p> Bytes can be transferred from a file <a href=\"#!/api/java.nio.channels.FileChannel-method-transferTo\" rel=\"java.nio.channels.FileChannel-method-transferTo\" class=\"docClass\">&lt;i&gt;to\n   some other channel&lt;/i&gt;</a>, and <a href=\"#!/api/java.nio.channels.FileChannel-method-transferFrom\" rel=\"java.nio.channels.FileChannel-method-transferFrom\" class=\"docClass\">&lt;i&gt;vice\n   versa&lt;/i&gt;</a>, in a way that can be optimized by many operating systems\n   into a very fast transfer directly to or from the filesystem cache.\n   </p></li></p>\n\n<p>   <li><p> A region of a file may be <i>locked</i>\n   against access by other programs.  </p></li></p>\n\n<p> </p>\n\n<p> <p> File channels are safe for use by multiple concurrent threads.  The\n <a href=\"#!/api/java.nio.channels.Channel-method-close\" rel=\"java.nio.channels.Channel-method-close\" class=\"docClass\">close</a> method may be invoked at any time, as specified\n by the <a href=\"#!/api/java.nio.channels.Channel\" rel=\"java.nio.channels.Channel\" class=\"docClass\">java.nio.channels.Channel</a> interface.  Only one operation that involves the\n channel's position or can change its file's size may be in progress at any\n given time; attempts to initiate a second such operation while the first is\n still in progress will block until the first operation completes.  Other\n operations, in particular those that take an explicit position, may proceed\n concurrently; whether they in fact do so is dependent upon the underlying\n implementation and is therefore unspecified.</p>\n\n<p> <p> The view of a file provided by an instance of this class is guaranteed\n to be consistent with other views of the same file provided by other\n instances in the same program.  The view provided by an instance of this\n class may or may not, however, be consistent with the views seen by other\n concurrently-running programs due to caching performed by the underlying\n operating system and delays induced by network-filesystem protocols.  This\n is true regardless of the language in which these other programs are\n written, and whether they are running on the same machine or on some other\n machine.  The exact nature of any such inconsistencies are system-dependent\n and are therefore unspecified.</p>\n\n<p> <p> A file channel is created by invoking one of the <a href=\"#!/api/java.nio.channels.FileChannel-method-open\" rel=\"java.nio.channels.FileChannel-method-open\" class=\"docClass\">open</a>\n methods defined by this class. A file channel can also be obtained from an\n existing FileInputStream, FileOutputStream, or RandomAccessFile object by invoking\n that object's <tt>getChannel</tt> method, which returns a file channel that\n is connected to the same underlying file. Where the file channel is obtained\n from an existing stream or random access file then the state of the file\n channel is intimately connected to that of the object whose <tt>getChannel</tt>\n method returned the channel.  Changing the channel's position, whether\n explicitly or by reading or writing bytes, will change the file position of\n the originating object, and vice versa. Changing the file's length via the\n file channel will change the length seen via the originating object, and vice\n versa.  Changing the file's content by writing bytes will change the content\n seen by the originating object, and vice versa.</p>\n\n<p> <a name=\"open-mode\"></a> <p> At various points this class specifies that an\n instance that is \"open for reading,\" \"open for writing,\" or \"open for\n reading and writing\" is required.  A channel obtained via the getChannel method of a java.io.FileInputStream instance will be open for reading.  A channel\n obtained via the getChannel\n method of a java.io.FileOutputStream instance will be open for\n writing.  Finally, a channel obtained via the getChannel method of a java.io.RandomAccessFile instance will be open for reading if the instance\n was created with mode <tt>\"r\"</tt> and will be open for reading and writing\n if the instance was created with mode <tt>\"rw\"</tt>.</p>\n\n<p> <a name=\"append-mode\"></a><p> A file channel that is open for writing may be in\n <i>append mode</i>, for example if it was obtained from a file-output stream\n that was created by invoking the FileOutputStream(File,boolean) constructor and passing <tt>true</tt> for\n the second parameter.  In this mode each invocation of a relative write\n operation first advances the position to the end of the file and then writes\n the requested data.  Whether the advancement of the position and the writing\n of the data are done in a single atomic operation is system-dependent and\n therefore unspecified.</p>\n\n<p> @see java.io.FileInputStream#getChannel()\n @see java.io.FileOutputStream#getChannel()\n @see java.io.RandomAccessFile#getChannel()</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-force' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-force' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-force' class='name expandable'>force</a>( <span class='pre'>metaData</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Forces any updates to this channel's file to be written to the storage\n device that contains it. ...</div><div class='long'><p>Forces any updates to this channel's file to be written to the storage\n device that contains it.</p>\n\n<p> <p> If this channel's file resides on a local storage device then when\n this method returns it is guaranteed that all changes made to the file\n since this channel was created, or since this method was last invoked,\n will have been written to that device.  This is useful for ensuring that\n critical information is not lost in the event of a system crash.</p>\n\n<p> <p> If the file does not reside on a local device then no such guarantee\n is made.</p>\n\n<p> <p> The <tt>metaData</tt> parameter can be used to limit the number of\n I/O operations that this method is required to perform.  Passing\n <tt>false</tt> for this parameter indicates that only updates to the\n file's content need be written to storage; passing <tt>true</tt>\n indicates that updates to both the file's content and metadata must be\n written, which generally requires at least one more I/O operation.\n Whether this parameter actually has any effect is dependent upon the\n underlying operating system and is therefore unspecified.</p>\n\n<p> <p> Invoking this method may cause an I/O operation to occur even if the\n channel was only opened for reading.  Some operating systems, for\n example, maintain a last-access time as part of a file's metadata, and\n this time is updated whenever the file is read.  Whether or not this is\n actually done is system-dependent and is therefore unspecified.</p>\n\n<p> <p> This method is only guaranteed to force changes that were made to\n this channel's file via the methods defined in this class.  It may or\n may not force changes that were made by modifying the content of a\n <i>mapped byte buffer</i> obtained by\n invoking the <a href=\"#!/api/java.nio.channels.FileChannel-method-map\" rel=\"java.nio.channels.FileChannel-method-map\" class=\"docClass\">map</a> method.  Invoking the force method of the mapped byte buffer will\n force changes made to the buffer's content to be written.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>metaData</span> : Boolean<div class='sub-desc'><p>If <tt>true</tt> then this method is required to force changes\n          to both the file's content and metadata to be written to\n          storage; otherwise, it need only force content changes to be\n          written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-lock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-lock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-lock' class='name expandable'>lock</a>( <span class='pre'></span> ) : Object {java.nio.channels.FileLock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires an exclusive lock on this channel's file. ...</div><div class='long'><p>Acquires an exclusive lock on this channel's file.</p>\n\n<p> <p> An invocation of this method of the form <tt>fc.lock()</tt> behaves\n in exactly the same way as the invocation</p>\n\n<pre>     fc.lock(0L, Long.MAX_VALUE, false) </pre>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.FileLock}</span><div class='sub-desc'><p>A lock object representing the newly-acquired lock</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AsynchronousCloseException\n          If another thread closes this channel while the invoking\n          thread is blocked in this method</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileLockInterruptionException\n          If the invoking thread is interrupted while blocked in this\n          method</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>OverlappingFileLockException\n          If a lock that overlaps the requested region is already held by\n          this Java virtual machine, or if another thread is already\n          blocked in this method and is attempting to lock an overlapping\n          region of the same file</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If this channel was not opened for writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs\n@see <a href=\"#!/api/java.nio.channels.FileChannel-method-lock\" rel=\"java.nio.channels.FileChannel-method-lock\" class=\"docClass\">lock</a>(long,long,boolean)\n@see <a href=\"#!/api/java.nio.channels.FileChannel-method-tryLock\" rel=\"java.nio.channels.FileChannel-method-tryLock\" class=\"docClass\">tryLock</a>()\n@see <a href=\"#!/api/java.nio.channels.FileChannel-method-tryLock\" rel=\"java.nio.channels.FileChannel-method-tryLock\" class=\"docClass\">tryLock</a>(long,long,boolean)</p>\n</div></li></ul></div></div></div><div id='method-map' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-map' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-map' class='name expandable'>map</a>( <span class='pre'>mode, position, size</span> ) : Object {java.nio.MappedByteBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Maps a region of this channel's file directly into memory. ...</div><div class='long'><p>Maps a region of this channel's file directly into memory.</p>\n\n<p> <p> A region of a file may be mapped into memory in one of three modes:\n </p></p>\n\n<p> <ul></ul></p>\n\n<p>   <li><p> <i>Read-only:</i> Any attempt to modify the resulting buffer\n   will cause a java.nio.ReadOnlyBufferException to be thrown.\n   (<a href=\"#!/api/java.nio.channels.FileChannel.MapMode-property-READ_ONLY\" rel=\"java.nio.channels.FileChannel.MapMode-property-READ_ONLY\" class=\"docClass\">java.nio.channels.FileChannel.MapMode.READ_ONLY</a>) </p></li></p>\n\n<p>   <li><p> <i>Read/write:</i> Changes made to the resulting buffer will\n   eventually be propagated to the file; they may or may not be made\n   visible to other programs that have mapped the same file.  (<a href=\"#!/api/java.nio.channels.FileChannel.MapMode-property-READ_WRITE\" rel=\"java.nio.channels.FileChannel.MapMode-property-READ_WRITE\" class=\"docClass\">java.nio.channels.FileChannel.MapMode.READ_WRITE</a>) </p></li></p>\n\n<p>   <li><p> <i>Private:</i> Changes made to the resulting buffer will not\n   be propagated to the file and will not be visible to other programs\n   that have mapped the same file; instead, they will cause private\n   copies of the modified portions of the buffer to be created.  (<a href=\"#!/api/java.nio.channels.FileChannel.MapMode-property-PRIVATE\" rel=\"java.nio.channels.FileChannel.MapMode-property-PRIVATE\" class=\"docClass\">java.nio.channels.FileChannel.MapMode.PRIVATE</a>) </p></li></p>\n\n<p> </p>\n\n<p> <p> For a read-only mapping, this channel must have been opened for\n reading; for a read/write or private mapping, this channel must have\n been opened for both reading and writing.</p>\n\n<p> <p> The <i>mapped byte buffer</i>\n returned by this method will have a position of zero and a limit and\n capacity of <tt>size</tt>; its mark will be undefined.  The buffer and\n the mapping that it represents will remain valid until the buffer itself\n is garbage-collected.</p>\n\n<p> <p> A mapping, once established, is not dependent upon the file channel\n that was used to create it.  Closing the channel, in particular, has no\n effect upon the validity of the mapping.</p>\n\n<p> <p> Many of the details of memory-mapped files are inherently dependent\n upon the underlying operating system and are therefore unspecified.  The\n behavior of this method when the requested region is not completely\n contained within this channel's file is unspecified.  Whether changes\n made to the content or size of the underlying file, by this program or\n another, are propagated to the buffer is unspecified.  The rate at which\n changes to the buffer are propagated to the file is unspecified.</p>\n\n<p> <p> For most operating systems, mapping a file into memory is more\n expensive than reading or writing a few tens of kilobytes of data via\n the usual <a href=\"#!/api/java.nio.channels.FileChannel-method-read\" rel=\"java.nio.channels.FileChannel-method-read\" class=\"docClass\">read</a> and <a href=\"#!/api/java.nio.channels.FileChannel-method-write\" rel=\"java.nio.channels.FileChannel-method-write\" class=\"docClass\">write</a> methods.  From the\n standpoint of performance it is generally only worth mapping relatively\n large files into memory.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mode</span> : Object {FileChannel.MapMode}<div class='sub-desc'><p>One of the constants READ_ONLY, READ_WRITE, or PRIVATE defined in the MapMode class, according to\n         whether the file is to be mapped read-only, read/write, or\n         privately (copy-on-write), respectively</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The position within the file at which the mapped region\n         is to start; must be non-negative</p>\n</div></li><li><span class='pre'>size</span> : Number<div class='sub-desc'><p>The size of the region to be mapped; must be non-negative and\n         no greater than java.lang.Integer.MAX_VALUE</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.MappedByteBuffer}</span><div class='sub-desc'><p>The mapped byte buffer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NonReadableChannelException\n         If the <tt>mode</tt> is READ_ONLY but\n         this channel was not opened for reading</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n         If the <tt>mode</tt> is READ_WRITE or\n         PRIVATE but this channel was not opened\n         for both reading and writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n         If the preconditions on the parameters do not hold</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n         If some other I/O error occurs\n@see <a href=\"#!/api/java.nio.channels.FileChannel.MapMode\" rel=\"java.nio.channels.FileChannel.MapMode\" class=\"docClass\">java.nio.channels.FileChannel.MapMode</a>\n@see java.nio.MappedByteBuffer</p>\n</div></li></ul></div></div></div><div id='method-open' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-open' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-open' class='name expandable'>open</a>( <span class='pre'>path, options</span> ) : Object {java.nio.channels.FileChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file, returning a file channel to access the file. ...</div><div class='long'><p>Opens or creates a file, returning a file channel to access the file.</p>\n\n<p> <p> An invocation of this method behaves in exactly the same way as the\n invocation</p>\n\n<pre>     fc.open(file, opts, new FileAttribute&lt;?&gt;[0]);\n </pre>\n\n\n<p> where {@code opts} is a set of the options specified in the {@code\n options} array.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>The path of the file to open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>Options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.FileChannel}</span><div class='sub-desc'><p>A new file channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the set contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If the {@code path} is associated with a provider that does not\n          support creating file channels, or an unsupported open option is\n          specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager is installed and it denies an\n          unspecified permission required by the implementation.\n          In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check\n          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check\n          write access if the file is opened for writing</p>\n</div></li></ul></div></div></div><div id='method-position' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-position' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-position' class='name expandable'>position</a>( <span class='pre'>newPosition</span> ) : Object {java.nio.channels.FileChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets this channel's file position. ...</div><div class='long'><p>Sets this channel's file position.</p>\n\n<p> <p> Setting the position to a value that is greater than the file's\n current size is legal but does not change the size of the file.  A later\n attempt to read bytes at such a position will immediately return an\n end-of-file indication.  A later attempt to write bytes at such a\n position will cause the file to be grown to accommodate the new bytes;\n the values of any bytes between the previous end-of-file and the\n newly-written bytes are unspecified.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newPosition</span> : Number<div class='sub-desc'><p>The new position, a non-negative integer counting\n         the number of bytes from the beginning of the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.FileChannel}</span><div class='sub-desc'><p>This file channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the new position is negative</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-read' class='name expandable'>read</a>( <span class='pre'>dst, position</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position. ...</div><div class='long'><p>Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position.</p>\n\n<p> <p> This method works in the same manner as the <a href=\"#!/api/java.nio.channels.FileChannel-method-read\" rel=\"java.nio.channels.FileChannel-method-read\" class=\"docClass\">read</a>(ByteBuffer) method, except that bytes are read starting at the\n given file position rather than at the channel's current position.  This\n method does not modify this channel's position.  If the given position\n is greater than the file's current size then no bytes are read.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dst</span> : Object {ByteBuffer}<div class='sub-desc'><p>The buffer into which bytes are to be transferred</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The file position at which the transfer is to begin;\n         must be non-negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes read, possibly zero, or <tt>-1</tt> if the\n          given position is greater than or equal to the file's current\n          size</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the position is negative</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonReadableChannelException\n          If this channel was not opened for reading</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AsynchronousCloseException\n          If another thread closes this channel\n          while the read operation is in progress</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedByInterruptException\n          If another thread interrupts the current thread\n          while the read operation is in progress, thereby\n          closing the channel and setting the current thread's\n          interrupt status</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-size' class='name expandable'>size</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current size of this channel's file. ...</div><div class='long'><p>Returns the current size of this channel's file.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current size of this channel's file,\n          measured in bytes</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-transferFrom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-transferFrom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-transferFrom' class='name expandable'>transferFrom</a>( <span class='pre'>src, position, count</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Transfers bytes into this channel's file from the given readable byte\n channel. ...</div><div class='long'><p>Transfers bytes into this channel's file from the given readable byte\n channel.</p>\n\n<p> <p> An attempt is made to read up to <tt>count</tt> bytes from the\n source channel and write them to this channel's file starting at the\n given <tt>position</tt>.  An invocation of this method may or may not\n transfer all of the requested bytes; whether or not it does so depends\n upon the natures and states of the channels.  Fewer than the requested\n number of bytes will be transferred if the source channel has fewer than\n <tt>count</tt> bytes remaining, or if the source channel is non-blocking\n and has fewer than <tt>count</tt> bytes immediately available in its\n input buffer.</p>\n\n<p> <p> This method does not modify this channel's position.  If the given\n position is greater than the file's current size then no bytes are\n transferred.  If the source channel has a position then bytes are read\n starting at that position and then the position is incremented by the\n number of bytes read.</p>\n\n<p> <p> This method is potentially much more efficient than a simple loop\n that reads from the source channel and writes to this channel.  Many\n operating systems can transfer bytes directly from the source channel\n into the filesystem cache without actually copying them.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object {ReadableByteChannel}<div class='sub-desc'><p>The source channel</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The position within the file at which the transfer is to begin;\n         must be non-negative</p>\n</div></li><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>The maximum number of bytes to be transferred; must be\n         non-negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes, possibly zero,\n          that were actually transferred</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n         If the preconditions on the parameters do not hold</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonReadableChannelException\n          If the source channel was not opened for reading</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If this channel was not opened for writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If either this channel or the source channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AsynchronousCloseException\n          If another thread closes either channel\n          while the transfer is in progress</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedByInterruptException\n          If another thread interrupts the current thread while the\n          transfer is in progress, thereby closing both channels and\n          setting the current thread's interrupt status</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-transferTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-transferTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-transferTo' class='name expandable'>transferTo</a>( <span class='pre'>position, count, target</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Transfers bytes from this channel's file to the given writable byte\n channel. ...</div><div class='long'><p>Transfers bytes from this channel's file to the given writable byte\n channel.</p>\n\n<p> <p> An attempt is made to read up to <tt>count</tt> bytes starting at\n the given <tt>position</tt> in this channel's file and write them to the\n target channel.  An invocation of this method may or may not transfer\n all of the requested bytes; whether or not it does so depends upon the\n natures and states of the channels.  Fewer than the requested number of\n bytes are transferred if this channel's file contains fewer than\n <tt>count</tt> bytes starting at the given <tt>position</tt>, or if the\n target channel is non-blocking and it has fewer than <tt>count</tt>\n bytes free in its output buffer.</p>\n\n<p> <p> This method does not modify this channel's position.  If the given\n position is greater than the file's current size then no bytes are\n transferred.  If the target channel has a position then bytes are\n written starting at that position and then the position is incremented\n by the number of bytes written.</p>\n\n<p> <p> This method is potentially much more efficient than a simple loop\n that reads from this channel and writes to the target channel.  Many\n operating systems can transfer bytes directly from the filesystem cache\n to the target channel without actually copying them.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The position within the file at which the transfer is to begin;\n         must be non-negative</p>\n</div></li><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>The maximum number of bytes to be transferred; must be\n         non-negative</p>\n</div></li><li><span class='pre'>target</span> : Object {WritableByteChannel}<div class='sub-desc'><p>The target channel</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes, possibly zero,\n          that were actually transferred</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n         If the preconditions on the parameters do not hold</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonReadableChannelException\n          If this channel was not opened for reading</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If the target channel was not opened for writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If either this channel or the target channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AsynchronousCloseException\n          If another thread closes either channel\n          while the transfer is in progress</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedByInterruptException\n          If another thread interrupts the current thread while the\n          transfer is in progress, thereby closing both channels and\n          setting the current thread's interrupt status</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-truncate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-truncate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-truncate' class='name expandable'>truncate</a>( <span class='pre'>size</span> ) : Object {java.nio.channels.FileChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Truncates this channel's file to the given size. ...</div><div class='long'><p>Truncates this channel's file to the given size.</p>\n\n<p> <p> If the given size is less than the file's current size then the file\n is truncated, discarding any bytes beyond the new end of the file.  If\n the given size is greater than or equal to the file's current size then\n the file is not modified.  In either case, if this channel's file\n position is greater than the given size then it is set to that size.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>size</span> : Number<div class='sub-desc'><p>The new size, a non-negative byte count</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.FileChannel}</span><div class='sub-desc'><p>This file channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If this channel was not opened for writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the new size is negative</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-tryLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-tryLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-tryLock' class='name expandable'>tryLock</a>( <span class='pre'></span> ) : Object {java.nio.channels.FileLock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to acquire an exclusive lock on this channel's file. ...</div><div class='long'><p>Attempts to acquire an exclusive lock on this channel's file.</p>\n\n<p> <p> An invocation of this method of the form <tt>fc.tryLock()</tt>\n behaves in exactly the same way as the invocation</p>\n\n<pre>     fc.tryLock(0L, Long.MAX_VALUE, false) </pre>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.FileLock}</span><div class='sub-desc'><p>A lock object representing the newly-acquired lock,\n          or <tt>null</tt> if the lock could not be acquired\n          because another program holds an overlapping lock</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>OverlappingFileLockException\n          If a lock that overlaps the requested region is already held by\n          this Java virtual machine, or if another thread is already\n          blocked in this method and is attempting to lock an overlapping\n          region</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs\n@see <a href=\"#!/api/java.nio.channels.FileChannel-method-lock\" rel=\"java.nio.channels.FileChannel-method-lock\" class=\"docClass\">lock</a>()\n@see <a href=\"#!/api/java.nio.channels.FileChannel-method-lock\" rel=\"java.nio.channels.FileChannel-method-lock\" class=\"docClass\">lock</a>(long,long,boolean)\n@see <a href=\"#!/api/java.nio.channels.FileChannel-method-tryLock\" rel=\"java.nio.channels.FileChannel-method-tryLock\" class=\"docClass\">tryLock</a>(long,long,boolean)</p>\n</div></li></ul></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.FileChannel'>java.nio.channels.FileChannel</span><br/><a href='source/FileChannel.html#java-nio-channels-FileChannel-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.FileChannel-method-write' class='name expandable'>write</a>( <span class='pre'>src, position</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a sequence of bytes to this channel from the given buffer,\n starting at the given file position. ...</div><div class='long'><p>Writes a sequence of bytes to this channel from the given buffer,\n starting at the given file position.</p>\n\n<p> <p> This method works in the same manner as the <a href=\"#!/api/java.nio.channels.FileChannel-method-write\" rel=\"java.nio.channels.FileChannel-method-write\" class=\"docClass\">write</a>(ByteBuffer) method, except that bytes are written starting at\n the given file position rather than at the channel's current position.\n This method does not modify this channel's position.  If the given\n position is greater than the file's current size then the file will be\n grown to accommodate the new bytes; the values of any bytes between the\n previous end-of-file and the newly-written bytes are unspecified.  </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object {ByteBuffer}<div class='sub-desc'><p>The buffer from which bytes are to be transferred</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The file position at which the transfer is to begin;\n         must be non-negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes written, possibly zero</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the position is negative</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If this channel was not opened for writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AsynchronousCloseException\n          If another thread closes this channel\n          while the write operation is in progress</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedByInterruptException\n          If another thread interrupts the current thread\n          while the write operation is in progress, thereby\n          closing the channel and setting the current thread's\n          interrupt status</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});