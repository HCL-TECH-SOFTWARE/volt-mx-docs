Ext.data.JsonP.java_nio_channels_AsynchronousFileChannel({"tagname":"class","name":"java.nio.channels.AsynchronousFileChannel","autodetected":{},"files":[{"filename":"AsynchronousFileChannel.js","href":"AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"force","tagname":"method","owner":"java.nio.channels.AsynchronousFileChannel","id":"method-force","meta":{}},{"name":"lock","tagname":"method","owner":"java.nio.channels.AsynchronousFileChannel","id":"method-lock","meta":{}},{"name":"open","tagname":"method","owner":"java.nio.channels.AsynchronousFileChannel","id":"method-open","meta":{}},{"name":"read","tagname":"method","owner":"java.nio.channels.AsynchronousFileChannel","id":"method-read","meta":{}},{"name":"size","tagname":"method","owner":"java.nio.channels.AsynchronousFileChannel","id":"method-size","meta":{}},{"name":"truncate","tagname":"method","owner":"java.nio.channels.AsynchronousFileChannel","id":"method-truncate","meta":{}},{"name":"tryLock","tagname":"method","owner":"java.nio.channels.AsynchronousFileChannel","id":"method-tryLock","meta":{}},{"name":"write","tagname":"method","owner":"java.nio.channels.AsynchronousFileChannel","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.AsynchronousFileChannel","short_doc":"implements java.nio.channels.AsynchronousChannel\n\nAn asynchronous channel for reading, writing, and manipulating a file. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.channels.AsynchronousFileChannel</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel' target='_blank'>AsynchronousFileChannel.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.channels.AsynchronousChannel\" rel=\"java.nio.channels.AsynchronousChannel\" class=\"docClass\">java.nio.channels.AsynchronousChannel</a></p>\n\n<p>An asynchronous channel for reading, writing, and manipulating a file.</p>\n\n<p> <p> An asynchronous file channel is created when a file is opened by invoking\n one of the <a href=\"#!/api/java.nio.channels.AsynchronousFileChannel-method-open\" rel=\"java.nio.channels.AsynchronousFileChannel-method-open\" class=\"docClass\">open</a> methods defined by this class. The file contains\n a variable-length sequence of bytes that can be read and written and whose\n current size can be queried. The size of the file increases\n when bytes are written beyond its  current size; the size of the file decreases\n when it is <a href=\"#!/api/java.nio.channels.AsynchronousFileChannel-method-truncate\" rel=\"java.nio.channels.AsynchronousFileChannel-method-truncate\" class=\"docClass\">truncated</a>.</p>\n\n<p> <p> An asynchronous file channel does not have a <i>current position</i>\n within the file. Instead, the file position is specified to each read and\n write method that initiates asynchronous operations. A <a href=\"#!/api/java.nio.channels.CompletionHandler\" rel=\"java.nio.channels.CompletionHandler\" class=\"docClass\">java.nio.channels.CompletionHandler</a>\n is specified as a parameter and is invoked to consume the result of the I/O\n operation. This class also defines read and write methods that initiate\n asynchronous operations, returning a Future to represent the pending\n result of the operation. The {@code Future} may be used to check if the\n operation has completed, wait for its completion, and retrieve the result.</p>\n\n<p> <p> In addition to read and write operations, this class defines the\n following operations: </p></p>\n\n<p> <ul></ul></p>\n\n<p>   <li><p> Updates made to a file may be <a href=\"#!/api/java.nio.channels.AsynchronousFileChannel-method-force\" rel=\"java.nio.channels.AsynchronousFileChannel-method-force\" class=\"docClass\">&lt;i&gt;forced\n   out&lt;/i&gt;</a> to the underlying storage device, ensuring that data are not\n   lost in the event of a system crash.  </p></li></p>\n\n<p>   <li><p> A region of a file may be <a href=\"#!/api/java.nio.channels.AsynchronousFileChannel-method-lock\" rel=\"java.nio.channels.AsynchronousFileChannel-method-lock\" class=\"docClass\">&lt;i&gt;locked&lt;/i&gt;</a> against\n   access by other programs.  </p></li></p>\n\n<p> </p>\n\n<p> <p> An {@code AsynchronousFileChannel} is associated with a thread pool to\n which tasks are submitted to handle I/O events and dispatch to completion\n handlers that consume the results of I/O operations on the channel. The\n completion handler for an I/O operation initiated on a channel is guaranteed\n to be invoked by one of the threads in the thread pool (This ensures that the\n completion handler is run by a thread with the expected <em>identity</em>).\n Where an I/O operation completes immediately, and the initiating thread is\n itself a thread in the thread pool, then the completion handler may be invoked\n directly by the initiating thread. When an {@code AsynchronousFileChannel} is\n created without specifying a thread pool then the channel is associated with\n a system-dependent default thread pool that may be shared with other\n channels. The default thread pool is configured by the system properties\n defined by the <a href=\"#!/api/java.nio.channels.AsynchronousChannelGroup\" rel=\"java.nio.channels.AsynchronousChannelGroup\" class=\"docClass\">java.nio.channels.AsynchronousChannelGroup</a> class.</p>\n\n<p> <p> Channels of this type are safe for use by multiple concurrent threads. The\n <a href=\"#!/api/java.nio.channels.Channel-method-close\" rel=\"java.nio.channels.Channel-method-close\" class=\"docClass\">close</a> method may be invoked at any time, as specified\n by the <a href=\"#!/api/java.nio.channels.Channel\" rel=\"java.nio.channels.Channel\" class=\"docClass\">java.nio.channels.Channel</a> interface. This causes all outstanding asynchronous\n operations on the channel to complete with the exception <a href=\"#!/api/java.nio.channels.AsynchronousCloseException\" rel=\"java.nio.channels.AsynchronousCloseException\" class=\"docClass\">java.nio.channels.AsynchronousCloseException</a>. Multiple read and write operations may be\n outstanding at the same time. When multiple read and write operations are\n outstanding then the ordering of the I/O operations, and the order that the\n completion handlers are invoked, is not specified; they are not, in particular,\n guaranteed to execute in the order that the operations were initiated. The\n ByteBuffers used when reading or writing are not\n safe for use by multiple concurrent I/O operations. Furthermore, after an I/O\n operation is initiated then care should be taken to ensure that the buffer is\n not accessed until after the operation has completed.</p>\n\n<p> <p> As with <a href=\"#!/api/java.nio.channels.FileChannel\" rel=\"java.nio.channels.FileChannel\" class=\"docClass\">java.nio.channels.FileChannel</a>, the view of a file provided by an instance of\n this class is guaranteed to be consistent with other views of the same file\n provided by other instances in the same program.  The view provided by an\n instance of this class may or may not, however, be consistent with the views\n seen by other concurrently-running programs due to caching performed by the\n underlying operating system and delays induced by network-filesystem protocols.\n This is true regardless of the language in which these other programs are\n written, and whether they are running on the same machine or on some other\n machine.  The exact nature of any such inconsistencies are system-dependent\n and are therefore unspecified.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-force' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousFileChannel'>java.nio.channels.AsynchronousFileChannel</span><br/><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel-method-force' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousFileChannel-method-force' class='name expandable'>force</a>( <span class='pre'>metaData</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Forces any updates to this channel's file to be written to the storage\n device that contains it. ...</div><div class='long'><p>Forces any updates to this channel's file to be written to the storage\n device that contains it.</p>\n\n<p> <p> If this channel's file resides on a local storage device then when\n this method returns it is guaranteed that all changes made to the file\n since this channel was created, or since this method was last invoked,\n will have been written to that device.  This is useful for ensuring that\n critical information is not lost in the event of a system crash.</p>\n\n<p> <p> If the file does not reside on a local device then no such guarantee\n is made.</p>\n\n<p> <p> The {@code metaData} parameter can be used to limit the number of\n I/O operations that this method is required to perform.  Passing\n {@code false} for this parameter indicates that only updates to the\n file's content need be written to storage; passing {@code true}\n indicates that updates to both the file's content and metadata must be\n written, which generally requires at least one more I/O operation.\n Whether this parameter actually has any effect is dependent upon the\n underlying operating system and is therefore unspecified.</p>\n\n<p> <p> Invoking this method may cause an I/O operation to occur even if the\n channel was only opened for reading.  Some operating systems, for\n example, maintain a last-access time as part of a file's metadata, and\n this time is updated whenever the file is read.  Whether or not this is\n actually done is system-dependent and is therefore unspecified.</p>\n\n<p> <p> This method is only guaranteed to force changes that were made to\n this channel's file via the methods defined in this class.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>metaData</span> : Boolean<div class='sub-desc'><p>If {@code true} then this method is required to force changes\n          to both the file's content and metadata to be written to\n          storage; otherwise, it need only force content changes to be\n          written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-lock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousFileChannel'>java.nio.channels.AsynchronousFileChannel</span><br/><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel-method-lock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousFileChannel-method-lock' class='name expandable'>lock</a>( <span class='pre'></span> ) : Object {java.util.concurrent.Future}<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires an exclusive lock on this channel's file. ...</div><div class='long'><p>Acquires an exclusive lock on this channel's file.</p>\n\n<p> <p> This method initiates an operation to acquire an exclusive lock on this\n channel's file. The method returns a {@code Future} representing the\n pending result of the operation. The {@code Future}'s get method returns the <a href=\"#!/api/java.nio.channels.FileLock\" rel=\"java.nio.channels.FileLock\" class=\"docClass\">java.nio.channels.FileLock</a> on successful completion.</p>\n\n<p> <p> An invocation of this method behaves in exactly the same way as the\n invocation</p>\n\n<pre>     ch.lock(0L, Long.MAX_VALUE, false)\n </pre>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Future}</span><div class='sub-desc'><p>a {@code Future} object representing the pending result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>OverlappingFileLockException\n          If a lock is already held by this Java virtual machine, or there\n          is already a pending attempt to lock a region</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If this channel was not opened for writing</p>\n</div></li></ul></div></div></div><div id='method-open' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousFileChannel'>java.nio.channels.AsynchronousFileChannel</span><br/><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel-method-open' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousFileChannel-method-open' class='name expandable'>open</a>( <span class='pre'>file, options</span> ) : Object {java.nio.channels.AsynchronousFileChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file. ...</div><div class='long'><p>Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file.</p>\n\n<p> <p> An invocation of this method behaves in exactly the same way as the\n invocation</p>\n\n<pre>     ch.open(file, opts, null, new FileAttribute&lt;?&gt;[0]);\n </pre>\n\n\n<p> where {@code opts} is a {@code Set} containing the options specified to\n this method.</p>\n\n<p> <p> The resulting channel is associated with default thread pool to which\n tasks are submitted to handle I/O events and dispatch to completion\n handlers that consume the result of asynchronous operations performed on\n the resulting channel.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>file</span> : Object {Path}<div class='sub-desc'><p>The path of the file to open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>Options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousFileChannel}</span><div class='sub-desc'><p>A new asynchronous file channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the set contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If the {@code file} is associated with a provider that does not\n          support creating file channels, or an unsupported open option is\n          specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager is installed and it denies an\n          unspecified permission required by the implementation.\n          In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check\n          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check\n          write access if the file is opened for writing</p>\n</div></li></ul></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousFileChannel'>java.nio.channels.AsynchronousFileChannel</span><br/><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousFileChannel-method-read' class='name expandable'>read</a>( <span class='pre'>dst, position</span> ) : Object {java.util.concurrent.Future}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position. ...</div><div class='long'><p>Reads a sequence of bytes from this channel into the given buffer,\n starting at the given file position.</p>\n\n<p> <p> This method initiates the reading of a sequence of bytes from this\n channel into the given buffer, starting at the given file position. This\n method returns a {@code Future} representing the pending result of the\n operation. The {@code Future}'s get method returns\n the number of bytes read or {@code -1} if the given position is greater\n than or equal to the file's size at the time that the read is attempted.</p>\n\n<p> <p> This method works in the same manner as the java.nio.channels.AsynchronousByteChannel.read(ByteBuffer) method, except that bytes are\n read starting at the given file position. If the given file position is\n greater than the file's size at the time that the read is attempted then\n no bytes are read.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dst</span> : Object {ByteBuffer}<div class='sub-desc'><p>The buffer into which bytes are to be transferred</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The file position at which the transfer is to begin;\n          must be non-negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Future}</span><div class='sub-desc'><p>A {@code Future} object representing the pending result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the position is negative or the buffer is read-only</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonReadableChannelException\n          If this channel was not opened for reading</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousFileChannel'>java.nio.channels.AsynchronousFileChannel</span><br/><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousFileChannel-method-size' class='name expandable'>size</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current size of this channel's file. ...</div><div class='long'><p>Returns the current size of this channel's file.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current size of this channel's file, measured in bytes</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-truncate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousFileChannel'>java.nio.channels.AsynchronousFileChannel</span><br/><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel-method-truncate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousFileChannel-method-truncate' class='name expandable'>truncate</a>( <span class='pre'>size</span> ) : Object {java.nio.channels.AsynchronousFileChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Truncates this channel's file to the given size. ...</div><div class='long'><p>Truncates this channel's file to the given size.</p>\n\n<p> <p> If the given size is less than the file's current size then the file\n is truncated, discarding any bytes beyond the new end of the file.  If\n the given size is greater than or equal to the file's current size then\n the file is not modified. </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>size</span> : Number<div class='sub-desc'><p>The new size, a non-negative byte count</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousFileChannel}</span><div class='sub-desc'><p>This file channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If this channel was not opened for writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the new size is negative</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-tryLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousFileChannel'>java.nio.channels.AsynchronousFileChannel</span><br/><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel-method-tryLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousFileChannel-method-tryLock' class='name expandable'>tryLock</a>( <span class='pre'></span> ) : Object {java.nio.channels.FileLock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to acquire an exclusive lock on this channel's file. ...</div><div class='long'><p>Attempts to acquire an exclusive lock on this channel's file.</p>\n\n<p> <p> An invocation of this method of the form {@code ch.tryLock()}\n behaves in exactly the same way as the invocation</p>\n\n<pre>     ch.tryLock(0L, Long.MAX_VALUE, false) </pre>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.FileLock}</span><div class='sub-desc'><p>A lock object representing the newly-acquired lock,\n          or {@code null} if the lock could not be acquired\n          because another program holds an overlapping lock</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>OverlappingFileLockException\n          If a lock that overlaps the requested region is already held by\n          this Java virtual machine, or if another thread is already\n          blocked in this method and is attempting to lock an overlapping\n          region</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If {@code shared} is false but this channel was not opened for writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs\n@see <a href=\"#!/api/java.nio.channels.AsynchronousFileChannel-method-lock\" rel=\"java.nio.channels.AsynchronousFileChannel-method-lock\" class=\"docClass\">lock</a>(Object,CompletionHandler)\n@see <a href=\"#!/api/java.nio.channels.AsynchronousFileChannel-method-lock\" rel=\"java.nio.channels.AsynchronousFileChannel-method-lock\" class=\"docClass\">lock</a>(long,long,boolean,Object,CompletionHandler)\n@see <a href=\"#!/api/java.nio.channels.AsynchronousFileChannel-method-tryLock\" rel=\"java.nio.channels.AsynchronousFileChannel-method-tryLock\" class=\"docClass\">tryLock</a>(long,long,boolean)</p>\n</div></li></ul></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousFileChannel'>java.nio.channels.AsynchronousFileChannel</span><br/><a href='source/AsynchronousFileChannel.html#java-nio-channels-AsynchronousFileChannel-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousFileChannel-method-write' class='name expandable'>write</a>( <span class='pre'>src, position</span> ) : Object {java.util.concurrent.Future}<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a sequence of bytes to this channel from the given buffer, starting\n at the given file position. ...</div><div class='long'><p>Writes a sequence of bytes to this channel from the given buffer, starting\n at the given file position.</p>\n\n<p> <p> This method initiates the writing of a sequence of bytes to this\n channel from the given buffer, starting at the given file position. The\n method returns a {@code Future} representing the pending result of the\n write operation. The {@code Future}'s get method\n returns the number of bytes written.</p>\n\n<p> <p> This method works in the same manner as the java.nio.channels.AsynchronousByteChannel.write(ByteBuffer) method, except that bytes are\n written starting at the given file position. If the given position is\n greater than the file's size, at the time that the write is attempted,\n then the file will be grown to accommodate the new bytes; the values of\n any bytes between the previous end-of-file and the newly-written bytes\n are unspecified.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object {ByteBuffer}<div class='sub-desc'><p>The buffer from which bytes are to be transferred</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The file position at which the transfer is to begin;\n          must be non-negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Future}</span><div class='sub-desc'><p>A {@code Future} object representing the pending result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the position is negative</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NonWritableChannelException\n          If this channel was not opened for writing</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});