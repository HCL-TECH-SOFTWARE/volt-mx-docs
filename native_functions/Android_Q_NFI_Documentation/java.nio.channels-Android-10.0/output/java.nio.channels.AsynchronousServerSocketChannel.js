Ext.data.JsonP.java_nio_channels_AsynchronousServerSocketChannel({"tagname":"class","name":"java.nio.channels.AsynchronousServerSocketChannel","autodetected":{},"files":[{"filename":"AsynchronousServerSocketChannel.js","href":"AsynchronousServerSocketChannel.html#java-nio-channels-AsynchronousServerSocketChannel"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"accept","tagname":"method","owner":"java.nio.channels.AsynchronousServerSocketChannel","id":"method-accept","meta":{}},{"name":"bind","tagname":"method","owner":"java.nio.channels.AsynchronousServerSocketChannel","id":"method-bind","meta":{}},{"name":"getLocalAddress","tagname":"method","owner":"java.nio.channels.AsynchronousServerSocketChannel","id":"method-getLocalAddress","meta":{}},{"name":"open","tagname":"method","owner":"java.nio.channels.AsynchronousServerSocketChannel","id":"method-open","meta":{}},{"name":"provider","tagname":"method","owner":"java.nio.channels.AsynchronousServerSocketChannel","id":"method-provider","meta":{}},{"name":"setOption","tagname":"method","owner":"java.nio.channels.AsynchronousServerSocketChannel","id":"method-setOption","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.AsynchronousServerSocketChannel","short_doc":"implements java.nio.channels.AsynchronousChannel\n\n implements java.nio.channels.NetworkChannel\n\nAn asynchronous chann...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.channels.AsynchronousServerSocketChannel</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AsynchronousServerSocketChannel.html#java-nio-channels-AsynchronousServerSocketChannel' target='_blank'>AsynchronousServerSocketChannel.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.channels.AsynchronousChannel\" rel=\"java.nio.channels.AsynchronousChannel\" class=\"docClass\">java.nio.channels.AsynchronousChannel</a></p>\n\n<p> implements <a href=\"#!/api/java.nio.channels.NetworkChannel\" rel=\"java.nio.channels.NetworkChannel\" class=\"docClass\">java.nio.channels.NetworkChannel</a></p>\n\n<p>An asynchronous channel for stream-oriented listening sockets.</p>\n\n<p> <p> An asynchronous server-socket channel is created by invoking the\n <a href=\"#!/api/java.nio.channels.AsynchronousServerSocketChannel-method-open\" rel=\"java.nio.channels.AsynchronousServerSocketChannel-method-open\" class=\"docClass\">open</a> method of this class.\n A newly-created asynchronous server-socket channel is open but not yet bound.\n It can be bound to a local address and configured to listen for connections\n by invoking the bind method. Once bound,\n the accept method\n is used to initiate the accepting of connections to the channel's socket.\n An attempt to invoke the <tt>accept</tt> method on an unbound channel will\n cause a <a href=\"#!/api/java.nio.channels.NotYetBoundException\" rel=\"java.nio.channels.NotYetBoundException\" class=\"docClass\">java.nio.channels.NotYetBoundException</a> to be thrown.</p>\n\n<p> <p> Channels of this type are safe for use by multiple concurrent threads\n though at most one accept operation can be outstanding at any time.\n If a thread initiates an accept operation before a previous accept operation\n has completed then an <a href=\"#!/api/java.nio.channels.AcceptPendingException\" rel=\"java.nio.channels.AcceptPendingException\" class=\"docClass\">java.nio.channels.AcceptPendingException</a> will be thrown.</p>\n\n<p> <p> Socket options are configured using the setOption method. Channels of this type support the following options:\n <blockquote>\n <table border summary=\"Socket options\">\n   <tr>\n     <th>Option Name</th>\n     <th>Description</th>\n   </tr>\n   <tr>\n     <td> SO_RCVBUF </td>\n     <td> The size of the socket receive buffer </td>\n   </tr>\n   <tr>\n     <td> SO_REUSEADDR </td>\n     <td> Re-use address </td>\n   </tr>\n </table>\n </blockquote>\n Additional (implementation specific) options may also be supported.</p>\n\n<p> <p> <b>Usage Example:</b></p>\n\n<pre>  final AsynchronousServerSocketChannel listener =\n      AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(5000));\n\n  listener.accept(null, new CompletionHandler&lt;AsynchronousSocketChannel,Void&gt;() {\n      public void completed(AsynchronousSocketChannel ch, Void att) {\n          // accept the next connection\n          listener.accept(null, this);\n\n          // handle this connection\n          handle(ch);\n      }\n      public void failed(Throwable exc, Void att) {\n          ...\n      }\n  });\n </pre>\n\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-accept' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousServerSocketChannel'>java.nio.channels.AsynchronousServerSocketChannel</span><br/><a href='source/AsynchronousServerSocketChannel.html#java-nio-channels-AsynchronousServerSocketChannel-method-accept' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousServerSocketChannel-method-accept' class='name expandable'>accept</a>( <span class='pre'></span> ) : Object {java.util.concurrent.Future}<span class=\"signature\"></span></div><div class='description'><div class='short'>Accepts a connection. ...</div><div class='long'><p>Accepts a connection.</p>\n\n<p> <p> This method initiates an asynchronous operation to accept a\n connection made to this channel's socket. The method behaves in exactly\n the same manner as the java.nio.channels.CompletionHandler) method\n except that instead of specifying a completion handler, this method\n returns a {@code Future} representing the pending result. The {@code\n Future}'s get method returns the <a href=\"#!/api/java.nio.channels.AsynchronousSocketChannel\" rel=\"java.nio.channels.AsynchronousSocketChannel\" class=\"docClass\">java.nio.channels.AsynchronousSocketChannel</a> to the new connection on successful completion.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Future}</span><div class='sub-desc'><p>a {@code Future} object representing the pending result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>AcceptPendingException\n          If an accept operation is already in progress on this channel</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotYetBoundException\n          If this channel's socket has not yet been bound</p>\n</div></li></ul></div></div></div><div id='method-bind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousServerSocketChannel'>java.nio.channels.AsynchronousServerSocketChannel</span><br/><a href='source/AsynchronousServerSocketChannel.html#java-nio-channels-AsynchronousServerSocketChannel-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousServerSocketChannel-method-bind' class='name expandable'>bind</a>( <span class='pre'>local, backlog</span> ) : Object {java.nio.channels.AsynchronousServerSocketChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Binds the channel's socket to a local address and configures the socket to\n listen for connections. ...</div><div class='long'><p>Binds the channel's socket to a local address and configures the socket to\n listen for connections.</p>\n\n<p> <p> This method is used to establish an association between the socket and\n a local address. Once an association is established then the socket remains\n bound until the associated channel is closed.</p>\n\n<p> <p> The {@code backlog} parameter is the maximum number of pending\n connections on the socket. Its exact semantics are implementation specific.\n In particular, an implementation may impose a maximum length or may choose\n to ignore the parameter altogther. If the {@code backlog} parameter has\n the value {@code 0}, or a negative value, then an implementation specific\n default is used.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>local</span> : Object {SocketAddress}<div class='sub-desc'><p>The local address to bind the socket, or {@code null} to bind\n          to an automatically assigned socket address</p>\n</div></li><li><span class='pre'>backlog</span> : Number<div class='sub-desc'><p>The maximum number of pending connections</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousServerSocketChannel}</span><div class='sub-desc'><p>This channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>AlreadyBoundException\n          If the socket is already bound</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedAddressTypeException\n          If the type of the given address is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager has been installed and its checkListen method denies the operation</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If the channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-getLocalAddress' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousServerSocketChannel'>java.nio.channels.AsynchronousServerSocketChannel</span><br/><a href='source/AsynchronousServerSocketChannel.html#java-nio-channels-AsynchronousServerSocketChannel-method-getLocalAddress' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousServerSocketChannel-method-getLocalAddress' class='name expandable'>getLocalAddress</a>( <span class='pre'></span> ) : Object {java.net.SocketAddress}<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n \n If there is a security manager set, its {@code checkConnect} method is\n called with the local addres...</div><div class='long'><p>{@inheritDoc}\n <p>\n If there is a security manager set, its {@code checkConnect} method is\n called with the local address and {@code -1} as its arguments to see\n if the operation is allowed. If the operation is not allowed,\n a {@code SocketAddress} representing the\n loopback address and the\n local port of the channel's socket is returned.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.net.SocketAddress}</span><div class='sub-desc'><p>The {@code SocketAddress} that the socket is bound to, or the\n          {@code SocketAddress} representing the loopback address if\n          denied by the security manager, or {@code null} if the\n          channel's socket is not bound</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException     {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException                {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-open' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousServerSocketChannel'>java.nio.channels.AsynchronousServerSocketChannel</span><br/><a href='source/AsynchronousServerSocketChannel.html#java-nio-channels-AsynchronousServerSocketChannel-method-open' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousServerSocketChannel-method-open' class='name expandable'>open</a>( <span class='pre'></span> ) : Object {java.nio.channels.AsynchronousServerSocketChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens an asynchronous server-socket channel. ...</div><div class='long'><p>Opens an asynchronous server-socket channel.</p>\n\n<p> <p> This method returns an asynchronous server socket channel that is\n bound to the <em>default group</em>. This method is equivalent to evaluating\n the expression:\n <blockquote></blockquote></p>\n\n<pre> open((AsynchronousChannelGroup)null);\n </pre>\n\n\n<p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousServerSocketChannel}</span><div class='sub-desc'><p>A new asynchronous server socket channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-provider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousServerSocketChannel'>java.nio.channels.AsynchronousServerSocketChannel</span><br/><a href='source/AsynchronousServerSocketChannel.html#java-nio-channels-AsynchronousServerSocketChannel-method-provider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousServerSocketChannel-method-provider' class='name expandable'>provider</a>( <span class='pre'></span> ) : Object {java.nio.channels.spi.AsynchronousChannelProvider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the provider that created this channel. ...</div><div class='long'><p>Returns the provider that created this channel.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.spi.AsynchronousChannelProvider}</span><div class='sub-desc'><p>The provider that created this channel</p>\n</div></li></ul></div></div></div><div id='method-setOption' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.AsynchronousServerSocketChannel'>java.nio.channels.AsynchronousServerSocketChannel</span><br/><a href='source/AsynchronousServerSocketChannel.html#java-nio-channels-AsynchronousServerSocketChannel-method-setOption' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.AsynchronousServerSocketChannel-method-setOption' class='name expandable'>setOption</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException                {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException                  {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException                             {@inheritDoc}</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});