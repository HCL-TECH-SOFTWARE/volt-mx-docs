Ext.data.JsonP.java_nio_channels_MulticastChannel({"tagname":"class","name":"java.nio.channels.MulticastChannel","autodetected":{},"files":[{"filename":"MulticastChannel.js","href":"MulticastChannel.html#java-nio-channels-MulticastChannel"}],"since":"1.7","members":[{"name":"close","tagname":"method","owner":"java.nio.channels.MulticastChannel","id":"method-close","meta":{}},{"name":"join","tagname":"method","owner":"java.nio.channels.MulticastChannel","id":"method-join","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.MulticastChannel","short_doc":"implements java.nio.channels.NetworkChannel\n\n A network channel that supports Internet Protocol (IP) multicasting. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/MulticastChannel.html#java-nio-channels-MulticastChannel' target='_blank'>MulticastChannel.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.channels.NetworkChannel\" rel=\"java.nio.channels.NetworkChannel\" class=\"docClass\">java.nio.channels.NetworkChannel</a></p>\n\n<p> A network channel that supports Internet Protocol (IP) multicasting.</p>\n\n<p> <p> IP multicasting is the transmission of IP datagrams to members of\n a <em>group</em> that is zero or more hosts identified by a single destination\n address.</p>\n\n<p> <p> In the case of a channel to an IPv4 socket,\n the underlying operating system supports <a href=\"http://www.ietf.org/rfc/rfc2236.txt\">\n <i>RFC&nbsp;2236: Internet Group Management Protocol, Version 2 (IGMPv2)</i></a>.\n It may optionally support source filtering as specified by <a\n href=\"http://www.ietf.org/rfc/rfc3376.txt\"> <i>RFC&nbsp;3376: Internet Group\n Management Protocol, Version 3 (IGMPv3)</i></a>.\n For channels to an IPv6 socket, the equivalent\n standards are <a href=\"http://www.ietf.org/rfc/rfc2710.txt\"> <i>RFC&nbsp;2710:\n Multicast Listener Discovery (MLD) for IPv6</i></a> and <a\n href=\"http://www.ietf.org/rfc/rfc3810.txt\"> <i>RFC&nbsp;3810: Multicast Listener\n Discovery Version 2 (MLDv2) for IPv6</i></a>.</p>\n\n<p> <p> The join(InetAddress,NetworkInterface) method is used to\n join a group and receive all multicast datagrams sent to the group. A channel\n may join several multicast groups and may join the same group on several\n interfaces. Membership is dropped by invoking the <a href=\"#!/api/java.nio.channels.MembershipKey-method-drop\" rel=\"java.nio.channels.MembershipKey-method-drop\" class=\"docClass\">drop</a> method on the returned <a href=\"#!/api/java.nio.channels.MembershipKey\" rel=\"java.nio.channels.MembershipKey\" class=\"docClass\">java.nio.channels.MembershipKey</a>. If the\n underlying platform supports source filtering then the <a href=\"#!/api/java.nio.channels.MembershipKey-method-block\" rel=\"java.nio.channels.MembershipKey-method-block\" class=\"docClass\">block</a> and <a href=\"#!/api/java.nio.channels.MembershipKey-method-unblock\" rel=\"java.nio.channels.MembershipKey-method-unblock\" class=\"docClass\">unblock</a> methods can be used to block or\n unblock multicast datagrams from particular source addresses.</p>\n\n<p> <p> The join(InetAddress,NetworkInterface,InetAddress) method\n is used to begin receiving datagrams sent to a group whose source address matches\n a given source address. This method throws UnsupportedOperationException\n if the underlying platform does not support source filtering.  Membership is\n <em>cumulative</em> and this method may be invoked again with the same group\n and interface to allow receiving datagrams from other source addresses. The\n method returns a <a href=\"#!/api/java.nio.channels.MembershipKey\" rel=\"java.nio.channels.MembershipKey\" class=\"docClass\">java.nio.channels.MembershipKey</a> that represents membership to receive\n datagrams from the given source address. Invoking the key's <a href=\"#!/api/java.nio.channels.MembershipKey-method-drop\" rel=\"java.nio.channels.MembershipKey-method-drop\" class=\"docClass\">drop</a> method drops membership so that datagrams from the\n source address can no longer be received.</p>\n\n<p> <h2>Platform dependencies</h2></p>\n\n<p> The multicast implementation is intended to map directly to the native\n multicasting facility. Consequently, the following items should be considered\n when developing an application that receives IP multicast datagrams:</p>\n\n<p> <ol></ol></p>\n\n<p> <li><p> The creation of the channel should specify the ProtocolFamily\n that corresponds to the address type of the multicast groups that the channel\n will join. There is no guarantee that a channel to a socket in one protocol\n family can join and receive multicast datagrams when the address of the\n multicast group corresponds to another protocol family. For example, it is\n implementation specific if a channel to an IPv6\n socket can join an IPv4 multicast group and receive\n multicast datagrams sent to the group. </p></li></p>\n\n<p> <li><p> The channel's socket should be bound to the wildcard address. If the socket is bound to\n a specific address, rather than the wildcard address then it is implementation\n specific if multicast datagrams are received by the socket. </p></li></p>\n\n<p> <li><p> The SO_REUSEADDR option should be\n enabled prior to <a href=\"#!/api/java.nio.channels.NetworkChannel-method-bind\" rel=\"java.nio.channels.NetworkChannel-method-bind\" class=\"docClass\">binding</a> the socket. This is\n required to allow multiple members of the group to bind to the same\n address. </p></li></p>\n\n<p> </p>\n\n<p> <p> <b>Usage Example:</b></p>\n\n<pre>     // join multicast group on this interface, and also use this\n     // interface for outgoing multicast datagrams\n     NetworkInterface ni = NetworkInterface.getByName(\"hme0\");\n\n     DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET)\n         .setOption(StandardSocketOptions.SO_REUSEADDR, true)\n         .bind(new InetSocketAddress(5000))\n         .setOption(StandardSocketOptions.IP_MULTICAST_IF, ni);\n\n     InetAddress group = InetAddress.getByName(\"225.4.5.6\");\n\n     MembershipKey key = dc.join(group, ni);\n </pre>\n\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.MulticastChannel'>java.nio.channels.MulticastChannel</span><br/><a href='source/MulticastChannel.html#java-nio-channels-MulticastChannel-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.MulticastChannel-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this channel. ...</div><div class='long'><p>Closes this channel.</p>\n\n<p> <p> If the channel is a member of a multicast group then the membership\n is <a href=\"#!/api/java.nio.channels.MembershipKey-method-drop\" rel=\"java.nio.channels.MembershipKey-method-drop\" class=\"docClass\">dropped</a>. Upon return, the <a href=\"#!/api/java.nio.channels.MembershipKey\" rel=\"java.nio.channels.MembershipKey\" class=\"docClass\">membership-key</a> will be <a href=\"#!/api/java.nio.channels.MembershipKey-method-isValid\" rel=\"java.nio.channels.MembershipKey-method-isValid\" class=\"docClass\">invalid</a>.</p>\n\n<p> <p> This method otherwise behaves exactly as specified by the <a href=\"#!/api/java.nio.channels.Channel\" rel=\"java.nio.channels.Channel\" class=\"docClass\">java.nio.channels.Channel</a> interface.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-join' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.MulticastChannel'>java.nio.channels.MulticastChannel</span><br/><a href='source/MulticastChannel.html#java-nio-channels-MulticastChannel-method-join' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.MulticastChannel-method-join' class='name expandable'>join</a>( <span class='pre'>group, interf, source</span> ) : Object {java.nio.channels.MembershipKey}<span class=\"signature\"></span></div><div class='description'><div class='short'>Joins a multicast group to begin receiving datagrams sent to the group\n from a given source address. ...</div><div class='long'><p>Joins a multicast group to begin receiving datagrams sent to the group\n from a given source address.</p>\n\n<p> <p> If this channel is currently a member of the group on the given\n interface to receive datagrams from the given source address then the\n membership key, representing that membership, is returned. Otherwise this\n channel joins the group and the resulting new membership key is returned.\n The resulting membership key is <a href=\"#!/api/java.nio.channels.MembershipKey-method-sourceAddress\" rel=\"java.nio.channels.MembershipKey-method-sourceAddress\" class=\"docClass\">source-specific</a>.</p>\n\n<p> <p> Membership is <em>cumulative</em> and this method may be invoked\n again with the same group and interface to allow receiving datagrams sent\n by other source addresses to the group.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>group</span> : Object {InetAddress}<div class='sub-desc'><p>The multicast address to join</p>\n</div></li><li><span class='pre'>interf</span> : Object {NetworkInterface}<div class='sub-desc'><p>The network interface on which to join the group</p>\n</div></li><li><span class='pre'>source</span> : Object {InetAddress}<div class='sub-desc'><p>The source address</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.MembershipKey}</span><div class='sub-desc'><p>The membership key</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the group parameter is not a multicast address, the\n          source parameter is not a unicast address, the group\n          parameter is an address type that is not supported by this channel,\n          or the source parameter is not the same address type as the group</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException\n          If the channel is currently a member of the group on the given\n          interface to receive all datagrams</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If the channel's socket is not an Internet Protocol socket or\n          source filtering is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager is set, and its\n          checkMulticast\n          method denies access to the multiast group</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});