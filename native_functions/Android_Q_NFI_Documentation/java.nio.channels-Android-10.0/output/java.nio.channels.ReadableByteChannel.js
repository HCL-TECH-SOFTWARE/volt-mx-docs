Ext.data.JsonP.java_nio_channels_ReadableByteChannel({"tagname":"class","name":"java.nio.channels.ReadableByteChannel","autodetected":{},"files":[{"filename":"ReadableByteChannel.js","href":"ReadableByteChannel.html#java-nio-channels-ReadableByteChannel"}],"author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"read","tagname":"method","owner":"java.nio.channels.ReadableByteChannel","id":"method-read","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.ReadableByteChannel","short_doc":"implements java.nio.channels.Channel\n\n A channel that can read bytes. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ReadableByteChannel.html#java-nio-channels-ReadableByteChannel' target='_blank'>ReadableByteChannel.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.channels.Channel\" rel=\"java.nio.channels.Channel\" class=\"docClass\">java.nio.channels.Channel</a></p>\n\n<p> A channel that can read bytes.</p>\n\n<p> <p> Only one read operation upon a readable channel may be in progress at\n any given time.  If one thread initiates a read operation upon a channel\n then any other thread that attempts to initiate another read operation will\n block until the first operation is complete.  Whether or not other kinds of\n I/O operations may proceed concurrently with a read operation depends upon\n the type of the channel. </p></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-read' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.ReadableByteChannel'>java.nio.channels.ReadableByteChannel</span><br/><a href='source/ReadableByteChannel.html#java-nio-channels-ReadableByteChannel-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.ReadableByteChannel-method-read' class='name expandable'>read</a>( <span class='pre'>dst</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a sequence of bytes from this channel into the given buffer. ...</div><div class='long'><p>Reads a sequence of bytes from this channel into the given buffer.</p>\n\n<p> <p> An attempt is made to read up to <i>r</i> bytes from the channel,\n where <i>r</i> is the number of bytes remaining in the buffer, that is,\n <tt>dst.remaining()</tt>, at the moment this method is invoked.</p>\n\n<p> <p> Suppose that a byte sequence of length <i>n</i> is read, where\n <tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.\n This byte sequence will be transferred into the buffer so that the first\n byte in the sequence is at index <i>p</i> and the last byte is at index\n <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>,\n where <i>p</i> is the buffer's position at the moment this method is\n invoked.  Upon return the buffer's position will be equal to\n <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not have changed.</p>\n\n<p> <p> A read operation might not fill the buffer, and in fact it might not\n read any bytes at all.  Whether or not it does so depends upon the\n nature and state of the channel.  A socket channel in non-blocking mode,\n for example, cannot read any more bytes than are immediately available\n from the socket's input buffer; similarly, a file channel cannot read\n any more bytes than remain in the file.  It is guaranteed, however, that\n if a channel is in blocking mode and there is at least one byte\n remaining in the buffer then this method will block until at least one\n byte is read.</p>\n\n<p> <p> This method may be invoked at any time.  If another thread has\n already initiated a read operation upon this channel, however, then an\n invocation of this method will block until the first operation is\n complete. </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dst</span> : Object {ByteBuffer}<div class='sub-desc'><p>The buffer into which bytes are to be transferred</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes read, possibly zero, or <tt>-1</tt> if the\n          channel has reached end-of-stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NonReadableChannelException\n          If this channel was not opened for reading</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedChannelException\n          If this channel is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AsynchronousCloseException\n          If another thread closes this channel\n          while the read operation is in progress</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedByInterruptException\n          If another thread interrupts the current thread\n          while the read operation is in progress, thereby\n          closing the channel and setting the current thread's\n          interrupt status</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If some other I/O error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});