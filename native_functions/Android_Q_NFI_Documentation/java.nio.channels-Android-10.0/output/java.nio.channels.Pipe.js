Ext.data.JsonP.java_nio_channels_Pipe({"tagname":"class","name":"java.nio.channels.Pipe","autodetected":{},"files":[{"filename":"Pipe.js","href":"Pipe.html#java-nio-channels-Pipe"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"open","tagname":"method","owner":"java.nio.channels.Pipe","id":"method-open","meta":{}},{"name":"sink","tagname":"method","owner":"java.nio.channels.Pipe","id":"method-sink","meta":{}},{"name":"source","tagname":"method","owner":"java.nio.channels.Pipe","id":"method-source","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.Pipe","short_doc":"A pair of channels that implements a unidirectional pipe. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.channels.Pipe</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Pipe.html#java-nio-channels-Pipe' target='_blank'>Pipe.js</a></div></pre><div class='doc-contents'><p>A pair of channels that implements a unidirectional pipe.</p>\n\n<p> <p> A pipe consists of a pair of channels: A writable <a href=\"#!/api/java.nio.channels.Pipe.SinkChannel\" rel=\"java.nio.channels.Pipe.SinkChannel\" class=\"docClass\">sink</a> channel and a readable <a href=\"#!/api/java.nio.channels.Pipe.SourceChannel\" rel=\"java.nio.channels.Pipe.SourceChannel\" class=\"docClass\">source</a>\n channel.  Once some bytes are written to the sink channel they can be read\n from source channel in exactlyAthe order in which they were written.</p>\n\n<p> <p> Whether or not a thread writing bytes to a pipe will block until another\n thread reads those bytes, or some previously-written bytes, from the pipe is\n system-dependent and therefore unspecified.  Many pipe implementations will\n buffer up to a certain number of bytes between the sink and source channels,\n but such buffering should not be assumed.  </p></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-open' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.Pipe'>java.nio.channels.Pipe</span><br/><a href='source/Pipe.html#java-nio-channels-Pipe-method-open' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.Pipe-method-open' class='name expandable'>open</a>( <span class='pre'></span> ) : Object {java.nio.channels.Pipe}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a pipe. ...</div><div class='long'><p>Opens a pipe.</p>\n\n<p> <p> The new pipe is created by invoking the openPipe method of the\n system-wide default java.nio.channels.spi.SelectorProvider\n object.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.Pipe}</span><div class='sub-desc'><p>A new pipe</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-sink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.Pipe'>java.nio.channels.Pipe</span><br/><a href='source/Pipe.html#java-nio-channels-Pipe-method-sink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.Pipe-method-sink' class='name expandable'>sink</a>( <span class='pre'></span> ) : Object {java.nio.channels.Pipe.SinkChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this pipe's sink channel. ...</div><div class='long'><p>Returns this pipe's sink channel.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.Pipe.SinkChannel}</span><div class='sub-desc'><p>This pipe's sink channel</p>\n</div></li></ul></div></div></div><div id='method-source' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.Pipe'>java.nio.channels.Pipe</span><br/><a href='source/Pipe.html#java-nio-channels-Pipe-method-source' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.Pipe-method-source' class='name expandable'>source</a>( <span class='pre'></span> ) : Object {java.nio.channels.Pipe.SourceChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this pipe's source channel. ...</div><div class='long'><p>Returns this pipe's source channel.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.Pipe.SourceChannel}</span><div class='sub-desc'><p>This pipe's source channel</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});