Ext.data.JsonP.android_widget_GridLayout({"tagname":"class","name":"android.widget.GridLayout","autodetected":{},"files":[{"filename":"GridLayout.js","href":"GridLayout.html#android-widget-GridLayout"}],"extends":"android.view.ViewGroup","members":[{"name":"ALIGN_BOUNDS","tagname":"property","owner":"android.widget.GridLayout","id":"property-ALIGN_BOUNDS","meta":{}},{"name":"ALIGN_MARGINS","tagname":"property","owner":"android.widget.GridLayout","id":"property-ALIGN_MARGINS","meta":{}},{"name":"BASELINE","tagname":"property","owner":"android.widget.GridLayout","id":"property-BASELINE","meta":{}},{"name":"BOTTOM","tagname":"property","owner":"android.widget.GridLayout","id":"property-BOTTOM","meta":{}},{"name":"CENTER","tagname":"property","owner":"android.widget.GridLayout","id":"property-CENTER","meta":{}},{"name":"END","tagname":"property","owner":"android.widget.GridLayout","id":"property-END","meta":{}},{"name":"FILL","tagname":"property","owner":"android.widget.GridLayout","id":"property-FILL","meta":{}},{"name":"HORIZONTAL","tagname":"property","owner":"android.widget.GridLayout","id":"property-HORIZONTAL","meta":{}},{"name":"LEFT","tagname":"property","owner":"android.widget.GridLayout","id":"property-LEFT","meta":{}},{"name":"RIGHT","tagname":"property","owner":"android.widget.GridLayout","id":"property-RIGHT","meta":{}},{"name":"START","tagname":"property","owner":"android.widget.GridLayout","id":"property-START","meta":{}},{"name":"TOP","tagname":"property","owner":"android.widget.GridLayout","id":"property-TOP","meta":{}},{"name":"UNDEFINED","tagname":"property","owner":"android.widget.GridLayout","id":"property-UNDEFINED","meta":{}},{"name":"VERTICAL","tagname":"property","owner":"android.widget.GridLayout","id":"property-VERTICAL","meta":{}},{"name":"generateLayoutParams","tagname":"method","owner":"android.widget.GridLayout","id":"method-generateLayoutParams","meta":{}},{"name":"getAccessibilityClassName","tagname":"method","owner":"android.widget.GridLayout","id":"method-getAccessibilityClassName","meta":{}},{"name":"getAlignmentMode","tagname":"method","owner":"android.widget.GridLayout","id":"method-getAlignmentMode","meta":{}},{"name":"getColumnCount","tagname":"method","owner":"android.widget.GridLayout","id":"method-getColumnCount","meta":{}},{"name":"getOrientation","tagname":"method","owner":"android.widget.GridLayout","id":"method-getOrientation","meta":{}},{"name":"getRowCount","tagname":"method","owner":"android.widget.GridLayout","id":"method-getRowCount","meta":{}},{"name":"getUseDefaultMargins","tagname":"method","owner":"android.widget.GridLayout","id":"method-getUseDefaultMargins","meta":{}},{"name":"isColumnOrderPreserved","tagname":"method","owner":"android.widget.GridLayout","id":"method-isColumnOrderPreserved","meta":{}},{"name":"isRowOrderPreserved","tagname":"method","owner":"android.widget.GridLayout","id":"method-isRowOrderPreserved","meta":{}},{"name":"onViewAdded","tagname":"method","owner":"android.widget.GridLayout","id":"method-onViewAdded","meta":{}},{"name":"onViewRemoved","tagname":"method","owner":"android.widget.GridLayout","id":"method-onViewRemoved","meta":{}},{"name":"requestLayout","tagname":"method","owner":"android.widget.GridLayout","id":"method-requestLayout","meta":{}},{"name":"setAlignmentMode","tagname":"method","owner":"android.widget.GridLayout","id":"method-setAlignmentMode","meta":{}},{"name":"setColumnCount","tagname":"method","owner":"android.widget.GridLayout","id":"method-setColumnCount","meta":{}},{"name":"setColumnOrderPreserved","tagname":"method","owner":"android.widget.GridLayout","id":"method-setColumnOrderPreserved","meta":{}},{"name":"setOrientation","tagname":"method","owner":"android.widget.GridLayout","id":"method-setOrientation","meta":{}},{"name":"setRowCount","tagname":"method","owner":"android.widget.GridLayout","id":"method-setRowCount","meta":{}},{"name":"setRowOrderPreserved","tagname":"method","owner":"android.widget.GridLayout","id":"method-setRowOrderPreserved","meta":{}},{"name":"setUseDefaultMargins","tagname":"method","owner":"android.widget.GridLayout","id":"method-setUseDefaultMargins","meta":{}},{"name":"spec","tagname":"method","owner":"android.widget.GridLayout","id":"method-spec","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.widget.GridLayout","short_doc":"A layout that places its children in a rectangular grid. ...","classIcon":"icon-class","superclasses":["android.view.ViewGroup"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>android.view.ViewGroup<div class='subclass '><strong>android.widget.GridLayout</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/GridLayout.html#android-widget-GridLayout' target='_blank'>GridLayout.js</a></div></pre><div class='doc-contents'><p>A layout that places its children in a rectangular <em>grid</em>.\n <p>\n The grid is composed of a set of infinitely thin lines that separate the\n viewing area into <em>cells</em>. Throughout the API, grid lines are referenced\n by grid <em>indices</em>. A grid with {@code N} columns\n has {@code N + 1} grid indices that run from {@code 0}\n through {@code N} inclusive. Regardless of how GridLayout is\n configured, grid index {@code 0} is fixed to the leading edge of the\n container and grid index {@code N} is fixed to its trailing edge\n (after padding is taken into account).</p>\n\n<p> <h4>Row and Column Specs</h4></p>\n\n<p> Children occupy one or more contiguous cells, as defined\n by their rowSpec and\n columnSpec layout parameters.\n Each spec defines the set of rows or columns that are to be\n occupied; and how children should be aligned within the resulting group of cells.\n Although cells do not normally overlap in a GridLayout, GridLayout does\n not prevent children being defined to occupy the same cell or group of cells.\n In this case however, there is no guarantee that children will not themselves\n overlap after the layout operation completes.</p>\n\n<p> <h4>Default Cell Assignment</h4></p>\n\n<p> If a child does not specify the row and column indices of the cell it\n wishes to occupy, GridLayout assigns cell locations automatically using its:\n orientation,\n rowCount and\n columnCount properties.</p>\n\n<p> <h4>Space</h4></p>\n\n<p> Space between children may be specified either by using instances of the\n dedicated <a href=\"#!/api/android.widget.Space\" rel=\"android.widget.Space\" class=\"docClass\">android.widget.Space</a> view or by setting the</p>\n\n<p> leftMargin,\n topMargin,\n rightMargin and\n bottomMargin</p>\n\n<p> layout parameters. When the\n useDefaultMargins\n property is set, default margins around children are automatically\n allocated based on the prevailing UI style guide for the platform.\n Each of the margins so defined may be independently overridden by an assignment\n to the appropriate layout parameter.\n Default values will generally produce a reasonable spacing between components\n but values may change between different releases of the platform.</p>\n\n<p> <h4>Excess Space Distribution</h4></p>\n\n<p> As of API 21, GridLayout's distribution of excess space accomodates the principle of weight.\n In the event that no weights are specified, the previous conventions are respected and\n columns and rows are taken as flexible if their views specify some form of alignment\n within their groups.\n <p>\n The flexibility of a view is therefore influenced by its alignment which is,\n in turn, typically defined by setting the\n gravity property of the child's layout parameters.\n If either a weight or alignment were defined along a given axis then the component\n is taken as <em>flexible</em> in that direction. If no weight or alignment was set,\n the component is instead assumed to be <em>inflexible</em>.\n <p>\n Multiple components in the same row or column group are\n considered to act in <em>parallel</em>. Such a\n group is flexible only if <em>all</em> of the components\n within it are flexible. Row and column groups that sit either side of a common boundary\n are instead considered to act in <em>series</em>. The composite group made of these two\n elements is flexible if <em>one</em> of its elements is flexible.\n <p>\n To make a column stretch, make sure all of the components inside it define a\n weight or a gravity. To prevent a column from stretching, ensure that one of the components\n in the column does not define a weight or a gravity.\n <p>\n When the principle of flexibility does not provide complete disambiguation,\n GridLayout's algorithms favour rows and columns that are closer to its <em>right</em>\n and <em>bottom</em> edges. To be more precise, GridLayout treats each of its layout\n parameters as a constraint in the a set of variables that define the grid-lines along a\n given axis. During layout, GridLayout solves the constraints so as to return the unique\n solution to those constraints for which all variables are less-than-or-equal-to\n the corresponding value in any other valid solution.</p>\n\n<p> <h4>Interpretation of GONE</h4></p>\n\n<p> For layout purposes, GridLayout treats views whose visibility status is\n GONE, as having zero width and height. This is subtly different from\n the policy of ignoring views that are marked as GONE outright. If, for example, a gone-marked\n view was alone in a column, that column would itself collapse to zero width if and only if\n no gravity was defined on the view. If gravity was defined, then the gone-marked\n view has no effect on the layout and the container should be laid out as if the view\n had never been added to it. GONE views are taken to have zero weight during excess space\n distribution.\n <p>\n These statements apply equally to rows as well as columns, and to groups of rows or columns.</p>\n\n<p> <p>\n See android.widget.GridLayout.LayoutParams for a full description of the\n layout parameters used by GridLayout.</p>\n\n<p> @attr ref android.R.styleable#GridLayout_orientation\n @attr ref android.R.styleable#GridLayout_rowCount\n @attr ref android.R.styleable#GridLayout_columnCount\n @attr ref android.R.styleable#GridLayout_useDefaultMargins\n @attr ref android.R.styleable#GridLayout_rowOrderPreserved\n @attr ref android.R.styleable#GridLayout_columnOrderPreserved</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ALIGN_BOUNDS' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-ALIGN_BOUNDS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-ALIGN_BOUNDS' class='name expandable'>ALIGN_BOUNDS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This constant is an alignmentMode. ...</div><div class='long'><p>This constant is an alignmentMode.\nWhen the {@code alignmentMode} is set to <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_BOUNDS\" rel=\"android.widget.GridLayout-property-ALIGN_BOUNDS\" class=\"docClass\">ALIGN_BOUNDS</a>, alignment\nis made between the edges of each component's raw\nview boundary: i.e. the area delimited by the component's:\ntop,\nleft,\nbottom and\nright properties.</p>\n\n<p><p>\nFor example, when {@code GridLayout} is in <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_BOUNDS\" rel=\"android.widget.GridLayout-property-ALIGN_BOUNDS\" class=\"docClass\">ALIGN_BOUNDS</a> mode,\nchildren that belong to a row group that uses <a href=\"#!/api/android.widget.GridLayout-property-TOP\" rel=\"android.widget.GridLayout-property-TOP\" class=\"docClass\">TOP</a> alignment will\nall return the same value when their android.view.View.getTop()\nmethod is called.</p>\n\n<p>@see <a href=\"#!/api/android.widget.GridLayout-method-setAlignmentMode\" rel=\"android.widget.GridLayout-method-setAlignmentMode\" class=\"docClass\">setAlignmentMode</a>(int)</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-ALIGN_MARGINS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-ALIGN_MARGINS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-ALIGN_MARGINS' class='name expandable'>ALIGN_MARGINS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This constant is an alignmentMode. ...</div><div class='long'><p>This constant is an alignmentMode.\nWhen the {@code alignmentMode} is set to <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_MARGINS\" rel=\"android.widget.GridLayout-property-ALIGN_MARGINS\" class=\"docClass\">ALIGN_MARGINS</a>,\nthe bounds of each view are extended outwards, according\nto their margins, before the edges of the resulting rectangle are aligned.</p>\n\n<p><p>\nFor example, when {@code GridLayout} is in <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_MARGINS\" rel=\"android.widget.GridLayout-property-ALIGN_MARGINS\" class=\"docClass\">ALIGN_MARGINS</a> mode,\nthe quantity {@code top - layoutParams.topMargin} is the same for all children that\nbelong to a row group that uses <a href=\"#!/api/android.widget.GridLayout-property-TOP\" rel=\"android.widget.GridLayout-property-TOP\" class=\"docClass\">TOP</a> alignment.</p>\n\n<p>@see <a href=\"#!/api/android.widget.GridLayout-method-setAlignmentMode\" rel=\"android.widget.GridLayout-method-setAlignmentMode\" class=\"docClass\">setAlignmentMode</a>(int)</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-BASELINE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-BASELINE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-BASELINE' class='name expandable'>BASELINE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should be aligned with the baselines\nof the other views in its cell group. ...</div><div class='long'><p>Indicates that a view should be aligned with the <em>baselines</em>\nof the other views in its cell group.\nThis constant may only be used as an alignment in rowSpecs.</p>\n\n<p>@see View#getBaseline()</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-BOTTOM' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-BOTTOM' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-BOTTOM' class='name expandable'>BOTTOM</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should be aligned with the bottom\nedges of the other views in its cell group. ...</div><div class='long'><p>Indicates that a view should be aligned with the <em>bottom</em>\nedges of the other views in its cell group.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-CENTER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-CENTER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-CENTER' class='name expandable'>CENTER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should be centered with the other views in its cell group. ...</div><div class='long'><p>Indicates that a view should be <em>centered</em> with the other views in its cell group.\nThis constant may be used in both rowSpecs and columnSpecs.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-END' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-END' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-END' class='name expandable'>END</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should be aligned with the end\nedges of the other views in its cell group. ...</div><div class='long'><p>Indicates that a view should be aligned with the <em>end</em>\nedges of the other views in its cell group.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-FILL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-FILL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-FILL' class='name expandable'>FILL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should expanded to fit the boundaries of its cell group. ...</div><div class='long'><p>Indicates that a view should expanded to fit the boundaries of its cell group.\nThis constant may be used in both rowSpecs and\ncolumnSpecs.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-HORIZONTAL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-HORIZONTAL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-HORIZONTAL' class='name expandable'>HORIZONTAL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The horizontal orientation. ...</div><div class='long'><p>The horizontal orientation.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-LEFT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-LEFT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-LEFT' class='name expandable'>LEFT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should be aligned with the left\nedges of the other views in its cell group. ...</div><div class='long'><p>Indicates that a view should be aligned with the <em>left</em>\nedges of the other views in its cell group.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-RIGHT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-RIGHT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-RIGHT' class='name expandable'>RIGHT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should be aligned with the right\nedges of the other views in its cell group. ...</div><div class='long'><p>Indicates that a view should be aligned with the <em>right</em>\nedges of the other views in its cell group.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-START' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-START' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-START' class='name expandable'>START</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should be aligned with the start\nedges of the other views in its cell group. ...</div><div class='long'><p>Indicates that a view should be aligned with the <em>start</em>\nedges of the other views in its cell group.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-TOP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-TOP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-TOP' class='name expandable'>TOP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that a view should be aligned with the top\nedges of the other views in its cell group. ...</div><div class='long'><p>Indicates that a view should be aligned with the <em>top</em>\nedges of the other views in its cell group.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-UNDEFINED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-UNDEFINED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-UNDEFINED' class='name expandable'>UNDEFINED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The constant used to indicate that a value is undefined. ...</div><div class='long'><p>The constant used to indicate that a value is undefined.\nFields can use this value to indicate that their values\nhave not yet been set. Similarly, methods can return this value\nto indicate that there is no suitable value that the implementation\ncan return.\nThe value used for the constant (currently Integer.MIN_VALUE) is\nintended to avoid confusion between valid values whose sign may not be known.</p>\n<p>Defaults to: <code>&quot;-2147483648&quot;</code></p></div></div></div><div id='property-VERTICAL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-property-VERTICAL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-property-VERTICAL' class='name expandable'>VERTICAL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The vertical orientation. ...</div><div class='long'><p>The vertical orientation.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-generateLayoutParams' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-generateLayoutParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-generateLayoutParams' class='name expandable'>generateLayoutParams</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getAccessibilityClassName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-getAccessibilityClassName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-getAccessibilityClassName' class='name expandable'>getAccessibilityClassName</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getAlignmentMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-getAlignmentMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-getAlignmentMode' class='name expandable'>getAlignmentMode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the alignment mode. ...</div><div class='long'><p>Returns the alignment mode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the alignment mode; either <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_BOUNDS\" rel=\"android.widget.GridLayout-property-ALIGN_BOUNDS\" class=\"docClass\">ALIGN_BOUNDS</a> or <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_MARGINS\" rel=\"android.widget.GridLayout-property-ALIGN_MARGINS\" class=\"docClass\">ALIGN_MARGINS</a>\n@see <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_BOUNDS\" rel=\"android.widget.GridLayout-property-ALIGN_BOUNDS\" class=\"docClass\">ALIGN_BOUNDS</a>\n@see <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_MARGINS\" rel=\"android.widget.GridLayout-property-ALIGN_MARGINS\" class=\"docClass\">ALIGN_MARGINS</a>\n@see <a href=\"#!/api/android.widget.GridLayout-method-setAlignmentMode\" rel=\"android.widget.GridLayout-method-setAlignmentMode\" class=\"docClass\">setAlignmentMode</a>(int)\n@attr ref android.R.styleable#GridLayout_alignmentMode</p>\n</div></li></ul></div></div></div><div id='method-getColumnCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-getColumnCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-getColumnCount' class='name expandable'>getColumnCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current number of columns. ...</div><div class='long'><p>Returns the current number of columns. This is either the last value that was set\n with <a href=\"#!/api/android.widget.GridLayout-method-setColumnCount\" rel=\"android.widget.GridLayout-method-setColumnCount\" class=\"docClass\">setColumnCount</a>(int) or, if no such value was set, the maximum\n value of each the upper bounds defined in android.widget.AbsListView.LayoutParams.columnSpec.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current number of columns\n@see <a href=\"#!/api/android.widget.GridLayout-method-setColumnCount\" rel=\"android.widget.GridLayout-method-setColumnCount\" class=\"docClass\">setColumnCount</a>(int)\n@see LayoutParams#columnSpec\n@attr ref android.R.styleable#GridLayout_columnCount</p>\n</div></li></ul></div></div></div><div id='method-getOrientation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-getOrientation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-getOrientation' class='name expandable'>getOrientation</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current orientation. ...</div><div class='long'><p>Returns the current orientation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>either <a href=\"#!/api/android.widget.GridLayout-property-HORIZONTAL\" rel=\"android.widget.GridLayout-property-HORIZONTAL\" class=\"docClass\">HORIZONTAL</a> or <a href=\"#!/api/android.widget.GridLayout-property-VERTICAL\" rel=\"android.widget.GridLayout-property-VERTICAL\" class=\"docClass\">VERTICAL</a>\n@see <a href=\"#!/api/android.widget.GridLayout-method-setOrientation\" rel=\"android.widget.GridLayout-method-setOrientation\" class=\"docClass\">setOrientation</a>(int)\n@attr ref android.R.styleable#GridLayout_orientation</p>\n</div></li></ul></div></div></div><div id='method-getRowCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-getRowCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-getRowCount' class='name expandable'>getRowCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current number of rows. ...</div><div class='long'><p>Returns the current number of rows. This is either the last value that was set\n with <a href=\"#!/api/android.widget.GridLayout-method-setRowCount\" rel=\"android.widget.GridLayout-method-setRowCount\" class=\"docClass\">setRowCount</a>(int) or, if no such value was set, the maximum\n value of each the upper bounds defined in android.widget.AbsListView.LayoutParams.rowSpec.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current number of rows\n@see <a href=\"#!/api/android.widget.GridLayout-method-setRowCount\" rel=\"android.widget.GridLayout-method-setRowCount\" class=\"docClass\">setRowCount</a>(int)\n@see LayoutParams#rowSpec\n@attr ref android.R.styleable#GridLayout_rowCount</p>\n</div></li></ul></div></div></div><div id='method-getUseDefaultMargins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-getUseDefaultMargins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-getUseDefaultMargins' class='name expandable'>getUseDefaultMargins</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether or not this GridLayout will allocate default margins when no\n corresponding layout parameters are def...</div><div class='long'><p>Returns whether or not this GridLayout will allocate default margins when no\n corresponding layout parameters are defined.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if default margins should be allocated\n@see <a href=\"#!/api/android.widget.GridLayout-method-setUseDefaultMargins\" rel=\"android.widget.GridLayout-method-setUseDefaultMargins\" class=\"docClass\">setUseDefaultMargins</a>(boolean)\n@attr ref android.R.styleable#GridLayout_useDefaultMargins</p>\n</div></li></ul></div></div></div><div id='method-isColumnOrderPreserved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-isColumnOrderPreserved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-isColumnOrderPreserved' class='name expandable'>isColumnOrderPreserved</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether or not column boundaries are ordered by their grid indices. ...</div><div class='long'><p>Returns whether or not column boundaries are ordered by their grid indices.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if column boundaries must appear in the order of their indices,\n         {@code false} otherwise\n@see <a href=\"#!/api/android.widget.GridLayout-method-setColumnOrderPreserved\" rel=\"android.widget.GridLayout-method-setColumnOrderPreserved\" class=\"docClass\">setColumnOrderPreserved</a>(boolean)\n@attr ref android.R.styleable#GridLayout_columnOrderPreserved</p>\n</div></li></ul></div></div></div><div id='method-isRowOrderPreserved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-isRowOrderPreserved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-isRowOrderPreserved' class='name expandable'>isRowOrderPreserved</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether or not row boundaries are ordered by their grid indices. ...</div><div class='long'><p>Returns whether or not row boundaries are ordered by their grid indices.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if row boundaries must appear in the order of their indices,\n         {@code false} otherwise\n@see <a href=\"#!/api/android.widget.GridLayout-method-setRowOrderPreserved\" rel=\"android.widget.GridLayout-method-setRowOrderPreserved\" class=\"docClass\">setRowOrderPreserved</a>(boolean)\n@attr ref android.R.styleable#GridLayout_rowOrderPreserved</p>\n</div></li></ul></div></div></div><div id='method-onViewAdded' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-onViewAdded' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-onViewAdded' class='name expandable'>onViewAdded</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onViewRemoved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-onViewRemoved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-onViewRemoved' class='name expandable'>onViewRemoved</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-requestLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-requestLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-requestLayout' class='name expandable'>requestLayout</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-setAlignmentMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-setAlignmentMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-setAlignmentMode' class='name expandable'>setAlignmentMode</a>( <span class='pre'>alignmentMode</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the alignment mode to be used for all of the alignments between the\n children of this container. ...</div><div class='long'><p>Sets the alignment mode to be used for all of the alignments between the\n children of this container.\n <p>\n The default value of this property is <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_MARGINS\" rel=\"android.widget.GridLayout-property-ALIGN_MARGINS\" class=\"docClass\">ALIGN_MARGINS</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alignmentMode</span> : Number<div class='sub-desc'><p>either <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_BOUNDS\" rel=\"android.widget.GridLayout-property-ALIGN_BOUNDS\" class=\"docClass\">ALIGN_BOUNDS</a> or <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_MARGINS\" rel=\"android.widget.GridLayout-property-ALIGN_MARGINS\" class=\"docClass\">ALIGN_MARGINS</a>\n@see <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_BOUNDS\" rel=\"android.widget.GridLayout-property-ALIGN_BOUNDS\" class=\"docClass\">ALIGN_BOUNDS</a>\n@see <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_MARGINS\" rel=\"android.widget.GridLayout-property-ALIGN_MARGINS\" class=\"docClass\">ALIGN_MARGINS</a>\n@see <a href=\"#!/api/android.widget.GridLayout-method-getAlignmentMode\" rel=\"android.widget.GridLayout-method-getAlignmentMode\" class=\"docClass\">getAlignmentMode</a>()\n@attr ref android.R.styleable#GridLayout_alignmentMode</p>\n</div></li></ul></div></div></div><div id='method-setColumnCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-setColumnCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-setColumnCount' class='name expandable'>setColumnCount</a>( <span class='pre'>columnCount</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>ColumnCount is used only to generate default column/column indices when\n they are not specified by a component's layo...</div><div class='long'><p>ColumnCount is used only to generate default column/column indices when\n they are not specified by a component's layout parameters.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>columnCount</span> : Number<div class='sub-desc'><p>the number of columns.\n@see <a href=\"#!/api/android.widget.GridLayout-method-getColumnCount\" rel=\"android.widget.GridLayout-method-getColumnCount\" class=\"docClass\">getColumnCount</a>()\n@see LayoutParams#columnSpec\n@attr ref android.R.styleable#GridLayout_columnCount</p>\n</div></li></ul></div></div></div><div id='method-setColumnOrderPreserved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-setColumnOrderPreserved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-setColumnOrderPreserved' class='name expandable'>setColumnOrderPreserved</a>( <span class='pre'>columnOrderPreserved</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>When this property is {@code true}, GridLayout is forced to place the column boundaries\n so that their associated gri...</div><div class='long'><p>When this property is {@code true}, GridLayout is forced to place the column boundaries\n so that their associated grid indices are in ascending order in the view.\n <p>\n When this property is {@code false} GridLayout is at liberty to place the horizontal column\n boundaries in whatever order best fits the given constraints.\n <p>\n The default value of this property is {@code true}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>columnOrderPreserved</span> : Boolean<div class='sub-desc'><p>use {@code true} to force GridLayout to respect the order\n        of column boundaries.\n@see <a href=\"#!/api/android.widget.GridLayout-method-isColumnOrderPreserved\" rel=\"android.widget.GridLayout-method-isColumnOrderPreserved\" class=\"docClass\">isColumnOrderPreserved</a>()\n@attr ref android.R.styleable#GridLayout_columnOrderPreserved</p>\n</div></li></ul></div></div></div><div id='method-setOrientation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-setOrientation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-setOrientation' class='name expandable'>setOrientation</a>( <span class='pre'>orientation</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>GridLayout uses the orientation property for two purposes:\n \n  \n      To control the 'direction' in which default row...</div><div class='long'><p>GridLayout uses the orientation property for two purposes:\n <ul>\n  <li>\n      To control the 'direction' in which default row/column indices are generated\n      when they are not specified in a component's layout parameters.\n  </li>\n  <li>\n      To control which axis should be processed first during the layout operation:\n      when orientation is <a href=\"#!/api/android.widget.GridLayout-property-HORIZONTAL\" rel=\"android.widget.GridLayout-property-HORIZONTAL\" class=\"docClass\">HORIZONTAL</a> the horizontal axis is laid out first.\n  </li>\n </ul></p>\n\n<p> The order in which axes are laid out is important if, for example, the height of\n one of GridLayout's children is dependent on its width - and its width is, in turn,\n dependent on the widths of other components.\n <p>\n If your layout contains a <a href=\"#!/api/android.widget.TextView\" rel=\"android.widget.TextView\" class=\"docClass\">android.widget.TextView</a> (or derivative:\n {@code Button}, {@code EditText}, {@code CheckBox}, etc.) which is\n in multi-line mode (the default) it is normally best to leave GridLayout's\n orientation as {@code HORIZONTAL} - because {@code TextView} is capable of\n deriving its height for a given width, but not the other way around.\n <p>\n Other than the effects above, orientation does not affect the actual layout operation of\n GridLayout, so it's fine to leave GridLayout in {@code HORIZONTAL} mode even if\n the height of the intended layout greatly exceeds its width.\n <p>\n The default value of this property is <a href=\"#!/api/android.widget.GridLayout-property-HORIZONTAL\" rel=\"android.widget.GridLayout-property-HORIZONTAL\" class=\"docClass\">HORIZONTAL</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>orientation</span> : Number<div class='sub-desc'><p>either <a href=\"#!/api/android.widget.GridLayout-property-HORIZONTAL\" rel=\"android.widget.GridLayout-property-HORIZONTAL\" class=\"docClass\">HORIZONTAL</a> or <a href=\"#!/api/android.widget.GridLayout-property-VERTICAL\" rel=\"android.widget.GridLayout-property-VERTICAL\" class=\"docClass\">VERTICAL</a>\n@see <a href=\"#!/api/android.widget.GridLayout-method-getOrientation\" rel=\"android.widget.GridLayout-method-getOrientation\" class=\"docClass\">getOrientation</a>()\n@attr ref android.R.styleable#GridLayout_orientation</p>\n</div></li></ul></div></div></div><div id='method-setRowCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-setRowCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-setRowCount' class='name expandable'>setRowCount</a>( <span class='pre'>rowCount</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>RowCount is used only to generate default row/column indices when\n they are not specified by a component's layout par...</div><div class='long'><p>RowCount is used only to generate default row/column indices when\n they are not specified by a component's layout parameters.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rowCount</span> : Number<div class='sub-desc'><p>the number of rows\n@see <a href=\"#!/api/android.widget.GridLayout-method-getRowCount\" rel=\"android.widget.GridLayout-method-getRowCount\" class=\"docClass\">getRowCount</a>()\n@see LayoutParams#rowSpec\n@attr ref android.R.styleable#GridLayout_rowCount</p>\n</div></li></ul></div></div></div><div id='method-setRowOrderPreserved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-setRowOrderPreserved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-setRowOrderPreserved' class='name expandable'>setRowOrderPreserved</a>( <span class='pre'>rowOrderPreserved</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>When this property is {@code true}, GridLayout is forced to place the row boundaries\n so that their associated grid i...</div><div class='long'><p>When this property is {@code true}, GridLayout is forced to place the row boundaries\n so that their associated grid indices are in ascending order in the view.\n <p>\n When this property is {@code false} GridLayout is at liberty to place the vertical row\n boundaries in whatever order best fits the given constraints.\n <p>\n The default value of this property is {@code true}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rowOrderPreserved</span> : Boolean<div class='sub-desc'><p>{@code true} to force GridLayout to respect the order\n        of row boundaries\n@see <a href=\"#!/api/android.widget.GridLayout-method-isRowOrderPreserved\" rel=\"android.widget.GridLayout-method-isRowOrderPreserved\" class=\"docClass\">isRowOrderPreserved</a>()\n@attr ref android.R.styleable#GridLayout_rowOrderPreserved</p>\n</div></li></ul></div></div></div><div id='method-setUseDefaultMargins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-setUseDefaultMargins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-setUseDefaultMargins' class='name expandable'>setUseDefaultMargins</a>( <span class='pre'>useDefaultMargins</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>When {@code true}, GridLayout allocates default margins around children\n based on the child's visual characteristics. ...</div><div class='long'><p>When {@code true}, GridLayout allocates default margins around children\n based on the child's visual characteristics. Each of the\n margins so defined may be independently overridden by an assignment\n to the appropriate layout parameter.\n <p>\n When {@code false}, the default value of all margins is zero.\n <p>\n When setting to {@code true}, consider setting the value of the\n alignmentMode\n property to <a href=\"#!/api/android.widget.GridLayout-property-ALIGN_BOUNDS\" rel=\"android.widget.GridLayout-property-ALIGN_BOUNDS\" class=\"docClass\">ALIGN_BOUNDS</a>.\n <p>\n The default value of this property is {@code false}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>useDefaultMargins</span> : Boolean<div class='sub-desc'><p>use {@code true} to make GridLayout allocate default margins\n@see <a href=\"#!/api/android.widget.GridLayout-method-getUseDefaultMargins\" rel=\"android.widget.GridLayout-method-getUseDefaultMargins\" class=\"docClass\">getUseDefaultMargins</a>()\n@see <a href=\"#!/api/android.widget.GridLayout-method-setAlignmentMode\" rel=\"android.widget.GridLayout-method-setAlignmentMode\" class=\"docClass\">setAlignmentMode</a>(int)\n@see ViewGroup.MarginLayoutParams#leftMargin\n@see ViewGroup.MarginLayoutParams#topMargin\n@see ViewGroup.MarginLayoutParams#rightMargin\n@see ViewGroup.MarginLayoutParams#bottomMargin\n@attr ref android.R.styleable#GridLayout_useDefaultMargins</p>\n</div></li></ul></div></div></div><div id='method-spec' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.widget.GridLayout'>android.widget.GridLayout</span><br/><a href='source/GridLayout.html#android-widget-GridLayout-method-spec' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.widget.GridLayout-method-spec' class='name expandable'>spec</a>( <span class='pre'>start</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a Spec, {@code spec}, where:\n \n      {@code spec.span = [start, start + 1]} \n \n \n To leave the start index und...</div><div class='long'><p>Return a Spec, {@code spec}, where:\n <ul>\n     <li> {@code spec.span = [start, start + 1]} </li>\n </ul>\n <p>\n To leave the start index undefined, use the value <a href=\"#!/api/android.widget.GridLayout-property-UNDEFINED\" rel=\"android.widget.GridLayout-property-UNDEFINED\" class=\"docClass\">UNDEFINED</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>start</span> : Number<div class='sub-desc'><p>the start index\n@see <a href=\"#!/api/android.widget.GridLayout-method-spec\" rel=\"android.widget.GridLayout-method-spec\" class=\"docClass\">spec</a>(int, int)</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});