Ext.data.JsonP.android_util_Rational({"tagname":"class","name":"android.util.Rational","autodetected":{},"files":[{"filename":"Rational.js","href":"Rational.html#android-util-Rational"}],"extends":"java.lang.Number","members":[{"name":"NEGATIVE_INFINITY","tagname":"property","owner":"android.util.Rational","id":"property-NEGATIVE_INFINITY","meta":{}},{"name":"NaN","tagname":"property","owner":"android.util.Rational","id":"property-NaN","meta":{}},{"name":"POSITIVE_INFINITY","tagname":"property","owner":"android.util.Rational","id":"property-POSITIVE_INFINITY","meta":{}},{"name":"ZERO","tagname":"property","owner":"android.util.Rational","id":"property-ZERO","meta":{}},{"name":"compareTo","tagname":"method","owner":"android.util.Rational","id":"method-compareTo","meta":{}},{"name":"doubleValue","tagname":"method","owner":"android.util.Rational","id":"method-doubleValue","meta":{}},{"name":"equals","tagname":"method","owner":"android.util.Rational","id":"method-equals","meta":{}},{"name":"floatValue","tagname":"method","owner":"android.util.Rational","id":"method-floatValue","meta":{}},{"name":"getDenominator","tagname":"method","owner":"android.util.Rational","id":"method-getDenominator","meta":{}},{"name":"getNumerator","tagname":"method","owner":"android.util.Rational","id":"method-getNumerator","meta":{}},{"name":"hashCode","tagname":"method","owner":"android.util.Rational","id":"method-hashCode","meta":{}},{"name":"intValue","tagname":"method","owner":"android.util.Rational","id":"method-intValue","meta":{}},{"name":"isFinite","tagname":"method","owner":"android.util.Rational","id":"method-isFinite","meta":{}},{"name":"isInfinite","tagname":"method","owner":"android.util.Rational","id":"method-isInfinite","meta":{}},{"name":"isNaN","tagname":"method","owner":"android.util.Rational","id":"method-isNaN","meta":{}},{"name":"isZero","tagname":"method","owner":"android.util.Rational","id":"method-isZero","meta":{}},{"name":"longValue","tagname":"method","owner":"android.util.Rational","id":"method-longValue","meta":{}},{"name":"parseRational","tagname":"method","owner":"android.util.Rational","id":"method-parseRational","meta":{}},{"name":"shortValue","tagname":"method","owner":"android.util.Rational","id":"method-shortValue","meta":{}},{"name":"toString","tagname":"method","owner":"android.util.Rational","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.util.Rational","short_doc":"implements java.lang.Comparable\n\nAn immutable data type representation a rational number. ...","classIcon":"icon-class","superclasses":["java.lang.Number"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Number<div class='subclass '><strong>android.util.Rational</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Rational.html#android-util-Rational' target='_blank'>Rational.js</a></div></pre><div class='doc-contents'><p>implements java.lang.Comparable</p>\n\n<p>An immutable data type representation a rational number.</p>\n\n\n<p> <p>Contains a pair of {@code int}s representing the numerator and denominator of a\n Rational number. </p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-NEGATIVE_INFINITY' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-property-NEGATIVE_INFINITY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-property-NEGATIVE_INFINITY' class='name expandable'>NEGATIVE_INFINITY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for the negative infinity value of the {@code Rational} type. ...</div><div class='long'><p>Constant for the negative infinity value of the {@code Rational} type.</p>\n\n<p>Equivalent to constructing a new rational with a negative numerator and a denominator\nequal to {@code 0}.</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-NaN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-property-NaN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-property-NaN' class='name expandable'>NaN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for the Not-a-Number (NaN) value of the {@code Rational} type. ...</div><div class='long'><p>Constant for the <em>Not-a-Number (NaN)</em> value of the {@code Rational} type.</p>\n\n<p>A {@code NaN} value is considered to be equal to itself (that is {@code NaN.equals(NaN)}\nwill return {@code true}; it is always greater than any non-{@code NaN} value (that is\n{@code NaN.compareTo(notNaN)} will return a number greater than {@code 0}).</p>\n\n\n\n\n<p>Equivalent to constructing a new rational with both the numerator and denominator\nequal to {@code 0}.</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-POSITIVE_INFINITY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-property-POSITIVE_INFINITY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-property-POSITIVE_INFINITY' class='name expandable'>POSITIVE_INFINITY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for the positive infinity value of the {@code Rational} type. ...</div><div class='long'><p>Constant for the positive infinity value of the {@code Rational} type.</p>\n\n<p>Equivalent to constructing a new rational with a positive numerator and a denominator\nequal to {@code 0}.</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-ZERO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-property-ZERO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-property-ZERO' class='name expandable'>ZERO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for the zero value of the {@code Rational} type. ...</div><div class='long'><p>Constant for the zero value of the {@code Rational} type.</p>\n\n<p>Equivalent to constructing a new rational with a numerator equal to {@code 0} and\nany non-zero denominator.</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-compareTo' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'>another</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compare this rational to the specified rational to determine their natural order. ...</div><div class='long'><p>Compare this rational to the specified rational to determine their natural order.</p>\n\n<p> <p><a href=\"#!/api/android.util.Rational-property-NaN\" rel=\"android.util.Rational-property-NaN\" class=\"docClass\">NaN</a> is considered to be equal to itself and greater than all other\n {@code Rational} values. Otherwise, if the objects are not <a href=\"#!/api/android.util.Rational-method-equals\" rel=\"android.util.Rational-method-equals\" class=\"docClass\">equal</a>, then\n the following rules apply:</p></p>\n\n<p> <ul>\n <li>Positive infinity is greater than any other finite number (or negative infinity)\n <li>Negative infinity is less than any other finite number (or positive infinity)\n <li>The finite number represented by this rational is checked numerically\n against the other finite number by converting both rationals to a common denominator multiple\n and comparing their numerators.\n </li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>another</span> : Object {Rational}<div class='sub-desc'><p>the rational to be compared</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a negative integer, zero, or a positive integer as this object is less than,\n         equal to, or greater than the specified rational.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code another} was {@code null}</p>\n</div></li></ul></div></div></div><div id='method-doubleValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-doubleValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-doubleValue' class='name expandable'>doubleValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of the specified number as a {@code double}. ...</div><div class='long'><p>Returns the value of the specified number as a {@code double}.</p>\n\n<p> <p>The {@code double} is calculated by converting both the numerator and denominator\n to a {@code double}; then returning the result of dividing the numerator by the\n denominator.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the divided value of the numerator and denominator as a {@code double}.</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-equals' class='name expandable'>equals</a>( <span class='pre'>obj</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Compare this Rational to another object and see if they are equal. ...</div><div class='long'><p>Compare this Rational to another object and see if they are equal.</p>\n\n\n<p> <p>A Rational object can only be equal to another Rational object (comparing against any\n other type will return {@code false}).</p></p>\n\n<p> <p>A Rational object is considered equal to another Rational object if and only if one of\n the following holds:</p>\n <ul><li>Both are {@code NaN}</li>\n     <li>Both are infinities of the same sign</li>\n     <li>Both have the same numerator and denominator in their reduced form</li>\n </ul></p>\n\n<p> <p>A reduced form of a Rational is calculated by dividing both the numerator and the\n denominator by their greatest common divisor.</p></p>\n\n<p> <pre>{@code\n (new Rational(1, 2)).equals(new Rational(1, 2)) == true   // trivially true\n (new Rational(2, 3)).equals(new Rational(1, 2)) == false  // trivially false\n (new Rational(1, 2)).equals(new Rational(2, 4)) == true   // true after reduction\n (new Rational(0, 0)).equals(new Rational(0, 0)) == true   // NaN.equals(NaN)\n (new Rational(1, 0)).equals(new Rational(5, 0)) == true   // both are +infinity\n (new Rational(1, 0)).equals(new Rational(-1, 0)) == false // +infinity != -infinity\n }</pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>a reference to another object</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>A boolean that determines whether or not the two Rational objects are equal.</p>\n</div></li></ul></div></div></div><div id='method-floatValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-floatValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-floatValue' class='name expandable'>floatValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of the specified number as a {@code float}. ...</div><div class='long'><p>Returns the value of the specified number as a {@code float}.</p>\n\n<p> <p>The {@code float} is calculated by converting both the numerator and denominator\n to a {@code float}; then returning the result of dividing the numerator by the\n denominator.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the divided value of the numerator and denominator as a {@code float}.</p>\n</div></li></ul></div></div></div><div id='method-getDenominator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-getDenominator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-getDenominator' class='name expandable'>getDenominator</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the denominator of the rational\n\n The denominator may return {@code 0}, in which case the rational may represent...</div><div class='long'><p>Gets the denominator of the rational</p>\n\n<p> <p>The denominator may return {@code 0}, in which case the rational may represent\n positive infinity (if the numerator was positive), negative infinity (if the numerator\n was negative), or {@code NaN} (if the numerator was {@code 0}).</p></p>\n\n<p> <p>The denominator will always return {@code 1} if the numerator is {@code 0}.</p>\n</div></div></div><div id='method-getNumerator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-getNumerator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-getNumerator' class='name expandable'>getNumerator</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the numerator of the rational. ...</div><div class='long'><p>Gets the numerator of the rational.</p>\n\n<p> <p>The numerator will always return {@code 1} if this rational represents\n infinity (that is, the denominator is {@code 0}).</p></p>\n</div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc} ...</div><div class='long'><p>{@inheritDoc}</p>\n</div></div></div><div id='method-intValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-intValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-intValue' class='name expandable'>intValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of the specified number as a {@code int}. ...</div><div class='long'><p>Returns the value of the specified number as a {@code int}.</p>\n\n<p> <p><a href=\"#!/api/android.util.Rational-method-isInfinite\" rel=\"android.util.Rational-method-isInfinite\" class=\"docClass\">Finite</a> rationals are converted to an {@code int} value\n by dividing the numerator by the denominator; conversion for non-finite values happens\n identically to casting a floating point value to an {@code int}, in particular:</p>\n\n<p> <p>\n <ul>\n <li>Positive infinity saturates to the largest maximum integer\n Integer.MAX_VALUE</li>\n <li>Negative infinity saturates to the smallest maximum integer\n Integer.MIN_VALUE</li>\n <li><em>Not-A-Number (NaN)</em> returns {@code 0}.</li>\n </ul>\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the divided value of the numerator and denominator as a {@code int}.</p>\n</div></li></ul></div></div></div><div id='method-isFinite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-isFinite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-isFinite' class='name expandable'>isFinite</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether this rational represents a finite value. ...</div><div class='long'><p>Indicates whether this rational represents a finite value.</p>\n\n<p> <p>A finite value occurs when the denominator is not {@code 0}; in other words\n the rational is neither infinity or {@code NaN}.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this rational is a (positive or negative) infinite value;\n         {@code false} if this is a finite number value (or {@code NaN})</p>\n</div></li></ul></div></div></div><div id='method-isInfinite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-isInfinite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-isInfinite' class='name expandable'>isInfinite</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether this rational represents an infinite value. ...</div><div class='long'><p>Indicates whether this rational represents an infinite value.</p>\n\n<p> <p>An infinite value occurs when the denominator is {@code 0} (but the numerator is not).</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this rational is a (positive or negative) infinite value;\n         {@code false} if this is a finite number value (or {@code NaN})</p>\n</div></li></ul></div></div></div><div id='method-isNaN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-isNaN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-isNaN' class='name expandable'>isNaN</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether this rational is a Not-a-Number (NaN) value. ...</div><div class='long'><p>Indicates whether this rational is a <em>Not-a-Number (NaN)</em> value.</p>\n\n<p> <p>A {@code NaN} value occurs when both the numerator and the denominator are {@code 0}.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this rational is a <em>Not-a-Number (NaN)</em> value;\n         {@code false} if this is a (potentially infinite) number value</p>\n</div></li></ul></div></div></div><div id='method-isZero' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-isZero' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-isZero' class='name expandable'>isZero</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether this rational represents a zero value. ...</div><div class='long'><p>Indicates whether this rational represents a zero value.</p>\n\n<p> <p>A zero value is a <a href=\"#!/api/android.util.Rational-method-isFinite\" rel=\"android.util.Rational-method-isFinite\" class=\"docClass\">finite</a> rational with a numerator of {@code 0}.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this rational is finite zero value;\n         {@code false} otherwise</p>\n</div></li></ul></div></div></div><div id='method-longValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-longValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-longValue' class='name expandable'>longValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of the specified number as a {@code long}. ...</div><div class='long'><p>Returns the value of the specified number as a {@code long}.</p>\n\n<p> <p><a href=\"#!/api/android.util.Rational-method-isInfinite\" rel=\"android.util.Rational-method-isInfinite\" class=\"docClass\">Finite</a> rationals are converted to an {@code long} value\n by dividing the numerator by the denominator; conversion for non-finite values happens\n identically to casting a floating point value to a {@code long}, in particular:</p>\n\n<p> <p>\n <ul>\n <li>Positive infinity saturates to the largest maximum long\n Long.MAX_VALUE</li>\n <li>Negative infinity saturates to the smallest maximum long\n Long.MIN_VALUE</li>\n <li><em>Not-A-Number (NaN)</em> returns {@code 0}.</li>\n </ul>\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the divided value of the numerator and denominator as a {@code long}.</p>\n</div></li></ul></div></div></div><div id='method-parseRational' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-parseRational' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-parseRational' class='name expandable'>parseRational</a>( <span class='pre'>string</span> ) : Object {android.util.Rational}<span class=\"signature\"></span></div><div class='description'><div class='short'>Parses the specified string as a rational value. ...</div><div class='long'><p>Parses the specified string as a rational value.\n <p>The ASCII characters {@code }{@code u003a} (':') and\n {@code }{@code u002f} ('/') are recognized as separators between\n the numerator and denumerator.</p>\n <p>\n For any {@code Rational r}: {@code Rational.parseRational(r.toString()).equals(r)}.\n However, the method also handles rational numbers expressed in the\n following forms:</p>\n <p>\n \"<i>num</i>{@code /}<i>den</i>\" or\n \"<i>num</i>{@code :}<i>den</i>\" {@code => new Rational(num, den);},\n where <i>num</i> and <i>den</i> are string integers potentially\n containing a sign, such as \"-10\", \"+7\" or \"5\".</p></p>\n\n<p> <pre>{@code\n Rational.parseRational(\"3:+6\").equals(new Rational(1, 2)) == true\n Rational.parseRational(\"-3/-6\").equals(new Rational(1, 2)) == true\n Rational.parseRational(\"4.56\") => throws NumberFormatException\n }</pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>string</span> : String<div class='sub-desc'><p>the string representation of a rational value.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.util.Rational}</span><div class='sub-desc'><p>the rational value represented by {@code string}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NumberFormatException if {@code string} cannot be parsed\n as a rational value.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code string} was {@code null}</p>\n</div></li></ul></div></div></div><div id='method-shortValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-shortValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-shortValue' class='name expandable'>shortValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of the specified number as a {@code short}. ...</div><div class='long'><p>Returns the value of the specified number as a {@code short}.</p>\n\n<p> <p><a href=\"#!/api/android.util.Rational-method-isInfinite\" rel=\"android.util.Rational-method-isInfinite\" class=\"docClass\">Finite</a> rationals are converted to a {@code short} value\n identically to <a href=\"#!/api/android.util.Rational-method-intValue\" rel=\"android.util.Rational-method-intValue\" class=\"docClass\">intValue</a>; the {@code int} result is then truncated to a\n {@code short} before returning the value.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the divided value of the numerator and denominator as a {@code short}.</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.Rational'>android.util.Rational</span><br/><a href='source/Rational.html#android-util-Rational-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.Rational-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a string representation of this rational, e.g. ...</div><div class='long'><p>Return a string representation of this rational, e.g. {@code \"1/2\"}.</p>\n\n<p> <p>The following rules of conversion apply:\n <ul>\n <li>{@code NaN} values will return {@code \"NaN\"}\n <li>Positive infinity values will return {@code \"Infinity\"}\n <li>Negative infinity values will return {@code \"-Infinity\"}\n <li>All other values will return {@code \"numerator/denominator\"} where {@code numerator}\n and {@code denominator} are substituted with the appropriate numerator and denominator\n values.\n </li></li></li></li></ul></p></p>\n</div></div></div></div></div></div></div>","meta":{}});