Ext.data.JsonP.android_util_JsonReader({"tagname":"class","name":"android.util.JsonReader","autodetected":{},"files":[{"filename":"JsonReader.js","href":"JsonReader.html#android-util-JsonReader"}],"extends":"java.lang.Object","members":[{"name":"beginArray","tagname":"method","owner":"android.util.JsonReader","id":"method-beginArray","meta":{}},{"name":"beginObject","tagname":"method","owner":"android.util.JsonReader","id":"method-beginObject","meta":{}},{"name":"close","tagname":"method","owner":"android.util.JsonReader","id":"method-close","meta":{}},{"name":"endArray","tagname":"method","owner":"android.util.JsonReader","id":"method-endArray","meta":{}},{"name":"endObject","tagname":"method","owner":"android.util.JsonReader","id":"method-endObject","meta":{}},{"name":"hasNext","tagname":"method","owner":"android.util.JsonReader","id":"method-hasNext","meta":{}},{"name":"isLenient","tagname":"method","owner":"android.util.JsonReader","id":"method-isLenient","meta":{}},{"name":"nextBoolean","tagname":"method","owner":"android.util.JsonReader","id":"method-nextBoolean","meta":{}},{"name":"nextDouble","tagname":"method","owner":"android.util.JsonReader","id":"method-nextDouble","meta":{}},{"name":"nextInt","tagname":"method","owner":"android.util.JsonReader","id":"method-nextInt","meta":{}},{"name":"nextLong","tagname":"method","owner":"android.util.JsonReader","id":"method-nextLong","meta":{}},{"name":"nextName","tagname":"method","owner":"android.util.JsonReader","id":"method-nextName","meta":{}},{"name":"nextNull","tagname":"method","owner":"android.util.JsonReader","id":"method-nextNull","meta":{}},{"name":"nextString","tagname":"method","owner":"android.util.JsonReader","id":"method-nextString","meta":{}},{"name":"peek","tagname":"method","owner":"android.util.JsonReader","id":"method-peek","meta":{}},{"name":"setLenient","tagname":"method","owner":"android.util.JsonReader","id":"method-setLenient","meta":{}},{"name":"skipValue","tagname":"method","owner":"android.util.JsonReader","id":"method-skipValue","meta":{}},{"name":"toString","tagname":"method","owner":"android.util.JsonReader","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.util.JsonReader","short_doc":"implements java.io.Closeable\n\nReads a JSON (RFC 4627)\n encoded value as a stream of tokens. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.util.JsonReader</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/JsonReader.html#android-util-JsonReader' target='_blank'>JsonReader.js</a></div></pre><div class='doc-contents'><p>implements java.io.Closeable</p>\n\n<p>Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n encoded value as a stream of tokens. This stream includes both literal\n values (strings, numbers, booleans, and nulls) as well as the begin and\n end delimiters of objects and arrays. The tokens are traversed in\n depth-first order, the same order that they appear in the JSON document.\n Within JSON objects, name/value pairs are represented by a single token.</p>\n\n<p> <h3>Parsing JSON</h3>\n To create a recursive descent parser for your own JSON streams, first create\n an entry point method that creates a {@code JsonReader}.</p>\n\n<p> <p>Next, create handler methods for each structure in your JSON text. You'll\n need a method for each object type and for each array type.\n <ul>\n   <li>Within <strong>array handling</strong> methods, first call <a href=\"#!/api/android.util.JsonReader-method-beginArray\" rel=\"android.util.JsonReader-method-beginArray\" class=\"docClass\">beginArray</a> to consume the array's opening bracket. Then create a\n       while loop that accumulates values, terminating when <a href=\"#!/api/android.util.JsonReader-method-hasNext\" rel=\"android.util.JsonReader-method-hasNext\" class=\"docClass\">hasNext</a>\n       is false. Finally, read the array's closing bracket by calling <a href=\"#!/api/android.util.JsonReader-method-endArray\" rel=\"android.util.JsonReader-method-endArray\" class=\"docClass\">endArray</a>.\n   <li>Within <strong>object handling</strong> methods, first call <a href=\"#!/api/android.util.JsonReader-method-beginObject\" rel=\"android.util.JsonReader-method-beginObject\" class=\"docClass\">beginObject</a> to consume the object's opening brace. Then create a\n       while loop that assigns values to local variables based on their name.\n       This loop should terminate when <a href=\"#!/api/android.util.JsonReader-method-hasNext\" rel=\"android.util.JsonReader-method-hasNext\" class=\"docClass\">hasNext</a> is false. Finally,\n       read the object's closing brace by calling <a href=\"#!/api/android.util.JsonReader-method-endObject\" rel=\"android.util.JsonReader-method-endObject\" class=\"docClass\">endObject</a>.\n </li></li></ul>\n <p>When a nested object or array is encountered, delegate to the\n corresponding handler method.</p>\n\n<p> <p>When an unknown name is encountered, strict parsers should fail with an\n exception. Lenient parsers should call <a href=\"#!/api/android.util.JsonReader-method-skipValue\" rel=\"android.util.JsonReader-method-skipValue\" class=\"docClass\">skipValue</a>() to recursively\n skip the value's nested tokens, which may otherwise conflict.</p>\n\n<p> <p>If a value may be null, you should first check using <a href=\"#!/api/android.util.JsonReader-method-peek\" rel=\"android.util.JsonReader-method-peek\" class=\"docClass\">peek</a>().\n Null literals can be consumed using either <a href=\"#!/api/android.util.JsonReader-method-nextNull\" rel=\"android.util.JsonReader-method-nextNull\" class=\"docClass\">nextNull</a>() or <a href=\"#!/api/android.util.JsonReader-method-skipValue\" rel=\"android.util.JsonReader-method-skipValue\" class=\"docClass\">skipValue</a>().</p>\n\n<p> <h3>Example</h3>\n Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n [\n   {\n     \"id\": 912345678901,\n     \"text\": \"How do I read JSON on Android?\",\n     \"geo\": null,\n     \"user\": {\n       \"name\": \"android_newb\",\n       \"followers_count\": 41\n      }\n   },\n   {\n     \"id\": 912345678902,\n     \"text\": \"@android_newb just use <a href=\"#!/api/android.util.JsonReader\" rel=\"android.util.JsonReader\" class=\"docClass\">android.util.JsonReader</a>!\",\n     \"geo\": [50.454722, -104.606667],\n     \"user\": {\n       \"name\": \"jesse\",\n       \"followers_count\": 2\n     }\n   }\n ]}</pre>\n This code implements the parser for the above structure: <pre>   {@code</pre></p>\n\n<p>   public List<Message> readJsonStream(InputStream in) throws IOException {\n     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n     try {\n       return readMessagesArray(reader);\n     } finally {\n       reader.close();\n     }\n   }</Message></p>\n\n<p>   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n     List<Message> messages = new ArrayList<Message>();</Message></Message></Message></p>\n\n<pre><code> reader.beginArray();\n while (reader.hasNext()) {\n   messages.add(readMessage(reader));\n }\n reader.endArray();\n return messages;\n</code></pre>\n\n<p>   }</p>\n\n<p>   public Message readMessage(JsonReader reader) throws IOException {\n     long id = -1;\n     String text = null;\n     User user = null;\n     List<Double> geo = null;</Double></p>\n\n<pre><code> reader.beginObject();\n while (reader.hasNext()) {\n   String name = reader.nextName();\n   if (name.equals(\"id\")) {\n     id = reader.nextLong();\n   } else if (name.equals(\"text\")) {\n     text = reader.nextString();\n   } else if (name.equals(\"geo\") &amp;&amp; reader.peek() != JsonToken.NULL) {\n     geo = readDoublesArray(reader);\n   } else if (name.equals(\"user\")) {\n     user = readUser(reader);\n   } else {\n     reader.skipValue();\n   }\n }\n reader.endObject();\n return new Message(id, text, user, geo);\n</code></pre>\n\n<p>   }</p>\n\n<p>   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n     List<Double> doubles = new ArrayList<Double>();</Double></Double></Double></p>\n\n<pre><code> reader.beginArray();\n while (reader.hasNext()) {\n   doubles.add(reader.nextDouble());\n }\n reader.endArray();\n return doubles;\n</code></pre>\n\n<p>   }</p>\n\n<p>   public User readUser(JsonReader reader) throws IOException {\n     String username = null;\n     int followersCount = -1;</p>\n\n<pre><code> reader.beginObject();\n while (reader.hasNext()) {\n   String name = reader.nextName();\n   if (name.equals(\"name\")) {\n     username = reader.nextString();\n   } else if (name.equals(\"followers_count\")) {\n     followersCount = reader.nextInt();\n   } else {\n     reader.skipValue();\n   }\n }\n reader.endObject();\n return new User(username, followersCount);\n</code></pre>\n\n<p>   }}</p>\n\n<p> <h3>Number Handling</h3>\n This reader permits numeric values to be read as strings and string values to\n be read as numbers. For example, both elements of the JSON array {@code\n [1, \"1\"]} may be read using either <a href=\"#!/api/android.util.JsonReader-method-nextInt\" rel=\"android.util.JsonReader-method-nextInt\" class=\"docClass\">nextInt</a> or <a href=\"#!/api/android.util.JsonReader-method-nextString\" rel=\"android.util.JsonReader-method-nextString\" class=\"docClass\">nextString</a>.\n This behavior is intended to prevent lossy numeric conversions: double is\n JavaScript's only numeric type and very large values like {@code\n 9007199254740993} cannot be represented exactly on that platform. To minimize\n precision loss, extremely large values should be written and read as strings\n in JSON.</p>\n\n<p> <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n of this class are not thread safe.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-beginArray' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-beginArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-beginArray' class='name expandable'>beginArray</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Consumes the next token from the JSON stream and asserts that it is the\n beginning of a new array. ...</div><div class='long'><p>Consumes the next token from the JSON stream and asserts that it is the\n beginning of a new array.</p>\n</div></div></div><div id='method-beginObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-beginObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-beginObject' class='name expandable'>beginObject</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Consumes the next token from the JSON stream and asserts that it is the\n beginning of a new object. ...</div><div class='long'><p>Consumes the next token from the JSON stream and asserts that it is the\n beginning of a new object.</p>\n</div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this JSON reader and the underlying Reader. ...</div><div class='long'><p>Closes this JSON reader and the underlying Reader.</p>\n</div></div></div><div id='method-endArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-endArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-endArray' class='name expandable'>endArray</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Consumes the next token from the JSON stream and asserts that it is the\n end of the current array. ...</div><div class='long'><p>Consumes the next token from the JSON stream and asserts that it is the\n end of the current array.</p>\n</div></div></div><div id='method-endObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-endObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-endObject' class='name expandable'>endObject</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Consumes the next token from the JSON stream and asserts that it is the\n end of the current object. ...</div><div class='long'><p>Consumes the next token from the JSON stream and asserts that it is the\n end of the current object.</p>\n</div></div></div><div id='method-hasNext' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-hasNext' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-hasNext' class='name expandable'>hasNext</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the current array or object has another element. ...</div><div class='long'><p>Returns true if the current array or object has another element.</p>\n</div></div></div><div id='method-isLenient' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-isLenient' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-isLenient' class='name expandable'>isLenient</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this parser is liberal in what it accepts. ...</div><div class='long'><p>Returns true if this parser is liberal in what it accepts.</p>\n</div></div></div><div id='method-nextBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-nextBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-nextBoolean' class='name expandable'>nextBoolean</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the boolean value of the next token,\n consuming it. ...</div><div class='long'><p>Returns the <a href=\"#!/api/android.util.JsonToken-property-BOOLEAN\" rel=\"android.util.JsonToken-property-BOOLEAN\" class=\"docClass\">boolean</a> value of the next token,\n consuming it.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the next token is not a boolean or if\n     this reader is closed.</p>\n</div></li></ul></div></div></div><div id='method-nextDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-nextDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-nextDouble' class='name expandable'>nextDouble</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the double value of the next token,\n consuming it. ...</div><div class='long'><p>Returns the <a href=\"#!/api/android.util.JsonToken-property-NUMBER\" rel=\"android.util.JsonToken-property-NUMBER\" class=\"docClass\">double</a> value of the next token,\n consuming it. If the next token is a string, this method will attempt to\n parse it as a double using Double.parseDouble(String).</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the next token is not a literal value.</p>\n</div></li></ul></div></div></div><div id='method-nextInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-nextInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-nextInt' class='name expandable'>nextInt</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the int value of the next token,\n consuming it. ...</div><div class='long'><p>Returns the <a href=\"#!/api/android.util.JsonToken-property-NUMBER\" rel=\"android.util.JsonToken-property-NUMBER\" class=\"docClass\">int</a> value of the next token,\n consuming it. If the next token is a string, this method will attempt to\n parse it as an int. If the next token's numeric value cannot be exactly\n represented by a Java {@code int}, this method throws.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the next token is not a literal value.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NumberFormatException if the next literal value cannot be parsed\n     as a number, or exactly represented as an int.</p>\n</div></li></ul></div></div></div><div id='method-nextLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-nextLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-nextLong' class='name expandable'>nextLong</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the long value of the next token,\n consuming it. ...</div><div class='long'><p>Returns the <a href=\"#!/api/android.util.JsonToken-property-NUMBER\" rel=\"android.util.JsonToken-property-NUMBER\" class=\"docClass\">long</a> value of the next token,\n consuming it. If the next token is a string, this method will attempt to\n parse it as a long. If the next token's numeric value cannot be exactly\n represented by a Java {@code long}, this method throws.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the next token is not a literal value.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NumberFormatException if the next literal value cannot be parsed\n     as a number, or exactly represented as a long.</p>\n</div></li></ul></div></div></div><div id='method-nextName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-nextName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-nextName' class='name expandable'>nextName</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the next token, a property name, and\n consumes it. ...</div><div class='long'><p>Returns the next token, a <a href=\"#!/api/android.util.JsonToken-property-NAME\" rel=\"android.util.JsonToken-property-NAME\" class=\"docClass\">property name</a>, and\n consumes it.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if the next token in the stream is not a property\n     name.</p>\n</div></li></ul></div></div></div><div id='method-nextNull' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-nextNull' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-nextNull' class='name expandable'>nextNull</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Consumes the next token from the JSON stream and asserts that it is a\n literal null. ...</div><div class='long'><p>Consumes the next token from the JSON stream and asserts that it is a\n literal null.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the next token is not null or if this\n     reader is closed.</p>\n</div></li></ul></div></div></div><div id='method-nextString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-nextString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-nextString' class='name expandable'>nextString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the string value of the next token,\n consuming it. ...</div><div class='long'><p>Returns the <a href=\"#!/api/android.util.JsonToken-property-STRING\" rel=\"android.util.JsonToken-property-STRING\" class=\"docClass\">string</a> value of the next token,\n consuming it. If the next token is a number, this method will return its\n string form.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the next token is not a string or if\n     this reader is closed.</p>\n</div></li></ul></div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-peek' class='name expandable'>peek</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the type of the next token without consuming it. ...</div><div class='long'><p>Returns the type of the next token without consuming it.</p>\n</div></div></div><div id='method-setLenient' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-setLenient' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-setLenient' class='name expandable'>setLenient</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Configure this parser to be  be liberal in what it accepts. ...</div><div class='long'><p>Configure this parser to be  be liberal in what it accepts. By default,\n this parser is strict and only accepts JSON as specified by <a\n href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the\n parser to lenient causes it to ignore the following syntax errors:</p>\n\n<p> <ul>\n   <li>End of line comments starting with {@code //} or {@code #} and\n       ending with a newline character.\n   <li>C-style comments starting with {@code /<em>} and ending with\n       {@code </em>}{@code /}. Such comments may not be nested.\n   <li>Names that are unquoted or {@code 'single quoted'}.\n   <li>Strings that are unquoted or {@code 'single quoted'}.\n   <li>Array elements separated by {@code ;} instead of {@code ,}.\n   <li>Unnecessary array separators. These are interpreted as if null\n       was the omitted value.\n   <li>Names and values separated by {@code =} or {@code =>} instead of\n       {@code :}.\n   <li>Name/value pairs separated by {@code ;} instead of {@code ,}.\n </li></li></li></li></li></li></li></li></ul></p>\n</div></div></div><div id='method-skipValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-skipValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-skipValue' class='name expandable'>skipValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips the next value recursively. ...</div><div class='long'><p>Skips the next value recursively. If it is an object or array, all nested\n elements are skipped. This method is intended for use when the JSON token\n stream contains unrecognized or unhandled values.</p>\n</div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.JsonReader'>android.util.JsonReader</span><br/><a href='source/JsonReader.html#android-util-JsonReader-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.JsonReader-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});