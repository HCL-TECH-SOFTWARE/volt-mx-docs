Ext.data.JsonP.android_util_AtomicFile({"tagname":"class","name":"android.util.AtomicFile","autodetected":{},"files":[{"filename":"AtomicFile.js","href":"AtomicFile.html#android-util-AtomicFile"}],"extends":"java.lang.Object","members":[{"name":"delete","tagname":"method","owner":"android.util.AtomicFile","id":"method-delete","meta":{}},{"name":"failWrite","tagname":"method","owner":"android.util.AtomicFile","id":"method-failWrite","meta":{}},{"name":"finishWrite","tagname":"method","owner":"android.util.AtomicFile","id":"method-finishWrite","meta":{}},{"name":"getBaseFile","tagname":"method","owner":"android.util.AtomicFile","id":"method-getBaseFile","meta":{}},{"name":"getLastModifiedTime","tagname":"method","owner":"android.util.AtomicFile","id":"method-getLastModifiedTime","meta":{}},{"name":"openRead","tagname":"method","owner":"android.util.AtomicFile","id":"method-openRead","meta":{}},{"name":"readFully","tagname":"method","owner":"android.util.AtomicFile","id":"method-readFully","meta":{}},{"name":"startWrite","tagname":"method","owner":"android.util.AtomicFile","id":"method-startWrite","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.util.AtomicFile","short_doc":"Helper class for performing atomic operations on a file by creating a\n backup file until a write has successfully com...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.util.AtomicFile</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AtomicFile.html#android-util-AtomicFile' target='_blank'>AtomicFile.js</a></div></pre><div class='doc-contents'><p>Helper class for performing atomic operations on a file by creating a\n backup file until a write has successfully completed.  If you need this\n on older versions of the platform you can use\n android.support.v4.util.AtomicFile in the v4 support library.\n <p>\n Atomic file guarantees file integrity by ensuring that a file has\n been completely written and sync'd to disk before removing its backup.\n As long as the backup file exists, the original file is considered\n to be invalid (left over from a previous attempt to write the file).\n </p><p>\n Atomic file does not confer any file locking semantics.\n Do not use this class when the file may be accessed or modified concurrently\n by multiple threads or processes.  The caller is responsible for ensuring\n appropriate mutual exclusion invariants whenever it accesses the file.\n </p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-delete' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.AtomicFile'>android.util.AtomicFile</span><br/><a href='source/AtomicFile.html#android-util-AtomicFile-method-delete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.AtomicFile-method-delete' class='name expandable'>delete</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Delete the atomic file. ...</div><div class='long'><p>Delete the atomic file.  This deletes both the base and backup files.</p>\n</div></div></div><div id='method-failWrite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.AtomicFile'>android.util.AtomicFile</span><br/><a href='source/AtomicFile.html#android-util-AtomicFile-method-failWrite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.AtomicFile-method-failWrite' class='name expandable'>failWrite</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Call when you have failed for some reason at writing to the stream\n returned by startWrite(). ...</div><div class='long'><p>Call when you have failed for some reason at writing to the stream\n returned by <a href=\"#!/api/android.util.AtomicFile-method-startWrite\" rel=\"android.util.AtomicFile-method-startWrite\" class=\"docClass\">startWrite</a>().  This will close the current\n write stream, and roll back to the previous state of the file.</p>\n</div></div></div><div id='method-finishWrite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.AtomicFile'>android.util.AtomicFile</span><br/><a href='source/AtomicFile.html#android-util-AtomicFile-method-finishWrite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.AtomicFile-method-finishWrite' class='name expandable'>finishWrite</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Call when you have successfully finished writing to the stream\n returned by startWrite(). ...</div><div class='long'><p>Call when you have successfully finished writing to the stream\n returned by <a href=\"#!/api/android.util.AtomicFile-method-startWrite\" rel=\"android.util.AtomicFile-method-startWrite\" class=\"docClass\">startWrite</a>().  This will close, sync, and\n commit the new data.  The next attempt to read the atomic file\n will return the new file stream.</p>\n</div></div></div><div id='method-getBaseFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.AtomicFile'>android.util.AtomicFile</span><br/><a href='source/AtomicFile.html#android-util-AtomicFile-method-getBaseFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.AtomicFile-method-getBaseFile' class='name expandable'>getBaseFile</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the path to the base file. ...</div><div class='long'><p>Return the path to the base file.  You should not generally use this,\n as the data at that path may not be valid.</p>\n</div></div></div><div id='method-getLastModifiedTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.AtomicFile'>android.util.AtomicFile</span><br/><a href='source/AtomicFile.html#android-util-AtomicFile-method-getLastModifiedTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.AtomicFile-method-getLastModifiedTime' class='name expandable'>getLastModifiedTime</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the last modified time of the atomic file. ...</div><div class='long'><p>Gets the last modified time of the atomic file.\n {@hide}</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>last modified time in milliseconds since epoch.  Returns zero if\n     the file does not exist or an I/O error is encountered.</p>\n</div></li></ul></div></div></div><div id='method-openRead' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.AtomicFile'>android.util.AtomicFile</span><br/><a href='source/AtomicFile.html#android-util-AtomicFile-method-openRead' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.AtomicFile-method-openRead' class='name expandable'>openRead</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Open the atomic file for reading. ...</div><div class='long'><p>Open the atomic file for reading.  If there previously was an\n incomplete write, this will roll back to the last good data before\n opening for read.  You should call close() on the FileInputStream when\n you are done reading from it.</p>\n\n<p> <p>Note that if another thread is currently performing\n a write, this will incorrectly consider it to be in the state of a bad\n write and roll back, causing the new data currently being written to\n be dropped.  You must do your own threading protection for access to\n AtomicFile.</p>\n</div></div></div><div id='method-readFully' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.AtomicFile'>android.util.AtomicFile</span><br/><a href='source/AtomicFile.html#android-util-AtomicFile-method-readFully' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.AtomicFile-method-readFully' class='name expandable'>readFully</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>A convenience for openRead() that also reads all of the\n file contents into a byte array which is returned. ...</div><div class='long'><p>A convenience for <a href=\"#!/api/android.util.AtomicFile-method-openRead\" rel=\"android.util.AtomicFile-method-openRead\" class=\"docClass\">openRead</a>() that also reads all of the\n file contents into a byte array which is returned.</p>\n</div></div></div><div id='method-startWrite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.AtomicFile'>android.util.AtomicFile</span><br/><a href='source/AtomicFile.html#android-util-AtomicFile-method-startWrite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.AtomicFile-method-startWrite' class='name expandable'>startWrite</a>( <span class='pre'>startTime, startTime</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>startTime</span> : Number<div class='sub-desc'><p>The effective start time of the operation, in the time\n base of SystemClock.uptimeMillis().</p>\n</div></li><li><span class='pre'>startTime</span> : Object<div class='sub-desc'><p>The effective start time of the operation, in the time\n base of SystemClock.uptimeMillis().</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});