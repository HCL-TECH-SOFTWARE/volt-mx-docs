Ext.data.JsonP.android_util_TimedRemoteCaller({"tagname":"class","name":"android.util.TimedRemoteCaller","autodetected":{},"files":[{"filename":"TimedRemoteCaller.js","href":"TimedRemoteCaller.html#android-util-TimedRemoteCaller"}],"extends":"java.lang.Object","params":[{"tagname":"params","doc":"<p><T> The type of the expected result.</T></p>\n"}],"hide":true,"members":[{"name":"DEFAULT_CALL_TIMEOUT_MILLIS","tagname":"property","owner":"android.util.TimedRemoteCaller","id":"property-DEFAULT_CALL_TIMEOUT_MILLIS","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.util.TimedRemoteCaller","short_doc":"This is a helper class for making an async one way call and\n its async one way response response in a sync fashion wi...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.util.TimedRemoteCaller</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/TimedRemoteCaller.html#android-util-TimedRemoteCaller' target='_blank'>TimedRemoteCaller.js</a></div></pre><div class='doc-contents'><p>This is a helper class for making an async one way call and\n its async one way response response in a sync fashion within\n a timeout. The key idea is to call the remote method with a\n sequence number and a callback and then starting to wait for\n the response. The remote method calls back with the result and\n the sequence number. If the response comes within the timeout\n and its sequence number is the one sent in the method invocation,\n then the call succeeded. If the response does not come within\n the timeout then the call failed.\n <p>\n Typical usage is:\n </p>\n <p></p>\n\n<pre><code> public class MyMethodCaller extends TimeoutRemoteCallHelper<Object> {\n     // The one way remote method to call.\n     private final IRemoteInterface mTarget;\n\n     // One way callback invoked when the remote method is done.\n     private final IRemoteCallback mCallback = new IRemoteCallback.Stub() {\n         public void onCompleted(Object result, int sequence) {\n             onRemoteMethodResult(result, sequence);\n         }\n     };\n\n     public MyMethodCaller(IRemoteInterface target) {\n         mTarget = target;\n     }\n\n     public Object onCallMyMethod(Object arg) throws RemoteException {\n         final int sequence = onBeforeRemoteCall();\n         mTarget.myMethod(arg, sequence);\n         return getResultTimed(sequence);\n     }\n }\n </Object></code></pre>\n\n\n<p></p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> The type of the expected result.</T></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DEFAULT_CALL_TIMEOUT_MILLIS' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.TimedRemoteCaller'>android.util.TimedRemoteCaller</span><br/><a href='source/TimedRemoteCaller.html#android-util-TimedRemoteCaller-property-DEFAULT_CALL_TIMEOUT_MILLIS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.TimedRemoteCaller-property-DEFAULT_CALL_TIMEOUT_MILLIS' class='name expandable'>DEFAULT_CALL_TIMEOUT_MILLIS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;5000&quot;</code></p></div></div></div></div></div></div></div>","meta":{}});