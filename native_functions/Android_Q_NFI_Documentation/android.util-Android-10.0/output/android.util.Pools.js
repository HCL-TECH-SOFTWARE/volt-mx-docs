Ext.data.JsonP.android_util_Pools({"tagname":"class","name":"android.util.Pools","autodetected":{},"files":[{"filename":"Pools.js","href":"Pools.html#android-util-Pools"}],"extends":"java.lang.Object","hide":true,"members":[],"alternateClassNames":[],"aliases":{},"id":"class-android.util.Pools","short_doc":"Helper class for crating pools of objects. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.util.Pools</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Pools.html#android-util-Pools' target='_blank'>Pools.js</a></div></pre><div class='doc-contents'><p>Helper class for crating pools of objects. An example use looks like this:</p>\n\n<pre> public class MyPooledClass {\n\n     private static final SynchronizedPool<MyPooledClass> sPool =\n             new SynchronizedPool<MyPooledClass>(10);\n\n     public static MyPooledClass obtain() {\n         MyPooledClass instance = sPool.acquire();\n         return (instance != null) ? instance : new MyPooledClass();\n     }\n\n     public void recycle() {\n          // Clear state if needed.\n          sPool.release(this);\n     }\n\n     . . .\n }\n </MyPooledClass></MyPooledClass></pre>\n\n</div><div class='members'></div></div>","meta":{}});