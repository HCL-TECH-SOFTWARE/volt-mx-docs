Ext.data.JsonP.java_util_stream_Node_OfPrimitive({"tagname":"class","name":"java.util.stream.Node.OfPrimitive","autodetected":{},"files":[{"filename":"OfPrimitive.js","href":"OfPrimitive.html#java-util-stream-Node-OfPrimitive"}],"members":[{"name":"asArray","tagname":"method","owner":"java.util.stream.Node.OfPrimitive","id":"method-asArray","meta":{}},{"name":"asPrimitiveArray","tagname":"method","owner":"java.util.stream.Node.OfPrimitive","id":"method-asPrimitiveArray","meta":{}},{"name":"copyInto","tagname":"method","owner":"java.util.stream.Node.OfPrimitive","id":"method-copyInto","meta":{}},{"name":"forEach","tagname":"method","owner":"java.util.stream.Node.OfPrimitive","id":"method-forEach","meta":{}},{"name":"getChild","tagname":"method","owner":"java.util.stream.Node.OfPrimitive","id":"method-getChild","meta":{}},{"name":"newArray","tagname":"method","owner":"java.util.stream.Node.OfPrimitive","id":"method-newArray","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.stream.Node.OfPrimitive","id":"method-spliterator","meta":{}},{"name":"truncate","tagname":"method","owner":"java.util.stream.Node.OfPrimitive","id":"method-truncate","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.Node.OfPrimitive","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive' target='_blank'>OfPrimitive.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.stream.Node\" rel=\"java.util.stream.Node\" class=\"docClass\">java.util.stream.Node</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-asArray' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfPrimitive'>java.util.stream.Node.OfPrimitive</span><br/><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive-method-asArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfPrimitive-method-asArray' class='name expandable'>asArray</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec the default implementation invokes the generator to create\n an instance of a boxed primitive ...</div><div class='long'><p>{@inheritDoc}\n@implSpec the default implementation invokes the generator to create\n an instance of a boxed primitive array with a length of\n count() and then invokes int) with\n that array at an offset of 0.</p>\n</div></div></div><div id='method-asPrimitiveArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfPrimitive'>java.util.stream.Node.OfPrimitive</span><br/><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive-method-asPrimitiveArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfPrimitive-method-asPrimitiveArray' class='name expandable'>asPrimitiveArray</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Views this node as a primitive array. ...</div><div class='long'><p>Views this node as a primitive array.</p>\n\n<p> <p>Depending on the underlying implementation this may return a\n reference to an internal array rather than a copy.  It is the callers\n responsibility to decide if either this node or the array is utilized\n as the primary reference for the data.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an array containing the contents of this {@code Node}</p>\n</div></li></ul></div></div></div><div id='method-copyInto' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfPrimitive'>java.util.stream.Node.OfPrimitive</span><br/><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive-method-copyInto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfPrimitive-method-copyInto' class='name expandable'>copyInto</a>( <span class='pre'>array, offset</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Copies the content of this {@code Node} into a primitive array,\n starting at a given offset into the array. ...</div><div class='long'><p>Copies the content of this {@code Node} into a primitive array,\n starting at a given offset into the array.  It is the caller's\n responsibility to ensure there is sufficient room in the array.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>array</span> : Object {Object}<div class='sub-desc'><p>the array into which to copy the contents of this\n              {@code Node}</p>\n</div></li><li><span class='pre'>offset</span> : Number<div class='sub-desc'><p>the starting offset within the array</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException if copying would cause access of\n         data outside array bounds</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code array} is {@code null}</p>\n</div></li></ul></div></div></div><div id='method-forEach' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfPrimitive'>java.util.stream.Node.OfPrimitive</span><br/><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive-method-forEach' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfPrimitive-method-forEach' class='name expandable'>forEach</a>( <span class='pre'>action</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Traverses the elements of this node, and invoke the provided\n {@code action} with each element. ...</div><div class='long'><p>Traverses the elements of this node, and invoke the provided\n {@code action} with each element.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {Object}<div class='sub-desc'><p>a consumer that is to be invoked with each\n        element in this {@code Node.OfPrimitive}</p>\n</div></li></ul></div></div></div><div id='method-getChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfPrimitive'>java.util.stream.Node.OfPrimitive</span><br/><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive-method-getChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfPrimitive-method-getChild' class='name expandable'>getChild</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-newArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfPrimitive'>java.util.stream.Node.OfPrimitive</span><br/><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive-method-newArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfPrimitive-method-newArray' class='name expandable'>newArray</a>( <span class='pre'>count</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new primitive array. ...</div><div class='long'><p>Creates a new primitive array.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>the length of the primitive array.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the new primitive array.</p>\n</div></li></ul></div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfPrimitive'>java.util.stream.Node.OfPrimitive</span><br/><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfPrimitive-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> ) : Object {java.util.Spliterator.OfPrimitive}<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc} ...</div><div class='long'><p>{@inheritDoc}</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator.OfPrimitive}</span><div class='sub-desc'><p>a Spliterator.OfPrimitive describing the elements of\n         this node</p>\n</div></li></ul></div></div></div><div id='method-truncate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfPrimitive'>java.util.stream.Node.OfPrimitive</span><br/><a href='source/OfPrimitive.html#java-util-stream-Node-OfPrimitive-method-truncate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfPrimitive-method-truncate' class='name expandable'>truncate</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});