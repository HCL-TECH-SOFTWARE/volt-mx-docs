Ext.data.JsonP.java_util_stream_BaseStream({"tagname":"class","name":"java.util.stream.BaseStream","autodetected":{},"files":[{"filename":"BaseStream.js","href":"BaseStream.html#java-util-stream-BaseStream"}],"params":[{"tagname":"params","doc":"<p><T> the type of the stream elements</T></p>\n"},{"tagname":"params","doc":"<p><S> the type of of the stream implementing {@code BaseStream}\n @see Stream\n @see IntStream\n @see LongStream\n @see DoubleStream\n @see <a href=\"package-summary.html\">java.util.stream</a></S></p>\n"}],"since":"1.8","members":[{"name":"close","tagname":"method","owner":"java.util.stream.BaseStream","id":"method-close","meta":{}},{"name":"isParallel","tagname":"method","owner":"java.util.stream.BaseStream","id":"method-isParallel","meta":{}},{"name":"iterator","tagname":"method","owner":"java.util.stream.BaseStream","id":"method-iterator","meta":{}},{"name":"onClose","tagname":"method","owner":"java.util.stream.BaseStream","id":"method-onClose","meta":{}},{"name":"parallel","tagname":"method","owner":"java.util.stream.BaseStream","id":"method-parallel","meta":{}},{"name":"sequential","tagname":"method","owner":"java.util.stream.BaseStream","id":"method-sequential","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.stream.BaseStream","id":"method-spliterator","meta":{}},{"name":"unordered","tagname":"method","owner":"java.util.stream.BaseStream","id":"method-unordered","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.BaseStream","short_doc":"implements java.lang.AutoCloseable\n\n Base interface for streams, which are sequences of elements supporting\n sequenti...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/BaseStream.html#java-util-stream-BaseStream' target='_blank'>BaseStream.js</a></div></pre><div class='doc-contents'><p>implements java.lang.AutoCloseable</p>\n\n<p> Base interface for streams, which are sequences of elements supporting\n sequential and parallel aggregate operations.  The following example\n illustrates an aggregate operation using the stream types <a href=\"#!/api/java.util.stream.Stream\" rel=\"java.util.stream.Stream\" class=\"docClass\">java.util.stream.Stream</a>\n and <a href=\"#!/api/java.util.stream.IntStream\" rel=\"java.util.stream.IntStream\" class=\"docClass\">java.util.stream.IntStream</a>, computing the sum of the weights of the red widgets:</p>\n\n<p> <pre>{@code\n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n }</pre></p>\n\n<p> See the class documentation for <a href=\"#!/api/java.util.stream.Stream\" rel=\"java.util.stream.Stream\" class=\"docClass\">java.util.stream.Stream</a> and the package documentation\n for <a href=\"package-summary.html\">java.util.stream</a> for additional\n specification of streams, stream operations, stream pipelines, and\n parallelism, which governs the behavior of all stream types.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> the type of the stream elements</T></p>\n</div></li><li><span class='pre'></span> : <div class='sub-desc'><p><S> the type of of the stream implementing {@code BaseStream}\n @see Stream\n @see IntStream\n @see LongStream\n @see DoubleStream\n @see <a href=\"package-summary.html\">java.util.stream</a></S></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.BaseStream'>java.util.stream.BaseStream</span><br/><a href='source/BaseStream.html#java-util-stream-BaseStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.BaseStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this stream, causing all close handlers for this stream pipeline\n to be called. ...</div><div class='long'><p>Closes this stream, causing all close handlers for this stream pipeline\n to be called.\n@see AutoCloseable#close()</p>\n</div></div></div><div id='method-isParallel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.BaseStream'>java.util.stream.BaseStream</span><br/><a href='source/BaseStream.html#java-util-stream-BaseStream-method-isParallel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.BaseStream-method-isParallel' class='name expandable'>isParallel</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether this stream, if a terminal operation were to be executed,\n would execute in parallel. ...</div><div class='long'><p>Returns whether this stream, if a terminal operation were to be executed,\n would execute in parallel.  Calling this method after invoking an\n terminal stream operation method may yield unpredictable results.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this stream would execute in parallel if executed</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.BaseStream'>java.util.stream.BaseStream</span><br/><a href='source/BaseStream.html#java-util-stream-BaseStream-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.BaseStream-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iterator for the elements of this stream. ...</div><div class='long'><p>Returns an iterator for the elements of this stream.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>the element iterator for this stream</p>\n</div></li></ul></div></div></div><div id='method-onClose' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.BaseStream'>java.util.stream.BaseStream</span><br/><a href='source/BaseStream.html#java-util-stream-BaseStream-method-onClose' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.BaseStream-method-onClose' class='name expandable'>onClose</a>( <span class='pre'>closeHandler</span> ) : Object {java.util.stream.BaseStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an equivalent stream with an additional close handler. ...</div><div class='long'><p>Returns an equivalent stream with an additional close handler.  Close\n handlers are run when the <a href=\"#!/api/java.util.stream.BaseStream-method-close\" rel=\"java.util.stream.BaseStream-method-close\" class=\"docClass\">close</a>() method\n is called on the stream, and are executed in the order they were\n added.  All close handlers are run, even if earlier close handlers throw\n exceptions.  If any close handler throws an exception, the first\n exception thrown will be relayed to the caller of {@code close()}, with\n any remaining exceptions added to that exception as suppressed exceptions\n (unless one of the remaining exceptions is the same exception as the\n first exception, since an exception cannot suppress itself.)  May\n return itself.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>closeHandler</span> : Object {Runnable}<div class='sub-desc'><p>A task to execute when the stream is closed</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.BaseStream}</span><div class='sub-desc'><p>a stream with a handler that is run if the stream is closed</p>\n</div></li></ul></div></div></div><div id='method-parallel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.BaseStream'>java.util.stream.BaseStream</span><br/><a href='source/BaseStream.html#java-util-stream-BaseStream-method-parallel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.BaseStream-method-parallel' class='name expandable'>parallel</a>( <span class='pre'></span> ) : Object {java.util.stream.BaseStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an equivalent stream that is parallel. ...</div><div class='long'><p>Returns an equivalent stream that is parallel.  May return\n itself, either because the stream was already parallel, or because\n the underlying stream state was modified to be parallel.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.BaseStream}</span><div class='sub-desc'><p>a parallel stream</p>\n</div></li></ul></div></div></div><div id='method-sequential' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.BaseStream'>java.util.stream.BaseStream</span><br/><a href='source/BaseStream.html#java-util-stream-BaseStream-method-sequential' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.BaseStream-method-sequential' class='name expandable'>sequential</a>( <span class='pre'></span> ) : Object {java.util.stream.BaseStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an equivalent stream that is sequential. ...</div><div class='long'><p>Returns an equivalent stream that is sequential.  May return\n itself, either because the stream was already sequential, or because\n the underlying stream state was modified to be sequential.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.BaseStream}</span><div class='sub-desc'><p>a sequential stream</p>\n</div></li></ul></div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.BaseStream'>java.util.stream.BaseStream</span><br/><a href='source/BaseStream.html#java-util-stream-BaseStream-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.BaseStream-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> ) : Object {java.util.Spliterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a spliterator for the elements of this stream. ...</div><div class='long'><p>Returns a spliterator for the elements of this stream.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator}</span><div class='sub-desc'><p>the element spliterator for this stream</p>\n</div></li></ul></div></div></div><div id='method-unordered' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.BaseStream'>java.util.stream.BaseStream</span><br/><a href='source/BaseStream.html#java-util-stream-BaseStream-method-unordered' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.BaseStream-method-unordered' class='name expandable'>unordered</a>( <span class='pre'></span> ) : Object {java.util.stream.BaseStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an equivalent stream that is\n unordered. ...</div><div class='long'><p>Returns an equivalent stream that is\n <a href=\"package-summary.html#Ordering\">unordered</a>.  May return\n itself, either because the stream was already unordered, or because\n the underlying stream state was modified to be unordered.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.BaseStream}</span><div class='sub-desc'><p>an unordered stream</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});