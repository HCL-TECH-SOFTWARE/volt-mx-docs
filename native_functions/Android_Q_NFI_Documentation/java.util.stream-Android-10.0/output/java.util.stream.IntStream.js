Ext.data.JsonP.java_util_stream_IntStream({"tagname":"class","name":"java.util.stream.IntStream","autodetected":{},"files":[{"filename":"IntStream.js","href":"IntStream.html#java-util-stream-IntStream"}],"since":"1.8","members":[{"name":"allMatch","tagname":"method","owner":"java.util.stream.IntStream","id":"method-allMatch","meta":{}},{"name":"anyMatch","tagname":"method","owner":"java.util.stream.IntStream","id":"method-anyMatch","meta":{}},{"name":"asDoubleStream","tagname":"method","owner":"java.util.stream.IntStream","id":"method-asDoubleStream","meta":{}},{"name":"asLongStream","tagname":"method","owner":"java.util.stream.IntStream","id":"method-asLongStream","meta":{}},{"name":"average","tagname":"method","owner":"java.util.stream.IntStream","id":"method-average","meta":{}},{"name":"boxed","tagname":"method","owner":"java.util.stream.IntStream","id":"method-boxed","meta":{}},{"name":"builder","tagname":"method","owner":"java.util.stream.IntStream","id":"method-builder","meta":{}},{"name":"collect","tagname":"method","owner":"java.util.stream.IntStream","id":"method-collect","meta":{}},{"name":"concat","tagname":"method","owner":"java.util.stream.IntStream","id":"method-concat","meta":{}},{"name":"count","tagname":"method","owner":"java.util.stream.IntStream","id":"method-count","meta":{}},{"name":"distinct","tagname":"method","owner":"java.util.stream.IntStream","id":"method-distinct","meta":{}},{"name":"empty","tagname":"method","owner":"java.util.stream.IntStream","id":"method-empty","meta":{}},{"name":"filter","tagname":"method","owner":"java.util.stream.IntStream","id":"method-filter","meta":{}},{"name":"findAny","tagname":"method","owner":"java.util.stream.IntStream","id":"method-findAny","meta":{}},{"name":"findFirst","tagname":"method","owner":"java.util.stream.IntStream","id":"method-findFirst","meta":{}},{"name":"flatMap","tagname":"method","owner":"java.util.stream.IntStream","id":"method-flatMap","meta":{}},{"name":"forEach","tagname":"method","owner":"java.util.stream.IntStream","id":"method-forEach","meta":{}},{"name":"forEachOrdered","tagname":"method","owner":"java.util.stream.IntStream","id":"method-forEachOrdered","meta":{}},{"name":"generate","tagname":"method","owner":"java.util.stream.IntStream","id":"method-generate","meta":{}},{"name":"iterate","tagname":"method","owner":"java.util.stream.IntStream","id":"method-iterate","meta":{}},{"name":"iterator","tagname":"method","owner":"java.util.stream.IntStream","id":"method-iterator","meta":{}},{"name":"limit","tagname":"method","owner":"java.util.stream.IntStream","id":"method-limit","meta":{}},{"name":"map","tagname":"method","owner":"java.util.stream.IntStream","id":"method-map","meta":{}},{"name":"mapToDouble","tagname":"method","owner":"java.util.stream.IntStream","id":"method-mapToDouble","meta":{}},{"name":"mapToLong","tagname":"method","owner":"java.util.stream.IntStream","id":"method-mapToLong","meta":{}},{"name":"mapToObj","tagname":"method","owner":"java.util.stream.IntStream","id":"method-mapToObj","meta":{}},{"name":"max","tagname":"method","owner":"java.util.stream.IntStream","id":"method-max","meta":{}},{"name":"min","tagname":"method","owner":"java.util.stream.IntStream","id":"method-min","meta":{}},{"name":"noneMatch","tagname":"method","owner":"java.util.stream.IntStream","id":"method-noneMatch","meta":{}},{"name":"of","tagname":"method","owner":"java.util.stream.IntStream","id":"method-of","meta":{}},{"name":"parallel","tagname":"method","owner":"java.util.stream.IntStream","id":"method-parallel","meta":{}},{"name":"peek","tagname":"method","owner":"java.util.stream.IntStream","id":"method-peek","meta":{}},{"name":"range","tagname":"method","owner":"java.util.stream.IntStream","id":"method-range","meta":{}},{"name":"rangeClosed","tagname":"method","owner":"java.util.stream.IntStream","id":"method-rangeClosed","meta":{}},{"name":"reduce","tagname":"method","owner":"java.util.stream.IntStream","id":"method-reduce","meta":{}},{"name":"sequential","tagname":"method","owner":"java.util.stream.IntStream","id":"method-sequential","meta":{}},{"name":"skip","tagname":"method","owner":"java.util.stream.IntStream","id":"method-skip","meta":{}},{"name":"sorted","tagname":"method","owner":"java.util.stream.IntStream","id":"method-sorted","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.stream.IntStream","id":"method-spliterator","meta":{}},{"name":"sum","tagname":"method","owner":"java.util.stream.IntStream","id":"method-sum","meta":{}},{"name":"summaryStatistics","tagname":"method","owner":"java.util.stream.IntStream","id":"method-summaryStatistics","meta":{}},{"name":"toArray","tagname":"method","owner":"java.util.stream.IntStream","id":"method-toArray","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.IntStream","short_doc":"implements java.util.stream.BaseStream\n\n A sequence of primitive int-valued elements supporting sequential and parall...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/IntStream.html#java-util-stream-IntStream' target='_blank'>IntStream.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.stream.BaseStream\" rel=\"java.util.stream.BaseStream\" class=\"docClass\">java.util.stream.BaseStream</a></p>\n\n<p> A sequence of primitive int-valued elements supporting sequential and parallel\n aggregate operations.  This is the {@code int} primitive specialization of\n <a href=\"#!/api/java.util.stream.Stream\" rel=\"java.util.stream.Stream\" class=\"docClass\">java.util.stream.Stream</a>.</p>\n\n<p> <p>The following example illustrates an aggregate operation using\n <a href=\"#!/api/java.util.stream.Stream\" rel=\"java.util.stream.Stream\" class=\"docClass\">java.util.stream.Stream</a> and <a href=\"#!/api/java.util.stream.IntStream\" rel=\"java.util.stream.IntStream\" class=\"docClass\">java.util.stream.IntStream</a>, computing the sum of the weights of the\n red widgets:</p>\n\n<p> <pre>{@code\n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n }</pre></p>\n\n<p> See the class documentation for <a href=\"#!/api/java.util.stream.Stream\" rel=\"java.util.stream.Stream\" class=\"docClass\">java.util.stream.Stream</a> and the package documentation\n for <a href=\"package-summary.html\">java.util.stream</a> for additional\n specification of streams, stream operations, stream pipelines, and\n parallelism.</p>\n\n<p> @see Stream\n @see <a href=\"package-summary.html\">java.util.stream</a></p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-allMatch' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-allMatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-allMatch' class='name expandable'>allMatch</a>( <span class='pre'>predicate, predicate</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether all elements of this stream match the provided predicate. ...</div><div class='long'><p>Returns whether all elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then {@code true} is\n returned and the predicate is not evaluated.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {IntPredicate}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li><li><span class='pre'>predicate</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if either all elements of the stream match the\n provided predicate or the stream is empty, otherwise {@code false}</p>\n</div></li></ul></div></div></div><div id='method-anyMatch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-anyMatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-anyMatch' class='name expandable'>anyMatch</a>( <span class='pre'>predicate, predicate</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether any elements of this stream match the provided\n predicate. ...</div><div class='long'><p>Returns whether any elements of this stream match the provided\n predicate.  May not evaluate the predicate on all elements if not\n necessary for determining the result.  If the stream is empty then\n {@code false} is returned and the predicate is not evaluated.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {IntPredicate}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li><li><span class='pre'>predicate</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if any elements of the stream match the provided\n predicate, otherwise {@code false}</p>\n</div></li></ul></div></div></div><div id='method-asDoubleStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-asDoubleStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-asDoubleStream' class='name expandable'>asDoubleStream</a>( <span class='pre'></span> ) : Object {java.util.stream.DoubleStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code DoubleStream} consisting of the elements of this stream,\n converted to {@code double}. ...</div><div class='long'><p>Returns a {@code DoubleStream} consisting of the elements of this stream,\n converted to {@code double}.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.DoubleStream}</span><div class='sub-desc'><p>a {@code DoubleStream} consisting of the elements of this stream,\n converted to {@code double}</p>\n</div></li></ul></div></div></div><div id='method-asLongStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-asLongStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-asLongStream' class='name expandable'>asLongStream</a>( <span class='pre'></span> ) : Object {java.util.stream.LongStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code LongStream} consisting of the elements of this stream,\n converted to {@code long}. ...</div><div class='long'><p>Returns a {@code LongStream} consisting of the elements of this stream,\n converted to {@code long}.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.LongStream}</span><div class='sub-desc'><p>a {@code LongStream} consisting of the elements of this stream,\n converted to {@code long}</p>\n</div></li></ul></div></div></div><div id='method-average' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-average' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-average' class='name expandable'>average</a>( <span class='pre'></span> ) : Object {java.util.OptionalDouble}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an {@code OptionalDouble} describing the arithmetic mean of elements of\n this stream, or an empty optional if...</div><div class='long'><p>Returns an {@code OptionalDouble} describing the arithmetic mean of elements of\n this stream, or an empty optional if this stream is empty.  This is a\n special case of a\n <a href=\"package-summary.html#Reduction\">reduction</a>.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.OptionalDouble}</span><div class='sub-desc'><p>an {@code OptionalDouble} containing the average element of this\n stream, or an empty optional if the stream is empty</p>\n</div></li></ul></div></div></div><div id='method-boxed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-boxed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-boxed' class='name expandable'>boxed</a>( <span class='pre'></span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Stream} consisting of the elements of this stream,\n each boxed to an {@code Integer}. ...</div><div class='long'><p>Returns a {@code Stream} consisting of the elements of this stream,\n each boxed to an {@code Integer}.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>a {@code Stream} consistent of the elements of this stream,\n each boxed to an {@code Integer}</p>\n</div></li></ul></div></div></div><div id='method-builder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-builder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-builder' class='name expandable'>builder</a>( <span class='pre'></span> ) : Object {java.util.stream.IntStream.Builder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a builder for an {@code IntStream}. ...</div><div class='long'><p>Returns a builder for an {@code IntStream}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream.Builder}</span><div class='sub-desc'><p>a stream builder</p>\n</div></li></ul></div></div></div><div id='method-collect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-collect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-collect' class='name expandable'>collect</a>( <span class='pre'>supplier, accumulator, combiner, combiner</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs a mutable\n reduction operation on the elements of this stream. ...</div><div class='long'><p>Performs a <a href=\"package-summary.html#MutableReduction\">mutable\n reduction</a> operation on the elements of this stream.  A mutable\n reduction is one in which the reduced value is a mutable result container,\n such as an {@code ArrayList}, and elements are incorporated by updating\n the state of the result rather than by replacing the result.  This\n produces a result equivalent to:\n <pre>{@code\n     R result = supplier.get();\n     for (int element : this stream)\n         accumulator.accept(result, element);\n     return result;\n }</pre></p>\n\n<p> <p>Like IntBinaryOperator), {@code collect} operations\n can be parallelized without requiring additional synchronization.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>supplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a function that creates a new result container. For a\n                 parallel execution, this function may be called\n                 multiple times and must return a fresh value each time.</p>\n</div></li><li><span class='pre'>accumulator</span> : Object {java.util.function.ObjIntConsumer}<div class='sub-desc'><p>an <a href=\"package-summary.html#Associativity\">associative</a>,\n                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n                    function for incorporating an additional element into a result</p>\n</div></li><li><span class='pre'>combiner</span> : Object {java.util.function.BiConsumer}<div class='sub-desc'><p>an <a href=\"package-summary.html#Associativity\">associative</a>,\n                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n                    function for combining two values, which must be\n                    compatible with the accumulator function</p>\n</div></li><li><span class='pre'>combiner</span> : Object<div class='sub-desc'><p>an <a href=\"package-summary.html#Associativity\">associative</a>,\n                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n                    function for combining two values, which must be\n                    compatible with the accumulator function</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the result of the reduction\n@see Stream#collect(Supplier, BiConsumer, BiConsumer)</p>\n</div></li></ul></div></div></div><div id='method-concat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-concat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-concat' class='name expandable'>concat</a>( <span class='pre'>a, b, b</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the ele...</div><div class='long'><p>Creates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the elements of the\n second stream.  The resulting stream is ordered if both\n of the input streams are ordered, and parallel if either of the input\n streams is parallel.  When the resulting stream is closed, the close\n handlers for both input streams are invoked.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Object {IntStream}<div class='sub-desc'><p>the first stream</p>\n</div></li><li><span class='pre'>b</span> : Object {IntStream}<div class='sub-desc'><p>the second stream</p>\n</div></li><li><span class='pre'>b</span> : Object<div class='sub-desc'><p>the second stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the concatenation of the two input streams</p>\n</div></li></ul></div></div></div><div id='method-count' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-count' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-count' class='name expandable'>count</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the count of elements in this stream. ...</div><div class='long'><p>Returns the count of elements in this stream.  This is a special case of\n a <a href=\"package-summary.html#Reduction\">reduction</a> and is\n equivalent to:\n <pre>{@code\n     return mapToLong(e -> 1L).sum();\n }</pre></p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the count of elements in this stream</p>\n</div></li></ul></div></div></div><div id='method-distinct' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-distinct' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-distinct' class='name expandable'>distinct</a>( <span class='pre'></span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the distinct elements of this stream. ...</div><div class='long'><p>Returns a stream consisting of the distinct elements of this stream.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n intermediate operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-empty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-empty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-empty' class='name expandable'>empty</a>( <span class='pre'></span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an empty sequential {@code IntStream}. ...</div><div class='long'><p>Returns an empty sequential {@code IntStream}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>an empty sequential stream</p>\n</div></li></ul></div></div></div><div id='method-filter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-filter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-filter' class='name expandable'>filter</a>( <span class='pre'>predicate</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the elements of this stream that match\n the given predicate. ...</div><div class='long'><p>Returns a stream consisting of the elements of this stream that match\n the given predicate.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {IntPredicate}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to each element to determine if it\n                  should be included</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-findAny' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-findAny' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-findAny' class='name expandable'>findAny</a>( <span class='pre'></span> ) : Object {java.util.OptionalInt}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an OptionalInt describing some element of the stream, or\n an empty {@code OptionalInt} if the stream is empty. ...</div><div class='long'><p>Returns an OptionalInt describing some element of the stream, or\n an empty {@code OptionalInt} if the stream is empty.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n\n<p> <p>The behavior of this operation is explicitly nondeterministic; it is\n free to select any element in the stream.  This is to allow for maximal\n performance in parallel operations; the cost is that multiple invocations\n on the same source may not return the same result.  (If a stable result\n is desired, use <a href=\"#!/api/java.util.stream.IntStream-method-findFirst\" rel=\"java.util.stream.IntStream-method-findFirst\" class=\"docClass\">findFirst</a>() instead.)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.OptionalInt}</span><div class='sub-desc'><p>an {@code OptionalInt} describing some element of this stream, or\n an empty {@code OptionalInt} if the stream is empty\n@see <a href=\"#!/api/java.util.stream.IntStream-method-findFirst\" rel=\"java.util.stream.IntStream-method-findFirst\" class=\"docClass\">findFirst</a>()</p>\n</div></li></ul></div></div></div><div id='method-findFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-findFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-findFirst' class='name expandable'>findFirst</a>( <span class='pre'></span> ) : Object {java.util.OptionalInt}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an OptionalInt describing the first element of this\n stream, or an empty {@code OptionalInt} if the stream is...</div><div class='long'><p>Returns an OptionalInt describing the first element of this\n stream, or an empty {@code OptionalInt} if the stream is empty.  If the\n stream has no encounter order, then any element may be returned.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.OptionalInt}</span><div class='sub-desc'><p>an {@code OptionalInt} describing the first element of this stream,\n or an empty {@code OptionalInt} if the stream is empty</p>\n</div></li></ul></div></div></div><div id='method-flatMap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-flatMap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-flatMap' class='name expandable'>flatMap</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped st...</div><div class='long'><p>Returns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped stream produced by applying\n the provided mapping function to each element.  Each mapped stream is\n closed after its contents\n have been placed into this stream.  (If a mapped stream is {@code null}\n an empty stream is used, instead.)</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element which produces an\n               {@code IntStream} of new values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream\n@see Stream#flatMap(Function)</p>\n</div></li></ul></div></div></div><div id='method-forEach' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-forEach' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-forEach' class='name expandable'>forEach</a>( <span class='pre'>action</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs an action for each element of this stream. ...</div><div class='long'><p>Performs an action for each element of this stream.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n\n<p> <p>For parallel stream pipelines, this operation does <em>not</em>\n guarantee to respect the encounter order of the stream, as doing so\n would sacrifice the benefit of parallelism.  For any given element, the\n action may be performed at whatever time and in whatever thread the\n library chooses.  If the action accesses shared state, it is\n responsible for providing the required synchronization.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {IntConsumer}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">\n               non-interfering</a> action to perform on the elements</p>\n</div></li></ul></div></div></div><div id='method-forEachOrdered' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-forEachOrdered' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-forEachOrdered' class='name expandable'>forEachOrdered</a>( <span class='pre'>action</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs an action for each element of this stream, guaranteeing that\n each element is processed in encounter order f...</div><div class='long'><p>Performs an action for each element of this stream, guaranteeing that\n each element is processed in encounter order for streams that have a\n defined encounter order.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {IntConsumer}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">\n               non-interfering</a> action to perform on the elements\n@see <a href=\"#!/api/java.util.stream.IntStream-method-forEach\" rel=\"java.util.stream.IntStream-method-forEach\" class=\"docClass\">forEach</a>(IntConsumer)</p>\n</div></li></ul></div></div></div><div id='method-generate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-generate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-generate' class='name expandable'>generate</a>( <span class='pre'>s</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an infinite sequential unordered stream where each element is\n generated by the provided {@code IntSupplier}. ...</div><div class='long'><p>Returns an infinite sequential unordered stream where each element is\n generated by the provided {@code IntSupplier}.  This is suitable for\n generating constant streams, streams of random elements, etc.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>s</span> : Object {IntSupplier}<div class='sub-desc'><p>the {@code IntSupplier} for generated elements</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>a new infinite sequential unordered {@code IntStream}</p>\n</div></li></ul></div></div></div><div id='method-iterate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-iterate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-iterate' class='name expandable'>iterate</a>( <span class='pre'>seed, f</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an infinite sequential ordered {@code IntStream} produced by iterative\n application of a function {@code f} t...</div><div class='long'><p>Returns an infinite sequential ordered {@code IntStream} produced by iterative\n application of a function {@code f} to an initial element {@code seed},\n producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n {@code f(f(seed))}, etc.</p>\n\n<p> <p>The first element (position {@code 0}) in the {@code IntStream} will be\n the provided {@code seed}.  For {@code n > 0}, the element at position\n {@code n}, will be the result of applying the function {@code f} to the\n element at position {@code n - 1}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>seed</span> : Number<div class='sub-desc'><p>the initial element</p>\n</div></li><li><span class='pre'>f</span> : Object {IntUnaryOperator}<div class='sub-desc'><p>a function to be applied to to the previous element to produce\n          a new element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>A new sequential {@code IntStream}</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-limit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-limit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-limit' class='name expandable'>limit</a>( <span class='pre'>maxSize, maxSize</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the elements of this stream, truncated\n to be no longer than {@code maxSize} in length. ...</div><div class='long'><p>Returns a stream consisting of the elements of this stream, truncated\n to be no longer than {@code maxSize} in length.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n stateful intermediate operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>maxSize</span> : Number<div class='sub-desc'><p>the number of elements the stream should be limited to</p>\n</div></li><li><span class='pre'>maxSize</span> : Object<div class='sub-desc'><p>the number of elements the stream should be limited to</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code maxSize} is negative</p>\n</div></li></ul></div></div></div><div id='method-map' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-map' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-map' class='name expandable'>map</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the results of applying the given\n function to the elements of this stream. ...</div><div class='long'><p>Returns a stream consisting of the results of applying the given\n function to the elements of this stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {IntUnaryOperator}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-mapToDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-mapToDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-mapToDouble' class='name expandable'>mapToDouble</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.DoubleStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code DoubleStream} consisting of the results of applying the\n given function to the elements of this stream. ...</div><div class='long'><p>Returns a {@code DoubleStream} consisting of the results of applying the\n given function to the elements of this stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {IntToDoubleFunction}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.DoubleStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-mapToLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-mapToLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-mapToLong' class='name expandable'>mapToLong</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.LongStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code LongStream} consisting of the results of applying the\n given function to the elements of this stream. ...</div><div class='long'><p>Returns a {@code LongStream} consisting of the results of applying the\n given function to the elements of this stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {IntToLongFunction}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.LongStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-mapToObj' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-mapToObj' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-mapToObj' class='name expandable'>mapToObj</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object-valued {@code Stream} consisting of the results of\n applying the given function to the elements of ...</div><div class='long'><p>Returns an object-valued {@code Stream} consisting of the results of\n applying the given function to the elements of this stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">\n     intermediate operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-max' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-max' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-max' class='name expandable'>max</a>( <span class='pre'></span> ) : Object {java.util.OptionalInt}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an {@code OptionalInt} describing the maximum element of this\n stream, or an empty optional if this stream is...</div><div class='long'><p>Returns an {@code OptionalInt} describing the maximum element of this\n stream, or an empty optional if this stream is empty.  This is a special\n case of a <a href=\"package-summary.html#Reduction\">reduction</a>\n and is equivalent to:\n <pre>{@code\n     return reduce(Integer::max);\n }</pre></p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.OptionalInt}</span><div class='sub-desc'><p>an {@code OptionalInt} containing the maximum element of this\n stream, or an empty {@code OptionalInt} if the stream is empty</p>\n</div></li></ul></div></div></div><div id='method-min' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-min' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-min' class='name expandable'>min</a>( <span class='pre'></span> ) : Object {java.util.OptionalInt}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an {@code OptionalInt} describing the minimum element of this\n stream, or an empty optional if this stream is...</div><div class='long'><p>Returns an {@code OptionalInt} describing the minimum element of this\n stream, or an empty optional if this stream is empty.  This is a special\n case of a <a href=\"package-summary.html#Reduction\">reduction</a>\n and is equivalent to:\n <pre>{@code\n     return reduce(Integer::min);\n }</pre></p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.OptionalInt}</span><div class='sub-desc'><p>an {@code OptionalInt} containing the minimum element of this\n stream, or an empty {@code OptionalInt} if the stream is empty</p>\n</div></li></ul></div></div></div><div id='method-noneMatch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-noneMatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-noneMatch' class='name expandable'>noneMatch</a>( <span class='pre'>predicate, predicate</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether no elements of this stream match the provided predicate. ...</div><div class='long'><p>Returns whether no elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then {@code true} is\n returned and the predicate is not evaluated.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {IntPredicate}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li><li><span class='pre'>predicate</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if either no elements of the stream match the\n provided predicate or the stream is empty, otherwise {@code false}</p>\n</div></li></ul></div></div></div><div id='method-of' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-of' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-of' class='name expandable'>of</a>( <span class='pre'>values</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a sequential ordered stream whose elements are the specified values. ...</div><div class='long'><p>Returns a sequential ordered stream whose elements are the specified values.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>values</span> : Object {int[]}<div class='sub-desc'><p>the elements of the new stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-parallel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-parallel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-parallel' class='name expandable'>parallel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-peek' class='name expandable'>peek</a>( <span class='pre'>action, action</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the elements of this stream, additionally\n performing the provided action on each elem...</div><div class='long'><p>Returns a stream consisting of the elements of this stream, additionally\n performing the provided action on each element as elements are consumed\n from the resulting stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n\n<p> <p>For parallel stream pipelines, the action may be called at\n whatever time and in whatever thread the element is made available by the\n upstream operation.  If the action modifies shared state,\n it is responsible for providing the required synchronization.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {IntConsumer}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">\n               non-interfering</a> action to perform on the elements as\n               they are consumed from the stream</p>\n</div></li><li><span class='pre'>action</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">\n               non-interfering</a> action to perform on the elements as\n               they are consumed from the stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-range' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-range' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-range' class='name expandable'>range</a>( <span class='pre'>startInclusive, endExclusive, endExclusive</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a sequential ordered {@code IntStream} from {@code startInclusive}\n (inclusive) to {@code endExclusive} (excl...</div><div class='long'><p>Returns a sequential ordered {@code IntStream} from {@code startInclusive}\n (inclusive) to {@code endExclusive} (exclusive) by an incremental step of\n {@code 1}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>startInclusive</span> : Number<div class='sub-desc'><p>the (inclusive) initial value</p>\n</div></li><li><span class='pre'>endExclusive</span> : Number<div class='sub-desc'><p>the exclusive upper bound</p>\n</div></li><li><span class='pre'>endExclusive</span> : Object<div class='sub-desc'><p>the exclusive upper bound</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>a sequential {@code IntStream} for the range of {@code int}\n         elements</p>\n</div></li></ul></div></div></div><div id='method-rangeClosed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-rangeClosed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-rangeClosed' class='name expandable'>rangeClosed</a>( <span class='pre'>startInclusive, endInclusive, endInclusive</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a sequential ordered {@code IntStream} from {@code startInclusive}\n (inclusive) to {@code endInclusive} (incl...</div><div class='long'><p>Returns a sequential ordered {@code IntStream} from {@code startInclusive}\n (inclusive) to {@code endInclusive} (inclusive) by an incremental step of\n {@code 1}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>startInclusive</span> : Number<div class='sub-desc'><p>the (inclusive) initial value</p>\n</div></li><li><span class='pre'>endInclusive</span> : Number<div class='sub-desc'><p>the inclusive upper bound</p>\n</div></li><li><span class='pre'>endInclusive</span> : Object<div class='sub-desc'><p>the inclusive upper bound</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>a sequential {@code IntStream} for the range of {@code int}\n         elements</p>\n</div></li></ul></div></div></div><div id='method-reduce' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-reduce' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-reduce' class='name expandable'>reduce</a>( <span class='pre'>op</span> ) : Object {java.util.OptionalInt}<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs a reduction on the\n elements of this stream, using an\n associative accumulation\n function, and returns an {@...</div><div class='long'><p>Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the\n elements of this stream, using an\n <a href=\"package-summary.html#Associativity\">associative</a> accumulation\n function, and returns an {@code OptionalInt} describing the reduced value,\n if any. This is equivalent to:\n <pre>{@code\n     boolean foundAny = false;\n     int result = null;\n     for (int element : this stream) {\n         if (!foundAny) {\n             foundAny = true;\n             result = element;\n         }\n         else\n             result = accumulator.applyAsInt(result, element);\n     }\n     return foundAny ? OptionalInt.of(result) : OptionalInt.empty();\n }</pre></p>\n\n<p> but is not constrained to execute sequentially.</p>\n\n<p> <p>The {@code accumulator} function must be an\n <a href=\"package-summary.html#Associativity\">associative</a> function.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>op</span> : Object {IntBinaryOperator}<div class='sub-desc'><p>an <a href=\"package-summary.html#Associativity\">associative</a>,\n           <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n           <a href=\"package-summary.html#Statelessness\">stateless</a>\n           function for combining two values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.OptionalInt}</span><div class='sub-desc'><p>the result of the reduction\n@see <a href=\"#!/api/java.util.stream.IntStream-method-reduce\" rel=\"java.util.stream.IntStream-method-reduce\" class=\"docClass\">reduce</a>(int, IntBinaryOperator)</p>\n</div></li></ul></div></div></div><div id='method-sequential' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-sequential' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-sequential' class='name expandable'>sequential</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-skip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-skip' class='name expandable'>skip</a>( <span class='pre'>n, n</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the remaining elements of this stream\n after discarding the first {@code n} elements o...</div><div class='long'><p>Returns a stream consisting of the remaining elements of this stream\n after discarding the first {@code n} elements of the stream.\n If this stream contains fewer than {@code n} elements then an\n empty stream will be returned.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n intermediate operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>the number of leading elements to skip</p>\n</div></li><li><span class='pre'>n</span> : Object<div class='sub-desc'><p>the number of leading elements to skip</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code n} is negative</p>\n</div></li></ul></div></div></div><div id='method-sorted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-sorted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-sorted' class='name expandable'>sorted</a>( <span class='pre'></span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the elements of this stream in sorted\n order. ...</div><div class='long'><p>Returns a stream consisting of the elements of this stream in sorted\n order.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n intermediate operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-sum' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-sum' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-sum' class='name expandable'>sum</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the sum of elements in this stream. ...</div><div class='long'><p>Returns the sum of elements in this stream.  This is a special case\n of a <a href=\"package-summary.html#Reduction\">reduction</a>\n and is equivalent to:\n <pre>{@code\n     return reduce(0, Integer::sum);\n }</pre></p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the sum of elements in this stream</p>\n</div></li></ul></div></div></div><div id='method-summaryStatistics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-summaryStatistics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-summaryStatistics' class='name expandable'>summaryStatistics</a>( <span class='pre'></span> ) : Object {java.util.IntSummaryStatistics}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an {@code IntSummaryStatistics} describing various\n summary data about the elements of this stream. ...</div><div class='long'><p>Returns an {@code IntSummaryStatistics} describing various\n summary data about the elements of this stream.  This is a special\n case of a <a href=\"package-summary.html#Reduction\">reduction</a>.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.IntSummaryStatistics}</span><div class='sub-desc'><p>an {@code IntSummaryStatistics} describing various summary data\n about the elements of this stream</p>\n</div></li></ul></div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.IntStream'>java.util.stream.IntStream</span><br/><a href='source/IntStream.html#java-util-stream-IntStream-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.IntStream-method-toArray' class='name expandable'>toArray</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an array containing the elements of this stream. ...</div><div class='long'><p>Returns an array containing the elements of this stream.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>an array containing the elements of this stream</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});