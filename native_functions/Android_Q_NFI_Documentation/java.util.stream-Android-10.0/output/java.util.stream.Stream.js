Ext.data.JsonP.java_util_stream_Stream({"tagname":"class","name":"java.util.stream.Stream","autodetected":{},"files":[{"filename":"Stream.js","href":"Stream.html#java-util-stream-Stream"}],"params":[{"tagname":"params","doc":"<p><T> the type of the stream elements\n @see IntStream\n @see LongStream\n @see DoubleStream\n @see <a href=\"package-summary.html\">java.util.stream</a></T></p>\n"}],"since":"1.8","members":[{"name":"allMatch","tagname":"method","owner":"java.util.stream.Stream","id":"method-allMatch","meta":{}},{"name":"anyMatch","tagname":"method","owner":"java.util.stream.Stream","id":"method-anyMatch","meta":{}},{"name":"builder","tagname":"method","owner":"java.util.stream.Stream","id":"method-builder","meta":{}},{"name":"collect","tagname":"method","owner":"java.util.stream.Stream","id":"method-collect","meta":{}},{"name":"concat","tagname":"method","owner":"java.util.stream.Stream","id":"method-concat","meta":{}},{"name":"count","tagname":"method","owner":"java.util.stream.Stream","id":"method-count","meta":{}},{"name":"distinct","tagname":"method","owner":"java.util.stream.Stream","id":"method-distinct","meta":{}},{"name":"empty","tagname":"method","owner":"java.util.stream.Stream","id":"method-empty","meta":{}},{"name":"filter","tagname":"method","owner":"java.util.stream.Stream","id":"method-filter","meta":{}},{"name":"findAny","tagname":"method","owner":"java.util.stream.Stream","id":"method-findAny","meta":{}},{"name":"findFirst","tagname":"method","owner":"java.util.stream.Stream","id":"method-findFirst","meta":{}},{"name":"flatMap","tagname":"method","owner":"java.util.stream.Stream","id":"method-flatMap","meta":{}},{"name":"flatMapToDouble","tagname":"method","owner":"java.util.stream.Stream","id":"method-flatMapToDouble","meta":{}},{"name":"flatMapToInt","tagname":"method","owner":"java.util.stream.Stream","id":"method-flatMapToInt","meta":{}},{"name":"flatMapToLong","tagname":"method","owner":"java.util.stream.Stream","id":"method-flatMapToLong","meta":{}},{"name":"forEach","tagname":"method","owner":"java.util.stream.Stream","id":"method-forEach","meta":{}},{"name":"forEachOrdered","tagname":"method","owner":"java.util.stream.Stream","id":"method-forEachOrdered","meta":{}},{"name":"generate","tagname":"method","owner":"java.util.stream.Stream","id":"method-generate","meta":{}},{"name":"iterate","tagname":"method","owner":"java.util.stream.Stream","id":"method-iterate","meta":{}},{"name":"limit","tagname":"method","owner":"java.util.stream.Stream","id":"method-limit","meta":{}},{"name":"map","tagname":"method","owner":"java.util.stream.Stream","id":"method-map","meta":{}},{"name":"mapToDouble","tagname":"method","owner":"java.util.stream.Stream","id":"method-mapToDouble","meta":{}},{"name":"mapToInt","tagname":"method","owner":"java.util.stream.Stream","id":"method-mapToInt","meta":{}},{"name":"mapToLong","tagname":"method","owner":"java.util.stream.Stream","id":"method-mapToLong","meta":{}},{"name":"max","tagname":"method","owner":"java.util.stream.Stream","id":"method-max","meta":{}},{"name":"min","tagname":"method","owner":"java.util.stream.Stream","id":"method-min","meta":{}},{"name":"noneMatch","tagname":"method","owner":"java.util.stream.Stream","id":"method-noneMatch","meta":{}},{"name":"of","tagname":"method","owner":"java.util.stream.Stream","id":"method-of","meta":{}},{"name":"peek","tagname":"method","owner":"java.util.stream.Stream","id":"method-peek","meta":{}},{"name":"reduce","tagname":"method","owner":"java.util.stream.Stream","id":"method-reduce","meta":{}},{"name":"skip","tagname":"method","owner":"java.util.stream.Stream","id":"method-skip","meta":{}},{"name":"sorted","tagname":"method","owner":"java.util.stream.Stream","id":"method-sorted","meta":{}},{"name":"toArray","tagname":"method","owner":"java.util.stream.Stream","id":"method-toArray","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.Stream","short_doc":"implements java.util.stream.BaseStream\n\n A sequence of elements supporting sequential and parallel aggregate\n operati...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Stream.html#java-util-stream-Stream' target='_blank'>Stream.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.stream.BaseStream\" rel=\"java.util.stream.BaseStream\" class=\"docClass\">java.util.stream.BaseStream</a></p>\n\n<p> A sequence of elements supporting sequential and parallel aggregate\n operations.  The following example illustrates an aggregate operation using\n <a href=\"#!/api/java.util.stream.Stream\" rel=\"java.util.stream.Stream\" class=\"docClass\">java.util.stream.Stream</a> and <a href=\"#!/api/java.util.stream.IntStream\" rel=\"java.util.stream.IntStream\" class=\"docClass\">java.util.stream.IntStream</a>:</p>\n\n<p> <pre>{@code\n     int sum = widgets.stream()\n                      .filter(w -> w.getColor() == RED)\n                      .mapToInt(w -> w.getWeight())\n                      .sum();\n }</pre></p>\n\n<p> In this example, {@code widgets} is a {@code Collection<Widget>}.  We create\n a stream of {@code Widget} objects via Collection.stream(),\n filter it to produce a stream containing only the red widgets, and then\n transform it into a stream of {@code int} values representing the weight of\n each red widget. Then this stream is summed to produce a total weight.</Widget></p>\n\n<p> <p>In addition to {@code Stream}, which is a stream of object references,\n there are primitive specializations for <a href=\"#!/api/java.util.stream.IntStream\" rel=\"java.util.stream.IntStream\" class=\"docClass\">java.util.stream.IntStream</a>, <a href=\"#!/api/java.util.stream.LongStream\" rel=\"java.util.stream.LongStream\" class=\"docClass\">java.util.stream.LongStream</a>,\n and <a href=\"#!/api/java.util.stream.DoubleStream\" rel=\"java.util.stream.DoubleStream\" class=\"docClass\">java.util.stream.DoubleStream</a>, all of which are referred to as \"streams\" and\n conform to the characteristics and restrictions described here.</p>\n\n<p> <p>To perform a computation, stream\n <a href=\"package-summary.html#StreamOps\">operations</a> are composed into a\n <em>stream pipeline</em>.  A stream pipeline consists of a source (which\n might be an array, a collection, a generator function, an I/O channel,\n etc), zero or more <em>intermediate operations</em> (which transform a\n stream into another stream, such as filter(Predicate)), and a\n <em>terminal operation</em> (which produces a result or side-effect, such\n as count() or forEach(Consumer)).\n Streams are lazy; computation on the source data is only performed when the\n terminal operation is initiated, and source elements are consumed only\n as needed.</p>\n\n<p> <p>Collections and streams, while bearing some superficial similarities,\n have different goals.  Collections are primarily concerned with the efficient\n management of, and access to, their elements.  By contrast, streams do not\n provide a means to directly access or manipulate their elements, and are\n instead concerned with declaratively describing their source and the\n computational operations which will be performed in aggregate on that source.\n However, if the provided stream operations do not offer the desired\n functionality, the iterator() and spliterator() operations\n can be used to perform a controlled traversal.</p>\n\n<p> <p>A stream pipeline, like the \"widgets\" example above, can be viewed as\n a <em>query</em> on the stream source.  Unless the source was explicitly\n designed for concurrent modification (such as a ConcurrentHashMap),\n unpredictable or erroneous behavior may result from modifying the stream\n source while it is being queried.</p>\n\n<p> <p>Most stream operations accept parameters that describe user-specified\n behavior, such as the lambda expression {@code w -> w.getWeight()} passed to\n {@code mapToInt} in the example above.  To preserve correct behavior,\n these <em>behavioral parameters</em>:\n <ul>\n <li>must be <a href=\"package-summary.html#NonInterference\">non-interfering</a>\n (they do not modify the stream source); and</li>\n <li>in most cases must be <a href=\"package-summary.html#Statelessness\">stateless</a>\n (their result should not depend on any state that might change during execution\n of the stream pipeline).</li>\n </ul></p>\n\n<p> <p>Such parameters are always instances of a\n <a href=\"../function/package-summary.html\">functional interface</a> such\n as java.util.function.Function, and are often lambda expressions or\n method references.  Unless otherwise specified these parameters must be\n <em>non-null</em>.</p>\n\n<p> <p>A stream should be operated on (invoking an intermediate or terminal stream\n operation) only once.  This rules out, for example, \"forked\" streams, where\n the same source feeds two or more pipelines, or multiple traversals of the\n same stream.  A stream implementation may throw IllegalStateException\n if it detects that the stream is being reused. However, since some stream\n operations may return their receiver rather than a new stream object, it may\n not be possible to detect reuse in all cases.</p>\n\n<p> <p>Streams have a close() method and implement AutoCloseable,\n but nearly all stream instances do not actually need to be closed after use.\n Generally, only streams whose source is an IO channel (such as those returned\n by Charset)) will require closing.  Most streams\n are backed by collections, arrays, or generating functions, which require no\n special resource management.  (If a stream does require closing, it can be\n declared as a resource in a {@code try}-with-resources statement.)</p>\n\n<p> <p>Stream pipelines may execute either sequentially or in\n <a href=\"package-summary.html#Parallelism\">parallel</a>.  This\n execution mode is a property of the stream.  Streams are created\n with an initial choice of sequential or parallel execution.  (For example,\n Collection.stream() creates a sequential stream,\n and Collection.parallelStream() creates\n a parallel one.)  This choice of execution mode may be modified by the\n sequential() or parallel() methods, and may be queried with\n the isParallel() method.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> the type of the stream elements\n @see IntStream\n @see LongStream\n @see DoubleStream\n @see <a href=\"package-summary.html\">java.util.stream</a></T></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-allMatch' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-allMatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-allMatch' class='name expandable'>allMatch</a>( <span class='pre'>predicate, predicate</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether all elements of this stream match the provided predicate. ...</div><div class='long'><p>Returns whether all elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then {@code true} is\n returned and the predicate is not evaluated.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {java.util.function.Predicate}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li><li><span class='pre'>predicate</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if either all elements of the stream match the\n provided predicate or the stream is empty, otherwise {@code false}</p>\n</div></li></ul></div></div></div><div id='method-anyMatch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-anyMatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-anyMatch' class='name expandable'>anyMatch</a>( <span class='pre'>predicate, predicate</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether any elements of this stream match the provided\n predicate. ...</div><div class='long'><p>Returns whether any elements of this stream match the provided\n predicate.  May not evaluate the predicate on all elements if not\n necessary for determining the result.  If the stream is empty then\n {@code false} is returned and the predicate is not evaluated.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {java.util.function.Predicate}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li><li><span class='pre'>predicate</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if any elements of the stream match the provided\n predicate, otherwise {@code false}</p>\n</div></li></ul></div></div></div><div id='method-builder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-builder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-builder' class='name expandable'>builder</a>( <span class='pre'></span> ) : Object {java.util.stream.Stream.Builder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a builder for a {@code Stream}. ...</div><div class='long'><p>Returns a builder for a {@code Stream}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> type of elements</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream.Builder}</span><div class='sub-desc'><p>a stream builder</p>\n</div></li></ul></div></div></div><div id='method-collect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-collect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-collect' class='name expandable'>collect</a>( <span class='pre'>collector, , , collector</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs a mutable\n reduction operation on the elements of this stream using a\n {@code Collector}. ...</div><div class='long'><p>Performs a <a href=\"package-summary.html#MutableReduction\">mutable\n reduction</a> operation on the elements of this stream using a\n {@code Collector}.  A {@code Collector}\n encapsulates the functions used as arguments to\n BiConsumer, BiConsumer), allowing for reuse of\n collection strategies and composition of collect operations such as\n multiple-level grouping or partitioning.</p>\n\n<p> <p>If the stream is parallel, and the {@code Collector}\n is <a href=\"#!/api/java.util.stream.Collector.Characteristics-property-CONCURRENT\" rel=\"java.util.stream.Collector.Characteristics-property-CONCURRENT\" class=\"docClass\">concurrent</a>, and\n either the stream is unordered or the collector is\n <a href=\"#!/api/java.util.stream.Collector.Characteristics-property-UNORDERED\" rel=\"java.util.stream.Collector.Characteristics-property-UNORDERED\" class=\"docClass\">unordered</a>,\n then a concurrent reduction will be performed (see <a href=\"#!/api/java.util.stream.Collector\" rel=\"java.util.stream.Collector\" class=\"docClass\">java.util.stream.Collector</a> for\n details on concurrent reduction.)</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n\n<p> <p>When executed in parallel, multiple intermediate results may be\n instantiated, populated, and merged so as to maintain isolation of\n mutable data structures.  Therefore, even when executed in parallel\n with non-thread-safe data structures (such as {@code ArrayList}), no\n additional synchronization is needed for a parallel reduction.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>collector</span> : Object {java.util.stream.Collector}<div class='sub-desc'><p>the {@code Collector} describing the reduction</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><R> the type of the result</R></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><A> the intermediate accumulation type of the {@code Collector}</A></p>\n</div></li><li><span class='pre'>collector</span> : Object<div class='sub-desc'><p>the {@code Collector} describing the reduction</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the result of the reduction\n@see <a href=\"#!/api/java.util.stream.Stream-method-collect\" rel=\"java.util.stream.Stream-method-collect\" class=\"docClass\">collect</a>(Supplier, BiConsumer, BiConsumer)\n@see Collectors</p>\n</div></li></ul></div></div></div><div id='method-concat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-concat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-concat' class='name expandable'>concat</a>( <span class='pre'>a, b, a, b</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the ele...</div><div class='long'><p>Creates a lazily concatenated stream whose elements are all the\n elements of the first stream followed by all the elements of the\n second stream.  The resulting stream is ordered if both\n of the input streams are ordered, and parallel if either of the input\n streams is parallel.  When the resulting stream is closed, the close\n handlers for both input streams are invoked.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Object {java.util.stream.Stream}<div class='sub-desc'><p>the first stream</p>\n</div></li><li><span class='pre'>b</span> : Object {java.util.stream.Stream}<div class='sub-desc'><p>the second stream</p>\n</div></li><li><span class='pre'>a</span> : Object<div class='sub-desc'><p>the first stream</p>\n</div></li><li><span class='pre'>b</span> : Object<div class='sub-desc'><p>the second stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the concatenation of the two input streams</p>\n</div></li></ul></div></div></div><div id='method-count' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-count' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-count' class='name expandable'>count</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the count of elements in this stream. ...</div><div class='long'><p>Returns the count of elements in this stream.  This is a special case of\n a <a href=\"package-summary.html#Reduction\">reduction</a> and is\n equivalent to:\n <pre>{@code\n     return mapToLong(e -> 1L).sum();\n }</pre></p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the count of elements in this stream</p>\n</div></li></ul></div></div></div><div id='method-distinct' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-distinct' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-distinct' class='name expandable'>distinct</a>( <span class='pre'></span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the distinct elements (according to\n Object.equals(Object)) of this stream. ...</div><div class='long'><p>Returns a stream consisting of the distinct elements (according to\n Object.equals(Object)) of this stream.</p>\n\n<p> <p>For ordered streams, the selection of distinct elements is stable\n (for duplicated elements, the element appearing first in the encounter\n order is preserved.)  For unordered streams, no stability guarantees\n are made.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n intermediate operation</a>.\n@apiNote Preserving stability for {@code distinct()} in parallel pipelines is\n relatively expensive (requires that the operation act as a full barrier,\n with substantial buffering overhead), and stability is often not needed.\n Using an unordered stream source (such as generate(Supplier))\n or removing the ordering constraint with unordered() may result\n in significantly more efficient execution for {@code distinct()} in parallel\n pipelines, if the semantics of your situation permit.  If consistency\n with encounter order is required, and you are experiencing poor performance\n or memory utilization with {@code distinct()} in parallel pipelines,\n switching to sequential execution with sequential() may improve\n performance.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-empty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-empty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-empty' class='name expandable'>empty</a>( <span class='pre'></span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an empty sequential {@code Stream}. ...</div><div class='long'><p>Returns an empty sequential {@code Stream}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of stream elements</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>an empty sequential stream</p>\n</div></li></ul></div></div></div><div id='method-filter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-filter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-filter' class='name expandable'>filter</a>( <span class='pre'>predicate</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the elements of this stream that match\n the given predicate. ...</div><div class='long'><p>Returns a stream consisting of the elements of this stream that match\n the given predicate.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {java.util.function.Predicate}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to each element to determine if it\n                  should be included</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-findAny' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-findAny' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-findAny' class='name expandable'>findAny</a>( <span class='pre'></span> ) : Object {java.util.Optional}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an Optional describing some element of the stream, or an\n empty {@code Optional} if the stream is empty. ...</div><div class='long'><p>Returns an Optional describing some element of the stream, or an\n empty {@code Optional} if the stream is empty.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n\n<p> <p>The behavior of this operation is explicitly nondeterministic; it is\n free to select any element in the stream.  This is to allow for maximal\n performance in parallel operations; the cost is that multiple invocations\n on the same source may not return the same result.  (If a stable result\n is desired, use <a href=\"#!/api/java.util.stream.Stream-method-findFirst\" rel=\"java.util.stream.Stream-method-findFirst\" class=\"docClass\">findFirst</a>() instead.)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Optional}</span><div class='sub-desc'><p>an {@code Optional} describing some element of this stream, or an\n empty {@code Optional} if the stream is empty</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the element selected is null\n@see <a href=\"#!/api/java.util.stream.Stream-method-findFirst\" rel=\"java.util.stream.Stream-method-findFirst\" class=\"docClass\">findFirst</a>()</p>\n</div></li></ul></div></div></div><div id='method-findFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-findFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-findFirst' class='name expandable'>findFirst</a>( <span class='pre'></span> ) : Object {java.util.Optional}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an Optional describing the first element of this stream,\n or an empty {@code Optional} if the stream is empty. ...</div><div class='long'><p>Returns an Optional describing the first element of this stream,\n or an empty {@code Optional} if the stream is empty.  If the stream has\n no encounter order, then any element may be returned.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Optional}</span><div class='sub-desc'><p>an {@code Optional} describing the first element of this stream,\n or an empty {@code Optional} if the stream is empty</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the element selected is null</p>\n</div></li></ul></div></div></div><div id='method-flatMap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-flatMap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-flatMap' class='name expandable'>flatMap</a>( <span class='pre'>mapper, , mapper</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped st...</div><div class='long'><p>Returns a stream consisting of the results of replacing each element of\n this stream with the contents of a mapped stream produced by applying\n the provided mapping function to each element.  Each mapped stream is\n closed after its contents\n have been placed into this stream.  (If a mapped stream is {@code null}\n an empty stream is used, instead.)</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element which produces a stream\n               of new values</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><R> The element type of the new stream</R></p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element which produces a stream\n               of new values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-flatMapToDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-flatMapToDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-flatMapToDouble' class='name expandable'>flatMapToDouble</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.DoubleStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an {@code DoubleStream} consisting of the results of replacing\n each element of this stream with the contents...</div><div class='long'><p>Returns an {@code DoubleStream} consisting of the results of replacing\n each element of this stream with the contents of a mapped stream produced\n by applying the provided mapping function to each element.  Each mapped\n stream is closed after its\n contents have placed been into this stream.  (If a mapped stream is\n {@code null} an empty stream is used, instead.)</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element which produces a stream\n               of new values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.DoubleStream}</span><div class='sub-desc'><p>the new stream\n@see <a href=\"#!/api/java.util.stream.Stream-method-flatMap\" rel=\"java.util.stream.Stream-method-flatMap\" class=\"docClass\">flatMap</a>(Function)</p>\n</div></li></ul></div></div></div><div id='method-flatMapToInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-flatMapToInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-flatMapToInt' class='name expandable'>flatMapToInt</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an {@code IntStream} consisting of the results of replacing each\n element of this stream with the contents of...</div><div class='long'><p>Returns an {@code IntStream} consisting of the results of replacing each\n element of this stream with the contents of a mapped stream produced by\n applying the provided mapping function to each element.  Each mapped\n stream is closed after its\n contents have been placed into this stream.  (If a mapped stream is\n {@code null} an empty stream is used, instead.)</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element which produces a stream\n               of new values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream\n@see <a href=\"#!/api/java.util.stream.Stream-method-flatMap\" rel=\"java.util.stream.Stream-method-flatMap\" class=\"docClass\">flatMap</a>(Function)</p>\n</div></li></ul></div></div></div><div id='method-flatMapToLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-flatMapToLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-flatMapToLong' class='name expandable'>flatMapToLong</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.LongStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an {@code LongStream} consisting of the results of replacing each\n element of this stream with the contents o...</div><div class='long'><p>Returns an {@code LongStream} consisting of the results of replacing each\n element of this stream with the contents of a mapped stream produced by\n applying the provided mapping function to each element.  Each mapped\n stream is closed after its\n contents have been placed into this stream.  (If a mapped stream is\n {@code null} an empty stream is used, instead.)</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element which produces a stream\n               of new values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.LongStream}</span><div class='sub-desc'><p>the new stream\n@see <a href=\"#!/api/java.util.stream.Stream-method-flatMap\" rel=\"java.util.stream.Stream-method-flatMap\" class=\"docClass\">flatMap</a>(Function)</p>\n</div></li></ul></div></div></div><div id='method-forEach' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-forEach' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-forEach' class='name expandable'>forEach</a>( <span class='pre'>action</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs an action for each element of this stream. ...</div><div class='long'><p>Performs an action for each element of this stream.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n\n<p> <p>The behavior of this operation is explicitly nondeterministic.\n For parallel stream pipelines, this operation does <em>not</em>\n guarantee to respect the encounter order of the stream, as doing so\n would sacrifice the benefit of parallelism.  For any given element, the\n action may be performed at whatever time and in whatever thread the\n library chooses.  If the action accesses shared state, it is\n responsible for providing the required synchronization.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">\n               non-interfering</a> action to perform on the elements</p>\n</div></li></ul></div></div></div><div id='method-forEachOrdered' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-forEachOrdered' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-forEachOrdered' class='name expandable'>forEachOrdered</a>( <span class='pre'>action</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs an action for each element of this stream, in the encounter\n order of the stream if the stream has a defined...</div><div class='long'><p>Performs an action for each element of this stream, in the encounter\n order of the stream if the stream has a defined encounter order.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n\n<p> <p>This operation processes the elements one at a time, in encounter\n order if one exists.  Performing the action for one element\n <a href=\"../concurrent/package-summary.html#MemoryVisibility\"><i>happens-before</i></a>\n performing the action for subsequent elements, but for any given element,\n the action may be performed in whatever thread the library chooses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">\n               non-interfering</a> action to perform on the elements\n@see <a href=\"#!/api/java.util.stream.Stream-method-forEach\" rel=\"java.util.stream.Stream-method-forEach\" class=\"docClass\">forEach</a>(Consumer)</p>\n</div></li></ul></div></div></div><div id='method-generate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-generate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-generate' class='name expandable'>generate</a>( <span class='pre'>s, s</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an infinite sequential unordered stream where each element is\n generated by the provided {@code Supplier}. ...</div><div class='long'><p>Returns an infinite sequential unordered stream where each element is\n generated by the provided {@code Supplier}.  This is suitable for\n generating constant streams, streams of random elements, etc.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>s</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>the {@code Supplier} of generated elements</p>\n</div></li><li><span class='pre'>s</span> : Object<div class='sub-desc'><p>the {@code Supplier} of generated elements</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>a new infinite sequential unordered {@code Stream}</p>\n</div></li></ul></div></div></div><div id='method-iterate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-iterate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-iterate' class='name expandable'>iterate</a>( <span class='pre'>seed, f, f</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an infinite sequential ordered {@code Stream} produced by iterative\n application of a function {@code f} to a...</div><div class='long'><p>Returns an infinite sequential ordered {@code Stream} produced by iterative\n application of a function {@code f} to an initial element {@code seed},\n producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n {@code f(f(seed))}, etc.</p>\n\n<p> <p>The first element (position {@code 0}) in the {@code Stream} will be\n the provided {@code seed}.  For {@code n > 0}, the element at position\n {@code n}, will be the result of applying the function {@code f} to the\n element at position {@code n - 1}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>seed</span> : Object {Object}<div class='sub-desc'><p>the initial element</p>\n</div></li><li><span class='pre'>f</span> : Object {java.util.function.UnaryOperator}<div class='sub-desc'><p>a function to be applied to to the previous element to produce\n          a new element</p>\n</div></li><li><span class='pre'>f</span> : Object<div class='sub-desc'><p>a function to be applied to to the previous element to produce\n          a new element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>a new sequential {@code Stream}</p>\n</div></li></ul></div></div></div><div id='method-limit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-limit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-limit' class='name expandable'>limit</a>( <span class='pre'>maxSize, maxSize</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the elements of this stream, truncated\n to be no longer than {@code maxSize} in length. ...</div><div class='long'><p>Returns a stream consisting of the elements of this stream, truncated\n to be no longer than {@code maxSize} in length.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n stateful intermediate operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>maxSize</span> : Number<div class='sub-desc'><p>the number of elements the stream should be limited to</p>\n</div></li><li><span class='pre'>maxSize</span> : Object<div class='sub-desc'><p>the number of elements the stream should be limited to</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code maxSize} is negative</p>\n</div></li></ul></div></div></div><div id='method-map' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-map' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-map' class='name expandable'>map</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the results of applying the given\n function to the elements of this stream. ...</div><div class='long'><p>Returns a stream consisting of the results of applying the given\n function to the elements of this stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-mapToDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-mapToDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-mapToDouble' class='name expandable'>mapToDouble</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.DoubleStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code DoubleStream} consisting of the results of applying the\n given function to the elements of this stream. ...</div><div class='long'><p>Returns a {@code DoubleStream} consisting of the results of applying the\n given function to the elements of this stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToDoubleFunction}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.DoubleStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-mapToInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-mapToInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-mapToInt' class='name expandable'>mapToInt</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an {@code IntStream} consisting of the results of applying the\n given function to the elements of this stream. ...</div><div class='long'><p>Returns an {@code IntStream} consisting of the results of applying the\n given function to the elements of this stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">\n     intermediate operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToIntFunction}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-mapToLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-mapToLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-mapToLong' class='name expandable'>mapToLong</a>( <span class='pre'>mapper</span> ) : Object {java.util.stream.LongStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code LongStream} consisting of the results of applying the\n given function to the elements of this stream. ...</div><div class='long'><p>Returns a {@code LongStream} consisting of the results of applying the\n given function to the elements of this stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToLongFunction}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n               <a href=\"package-summary.html#Statelessness\">stateless</a>\n               function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.LongStream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-max' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-max' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-max' class='name expandable'>max</a>( <span class='pre'>comparator</span> ) : Object {java.util.Optional}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the maximum element of this stream according to the provided\n {@code Comparator}. ...</div><div class='long'><p>Returns the maximum element of this stream according to the provided\n {@code Comparator}.  This is a special case of a\n <a href=\"package-summary.html#Reduction\">reduction</a>.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>comparator</span> : Object {java.util.Comparator}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n                   {@code Comparator} to compare elements of this stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Optional}</span><div class='sub-desc'><p>an {@code Optional} describing the maximum element of this stream,\n or an empty {@code Optional} if the stream is empty</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the maximum element is null</p>\n</div></li></ul></div></div></div><div id='method-min' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-min' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-min' class='name expandable'>min</a>( <span class='pre'>comparator</span> ) : Object {java.util.Optional}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the minimum element of this stream according to the provided\n {@code Comparator}. ...</div><div class='long'><p>Returns the minimum element of this stream according to the provided\n {@code Comparator}.  This is a special case of a\n <a href=\"package-summary.html#Reduction\">reduction</a>.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>comparator</span> : Object {java.util.Comparator}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n                   {@code Comparator} to compare elements of this stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Optional}</span><div class='sub-desc'><p>an {@code Optional} describing the minimum element of this stream,\n or an empty {@code Optional} if the stream is empty</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the minimum element is null</p>\n</div></li></ul></div></div></div><div id='method-noneMatch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-noneMatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-noneMatch' class='name expandable'>noneMatch</a>( <span class='pre'>predicate, predicate</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether no elements of this stream match the provided predicate. ...</div><div class='long'><p>Returns whether no elements of this stream match the provided predicate.\n May not evaluate the predicate on all elements if not necessary for\n determining the result.  If the stream is empty then {@code true} is\n returned and the predicate is not evaluated.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting\n terminal operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {java.util.function.Predicate}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li><li><span class='pre'>predicate</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                  <a href=\"package-summary.html#Statelessness\">stateless</a>\n                  predicate to apply to elements of this stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if either no elements of the stream match the\n provided predicate or the stream is empty, otherwise {@code false}</p>\n</div></li></ul></div></div></div><div id='method-of' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-of' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-of' class='name expandable'>of</a>( <span class='pre'>values, values</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a sequential ordered stream whose elements are the specified values. ...</div><div class='long'><p>Returns a sequential ordered stream whose elements are the specified values.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>values</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the elements of the new stream</p>\n</div></li><li><span class='pre'>values</span> : Object<div class='sub-desc'><p>the elements of the new stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-peek' class='name expandable'>peek</a>( <span class='pre'>action, action</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the elements of this stream, additionally\n performing the provided action on each elem...</div><div class='long'><p>Returns a stream consisting of the elements of this stream, additionally\n performing the provided action on each element as elements are consumed\n from the resulting stream.</p>\n\n<p> <p>This is an <a href=\"package-summary.html#StreamOps\">intermediate\n operation</a>.</p>\n\n<p> <p>For parallel stream pipelines, the action may be called at\n whatever time and in whatever thread the element is made available by the\n upstream operation.  If the action modifies shared state,\n it is responsible for providing the required synchronization.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">\n                 non-interfering</a> action to perform on the elements as\n                 they are consumed from the stream</p>\n</div></li><li><span class='pre'>action</span> : Object<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">\n                 non-interfering</a> action to perform on the elements as\n                 they are consumed from the stream</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-reduce' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-reduce' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-reduce' class='name expandable'>reduce</a>( <span class='pre'>identity, accumulator, combiner, accumulator, combiner</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs a reduction on the\n elements of this stream, using the provided identity, accumulation and\n combining functi...</div><div class='long'><p>Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the\n elements of this stream, using the provided identity, accumulation and\n combining functions.  This is equivalent to:\n <pre>{@code\n     U result = identity;\n     for (T element : this stream)\n         result = accumulator.apply(result, element)\n     return result;\n }</pre></p>\n\n<p> but is not constrained to execute sequentially.</p>\n\n<p> <p>The {@code identity} value must be an identity for the combiner\n function.  This means that for all {@code u}, {@code combiner(identity, u)}\n is equal to {@code u}.  Additionally, the {@code combiner} function\n must be compatible with the {@code accumulator} function; for all\n {@code u} and {@code t}, the following must hold:\n <pre>{@code\n     combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)\n }</pre></p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>identity</span> : Object {Object}<div class='sub-desc'><p>the identity value for the combiner function</p>\n</div></li><li><span class='pre'>accumulator</span> : Object {java.util.function.BiFunction}<div class='sub-desc'><p>an <a href=\"package-summary.html#Associativity\">associative</a>,\n                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n                    function for incorporating an additional element into a result</p>\n</div></li><li><span class='pre'>combiner</span> : Object {java.util.function.BinaryOperator}<div class='sub-desc'><p>an <a href=\"package-summary.html#Associativity\">associative</a>,\n                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n                    function for combining two values, which must be\n                    compatible with the accumulator function</p>\n</div></li><li><span class='pre'>accumulator</span> : Object<div class='sub-desc'><p>an <a href=\"package-summary.html#Associativity\">associative</a>,\n                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n                    function for incorporating an additional element into a result</p>\n</div></li><li><span class='pre'>combiner</span> : Object<div class='sub-desc'><p>an <a href=\"package-summary.html#Associativity\">associative</a>,\n                    <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                    <a href=\"package-summary.html#Statelessness\">stateless</a>\n                    function for combining two values, which must be\n                    compatible with the accumulator function</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the result of the reduction\n@see <a href=\"#!/api/java.util.stream.Stream-method-reduce\" rel=\"java.util.stream.Stream-method-reduce\" class=\"docClass\">reduce</a>(BinaryOperator)\n@see <a href=\"#!/api/java.util.stream.Stream-method-reduce\" rel=\"java.util.stream.Stream-method-reduce\" class=\"docClass\">reduce</a>(Object, BinaryOperator)</p>\n</div></li></ul></div></div></div><div id='method-skip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-skip' class='name expandable'>skip</a>( <span class='pre'>n, n</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the remaining elements of this stream\n after discarding the first {@code n} elements o...</div><div class='long'><p>Returns a stream consisting of the remaining elements of this stream\n after discarding the first {@code n} elements of the stream.\n If this stream contains fewer than {@code n} elements then an\n empty stream will be returned.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n intermediate operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>the number of leading elements to skip</p>\n</div></li><li><span class='pre'>n</span> : Object<div class='sub-desc'><p>the number of leading elements to skip</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code n} is negative</p>\n</div></li></ul></div></div></div><div id='method-sorted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-sorted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-sorted' class='name expandable'>sorted</a>( <span class='pre'>comparator</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stream consisting of the elements of this stream, sorted\n according to the provided {@code Comparator}. ...</div><div class='long'><p>Returns a stream consisting of the elements of this stream, sorted\n according to the provided {@code Comparator}.</p>\n\n<p> <p>For ordered streams, the sort is stable.  For unordered streams, no\n stability guarantees are made.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">stateful\n intermediate operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>comparator</span> : Object {java.util.Comparator}<div class='sub-desc'><p>a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,\n                   <a href=\"package-summary.html#Statelessness\">stateless</a>\n                   {@code Comparator} to be used to compare stream elements</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the new stream</p>\n</div></li></ul></div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Stream'>java.util.stream.Stream</span><br/><a href='source/Stream.html#java-util-stream-Stream-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Stream-method-toArray' class='name expandable'>toArray</a>( <span class='pre'>generator, , generator</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an array containing the elements of this stream, using the\n provided {@code generator} function to allocate t...</div><div class='long'><p>Returns an array containing the elements of this stream, using the\n provided {@code generator} function to allocate the returned array, as\n well as any additional arrays that might be required for a partitioned\n execution or for resizing.</p>\n\n<p> <p>This is a <a href=\"package-summary.html#StreamOps\">terminal\n operation</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>generator</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>a function which produces a new array of the desired\n                  type and the provided length</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><A> the element type of the resulting array</A></p>\n</div></li><li><span class='pre'>generator</span> : Object<div class='sub-desc'><p>a function which produces a new array of the desired\n                  type and the provided length</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an array containing the elements in this stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArrayStoreException if the runtime type of the array returned\n from the array generator is not a supertype of the runtime type of every\n element in this stream</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});