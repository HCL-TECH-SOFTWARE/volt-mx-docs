Ext.data.JsonP.java_util_stream_StreamSupport({"tagname":"class","name":"java.util.stream.StreamSupport","autodetected":{},"files":[{"filename":"StreamSupport.js","href":"StreamSupport.html#java-util-stream-StreamSupport"}],"extends":"java.lang.Object","since":"1.8","members":[{"name":"doubleStream","tagname":"method","owner":"java.util.stream.StreamSupport","id":"method-doubleStream","meta":{}},{"name":"intStream","tagname":"method","owner":"java.util.stream.StreamSupport","id":"method-intStream","meta":{}},{"name":"longStream","tagname":"method","owner":"java.util.stream.StreamSupport","id":"method-longStream","meta":{}},{"name":"stream","tagname":"method","owner":"java.util.stream.StreamSupport","id":"method-stream","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.StreamSupport","short_doc":"Low-level utility methods for creating and manipulating streams. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.stream.StreamSupport</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/StreamSupport.html#java-util-stream-StreamSupport' target='_blank'>StreamSupport.js</a></div></pre><div class='doc-contents'><p>Low-level utility methods for creating and manipulating streams.</p>\n\n<p> <p>This class is mostly for library writers presenting stream views\n of data structures; most static stream methods intended for end users are in\n the various {@code Stream} classes.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-doubleStream' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.StreamSupport'>java.util.stream.StreamSupport</span><br/><a href='source/StreamSupport.html#java-util-stream-StreamSupport-method-doubleStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.StreamSupport-method-doubleStream' class='name expandable'>doubleStream</a>( <span class='pre'>supplier, characteristics, parallel</span> ) : Object {java.util.stream.DoubleStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new sequential or parallel {@code DoubleStream} from a\n {@code Supplier} of {@code Spliterator.OfDouble}. ...</div><div class='long'><p>Creates a new sequential or parallel {@code DoubleStream} from a\n {@code Supplier} of {@code Spliterator.OfDouble}.</p>\n\n<p> <p>The Supplier.get() method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.</p>\n\n<p> <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n or {@code CONCURRENT}, or that are\n <a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely\n more efficient to use boolean)\n instead.\n <p>The use of a {@code Supplier} in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n more details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>supplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>A {@code Supplier} of a {@code Spliterator.OfDouble}</p>\n</div></li><li><span class='pre'>characteristics</span> : Number<div class='sub-desc'><p>Spliterator characteristics of the supplied\n        {@code Spliterator.OfDouble}.  The characteristics must be equal to\n        {@code supplier.get().characteristics()}, otherwise undefined\n        behavior may occur when terminal operation commences.</p>\n</div></li><li><span class='pre'>parallel</span> : Boolean<div class='sub-desc'><p>if {@code true} then the returned stream is a parallel\n        stream; if {@code false} the returned stream is a sequential\n        stream.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.DoubleStream}</span><div class='sub-desc'><p>a new sequential or parallel {@code DoubleStream}\n@see <a href=\"#!/api/java.util.stream.StreamSupport-method-doubleStream\" rel=\"java.util.stream.StreamSupport-method-doubleStream\" class=\"docClass\">doubleStream</a>(java.util.Spliterator.OfDouble, boolean)</p>\n</div></li></ul></div></div></div><div id='method-intStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.StreamSupport'>java.util.stream.StreamSupport</span><br/><a href='source/StreamSupport.html#java-util-stream-StreamSupport-method-intStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.StreamSupport-method-intStream' class='name expandable'>intStream</a>( <span class='pre'>supplier, characteristics, parallel</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new sequential or parallel {@code IntStream} from a\n {@code Supplier} of {@code Spliterator.OfInt}. ...</div><div class='long'><p>Creates a new sequential or parallel {@code IntStream} from a\n {@code Supplier} of {@code Spliterator.OfInt}.</p>\n\n<p> <p>The Supplier.get() method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.</p>\n\n<p> <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n or {@code CONCURRENT}, or that are\n <a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely\n more efficient to use boolean)\n instead.\n <p>The use of a {@code Supplier} in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n more details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>supplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a {@code Supplier} of a {@code Spliterator.OfInt}</p>\n</div></li><li><span class='pre'>characteristics</span> : Number<div class='sub-desc'><p>Spliterator characteristics of the supplied\n        {@code Spliterator.OfInt}.  The characteristics must be equal to\n        {@code supplier.get().characteristics()}, otherwise undefined\n        behavior may occur when terminal operation commences.</p>\n</div></li><li><span class='pre'>parallel</span> : Boolean<div class='sub-desc'><p>if {@code true} then the returned stream is a parallel\n        stream; if {@code false} the returned stream is a sequential\n        stream.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>a new sequential or parallel {@code IntStream}\n@see <a href=\"#!/api/java.util.stream.StreamSupport-method-intStream\" rel=\"java.util.stream.StreamSupport-method-intStream\" class=\"docClass\">intStream</a>(java.util.Spliterator.OfInt, boolean)</p>\n</div></li></ul></div></div></div><div id='method-longStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.StreamSupport'>java.util.stream.StreamSupport</span><br/><a href='source/StreamSupport.html#java-util-stream-StreamSupport-method-longStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.StreamSupport-method-longStream' class='name expandable'>longStream</a>( <span class='pre'>supplier, characteristics, parallel</span> ) : Object {java.util.stream.LongStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new sequential or parallel {@code LongStream} from a\n {@code Supplier} of {@code Spliterator.OfLong}. ...</div><div class='long'><p>Creates a new sequential or parallel {@code LongStream} from a\n {@code Supplier} of {@code Spliterator.OfLong}.</p>\n\n<p> <p>The Supplier.get() method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.</p>\n\n<p> <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n or {@code CONCURRENT}, or that are\n <a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely\n more efficient to use boolean)\n instead.\n <p>The use of a {@code Supplier} in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n more details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>supplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a {@code Supplier} of a {@code Spliterator.OfLong}</p>\n</div></li><li><span class='pre'>characteristics</span> : Number<div class='sub-desc'><p>Spliterator characteristics of the supplied\n        {@code Spliterator.OfLong}.  The characteristics must be equal to\n        {@code supplier.get().characteristics()}, otherwise undefined\n        behavior may occur when terminal operation commences.</p>\n</div></li><li><span class='pre'>parallel</span> : Boolean<div class='sub-desc'><p>if {@code true} then the returned stream is a parallel\n        stream; if {@code false} the returned stream is a sequential\n        stream.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.LongStream}</span><div class='sub-desc'><p>a new sequential or parallel {@code LongStream}\n@see <a href=\"#!/api/java.util.stream.StreamSupport-method-longStream\" rel=\"java.util.stream.StreamSupport-method-longStream\" class=\"docClass\">longStream</a>(java.util.Spliterator.OfLong, boolean)</p>\n</div></li></ul></div></div></div><div id='method-stream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.StreamSupport'>java.util.stream.StreamSupport</span><br/><a href='source/StreamSupport.html#java-util-stream-StreamSupport-method-stream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.StreamSupport-method-stream' class='name expandable'>stream</a>( <span class='pre'>supplier, characteristics, parallel, parallel</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new sequential or parallel {@code Stream} from a\n {@code Supplier} of {@code Spliterator}. ...</div><div class='long'><p>Creates a new sequential or parallel {@code Stream} from a\n {@code Supplier} of {@code Spliterator}.</p>\n\n<p> <p>The Supplier.get() method will be invoked on the supplier no\n more than once, and only after the terminal operation of the stream pipeline\n commences.</p>\n\n<p> <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n or {@code CONCURRENT}, or that are\n <a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely\n more efficient to use boolean)\n instead.\n <p>The use of a {@code Supplier} in this form provides a level of\n indirection that reduces the scope of potential interference with the\n source.  Since the supplier is only invoked after the terminal operation\n commences, any modifications to the source up to the start of the\n terminal operation are reflected in the stream result.  See\n <a href=\"package-summary.html#NonInterference\">Non-Interference</a> for\n more details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>supplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a {@code Supplier} of a {@code Spliterator}</p>\n</div></li><li><span class='pre'>characteristics</span> : Number<div class='sub-desc'><p>Spliterator characteristics of the supplied\n        {@code Spliterator}.  The characteristics must be equal to\n        {@code supplier.get().characteristics()}, otherwise undefined\n        behavior may occur when terminal operation commences.</p>\n</div></li><li><span class='pre'>parallel</span> : Boolean<div class='sub-desc'><p>if {@code true} then the returned stream is a parallel\n        stream; if {@code false} the returned stream is a sequential\n        stream.</p>\n</div></li><li><span class='pre'>parallel</span> : Object<div class='sub-desc'><p>if {@code true} then the returned stream is a parallel\n        stream; if {@code false} the returned stream is a sequential\n        stream.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>a new sequential or parallel {@code Stream}\n@see <a href=\"#!/api/java.util.stream.StreamSupport-method-stream\" rel=\"java.util.stream.StreamSupport-method-stream\" class=\"docClass\">stream</a>(java.util.Spliterator, boolean)</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});