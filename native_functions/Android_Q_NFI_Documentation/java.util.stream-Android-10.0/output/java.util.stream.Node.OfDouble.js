Ext.data.JsonP.java_util_stream_Node_OfDouble({"tagname":"class","name":"java.util.stream.Node.OfDouble","autodetected":{},"files":[{"filename":"OfDouble.js","href":"OfDouble.html#java-util-stream-Node-OfDouble"}],"members":[{"name":"copyInto","tagname":"method","owner":"java.util.stream.Node.OfDouble","id":"method-copyInto","meta":{}},{"name":"forEach","tagname":"method","owner":"java.util.stream.Node.OfDouble","id":"method-forEach","meta":{}},{"name":"getShape","tagname":"method","owner":"java.util.stream.Node.OfDouble","id":"method-getShape","meta":{}},{"name":"newArray","tagname":"method","owner":"java.util.stream.Node.OfDouble","id":"method-newArray","meta":{}},{"name":"truncate","tagname":"method","owner":"java.util.stream.Node.OfDouble","id":"method-truncate","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.Node.OfDouble","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/OfDouble.html#java-util-stream-Node-OfDouble' target='_blank'>OfDouble.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.stream.Node.OfPrimitive\" rel=\"java.util.stream.Node.OfPrimitive\" class=\"docClass\">java.util.stream.Node.OfPrimitive</a></p>\n\n<p> Specialized {@code Node} for double elements</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-copyInto' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfDouble'>java.util.stream.Node.OfDouble</span><br/><a href='source/OfDouble.html#java-util-stream-Node-OfDouble-method-copyInto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfDouble-method-copyInto' class='name expandable'>copyInto</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec the default implementation invokes asPrimitiveArray()\n to obtain a double[] array then and co...</div><div class='long'><p>{@inheritDoc}\n@implSpec the default implementation invokes asPrimitiveArray()\n to obtain a double[] array then and copies the elements from that\n double[] array into the boxed Double[] array.  This is not efficient\n and it is recommended to invoke int).</p>\n</div></div></div><div id='method-forEach' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfDouble'>java.util.stream.Node.OfDouble</span><br/><a href='source/OfDouble.html#java-util-stream-Node-OfDouble-method-forEach' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfDouble-method-forEach' class='name expandable'>forEach</a>( <span class='pre'>consumer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc} ...</div><div class='long'><p>{@inheritDoc}</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>consumer</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>A {@code Consumer} that is to be invoked with each\n        element in this {@code Node}.  If this is an\n        {@code DoubleConsumer}, it is cast to {@code DoubleConsumer}\n        so the elements may be processed without boxing.</p>\n</div></li></ul></div></div></div><div id='method-getShape' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfDouble'>java.util.stream.Node.OfDouble</span><br/><a href='source/OfDouble.html#java-util-stream-Node-OfDouble-method-getShape' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfDouble-method-getShape' class='name expandable'>getShape</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec The default in {@code Node.OfDouble} returns\n {@code StreamShape.DOUBLE_VALUE} ...</div><div class='long'><p>{@inheritDoc}\n@implSpec The default in {@code Node.OfDouble} returns\n {@code StreamShape.DOUBLE_VALUE}</p>\n</div></div></div><div id='method-newArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfDouble'>java.util.stream.Node.OfDouble</span><br/><a href='source/OfDouble.html#java-util-stream-Node-OfDouble-method-newArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfDouble-method-newArray' class='name expandable'>newArray</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-truncate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node.OfDouble'>java.util.stream.Node.OfDouble</span><br/><a href='source/OfDouble.html#java-util-stream-Node-OfDouble-method-truncate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node.OfDouble-method-truncate' class='name expandable'>truncate</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});