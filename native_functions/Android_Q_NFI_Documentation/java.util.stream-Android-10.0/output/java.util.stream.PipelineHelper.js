Ext.data.JsonP.java_util_stream_PipelineHelper({"tagname":"class","name":"java.util.stream.PipelineHelper","autodetected":{},"files":[{"filename":"PipelineHelper.js","href":"PipelineHelper.html#java-util-stream-PipelineHelper"}],"extends":"java.lang.Object","params":[{"tagname":"params","doc":"<p><P_OUT> type of output elements from the pipeline\n Visible for CTS testing only (OpenJDK8 tests).</P_OUT></p>\n"}],"since":"1.8","hide":true,"members":[{"name":"evaluate","tagname":"method","owner":"java.util.stream.PipelineHelper","id":"method-evaluate","meta":{}},{"name":"getStreamAndOpFlags","tagname":"method","owner":"java.util.stream.PipelineHelper","id":"method-getStreamAndOpFlags","meta":{}},{"name":"wrapSink","tagname":"method","owner":"java.util.stream.PipelineHelper","id":"method-wrapSink","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.PipelineHelper","short_doc":"Helper class for executing \n stream pipelines, capturing all of the information about a stream\n pipeline (output shap...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.util.stream.AbstractPipeline"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.stream.PipelineHelper</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.util.stream.AbstractPipeline' rel='java.util.stream.AbstractPipeline' class='docClass'>java.util.stream.AbstractPipeline</a></div><h4>Files</h4><div class='dependency'><a href='source/PipelineHelper.html#java-util-stream-PipelineHelper' target='_blank'>PipelineHelper.js</a></div></pre><div class='doc-contents'><p>Helper class for executing <a href=\"package-summary.html#StreamOps\">\n stream pipelines</a>, capturing all of the information about a stream\n pipeline (output shape, intermediate operations, stream flags, parallelism,\n etc) in one place.</p>\n\n<p> <p>\n A {@code PipelineHelper} describes the initial segment of a stream pipeline,\n including its source, intermediate operations, and may additionally\n incorporate information about the terminal (or stateful) operation which\n follows the last intermediate operation described by this\n {@code PipelineHelper}. The {@code PipelineHelper} is passed to the\n java.util.Spliterator),\n java.util.Spliterator),\n and java.util.Spliterator,\n java.util.function.IntFunction), methods, which can use the\n {@code PipelineHelper} to access information about the pipeline such as\n head shape, stream flags, and size, and use the helper methods\n such as Spliterator),\n Spliterator), and <a href=\"#!/api/java.util.stream.PipelineHelper-method-wrapSink\" rel=\"java.util.stream.PipelineHelper-method-wrapSink\" class=\"docClass\">wrapSink</a>(Sink) to execute\n pipeline operations.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><P_OUT> type of output elements from the pipeline\n Visible for CTS testing only (OpenJDK8 tests).</P_OUT></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-evaluate' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.PipelineHelper'>java.util.stream.PipelineHelper</span><br/><a href='source/PipelineHelper.html#java-util-stream-PipelineHelper-method-evaluate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.PipelineHelper-method-evaluate' class='name expandable'>evaluate</a>( <span class='pre'>spliterator, flatten, generator, generator</span> ) : Object {java.util.stream.Node}<span class=\"signature\"></span></div><div class='description'><div class='short'>Collects all output elements resulting from applying the pipeline stages\n to the source {@code Spliterator} into a {@...</div><div class='long'><p>Collects all output elements resulting from applying the pipeline stages\n to the source {@code Spliterator} into a {@code Node}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>spliterator</span> : Object {java.util.Spliterator}<div class='sub-desc'><p>the source {@code Spliterator}</p>\n</div></li><li><span class='pre'>flatten</span> : Boolean<div class='sub-desc'><p>if true and the pipeline is a parallel pipeline then the\n        {@code Node} returned will contain no children, otherwise the\n        {@code Node} may represent the root in a tree that reflects the\n        shape of the computation tree.</p>\n</div></li><li><span class='pre'>generator</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>a factory function for array instances</p>\n</div></li><li><span class='pre'>generator</span> : Object<div class='sub-desc'><p>a factory function for array instances</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Node}</span><div class='sub-desc'><p>the {@code Node} containing all output elements</p>\n</div></li></ul></div></div></div><div id='method-getStreamAndOpFlags' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.PipelineHelper'>java.util.stream.PipelineHelper</span><br/><a href='source/PipelineHelper.html#java-util-stream-PipelineHelper-method-getStreamAndOpFlags' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.PipelineHelper-method-getStreamAndOpFlags' class='name expandable'>getStreamAndOpFlags</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the combined stream and operation flags for the output of the described\n pipeline. ...</div><div class='long'><p>Gets the combined stream and operation flags for the output of the described\n pipeline.  This will incorporate stream flags from the stream source, all\n the intermediate operations and the terminal operation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the combined stream and operation flags\n@see StreamOpFlag</p>\n</div></li></ul></div></div></div><div id='method-wrapSink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.PipelineHelper'>java.util.stream.PipelineHelper</span><br/><a href='source/PipelineHelper.html#java-util-stream-PipelineHelper-method-wrapSink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.PipelineHelper-method-wrapSink' class='name expandable'>wrapSink</a>( <span class='pre'>sink</span> ) : Object {java.util.stream.Sink}<span class=\"signature\"></span></div><div class='description'><div class='short'>Takes a {@code Sink} that accepts elements of the output type of the\n {@code PipelineHelper}, and wrap it with a {@co...</div><div class='long'><p>Takes a {@code Sink} that accepts elements of the output type of the\n {@code PipelineHelper}, and wrap it with a {@code Sink} that accepts\n elements of the input type and implements all the intermediate operations\n described by this {@code PipelineHelper}, delivering the result into the\n provided {@code Sink}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sink</span> : Object {java.util.stream.Sink}<div class='sub-desc'><p>the {@code Sink} to receive the results</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Sink}</span><div class='sub-desc'><p>a {@code Sink} that implements the pipeline stages and sends\n         results to the provided {@code Sink}</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});