Ext.data.JsonP.java_util_stream_Sink({"tagname":"class","name":"java.util.stream.Sink","autodetected":{},"files":[{"filename":"Sink.js","href":"Sink.html#java-util-stream-Sink"}],"params":[{"tagname":"params","doc":"<p><T> type of elements for value streams\n Visible for CTS testing only (OpenJDK8 tests).</T></p>\n"}],"since":"1.8","hide":true,"members":[{"name":"accept","tagname":"method","owner":"java.util.stream.Sink","id":"method-accept","meta":{}},{"name":"begin","tagname":"method","owner":"java.util.stream.Sink","id":"method-begin","meta":{}},{"name":"cancellationRequested","tagname":"method","owner":"java.util.stream.Sink","id":"method-cancellationRequested","meta":{}},{"name":"end","tagname":"method","owner":"java.util.stream.Sink","id":"method-end","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.Sink","short_doc":"implements java.util.function.Consumer\n\n An extension of Consumer used to conduct values through the stages of\n a str...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Sink.html#java-util-stream-Sink' target='_blank'>Sink.js</a></div></pre><div class='doc-contents'><p>implements java.util.function.Consumer</p>\n\n<p> An extension of Consumer used to conduct values through the stages of\n a stream pipeline, with additional methods to manage size information,\n control flow, etc.  Before calling the {@code accept()} method on a\n {@code Sink} for the first time, you must first call the {@code begin()}\n method to inform it that data is coming (optionally informing the sink how\n much data is coming), and after all data has been sent, you must call the\n {@code end()} method.  After calling {@code end()}, you should not call\n {@code accept()} without again calling {@code begin()}.  {@code Sink} also\n offers a mechanism by which the sink can cooperatively signal that it does\n not wish to receive any more data (the {@code cancellationRequested()}\n method), which a source can poll before sending more data to the\n {@code Sink}.</p>\n\n<p> <p>A sink may be in one of two states: an initial state and an active state.\n It starts out in the initial state; the {@code begin()} method transitions\n it to the active state, and the {@code end()} method transitions it back into\n the initial state, where it can be re-used.  Data-accepting methods (such as\n {@code accept()} are only valid in the active state.</p>\n\n<p> @apiNote\n A stream pipeline consists of a source, zero or more intermediate stages\n (such as filtering or mapping), and a terminal stage, such as reduction or\n for-each.  For concreteness, consider the pipeline:</p>\n\n<p> <pre>{@code\n     int longestStringLengthStartingWithA\n         = strings.stream()\n                  .filter(s -> s.startsWith(\"A\"))\n                  .mapToInt(String::length)\n                  .max();\n }</pre></p>\n\n<p> <p>Here, we have three stages, filtering, mapping, and reducing.  The\n filtering stage consumes strings and emits a subset of those strings; the\n mapping stage consumes strings and emits ints; the reduction stage consumes\n those ints and computes the maximal value.</p>\n\n<p> <p>A {@code Sink} instance is used to represent each stage of this pipeline,\n whether the stage accepts objects, ints, longs, or doubles.  Sink has entry\n points for {@code accept(Object)}, {@code accept(int)}, etc, so that we do\n not need a specialized interface for each primitive specialization.  (It\n might be called a \"kitchen sink\" for this omnivorous tendency.)  The entry\n point to the pipeline is the {@code Sink} for the filtering stage, which\n sends some elements \"downstream\" -- into the {@code Sink} for the mapping\n stage, which in turn sends integral values downstream into the {@code Sink}\n for the reduction stage. The {@code Sink} implementations associated with a\n given stage is expected to know the data type for the next stage, and call\n the correct {@code accept} method on its downstream {@code Sink}.  Similarly,\n each stage must implement the correct {@code accept} method corresponding to\n the data type it accepts.</p>\n\n<p> <p>The specialized subtypes such as java.util.stream.Sink.OfInt override\n {@code accept(Object)} to call the appropriate primitive specialization of\n {@code accept}, implement the appropriate primitive specialization of\n {@code Consumer}, and re-abstract the appropriate primitive specialization of\n {@code accept}.</p>\n\n<p> <p>The chaining subtypes such as <a href=\"#!/api/java.util.stream.Sink.ChainedInt\" rel=\"java.util.stream.Sink.ChainedInt\" class=\"docClass\">java.util.stream.Sink.ChainedInt</a> not only implement\n {@code Sink.OfInt}, but also maintain a {@code downstream} field which\n represents the downstream {@code Sink}, and implement the methods\n {@code begin()}, {@code end()}, and {@code cancellationRequested()} to\n delegate to the downstream {@code Sink}.  Most implementations of\n intermediate operations will use these chaining wrappers.  For example, the\n mapping stage in the above example would look like:</p>\n\n<p> <pre>{@code\n     IntSink is = new Sink.ChainedReference<U>(sink) {\n         public void accept(U u) {\n             downstream.accept(mapper.applyAsInt(u));\n         }\n     };\n }</U></pre></p>\n\n<p> <p>Here, we implement {@code Sink.ChainedReference<U>}, meaning that we expect\n to receive elements of type {@code U} as input, and pass the downstream sink\n to the constructor.  Because the next stage expects to receive integers, we\n must call the {@code accept(int)} method when emitting values to the downstream.\n The {@code accept()} method applies the mapping function from {@code U} to\n {@code int} and passes the resulting value to the downstream {@code Sink}.</U></p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> type of elements for value streams\n Visible for CTS testing only (OpenJDK8 tests).</T></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-accept' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Sink'>java.util.stream.Sink</span><br/><a href='source/Sink.html#java-util-stream-Sink-method-accept' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Sink-method-accept' class='name expandable'>accept</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Accepts a double value. ...</div><div class='long'><p>Accepts a double value.\n@implSpec The default implementation throws IllegalStateException.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this sink does not accept double values</p>\n</div></li></ul></div></div></div><div id='method-begin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Sink'>java.util.stream.Sink</span><br/><a href='source/Sink.html#java-util-stream-Sink-method-begin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Sink-method-begin' class='name expandable'>begin</a>( <span class='pre'>size</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets the sink state to receive a fresh data set. ...</div><div class='long'><p>Resets the sink state to receive a fresh data set.  This must be called\n before sending any data to the sink.  After calling <a href=\"#!/api/java.util.stream.Sink-method-end\" rel=\"java.util.stream.Sink-method-end\" class=\"docClass\">end</a>(),\n you may call this method to reset the sink for another calculation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>size</span> : Number<div class='sub-desc'><p>The exact size of the data to be pushed downstream, if\n known or {@code -1} if unknown or infinite.</p>\n\n<p> <p>Prior to this call, the sink must be in the initial state, and after\n this call it is in the active state.</p>\n</div></li></ul></div></div></div><div id='method-cancellationRequested' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Sink'>java.util.stream.Sink</span><br/><a href='source/Sink.html#java-util-stream-Sink-method-cancellationRequested' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Sink-method-cancellationRequested' class='name expandable'>cancellationRequested</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that this {@code Sink} does not wish to receive any more data. ...</div><div class='long'><p>Indicates that this {@code Sink} does not wish to receive any more data.\n@implSpec The default implementation always returns false.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if cancellation is requested</p>\n</div></li></ul></div></div></div><div id='method-end' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Sink'>java.util.stream.Sink</span><br/><a href='source/Sink.html#java-util-stream-Sink-method-end' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Sink-method-end' class='name expandable'>end</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that all elements have been pushed. ...</div><div class='long'><p>Indicates that all elements have been pushed.  If the {@code Sink} is\n stateful, it should send any stored state downstream at this time, and\n should clear any accumulated state (and associated resources).</p>\n\n<p> <p>Prior to this call, the sink must be in the active state, and after\n this call it is returned to the initial state.</p>\n</div></div></div></div></div></div></div>","meta":{}});