Ext.data.JsonP.java_util_stream_AbstractPipeline({"tagname":"class","name":"java.util.stream.AbstractPipeline","autodetected":{},"files":[{"filename":"AbstractPipeline.js","href":"AbstractPipeline.html#java-util-stream-AbstractPipeline"}],"extends":"java.util.stream.PipelineHelper","params":[{"tagname":"params","doc":"<p><E_IN>  type of input elements</E_IN></p>\n"},{"tagname":"params","doc":"<p><E_OUT> type of output elements</E_OUT></p>\n"},{"tagname":"params","doc":"<p><S> type of the subclass implementing {@code BaseStream}\n Made public for CTS tests only (OpenJDK 8 streams tests).</S></p>\n"}],"since":"1.8","hide":true,"members":[{"name":"close","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-close","meta":{}},{"name":"evaluate","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-evaluate","meta":{}},{"name":"evaluateToArrayNode","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-evaluateToArrayNode","meta":{}},{"name":"evaluateToNode","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-evaluateToNode","meta":{}},{"name":"forEachWithCancel","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-forEachWithCancel","meta":{}},{"name":"getOutputShape","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-getOutputShape","meta":{}},{"name":"getStreamAndOpFlags","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-getStreamAndOpFlags","meta":{}},{"name":"getStreamFlags","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-getStreamFlags","meta":{}},{"name":"isParallel","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-isParallel","meta":{}},{"name":"lazySpliterator","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-lazySpliterator","meta":{}},{"name":"makeNodeBuilder","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-makeNodeBuilder","meta":{}},{"name":"onClose","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-onClose","meta":{}},{"name":"opEvaluateParallel","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-opEvaluateParallel","meta":{}},{"name":"opEvaluateParallelLazy","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-opEvaluateParallelLazy","meta":{}},{"name":"opIsStateful","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-opIsStateful","meta":{}},{"name":"opWrapSink","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-opWrapSink","meta":{}},{"name":"parallel","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-parallel","meta":{}},{"name":"sequential","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-sequential","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-spliterator","meta":{}},{"name":"wrap","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-wrap","meta":{}},{"name":"wrapSink","tagname":"method","owner":"java.util.stream.AbstractPipeline","id":"method-wrapSink","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.AbstractPipeline","short_doc":"implements java.util.stream.BaseStream\n\nAbstract base class for \"pipeline\" classes, which are the core\n implementatio...","classIcon":"icon-class","superclasses":["java.lang.Object","java.util.stream.PipelineHelper"],"subclasses":["java.util.stream.DoublePipeline","java.util.stream.IntPipeline","java.util.stream.LongPipeline","java.util.stream.ReferencePipeline"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.util.stream.PipelineHelper' rel='java.util.stream.PipelineHelper' class='docClass'>java.util.stream.PipelineHelper</a><div class='subclass '><strong>java.util.stream.AbstractPipeline</strong></div></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.util.stream.DoublePipeline' rel='java.util.stream.DoublePipeline' class='docClass'>java.util.stream.DoublePipeline</a></div><div class='dependency'><a href='#!/api/java.util.stream.IntPipeline' rel='java.util.stream.IntPipeline' class='docClass'>java.util.stream.IntPipeline</a></div><div class='dependency'><a href='#!/api/java.util.stream.LongPipeline' rel='java.util.stream.LongPipeline' class='docClass'>java.util.stream.LongPipeline</a></div><div class='dependency'><a href='#!/api/java.util.stream.ReferencePipeline' rel='java.util.stream.ReferencePipeline' class='docClass'>java.util.stream.ReferencePipeline</a></div><h4>Files</h4><div class='dependency'><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline' target='_blank'>AbstractPipeline.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.stream.BaseStream\" rel=\"java.util.stream.BaseStream\" class=\"docClass\">java.util.stream.BaseStream</a></p>\n\n<p>Abstract base class for \"pipeline\" classes, which are the core\n implementations of the Stream interface and its primitive specializations.\n Manages construction and evaluation of stream pipelines.</p>\n\n<p> <p>An {@code AbstractPipeline} represents an initial portion of a stream\n pipeline, encapsulating a stream source and zero or more intermediate\n operations.  The individual {@code AbstractPipeline} objects are often\n referred to as <em>stages</em>, where each stage describes either the stream\n source or an intermediate operation.</p>\n\n<p> <p>A concrete intermediate stage is generally built from an\n {@code AbstractPipeline}, a shape-specific pipeline class which extends it\n (e.g., {@code IntPipeline}) which is also abstract, and an operation-specific\n concrete class which extends that.  {@code AbstractPipeline} contains most of\n the mechanics of evaluating the pipeline, and implements methods that will be\n used by the operation; the shape-specific classes add helper methods for\n dealing with collection of results into the appropriate shape-specific\n containers.</p>\n\n<p> <p>After chaining a new intermediate operation, or executing a terminal\n operation, the stream is considered to be consumed, and no more intermediate\n or terminal operations are permitted on this stream instance.</p>\n\n<p> @implNote\n <p>For sequential streams, and parallel streams without\n <a href=\"package-summary.html#StreamOps\">stateful intermediate\n operations</a>, parallel streams, pipeline evaluation is done in a single\n pass that \"jams\" all the operations together.  For parallel streams with\n stateful operations, execution is divided into segments, where each\n stateful operations marks the end of a segment, and each segment is\n evaluated separately and the result used as the input to the next\n segment.  In all cases, the source data is not consumed until a terminal\n operation begins.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E_IN>  type of input elements</E_IN></p>\n</div></li><li><span class='pre'></span> : <div class='sub-desc'><p><E_OUT> type of output elements</E_OUT></p>\n</div></li><li><span class='pre'></span> : <div class='sub-desc'><p><S> type of the subclass implementing {@code BaseStream}\n Made public for CTS tests only (OpenJDK 8 streams tests).</S></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-evaluate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-evaluate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-evaluate' class='name expandable'>evaluate</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.util.stream.PipelineHelper-method-evaluate\" rel=\"java.util.stream.PipelineHelper-method-evaluate\" class=\"docClass\">java.util.stream.PipelineHelper.evaluate</a></p></div></div></div><div id='method-evaluateToArrayNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-evaluateToArrayNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-evaluateToArrayNode' class='name expandable'>evaluateToArrayNode</a>( <span class='pre'>generator</span> ) : Object {java.util.stream.Node}<span class=\"signature\"></span></div><div class='description'><div class='short'>Collect the elements output from the pipeline stage. ...</div><div class='long'><p>Collect the elements output from the pipeline stage.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>generator</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>the array generator to be used to create array instances</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Node}</span><div class='sub-desc'><p>a flat array-backed Node that holds the collected output elements</p>\n</div></li></ul></div></div></div><div id='method-evaluateToNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-evaluateToNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-evaluateToNode' class='name expandable'>evaluateToNode</a>( <span class='pre'>helper, spliterator, flattenTree, generator</span> ) : Object {java.util.stream.Node}<span class=\"signature\"></span></div><div class='description'><div class='short'>Collect elements output from a pipeline into a Node that holds elements\n of this shape. ...</div><div class='long'><p>Collect elements output from a pipeline into a Node that holds elements\n of this shape.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>helper</span> : Object {java.util.stream.PipelineHelper}<div class='sub-desc'><p>the pipeline helper describing the pipeline stages</p>\n</div></li><li><span class='pre'>spliterator</span> : Object {java.util.Spliterator}<div class='sub-desc'><p>the source spliterator</p>\n</div></li><li><span class='pre'>flattenTree</span> : Boolean<div class='sub-desc'><p>true if the returned node should be flattened</p>\n</div></li><li><span class='pre'>generator</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>the array generator</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Node}</span><div class='sub-desc'><p>a Node holding the output of the pipeline</p>\n</div></li></ul></div></div></div><div id='method-forEachWithCancel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-forEachWithCancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-forEachWithCancel' class='name expandable'>forEachWithCancel</a>( <span class='pre'>spliterator, sink</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Traverse the elements of a spliterator compatible with this stream shape,\n pushing those elements into a sink. ...</div><div class='long'><p>Traverse the elements of a spliterator compatible with this stream shape,\n pushing those elements into a sink.   If the sink requests cancellation,\n no further elements will be pulled or pushed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>spliterator</span> : Object {java.util.Spliterator}<div class='sub-desc'><p>the spliterator to pull elements from</p>\n</div></li><li><span class='pre'>sink</span> : Object {java.util.stream.Sink}<div class='sub-desc'><p>the sink to push elements to</p>\n</div></li></ul></div></div></div><div id='method-getOutputShape' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-getOutputShape' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-getOutputShape' class='name expandable'>getOutputShape</a>( <span class='pre'></span> ) : Object {java.util.stream.StreamShape}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the output shape of the pipeline. ...</div><div class='long'><p>Get the output shape of the pipeline.  If the pipeline is the head,\n then it's output shape corresponds to the shape of the source.\n Otherwise, it's output shape corresponds to the output shape of the\n associated operation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.StreamShape}</span><div class='sub-desc'><p>the output shape</p>\n</div></li></ul></div></div></div><div id='method-getStreamAndOpFlags' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-getStreamAndOpFlags' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-getStreamAndOpFlags' class='name expandable'>getStreamAndOpFlags</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.util.stream.PipelineHelper-method-getStreamAndOpFlags\" rel=\"java.util.stream.PipelineHelper-method-getStreamAndOpFlags\" class=\"docClass\">java.util.stream.PipelineHelper.getStreamAndOpFlags</a></p></div></div></div><div id='method-getStreamFlags' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-getStreamFlags' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-getStreamFlags' class='name expandable'>getStreamFlags</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the composition of stream flags of the stream source and all\n intermediate operations. ...</div><div class='long'><p>Returns the composition of stream flags of the stream source and all\n intermediate operations.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the composition of stream flags of the stream source and all\n         intermediate operations\n@see StreamOpFlag</p>\n</div></li></ul></div></div></div><div id='method-isParallel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-isParallel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-isParallel' class='name expandable'>isParallel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-lazySpliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-lazySpliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-lazySpliterator' class='name expandable'>lazySpliterator</a>( <span class='pre'>supplier</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a lazy spliterator that wraps and obtains the supplied the\n spliterator when a method is invoked on the lazy s...</div><div class='long'><p>Create a lazy spliterator that wraps and obtains the supplied the\n spliterator when a method is invoked on the lazy spliterator.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>supplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>the supplier of a spliterator</p>\n</div></li></ul></div></div></div><div id='method-makeNodeBuilder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-makeNodeBuilder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-makeNodeBuilder' class='name expandable'>makeNodeBuilder</a>( <span class='pre'>exactSizeIfKnown, generator</span> ) : Object {java.util.stream.Node.Builder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Make a node builder compatible with this stream shape. ...</div><div class='long'><p>Make a node builder compatible with this stream shape.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>exactSizeIfKnown</span> : Number<div class='sub-desc'><p>if {@literal >=0}, then a node builder will be\n created that has a fixed capacity of at most sizeIfKnown elements. If\n {@literal &lt; 0}, then the node builder has an unfixed capacity. A fixed\n capacity node builder will throw exceptions if an element is added after\n builder has reached capacity, or is built before the builder has reached\n capacity.</p>\n</div></li><li><span class='pre'>generator</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>the array generator to be used to create instances of a\n T[] array. For implementations supporting primitive nodes, this parameter\n may be ignored.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Node.Builder}</span><div class='sub-desc'><p>a node builder</p>\n</div></li></ul></div></div></div><div id='method-onClose' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-onClose' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-onClose' class='name expandable'>onClose</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-opEvaluateParallel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-opEvaluateParallel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-opEvaluateParallel' class='name expandable'>opEvaluateParallel</a>( <span class='pre'>helper, spliterator, generator, generator</span> ) : Object {java.util.stream.Node}<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs a parallel evaluation of the operation using the specified\n {@code PipelineHelper} which describes the upstr...</div><div class='long'><p>Performs a parallel evaluation of the operation using the specified\n {@code PipelineHelper} which describes the upstream intermediate\n operations.  Only called on stateful operations.  If <a href=\"#!/api/java.util.stream.AbstractPipeline-method-opIsStateful\" rel=\"java.util.stream.AbstractPipeline-method-opIsStateful\" class=\"docClass\">opIsStateful</a>() returns true then implementations must override the\n default implementation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>helper</span> : Object {java.util.stream.PipelineHelper}<div class='sub-desc'><p>the pipeline helper describing the pipeline stages</p>\n</div></li><li><span class='pre'>spliterator</span> : Object {java.util.Spliterator}<div class='sub-desc'><p>the source {@code Spliterator}</p>\n</div></li><li><span class='pre'>generator</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>the array generator</p>\n</div></li><li><span class='pre'>generator</span> : Object<div class='sub-desc'><p>the array generator</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Node}</span><div class='sub-desc'><p>a {@code Node} describing the result of the evaluation</p>\n</div></li></ul></div></div></div><div id='method-opEvaluateParallelLazy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-opEvaluateParallelLazy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-opEvaluateParallelLazy' class='name expandable'>opEvaluateParallelLazy</a>( <span class='pre'>helper, spliterator, spliterator</span> ) : Object {java.util.Spliterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Spliterator} describing a parallel evaluation of the\n operation, using the specified {@code Pipeline...</div><div class='long'><p>Returns a {@code Spliterator} describing a parallel evaluation of the\n operation, using the specified {@code PipelineHelper} which describes the\n upstream intermediate operations.  Only called on stateful operations.\n It is not necessary (though acceptable) to do a full computation of the\n result here; it is preferable, if possible, to describe the result via a\n lazily evaluated spliterator.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>helper</span> : Object {java.util.stream.PipelineHelper}<div class='sub-desc'><p>the pipeline helper</p>\n</div></li><li><span class='pre'>spliterator</span> : Object {java.util.Spliterator}<div class='sub-desc'><p>the source {@code Spliterator}</p>\n</div></li><li><span class='pre'>spliterator</span> : Object<div class='sub-desc'><p>the source {@code Spliterator}</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator}</span><div class='sub-desc'><p>a {@code Spliterator} describing the result of the evaluation</p>\n</div></li></ul></div></div></div><div id='method-opIsStateful' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-opIsStateful' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-opIsStateful' class='name expandable'>opIsStateful</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether this operation is stateful or not. ...</div><div class='long'><p>Returns whether this operation is stateful or not.  If it is stateful,\n then the method\n java.util.Spliterator, java.util.function.IntFunction)\n must be overridden.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this operation is stateful</p>\n</div></li></ul></div></div></div><div id='method-opWrapSink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-opWrapSink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-opWrapSink' class='name expandable'>opWrapSink</a>( <span class='pre'>flags, sink, sink</span> ) : Object {java.util.stream.Sink}<span class=\"signature\"></span></div><div class='description'><div class='short'>Accepts a {@code Sink} which will receive the results of this operation,\n and return a {@code Sink} which accepts ele...</div><div class='long'><p>Accepts a {@code Sink} which will receive the results of this operation,\n and return a {@code Sink} which accepts elements of the input type of\n this operation and which performs the operation, passing the results to\n the provided {@code Sink}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>The combined stream and operation flags up to, but not\n        including, this operation</p>\n</div></li><li><span class='pre'>sink</span> : Object {java.util.stream.Sink}<div class='sub-desc'><p>sink to which elements should be sent after processing</p>\n</div></li><li><span class='pre'>sink</span> : Object<div class='sub-desc'><p>sink to which elements should be sent after processing</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Sink}</span><div class='sub-desc'><p>a sink which accepts elements, perform the operation upon\n         each element, and passes the results (if any) to the provided\n         {@code Sink}.</p>\n</div></li></ul></div></div></div><div id='method-parallel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-parallel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-parallel' class='name expandable'>parallel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-sequential' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-sequential' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-sequential' class='name expandable'>sequential</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-wrap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-wrap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-wrap' class='name expandable'>wrap</a>( <span class='pre'>ph, supplier</span> ) : Object {java.util.Spliterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a spliterator that wraps a source spliterator, compatible with\n this stream shape, and operations associated w...</div><div class='long'><p>Create a spliterator that wraps a source spliterator, compatible with\n this stream shape, and operations associated with a <a href=\"#!/api/java.util.stream.PipelineHelper\" rel=\"java.util.stream.PipelineHelper\" class=\"docClass\">java.util.stream.PipelineHelper</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ph</span> : Object {java.util.stream.PipelineHelper}<div class='sub-desc'><p>the pipeline helper describing the pipeline stages</p>\n</div></li><li><span class='pre'>supplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>the supplier of a spliterator</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator}</span><div class='sub-desc'><p>a wrapping spliterator compatible with this shape</p>\n</div></li></ul></div></div></div><div id='method-wrapSink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.AbstractPipeline'>java.util.stream.AbstractPipeline</span><br/><a href='source/AbstractPipeline.html#java-util-stream-AbstractPipeline-method-wrapSink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.AbstractPipeline-method-wrapSink' class='name expandable'>wrapSink</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.util.stream.PipelineHelper-method-wrapSink\" rel=\"java.util.stream.PipelineHelper-method-wrapSink\" class=\"docClass\">java.util.stream.PipelineHelper.wrapSink</a></p></div></div></div></div></div></div></div>","meta":{}});