Ext.data.JsonP.java_util_stream_Collectors({"tagname":"class","name":"java.util.stream.Collectors","autodetected":{},"files":[{"filename":"Collectors.js","href":"Collectors.html#java-util-stream-Collectors"}],"extends":"java.lang.Object","since":"1.8","members":[{"name":"averagingDouble","tagname":"method","owner":"java.util.stream.Collectors","id":"method-averagingDouble","meta":{}},{"name":"averagingInt","tagname":"method","owner":"java.util.stream.Collectors","id":"method-averagingInt","meta":{}},{"name":"averagingLong","tagname":"method","owner":"java.util.stream.Collectors","id":"method-averagingLong","meta":{}},{"name":"collectingAndThen","tagname":"method","owner":"java.util.stream.Collectors","id":"method-collectingAndThen","meta":{}},{"name":"counting","tagname":"method","owner":"java.util.stream.Collectors","id":"method-counting","meta":{}},{"name":"groupingBy","tagname":"method","owner":"java.util.stream.Collectors","id":"method-groupingBy","meta":{}},{"name":"groupingByConcurrent","tagname":"method","owner":"java.util.stream.Collectors","id":"method-groupingByConcurrent","meta":{}},{"name":"joining","tagname":"method","owner":"java.util.stream.Collectors","id":"method-joining","meta":{}},{"name":"mapping","tagname":"method","owner":"java.util.stream.Collectors","id":"method-mapping","meta":{}},{"name":"maxBy","tagname":"method","owner":"java.util.stream.Collectors","id":"method-maxBy","meta":{}},{"name":"minBy","tagname":"method","owner":"java.util.stream.Collectors","id":"method-minBy","meta":{}},{"name":"partitioningBy","tagname":"method","owner":"java.util.stream.Collectors","id":"method-partitioningBy","meta":{}},{"name":"reducing","tagname":"method","owner":"java.util.stream.Collectors","id":"method-reducing","meta":{}},{"name":"summarizingDouble","tagname":"method","owner":"java.util.stream.Collectors","id":"method-summarizingDouble","meta":{}},{"name":"summarizingInt","tagname":"method","owner":"java.util.stream.Collectors","id":"method-summarizingInt","meta":{}},{"name":"summarizingLong","tagname":"method","owner":"java.util.stream.Collectors","id":"method-summarizingLong","meta":{}},{"name":"summingDouble","tagname":"method","owner":"java.util.stream.Collectors","id":"method-summingDouble","meta":{}},{"name":"summingInt","tagname":"method","owner":"java.util.stream.Collectors","id":"method-summingInt","meta":{}},{"name":"summingLong","tagname":"method","owner":"java.util.stream.Collectors","id":"method-summingLong","meta":{}},{"name":"toCollection","tagname":"method","owner":"java.util.stream.Collectors","id":"method-toCollection","meta":{}},{"name":"toConcurrentMap","tagname":"method","owner":"java.util.stream.Collectors","id":"method-toConcurrentMap","meta":{}},{"name":"toList","tagname":"method","owner":"java.util.stream.Collectors","id":"method-toList","meta":{}},{"name":"toMap","tagname":"method","owner":"java.util.stream.Collectors","id":"method-toMap","meta":{}},{"name":"toSet","tagname":"method","owner":"java.util.stream.Collectors","id":"method-toSet","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.Collectors","short_doc":"Implementations of java.util.stream.Collector that implement various useful reduction\n operations, such as accumulati...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.stream.Collectors</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Collectors.html#java-util-stream-Collectors' target='_blank'>Collectors.js</a></div></pre><div class='doc-contents'><p>Implementations of <a href=\"#!/api/java.util.stream.Collector\" rel=\"java.util.stream.Collector\" class=\"docClass\">java.util.stream.Collector</a> that implement various useful reduction\n operations, such as accumulating elements into collections, summarizing\n elements according to various criteria, etc.</p>\n\n<p> <p>The following are examples of using the predefined collectors to perform\n common mutable reduction tasks:</p>\n\n<p> <pre>{@code\n     // Accumulate names into a List\n     List<String> list = people.stream().map(Person::getName).collect(Collectors.toList());</String></pre></p>\n\n<pre><code> // Accumulate names into a TreeSet\n Set&lt;String&gt; set = people.stream().map(Person::getName).collect(Collectors.toCollection(TreeSet::new));\n\n // Convert elements to strings and concatenate them, separated by commas\n String joined = things.stream()\n                       .map(Object::toString)\n                       .collect(Collectors.joining(\", \"));\n\n // Compute sum of salaries of employee\n int total = employees.stream()\n                      .collect(Collectors.summingInt(Employee::getSalary)));\n\n // Group employees by department\n Map&lt;Department, List&lt;Employee&gt;&gt; byDept\n     = employees.stream()\n                .collect(Collectors.groupingBy(Employee::getDepartment));\n\n // Compute sum of salaries by department\n Map&lt;Department, Integer&gt; totalByDept\n     = employees.stream()\n                .collect(Collectors.groupingBy(Employee::getDepartment,\n                                               Collectors.summingInt(Employee::getSalary)));\n\n // Partition students into passing and failing\n Map&lt;Boolean, List&lt;Student&gt;&gt; passingFailing =\n     students.stream()\n             .collect(Collectors.partitioningBy(s -&gt; s.getGrade() &gt;= PASS_THRESHOLD));\n</code></pre>\n\n<p> }</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-averagingDouble' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-averagingDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-averagingDouble' class='name expandable'>averagingDouble</a>( <span class='pre'>mapper, , mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that produces the arithmetic mean of a double-valued\n function applied to the input eleme...</div><div class='long'><p>Returns a {@code Collector} that produces the arithmetic mean of a double-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.</p>\n\n<p> <p>The average returned can vary depending upon the order in which\n values are recorded, due to accumulated rounding error in\n addition of values of differing magnitudes. Values sorted by increasing\n absolute magnitude tend to yield more accurate results.  If any recorded\n value is a {@code NaN} or the sum is at any point a {@code NaN} then the\n average will be {@code NaN}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToDoubleFunction}<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the input elements</T></p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that produces the sum of a derived property</p>\n</div></li></ul></div></div></div><div id='method-averagingInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-averagingInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-averagingInt' class='name expandable'>averagingInt</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that produces the arithmetic mean of an integer-valued\n function applied to the input ele...</div><div class='long'><p>Returns a {@code Collector} that produces the arithmetic mean of an integer-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToIntFunction}<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that produces the sum of a derived property</p>\n</div></li></ul></div></div></div><div id='method-averagingLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-averagingLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-averagingLong' class='name expandable'>averagingLong</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that produces the arithmetic mean of a long-valued\n function applied to the input elements. ...</div><div class='long'><p>Returns a {@code Collector} that produces the arithmetic mean of a long-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToLongFunction}<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that produces the sum of a derived property</p>\n</div></li></ul></div></div></div><div id='method-collectingAndThen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-collectingAndThen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-collectingAndThen' class='name expandable'>collectingAndThen</a>( <span class='pre'>downstream, finisher, , , downstream, finisher</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adapts a {@code Collector} to perform an additional finishing\n transformation. ...</div><div class='long'><p>Adapts a {@code Collector} to perform an additional finishing\n transformation.  For example, one could adapt the <a href=\"#!/api/java.util.stream.Collectors-method-toList\" rel=\"java.util.stream.Collectors-method-toList\" class=\"docClass\">toList</a>()\n collector to always produce an immutable list with:\n <pre>{@code\n     List<String> people\n         = people.stream().collect(collectingAndThen(toList(), Collections::unmodifiableList));\n }</String></pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>downstream</span> : Object {java.util.stream.Collector}<div class='sub-desc'><p>a collector</p>\n</div></li><li><span class='pre'>finisher</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a function to be applied to the final result of the downstream collector</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><R> result type of the downstream collector</R></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><RR> result type of the resulting collector</RR></p>\n</div></li><li><span class='pre'>downstream</span> : Object<div class='sub-desc'><p>a collector</p>\n</div></li><li><span class='pre'>finisher</span> : Object<div class='sub-desc'><p>a function to be applied to the final result of the downstream collector</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a collector which performs the action of the downstream collector,\n followed by an additional finishing step</p>\n</div></li></ul></div></div></div><div id='method-counting' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-counting' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-counting' class='name expandable'>counting</a>( <span class='pre'></span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} accepting elements of type {@code T} that\n counts the number of input elements. ...</div><div class='long'><p>Returns a {@code Collector} accepting elements of type {@code T} that\n counts the number of input elements.  If no elements are present, the\n result is 0.\n@implSpec This produces a result equivalent to:\n <pre>{@code\n     reducing(0L, e -> 1L, Long::sum)\n }</pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the input elements</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that counts the input elements</p>\n</div></li></ul></div></div></div><div id='method-groupingBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-groupingBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-groupingBy' class='name expandable'>groupingBy</a>( <span class='pre'>classifier, downstream, mapFactory, , , , classifier, downstream, mapFactory</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} implementing a cascaded \"group by\" operation\n on input elements of type {@code T}, groupi...</div><div class='long'><p>Returns a {@code Collector} implementing a cascaded \"group by\" operation\n on input elements of type {@code T}, grouping elements according to a\n classification function, and then performing a reduction operation on\n the values associated with a given key using the specified downstream\n {@code Collector}.  The {@code Map} produced by the Collector is created\n with the supplied factory function.</p>\n\n<p> <p>The classification function maps elements to some key type {@code K}.\n The downstream collector operates on elements of type {@code T} and\n produces a result of type {@code D}. The resulting collector produces a\n {@code Map&lt;K, D>}.</p>\n\n<p> <p>For example, to compute the set of last names of people in each city,\n where the city names are sorted:\n <pre>{@code\n     Map&lt;City, Set<String>> namesByCity\n         = people.stream().collect(groupingBy(Person::getCity, TreeMap::new,\n                                              mapping(Person::getLastName, toSet())));\n }</String></pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>classifier</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a classifier function mapping input elements to keys</p>\n</div></li><li><span class='pre'>downstream</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a {@code Collector} implementing the downstream reduction</p>\n</div></li><li><span class='pre'>mapFactory</span> : Object {java.util.stream.Collector}<div class='sub-desc'><p>a function which, when called, produces a new empty\n                   {@code Map} of the desired type</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><A> the intermediate accumulation type of the downstream collector</A></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><D> the result type of the downstream reduction</D></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><M> the type of the resulting {@code Map}</M></p>\n</div></li><li><span class='pre'>classifier</span> : Object<div class='sub-desc'><p>a classifier function mapping input elements to keys</p>\n</div></li><li><span class='pre'>downstream</span> : Object<div class='sub-desc'><p>a {@code Collector} implementing the downstream reduction</p>\n</div></li><li><span class='pre'>mapFactory</span> : Object<div class='sub-desc'><p>a function which, when called, produces a new empty\n                   {@code Map} of the desired type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} implementing the cascaded group-by operation\n@see <a href=\"#!/api/java.util.stream.Collectors-method-groupingBy\" rel=\"java.util.stream.Collectors-method-groupingBy\" class=\"docClass\">groupingBy</a>(Function, Collector)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-groupingBy\" rel=\"java.util.stream.Collectors-method-groupingBy\" class=\"docClass\">groupingBy</a>(Function)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-groupingByConcurrent\" rel=\"java.util.stream.Collectors-method-groupingByConcurrent\" class=\"docClass\">groupingByConcurrent</a>(Function, Supplier, Collector)</p>\n</div></li></ul></div></div></div><div id='method-groupingByConcurrent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-groupingByConcurrent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-groupingByConcurrent' class='name expandable'>groupingByConcurrent</a>( <span class='pre'>classifier, downstream, mapFactory, , , classifier, downstream, mapFactory</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a concurrent {@code Collector} implementing a cascaded \"group by\"\n operation on input elements of type {@code...</div><div class='long'><p>Returns a concurrent {@code Collector} implementing a cascaded \"group by\"\n operation on input elements of type {@code T}, grouping elements\n according to a classification function, and then performing a reduction\n operation on the values associated with a given key using the specified\n downstream {@code Collector}.  The {@code ConcurrentMap} produced by the\n Collector is created with the supplied factory function.</p>\n\n<p> <p>This is a <a href=\"#!/api/java.util.stream.Collector.Characteristics-property-CONCURRENT\" rel=\"java.util.stream.Collector.Characteristics-property-CONCURRENT\" class=\"docClass\">concurrent</a> and\n <a href=\"#!/api/java.util.stream.Collector.Characteristics-property-UNORDERED\" rel=\"java.util.stream.Collector.Characteristics-property-UNORDERED\" class=\"docClass\">unordered</a> Collector.</p>\n\n<p> <p>The classification function maps elements to some key type {@code K}.\n The downstream collector operates on elements of type {@code T} and\n produces a result of type {@code D}. The resulting collector produces a\n {@code Map&lt;K, D>}.</p>\n\n<p> <p>For example, to compute the set of last names of people in each city,\n where the city names are sorted:\n <pre>{@code\n     ConcurrentMap&lt;City, Set<String>> namesByCity\n         = people.stream().collect(groupingBy(Person::getCity, ConcurrentSkipListMap::new,\n                                              mapping(Person::getLastName, toSet())));\n }</String></pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>classifier</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a classifier function mapping input elements to keys</p>\n</div></li><li><span class='pre'>downstream</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a {@code Collector} implementing the downstream reduction</p>\n</div></li><li><span class='pre'>mapFactory</span> : Object {java.util.stream.Collector}<div class='sub-desc'><p>a function which, when called, produces a new empty\n                   {@code ConcurrentMap} of the desired type</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><D> the result type of the downstream reduction</D></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><M> the type of the resulting {@code ConcurrentMap}</M></p>\n</div></li><li><span class='pre'>classifier</span> : Object<div class='sub-desc'><p>a classifier function mapping input elements to keys</p>\n</div></li><li><span class='pre'>downstream</span> : Object<div class='sub-desc'><p>a {@code Collector} implementing the downstream reduction</p>\n</div></li><li><span class='pre'>mapFactory</span> : Object<div class='sub-desc'><p>a function which, when called, produces a new empty\n                   {@code ConcurrentMap} of the desired type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a concurrent, unordered {@code Collector} implementing the cascaded group-by operation\n@see <a href=\"#!/api/java.util.stream.Collectors-method-groupingByConcurrent\" rel=\"java.util.stream.Collectors-method-groupingByConcurrent\" class=\"docClass\">groupingByConcurrent</a>(Function)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-groupingByConcurrent\" rel=\"java.util.stream.Collectors-method-groupingByConcurrent\" class=\"docClass\">groupingByConcurrent</a>(Function, Collector)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-groupingBy\" rel=\"java.util.stream.Collectors-method-groupingBy\" class=\"docClass\">groupingBy</a>(Function, Supplier, Collector)</p>\n</div></li></ul></div></div></div><div id='method-joining' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-joining' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-joining' class='name expandable'>joining</a>( <span class='pre'>delimiter, prefix, suffix</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that concatenates the input elements,\n separated by the specified delimiter, with the spe...</div><div class='long'><p>Returns a {@code Collector} that concatenates the input elements,\n separated by the specified delimiter, with the specified prefix and\n suffix, in encounter order.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>delimiter</span> : Object {CharSequence}<div class='sub-desc'><p>the delimiter to be used between each element</p>\n</div></li><li><span class='pre'>prefix</span> : Object {CharSequence}<div class='sub-desc'><p>the sequence of characters to be used at the beginning\n                of the joined result</p>\n</div></li><li><span class='pre'>suffix</span> : Object {CharSequence}<div class='sub-desc'><p>the sequence of characters to be used at the end\n                of the joined result</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>A {@code Collector} which concatenates CharSequence elements,\n separated by the specified delimiter, in encounter order</p>\n</div></li></ul></div></div></div><div id='method-mapping' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-mapping' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-mapping' class='name expandable'>mapping</a>( <span class='pre'>mapper, downstream, , , , mapper, downstream</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adapts a {@code Collector} accepting elements of type {@code U} to one\n accepting elements of type {@code T} by apply...</div><div class='long'><p>Adapts a {@code Collector} accepting elements of type {@code U} to one\n accepting elements of type {@code T} by applying a mapping function to\n each input element before accumulation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a function to be applied to the input elements</p>\n</div></li><li><span class='pre'>downstream</span> : Object {java.util.stream.Collector}<div class='sub-desc'><p>a collector which will accept mapped values</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> type of elements accepted by downstream collector</U></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><A> intermediate accumulation type of the downstream collector</A></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><R> result type of collector</R></p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a function to be applied to the input elements</p>\n</div></li><li><span class='pre'>downstream</span> : Object<div class='sub-desc'><p>a collector which will accept mapped values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a collector which applies the mapping function to the input\n elements and provides the mapped results to the downstream collector</p>\n</div></li></ul></div></div></div><div id='method-maxBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-maxBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-maxBy' class='name expandable'>maxBy</a>( <span class='pre'>comparator, , comparator</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that produces the maximal element according\n to a given {@code Comparator}, described as ...</div><div class='long'><p>Returns a {@code Collector} that produces the maximal element according\n to a given {@code Comparator}, described as an {@code Optional<T>}.</T></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>comparator</span> : Object {java.util.Comparator}<div class='sub-desc'><p>a {@code Comparator} for comparing elements</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the input elements</T></p>\n</div></li><li><span class='pre'>comparator</span> : Object<div class='sub-desc'><p>a {@code Comparator} for comparing elements</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that produces the maximal value</p>\n</div></li></ul></div></div></div><div id='method-minBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-minBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-minBy' class='name expandable'>minBy</a>( <span class='pre'>comparator, , comparator</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that produces the minimal element according\n to a given {@code Comparator}, described as ...</div><div class='long'><p>Returns a {@code Collector} that produces the minimal element according\n to a given {@code Comparator}, described as an {@code Optional<T>}.</T></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>comparator</span> : Object {java.util.Comparator}<div class='sub-desc'><p>a {@code Comparator} for comparing elements</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the input elements</T></p>\n</div></li><li><span class='pre'>comparator</span> : Object<div class='sub-desc'><p>a {@code Comparator} for comparing elements</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that produces the minimal value</p>\n</div></li></ul></div></div></div><div id='method-partitioningBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-partitioningBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-partitioningBy' class='name expandable'>partitioningBy</a>( <span class='pre'>predicate, downstream, , predicate, downstream</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} which partitions the input elements according\n to a {@code Predicate}, reduces the values...</div><div class='long'><p>Returns a {@code Collector} which partitions the input elements according\n to a {@code Predicate}, reduces the values in each partition according to\n another {@code Collector}, and organizes them into a\n {@code Map&lt;Boolean, D>} whose values are the result of the downstream\n reduction.</p>\n\n<p> <p>There are no guarantees on the type, mutability,\n serializability, or thread-safety of the {@code Map} returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>predicate</span> : Object {java.util.function.Predicate}<div class='sub-desc'><p>a predicate used for classifying input elements</p>\n</div></li><li><span class='pre'>downstream</span> : Object {java.util.stream.Collector}<div class='sub-desc'><p>a {@code Collector} implementing the downstream\n                   reduction</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><D> the result type of the downstream reduction</D></p>\n</div></li><li><span class='pre'>predicate</span> : Object<div class='sub-desc'><p>a predicate used for classifying input elements</p>\n</div></li><li><span class='pre'>downstream</span> : Object<div class='sub-desc'><p>a {@code Collector} implementing the downstream\n                   reduction</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} implementing the cascaded partitioning\n         operation\n@see <a href=\"#!/api/java.util.stream.Collectors-method-partitioningBy\" rel=\"java.util.stream.Collectors-method-partitioningBy\" class=\"docClass\">partitioningBy</a>(Predicate)</p>\n</div></li></ul></div></div></div><div id='method-reducing' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-reducing' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-reducing' class='name expandable'>reducing</a>( <span class='pre'>identity, mapper, op, identity, mapper, op</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} which performs a reduction of its\n input elements under a specified mapping function and\n...</div><div class='long'><p>Returns a {@code Collector} which performs a reduction of its\n input elements under a specified mapping function and\n {@code BinaryOperator}. This is a generalization of\n BinaryOperator) which allows a transformation\n of the elements before reduction.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>identity</span> : Object {Object}<div class='sub-desc'><p>the identity value for the reduction (also, the value\n                 that is returned when there are no input elements)</p>\n</div></li><li><span class='pre'>mapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a mapping function to apply to each input value</p>\n</div></li><li><span class='pre'>op</span> : Object {java.util.function.BinaryOperator}<div class='sub-desc'><p>a {@code BinaryOperator<U>} used to reduce the mapped values</U></p>\n</div></li><li><span class='pre'>identity</span> : Object<div class='sub-desc'><p>the identity value for the reduction (also, the value\n                 that is returned when there are no input elements)</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a mapping function to apply to each input value</p>\n</div></li><li><span class='pre'>op</span> : Object<div class='sub-desc'><p>a {@code BinaryOperator<U>} used to reduce the mapped values</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} implementing the map-reduce operation\n@see <a href=\"#!/api/java.util.stream.Collectors-method-reducing\" rel=\"java.util.stream.Collectors-method-reducing\" class=\"docClass\">reducing</a>(Object, BinaryOperator)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-reducing\" rel=\"java.util.stream.Collectors-method-reducing\" class=\"docClass\">reducing</a>(BinaryOperator)</p>\n</div></li></ul></div></div></div><div id='method-summarizingDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-summarizingDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-summarizingDouble' class='name expandable'>summarizingDouble</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} which applies an {@code double}-producing\n mapping function to each input element, and re...</div><div class='long'><p>Returns a {@code Collector} which applies an {@code double}-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToDoubleFunction}<div class='sub-desc'><p>a mapping function to apply to each element</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a mapping function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} implementing the summary-statistics reduction\n@see <a href=\"#!/api/java.util.stream.Collectors-method-summarizingLong\" rel=\"java.util.stream.Collectors-method-summarizingLong\" class=\"docClass\">summarizingLong</a>(ToLongFunction)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-summarizingInt\" rel=\"java.util.stream.Collectors-method-summarizingInt\" class=\"docClass\">summarizingInt</a>(ToIntFunction)</p>\n</div></li></ul></div></div></div><div id='method-summarizingInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-summarizingInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-summarizingInt' class='name expandable'>summarizingInt</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} which applies an {@code int}-producing\n mapping function to each input element, and retur...</div><div class='long'><p>Returns a {@code Collector} which applies an {@code int}-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToIntFunction}<div class='sub-desc'><p>a mapping function to apply to each element</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a mapping function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} implementing the summary-statistics reduction\n@see <a href=\"#!/api/java.util.stream.Collectors-method-summarizingDouble\" rel=\"java.util.stream.Collectors-method-summarizingDouble\" class=\"docClass\">summarizingDouble</a>(ToDoubleFunction)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-summarizingLong\" rel=\"java.util.stream.Collectors-method-summarizingLong\" class=\"docClass\">summarizingLong</a>(ToLongFunction)</p>\n</div></li></ul></div></div></div><div id='method-summarizingLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-summarizingLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-summarizingLong' class='name expandable'>summarizingLong</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} which applies an {@code long}-producing\n mapping function to each input element, and retu...</div><div class='long'><p>Returns a {@code Collector} which applies an {@code long}-producing\n mapping function to each input element, and returns summary statistics\n for the resulting values.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToLongFunction}<div class='sub-desc'><p>the mapping function to apply to each element</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>the mapping function to apply to each element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} implementing the summary-statistics reduction\n@see <a href=\"#!/api/java.util.stream.Collectors-method-summarizingDouble\" rel=\"java.util.stream.Collectors-method-summarizingDouble\" class=\"docClass\">summarizingDouble</a>(ToDoubleFunction)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-summarizingInt\" rel=\"java.util.stream.Collectors-method-summarizingInt\" class=\"docClass\">summarizingInt</a>(ToIntFunction)</p>\n</div></li></ul></div></div></div><div id='method-summingDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-summingDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-summingDouble' class='name expandable'>summingDouble</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that produces the sum of a double-valued\n function applied to the input elements. ...</div><div class='long'><p>Returns a {@code Collector} that produces the sum of a double-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.</p>\n\n<p> <p>The sum returned can vary depending upon the order in which\n values are recorded, due to accumulated rounding error in\n addition of values of differing magnitudes. Values sorted by increasing\n absolute magnitude tend to yield more accurate results.  If any recorded\n value is a {@code NaN} or the sum is at any point a {@code NaN} then the\n sum will be {@code NaN}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToDoubleFunction}<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that produces the sum of a derived property</p>\n</div></li></ul></div></div></div><div id='method-summingInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-summingInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-summingInt' class='name expandable'>summingInt</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that produces the sum of a integer-valued\n function applied to the input elements. ...</div><div class='long'><p>Returns a {@code Collector} that produces the sum of a integer-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToIntFunction}<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that produces the sum of a derived property</p>\n</div></li></ul></div></div></div><div id='method-summingLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-summingLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-summingLong' class='name expandable'>summingLong</a>( <span class='pre'>mapper, mapper</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that produces the sum of a long-valued\n function applied to the input elements. ...</div><div class='long'><p>Returns a {@code Collector} that produces the sum of a long-valued\n function applied to the input elements.  If no elements are present,\n the result is 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mapper</span> : Object {java.util.function.ToLongFunction}<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li><li><span class='pre'>mapper</span> : Object<div class='sub-desc'><p>a function extracting the property to be summed</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} that produces the sum of a derived property</p>\n</div></li></ul></div></div></div><div id='method-toCollection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-toCollection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-toCollection' class='name expandable'>toCollection</a>( <span class='pre'>collectionFactory, , collectionFactory</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that accumulates the input elements into a\n new {@code Collection}, in encounter order. ...</div><div class='long'><p>Returns a {@code Collector} that accumulates the input elements into a\n new {@code Collection}, in encounter order.  The {@code Collection} is\n created by the provided factory.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>collectionFactory</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a {@code Supplier} which returns a new, empty\n {@code Collection} of the appropriate type</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><C> the type of the resulting {@code Collection}</C></p>\n</div></li><li><span class='pre'>collectionFactory</span> : Object<div class='sub-desc'><p>a {@code Supplier} which returns a new, empty\n {@code Collection} of the appropriate type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} which collects all the input elements into a\n {@code Collection}, in encounter order</p>\n</div></li></ul></div></div></div><div id='method-toConcurrentMap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-toConcurrentMap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-toConcurrentMap' class='name expandable'>toConcurrentMap</a>( <span class='pre'>keyMapper, valueMapper, mergeFunction, mapSupplier, keyMapper, valueMapper, mergeFunction, mapSupplier</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a concurrent {@code Collector} that accumulates elements into a\n {@code ConcurrentMap} whose keys and values ...</div><div class='long'><p>Returns a concurrent {@code Collector} that accumulates elements into a\n {@code ConcurrentMap} whose keys and values are the result of applying\n the provided mapping functions to the input elements.</p>\n\n<p> <p>If the mapped keys contains duplicates (according to Object.equals(Object)),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.  The\n {@code ConcurrentMap} is created by a provided supplier function.</p>\n\n<p> <p>This is a <a href=\"#!/api/java.util.stream.Collector.Characteristics-property-CONCURRENT\" rel=\"java.util.stream.Collector.Characteristics-property-CONCURRENT\" class=\"docClass\">concurrent</a> and\n <a href=\"#!/api/java.util.stream.Collector.Characteristics-property-UNORDERED\" rel=\"java.util.stream.Collector.Characteristics-property-UNORDERED\" class=\"docClass\">unordered</a> Collector.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keyMapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a mapping function to produce keys</p>\n</div></li><li><span class='pre'>valueMapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a mapping function to produce values</p>\n</div></li><li><span class='pre'>mergeFunction</span> : Object {java.util.function.BinaryOperator}<div class='sub-desc'><p>a merge function, used to resolve collisions between\n                      values associated with the same key, as supplied\n                      to Object, BiFunction)</p>\n</div></li><li><span class='pre'>mapSupplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a function which returns a new, empty {@code Map} into\n                    which the results will be inserted</p>\n</div></li><li><span class='pre'>keyMapper</span> : Object<div class='sub-desc'><p>a mapping function to produce keys</p>\n</div></li><li><span class='pre'>valueMapper</span> : Object<div class='sub-desc'><p>a mapping function to produce values</p>\n</div></li><li><span class='pre'>mergeFunction</span> : Object<div class='sub-desc'><p>a merge function, used to resolve collisions between\n                      values associated with the same key, as supplied\n                      to Object, BiFunction)</p>\n</div></li><li><span class='pre'>mapSupplier</span> : Object<div class='sub-desc'><p>a function which returns a new, empty {@code Map} into\n                    which the results will be inserted</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a concurrent, unordered {@code Collector} which collects elements into a\n {@code ConcurrentMap} whose keys are the result of applying a key mapping\n function to the input elements, and whose values are the result of\n applying a value mapping function to all input elements equal to the key\n and combining them using the merge function\n@see <a href=\"#!/api/java.util.stream.Collectors-method-toConcurrentMap\" rel=\"java.util.stream.Collectors-method-toConcurrentMap\" class=\"docClass\">toConcurrentMap</a>(Function, Function)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-toConcurrentMap\" rel=\"java.util.stream.Collectors-method-toConcurrentMap\" class=\"docClass\">toConcurrentMap</a>(Function, Function, BinaryOperator)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-toMap\" rel=\"java.util.stream.Collectors-method-toMap\" class=\"docClass\">toMap</a>(Function, Function, BinaryOperator, Supplier)</p>\n</div></li></ul></div></div></div><div id='method-toList' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-toList' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-toList' class='name expandable'>toList</a>( <span class='pre'></span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that accumulates the input elements into a\n new {@code List}. ...</div><div class='long'><p>Returns a {@code Collector} that accumulates the input elements into a\n new {@code List}. There are no guarantees on the type, mutability,\n serializability, or thread-safety of the {@code List} returned; if more\n control over the returned {@code List} is required, use <a href=\"#!/api/java.util.stream.Collectors-method-toCollection\" rel=\"java.util.stream.Collectors-method-toCollection\" class=\"docClass\">toCollection</a>(Supplier).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the input elements</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} which collects all the input elements into a\n {@code List}, in encounter order</p>\n</div></li></ul></div></div></div><div id='method-toMap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-toMap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-toMap' class='name expandable'>toMap</a>( <span class='pre'>keyMapper, valueMapper, mergeFunction, mapSupplier, , keyMapper, valueMapper, mergeFunction, mapSupplier</span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that accumulates elements into a\n {@code Map} whose keys and values are the result of app...</div><div class='long'><p>Returns a {@code Collector} that accumulates elements into a\n {@code Map} whose keys and values are the result of applying the provided\n mapping functions to the input elements.</p>\n\n<p> <p>If the mapped\n keys contains duplicates (according to Object.equals(Object)),\n the value mapping function is applied to each equal element, and the\n results are merged using the provided merging function.  The {@code Map}\n is created by a provided supplier function.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keyMapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a mapping function to produce keys</p>\n</div></li><li><span class='pre'>valueMapper</span> : Object {java.util.function.Function}<div class='sub-desc'><p>a mapping function to produce values</p>\n</div></li><li><span class='pre'>mergeFunction</span> : Object {java.util.function.BinaryOperator}<div class='sub-desc'><p>a merge function, used to resolve collisions between\n                      values associated with the same key, as supplied\n                      to Object, BiFunction)</p>\n</div></li><li><span class='pre'>mapSupplier</span> : Object {java.util.function.Supplier}<div class='sub-desc'><p>a function which returns a new, empty {@code Map} into\n                    which the results will be inserted</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><M> the type of the resulting {@code Map}</M></p>\n</div></li><li><span class='pre'>keyMapper</span> : Object<div class='sub-desc'><p>a mapping function to produce keys</p>\n</div></li><li><span class='pre'>valueMapper</span> : Object<div class='sub-desc'><p>a mapping function to produce values</p>\n</div></li><li><span class='pre'>mergeFunction</span> : Object<div class='sub-desc'><p>a merge function, used to resolve collisions between\n                      values associated with the same key, as supplied\n                      to Object, BiFunction)</p>\n</div></li><li><span class='pre'>mapSupplier</span> : Object<div class='sub-desc'><p>a function which returns a new, empty {@code Map} into\n                    which the results will be inserted</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} which collects elements into a {@code Map}\n whose keys are the result of applying a key mapping function to the input\n elements, and whose values are the result of applying a value mapping\n function to all input elements equal to the key and combining them\n using the merge function\n@see <a href=\"#!/api/java.util.stream.Collectors-method-toMap\" rel=\"java.util.stream.Collectors-method-toMap\" class=\"docClass\">toMap</a>(Function, Function)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-toMap\" rel=\"java.util.stream.Collectors-method-toMap\" class=\"docClass\">toMap</a>(Function, Function, BinaryOperator)\n@see <a href=\"#!/api/java.util.stream.Collectors-method-toConcurrentMap\" rel=\"java.util.stream.Collectors-method-toConcurrentMap\" class=\"docClass\">toConcurrentMap</a>(Function, Function, BinaryOperator, Supplier)</p>\n</div></li></ul></div></div></div><div id='method-toSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Collectors'>java.util.stream.Collectors</span><br/><a href='source/Collectors.html#java-util-stream-Collectors-method-toSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Collectors-method-toSet' class='name expandable'>toSet</a>( <span class='pre'></span> ) : Object {java.util.stream.Collector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Collector} that accumulates the input elements into a\n new {@code Set}. ...</div><div class='long'><p>Returns a {@code Collector} that accumulates the input elements into a\n new {@code Set}. There are no guarantees on the type, mutability,\n serializability, or thread-safety of the {@code Set} returned; if more\n control over the returned {@code Set} is required, use\n <a href=\"#!/api/java.util.stream.Collectors-method-toCollection\" rel=\"java.util.stream.Collectors-method-toCollection\" class=\"docClass\">toCollection</a>(Supplier).</p>\n\n<p> <p>This is an <a href=\"#!/api/java.util.stream.Collector.Characteristics-property-UNORDERED\" rel=\"java.util.stream.Collector.Characteristics-property-UNORDERED\" class=\"docClass\">unordered</a>\n Collector.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the input elements</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Collector}</span><div class='sub-desc'><p>a {@code Collector} which collects all the input elements into a\n {@code Set}</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});