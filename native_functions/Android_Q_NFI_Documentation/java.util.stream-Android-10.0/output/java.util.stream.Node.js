Ext.data.JsonP.java_util_stream_Node({"tagname":"class","name":"java.util.stream.Node","autodetected":{},"files":[{"filename":"Node.js","href":"Node.html#java-util-stream-Node"}],"params":[{"tagname":"params","doc":"<p><T> the type of elements.\n Visible for CTS testing only (OpenJDK8 tests).</T></p>\n"}],"since":"1.8","hide":true,"members":[{"name":"asArray","tagname":"method","owner":"java.util.stream.Node","id":"method-asArray","meta":{}},{"name":"copyInto","tagname":"method","owner":"java.util.stream.Node","id":"method-copyInto","meta":{}},{"name":"count","tagname":"method","owner":"java.util.stream.Node","id":"method-count","meta":{}},{"name":"forEach","tagname":"method","owner":"java.util.stream.Node","id":"method-forEach","meta":{}},{"name":"getChild","tagname":"method","owner":"java.util.stream.Node","id":"method-getChild","meta":{}},{"name":"getChildCount","tagname":"method","owner":"java.util.stream.Node","id":"method-getChildCount","meta":{}},{"name":"getShape","tagname":"method","owner":"java.util.stream.Node","id":"method-getShape","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.stream.Node","id":"method-spliterator","meta":{}},{"name":"truncate","tagname":"method","owner":"java.util.stream.Node","id":"method-truncate","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.stream.Node","short_doc":"An immutable container for describing an ordered sequence of elements of some\n type {@code T}. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Node.html#java-util-stream-Node' target='_blank'>Node.js</a></div></pre><div class='doc-contents'><p>An immutable container for describing an ordered sequence of elements of some\n type {@code T}.</p>\n\n<p> <p>A {@code Node} contains a fixed number of elements, which can be accessed\n via the <a href=\"#!/api/java.util.stream.Node-method-count\" rel=\"java.util.stream.Node-method-count\" class=\"docClass\">count</a>, <a href=\"#!/api/java.util.stream.Node-method-spliterator\" rel=\"java.util.stream.Node-method-spliterator\" class=\"docClass\">spliterator</a>, <a href=\"#!/api/java.util.stream.Node-method-forEach\" rel=\"java.util.stream.Node-method-forEach\" class=\"docClass\">forEach</a>,\n <a href=\"#!/api/java.util.stream.Node-method-asArray\" rel=\"java.util.stream.Node-method-asArray\" class=\"docClass\">asArray</a>, or <a href=\"#!/api/java.util.stream.Node-method-copyInto\" rel=\"java.util.stream.Node-method-copyInto\" class=\"docClass\">copyInto</a> methods.  A {@code Node} may have zero\n or more child {@code Node}s; if it has no children (accessed via\n <a href=\"#!/api/java.util.stream.Node-method-getChildCount\" rel=\"java.util.stream.Node-method-getChildCount\" class=\"docClass\">getChildCount</a> and <a href=\"#!/api/java.util.stream.Node-method-getChild\" rel=\"java.util.stream.Node-method-getChild\" class=\"docClass\">getChild</a>(int), it is considered <em>flat\n </em> or a <em>leaf</em>; if it has children, it is considered an\n <em>internal</em> node.  The size of an internal node is the sum of sizes of\n its children.</p>\n\n<p> @apiNote\n <p>A {@code Node} typically does not store the elements directly, but instead\n mediates access to one or more existing (effectively immutable) data\n structures such as a {@code Collection}, array, or a set of other\n {@code Node}s.  Commonly {@code Node}s are formed into a tree whose shape\n corresponds to the computation tree that produced the elements that are\n contained in the leaf nodes.  The use of {@code Node} within the stream\n framework is largely to avoid copying data unnecessarily during parallel\n operations.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> the type of elements.\n Visible for CTS testing only (OpenJDK8 tests).</T></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-asArray' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-asArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-asArray' class='name expandable'>asArray</a>( <span class='pre'>generator</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Provides an array view of the contents of this node. ...</div><div class='long'><p>Provides an array view of the contents of this node.</p>\n\n<p> <p>Depending on the underlying implementation, this may return a\n reference to an internal array rather than a copy.  Since the returned\n array may be shared, the returned array should not be modified.  The\n {@code generator} function may be consulted to create the array if a new\n array needs to be created.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>generator</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>a factory function which takes an integer parameter and\n        returns a new, empty array of that size and of the appropriate\n        array type</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an array containing the contents of this {@code Node}</p>\n</div></li></ul></div></div></div><div id='method-copyInto' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-copyInto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-copyInto' class='name expandable'>copyInto</a>( <span class='pre'>array, offset</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Copies the content of this {@code Node} into an array, starting at a\n given offset into the array. ...</div><div class='long'><p>Copies the content of this {@code Node} into an array, starting at a\n given offset into the array.  It is the caller's responsibility to ensure\n there is sufficient room in the array, otherwise unspecified behaviour\n will occur if the array length is less than the number of elements\n contained in this node.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>array</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the array into which to copy the contents of this\n       {@code Node}</p>\n</div></li><li><span class='pre'>offset</span> : Number<div class='sub-desc'><p>the starting offset within the array</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException if copying would cause access of data\n         outside array bounds</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code array} is {@code null}</p>\n</div></li></ul></div></div></div><div id='method-count' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-count' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-count' class='name expandable'>count</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of elements contained in this node. ...</div><div class='long'><p>Returns the number of elements contained in this node.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of elements contained in this node</p>\n</div></li></ul></div></div></div><div id='method-forEach' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-forEach' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-forEach' class='name expandable'>forEach</a>( <span class='pre'>consumer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Traverses the elements of this node, and invoke the provided\n {@code Consumer} with each element. ...</div><div class='long'><p>Traverses the elements of this node, and invoke the provided\n {@code Consumer} with each element.  Elements are provided in encounter\n order if the source for the {@code Node} has a defined encounter order.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>consumer</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>a {@code Consumer} that is to be invoked with each\n        element in this {@code Node}</p>\n</div></li></ul></div></div></div><div id='method-getChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-getChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-getChild' class='name expandable'>getChild</a>( <span class='pre'>i, i</span> ) : Object {java.util.stream.Node}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the child {@code Node} at a given index. ...</div><div class='long'><p>Retrieves the child {@code Node} at a given index.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>i</span> : Number<div class='sub-desc'><p>the index to the child node</p>\n</div></li><li><span class='pre'>i</span> : Object<div class='sub-desc'><p>the index to the child node</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Node}</span><div class='sub-desc'><p>the child node</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException if the index is less than 0 or greater\n         than or equal to the number of child nodes</p>\n</div></li></ul></div></div></div><div id='method-getChildCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-getChildCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-getChildCount' class='name expandable'>getChildCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of child nodes of this node. ...</div><div class='long'><p>Returns the number of child nodes of this node.\n@implSpec The default implementation returns zero.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of child nodes</p>\n</div></li></ul></div></div></div><div id='method-getShape' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-getShape' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-getShape' class='name expandable'>getShape</a>( <span class='pre'></span> ) : Object {java.util.stream.StreamShape}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the {@code StreamShape} associated with this {@code Node}. ...</div><div class='long'><p>Gets the {@code StreamShape} associated with this {@code Node}.\n@implSpec The default in {@code Node} returns\n {@code StreamShape.REFERENCE}</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.StreamShape}</span><div class='sub-desc'><p>the stream shape associated with this node</p>\n</div></li></ul></div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> ) : Object {java.util.Spliterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a Spliterator describing the elements contained in this\n {@code Node}. ...</div><div class='long'><p>Returns a Spliterator describing the elements contained in this\n {@code Node}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator}</span><div class='sub-desc'><p>a {@code Spliterator} describing the elements contained in this\n         {@code Node}</p>\n</div></li></ul></div></div></div><div id='method-truncate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.stream.Node'>java.util.stream.Node</span><br/><a href='source/Node.html#java-util-stream-Node-method-truncate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.stream.Node-method-truncate' class='name expandable'>truncate</a>( <span class='pre'>from, to, generator</span> ) : Object {java.util.stream.Node}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a node describing a subsequence of the elements of this node,\n starting at the given inclusive start offset an...</div><div class='long'><p>Return a node describing a subsequence of the elements of this node,\n starting at the given inclusive start offset and ending at the given\n exclusive end offset.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>from</span> : Number<div class='sub-desc'><p>The (inclusive) starting offset of elements to include, must\n             be in range 0..count().</p>\n</div></li><li><span class='pre'>to</span> : Number<div class='sub-desc'><p>The (exclusive) end offset of elements to include, must be\n           in range 0..count().</p>\n</div></li><li><span class='pre'>generator</span> : Object {java.util.function.IntFunction}<div class='sub-desc'><p>A function to be used to create a new array, if needed,\n                  for reference nodes.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Node}</span><div class='sub-desc'><p>the truncated node</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});