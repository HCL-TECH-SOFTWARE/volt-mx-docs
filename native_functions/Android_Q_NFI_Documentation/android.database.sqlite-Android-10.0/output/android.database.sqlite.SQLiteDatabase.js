Ext.data.JsonP.android_database_sqlite_SQLiteDatabase({"tagname":"class","name":"android.database.sqlite.SQLiteDatabase","autodetected":{},"files":[{"filename":"SQLiteDatabase.js","href":"SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase"}],"extends":"android.database.sqlite.SQLiteClosable","members":[{"name":"CONFLICT_ABORT","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-CONFLICT_ABORT","meta":{}},{"name":"CONFLICT_FAIL","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-CONFLICT_FAIL","meta":{}},{"name":"CONFLICT_IGNORE","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-CONFLICT_IGNORE","meta":{}},{"name":"CONFLICT_NONE","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-CONFLICT_NONE","meta":{}},{"name":"CONFLICT_REPLACE","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-CONFLICT_REPLACE","meta":{}},{"name":"CONFLICT_ROLLBACK","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-CONFLICT_ROLLBACK","meta":{}},{"name":"CONFLICT_VALUES","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-CONFLICT_VALUES","meta":{}},{"name":"CREATE_IF_NECESSARY","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-CREATE_IF_NECESSARY","meta":{}},{"name":"ENABLE_WRITE_AHEAD_LOGGING","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-ENABLE_WRITE_AHEAD_LOGGING","meta":{}},{"name":"MAX_SQL_CACHE_SIZE","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-MAX_SQL_CACHE_SIZE","meta":{}},{"name":"NO_LOCALIZED_COLLATORS","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-NO_LOCALIZED_COLLATORS","meta":{}},{"name":"OPEN_READONLY","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-OPEN_READONLY","meta":{}},{"name":"OPEN_READWRITE","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-OPEN_READWRITE","meta":{}},{"name":"SQLITE_MAX_LIKE_PATTERN_LENGTH","tagname":"property","owner":"android.database.sqlite.SQLiteDatabase","id":"property-SQLITE_MAX_LIKE_PATTERN_LENGTH","meta":{}},{"name":"acquireReference","tagname":"method","owner":"android.database.sqlite.SQLiteClosable","id":"method-acquireReference","meta":{}},{"name":"beginTransaction","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-beginTransaction","meta":{}},{"name":"beginTransactionNonExclusive","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-beginTransactionNonExclusive","meta":{}},{"name":"beginTransactionWithListener","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-beginTransactionWithListener","meta":{}},{"name":"beginTransactionWithListenerNonExclusive","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-beginTransactionWithListenerNonExclusive","meta":{}},{"name":"close","tagname":"method","owner":"android.database.sqlite.SQLiteClosable","id":"method-close","meta":{}},{"name":"compileStatement","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-compileStatement","meta":{}},{"name":"create","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-create","meta":{}},{"name":"createInMemory","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-createInMemory","meta":{}},{"name":"delete","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-delete","meta":{}},{"name":"disableWriteAheadLogging","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-disableWriteAheadLogging","meta":{}},{"name":"enableWriteAheadLogging","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-enableWriteAheadLogging","meta":{}},{"name":"endTransaction","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-endTransaction","meta":{}},{"name":"execSQL","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-execSQL","meta":{}},{"name":"executeSql","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-executeSql","meta":{}},{"name":"findEditTable","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-findEditTable","meta":{}},{"name":"getAttachedDbs","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-getAttachedDbs","meta":{}},{"name":"getMaximumSize","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-getMaximumSize","meta":{}},{"name":"getPageSize","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-getPageSize","meta":{}},{"name":"getPath","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-getPath","meta":{}},{"name":"getSyncedTables","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-getSyncedTables","meta":{"deprecated":{"text":"<p>This method no longer serves any useful purpose and has been deprecated.</p>\n"}}},{"name":"getVersion","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-getVersion","meta":{}},{"name":"inTransaction","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-inTransaction","meta":{}},{"name":"insert","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-insert","meta":{}},{"name":"insertOrThrow","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-insertOrThrow","meta":{}},{"name":"insertWithOnConflict","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-insertWithOnConflict","meta":{}},{"name":"isDatabaseIntegrityOk","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-isDatabaseIntegrityOk","meta":{}},{"name":"isDbLockedByCurrentThread","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-isDbLockedByCurrentThread","meta":{}},{"name":"isDbLockedByOtherThreads","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-isDbLockedByOtherThreads","meta":{"deprecated":{"text":"<p>Always returns false.  Do not use this method.</p>\n"}}},{"name":"isOpen","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-isOpen","meta":{}},{"name":"isReadOnly","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-isReadOnly","meta":{}},{"name":"isWriteAheadLoggingEnabled","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-isWriteAheadLoggingEnabled","meta":{}},{"name":"markTableSyncable","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-markTableSyncable","meta":{"deprecated":{"text":"<p>This method no longer serves any useful purpose and has been deprecated.</p>\n"}}},{"name":"needUpgrade","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-needUpgrade","meta":{}},{"name":"openDatabase","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-openDatabase","meta":{}},{"name":"openOrCreateDatabase","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-openOrCreateDatabase","meta":{}},{"name":"query","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-query","meta":{}},{"name":"queryWithFactory","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-queryWithFactory","meta":{}},{"name":"rawQuery","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-rawQuery","meta":{}},{"name":"rawQueryWithFactory","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-rawQueryWithFactory","meta":{}},{"name":"releaseMemory","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-releaseMemory","meta":{}},{"name":"releaseReference","tagname":"method","owner":"android.database.sqlite.SQLiteClosable","id":"method-releaseReference","meta":{}},{"name":"releaseReferenceFromContainer","tagname":"method","owner":"android.database.sqlite.SQLiteClosable","id":"method-releaseReferenceFromContainer","meta":{"deprecated":{"text":"<p>Do not use.</p>\n"}}},{"name":"replace","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-replace","meta":{}},{"name":"replaceOrThrow","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-replaceOrThrow","meta":{}},{"name":"setForeignKeyConstraintsEnabled","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-setForeignKeyConstraintsEnabled","meta":{}},{"name":"setLocale","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-setLocale","meta":{}},{"name":"setLockingEnabled","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-setLockingEnabled","meta":{"deprecated":{"text":"<p>This method now does nothing.  Do not use.</p>\n"}}},{"name":"setMaxSqlCacheSize","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-setMaxSqlCacheSize","meta":{}},{"name":"setMaximumSize","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-setMaximumSize","meta":{}},{"name":"setPageSize","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-setPageSize","meta":{}},{"name":"setTransactionSuccessful","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-setTransactionSuccessful","meta":{}},{"name":"setVersion","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-setVersion","meta":{}},{"name":"toString","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-toString","meta":{}},{"name":"update","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-update","meta":{}},{"name":"updateWithOnConflict","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-updateWithOnConflict","meta":{}},{"name":"validateSql","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-validateSql","meta":{}},{"name":"yieldIfContended","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-yieldIfContended","meta":{"deprecated":{"text":"<p>if the db is locked more than once (because of nested transactions) then the lock\n   will not be yielded. Use yieldIfContendedSafely instead.</p>\n"}}},{"name":"yieldIfContendedSafely","tagname":"method","owner":"android.database.sqlite.SQLiteDatabase","id":"method-yieldIfContendedSafely","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.database.sqlite.SQLiteDatabase","short_doc":"Exposes methods to manage a SQLite database. ...","classIcon":"icon-class","superclasses":["java.lang.Object","android.database.sqlite.SQLiteClosable"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/android.database.sqlite.SQLiteClosable' rel='android.database.sqlite.SQLiteClosable' class='docClass'>android.database.sqlite.SQLiteClosable</a><div class='subclass '><strong>android.database.sqlite.SQLiteDatabase</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase' target='_blank'>SQLiteDatabase.js</a></div></pre><div class='doc-contents'><p>Exposes methods to manage a SQLite database.</p>\n\n<p> <p>\n SQLiteDatabase has methods to create, delete, execute SQL commands, and\n perform other common database management tasks.\n </p><p>\n See the Notepad sample application in the SDK for an example of creating\n and managing a database.\n </p><p>\n Database names must be unique within an application, not across all applications.\n </p></p>\n\n<p> <h3>Localized Collation - ORDER BY</h3>\n <p>\n In addition to SQLite's default <code>BINARY</code> collator, Android supplies\n two more, <code>LOCALIZED</code>, which changes with the system's current locale,\n and <code>UNICODE</code>, which is the Unicode Collation Algorithm and not tailored\n to the current locale.\n </p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-CONFLICT_ABORT' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-CONFLICT_ABORT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-CONFLICT_ABORT' class='name expandable'>CONFLICT_ABORT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When a constraint violation occurs,no ROLLBACK is executed\nso changes from prior commands within the same transaction...</div><div class='long'><p>When a constraint violation occurs,no ROLLBACK is executed\nso changes from prior commands within the same transaction\nare preserved. This is the default behavior.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-CONFLICT_FAIL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-CONFLICT_FAIL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-CONFLICT_FAIL' class='name expandable'>CONFLICT_FAIL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When a constraint violation occurs, the command aborts with a return\ncode SQLITE_CONSTRAINT. ...</div><div class='long'><p>When a constraint violation occurs, the command aborts with a return\ncode SQLITE_CONSTRAINT. But any changes to the database that\nthe command made prior to encountering the constraint violation\nare preserved and are not backed out.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-CONFLICT_IGNORE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-CONFLICT_IGNORE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-CONFLICT_IGNORE' class='name expandable'>CONFLICT_IGNORE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When a constraint violation occurs, the one row that contains\nthe constraint violation is not inserted or changed. ...</div><div class='long'><p>When a constraint violation occurs, the one row that contains\nthe constraint violation is not inserted or changed.\nBut the command continues executing normally. Other rows before and\nafter the row that contained the constraint violation continue to be\ninserted or updated normally. No error is returned.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-CONFLICT_NONE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-CONFLICT_NONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-CONFLICT_NONE' class='name expandable'>CONFLICT_NONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Use the following when no conflict action is specified. ...</div><div class='long'><p>Use the following when no conflict action is specified.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-CONFLICT_REPLACE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-CONFLICT_REPLACE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-CONFLICT_REPLACE' class='name expandable'>CONFLICT_REPLACE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When a UNIQUE constraint violation occurs, the pre-existing rows that\nare causing the constraint violation are remove...</div><div class='long'><p>When a UNIQUE constraint violation occurs, the pre-existing rows that\nare causing the constraint violation are removed prior to inserting\nor updating the current row. Thus the insert or update always occurs.\nThe command continues executing normally. No error is returned.\nIf a NOT NULL constraint violation occurs, the NULL value is replaced\nby the default value for that column. If the column has no default\nvalue, then the ABORT algorithm is used. If a CHECK constraint\nviolation occurs then the IGNORE algorithm is used. When this conflict\nresolution strategy deletes rows in order to satisfy a constraint,\nit does not invoke delete triggers on those rows.\nThis behavior might change in a future release.</p>\n<p>Defaults to: <code>&quot;5&quot;</code></p></div></div></div><div id='property-CONFLICT_ROLLBACK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-CONFLICT_ROLLBACK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-CONFLICT_ROLLBACK' class='name expandable'>CONFLICT_ROLLBACK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When a constraint violation occurs, an immediate ROLLBACK occurs,\nthus ending the current transaction, and the comman...</div><div class='long'><p>When a constraint violation occurs, an immediate ROLLBACK occurs,\nthus ending the current transaction, and the command aborts with a\nreturn code of SQLITE_CONSTRAINT. If no transaction is active\n(other than the implied transaction that is created on every command)\nthen this algorithm works the same as ABORT.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-CONFLICT_VALUES' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-CONFLICT_VALUES' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-CONFLICT_VALUES' class='name expandable'>CONFLICT_VALUES</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>{@hide} ...</div><div class='long'><p>{@hide}</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-CREATE_IF_NECESSARY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-CREATE_IF_NECESSARY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-CREATE_IF_NECESSARY' class='name expandable'>CREATE_IF_NECESSARY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Open flag: Flag for openDatabase to create the database file if it does not\nalready exist. ...</div><div class='long'><p>Open flag: Flag for <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-openDatabase\" rel=\"android.database.sqlite.SQLiteDatabase-method-openDatabase\" class=\"docClass\">openDatabase</a> to create the database file if it does not\nalready exist.</p>\n<p>Defaults to: <code>&quot;268435456&quot;</code></p></div></div></div><div id='property-ENABLE_WRITE_AHEAD_LOGGING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-ENABLE_WRITE_AHEAD_LOGGING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-ENABLE_WRITE_AHEAD_LOGGING' class='name expandable'>ENABLE_WRITE_AHEAD_LOGGING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Open flag: Flag for openDatabase to open the database file with\nwrite-ahead logging enabled by default. ...</div><div class='long'><p>Open flag: Flag for <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-openDatabase\" rel=\"android.database.sqlite.SQLiteDatabase-method-openDatabase\" class=\"docClass\">openDatabase</a> to open the database file with\nwrite-ahead logging enabled by default.  Using this flag is more efficient\nthan calling <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a>.</p>\n\n<p>Write-ahead logging cannot be used with read-only databases so the value of\nthis flag is ignored if the database is opened read-only.</p>\n\n<p>@see <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a></p>\n<p>Defaults to: <code>&quot;536870912&quot;</code></p></div></div></div><div id='property-MAX_SQL_CACHE_SIZE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-MAX_SQL_CACHE_SIZE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-MAX_SQL_CACHE_SIZE' class='name expandable'>MAX_SQL_CACHE_SIZE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Absolute max value that can be set by setMaxSqlCacheSize(int). ...</div><div class='long'><p>Absolute max value that can be set by <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-setMaxSqlCacheSize\" rel=\"android.database.sqlite.SQLiteDatabase-method-setMaxSqlCacheSize\" class=\"docClass\">setMaxSqlCacheSize</a>(int).</p>\n\n<p>Each prepared-statement is between 1K - 6K, depending on the complexity of the\nSQL statement &amp; schema.  A large SQL cache may use a significant amount of memory.</p>\n<p>Defaults to: <code>&quot;100&quot;</code></p></div></div></div><div id='property-NO_LOCALIZED_COLLATORS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-NO_LOCALIZED_COLLATORS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-NO_LOCALIZED_COLLATORS' class='name expandable'>NO_LOCALIZED_COLLATORS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Open flag: Flag for openDatabase to open the database without support for\nlocalized collators. ...</div><div class='long'><p>Open flag: Flag for <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-openDatabase\" rel=\"android.database.sqlite.SQLiteDatabase-method-openDatabase\" class=\"docClass\">openDatabase</a> to open the database without support for\nlocalized collators.</p>\n\n<p>{@more} This causes the collator <code>LOCALIZED</code> not to be created.\nYou must be consistent when using this flag to use the setting the database was\ncreated with.  If this is set, <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-setLocale\" rel=\"android.database.sqlite.SQLiteDatabase-method-setLocale\" class=\"docClass\">setLocale</a> will do nothing.</p>\n<p>Defaults to: <code>&quot;16&quot;</code></p></div></div></div><div id='property-OPEN_READONLY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-OPEN_READONLY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-OPEN_READONLY' class='name expandable'>OPEN_READONLY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Open flag: Flag for openDatabase to open the database for reading only. ...</div><div class='long'><p>Open flag: Flag for <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-openDatabase\" rel=\"android.database.sqlite.SQLiteDatabase-method-openDatabase\" class=\"docClass\">openDatabase</a> to open the database for reading only.\nThis is the only reliable way to open a database if the disk may be full.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-OPEN_READWRITE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-OPEN_READWRITE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-OPEN_READWRITE' class='name expandable'>OPEN_READWRITE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Open flag: Flag for openDatabase to open the database for reading and writing. ...</div><div class='long'><p>Open flag: Flag for <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-openDatabase\" rel=\"android.database.sqlite.SQLiteDatabase-method-openDatabase\" class=\"docClass\">openDatabase</a> to open the database for reading and writing.\nIf the disk is full, this may fail even before you actually write anything.</p>\n\n<p>{@more} Note that the value of this flag is 0, so it is the default.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-SQLITE_MAX_LIKE_PATTERN_LENGTH' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-property-SQLITE_MAX_LIKE_PATTERN_LENGTH' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-property-SQLITE_MAX_LIKE_PATTERN_LENGTH' class='name expandable'>SQLITE_MAX_LIKE_PATTERN_LENGTH</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Maximum Length Of A LIKE Or GLOB Pattern\nThe pattern matching algorithm used in the default LIKE and GLOB implementat...</div><div class='long'><p>Maximum Length Of A LIKE Or GLOB Pattern\nThe pattern matching algorithm used in the default LIKE and GLOB implementation\nof SQLite can exhibit O(N<sup>2</sup>) performance (where N is the number of characters in\nthe pattern) for certain pathological cases. To avoid denial-of-service attacks\nthe length of the LIKE or GLOB pattern is limited to SQLITE_MAX_LIKE_PATTERN_LENGTH bytes.\nThe default value of this limit is 50000. A modern workstation can evaluate\neven a pathological LIKE or GLOB pattern of 50000 bytes relatively quickly.\nThe denial of service problem only comes into play when the pattern length gets\ninto millions of bytes. Nevertheless, since most useful LIKE or GLOB patterns\nare at most a few dozen bytes in length, paranoid application developers may\nwant to reduce this parameter to something in the range of a few hundred\nif they know that external users are able to generate arbitrary patterns.</p>\n<p>Defaults to: <code>&quot;50000&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-acquireReference' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/android.database.sqlite.SQLiteClosable' rel='android.database.sqlite.SQLiteClosable' class='defined-in docClass'>android.database.sqlite.SQLiteClosable</a><br/><a href='source/SQLiteClosable.html#android-database-sqlite-SQLiteClosable-method-acquireReference' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteClosable-method-acquireReference' class='name expandable'>acquireReference</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires a reference to the object. ...</div><div class='long'><p>Acquires a reference to the object.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the last reference to the object has already\n been released.</p>\n</div></li></ul></div></div></div><div id='method-beginTransaction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-beginTransaction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-beginTransaction' class='name expandable'>beginTransaction</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Begins a transaction in EXCLUSIVE mode. ...</div><div class='long'><p>Begins a transaction in EXCLUSIVE mode.\n <p>\n Transactions can be nested.\n When the outer transaction is ended all of\n the work done in that transaction and all of the nested transactions will be committed or\n rolled back. The changes will be rolled back if any transaction is ended without being\n marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed.\n </p>\n <p>Here is the standard idiom for transactions:</p>\n\n<pre>   db.beginTransaction();\n   try {\n     ...\n     db.setTransactionSuccessful();\n   } finally {\n     db.endTransaction();\n   }\n </pre>\n\n</div></div></div><div id='method-beginTransactionNonExclusive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-beginTransactionNonExclusive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-beginTransactionNonExclusive' class='name expandable'>beginTransactionNonExclusive</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Begins a transaction in IMMEDIATE mode. ...</div><div class='long'><p>Begins a transaction in IMMEDIATE mode. Transactions can be nested. When\n the outer transaction is ended all of the work done in that transaction\n and all of the nested transactions will be committed or rolled back. The\n changes will be rolled back if any transaction is ended without being\n marked as clean (by calling setTransactionSuccessful). Otherwise they\n will be committed.\n <p>\n Here is the standard idiom for transactions:</p>\n\n<pre>   db.beginTransactionNonExclusive();\n   try {\n     ...\n     db.setTransactionSuccessful();\n   } finally {\n     db.endTransaction();\n   }\n </pre>\n\n</div></div></div><div id='method-beginTransactionWithListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-beginTransactionWithListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-beginTransactionWithListener' class='name expandable'>beginTransactionWithListener</a>( <span class='pre'>transactionListener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Begins a transaction in EXCLUSIVE mode. ...</div><div class='long'><p>Begins a transaction in EXCLUSIVE mode.\n <p>\n Transactions can be nested.\n When the outer transaction is ended all of\n the work done in that transaction and all of the nested transactions will be committed or\n rolled back. The changes will be rolled back if any transaction is ended without being\n marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed.\n </p>\n <p>Here is the standard idiom for transactions:</p>\n\n<pre>   db.beginTransactionWithListener(listener);\n   try {\n     ...\n     db.setTransactionSuccessful();\n   } finally {\n     db.endTransaction();\n   }\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transactionListener</span> : Object {SQLiteTransactionListener}<div class='sub-desc'><p>listener that should be notified when the transaction begins,\n commits, or is rolled back, either explicitly or by a call to\n <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-yieldIfContendedSafely\" rel=\"android.database.sqlite.SQLiteDatabase-method-yieldIfContendedSafely\" class=\"docClass\">yieldIfContendedSafely</a>.</p>\n</div></li></ul></div></div></div><div id='method-beginTransactionWithListenerNonExclusive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-beginTransactionWithListenerNonExclusive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-beginTransactionWithListenerNonExclusive' class='name expandable'>beginTransactionWithListenerNonExclusive</a>( <span class='pre'>transactionListener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Begins a transaction in IMMEDIATE mode. ...</div><div class='long'><p>Begins a transaction in IMMEDIATE mode. Transactions can be nested. When\n the outer transaction is ended all of the work done in that transaction\n and all of the nested transactions will be committed or rolled back. The\n changes will be rolled back if any transaction is ended without being\n marked as clean (by calling setTransactionSuccessful). Otherwise they\n will be committed.\n <p>\n Here is the standard idiom for transactions:</p>\n\n<pre>   db.beginTransactionWithListenerNonExclusive(listener);\n   try {\n     ...\n     db.setTransactionSuccessful();\n   } finally {\n     db.endTransaction();\n   }\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>transactionListener</span> : Object {SQLiteTransactionListener}<div class='sub-desc'><p>listener that should be notified when the\n            transaction begins, commits, or is rolled back, either\n            explicitly or by a call to <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-yieldIfContendedSafely\" rel=\"android.database.sqlite.SQLiteDatabase-method-yieldIfContendedSafely\" class=\"docClass\">yieldIfContendedSafely</a>.</p>\n</div></li></ul></div></div></div><div id='method-close' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/android.database.sqlite.SQLiteClosable' rel='android.database.sqlite.SQLiteClosable' class='defined-in docClass'>android.database.sqlite.SQLiteClosable</a><br/><a href='source/SQLiteClosable.html#android-database-sqlite-SQLiteClosable-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteClosable-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases a reference to the object, closing the object if the last reference\n was released. ...</div><div class='long'><p>Releases a reference to the object, closing the object if the last reference\n was released.</p>\n\n<p> Calling this method is equivalent to calling <a href=\"#!/api/android.database.sqlite.SQLiteClosable-method-releaseReference\" rel=\"android.database.sqlite.SQLiteClosable-method-releaseReference\" class=\"docClass\">releaseReference</a>.\n@see <a href=\"#!/api/android.database.sqlite.SQLiteClosable-method-releaseReference\" rel=\"android.database.sqlite.SQLiteClosable-method-releaseReference\" class=\"docClass\">releaseReference</a>()\n@see #onAllReferencesReleased()</p>\n</div></div></div><div id='method-compileStatement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-compileStatement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-compileStatement' class='name expandable'>compileStatement</a>( <span class='pre'>sql</span> ) : Object {android.database.sqlite.SQLiteStatement}<span class=\"signature\"></span></div><div class='description'><div class='short'>Compiles an SQL statement into a reusable pre-compiled statement object. ...</div><div class='long'><p>Compiles an SQL statement into a reusable pre-compiled statement object.\n The parameters are identical to <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-execSQL\" rel=\"android.database.sqlite.SQLiteDatabase-method-execSQL\" class=\"docClass\">execSQL</a>(String). You may put ?s in the\n statement and fill in those values with <a href=\"#!/api/android.database.sqlite.SQLiteProgram-method-bindString\" rel=\"android.database.sqlite.SQLiteProgram-method-bindString\" class=\"docClass\">android.database.sqlite.SQLiteProgram.bindString</a>\n and <a href=\"#!/api/android.database.sqlite.SQLiteProgram-method-bindLong\" rel=\"android.database.sqlite.SQLiteProgram-method-bindLong\" class=\"docClass\">android.database.sqlite.SQLiteProgram.bindLong</a> each time you want to run the\n statement. Statements may not return result sets larger than 1x1.</p>\n\n<p><p>\n No two threads should be using the same <a href=\"#!/api/android.database.sqlite.SQLiteStatement\" rel=\"android.database.sqlite.SQLiteStatement\" class=\"docClass\">android.database.sqlite.SQLiteStatement</a> at the same time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sql</span> : String<div class='sub-desc'><p>The raw SQL statement, may contain ? for unknown values to be\n            bound later.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.sqlite.SQLiteStatement}</span><div class='sub-desc'><p>A pre-compiled SQLiteStatement object. Note that\n SQLiteStatements are not synchronized, see the documentation for more details.</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-create' class='name expandable'>create</a>( <span class='pre'>factory</span> ) : Object {android.database.sqlite.SQLiteDatabase}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a memory backed SQLite database. ...</div><div class='long'><p>Create a memory backed SQLite database.  Its contents will be destroyed\n when the database is closed.</p>\n\n<p> <p>Sets the locale of the database to the  the system's current locale.\n Call <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-setLocale\" rel=\"android.database.sqlite.SQLiteDatabase-method-setLocale\" class=\"docClass\">setLocale</a> if you would like something else.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>factory</span> : Object {SQLiteDatabase.CursorFactory}<div class='sub-desc'><p>an optional factory class that is called to instantiate a\n            cursor when query is called</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.sqlite.SQLiteDatabase}</span><div class='sub-desc'><p>a SQLiteDatabase instance</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLiteException if the database cannot be created</p>\n</div></li></ul></div></div></div><div id='method-createInMemory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-createInMemory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-createInMemory' class='name expandable'>createInMemory</a>( <span class='pre'>openParams</span> ) : Object {android.database.sqlite.SQLiteDatabase}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a memory backed SQLite database. ...</div><div class='long'><p>Create a memory backed SQLite database.  Its contents will be destroyed\n when the database is closed.</p>\n\n<p> <p>Sets the locale of the database to the  the system's current locale.\n Call <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-setLocale\" rel=\"android.database.sqlite.SQLiteDatabase-method-setLocale\" class=\"docClass\">setLocale</a> if you would like something else.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>openParams</span> : Object {SQLiteDatabase.OpenParams}<div class='sub-desc'><p>configuration parameters that are used for opening SQLiteDatabase</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.sqlite.SQLiteDatabase}</span><div class='sub-desc'><p>a SQLiteDatabase instance</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLException if the database cannot be created</p>\n</div></li></ul></div></div></div><div id='method-delete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-delete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-delete' class='name expandable'>delete</a>( <span class='pre'>table, whereClause, whereArgs</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for deleting rows in the database. ...</div><div class='long'><p>Convenience method for deleting rows in the database.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>the table to delete from</p>\n</div></li><li><span class='pre'>whereClause</span> : String<div class='sub-desc'><p>the optional WHERE clause to apply when deleting.\n            Passing null will delete all rows.</p>\n</div></li><li><span class='pre'>whereArgs</span> : Object {java.lang.String[]}<div class='sub-desc'><p>You may include ?s in the where clause, which\n            will be replaced by the values from whereArgs. The values\n            will be bound as Strings.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of rows affected if a whereClause is passed in, 0\n         otherwise. To remove all rows and get a count pass \"1\" as the\n         whereClause.</p>\n</div></li></ul></div></div></div><div id='method-disableWriteAheadLogging' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-disableWriteAheadLogging' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-disableWriteAheadLogging' class='name expandable'>disableWriteAheadLogging</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method disables the features enabled by enableWriteAheadLogging(). ...</div><div class='long'><p>This method disables the features enabled by <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a>().</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if there are transactions in progress at the\n time this method is called.  WAL mode can only be changed when there are no\n transactions in progress.\n@see <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a></p>\n</div></li></ul></div></div></div><div id='method-enableWriteAheadLogging' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-enableWriteAheadLogging' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging' class='name expandable'>enableWriteAheadLogging</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>This method enables parallel execution of queries from multiple threads on the\n same database. ...</div><div class='long'><p>This method enables parallel execution of queries from multiple threads on the\n same database.  It does this by opening multiple connections to the database\n and using a different database connection for each query.  The database\n journal mode is also changed to enable writes to proceed concurrently with reads.\n <p>\n When write-ahead logging is not enabled (the default), it is not possible for\n reads and writes to occur on the database at the same time.  Before modifying the\n database, the writer implicitly acquires an exclusive lock on the database which\n prevents readers from accessing the database until the write is completed.\n </p><p>\n In contrast, when write-ahead logging is enabled (by calling this method), write\n operations occur in a separate log file which allows reads to proceed concurrently.\n While a write is in progress, readers on other threads will perceive the state\n of the database as it was before the write began.  When the write completes, readers\n on other threads will then perceive the new state of the database.\n </p><p>\n It is a good idea to enable write-ahead logging whenever a database will be\n concurrently accessed and modified by multiple threads at the same time.\n However, write-ahead logging uses significantly more memory than ordinary\n journaling because there are multiple connections to the same database.\n So if a database will only be used by a single thread, or if optimizing\n concurrency is not very important, then write-ahead logging should be disabled.\n </p><p>\n After calling this method, execution of queries in parallel is enabled as long as\n the database remains open.  To disable execution of queries in parallel, either\n call <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-disableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-disableWriteAheadLogging\" class=\"docClass\">disableWriteAheadLogging</a> or close the database and reopen it.\n </p><p>\n The maximum number of connections used to execute queries in parallel is\n dependent upon the device memory and possibly other properties.\n </p><p>\n If a query is part of a transaction, then it is executed on the same database handle the\n transaction was begun.\n </p><p>\n Writers should use <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-beginTransactionNonExclusive\" rel=\"android.database.sqlite.SQLiteDatabase-method-beginTransactionNonExclusive\" class=\"docClass\">beginTransactionNonExclusive</a>() or\n <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-beginTransactionWithListenerNonExclusive\" rel=\"android.database.sqlite.SQLiteDatabase-method-beginTransactionWithListenerNonExclusive\" class=\"docClass\">beginTransactionWithListenerNonExclusive</a>(SQLiteTransactionListener)\n to start a transaction.  Non-exclusive mode allows database file to be in readable\n by other threads executing queries.\n </p><p>\n If the database has any attached databases, then execution of queries in parallel is NOT\n possible.  Likewise, write-ahead logging is not supported for read-only databases\n or memory databases.  In such cases, <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a> returns false.\n </p><p>\n The best way to enable write-ahead logging is to pass the\n <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-ENABLE_WRITE_AHEAD_LOGGING\" rel=\"android.database.sqlite.SQLiteDatabase-property-ENABLE_WRITE_AHEAD_LOGGING\" class=\"docClass\">ENABLE_WRITE_AHEAD_LOGGING</a> flag to <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-openDatabase\" rel=\"android.database.sqlite.SQLiteDatabase-method-openDatabase\" class=\"docClass\">openDatabase</a>.  This is\n more efficient than calling <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a>.\n <code></code></p>\n\n<pre>     SQLiteDatabase db = SQLiteDatabase.openDatabase(\"db_filename\", cursorFactory,\n             SQLiteDatabase.CREATE_IF_NECESSARY | SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING,\n             myDatabaseErrorHandler);\n </pre>\n\n\n<p>\n </p><p>\n Another way to enable write-ahead logging is to call <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a>\n after opening the database.\n <code></code></p>\n\n<pre>     SQLiteDatabase db = SQLiteDatabase.openDatabase(\"db_filename\", cursorFactory,\n             SQLiteDatabase.CREATE_IF_NECESSARY, myDatabaseErrorHandler);\n     db.enableWriteAheadLogging();\n </pre>\n\n\n<p>\n </p><p>\n See also <a href=\"http://sqlite.org/wal.html\">SQLite Write-Ahead Logging</a> for\n more details about how write-ahead logging works.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if write-ahead logging is enabled.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if there are transactions in progress at the\n time this method is called.  WAL mode can only be changed when there are no\n transactions in progress.\n@see <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-ENABLE_WRITE_AHEAD_LOGGING\" rel=\"android.database.sqlite.SQLiteDatabase-property-ENABLE_WRITE_AHEAD_LOGGING\" class=\"docClass\">ENABLE_WRITE_AHEAD_LOGGING</a>\n@see <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-disableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-disableWriteAheadLogging\" class=\"docClass\">disableWriteAheadLogging</a></p>\n</div></li></ul></div></div></div><div id='method-endTransaction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-endTransaction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-endTransaction' class='name expandable'>endTransaction</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>End a transaction. ...</div><div class='long'><p>End a transaction. See beginTransaction for notes about how to use this and when transactions\n are committed and rolled back.</p>\n</div></div></div><div id='method-execSQL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-execSQL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-execSQL' class='name expandable'>execSQL</a>( <span class='pre'>sql, bindArgs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE. ...</div><div class='long'><p>Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE.\n <p>\n For INSERT statements, use any of the following instead.\n <ul>\n   <li>String, ContentValues)</li>\n   <li>String, ContentValues)</li>\n   <li>String, ContentValues, int)</li>\n </ul>\n <p>\n For UPDATE statements, use any of the following instead.\n <ul>\n   <li>ContentValues, String, String[])</li>\n   <li>ContentValues, String, String[], int)</li>\n </ul>\n <p>\n For DELETE statements, use any of the following instead.\n <ul>\n   <li>String, String[])</li>\n </ul>\n <p>\n For example, the following are good candidates for using this method:\n <ul>\n   <li>ALTER TABLE</li>\n   <li>CREATE or DROP table / trigger / view / index / virtual table</li>\n   <li>REINDEX</li>\n   <li>RELEASE</li>\n   <li>SAVEPOINT</li>\n   <li>PRAGMA that returns no data</li>\n </ul>\n </p>\n <p>\n When using <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a>(), journal_mode is\n automatically managed by this class. So, do not set journal_mode\n using \"PRAGMA journal_mode'<value>\" statement if your app is using\n <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a>()\n </value></p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sql</span> : String<div class='sub-desc'><p>the SQL statement to be executed. Multiple statements separated by semicolons are\n not supported.</p>\n</div></li><li><span class='pre'>bindArgs</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>only byte[], String, Long and Double are supported in bindArgs.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLException if the SQL string is invalid</p>\n</div></li></ul></div></div></div><div id='method-executeSql' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-executeSql' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-executeSql' class='name expandable'>executeSql</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@hide} ...</div><div class='long'><p>{@hide}</p>\n</div></div></div><div id='method-findEditTable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-findEditTable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-findEditTable' class='name expandable'>findEditTable</a>( <span class='pre'>tables</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds the name of the first table, which is editable. ...</div><div class='long'><p>Finds the name of the first table, which is editable.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tables</span> : String<div class='sub-desc'><p>a list of tables</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the first table listed</p>\n</div></li></ul></div></div></div><div id='method-getAttachedDbs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-getAttachedDbs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-getAttachedDbs' class='name expandable'>getAttachedDbs</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns list of full pathnames of all attached databases including the main database\n by executing 'pragma database_l...</div><div class='long'><p>Returns list of full pathnames of all attached databases including the main database\n by executing 'pragma database_list' on the database.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>ArrayList of pairs of (database name, database file path) or null if the database\n is not open.</p>\n</div></li></ul></div></div></div><div id='method-getMaximumSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-getMaximumSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-getMaximumSize' class='name expandable'>getMaximumSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the maximum size the database may grow to. ...</div><div class='long'><p>Returns the maximum size the database may grow to.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the new maximum database size</p>\n</div></li></ul></div></div></div><div id='method-getPageSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-getPageSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-getPageSize' class='name expandable'>getPageSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current database page size, in bytes. ...</div><div class='long'><p>Returns the current database page size, in bytes.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the database page size, in bytes</p>\n</div></li></ul></div></div></div><div id='method-getPath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-getPath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-getPath' class='name expandable'>getPath</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the path to the database file. ...</div><div class='long'><p>Gets the path to the database file.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The path to the database file.</p>\n</div></li></ul></div></div></div><div id='method-getSyncedTables' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-getSyncedTables' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-getSyncedTables' class='name expandable'>getSyncedTables</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Deprecated. ...</div><div class='long'><p>Deprecated.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This method no longer serves any useful purpose and has been deprecated.</p>\n\n        </div>\n</div></div></div><div id='method-getVersion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-getVersion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-getVersion' class='name expandable'>getVersion</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the database version. ...</div><div class='long'><p>Gets the database version.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the database version</p>\n</div></li></ul></div></div></div><div id='method-inTransaction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-inTransaction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-inTransaction' class='name expandable'>inTransaction</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the current thread has a transaction pending. ...</div><div class='long'><p>Returns true if the current thread has a transaction pending.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the current thread is in a transaction.</p>\n</div></li></ul></div></div></div><div id='method-insert' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-insert' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-insert' class='name expandable'>insert</a>( <span class='pre'>table, nullColumnHack, values</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for inserting a row into the database. ...</div><div class='long'><p>Convenience method for inserting a row into the database.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>the table to insert the row into</p>\n</div></li><li><span class='pre'>nullColumnHack</span> : String<div class='sub-desc'><p>optional; may be <code>null</code>.\n            SQL doesn't allow inserting a completely empty row without\n            naming at least one column name.  If your provided <code>values</code> is\n            empty, no column names are known and an empty row can't be inserted.\n            If not set to null, the <code>nullColumnHack</code> parameter\n            provides the name of nullable column name to explicitly insert a NULL into\n            in the case where your <code>values</code> is empty.</p>\n</div></li><li><span class='pre'>values</span> : Object {ContentValues}<div class='sub-desc'><p>this map contains the initial column values for the\n            row. The keys should be the column names and the values the\n            column values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the row ID of the newly inserted row, or -1 if an error occurred</p>\n</div></li></ul></div></div></div><div id='method-insertOrThrow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-insertOrThrow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-insertOrThrow' class='name expandable'>insertOrThrow</a>( <span class='pre'>table, nullColumnHack, values</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for inserting a row into the database. ...</div><div class='long'><p>Convenience method for inserting a row into the database.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>the table to insert the row into</p>\n</div></li><li><span class='pre'>nullColumnHack</span> : String<div class='sub-desc'><p>optional; may be <code>null</code>.\n            SQL doesn't allow inserting a completely empty row without\n            naming at least one column name.  If your provided <code>values</code> is\n            empty, no column names are known and an empty row can't be inserted.\n            If not set to null, the <code>nullColumnHack</code> parameter\n            provides the name of nullable column name to explicitly insert a NULL into\n            in the case where your <code>values</code> is empty.</p>\n</div></li><li><span class='pre'>values</span> : Object {ContentValues}<div class='sub-desc'><p>this map contains the initial column values for the\n            row. The keys should be the column names and the values the\n            column values</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the row ID of the newly inserted row, or -1 if an error occurred</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLException</p>\n</div></li></ul></div></div></div><div id='method-insertWithOnConflict' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-insertWithOnConflict' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-insertWithOnConflict' class='name expandable'>insertWithOnConflict</a>( <span class='pre'>table, nullColumnHack, initialValues, conflictAlgorithm</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>General method for inserting a row into the database. ...</div><div class='long'><p>General method for inserting a row into the database.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>the table to insert the row into</p>\n</div></li><li><span class='pre'>nullColumnHack</span> : String<div class='sub-desc'><p>optional; may be <code>null</code>.\n            SQL doesn't allow inserting a completely empty row without\n            naming at least one column name.  If your provided <code>initialValues</code> is\n            empty, no column names are known and an empty row can't be inserted.\n            If not set to null, the <code>nullColumnHack</code> parameter\n            provides the name of nullable column name to explicitly insert a NULL into\n            in the case where your <code>initialValues</code> is empty.</p>\n</div></li><li><span class='pre'>initialValues</span> : Object {ContentValues}<div class='sub-desc'><p>this map contains the initial column values for the\n            row. The keys should be the column names and the values the\n            column values</p>\n</div></li><li><span class='pre'>conflictAlgorithm</span> : Number<div class='sub-desc'><p>for insert conflict resolver</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the row ID of the newly inserted row OR <code>-1</code> if either the\n            input parameter <code>conflictAlgorithm</code> = <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-CONFLICT_IGNORE\" rel=\"android.database.sqlite.SQLiteDatabase-property-CONFLICT_IGNORE\" class=\"docClass\">CONFLICT_IGNORE</a>\n            or an error occurred.</p>\n</div></li></ul></div></div></div><div id='method-isDatabaseIntegrityOk' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-isDatabaseIntegrityOk' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-isDatabaseIntegrityOk' class='name expandable'>isDatabaseIntegrityOk</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Runs 'pragma integrity_check' on the given database (and all the attached databases)\n and returns true if the given d...</div><div class='long'><p>Runs 'pragma integrity_check' on the given database (and all the attached databases)\n and returns true if the given database (and all its attached databases) pass integrity_check,\n false otherwise.</p>\n\n<p><p>\n If the result is false, then this method logs the errors reported by the integrity_check\n command execution.\n<p>\n Note that 'pragma integrity_check' on a database can take a long time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the given database (and all its attached databases) pass integrity_check,\n false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-isDbLockedByCurrentThread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-isDbLockedByCurrentThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-isDbLockedByCurrentThread' class='name expandable'>isDbLockedByCurrentThread</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the current thread is holding an active connection to the database. ...</div><div class='long'><p>Returns true if the current thread is holding an active connection to the database.\n <p>\n The name of this method comes from a time when having an active connection\n to the database meant that the thread was holding an actual lock on the\n database.  Nowadays, there is no longer a true \"database lock\" although threads\n may block if they cannot acquire a database connection to perform a\n particular operation.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the current thread is holding an active connection to the database.</p>\n</div></li></ul></div></div></div><div id='method-isDbLockedByOtherThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-isDbLockedByOtherThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-isDbLockedByOtherThreads' class='name expandable'>isDbLockedByOtherThreads</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Always returns false. ...</div><div class='long'><p>Always returns false.\n <p>\n There is no longer the concept of a database lock, so this method always returns false.\n </p></p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Always returns false.  Do not use this method.</p>\n\n        </div>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>False.</p>\n</div></li></ul></div></div></div><div id='method-isOpen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-isOpen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-isOpen' class='name expandable'>isOpen</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the database is currently open. ...</div><div class='long'><p>Returns true if the database is currently open.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the database is currently open (has not been closed).</p>\n</div></li></ul></div></div></div><div id='method-isReadOnly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-isReadOnly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-isReadOnly' class='name expandable'>isReadOnly</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the database is opened as read only. ...</div><div class='long'><p>Returns true if the database is opened as read only.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if database is opened as read only.</p>\n</div></li></ul></div></div></div><div id='method-isWriteAheadLoggingEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-isWriteAheadLoggingEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-isWriteAheadLoggingEnabled' class='name expandable'>isWriteAheadLoggingEnabled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if write-ahead logging has been enabled for this database. ...</div><div class='long'><p>Returns true if write-ahead logging has been enabled for this database.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if write-ahead logging has been enabled for this database.\n@see <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" rel=\"android.database.sqlite.SQLiteDatabase-method-enableWriteAheadLogging\" class=\"docClass\">enableWriteAheadLogging</a>\n@see <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-ENABLE_WRITE_AHEAD_LOGGING\" rel=\"android.database.sqlite.SQLiteDatabase-property-ENABLE_WRITE_AHEAD_LOGGING\" class=\"docClass\">ENABLE_WRITE_AHEAD_LOGGING</a></p>\n</div></li></ul></div></div></div><div id='method-markTableSyncable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-markTableSyncable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-markTableSyncable' class='name expandable'>markTableSyncable</a>( <span class='pre'>table, foreignKey, updateTable</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Mark this table as syncable, with the sync_dirty residing in another\n table. ...</div><div class='long'><p>Mark this table as syncable, with the <em>sync_dirty residing in another\n table. When an update occurs in this table the </em>sync_dirty field of the\n row in updateTable with the _id in foreignKey will be set to\n ensure proper syncing operation.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This method no longer serves any useful purpose and has been deprecated.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>an update on this table will trigger a sync time removal</p>\n</div></li><li><span class='pre'>foreignKey</span> : String<div class='sub-desc'><p>this is the column in table whose value is an _id in\n          updateTable</p>\n</div></li><li><span class='pre'>updateTable</span> : String<div class='sub-desc'><p>this is the table that will have its _sync_dirty</p>\n</div></li></ul></div></div></div><div id='method-needUpgrade' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-needUpgrade' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-needUpgrade' class='name expandable'>needUpgrade</a>( <span class='pre'>newVersion</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the new version code is greater than the current database version. ...</div><div class='long'><p>Returns true if the new version code is greater than the current database version.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newVersion</span> : Number<div class='sub-desc'><p>The new version code.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the new version code is greater than the current database version.</p>\n</div></li></ul></div></div></div><div id='method-openDatabase' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-openDatabase' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-openDatabase' class='name expandable'>openDatabase</a>( <span class='pre'>path, factory, flags, errorHandler</span> ) : Object {android.database.sqlite.SQLiteDatabase}<span class=\"signature\"></span></div><div class='description'><div class='short'>Open the database according to the flags OPEN_READWRITE\n OPEN_READONLY CREATE_IF_NECESSARY and/or NO_LOCALIZED_COLLAT...</div><div class='long'><p>Open the database according to the flags <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-OPEN_READWRITE\" rel=\"android.database.sqlite.SQLiteDatabase-property-OPEN_READWRITE\" class=\"docClass\">OPEN_READWRITE</a>\n <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-OPEN_READONLY\" rel=\"android.database.sqlite.SQLiteDatabase-property-OPEN_READONLY\" class=\"docClass\">OPEN_READONLY</a> <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-CREATE_IF_NECESSARY\" rel=\"android.database.sqlite.SQLiteDatabase-property-CREATE_IF_NECESSARY\" class=\"docClass\">CREATE_IF_NECESSARY</a> and/or <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-NO_LOCALIZED_COLLATORS\" rel=\"android.database.sqlite.SQLiteDatabase-property-NO_LOCALIZED_COLLATORS\" class=\"docClass\">NO_LOCALIZED_COLLATORS</a>.</p>\n\n<p> <p>Sets the locale of the database to the  the system's current locale.\n Call <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-setLocale\" rel=\"android.database.sqlite.SQLiteDatabase-method-setLocale\" class=\"docClass\">setLocale</a> if you would like something else.</p></p>\n\n<p> <p>Accepts input param: a concrete instance of DatabaseErrorHandler to be\n used to handle corruption when sqlite reports database corruption.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : String<div class='sub-desc'><p>to database file to open and/or create</p>\n</div></li><li><span class='pre'>factory</span> : Object {SQLiteDatabase.CursorFactory}<div class='sub-desc'><p>an optional factory class that is called to instantiate a\n            cursor when query is called, or null for default</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>to control database access mode</p>\n</div></li><li><span class='pre'>errorHandler</span> : Object {DatabaseErrorHandler}<div class='sub-desc'><p>the DatabaseErrorHandler obj to be used to handle corruption\n when sqlite reports database corruption</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.sqlite.SQLiteDatabase}</span><div class='sub-desc'><p>the newly opened database</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLiteException if the database cannot be opened</p>\n</div></li></ul></div></div></div><div id='method-openOrCreateDatabase' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-openOrCreateDatabase' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-openOrCreateDatabase' class='name expandable'>openOrCreateDatabase</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler). ...</div><div class='long'><p>Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler).</p>\n</div></div></div><div id='method-query' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-query' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-query' class='name expandable'>query</a>( <span class='pre'>table, columns, selection, selectionArgs, groupBy, having, orderBy, limit</span> ) : Object {android.database.Cursor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Query the given table, returning a Cursor over the result set. ...</div><div class='long'><p>Query the given table, returning a Cursor over the result set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>The table name to compile the query against.</p>\n</div></li><li><span class='pre'>columns</span> : Object {java.lang.String[]}<div class='sub-desc'><p>A list of which columns to return. Passing null will\n            return all columns, which is discouraged to prevent reading\n            data from storage that isn't going to be used.</p>\n</div></li><li><span class='pre'>selection</span> : String<div class='sub-desc'><p>A filter declaring which rows to return, formatted as an\n            SQL WHERE clause (excluding the WHERE itself). Passing null\n            will return all rows for the given table.</p>\n</div></li><li><span class='pre'>selectionArgs</span> : Object {java.lang.String[]}<div class='sub-desc'><p>You may include ?s in selection, which will be\n         replaced by the values from selectionArgs, in order that they\n         appear in the selection. The values will be bound as Strings.</p>\n</div></li><li><span class='pre'>groupBy</span> : String<div class='sub-desc'><p>A filter declaring how to group rows, formatted as an SQL\n            GROUP BY clause (excluding the GROUP BY itself). Passing null\n            will cause the rows to not be grouped.</p>\n</div></li><li><span class='pre'>having</span> : String<div class='sub-desc'><p>A filter declare which row groups to include in the cursor,\n            if row grouping is being used, formatted as an SQL HAVING\n            clause (excluding the HAVING itself). Passing null will cause\n            all row groups to be included, and is required when row\n            grouping is not being used.</p>\n</div></li><li><span class='pre'>orderBy</span> : String<div class='sub-desc'><p>How to order the rows, formatted as an SQL ORDER BY clause\n            (excluding the ORDER BY itself). Passing null will use the\n            default sort order, which may be unordered.</p>\n</div></li><li><span class='pre'>limit</span> : String<div class='sub-desc'><p>Limits the number of rows returned by the query,\n            formatted as LIMIT clause. Passing null denotes no LIMIT clause.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.Cursor}</span><div class='sub-desc'><p>A Cursor object, which is positioned before the first entry. Note that\n Cursors are not synchronized, see the documentation for more details.\n@see Cursor</p>\n</div></li></ul></div></div></div><div id='method-queryWithFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-queryWithFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-queryWithFactory' class='name expandable'>queryWithFactory</a>( <span class='pre'>cursorFactory, distinct, table, columns, selection, selectionArgs, groupBy, having, orderBy, limit, cancellationSignal</span> ) : Object {android.database.Cursor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Query the given URL, returning a Cursor over the result set. ...</div><div class='long'><p>Query the given URL, returning a Cursor over the result set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cursorFactory</span> : Object {SQLiteDatabase.CursorFactory}<div class='sub-desc'><p>the cursor factory to use, or null for the default factory</p>\n</div></li><li><span class='pre'>distinct</span> : Boolean<div class='sub-desc'><p>true if you want each row to be unique, false otherwise.</p>\n</div></li><li><span class='pre'>table</span> : String<div class='sub-desc'><p>The table name to compile the query against.</p>\n</div></li><li><span class='pre'>columns</span> : Object {java.lang.String[]}<div class='sub-desc'><p>A list of which columns to return. Passing null will\n            return all columns, which is discouraged to prevent reading\n            data from storage that isn't going to be used.</p>\n</div></li><li><span class='pre'>selection</span> : String<div class='sub-desc'><p>A filter declaring which rows to return, formatted as an\n            SQL WHERE clause (excluding the WHERE itself). Passing null\n            will return all rows for the given table.</p>\n</div></li><li><span class='pre'>selectionArgs</span> : Object {java.lang.String[]}<div class='sub-desc'><p>You may include ?s in selection, which will be\n         replaced by the values from selectionArgs, in order that they\n         appear in the selection. The values will be bound as Strings.</p>\n</div></li><li><span class='pre'>groupBy</span> : String<div class='sub-desc'><p>A filter declaring how to group rows, formatted as an SQL\n            GROUP BY clause (excluding the GROUP BY itself). Passing null\n            will cause the rows to not be grouped.</p>\n</div></li><li><span class='pre'>having</span> : String<div class='sub-desc'><p>A filter declare which row groups to include in the cursor,\n            if row grouping is being used, formatted as an SQL HAVING\n            clause (excluding the HAVING itself). Passing null will cause\n            all row groups to be included, and is required when row\n            grouping is not being used.</p>\n</div></li><li><span class='pre'>orderBy</span> : String<div class='sub-desc'><p>How to order the rows, formatted as an SQL ORDER BY clause\n            (excluding the ORDER BY itself). Passing null will use the\n            default sort order, which may be unordered.</p>\n</div></li><li><span class='pre'>limit</span> : String<div class='sub-desc'><p>Limits the number of rows returned by the query,\n            formatted as LIMIT clause. Passing null denotes no LIMIT clause.</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or null if none.\n If the operation is canceled, then OperationCanceledException will be thrown\n when the query is executed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.Cursor}</span><div class='sub-desc'><p>A Cursor object, which is positioned before the first entry. Note that\n Cursors are not synchronized, see the documentation for more details.\n@see Cursor</p>\n</div></li></ul></div></div></div><div id='method-rawQuery' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-rawQuery' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-rawQuery' class='name expandable'>rawQuery</a>( <span class='pre'>sql, selectionArgs, cancellationSignal</span> ) : Object {android.database.Cursor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Runs the provided SQL and returns a Cursor over the result set. ...</div><div class='long'><p>Runs the provided SQL and returns a Cursor over the result set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sql</span> : String<div class='sub-desc'><p>the SQL query. The SQL string must not be ; terminated</p>\n</div></li><li><span class='pre'>selectionArgs</span> : Object {java.lang.String[]}<div class='sub-desc'><p>You may include ?s in where clause in the query,\n     which will be replaced by the values from selectionArgs. The\n     values will be bound as Strings.</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or null if none.\n If the operation is canceled, then OperationCanceledException will be thrown\n when the query is executed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.Cursor}</span><div class='sub-desc'><p>A Cursor object, which is positioned before the first entry. Note that\n Cursors are not synchronized, see the documentation for more details.</p>\n</div></li></ul></div></div></div><div id='method-rawQueryWithFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-rawQueryWithFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-rawQueryWithFactory' class='name expandable'>rawQueryWithFactory</a>( <span class='pre'>cursorFactory, sql, selectionArgs, editTable, cancellationSignal</span> ) : Object {android.database.Cursor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Runs the provided SQL and returns a cursor over the result set. ...</div><div class='long'><p>Runs the provided SQL and returns a cursor over the result set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cursorFactory</span> : Object {SQLiteDatabase.CursorFactory}<div class='sub-desc'><p>the cursor factory to use, or null for the default factory</p>\n</div></li><li><span class='pre'>sql</span> : String<div class='sub-desc'><p>the SQL query. The SQL string must not be ; terminated</p>\n</div></li><li><span class='pre'>selectionArgs</span> : Object {java.lang.String[]}<div class='sub-desc'><p>You may include ?s in where clause in the query,\n     which will be replaced by the values from selectionArgs. The\n     values will be bound as Strings.</p>\n</div></li><li><span class='pre'>editTable</span> : String<div class='sub-desc'><p>the name of the first table, which is editable</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or null if none.\n If the operation is canceled, then OperationCanceledException will be thrown\n when the query is executed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.Cursor}</span><div class='sub-desc'><p>A Cursor object, which is positioned before the first entry. Note that\n Cursors are not synchronized, see the documentation for more details.</p>\n</div></li></ul></div></div></div><div id='method-releaseMemory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-releaseMemory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-releaseMemory' class='name expandable'>releaseMemory</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to release memory that SQLite holds but does not require to\n operate properly. ...</div><div class='long'><p>Attempts to release memory that SQLite holds but does not require to\n operate properly. Typically this memory will come from the page cache.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of bytes actually released</p>\n</div></li></ul></div></div></div><div id='method-releaseReference' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/android.database.sqlite.SQLiteClosable' rel='android.database.sqlite.SQLiteClosable' class='defined-in docClass'>android.database.sqlite.SQLiteClosable</a><br/><a href='source/SQLiteClosable.html#android-database-sqlite-SQLiteClosable-method-releaseReference' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteClosable-method-releaseReference' class='name expandable'>releaseReference</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases a reference to the object, closing the object if the last reference\n was released. ...</div><div class='long'><p>Releases a reference to the object, closing the object if the last reference\n was released.\n@see #onAllReferencesReleased()</p>\n</div></div></div><div id='method-releaseReferenceFromContainer' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/android.database.sqlite.SQLiteClosable' rel='android.database.sqlite.SQLiteClosable' class='defined-in docClass'>android.database.sqlite.SQLiteClosable</a><br/><a href='source/SQLiteClosable.html#android-database-sqlite-SQLiteClosable-method-releaseReferenceFromContainer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteClosable-method-releaseReferenceFromContainer' class='name expandable'>releaseReferenceFromContainer</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Releases a reference to the object that was owned by the container of the object,\n closing the object if the last ref...</div><div class='long'><p>Releases a reference to the object that was owned by the container of the object,\n closing the object if the last reference was released.\n@see #onAllReferencesReleasedFromContainer()</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Do not use.</p>\n\n        </div>\n</div></div></div><div id='method-replace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-replace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-replace' class='name expandable'>replace</a>( <span class='pre'>table, nullColumnHack, initialValues</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for replacing a row in the database. ...</div><div class='long'><p>Convenience method for replacing a row in the database.\n Inserts a new row if a row does not already exist.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>the table in which to replace the row</p>\n</div></li><li><span class='pre'>nullColumnHack</span> : String<div class='sub-desc'><p>optional; may be <code>null</code>.\n            SQL doesn't allow inserting a completely empty row without\n            naming at least one column name.  If your provided <code>initialValues</code> is\n            empty, no column names are known and an empty row can't be inserted.\n            If not set to null, the <code>nullColumnHack</code> parameter\n            provides the name of nullable column name to explicitly insert a NULL into\n            in the case where your <code>initialValues</code> is empty.</p>\n</div></li><li><span class='pre'>initialValues</span> : Object {ContentValues}<div class='sub-desc'><p>this map contains the initial column values for\n   the row. The keys should be the column names and the values the column values.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the row ID of the newly inserted row, or -1 if an error occurred</p>\n</div></li></ul></div></div></div><div id='method-replaceOrThrow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-replaceOrThrow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-replaceOrThrow' class='name expandable'>replaceOrThrow</a>( <span class='pre'>table, nullColumnHack, initialValues</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for replacing a row in the database. ...</div><div class='long'><p>Convenience method for replacing a row in the database.\n Inserts a new row if a row does not already exist.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>the table in which to replace the row</p>\n</div></li><li><span class='pre'>nullColumnHack</span> : String<div class='sub-desc'><p>optional; may be <code>null</code>.\n            SQL doesn't allow inserting a completely empty row without\n            naming at least one column name.  If your provided <code>initialValues</code> is\n            empty, no column names are known and an empty row can't be inserted.\n            If not set to null, the <code>nullColumnHack</code> parameter\n            provides the name of nullable column name to explicitly insert a NULL into\n            in the case where your <code>initialValues</code> is empty.</p>\n</div></li><li><span class='pre'>initialValues</span> : Object {ContentValues}<div class='sub-desc'><p>this map contains the initial column values for\n   the row. The keys should be the column names and the values the column values.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the row ID of the newly inserted row, or -1 if an error occurred</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLException</p>\n</div></li></ul></div></div></div><div id='method-setForeignKeyConstraintsEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-setForeignKeyConstraintsEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-setForeignKeyConstraintsEnabled' class='name expandable'>setForeignKeyConstraintsEnabled</a>( <span class='pre'>enable</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether foreign key constraints are enabled for the database. ...</div><div class='long'><p>Sets whether foreign key constraints are enabled for the database.\n <p>\n By default, foreign key constraints are not enforced by the database.\n This method allows an application to enable foreign key constraints.\n It must be called each time the database is opened to ensure that foreign\n key constraints are enabled for the session.\n </p><p>\n A good time to call this method is right after calling <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-openOrCreateDatabase\" rel=\"android.database.sqlite.SQLiteDatabase-method-openOrCreateDatabase\" class=\"docClass\">openOrCreateDatabase</a>\n or in the <a href=\"#!/api/android.database.sqlite.SQLiteOpenHelper-method-onConfigure\" rel=\"android.database.sqlite.SQLiteOpenHelper-method-onConfigure\" class=\"docClass\">android.database.sqlite.SQLiteOpenHelper.onConfigure</a> callback.\n </p><p>\n When foreign key constraints are disabled, the database does not check whether\n changes to the database will violate foreign key constraints.  Likewise, when\n foreign key constraints are disabled, the database will not execute cascade\n delete or update triggers.  As a result, it is possible for the database\n state to become inconsistent.  To perform a database integrity check,\n call <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-method-isDatabaseIntegrityOk\" rel=\"android.database.sqlite.SQLiteDatabase-method-isDatabaseIntegrityOk\" class=\"docClass\">isDatabaseIntegrityOk</a>.\n </p><p>\n This method must not be called while a transaction is in progress.\n </p><p>\n See also <a href=\"http://sqlite.org/foreignkeys.html\">SQLite Foreign Key Constraints</a>\n for more details about foreign key constraint support.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>enable</span> : Boolean<div class='sub-desc'><p>True to enable foreign key constraints, false to disable them.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the are transactions is in progress\n when this method is called.</p>\n</div></li></ul></div></div></div><div id='method-setLocale' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-setLocale' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-setLocale' class='name expandable'>setLocale</a>( <span class='pre'>locale</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the locale for this database. ...</div><div class='long'><p>Sets the locale for this database.  Does nothing if this database has\n the <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-NO_LOCALIZED_COLLATORS\" rel=\"android.database.sqlite.SQLiteDatabase-property-NO_LOCALIZED_COLLATORS\" class=\"docClass\">NO_LOCALIZED_COLLATORS</a> flag set or was opened read only.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>locale</span> : Object {Locale}<div class='sub-desc'><p>The new locale.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLException if the locale could not be set.  The most common reason\n for this is that there is no collator available for the locale you requested.\n In this case the database remains unchanged.</p>\n</div></li></ul></div></div></div><div id='method-setLockingEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-setLockingEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-setLockingEnabled' class='name expandable'>setLockingEnabled</a>( <span class='pre'>lockingEnabled</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Control whether or not the SQLiteDatabase is made thread-safe by using locks\n around critical sections. ...</div><div class='long'><p>Control whether or not the SQLiteDatabase is made thread-safe by using locks\n around critical sections. This is pretty expensive, so if you know that your\n DB will only be used by a single thread then you should set this to false.\n The default is true.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This method now does nothing.  Do not use.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lockingEnabled</span> : Boolean<div class='sub-desc'><p>set to true to enable locks, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-setMaxSqlCacheSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-setMaxSqlCacheSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-setMaxSqlCacheSize' class='name expandable'>setMaxSqlCacheSize</a>( <span class='pre'>cacheSize</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the maximum size of the prepared-statement cache for this database. ...</div><div class='long'><p>Sets the maximum size of the prepared-statement cache for this database.\n (size of the cache = number of compiled-sql-statements stored in the cache).</p>\n\n<p><p>\n Maximum cache size can ONLY be increased from its current size (default = 10).\n If this method is called with smaller size than the current maximum value,\n then IllegalStateException is thrown.\n<p>\n This method is thread-safe.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cacheSize</span> : Number<div class='sub-desc'><p>the size of the cache. can be (0 to <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-MAX_SQL_CACHE_SIZE\" rel=\"android.database.sqlite.SQLiteDatabase-property-MAX_SQL_CACHE_SIZE\" class=\"docClass\">MAX_SQL_CACHE_SIZE</a>)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if input cacheSize > <a href=\"#!/api/android.database.sqlite.SQLiteDatabase-property-MAX_SQL_CACHE_SIZE\" rel=\"android.database.sqlite.SQLiteDatabase-property-MAX_SQL_CACHE_SIZE\" class=\"docClass\">MAX_SQL_CACHE_SIZE</a>.</p>\n</div></li></ul></div></div></div><div id='method-setMaximumSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-setMaximumSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-setMaximumSize' class='name expandable'>setMaximumSize</a>( <span class='pre'>numBytes</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the maximum size the database will grow to. ...</div><div class='long'><p>Sets the maximum size the database will grow to. The maximum size cannot\n be set below the current size.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>numBytes</span> : Number<div class='sub-desc'><p>the maximum database size, in bytes</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the new maximum database size</p>\n</div></li></ul></div></div></div><div id='method-setPageSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-setPageSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-setPageSize' class='name expandable'>setPageSize</a>( <span class='pre'>numBytes</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the database page size. ...</div><div class='long'><p>Sets the database page size. The page size must be a power of two. This\n method does not work if any data has been written to the database file,\n and must be called right after the database has been created.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>numBytes</span> : Number<div class='sub-desc'><p>the database page size, in bytes</p>\n</div></li></ul></div></div></div><div id='method-setTransactionSuccessful' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-setTransactionSuccessful' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-setTransactionSuccessful' class='name expandable'>setTransactionSuccessful</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Marks the current transaction as successful. ...</div><div class='long'><p>Marks the current transaction as successful. Do not do any more database work between\n calling this and calling endTransaction. Do as little non-database work as possible in that\n situation too. If any errors are encountered between this and endTransaction the transaction\n will still be committed.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the current thread is not in a transaction or the\n transaction is already marked as successful.</p>\n</div></li></ul></div></div></div><div id='method-setVersion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-setVersion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-setVersion' class='name expandable'>setVersion</a>( <span class='pre'>version</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the database version. ...</div><div class='long'><p>Sets the database version.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>version</span> : Number<div class='sub-desc'><p>the new database version</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-update' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-update' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-update' class='name expandable'>update</a>( <span class='pre'>table, values, whereClause, whereArgs</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for updating rows in the database. ...</div><div class='long'><p>Convenience method for updating rows in the database.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>the table to update in</p>\n</div></li><li><span class='pre'>values</span> : Object {ContentValues}<div class='sub-desc'><p>a map from column names to new column values. null is a\n            valid value that will be translated to NULL.</p>\n</div></li><li><span class='pre'>whereClause</span> : String<div class='sub-desc'><p>the optional WHERE clause to apply when updating.\n            Passing null will update all rows.</p>\n</div></li><li><span class='pre'>whereArgs</span> : Object {java.lang.String[]}<div class='sub-desc'><p>You may include ?s in the where clause, which\n            will be replaced by the values from whereArgs. The values\n            will be bound as Strings.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of rows affected</p>\n</div></li></ul></div></div></div><div id='method-updateWithOnConflict' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-updateWithOnConflict' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-updateWithOnConflict' class='name expandable'>updateWithOnConflict</a>( <span class='pre'>table, values, whereClause, whereArgs, conflictAlgorithm</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for updating rows in the database. ...</div><div class='long'><p>Convenience method for updating rows in the database.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>table</span> : String<div class='sub-desc'><p>the table to update in</p>\n</div></li><li><span class='pre'>values</span> : Object {ContentValues}<div class='sub-desc'><p>a map from column names to new column values. null is a\n            valid value that will be translated to NULL.</p>\n</div></li><li><span class='pre'>whereClause</span> : String<div class='sub-desc'><p>the optional WHERE clause to apply when updating.\n            Passing null will update all rows.</p>\n</div></li><li><span class='pre'>whereArgs</span> : Object {java.lang.String[]}<div class='sub-desc'><p>You may include ?s in the where clause, which\n            will be replaced by the values from whereArgs. The values\n            will be bound as Strings.</p>\n</div></li><li><span class='pre'>conflictAlgorithm</span> : Number<div class='sub-desc'><p>for update conflict resolver</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of rows affected</p>\n</div></li></ul></div></div></div><div id='method-validateSql' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-validateSql' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-validateSql' class='name expandable'>validateSql</a>( <span class='pre'>sql, cancellationSignal</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Verifies that a SQL SELECT statement is valid by compiling it. ...</div><div class='long'><p>Verifies that a SQL SELECT statement is valid by compiling it.\n If the SQL statement is not valid, this method will throw a <a href=\"#!/api/android.database.sqlite.SQLiteException\" rel=\"android.database.sqlite.SQLiteException\" class=\"docClass\">android.database.sqlite.SQLiteException</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sql</span> : String<div class='sub-desc'><p>SQL to be validated</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or null if none.\n If the operation is canceled, then OperationCanceledException will be thrown\n when the query is executed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLiteException if {@code sql} is invalid</p>\n</div></li></ul></div></div></div><div id='method-yieldIfContended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-yieldIfContended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-yieldIfContended' class='name expandable'>yieldIfContended</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Temporarily end the transaction to let other threads run. ...</div><div class='long'><p>Temporarily end the transaction to let other threads run. The transaction is assumed to be\n successful so far. Do not call setTransactionSuccessful before calling this. When this\n returns a new transaction will have been created but not marked as successful.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>if the db is locked more than once (because of nested transactions) then the lock\n   will not be yielded. Use yieldIfContendedSafely instead.</p>\n\n        </div>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the transaction was yielded</p>\n</div></li></ul></div></div></div><div id='method-yieldIfContendedSafely' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteDatabase'>android.database.sqlite.SQLiteDatabase</span><br/><a href='source/SQLiteDatabase.html#android-database-sqlite-SQLiteDatabase-method-yieldIfContendedSafely' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteDatabase-method-yieldIfContendedSafely' class='name expandable'>yieldIfContendedSafely</a>( <span class='pre'>sleepAfterYieldDelay</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Temporarily end the transaction to let other threads run. ...</div><div class='long'><p>Temporarily end the transaction to let other threads run. The transaction is assumed to be\n successful so far. Do not call setTransactionSuccessful before calling this. When this\n returns a new transaction will have been created but not marked as successful. This assumes\n that there are no nested transactions (beginTransaction has only been called once) and will\n throw an exception if that is not the case.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sleepAfterYieldDelay</span> : Number<div class='sub-desc'><p>if > 0, sleep this long before starting a new transaction if\n   the lock was actually yielded. This will allow other background threads to make some\n   more progress than they would if we started the transaction immediately.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the transaction was yielded</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});