Ext.data.JsonP.android_database_sqlite_SQLiteConnectionPool({"tagname":"class","name":"android.database.sqlite.SQLiteConnectionPool","autodetected":{},"files":[{"filename":"SQLiteConnectionPool.js","href":"SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"CONNECTION_FLAG_INTERACTIVE","tagname":"property","owner":"android.database.sqlite.SQLiteConnectionPool","id":"property-CONNECTION_FLAG_INTERACTIVE","meta":{}},{"name":"CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY","tagname":"property","owner":"android.database.sqlite.SQLiteConnectionPool","id":"property-CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY","meta":{}},{"name":"CONNECTION_FLAG_READ_ONLY","tagname":"property","owner":"android.database.sqlite.SQLiteConnectionPool","id":"property-CONNECTION_FLAG_READ_ONLY","meta":{}},{"name":"acquireConnection","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-acquireConnection","meta":{}},{"name":"close","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-close","meta":{}},{"name":"collectDbStats","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-collectDbStats","meta":{}},{"name":"dump","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-dump","meta":{}},{"name":"getPath","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-getPath","meta":{}},{"name":"open","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-open","meta":{}},{"name":"reconfigure","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-reconfigure","meta":{}},{"name":"releaseConnection","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-releaseConnection","meta":{}},{"name":"setupIdleConnectionHandler","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-setupIdleConnectionHandler","meta":{}},{"name":"shouldYieldConnection","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-shouldYieldConnection","meta":{}},{"name":"toString","tagname":"method","owner":"android.database.sqlite.SQLiteConnectionPool","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.database.sqlite.SQLiteConnectionPool","short_doc":"implements java.io.Closeable\n\nMaintains a pool of active SQLite database connections. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.database.sqlite.SQLiteConnectionPool</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool' target='_blank'>SQLiteConnectionPool.js</a></div></pre><div class='doc-contents'><p>implements java.io.Closeable</p>\n\n<p>Maintains a pool of active SQLite database connections.\n <p>\n At any given time, a connection is either owned by the pool, or it has been\n acquired by a <a href=\"#!/api/android.database.sqlite.SQLiteSession\" rel=\"android.database.sqlite.SQLiteSession\" class=\"docClass\">android.database.sqlite.SQLiteSession</a>.  When the <a href=\"#!/api/android.database.sqlite.SQLiteSession\" rel=\"android.database.sqlite.SQLiteSession\" class=\"docClass\">android.database.sqlite.SQLiteSession</a> is\n finished with the connection it is using, it must return the connection\n back to the pool.\n </p><p>\n The pool holds strong references to the connections it owns.  However,\n it only holds <em>weak references</em> to the connections that sessions\n have acquired from it.  Using weak references in the latter case ensures\n that the connection pool can detect when connections have been improperly\n abandoned so that it can create new connections to replace them if needed.\n </p><p>\n The connection pool is thread-safe (but the connections themselves are not).\n </p></p>\n\n<p> <h2>Exception safety</h2>\n <p>\n This code attempts to maintain the invariant that opened connections are\n always owned.  Unfortunately that means it needs to handle exceptions\n all over to ensure that broken connections get cleaned up.  Most\n operations invokving SQLite can throw <a href=\"#!/api/android.database.sqlite.SQLiteException\" rel=\"android.database.sqlite.SQLiteException\" class=\"docClass\">android.database.sqlite.SQLiteException</a> or other\n runtime exceptions.  This is a bit of a pain to deal with because the compiler\n cannot help us catch missing exception handling code.\n </p><p>\n The general rule for this file: If we are making calls out to\n <a href=\"#!/api/android.database.sqlite.SQLiteConnection\" rel=\"android.database.sqlite.SQLiteConnection\" class=\"docClass\">android.database.sqlite.SQLiteConnection</a> then we must be prepared to handle any\n runtime exceptions it might throw at us.  Note that out-of-memory\n is an Error, not a RuntimeException.  We don't trouble ourselves\n handling out of memory because it is hard to do anything at all sensible then\n and most likely the VM is about to crash.\n </p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-CONNECTION_FLAG_INTERACTIVE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-property-CONNECTION_FLAG_INTERACTIVE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-property-CONNECTION_FLAG_INTERACTIVE' class='name expandable'>CONNECTION_FLAG_INTERACTIVE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Connection flag: Connection is being used interactively. ...</div><div class='long'><p>Connection flag: Connection is being used interactively.</p>\n\n<p>\nThis flag indicates that the connection is needed by the UI thread.\nThe connection pool can use this flag to elevate the priority\nof the database connection request.\n</p>\n\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-property-CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-property-CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY' class='name expandable'>CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Connection flag: Primary connection affinity. ...</div><div class='long'><p>Connection flag: Primary connection affinity.</p>\n\n<p>\nThis flag indicates that the primary connection is required.\nThis flag helps support legacy applications that expect most data modifying\noperations to be serialized by locking the primary database connection.\nSetting this flag essentially implements the old \"db lock\" concept by preventing\nan operation from being performed until it can obtain exclusive access to\nthe primary connection.\n</p>\n\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-CONNECTION_FLAG_READ_ONLY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-property-CONNECTION_FLAG_READ_ONLY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-property-CONNECTION_FLAG_READ_ONLY' class='name expandable'>CONNECTION_FLAG_READ_ONLY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Connection flag: Read-only. ...</div><div class='long'><p>Connection flag: Read-only.</p>\n\n<p>\nThis flag indicates that the connection will only be used to\nperform read-only operations.\n</p>\n\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-acquireConnection' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-acquireConnection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-acquireConnection' class='name expandable'>acquireConnection</a>( <span class='pre'>sql, connectionFlags, cancellationSignal</span> ) : Object {android.database.sqlite.SQLiteConnection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires a connection from the pool. ...</div><div class='long'><p>Acquires a connection from the pool.\n <p>\n The caller must call <a href=\"#!/api/android.database.sqlite.SQLiteConnectionPool-method-releaseConnection\" rel=\"android.database.sqlite.SQLiteConnectionPool-method-releaseConnection\" class=\"docClass\">releaseConnection</a> to release the connection\n back to the pool when it is finished.  Failure to do so will result\n in much unpleasantness.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sql</span> : String<div class='sub-desc'><p>If not null, try to find a connection that already has\n the specified SQL statement in its prepared statement cache.</p>\n</div></li><li><span class='pre'>connectionFlags</span> : Number<div class='sub-desc'><p>The connection request flags.</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or null if none.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.sqlite.SQLiteConnection}</span><div class='sub-desc'><p>The connection that was acquired, never null.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the pool has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLiteException if a database error occurs.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>OperationCanceledException if the operation was canceled.</p>\n</div></li></ul></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes the connection pool. ...</div><div class='long'><p>Closes the connection pool.\n <p>\n When the connection pool is closed, it will refuse all further requests\n to acquire connections.  All connections that are currently available in\n the pool are closed immediately.  Any connections that are still in use\n will be closed as soon as they are returned to the pool.\n </p></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the pool has been closed.</p>\n</div></li></ul></div></div></div><div id='method-collectDbStats' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-collectDbStats' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-collectDbStats' class='name expandable'>collectDbStats</a>( <span class='pre'>dbStatsList</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Collects statistics about database connection memory usage. ...</div><div class='long'><p>Collects statistics about database connection memory usage.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dbStatsList</span> : Object {java.util.ArrayList}<div class='sub-desc'><p>The list to populate.</p>\n</div></li></ul></div></div></div><div id='method-dump' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-dump' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-dump' class='name expandable'>dump</a>( <span class='pre'>printer, verbose</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Dumps debugging information about this connection pool. ...</div><div class='long'><p>Dumps debugging information about this connection pool.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>printer</span> : Object {Printer}<div class='sub-desc'><p>The printer to receive the dump, not null.</p>\n</div></li><li><span class='pre'>verbose</span> : Boolean<div class='sub-desc'><p>True to dump more verbose information.</p>\n</div></li></ul></div></div></div><div id='method-getPath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-getPath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-getPath' class='name expandable'>getPath</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-open' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-open' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-open' class='name expandable'>open</a>( <span class='pre'>configuration</span> ) : Object {android.database.sqlite.SQLiteConnectionPool}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a connection pool for the specified database. ...</div><div class='long'><p>Opens a connection pool for the specified database.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>configuration</span> : Object {SQLiteDatabaseConfiguration}<div class='sub-desc'><p>The database configuration.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.sqlite.SQLiteConnectionPool}</span><div class='sub-desc'><p>The connection pool.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLiteException if a database error occurs.</p>\n</div></li></ul></div></div></div><div id='method-reconfigure' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-reconfigure' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-reconfigure' class='name expandable'>reconfigure</a>( <span class='pre'>configuration</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reconfigures the database configuration of the connection pool and all of its\n connections. ...</div><div class='long'><p>Reconfigures the database configuration of the connection pool and all of its\n connections.\n <p>\n Configuration changes are propagated down to connections immediately if\n they are available or as soon as they are released.  This includes changes\n that affect the size of the pool.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>configuration</span> : Object {SQLiteDatabaseConfiguration}<div class='sub-desc'><p>The new configuration.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the pool has been closed.</p>\n</div></li></ul></div></div></div><div id='method-releaseConnection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-releaseConnection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-releaseConnection' class='name expandable'>releaseConnection</a>( <span class='pre'>connection</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases a connection back to the pool. ...</div><div class='long'><p>Releases a connection back to the pool.\n <p>\n It is ok to call this method after the pool has closed, to release\n connections that were still in use at the time of closure.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>connection</span> : Object {SQLiteConnection}<div class='sub-desc'><p>The connection to release.  Must not be null.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the connection was not acquired\n from this pool or if it has already been released.</p>\n</div></li></ul></div></div></div><div id='method-setupIdleConnectionHandler' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-setupIdleConnectionHandler' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-setupIdleConnectionHandler' class='name expandable'>setupIdleConnectionHandler</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set up the handler based on the provided looper and timeout. ...</div><div class='long'><p>Set up the handler based on the provided looper and timeout.</p>\n</div></div></div><div id='method-shouldYieldConnection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-shouldYieldConnection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-shouldYieldConnection' class='name expandable'>shouldYieldConnection</a>( <span class='pre'>connection, connectionFlags</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the session should yield the connection due to\n contention over available database connections. ...</div><div class='long'><p>Returns true if the session should yield the connection due to\n contention over available database connections.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>connection</span> : Object {SQLiteConnection}<div class='sub-desc'><p>The connection owned by the session.</p>\n</div></li><li><span class='pre'>connectionFlags</span> : Number<div class='sub-desc'><p>The connection request flags.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the session should yield its connection.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the connection was not acquired\n from this pool or if it has already been released.</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.database.sqlite.SQLiteConnectionPool'>android.database.sqlite.SQLiteConnectionPool</span><br/><a href='source/SQLiteConnectionPool.html#android-database-sqlite-SQLiteConnectionPool-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.database.sqlite.SQLiteConnectionPool-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});