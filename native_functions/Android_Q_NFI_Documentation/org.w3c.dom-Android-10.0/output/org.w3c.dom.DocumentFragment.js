Ext.data.JsonP.org_w3c_dom_DocumentFragment({"tagname":"class","name":"org.w3c.dom.DocumentFragment","autodetected":{},"files":[{"filename":"DocumentFragment.js","href":"DocumentFragment.html#org-w3c-dom-DocumentFragment"}],"members":[],"alternateClassNames":[],"aliases":{},"id":"class-org.w3c.dom.DocumentFragment","short_doc":"implements org.w3c.dom.Node\n\n DocumentFragment is a \"lightweight\" or \"minimal\"\n Document object. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/DocumentFragment.html#org-w3c-dom-DocumentFragment' target='_blank'>DocumentFragment.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/org.w3c.dom.Node\" rel=\"org.w3c.dom.Node\" class=\"docClass\">org.w3c.dom.Node</a></p>\n\n<p> <code>DocumentFragment</code> is a \"lightweight\" or \"minimal\"\n <code>Document</code> object. It is very common to want to be able to\n extract a portion of a document's tree or to create a new fragment of a\n document. Imagine implementing a user command like cut or rearranging a\n document by moving fragments around. It is desirable to have an object\n which can hold such fragments and it is quite natural to use a Node for\n this purpose. While it is true that a <code>Document</code> object could\n fulfill this role, a <code>Document</code> object can potentially be a\n heavyweight object, depending on the underlying implementation. What is\n really needed for this is a very lightweight object.\n <code>DocumentFragment</code> is such an object.\n <p>Furthermore, various operations -- such as inserting nodes as children\n of another <code>Node</code> -- may take <code>DocumentFragment</code>\n objects as arguments; this results in all the child nodes of the\n <code>DocumentFragment</code> being moved to the child list of this node.\n <p>The children of a <code>DocumentFragment</code> node are zero or more\n nodes representing the tops of any sub-trees defining the structure of\n the document. <code>DocumentFragment</code> nodes do not need to be\n well-formed XML documents (although they do need to follow the rules\n imposed upon well-formed XML parsed entities, which can have multiple top\n nodes). For example, a <code>DocumentFragment</code> might have only one\n child and that child node could be a <code>Text</code> node. Such a\n structure model represents neither an HTML document nor a well-formed XML\n document.\n <p>When a <code>DocumentFragment</code> is inserted into a\n <code>Document</code> (or indeed any other <code>Node</code> that may\n take children) the children of the <code>DocumentFragment</code> and not\n the <code>DocumentFragment</code> itself are inserted into the\n <code>Node</code>. This makes the <code>DocumentFragment</code> very\n useful when the user wishes to create nodes that are siblings; the\n <code>DocumentFragment</code> acts as the parent of these nodes so that\n the user can use the standard methods from the <code>Node</code>\n interface, such as <code>Node.insertBefore</code> and\n <code>Node.appendChild</code>.\n <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.</p>\n</div><div class='members'></div></div>","meta":{}});