Ext.data.JsonP.org_w3c_dom_TypeInfo({"tagname":"class","name":"org.w3c.dom.TypeInfo","autodetected":{},"files":[{"filename":"TypeInfo.js","href":"TypeInfo.html#org-w3c-dom-TypeInfo"}],"since":"DOM Level 3","members":[{"name":"DERIVATION_EXTENSION","tagname":"property","owner":"org.w3c.dom.TypeInfo","id":"property-DERIVATION_EXTENSION","meta":{}},{"name":"DERIVATION_LIST","tagname":"property","owner":"org.w3c.dom.TypeInfo","id":"property-DERIVATION_LIST","meta":{}},{"name":"DERIVATION_RESTRICTION","tagname":"property","owner":"org.w3c.dom.TypeInfo","id":"property-DERIVATION_RESTRICTION","meta":{}},{"name":"DERIVATION_UNION","tagname":"property","owner":"org.w3c.dom.TypeInfo","id":"property-DERIVATION_UNION","meta":{}},{"name":"getTypeName","tagname":"method","owner":"org.w3c.dom.TypeInfo","id":"method-getTypeName","meta":{}},{"name":"getTypeNamespace","tagname":"method","owner":"org.w3c.dom.TypeInfo","id":"method-getTypeNamespace","meta":{}},{"name":"isDerivedFrom","tagname":"method","owner":"org.w3c.dom.TypeInfo","id":"method-isDerivedFrom","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-org.w3c.dom.TypeInfo","short_doc":"The TypeInfo interface represents a type referenced from\n Element or Attr nodes, specified in the schemas\n associated...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/TypeInfo.html#org-w3c-dom-TypeInfo' target='_blank'>TypeInfo.js</a></div></pre><div class='doc-contents'><p>The <code>TypeInfo</code> interface represents a type referenced from\n <code>Element</code> or <code>Attr</code> nodes, specified in the schemas\n associated with the document. The type is a pair of a namespace URI and\n name properties, and depends on the document's schema.\n <p> If the document's schema is an XML DTD [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>], the values\n are computed as follows:\n <ul>\n <li> If this type is referenced from an\n <code>Attr</code> node, <code>typeNamespace</code> is\n <code>\"http://www.w3.org/TR/REC-xml\"</code> and <code>typeName</code>\n represents the <b>[attribute type]</b> property in the [<a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/'>XML Information Set</a>]\n . If there is no declaration for the attribute, <code>typeNamespace</code>\n  and <code>typeName</code> are <code>null</code>.\n </li>\n <li> If this type is\n referenced from an <code>Element</code> node, <code>typeNamespace</code>\n and <code>typeName</code> are <code>null</code>.\n </li>\n </ul>\n <p> If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n , the values are computed as follows using the post-schema-validation\n infoset contributions (also called PSVI contributions):\n <ul>\n <li> If the <b>[validity]</b> property exists AND is <em>\"invalid\"</em> or <em>\"notKnown\"</em>: the {target namespace} and {name} properties of the declared type if\n available, otherwise <code>null</code>.\n <p ><b>Note:</b>  At the time of writing, the XML Schema specification does\n not require exposing the declared type. Thus, DOM implementations might\n choose not to provide type information if validity is not valid.\n </p></li>\n <li> If the <b>[validity]</b> property exists and is <em>\"valid\"</em>:\n <ol>\n <li> If <b>[member type definition]</b> exists:\n <ol>\n <li>If {name} is not absent, then expose {name} and {target\n namespace} properties of the <b>[member type definition]</b> property;\n </li>\n <li>Otherwise, expose the namespace and local name of the\n corresponding anonymous type name.\n </li>\n </ol>\n </li>\n <li> If the <b>[type definition]</b> property exists:\n <ol>\n <li>If {name} is not absent, then expose {name} and {target\n namespace} properties of the <b>[type definition]</b> property;\n </li>\n <li>Otherwise, expose the namespace and local name of the\n corresponding anonymous type name.\n </li>\n </ol>\n </li>\n <li> If the <b>[member type definition anonymous]</b> exists:\n <ol>\n <li>If it is false, then expose <b>[member type definition name]</b> and <b>[member type definition namespace]</b> properties;\n </li>\n <li>Otherwise, expose the namespace and local name of the\n corresponding anonymous type name.\n </li>\n </ol>\n </li>\n <li> If the <b>[type definition anonymous]</b> exists:\n <ol>\n <li>If it is false, then expose <b>[type definition name]</b> and <b>[type definition namespace]</b> properties;\n </li>\n <li>Otherwise, expose the namespace and local name of the\n corresponding anonymous type name.\n </li>\n </ol>\n </li>\n </ol>\n </li>\n </ul>\n <p ><b>Note:</b>  Other schema languages are outside the scope of the W3C\n and therefore should define how to represent their type systems using\n <code>TypeInfo</code>.\n <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.</p>\n        <p>Available since: <b>DOM Level 3</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DERIVATION_EXTENSION' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.TypeInfo'>org.w3c.dom.TypeInfo</span><br/><a href='source/TypeInfo.html#org-w3c-dom-TypeInfo-property-DERIVATION_EXTENSION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.TypeInfo-property-DERIVATION_EXTENSION' class='name expandable'>DERIVATION_EXTENSION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If the document's schema is an XML Schema [XML Schema Part 1]\n, this constant represents the derivation by \nextension. ...</div><div class='long'><p>If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n, this constant represents the derivation by <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-typeExtension'>\nextension</a>.\n<br>  The reference type definition is derived by extension from the\nother type definition if the other type definition can be reached\nrecursively following the {base type definition} property from the\nreference type definition, and at least one of the <em>derivation methods</em> involved is an extension.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-DERIVATION_LIST' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.TypeInfo'>org.w3c.dom.TypeInfo</span><br/><a href='source/TypeInfo.html#org-w3c-dom-TypeInfo-property-DERIVATION_LIST' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.TypeInfo-property-DERIVATION_LIST' class='name expandable'>DERIVATION_LIST</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If the document's schema is an XML Schema [XML Schema Part 1]\n, this constant represents the list. ...</div><div class='long'><p>If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n, this constant represents the <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-list'>list</a>.\n<br> The reference type definition is derived by list from the other\ntype definition if there exists two type definitions T1 and T2 such\nas the reference type definition is derived from T1 by\n<code>DERIVATION_RESTRICTION</code> or\n<code>DERIVATION_EXTENSION</code>, T2 is derived from the other type\ndefinition by <code>DERIVATION_RESTRICTION</code>, T1 has {variety} <em>list</em>, and T2 is the {item type definition}. Note that T1 could be the same as\nthe reference type definition, and T2 could be the same as the other\ntype definition.</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-DERIVATION_RESTRICTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.TypeInfo'>org.w3c.dom.TypeInfo</span><br/><a href='source/TypeInfo.html#org-w3c-dom-TypeInfo-property-DERIVATION_RESTRICTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.TypeInfo-property-DERIVATION_RESTRICTION' class='name expandable'>DERIVATION_RESTRICTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If the document's schema is an XML Schema [XML Schema Part 1]\n, this constant represents the derivation by \nrestricti...</div><div class='long'><p>If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n, this constant represents the derivation by <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-typeRestriction'>\nrestriction</a> if complex types are involved, or a <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-restriction'>\nrestriction</a> if simple types are involved.\n<br>  The reference type definition is derived by restriction from the\nother type definition if the other type definition is the same as the\nreference type definition, or if the other type definition can be\nreached recursively following the {base type definition} property\nfrom the reference type definition, and all the <em>derivation methods</em> involved are restriction.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-DERIVATION_UNION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.TypeInfo'>org.w3c.dom.TypeInfo</span><br/><a href='source/TypeInfo.html#org-w3c-dom-TypeInfo-property-DERIVATION_UNION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.TypeInfo-property-DERIVATION_UNION' class='name expandable'>DERIVATION_UNION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If the document's schema is an XML Schema [XML Schema Part 1]\n, this constant represents the \nunion if simple types a...</div><div class='long'><p>If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n, this constant represents the <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-union'>\nunion</a> if simple types are involved.\n<br> The reference type definition is derived by union from the other\ntype definition if there exists two type definitions T1 and T2 such\nas the reference type definition is derived from T1 by\n<code>DERIVATION_RESTRICTION</code> or\n<code>DERIVATION_EXTENSION</code>, T2 is derived from the other type\ndefinition by <code>DERIVATION_RESTRICTION</code>, T1 has {variety} <em>union</em>, and one of the {member type definitions} is T2. Note that T1 could be\nthe same as the reference type definition, and T2 could be the same\nas the other type definition.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getTypeName' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.TypeInfo'>org.w3c.dom.TypeInfo</span><br/><a href='source/TypeInfo.html#org-w3c-dom-TypeInfo-method-getTypeName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.TypeInfo-method-getTypeName' class='name expandable'>getTypeName</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The name of a type declared for the associated element or attribute,\n or null if unknown. ...</div><div class='long'><p>The name of a type declared for the associated element or attribute,\n or <code>null</code> if unknown.</p>\n</div></div></div><div id='method-getTypeNamespace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.TypeInfo'>org.w3c.dom.TypeInfo</span><br/><a href='source/TypeInfo.html#org-w3c-dom-TypeInfo-method-getTypeNamespace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.TypeInfo-method-getTypeNamespace' class='name expandable'>getTypeNamespace</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The namespace of the type declared for the associated element or\n attribute or null if the element does not have\n dec...</div><div class='long'><p>The namespace of the type declared for the associated element or\n attribute or <code>null</code> if the element does not have\n declaration or if no namespace information is available.</p>\n</div></div></div><div id='method-isDerivedFrom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.TypeInfo'>org.w3c.dom.TypeInfo</span><br/><a href='source/TypeInfo.html#org-w3c-dom-TypeInfo-method-isDerivedFrom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.TypeInfo-method-isDerivedFrom' class='name expandable'>isDerivedFrom</a>( <span class='pre'>typeNamespaceArg, typeNameArg, derivationMethod</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>This method returns if there is a derivation between the reference\n type definition, i.e. ...</div><div class='long'><p>This method returns if there is a derivation between the reference\n type definition, i.e. the <code>TypeInfo</code> on which the method\n is being called, and the other type definition, i.e. the one passed\n as parameters.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>typeNamespaceArg</span> : String<div class='sub-desc'><p>the namespace of the other type definition.</p>\n</div></li><li><span class='pre'>typeNameArg</span> : String<div class='sub-desc'><p>the name of the other type definition.</p>\n</div></li><li><span class='pre'>derivationMethod</span> : Number<div class='sub-desc'><p>the type of derivation and conditions applied\n   between two types, as described in the list of constants provided\n   in this interface.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>If the document's schema is a DTD or no schema is associated\n   with the document, this method will always return <code>false</code>\n   .  If the document's schema is an XML Schema, the method will\n   <code>true</code> if the reference type definition is derived from\n   the other type definition according to the derivation parameter. If\n   the value of the parameter is <code>0</code> (no bit is set to\n   <code>1</code> for the <code>derivationMethod</code> parameter),\n   the method will return <code>true</code> if the other type\n   definition can be reached by recursing any combination of {base\n   type definition}, {item type definition}, or {member type\n   definitions} from the reference type definition.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});