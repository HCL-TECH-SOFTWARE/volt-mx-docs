Ext.data.JsonP.javax_net_ssl_ExtendedSSLSession({"tagname":"class","name":"javax.net.ssl.ExtendedSSLSession","autodetected":{},"files":[{"filename":"ExtendedSSLSession.js","href":"ExtendedSSLSession.html#javax-net-ssl-ExtendedSSLSession"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"getLocalSupportedSignatureAlgorithms","tagname":"method","owner":"javax.net.ssl.ExtendedSSLSession","id":"method-getLocalSupportedSignatureAlgorithms","meta":{}},{"name":"getPeerSupportedSignatureAlgorithms","tagname":"method","owner":"javax.net.ssl.ExtendedSSLSession","id":"method-getPeerSupportedSignatureAlgorithms","meta":{}},{"name":"getRequestedServerNames","tagname":"method","owner":"javax.net.ssl.ExtendedSSLSession","id":"method-getRequestedServerNames","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-javax.net.ssl.ExtendedSSLSession","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>javax.net.ssl.ExtendedSSLSession</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ExtendedSSLSession.html#javax-net-ssl-ExtendedSSLSession' target='_blank'>ExtendedSSLSession.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/javax.net.ssl.SSLSession\" rel=\"javax.net.ssl.SSLSession\" class=\"docClass\">javax.net.ssl.SSLSession</a></p>\n\n<p>Extends the <code>SSLSession</code> interface to support additional\n session attributes.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getLocalSupportedSignatureAlgorithms' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.net.ssl.ExtendedSSLSession'>javax.net.ssl.ExtendedSSLSession</span><br/><a href='source/ExtendedSSLSession.html#javax-net-ssl-ExtendedSSLSession-method-getLocalSupportedSignatureAlgorithms' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.net.ssl.ExtendedSSLSession-method-getLocalSupportedSignatureAlgorithms' class='name expandable'>getLocalSupportedSignatureAlgorithms</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an array of supported signature algorithms that the local side\n is willing to use. ...</div><div class='long'><p>Obtains an array of supported signature algorithms that the local side\n is willing to use.\n <p>\n Note: this method is used to indicate to the peer which signature\n algorithms may be used for digital signatures in TLS 1.2. It is\n not meaningful for TLS versions prior to 1.2.\n <p>\n The signature algorithm name must be a standard Java Security\n name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on).\n See Appendix A in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n Java Cryptography Architecture API Specification &amp; Reference </a>\n for information about standard algorithm names.\n <p>\n Note: the local supported signature algorithms should conform to\n the algorithm constraints specified by\n <a href=\"#!/api/javax.net.ssl.SSLParameters-method-getAlgorithmConstraints\" rel=\"javax.net.ssl.SSLParameters-method-getAlgorithmConstraints\" class=\"docClass\">getAlgorithmConstraints()</a>\n method in <code>SSLParameters</code>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>An array of supported signature algorithms, in descending\n     order of preference.  The return value is an empty array if\n     no signature algorithm is supported.\n@see SSLParameters#getAlgorithmConstraints</p>\n</div></li></ul></div></div></div><div id='method-getPeerSupportedSignatureAlgorithms' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.net.ssl.ExtendedSSLSession'>javax.net.ssl.ExtendedSSLSession</span><br/><a href='source/ExtendedSSLSession.html#javax-net-ssl-ExtendedSSLSession-method-getPeerSupportedSignatureAlgorithms' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.net.ssl.ExtendedSSLSession-method-getPeerSupportedSignatureAlgorithms' class='name expandable'>getPeerSupportedSignatureAlgorithms</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an array of supported signature algorithms that the peer is\n able to use. ...</div><div class='long'><p>Obtains an array of supported signature algorithms that the peer is\n able to use.\n <p>\n Note: this method is used to indicate to the local side which signature\n algorithms may be used for digital signatures in TLS 1.2. It is\n not meaningful for TLS versions prior to 1.2.\n <p>\n The signature algorithm name must be a standard Java Security\n name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on).\n See Appendix A in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n Java Cryptography Architecture API Specification &amp; Reference </a>\n for information about standard algorithm names.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>An array of supported signature algorithms, in descending\n     order of preference.  The return value is an empty array if\n     the peer has not sent the supported signature algorithms.\n@see X509KeyManager\n@see X509ExtendedKeyManager</p>\n</div></li></ul></div></div></div><div id='method-getRequestedServerNames' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.net.ssl.ExtendedSSLSession'>javax.net.ssl.ExtendedSSLSession</span><br/><a href='source/ExtendedSSLSession.html#javax-net-ssl-ExtendedSSLSession-method-getRequestedServerNames' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.net.ssl.ExtendedSSLSession-method-getRequestedServerNames' class='name expandable'>getRequestedServerNames</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a List containing all javax.net.ssl.SNIServerNames\n of the requested Server Name Indication (SNI) extension. ...</div><div class='long'><p>Obtains a List containing all <a href=\"#!/api/javax.net.ssl.SNIServerName\" rel=\"javax.net.ssl.SNIServerName\" class=\"docClass\">javax.net.ssl.SNIServerName</a>s\n of the requested Server Name Indication (SNI) extension.\n <P>\n In server mode, unless the return List is empty,\n the server should use the requested server names to guide its\n selection of an appropriate authentication certificate, and/or\n other aspects of security policy.\n <P>\n In client mode, unless the return List is empty,\n the client should use the requested server names to guide its\n endpoint identification of the peer's identity, and/or\n other aspects of security policy.</P></P></p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a non-null immutable list of SNIServerNames of the\n         requested server name indications. The returned list may be\n         empty if no server name indications were requested.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the underlying provider\n         does not implement the operation\n@see SNIServerName\n@see X509ExtendedTrustManager\n@see X509ExtendedKeyManager</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});