Ext.data.JsonP.javax_net_ssl_ManagerFactoryParameters({"tagname":"class","name":"javax.net.ssl.ManagerFactoryParameters","autodetected":{},"files":[{"filename":"ManagerFactoryParameters.js","href":"ManagerFactoryParameters.html#javax-net-ssl-ManagerFactoryParameters"}],"author":[{"tagname":"author","name":"Brad R. Wetmore","email":null}],"since":"1.4","members":[],"alternateClassNames":[],"aliases":{},"id":"class-javax.net.ssl.ManagerFactoryParameters","short_doc":"This class is the base interface for providing\n algorithm-specific information to a KeyManagerFactory or\n TrustManage...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ManagerFactoryParameters.html#javax-net-ssl-ManagerFactoryParameters' target='_blank'>ManagerFactoryParameters.js</a></div></pre><div class='doc-contents'><p>This class is the base interface for providing\n algorithm-specific information to a KeyManagerFactory or\n TrustManagerFactory.\n <P>\n In some cases, initialization parameters other than keystores\n may be needed by a provider.  Users of that particular provider\n are expected to pass an implementation of the appropriate\n sub-interface of this class as defined by the\n provider.  The provider can then call the specified methods in\n the <CODE>ManagerFactoryParameters</CODE> implementation to obtain the\n needed information.</P></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'></div></div>","meta":{}});