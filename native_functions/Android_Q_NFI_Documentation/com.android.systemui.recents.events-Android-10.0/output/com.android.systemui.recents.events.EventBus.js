Ext.data.JsonP.com_android_systemui_recents_events_EventBus({"tagname":"class","name":"com.android.systemui.recents.events.EventBus","autodetected":{},"files":[{"filename":"EventBus.js","href":"EventBus.html#com-android-systemui-recents-events-EventBus"}],"extends":"java.lang.Object","members":[{"name":"dump","tagname":"method","owner":"com.android.systemui.recents.events.EventBus","id":"method-dump","meta":{}},{"name":"dumpInternal","tagname":"method","owner":"com.android.systemui.recents.events.EventBus","id":"method-dumpInternal","meta":{}},{"name":"getDefault","tagname":"method","owner":"com.android.systemui.recents.events.EventBus","id":"method-getDefault","meta":{}},{"name":"post","tagname":"method","owner":"com.android.systemui.recents.events.EventBus","id":"method-post","meta":{}},{"name":"register","tagname":"method","owner":"com.android.systemui.recents.events.EventBus","id":"method-register","meta":{}},{"name":"send","tagname":"method","owner":"com.android.systemui.recents.events.EventBus","id":"method-send","meta":{}},{"name":"sendOntoMainThread","tagname":"method","owner":"com.android.systemui.recents.events.EventBus","id":"method-sendOntoMainThread","meta":{}},{"name":"unregister","tagname":"method","owner":"com.android.systemui.recents.events.EventBus","id":"method-unregister","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.systemui.recents.events.EventBus","short_doc":"A simple in-process event bus. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.systemui.recents.events.EventBus</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus' target='_blank'>EventBus.js</a></div></pre><div class='doc-contents'><p>A simple in-process event bus.  It is simple because we can make assumptions about the state of\n SystemUI and Recent's lifecycle.</p>\n\n<p> <p>\n Currently, there is a single EventBus that handles com.android.systemui.recents.events.EventBus.EventBus.com.android.systemui.recents.events.EventBus.Events for each subscriber\n on the main application thread.  Publishers can send() events to synchronously call subscribers\n of that event, or post() events to be processed in the next run of the Looper.</p>\n\n<p> <p>\n Subscribers must be registered with a particular EventBus before they will receive events, and\n handler methods must match a specific signature.</p>\n\n<p> <p>\n Event method signature:<ul>\n <li>Methods must be public final\n <li>Methods must return void\n <li>Methods must be called \"onBusEvent\"\n <li>Methods must take one parameter, of class type deriving from com.android.systemui.recents.events.EventBus.EventBus.com.android.systemui.recents.events.EventBus.Event\n </li></li></li></li></ul></p>\n\n<p> </p>\n Each subscriber can be registered with a given priority (default 1), and events will be dispatch\n in decreasing order of priority.  For subscribers with the same priority, events will be\n dispatched by latest registration time to earliest.</p>\n\n<p> <p>\n Caveats:<ul>\n <li>The EventBus keeps a WeakReference to the publisher to prevent memory leaks, so\n there must be another strong reference to the publisher for it to not get garbage-collected and\n continue receiving events.\n <li>Because the event handlers are called back using reflection, the EventBus is not intended\n for use in tight, performance criticial loops.  For most user input/system callback events, this\n is generally of low enough frequency to use the EventBus.\n <li>Because the event handlers are called back using reflection, there will often be no\n references to them from actual code.  The proguard configuration will be need to be updated to\n keep these extra methods:</li></li></li></ul></p>\n\n<p> -keepclassmembers class <strong> {\n public void onBusEvent(</strong>);\n public void onInterprocessBusEvent(<strong>);\n }\n -keepclassmembers class </strong> extends **.EventBus$InterprocessEvent {\n public <init>(android.os.Bundle);\n }</init></p>\n\n<p> <li>Subscriber registration can be expensive depending on the subscriber's Class.  This\n is only done once per class type, but if possible, it is best to pre-register an instance of\n that class beforehand or when idle.\n <li>Each event should be sent once.  Events may hold internal information about the current\n dispatch, or may be queued to be dispatched on another thread (if posted from a non-main thread),\n so it may be unsafe to edit, change, or re-send the event again.\n <li>Events should follow a pattern of public-final POD (plain old data) objects, where they are\n initialized by the constructor and read by each subscriber of that event.  Subscribers should\n never alter events as they are processed, and this enforces that pattern.\n </li></li></li></p>\n\n<p> <p>\n Future optimizations:\n <li>throw exception/log when a subscriber loses the reference\n <li>trace cost per registration &amp; invocation\n <li>trace cross-process invocation\n <li>register(subscriber, Class&lt;?&gt;...) -- pass in exact class types you want registered\n <li>setSubscriberEventHandlerPriority(subscriber, Class<Event>, priority)\n <li>allow subscribers to implement interface, ie. EventBus.Subscriber, which lets then test a\n message before invocation (ie. check if task id == this task id)\n <li>add postOnce() which automatically debounces\n <li>add postDelayed() which delays / postDelayedOnce() which delays and bounces\n <li>consolidate register() and registerInterprocess()\n <li>sendForResult&lt;ReturnType&gt;(Event) to send and get a result, but who will send the\n result?\n </li></li></li></li></li></Event></li></li></li></li></li></p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-dump' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.recents.events.EventBus'>com.android.systemui.recents.events.EventBus</span><br/><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus-method-dump' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.recents.events.EventBus-method-dump' class='name expandable'>dump</a>( <span class='pre'></span> ) : Object {void}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {void}</span><div class='sub-desc'><p>a dump of the current state of the EventBus</p>\n</div></li></ul></div></div></div><div id='method-dumpInternal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.recents.events.EventBus'>com.android.systemui.recents.events.EventBus</span><br/><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus-method-dumpInternal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.recents.events.EventBus-method-dumpInternal' class='name expandable'>dumpInternal</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getDefault' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.recents.events.EventBus'>com.android.systemui.recents.events.EventBus</span><br/><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus-method-getDefault' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.recents.events.EventBus-method-getDefault' class='name expandable'>getDefault</a>( <span class='pre'></span> ) : Object {com.android.systemui.recents.events.EventBus}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.systemui.recents.events.EventBus}</span><div class='sub-desc'><p>the default event bus for the application's main thread.</p>\n</div></li></ul></div></div></div><div id='method-post' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.recents.events.EventBus'>com.android.systemui.recents.events.EventBus</span><br/><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus-method-post' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.recents.events.EventBus-method-post' class='name expandable'>post</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Post a message to the subscribers of the given event type. ...</div><div class='long'><p>Post a message to the subscribers of the given event type.  The messages will be posted on\n the EventBus's looper thread (for the default EventBus, this is the main application thread).</p>\n</div></div></div><div id='method-register' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.recents.events.EventBus'>com.android.systemui.recents.events.EventBus</span><br/><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus-method-register' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.recents.events.EventBus-method-register' class='name expandable'>register</a>( <span class='pre'>subscriber, priority</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers a subscriber to receive events with the given priority. ...</div><div class='long'><p>Registers a subscriber to receive events with the given priority.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>subscriber</span> : Object {Object}<div class='sub-desc'><p>the subscriber to handle events.  If this is the first instance of the\n                   subscriber's class type that has been registered, the class's methods will\n                   be scanned for appropriate event handler methods.</p>\n</div></li><li><span class='pre'>priority</span> : Number<div class='sub-desc'><p>the priority that this subscriber will receive events relative to other\n                 subscribers</p>\n</div></li></ul></div></div></div><div id='method-send' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.recents.events.EventBus'>com.android.systemui.recents.events.EventBus</span><br/><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus-method-send' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.recents.events.EventBus-method-send' class='name expandable'>send</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sends an event to the subscribers of the given event type immediately. ...</div><div class='long'><p>Sends an event to the subscribers of the given event type immediately.  This can only be\n called from the same thread as the EventBus's looper thread (for the default EventBus, this\n is the main application thread).</p>\n</div></div></div><div id='method-sendOntoMainThread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.recents.events.EventBus'>com.android.systemui.recents.events.EventBus</span><br/><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus-method-sendOntoMainThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.recents.events.EventBus-method-sendOntoMainThread' class='name expandable'>sendOntoMainThread</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>If this method is called from the main thread, it will be handled directly. ...</div><div class='long'><p>If this method is called from the main thread, it will be handled directly. If this method\n is not called from the main thread, it will be posted onto the main thread.</p>\n</div></div></div><div id='method-unregister' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.systemui.recents.events.EventBus'>com.android.systemui.recents.events.EventBus</span><br/><a href='source/EventBus.html#com-android-systemui-recents-events-EventBus-method-unregister' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.systemui.recents.events.EventBus-method-unregister' class='name expandable'>unregister</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove all EventHandlers pointing to the specified subscriber. ...</div><div class='long'><p>Remove all EventHandlers pointing to the specified subscriber.  This does not remove the\n mapping of subscriber type to event handler method, in case new instances of this subscriber\n are registered.</p>\n</div></div></div></div></div></div></div>","meta":{}});