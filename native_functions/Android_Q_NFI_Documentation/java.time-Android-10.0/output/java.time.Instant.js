Ext.data.JsonP.java_time_Instant({"tagname":"class","name":"java.time.Instant","autodetected":{},"files":[{"filename":"Instant.js","href":"Instant.html#java-time-Instant"}],"extends":"java.lang.Object","since":"1.8","members":[{"name":"EPOCH","tagname":"property","owner":"java.time.Instant","id":"property-EPOCH","meta":{}},{"name":"MAX","tagname":"property","owner":"java.time.Instant","id":"property-MAX","meta":{}},{"name":"MIN","tagname":"property","owner":"java.time.Instant","id":"property-MIN","meta":{}},{"name":"adjustInto","tagname":"method","owner":"java.time.Instant","id":"method-adjustInto","meta":{}},{"name":"atOffset","tagname":"method","owner":"java.time.Instant","id":"method-atOffset","meta":{}},{"name":"atZone","tagname":"method","owner":"java.time.Instant","id":"method-atZone","meta":{}},{"name":"compareTo","tagname":"method","owner":"java.time.Instant","id":"method-compareTo","meta":{}},{"name":"equals","tagname":"method","owner":"java.time.Instant","id":"method-equals","meta":{}},{"name":"from","tagname":"method","owner":"java.time.Instant","id":"method-from","meta":{}},{"name":"get","tagname":"method","owner":"java.time.Instant","id":"method-get","meta":{}},{"name":"getEpochSecond","tagname":"method","owner":"java.time.Instant","id":"method-getEpochSecond","meta":{}},{"name":"getLong","tagname":"method","owner":"java.time.Instant","id":"method-getLong","meta":{}},{"name":"getNano","tagname":"method","owner":"java.time.Instant","id":"method-getNano","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.time.Instant","id":"method-hashCode","meta":{}},{"name":"isAfter","tagname":"method","owner":"java.time.Instant","id":"method-isAfter","meta":{}},{"name":"isBefore","tagname":"method","owner":"java.time.Instant","id":"method-isBefore","meta":{}},{"name":"isSupported","tagname":"method","owner":"java.time.Instant","id":"method-isSupported","meta":{}},{"name":"minus","tagname":"method","owner":"java.time.Instant","id":"method-minus","meta":{}},{"name":"minusMillis","tagname":"method","owner":"java.time.Instant","id":"method-minusMillis","meta":{}},{"name":"minusNanos","tagname":"method","owner":"java.time.Instant","id":"method-minusNanos","meta":{}},{"name":"minusSeconds","tagname":"method","owner":"java.time.Instant","id":"method-minusSeconds","meta":{}},{"name":"now","tagname":"method","owner":"java.time.Instant","id":"method-now","meta":{}},{"name":"ofEpochMilli","tagname":"method","owner":"java.time.Instant","id":"method-ofEpochMilli","meta":{}},{"name":"ofEpochSecond","tagname":"method","owner":"java.time.Instant","id":"method-ofEpochSecond","meta":{}},{"name":"parse","tagname":"method","owner":"java.time.Instant","id":"method-parse","meta":{}},{"name":"plus","tagname":"method","owner":"java.time.Instant","id":"method-plus","meta":{}},{"name":"plusMillis","tagname":"method","owner":"java.time.Instant","id":"method-plusMillis","meta":{}},{"name":"plusNanos","tagname":"method","owner":"java.time.Instant","id":"method-plusNanos","meta":{}},{"name":"plusSeconds","tagname":"method","owner":"java.time.Instant","id":"method-plusSeconds","meta":{}},{"name":"query","tagname":"method","owner":"java.time.Instant","id":"method-query","meta":{}},{"name":"range","tagname":"method","owner":"java.time.Instant","id":"method-range","meta":{}},{"name":"toEpochMilli","tagname":"method","owner":"java.time.Instant","id":"method-toEpochMilli","meta":{}},{"name":"toString","tagname":"method","owner":"java.time.Instant","id":"method-toString","meta":{}},{"name":"truncatedTo","tagname":"method","owner":"java.time.Instant","id":"method-truncatedTo","meta":{}},{"name":"until","tagname":"method","owner":"java.time.Instant","id":"method-until","meta":{}},{"name":"with","tagname":"method","owner":"java.time.Instant","id":"method-with","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.Instant","short_doc":"implements java.time.temporal.Temporal\n\n implements java.time.temporal.TemporalAdjuster\n\n implements java.lang.Compar...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.time.Instant</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Instant.html#java-time-Instant' target='_blank'>Instant.js</a></div></pre><div class='doc-contents'><p>implements java.time.temporal.Temporal</p>\n\n<p> implements java.time.temporal.TemporalAdjuster</p>\n\n<p> implements java.lang.Comparable</p>\n\n<p> implements java.io.Serializable</p>\n\n<p>An instantaneous point on the time-line.\n <p>\n This class models a single instantaneous point on the time-line.\n This might be used to record event time-stamps in the application.\n <p>\n The range of an instant requires the storage of a number larger than a {@code long}.\n To achieve this, the class stores a {@code long} representing epoch-seconds and an\n {@code int} representing nanosecond-of-second, which will always be between 0 and 999,999,999.\n The epoch-seconds are measured from the standard Java epoch of {@code 1970-01-01T00:00:00Z}\n where instants after the epoch have positive values, and earlier instants have negative values.\n For both the epoch-second and nanosecond parts, a larger value is always later on the time-line\n than a smaller value.</p>\n\n<p> <h3>Time-scale</h3>\n <p>\n The length of the solar day is the standard way that humans measure time.\n This has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds,\n forming a 86400 second day.\n <p>\n Modern timekeeping is based on atomic clocks which precisely define an SI second\n relative to the transitions of a Caesium atom. The length of an SI second was defined\n to be very close to the 86400th fraction of a day.\n <p>\n Unfortunately, as the Earth rotates the length of the day varies.\n In addition, over time the average length of the day is getting longer as the Earth slows.\n As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.\n The actual length of any given day and the amount by which the Earth is slowing\n are not predictable and can only be determined by measurement.\n The UT1 time-scale captures the accurate length of day, but is only available some\n time after the day has completed.\n <p>\n The UTC time-scale is a standard approach to bundle up all the additional fractions\n of a second from UT1 into whole seconds, known as <i>leap-seconds</i>.\n A leap-second may be added or removed depending on the Earth's rotational changes.\n As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where\n necessary in order to keep the day aligned with the Sun.\n <p>\n The modern UTC time-scale was introduced in 1972, introducing the concept of whole leap-seconds.\n Between 1958 and 1972, the definition of UTC was complex, with minor sub-second leaps and\n alterations to the length of the notional second. As of 2012, discussions are underway\n to change the definition of UTC again, with the potential to remove leap seconds or\n introduce other changes.\n <p>\n Given the complexity of accurate timekeeping described above, this Java API defines\n its own time-scale, the <i>Java Time-Scale</i>.\n <p>\n The Java Time-Scale divides each calendar day into exactly 86400\n subdivisions, known as seconds.  These seconds may differ from the\n SI second.  It closely matches the de facto international civil time\n scale, the definition of which changes from time to time.\n <p>\n The Java Time-Scale has slightly different definitions for different\n segments of the time-line, each based on the consensus international\n time scale that is used as the basis for civil time. Whenever the\n internationally-agreed time scale is modified or replaced, a new\n segment of the Java Time-Scale must be defined for it.  Each segment\n must meet these requirements:\n <ul>\n <li>the Java Time-Scale shall closely match the underlying international\n  civil time scale;</li>\n <li>the Java Time-Scale shall exactly match the international civil\n  time scale at noon each day;</li>\n <li>the Java Time-Scale shall have a precisely-defined relationship to\n  the international civil time scale.</li>\n </ul>\n There are currently, as of 2013, two segments in the Java time-scale.\n <p>\n For the segment from 1972-11-03 (exact boundary discussed below) until\n further notice, the consensus international time scale is UTC (with\n leap seconds).  In this segment, the Java Time-Scale is identical to\n <a href=\"http://www.cl.cam.ac.uk/~mgk25/time/utc-sls/\">UTC-SLS</a>.\n This is identical to UTC on days that do not have a leap second.\n On days that do have a leap second, the leap second is spread equally\n over the last 1000 seconds of the day, maintaining the appearance of\n exactly 86400 seconds per day.\n <p>\n For the segment prior to 1972-11-03, extending back arbitrarily far,\n the consensus international time scale is defined to be UT1, applied\n proleptically, which is equivalent to the (mean) solar time on the\n prime meridian (Greenwich). In this segment, the Java Time-Scale is\n identical to the consensus international time scale. The exact\n boundary between the two segments is the instant where UT1 = UTC\n between 1972-11-03T00:00 and 1972-11-04T12:00.\n <p>\n Implementations of the Java time-scale using the JSR-310 API are not\n required to provide any clock that is sub-second accurate, or that\n progresses monotonically or smoothly. Implementations are therefore\n not required to actually perform the UTC-SLS slew or to otherwise be\n aware of leap seconds. JSR-310 does, however, require that\n implementations must document the approach they use when defining a\n clock representing the current instant.\n See <a href=\"#!/api/java.time.Clock\" rel=\"java.time.Clock\" class=\"docClass\">java.time.Clock</a> for details on the available clocks.\n <p>\n The Java time-scale is used for all date-time classes.\n This includes {@code Instant}, {@code LocalDate}, {@code LocalTime}, {@code OffsetDateTime},\n {@code ZonedDateTime} and {@code Duration}.</p>\n\n<p> @implSpec\n This class is immutable and thread-safe.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-EPOCH' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-property-EPOCH' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-property-EPOCH' class='name expandable'>EPOCH</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for the 1970-01-01T00:00:00Z epoch instant. ...</div><div class='long'><p>Constant for the 1970-01-01T00:00:00Z epoch instant.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-MAX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-property-MAX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-property-MAX' class='name expandable'>MAX</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The maximum supported {@code Instant}, '1000000000-12-31T23:59:59.999999999Z'. ...</div><div class='long'><p>The maximum supported {@code Instant}, '1000000000-12-31T23:59:59.999999999Z'.\nThis could be used by an application as a \"far future\" instant.</p>\n\n<p><p>\nThis is one year later than the maximum {@code LocalDateTime}.\nThis provides sufficient values to handle the range of {@code ZoneOffset}\nwhich affect the instant in addition to the local date-time.\nThe value is also chosen such that the value of the year fits in\nan {@code int}.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-MIN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-property-MIN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-property-MIN' class='name expandable'>MIN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The minimum supported {@code Instant}, '-1000000000-01-01T00:00Z'. ...</div><div class='long'><p>The minimum supported {@code Instant}, '-1000000000-01-01T00:00Z'.\nThis could be used by an application as a \"far past\" instant.</p>\n\n<p><p>\nThis is one year earlier than the minimum {@code LocalDateTime}.\nThis provides sufficient values to handle the range of {@code ZoneOffset}\nwhich affect the instant in addition to the local date-time.\nThe value is also chosen such that the value of the year fits in\nan {@code int}.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-adjustInto' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-adjustInto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-adjustInto' class='name expandable'>adjustInto</a>( <span class='pre'>temporal</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adjusts the specified temporal object to have this instant. ...</div><div class='long'><p>Adjusts the specified temporal object to have this instant.\n <p>\n This returns a temporal object of the same observable type as the input\n with the instant changed to be the same as this.\n <p>\n The adjustment is equivalent to using long)\n twice, passing ChronoField.INSTANT_SECONDS and\n ChronoField.NANO_OF_SECOND as the fields.\n <p>\n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisInstant.adjustInto(temporal);\n   temporal = temporal.with(thisInstant);\n </pre>\n\n\n<p> <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the target object to be adjusted, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>the adjusted object, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to make the adjustment</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-atOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-atOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-atOffset' class='name expandable'>atOffset</a>( <span class='pre'>offset</span> ) : Object {java.time.OffsetDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Combines this instant with an offset to create an {@code OffsetDateTime}. ...</div><div class='long'><p>Combines this instant with an offset to create an {@code OffsetDateTime}.\n <p>\n This returns an {@code OffsetDateTime} formed from this instant at the\n specified offset from UTC/Greenwich. An exception will be thrown if the\n instant is too large to fit into an offset date-time.\n <p>\n This method is equivalent to\n java.time.ZoneId) OffsetDateTime.ofInstant(this, offset).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>offset</span> : Object {ZoneOffset}<div class='sub-desc'><p>the offset to combine with, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetDateTime}</span><div class='sub-desc'><p>the offset date-time formed from this instant and the specified offset, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported range</p>\n</div></li></ul></div></div></div><div id='method-atZone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-atZone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-atZone' class='name expandable'>atZone</a>( <span class='pre'>zone</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Combines this instant with a time-zone to create a {@code ZonedDateTime}. ...</div><div class='long'><p>Combines this instant with a time-zone to create a {@code ZonedDateTime}.\n <p>\n This returns an {@code ZonedDateTime} formed from this instant at the\n specified time-zone. An exception will be thrown if the instant is too\n large to fit into a zoned date-time.\n <p>\n This method is equivalent to\n java.time.ZoneId) ZonedDateTime.ofInstant(this, zone).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the zone to combine with, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>the zoned date-time formed from this instant and the specified zone, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported range</p>\n</div></li></ul></div></div></div><div id='method-compareTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'>otherInstant</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compares this instant to the specified instant. ...</div><div class='long'><p>Compares this instant to the specified instant.\n <p>\n The comparison is based on the time-line position of the instants.\n It is \"consistent with equals\", as defined by Comparable.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>otherInstant</span> : Object {Instant}<div class='sub-desc'><p>the other instant to compare to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the comparator value, negative if less, positive if greater</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if otherInstant is null</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-equals' class='name expandable'>equals</a>( <span class='pre'>otherInstant</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this instant is equal to the specified instant. ...</div><div class='long'><p>Checks if this instant is equal to the specified instant.\n <p>\n The comparison is based on the time-line position of the instants.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>otherInstant</span> : Object {Object}<div class='sub-desc'><p>the other instant, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the other instant is equal to this one</p>\n</div></li></ul></div></div></div><div id='method-from' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-from' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-from' class='name expandable'>from</a>( <span class='pre'>temporal</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code Instant} from a temporal object. ...</div><div class='long'><p>Obtains an instance of {@code Instant} from a temporal object.\n <p>\n This obtains an instant based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code Instant}.\n <p>\n The conversion extracts the INSTANT_SECONDS\n and NANO_OF_SECOND fields.\n <p>\n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, {@code Instant::from}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {TemporalAccessor}<div class='sub-desc'><p>the temporal object to convert, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>the instant, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to convert to an {@code Instant}</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-get' class='name expandable'>get</a>( <span class='pre'>field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field from this instant as an {@code int}. ...</div><div class='long'><p>Gets the value of the specified field from this instant as an {@code int}.\n <p>\n This queries this instant for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time, except {@code INSTANT_SECONDS} which is too\n large to fit in an {@code int} and throws a {@code DateTimeException}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained or\n         the value is outside the range of valid values for the field</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported or\n         the range of values exceeds an {@code int}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getEpochSecond' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-getEpochSecond' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-getEpochSecond' class='name expandable'>getEpochSecond</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z. ...</div><div class='long'><p>Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.\n <p>\n The epoch second count is a simple incrementing count of seconds where\n second 0 is 1970-01-01T00:00:00Z.\n The nanosecond part of the day is returned by {@code getNanosOfSecond}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the seconds from the epoch of 1970-01-01T00:00:00Z</p>\n</div></li></ul></div></div></div><div id='method-getLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-getLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-getLong' class='name expandable'>getLong</a>( <span class='pre'>field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field from this instant as a {@code long}. ...</div><div class='long'><p>Gets the value of the specified field from this instant as a {@code long}.\n <p>\n This queries this instant for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getNano' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-getNano' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-getNano' class='name expandable'>getNano</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the number of nanoseconds, later along the time-line, from the start\n of the second. ...</div><div class='long'><p>Gets the number of nanoseconds, later along the time-line, from the start\n of the second.\n <p>\n The nanosecond-of-second value measures the total number of nanoseconds from\n the second returned by {@code getEpochSecond}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the nanoseconds within the second, always positive, never exceeds 999,999,999</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a hash code for this instant. ...</div><div class='long'><p>Returns a hash code for this instant.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a suitable hash code</p>\n</div></li></ul></div></div></div><div id='method-isAfter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-isAfter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-isAfter' class='name expandable'>isAfter</a>( <span class='pre'>otherInstant</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this instant is after the specified instant. ...</div><div class='long'><p>Checks if this instant is after the specified instant.\n <p>\n The comparison is based on the time-line position of the instants.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>otherInstant</span> : Object {Instant}<div class='sub-desc'><p>the other instant to compare to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this instant is after the specified instant</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if otherInstant is null</p>\n</div></li></ul></div></div></div><div id='method-isBefore' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-isBefore' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-isBefore' class='name expandable'>isBefore</a>( <span class='pre'>otherInstant</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this instant is before the specified instant. ...</div><div class='long'><p>Checks if this instant is before the specified instant.\n <p>\n The comparison is based on the time-line position of the instants.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>otherInstant</span> : Object {Instant}<div class='sub-desc'><p>the other instant to compare to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this instant is before the specified instant</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if otherInstant is null</p>\n</div></li></ul></div></div></div><div id='method-isSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-isSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-isSupported' class='name expandable'>isSupported</a>( <span class='pre'>unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the specified unit is supported. ...</div><div class='long'><p>Checks if the specified unit is supported.\n <p>\n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the TemporalUnit) and\n TemporalUnit) minus methods will throw an exception.\n <p>\n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n <ul>\n <li>{@code NANOS}\n <li>{@code MICROS}\n <li>{@code MILLIS}\n <li>{@code SECONDS}\n <li>{@code MINUTES}\n <li>{@code HOURS}\n <li>{@code HALF_DAYS}\n <li>{@code DAYS}\n </li></li></li></li></li></li></li></li></ul>\n All other {@code ChronoUnit} instances will return false.\n <p>\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the unit can be added/subtracted, false if not</p>\n</div></li></ul></div></div></div><div id='method-minus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-minus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-minus' class='name expandable'>minus</a>( <span class='pre'>amountToSubtract, unit</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified amount subtracted. ...</div><div class='long'><p>Returns a copy of this instant with the specified amount subtracted.\n <p>\n This returns a {@code Instant}, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n <p>\n This method is equivalent to TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToSubtract</span> : Number<div class='sub-desc'><p>the amount of the unit to subtract from the result, may be negative</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit of the amount to subtract, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the specified amount subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the subtraction cannot be made</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-minusMillis' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-minusMillis' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-minusMillis' class='name expandable'>minusMillis</a>( <span class='pre'>millisToSubtract</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified duration in milliseconds subtracted. ...</div><div class='long'><p>Returns a copy of this instant with the specified duration in milliseconds subtracted.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>millisToSubtract</span> : Number<div class='sub-desc'><p>the milliseconds to subtract, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the specified milliseconds subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the maximum or minimum instant</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-minusNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-minusNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-minusNanos' class='name expandable'>minusNanos</a>( <span class='pre'>nanosToSubtract</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified duration in nanoseconds subtracted. ...</div><div class='long'><p>Returns a copy of this instant with the specified duration in nanoseconds subtracted.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanosToSubtract</span> : Number<div class='sub-desc'><p>the nanoseconds to subtract, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the specified nanoseconds subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the maximum or minimum instant</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-minusSeconds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-minusSeconds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-minusSeconds' class='name expandable'>minusSeconds</a>( <span class='pre'>secondsToSubtract</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified duration in seconds subtracted. ...</div><div class='long'><p>Returns a copy of this instant with the specified duration in seconds subtracted.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>secondsToSubtract</span> : Number<div class='sub-desc'><p>the seconds to subtract, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the specified seconds subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the maximum or minimum instant</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-now' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-now' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-now' class='name expandable'>now</a>( <span class='pre'>clock</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains the current instant from the specified clock. ...</div><div class='long'><p>Obtains the current instant from the specified clock.\n <p>\n This will query the specified clock to obtain the current time.\n <p>\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using <a href=\"#!/api/java.time.Clock\" rel=\"java.time.Clock\" class=\"docClass\">dependency injection</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>clock</span> : Object {Clock}<div class='sub-desc'><p>the clock to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>the current instant, not null</p>\n</div></li></ul></div></div></div><div id='method-ofEpochMilli' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-ofEpochMilli' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-ofEpochMilli' class='name expandable'>ofEpochMilli</a>( <span class='pre'>epochMilli</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code Instant} using milliseconds from the\n epoch of 1970-01-01T00:00:00Z. ...</div><div class='long'><p>Obtains an instance of {@code Instant} using milliseconds from the\n epoch of 1970-01-01T00:00:00Z.\n <p>\n The seconds and nanoseconds are extracted from the specified milliseconds.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>epochMilli</span> : Number<div class='sub-desc'><p>the number of milliseconds from 1970-01-01T00:00:00Z</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an instant, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the instant exceeds the maximum or minimum instant</p>\n</div></li></ul></div></div></div><div id='method-ofEpochSecond' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-ofEpochSecond' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-ofEpochSecond' class='name expandable'>ofEpochSecond</a>( <span class='pre'>epochSecond, nanoAdjustment</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code Instant} using seconds from the\n epoch of 1970-01-01T00:00:00Z and nanosecond fraction ...</div><div class='long'><p>Obtains an instance of {@code Instant} using seconds from the\n epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.\n <p>\n This method allows an arbitrary number of nanoseconds to be passed in.\n The factory will alter the values of the second and nanosecond in order\n to ensure that the stored nanosecond is in the range 0 to 999,999,999.\n For example, the following will result in the exactly the same instant:</p>\n\n<pre>  Instant.ofEpochSecond(3, 1);\n  Instant.ofEpochSecond(4, -999_999_999);\n  Instant.ofEpochSecond(2, 1000_000_001);\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>epochSecond</span> : Number<div class='sub-desc'><p>the number of seconds from 1970-01-01T00:00:00Z</p>\n</div></li><li><span class='pre'>nanoAdjustment</span> : Number<div class='sub-desc'><p>the nanosecond adjustment to the number of seconds, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an instant, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the instant exceeds the maximum or minimum instant</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-parse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-parse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-parse' class='name expandable'>parse</a>( <span class='pre'>text</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code Instant} from a text string such as\n {@code 2007-12-03T10:15:30.00Z}. ...</div><div class='long'><p>Obtains an instance of {@code Instant} from a text string such as\n {@code 2007-12-03T10:15:30.00Z}.\n <p>\n The string must represent a valid instant in UTC and is parsed using\n DateTimeFormatter.ISO_INSTANT.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>the text to parse, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>the parsed instant, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeParseException if the text cannot be parsed</p>\n</div></li></ul></div></div></div><div id='method-plus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-plus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-plus' class='name expandable'>plus</a>( <span class='pre'>amountToAdd, unit</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified amount added. ...</div><div class='long'><p>Returns a copy of this instant with the specified amount added.\n <p>\n This returns an {@code Instant}, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoUnit then the addition is implemented here.\n The supported fields behave as follows:\n <ul>\n <li>{@code NANOS} -\n  Returns a {@code Instant} with the specified number of nanoseconds added.\n  This is equivalent to <a href=\"#!/api/java.time.Instant-method-plusNanos\" rel=\"java.time.Instant-method-plusNanos\" class=\"docClass\">plusNanos</a>(long).\n <li>{@code MICROS} -\n  Returns a {@code Instant} with the specified number of microseconds added.\n  This is equivalent to <a href=\"#!/api/java.time.Instant-method-plusNanos\" rel=\"java.time.Instant-method-plusNanos\" class=\"docClass\">plusNanos</a>(long) with the amount\n  multiplied by 1,000.\n <li>{@code MILLIS} -\n  Returns a {@code Instant} with the specified number of milliseconds added.\n  This is equivalent to <a href=\"#!/api/java.time.Instant-method-plusNanos\" rel=\"java.time.Instant-method-plusNanos\" class=\"docClass\">plusNanos</a>(long) with the amount\n  multiplied by 1,000,000.\n <li>{@code SECONDS} -\n  Returns a {@code Instant} with the specified number of seconds added.\n  This is equivalent to <a href=\"#!/api/java.time.Instant-method-plusSeconds\" rel=\"java.time.Instant-method-plusSeconds\" class=\"docClass\">plusSeconds</a>(long).\n <li>{@code MINUTES} -\n  Returns a {@code Instant} with the specified number of minutes added.\n  This is equivalent to <a href=\"#!/api/java.time.Instant-method-plusSeconds\" rel=\"java.time.Instant-method-plusSeconds\" class=\"docClass\">plusSeconds</a>(long) with the amount\n  multiplied by 60.\n <li>{@code HOURS} -\n  Returns a {@code Instant} with the specified number of hours added.\n  This is equivalent to <a href=\"#!/api/java.time.Instant-method-plusSeconds\" rel=\"java.time.Instant-method-plusSeconds\" class=\"docClass\">plusSeconds</a>(long) with the amount\n  multiplied by 3,600.\n <li>{@code HALF_DAYS} -\n  Returns a {@code Instant} with the specified number of half-days added.\n  This is equivalent to <a href=\"#!/api/java.time.Instant-method-plusSeconds\" rel=\"java.time.Instant-method-plusSeconds\" class=\"docClass\">plusSeconds</a>(long) with the amount\n  multiplied by 43,200 (12 hours).\n <li>{@code DAYS} -\n  Returns a {@code Instant} with the specified number of days added.\n  This is equivalent to <a href=\"#!/api/java.time.Instant-method-plusSeconds\" rel=\"java.time.Instant-method-plusSeconds\" class=\"docClass\">plusSeconds</a>(long) with the amount\n  multiplied by 86,400 (24 hours).\n </li></li></li></li></li></li></li></li></ul>\n <p>\n All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n passing {@code this} as the argument. In this case, the unit determines\n whether and how to perform the addition.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToAdd</span> : Number<div class='sub-desc'><p>the amount of the unit to add to the result, may be negative</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit of the amount to add, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the specified amount added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the addition cannot be made</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plusMillis' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-plusMillis' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-plusMillis' class='name expandable'>plusMillis</a>( <span class='pre'>millisToAdd</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified duration in milliseconds added. ...</div><div class='long'><p>Returns a copy of this instant with the specified duration in milliseconds added.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>millisToAdd</span> : Number<div class='sub-desc'><p>the milliseconds to add, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the specified milliseconds added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the maximum or minimum instant</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plusNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-plusNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-plusNanos' class='name expandable'>plusNanos</a>( <span class='pre'>nanosToAdd</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified duration in nanoseconds added. ...</div><div class='long'><p>Returns a copy of this instant with the specified duration in nanoseconds added.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanosToAdd</span> : Number<div class='sub-desc'><p>the nanoseconds to add, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the specified nanoseconds added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the maximum or minimum instant</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plusSeconds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-plusSeconds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-plusSeconds' class='name expandable'>plusSeconds</a>( <span class='pre'>secondsToAdd</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified duration in seconds added. ...</div><div class='long'><p>Returns a copy of this instant with the specified duration in seconds added.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>secondsToAdd</span> : Number<div class='sub-desc'><p>the seconds to add, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the specified seconds added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the maximum or minimum instant</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-query' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-query' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-query' class='name expandable'>query</a>( <span class='pre'>query, query</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries this instant using the specified query. ...</div><div class='long'><p>Queries this instant using the specified query.\n <p>\n This queries this instant using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n <p>\n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing {@code this} as the argument.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>query</span> : Object {java.time.temporal.TemporalQuery}<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li><li><span class='pre'>query</span> : Object<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the query result, null may be returned (defined by the query)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to query (defined by the query)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs (defined by the query)</p>\n</div></li></ul></div></div></div><div id='method-range' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-range' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-range' class='name expandable'>range</a>( <span class='pre'>field</span> ) : Object {java.time.temporal.ValueRange}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the range of valid values for the specified field. ...</div><div class='long'><p>Gets the range of valid values for the specified field.\n <p>\n The range object expresses the minimum and maximum valid values for a field.\n This instant is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to query the range for, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.ValueRange}</span><div class='sub-desc'><p>the range of valid values for the field, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the range for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li></ul></div></div></div><div id='method-toEpochMilli' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-toEpochMilli' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-toEpochMilli' class='name expandable'>toEpochMilli</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts this instant to the number of milliseconds from the epoch\n of 1970-01-01T00:00:00Z. ...</div><div class='long'><p>Converts this instant to the number of milliseconds from the epoch\n of 1970-01-01T00:00:00Z.\n <p>\n If this instant represents a point on the time-line too far in the future\n or past to fit in a {@code long} milliseconds, then an exception is thrown.\n <p>\n If this instant has greater than millisecond precision, then the conversion\n will drop any excess precision information as though the amount in nanoseconds\n was subject to integer division by one million.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of milliseconds since the epoch of 1970-01-01T00:00:00Z</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A string representation of this instant using ISO-8601 representation. ...</div><div class='long'><p>A string representation of this instant using ISO-8601 representation.\n <p>\n The format used is the same as DateTimeFormatter.ISO_INSTANT.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>an ISO-8601 representation of this instant, not null</p>\n</div></li></ul></div></div></div><div id='method-truncatedTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-truncatedTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-truncatedTo' class='name expandable'>truncatedTo</a>( <span class='pre'>unit</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code Instant} truncated to the specified unit. ...</div><div class='long'><p>Returns a copy of this {@code Instant} truncated to the specified unit.\n <p>\n Truncating the instant returns a copy of the original with fields\n smaller than the specified unit set to zero.\n The fields are calculated on the basis of using a UTC offset as seen\n in {@code toString}.\n For example, truncating with the MINUTES unit will\n round down to the nearest minute, setting the seconds and nanoseconds to zero.\n <p>\n The unit must have a {@linkplain TemporalUnit#getDuration() duration}\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on ChronoUnit and\n DAYS. Other units throw an exception.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to truncate to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on this instant with the time truncated, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the unit is invalid for truncation</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li></ul></div></div></div><div id='method-until' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-until' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-until' class='name expandable'>until</a>( <span class='pre'>endExclusive, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Calculates the amount of time until another instant in terms of the specified unit. ...</div><div class='long'><p>Calculates the amount of time until another instant in terms of the specified unit.\n <p>\n This calculates the amount of time between two {@code Instant}\n objects in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified instant.\n The result will be negative if the end is before the start.\n The calculation returns a whole number, representing the number of\n complete units between the two instants.\n The {@code Temporal} passed to this method is converted to a\n {@code Instant} using <a href=\"#!/api/java.time.Instant-method-from\" rel=\"java.time.Instant-method-from\" class=\"docClass\">from</a>(TemporalAccessor).\n For example, the amount in days between two dates can be calculated\n using {@code startInstant.until(endInstant, SECONDS)}.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use Temporal):</p>\n\n<pre>   // these two lines are equivalent\n   amount = start.until(end, SECONDS);\n   amount = SECONDS.between(start, end);\n </pre>\n\n\n<p> The choice should be made based on which makes the code more readable.\n <p>\n The calculation is implemented in this method for ChronoUnit.\n The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n {@code MINUTES}, {@code HOURS}, {@code HALF_DAYS} and {@code DAYS}\n are supported. Other {@code ChronoUnit} values will throw an exception.\n <p>\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n passing {@code this} as the first argument and the converted input temporal\n as the second argument.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>endExclusive</span> : Object {Temporal}<div class='sub-desc'><p>the end date, exclusive, which is converted to an {@code Instant}, not null</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to measure the amount in, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the amount of time between this instant and the end instant</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the amount cannot be calculated, or the end\n  temporal cannot be converted to an {@code Instant}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-with' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Instant'>java.time.Instant</span><br/><a href='source/Instant.html#java-time-Instant-method-with' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Instant-method-with' class='name expandable'>with</a>( <span class='pre'>field, newValue</span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this instant with the specified field set to a new value. ...</div><div class='long'><p>Returns a copy of this instant with the specified field set to a new value.\n <p>\n This returns an {@code Instant}, based on this one, with the value\n for the specified field changed.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the adjustment is implemented here.\n The supported fields behave as follows:\n <ul>\n <li>{@code NANO_OF_SECOND} -\n  Returns an {@code Instant} with the specified nano-of-second.\n  The epoch-second will be unchanged.\n <li>{@code MICRO_OF_SECOND} -\n  Returns an {@code Instant} with the nano-of-second replaced by the specified\n  micro-of-second multiplied by 1,000. The epoch-second will be unchanged.\n <li>{@code MILLI_OF_SECOND} -\n  Returns an {@code Instant} with the nano-of-second replaced by the specified\n  milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged.\n <li>{@code INSTANT_SECONDS} -\n  Returns an {@code Instant} with the specified epoch-second.\n  The nano-of-second will be unchanged.\n </li></li></li></li></ul>\n <p>\n In all cases, if the new value is outside the valid range of values for the field\n then a {@code DateTimeException} will be thrown.\n <p>\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n passing {@code this} as the argument. In this case, the field determines\n whether and how to adjust the instant.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to set in the result, not null</p>\n</div></li><li><span class='pre'>newValue</span> : Number<div class='sub-desc'><p>the new value of the field in the result</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>an {@code Instant} based on {@code this} with the specified field set, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the field cannot be set</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});