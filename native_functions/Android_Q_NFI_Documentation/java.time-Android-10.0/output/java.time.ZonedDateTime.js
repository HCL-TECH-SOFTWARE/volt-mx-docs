Ext.data.JsonP.java_time_ZonedDateTime({"tagname":"class","name":"java.time.ZonedDateTime","autodetected":{},"files":[{"filename":"ZonedDateTime.js","href":"ZonedDateTime.html#java-time-ZonedDateTime"}],"extends":"java.lang.Object","since":"1.8","members":[{"name":"equals","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-equals","meta":{}},{"name":"format","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-format","meta":{}},{"name":"from","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-from","meta":{}},{"name":"get","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-get","meta":{}},{"name":"getDayOfMonth","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getDayOfMonth","meta":{}},{"name":"getDayOfWeek","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getDayOfWeek","meta":{}},{"name":"getDayOfYear","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getDayOfYear","meta":{}},{"name":"getHour","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getHour","meta":{}},{"name":"getLong","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getLong","meta":{}},{"name":"getMinute","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getMinute","meta":{}},{"name":"getMonth","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getMonth","meta":{}},{"name":"getMonthValue","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getMonthValue","meta":{}},{"name":"getNano","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getNano","meta":{}},{"name":"getOffset","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getOffset","meta":{}},{"name":"getSecond","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getSecond","meta":{}},{"name":"getYear","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getYear","meta":{}},{"name":"getZone","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-getZone","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-hashCode","meta":{}},{"name":"isSupported","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-isSupported","meta":{}},{"name":"minus","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minus","meta":{}},{"name":"minusDays","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minusDays","meta":{}},{"name":"minusHours","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minusHours","meta":{}},{"name":"minusMinutes","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minusMinutes","meta":{}},{"name":"minusMonths","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minusMonths","meta":{}},{"name":"minusNanos","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minusNanos","meta":{}},{"name":"minusSeconds","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minusSeconds","meta":{}},{"name":"minusWeeks","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minusWeeks","meta":{}},{"name":"minusYears","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-minusYears","meta":{}},{"name":"now","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-now","meta":{}},{"name":"of","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-of","meta":{}},{"name":"ofInstant","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-ofInstant","meta":{}},{"name":"ofLocal","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-ofLocal","meta":{}},{"name":"ofStrict","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-ofStrict","meta":{}},{"name":"parse","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-parse","meta":{}},{"name":"plus","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plus","meta":{}},{"name":"plusDays","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plusDays","meta":{}},{"name":"plusHours","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plusHours","meta":{}},{"name":"plusMinutes","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plusMinutes","meta":{}},{"name":"plusMonths","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plusMonths","meta":{}},{"name":"plusNanos","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plusNanos","meta":{}},{"name":"plusSeconds","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plusSeconds","meta":{}},{"name":"plusWeeks","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plusWeeks","meta":{}},{"name":"plusYears","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-plusYears","meta":{}},{"name":"query","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-query","meta":{}},{"name":"range","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-range","meta":{}},{"name":"toLocalDate","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-toLocalDate","meta":{}},{"name":"toLocalDateTime","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-toLocalDateTime","meta":{}},{"name":"toLocalTime","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-toLocalTime","meta":{}},{"name":"toOffsetDateTime","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-toOffsetDateTime","meta":{}},{"name":"toString","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-toString","meta":{}},{"name":"truncatedTo","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-truncatedTo","meta":{}},{"name":"until","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-until","meta":{}},{"name":"with","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-with","meta":{}},{"name":"withDayOfMonth","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withDayOfMonth","meta":{}},{"name":"withDayOfYear","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withDayOfYear","meta":{}},{"name":"withEarlierOffsetAtOverlap","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withEarlierOffsetAtOverlap","meta":{}},{"name":"withFixedOffsetZone","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withFixedOffsetZone","meta":{}},{"name":"withHour","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withHour","meta":{}},{"name":"withLaterOffsetAtOverlap","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withLaterOffsetAtOverlap","meta":{}},{"name":"withMinute","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withMinute","meta":{}},{"name":"withMonth","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withMonth","meta":{}},{"name":"withNano","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withNano","meta":{}},{"name":"withSecond","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withSecond","meta":{}},{"name":"withYear","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withYear","meta":{}},{"name":"withZoneSameInstant","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withZoneSameInstant","meta":{}},{"name":"withZoneSameLocal","tagname":"method","owner":"java.time.ZonedDateTime","id":"method-withZoneSameLocal","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.ZonedDateTime","short_doc":"implements java.time.temporal.Temporal\n\n implements java.time.chrono.ChronoZonedDateTime\n\n implements java.io.Seriali...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.time.ZonedDateTime</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ZonedDateTime.html#java-time-ZonedDateTime' target='_blank'>ZonedDateTime.js</a></div></pre><div class='doc-contents'><p>implements java.time.temporal.Temporal</p>\n\n<p> implements java.time.chrono.ChronoZonedDateTime</p>\n\n<p> implements java.io.Serializable</p>\n\n<p>A date-time with a time-zone in the ISO-8601 calendar system,\n such as {@code 2007-12-03T10:15:30+01:00 Europe/Paris}.\n <p>\n {@code ZonedDateTime} is an immutable representation of a date-time with a time-zone.\n This class stores all date and time fields, to a precision of nanoseconds,\n and a time-zone, with a zone offset used to handle ambiguous local date-times.\n For example, the value\n \"2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris time-zone\"\n can be stored in a {@code ZonedDateTime}.\n <p>\n This class handles conversion from the local time-line of {@code LocalDateTime}\n to the instant time-line of {@code Instant}.\n The difference between the two time-lines is the offset from UTC/Greenwich,\n represented by a {@code ZoneOffset}.\n <p>\n Converting between the two time-lines involves calculating the offset using the\n rules accessed from the {@code ZoneId}.\n Obtaining the offset for an instant is simple, as there is exactly one valid\n offset for each instant. By contrast, obtaining the offset for a local date-time\n is not straightforward. There are three cases:\n <ul>\n <li>Normal, with one valid offset. For the vast majority of the year, the normal\n  case applies, where there is a single valid offset for the local date-time.</li>\n <li>Gap, with zero valid offsets. This is when clocks jump forward typically\n  due to the spring daylight savings change from \"winter\" to \"summer\".\n  In a gap there are local date-time values with no valid offset.</li>\n <li>Overlap, with two valid offsets. This is when clocks are set back typically\n  due to the autumn daylight savings change from \"summer\" to \"winter\".\n  In an overlap there are local date-time values with two valid offsets.</li>\n </ul>\n <p>\n Any method that converts directly or implicitly from a local date-time to an\n instant by obtaining the offset has the potential to be complicated.\n <p>\n For Gaps, the general strategy is that if the local date-time falls in the\n middle of a Gap, then the resulting zoned date-time will have a local date-time\n shifted forwards by the length of the Gap, resulting in a date-time in the later\n offset, typically \"summer\" time.\n <p>\n For Overlaps, the general strategy is that if the local date-time falls in the\n middle of an Overlap, then the previous offset will be retained. If there is no\n previous offset, or the previous offset is invalid, then the earlier offset is\n used, typically \"summer\" time.. Two additional methods,\n <a href=\"#!/api/java.time.ZonedDateTime-method-withEarlierOffsetAtOverlap\" rel=\"java.time.ZonedDateTime-method-withEarlierOffsetAtOverlap\" class=\"docClass\">withEarlierOffsetAtOverlap</a>() and <a href=\"#!/api/java.time.ZonedDateTime-method-withLaterOffsetAtOverlap\" rel=\"java.time.ZonedDateTime-method-withLaterOffsetAtOverlap\" class=\"docClass\">withLaterOffsetAtOverlap</a>(),\n help manage the case of an overlap.\n <p>\n In terms of design, this class should be viewed primarily as the combination\n of a {@code LocalDateTime} and a {@code ZoneId}. The {@code ZoneOffset} is\n a vital, but secondary, piece of information, used to ensure that the class\n represents an instant, especially during a daylight savings overlap.</p>\n\n<p> @implSpec\n A {@code ZonedDateTime} holds state equivalent to three separate objects,\n a {@code LocalDateTime}, a {@code ZoneId} and the resolved {@code ZoneOffset}.\n The offset and local date-time are used to define an instant when necessary.\n The zone ID is used to obtain the rules for how and when the offset changes.\n The offset cannot be freely set, as the zone controls which offsets are valid.\n <p>\n This class is immutable and thread-safe.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-equals' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-equals' class='name expandable'>equals</a>( <span class='pre'>obj</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this date-time is equal to another date-time. ...</div><div class='long'><p>Checks if this date-time is equal to another date-time.\n <p>\n The comparison is based on the offset date-time and the zone.\n Only objects of type {@code ZonedDateTime} are compared, other types return false.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>the object to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is equal to the other date-time</p>\n</div></li></ul></div></div></div><div id='method-format' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-format' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-format' class='name expandable'>format</a>( <span class='pre'>formatter</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Formats this date-time using the specified formatter. ...</div><div class='long'><p>Formats this date-time using the specified formatter.\n <p>\n This date-time will be passed to the formatter to produce a string.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>formatter</span> : Object {DateTimeFormatter}<div class='sub-desc'><p>the formatter to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the formatted date-time string, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if an error occurs during printing</p>\n</div></li></ul></div></div></div><div id='method-from' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-from' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-from' class='name expandable'>from</a>( <span class='pre'>temporal</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code ZonedDateTime} from a temporal object. ...</div><div class='long'><p>Obtains an instance of {@code ZonedDateTime} from a temporal object.\n <p>\n This obtains a zoned date-time based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code ZonedDateTime}.\n <p>\n The conversion will first obtain a {@code ZoneId} from the temporal object,\n falling back to a {@code ZoneOffset} if necessary. It will then try to obtain\n an {@code Instant}, falling back to a {@code LocalDateTime} if necessary.\n The result will be either the combination of {@code ZoneId} or {@code ZoneOffset}\n with {@code Instant} or {@code LocalDateTime}.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n <p>\n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, {@code ZonedDateTime::from}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {TemporalAccessor}<div class='sub-desc'><p>the temporal object to convert, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>the zoned date-time, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to convert to an {@code ZonedDateTime}</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-get' class='name expandable'>get</a>( <span class='pre'>field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field from this date-time as an {@code int}. ...</div><div class='long'><p>Gets the value of the specified field from this date-time as an {@code int}.\n <p>\n This queries this date-time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time, except {@code NANO_OF_DAY}, {@code MICRO_OF_DAY},\n {@code EPOCH_DAY}, {@code PROLEPTIC_MONTH} and {@code INSTANT_SECONDS} which are too\n large to fit in an {@code int} and throw a {@code DateTimeException}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained or\n         the value is outside the range of valid values for the field</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported or\n         the range of values exceeds an {@code int}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getDayOfMonth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getDayOfMonth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getDayOfMonth' class='name expandable'>getDayOfMonth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the day-of-month field. ...</div><div class='long'><p>Gets the day-of-month field.\n <p>\n This method returns the primitive {@code int} value for the day-of-month.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the day-of-month, from 1 to 31</p>\n</div></li></ul></div></div></div><div id='method-getDayOfWeek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getDayOfWeek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getDayOfWeek' class='name expandable'>getDayOfWeek</a>( <span class='pre'></span> ) : Object {java.time.DayOfWeek}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the day-of-week field, which is an enum {@code DayOfWeek}. ...</div><div class='long'><p>Gets the day-of-week field, which is an enum {@code DayOfWeek}.\n <p>\n This method returns the enum <a href=\"#!/api/java.time.DayOfWeek\" rel=\"java.time.DayOfWeek\" class=\"docClass\">java.time.DayOfWeek</a> for the day-of-week.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the int value.\n <p>\n Additional information can be obtained from the {@code DayOfWeek}.\n This includes textual names of the values.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.DayOfWeek}</span><div class='sub-desc'><p>the day-of-week, not null</p>\n</div></li></ul></div></div></div><div id='method-getDayOfYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getDayOfYear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getDayOfYear' class='name expandable'>getDayOfYear</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the day-of-year field. ...</div><div class='long'><p>Gets the day-of-year field.\n <p>\n This method returns the primitive {@code int} value for the day-of-year.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the day-of-year, from 1 to 365, or 366 in a leap year</p>\n</div></li></ul></div></div></div><div id='method-getHour' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getHour' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getHour' class='name expandable'>getHour</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the hour-of-day field. ...</div><div class='long'><p>Gets the hour-of-day field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the hour-of-day, from 0 to 23</p>\n</div></li></ul></div></div></div><div id='method-getLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getLong' class='name expandable'>getLong</a>( <span class='pre'>field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field from this date-time as a {@code long}. ...</div><div class='long'><p>Gets the value of the specified field from this date-time as a {@code long}.\n <p>\n This queries this date-time for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this date-time.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getMinute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getMinute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getMinute' class='name expandable'>getMinute</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the minute-of-hour field. ...</div><div class='long'><p>Gets the minute-of-hour field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the minute-of-hour, from 0 to 59</p>\n</div></li></ul></div></div></div><div id='method-getMonth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getMonth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getMonth' class='name expandable'>getMonth</a>( <span class='pre'></span> ) : Object {java.time.Month}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the month-of-year field using the {@code Month} enum. ...</div><div class='long'><p>Gets the month-of-year field using the {@code Month} enum.\n <p>\n This method returns the enum <a href=\"#!/api/java.time.Month\" rel=\"java.time.Month\" class=\"docClass\">java.time.Month</a> for the month.\n This avoids confusion as to what {@code int} values mean.\n If you need access to the primitive {@code int} value then the enum\n provides the int value.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Month}</span><div class='sub-desc'><p>the month-of-year, not null\n@see <a href=\"#!/api/java.time.ZonedDateTime-method-getMonthValue\" rel=\"java.time.ZonedDateTime-method-getMonthValue\" class=\"docClass\">getMonthValue</a>()</p>\n</div></li></ul></div></div></div><div id='method-getMonthValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getMonthValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getMonthValue' class='name expandable'>getMonthValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the month-of-year field from 1 to 12. ...</div><div class='long'><p>Gets the month-of-year field from 1 to 12.\n <p>\n This method returns the month as an {@code int} from 1 to 12.\n Application code is frequently clearer if the enum <a href=\"#!/api/java.time.Month\" rel=\"java.time.Month\" class=\"docClass\">java.time.Month</a>\n is used by calling <a href=\"#!/api/java.time.ZonedDateTime-method-getMonth\" rel=\"java.time.ZonedDateTime-method-getMonth\" class=\"docClass\">getMonth</a>().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the month-of-year, from 1 to 12\n@see <a href=\"#!/api/java.time.ZonedDateTime-method-getMonth\" rel=\"java.time.ZonedDateTime-method-getMonth\" class=\"docClass\">getMonth</a>()</p>\n</div></li></ul></div></div></div><div id='method-getNano' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getNano' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getNano' class='name expandable'>getNano</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the nano-of-second field. ...</div><div class='long'><p>Gets the nano-of-second field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the nano-of-second, from 0 to 999,999,999</p>\n</div></li></ul></div></div></div><div id='method-getOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getOffset' class='name expandable'>getOffset</a>( <span class='pre'></span> ) : Object {java.time.ZoneOffset}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the zone offset, such as '+01:00'. ...</div><div class='long'><p>Gets the zone offset, such as '+01:00'.\n <p>\n This is the offset of the local date-time from UTC/Greenwich.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZoneOffset}</span><div class='sub-desc'><p>the zone offset, not null</p>\n</div></li></ul></div></div></div><div id='method-getSecond' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getSecond' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getSecond' class='name expandable'>getSecond</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the second-of-minute field. ...</div><div class='long'><p>Gets the second-of-minute field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the second-of-minute, from 0 to 59</p>\n</div></li></ul></div></div></div><div id='method-getYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getYear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getYear' class='name expandable'>getYear</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the year field. ...</div><div class='long'><p>Gets the year field.\n <p>\n This method returns the primitive {@code int} value for the year.\n <p>\n The year returned by this method is proleptic as per {@code get(YEAR)}.\n To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the year, from MIN_YEAR to MAX_YEAR</p>\n</div></li></ul></div></div></div><div id='method-getZone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-getZone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-getZone' class='name expandable'>getZone</a>( <span class='pre'></span> ) : Object {java.time.ZoneId}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the time-zone, such as 'Europe/Paris'. ...</div><div class='long'><p>Gets the time-zone, such as 'Europe/Paris'.\n <p>\n This returns the zone ID. This identifies the time-zone rules\n that determine when and how the offset from UTC/Greenwich changes.\n <p>\n The zone ID may be same as the {@linkplain <a href=\"#!/api/java.time.ZonedDateTime-method-getOffset\" rel=\"java.time.ZonedDateTime-method-getOffset\" class=\"docClass\">getOffset</a>() offset}.\n If this is true, then any future calculations, such as addition or subtraction,\n have no complex edge cases due to time-zone rules.\n See also <a href=\"#!/api/java.time.ZonedDateTime-method-withFixedOffsetZone\" rel=\"java.time.ZonedDateTime-method-withFixedOffsetZone\" class=\"docClass\">withFixedOffsetZone</a>().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZoneId}</span><div class='sub-desc'><p>the time-zone, not null</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>A hash code for this date-time. ...</div><div class='long'><p>A hash code for this date-time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a suitable hash code</p>\n</div></li></ul></div></div></div><div id='method-isSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-isSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-isSupported' class='name expandable'>isSupported</a>( <span class='pre'>unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the specified unit is supported. ...</div><div class='long'><p>Checks if the specified unit is supported.\n <p>\n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the TemporalUnit) and\n TemporalUnit) minus methods will throw an exception.\n <p>\n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n <ul>\n <li>{@code NANOS}\n <li>{@code MICROS}\n <li>{@code MILLIS}\n <li>{@code SECONDS}\n <li>{@code MINUTES}\n <li>{@code HOURS}\n <li>{@code HALF_DAYS}\n <li>{@code DAYS}\n <li>{@code WEEKS}\n <li>{@code MONTHS}\n <li>{@code YEARS}\n <li>{@code DECADES}\n <li>{@code CENTURIES}\n <li>{@code MILLENNIA}\n <li>{@code ERAS}\n </li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n All other {@code ChronoUnit} instances will return false.\n <p>\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the unit can be added/subtracted, false if not</p>\n</div></li></ul></div></div></div><div id='method-minus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minus' class='name expandable'>minus</a>( <span class='pre'>amountToSubtract, unit</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this date-time with the specified amount subtracted. ...</div><div class='long'><p>Returns a copy of this date-time with the specified amount subtracted.\n <p>\n This returns a {@code ZonedDateTime}, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n <p>\n The calculation for date and time units differ.\n <p>\n Date units operate on the local time-line.\n The period is first subtracted from the local date-time, then converted back\n to a zoned date-time using the zone ID.\n The conversion uses java.time.ZoneId, ZoneOffset)\n with the offset before the subtraction.\n <p>\n Time units operate on the instant time-line.\n The period is first subtracted from the local date-time, then converted back to\n a zoned date-time using the zone ID.\n The conversion uses ZoneOffset, java.time.ZoneId)\n with the offset before the subtraction.\n <p>\n This method is equivalent to TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToSubtract</span> : Number<div class='sub-desc'><p>the amount of the unit to subtract from the result, may be negative</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit of the amount to subtract, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the specified amount subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the subtraction cannot be made</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-minusDays' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minusDays' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minusDays' class='name expandable'>minusDays</a>( <span class='pre'>days</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of days subtracted. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of days subtracted.\n <p>\n This operates on the local time-line,\n subtracting days to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>days</span> : Number<div class='sub-desc'><p>the days to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the days subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-minusHours' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minusHours' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minusHours' class='name expandable'>minusHours</a>( <span class='pre'>hours</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of hours subtracted. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of hours subtracted.\n <p>\n This operates on the instant time-line, such that subtracting one hour will\n always be a duration of one hour earlier.\n This may cause the local date-time to change by an amount other than one hour.\n Note that this is a different approach to that used by days, months and years,\n thus subtracting one day is not the same as adding 24 hours.\n <p>\n For example, consider a time-zone where the spring DST cutover means that the\n local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.\n <ul>\n <li>Subtracting one hour from 02:30+01:00 will result in 01:30+02:00\n <li>Subtracting one hour from 01:30+01:00 will result in 01:30+02:00\n <li>Subtracting one hour from 01:30+02:00 will result in 00:30+01:00\n <li>Subtracting three hours from 02:30+01:00 will result in 00:30+02:00\n </li></li></li></li></ul>\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hours</span> : Number<div class='sub-desc'><p>the hours to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the hours subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-minusMinutes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minusMinutes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minusMinutes' class='name expandable'>minusMinutes</a>( <span class='pre'>minutes</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of minutes subtracted. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of minutes subtracted.\n <p>\n This operates on the instant time-line, such that subtracting one minute will\n always be a duration of one minute earlier.\n This may cause the local date-time to change by an amount other than one minute.\n Note that this is a different approach to that used by days, months and years.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>minutes</span> : Number<div class='sub-desc'><p>the minutes to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the minutes subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-minusMonths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minusMonths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minusMonths' class='name expandable'>minusMonths</a>( <span class='pre'>months</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of months subtracted. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of months subtracted.\n <p>\n This operates on the local time-line,\n subtracting months to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>months</span> : Number<div class='sub-desc'><p>the months to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the months subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-minusNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minusNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minusNanos' class='name expandable'>minusNanos</a>( <span class='pre'>nanos</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds subtracted. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds subtracted.\n <p>\n This operates on the instant time-line, such that subtracting one nano will\n always be a duration of one nano earlier.\n This may cause the local date-time to change by an amount other than one nano.\n Note that this is a different approach to that used by days, months and years.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanos</span> : Number<div class='sub-desc'><p>the nanos to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the nanoseconds subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-minusSeconds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minusSeconds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minusSeconds' class='name expandable'>minusSeconds</a>( <span class='pre'>seconds</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of seconds subtracted. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of seconds subtracted.\n <p>\n This operates on the instant time-line, such that subtracting one second will\n always be a duration of one second earlier.\n This may cause the local date-time to change by an amount other than one second.\n Note that this is a different approach to that used by days, months and years.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>seconds</span> : Number<div class='sub-desc'><p>the seconds to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the seconds subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-minusWeeks' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minusWeeks' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minusWeeks' class='name expandable'>minusWeeks</a>( <span class='pre'>weeks</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of weeks subtracted. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of weeks subtracted.\n <p>\n This operates on the local time-line,\n subtracting weeks to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>weeks</span> : Number<div class='sub-desc'><p>the weeks to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the weeks subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-minusYears' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-minusYears' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-minusYears' class='name expandable'>minusYears</a>( <span class='pre'>years</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of years subtracted. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of years subtracted.\n <p>\n This operates on the local time-line,\n subtracting years to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>years</span> : Number<div class='sub-desc'><p>the years to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the years subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-now' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-now' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-now' class='name expandable'>now</a>( <span class='pre'>clock</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains the current date-time from the specified clock. ...</div><div class='long'><p>Obtains the current date-time from the specified clock.\n <p>\n This will query the specified clock to obtain the current date-time.\n The zone and offset will be set based on the time-zone in the clock.\n <p>\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using <a href=\"#!/api/java.time.Clock\" rel=\"java.time.Clock\" class=\"docClass\">dependency injection</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>clock</span> : Object {Clock}<div class='sub-desc'><p>the clock to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>the current date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-of' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-of' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-of' class='name expandable'>of</a>( <span class='pre'>year, month, dayOfMonth, hour, minute, second, nanoOfSecond, zone</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code ZonedDateTime} from a year, month, day,\n hour, minute, second, nanosecond and time-zone. ...</div><div class='long'><p>Obtains an instance of {@code ZonedDateTime} from a year, month, day,\n hour, minute, second, nanosecond and time-zone.\n <p>\n This creates a zoned date-time matching the local date-time of the seven\n specified fields as closely as possible.\n Time-zone rules, such as daylight savings, mean that not every local date-time\n is valid for the specified zone, thus the local date-time may be adjusted.\n <p>\n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the rules of the zone ID.</p>\n\n<p><p>\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, when clocks are set back, there are two valid offsets.\n This method uses the earlier offset typically corresponding to \"summer\".\n <p>\n In the case of a gap, when clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".\n <p>\n This method exists primarily for writing test cases.\n Non test-code will typically use other methods to create an offset time.\n {@code LocalDateTime} has five additional convenience variants of the\n equivalent factory method taking fewer arguments.\n They are not provided here to reduce the footprint of the API.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>year</span> : Number<div class='sub-desc'><p>the year to represent, from MIN_YEAR to MAX_YEAR</p>\n</div></li><li><span class='pre'>month</span> : Number<div class='sub-desc'><p>the month-of-year to represent, from 1 (January) to 12 (December)</p>\n</div></li><li><span class='pre'>dayOfMonth</span> : Number<div class='sub-desc'><p>the day-of-month to represent, from 1 to 31</p>\n</div></li><li><span class='pre'>hour</span> : Number<div class='sub-desc'><p>the hour-of-day to represent, from 0 to 23</p>\n</div></li><li><span class='pre'>minute</span> : Number<div class='sub-desc'><p>the minute-of-hour to represent, from 0 to 59</p>\n</div></li><li><span class='pre'>second</span> : Number<div class='sub-desc'><p>the second-of-minute to represent, from 0 to 59</p>\n</div></li><li><span class='pre'>nanoOfSecond</span> : Number<div class='sub-desc'><p>the nano-of-second to represent, from 0 to 999,999,999</p>\n</div></li><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>the offset date-time, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the value of any field is out of range, or\n  if the day-of-month is invalid for the month-year</p>\n</div></li></ul></div></div></div><div id='method-ofInstant' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-ofInstant' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-ofInstant' class='name expandable'>ofInstant</a>( <span class='pre'>localDateTime, offset, zone</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code ZonedDateTime} from the instant formed by combining\n the local date-time and offset. ...</div><div class='long'><p>Obtains an instance of {@code ZonedDateTime} from the instant formed by combining\n the local date-time and offset.\n <p>\n This creates a zoned date-time by combining\n the {@code LocalDateTime} and {@code ZoneOffset}.\n This combination uniquely specifies an instant without ambiguity.\n <p>\n Converting an instant to a zoned date-time is simple as there is only one valid\n offset for each instant. If the valid offset is different to the offset specified,\n then the date-time and offset of the zoned date-time will differ from those specified.\n <p>\n If the {@code ZoneId} to be used is a {@code ZoneOffset}, this method is equivalent\n to java.time.ZoneId).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localDateTime</span> : Object {LocalDateTime}<div class='sub-desc'><p>the local date-time, not null</p>\n</div></li><li><span class='pre'>offset</span> : Object {ZoneOffset}<div class='sub-desc'><p>the zone offset, not null</p>\n</div></li><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>the zoned date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-ofLocal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-ofLocal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-ofLocal' class='name expandable'>ofLocal</a>( <span class='pre'>localDateTime, zone, preferredOffset</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code ZonedDateTime} from a local date-time\n using the preferred offset if possible. ...</div><div class='long'><p>Obtains an instance of {@code ZonedDateTime} from a local date-time\n using the preferred offset if possible.\n <p>\n The local date-time is resolved to a single instant on the time-line.\n This is achieved by finding a valid offset from UTC/Greenwich for the local\n date-time as defined by the rules of the zone ID.</p>\n\n<p><p>\n In most cases, there is only one valid offset for a local date-time.\n In the case of an overlap, where clocks are set back, there are two valid offsets.\n If the preferred offset is one of the valid offsets then it is used.\n Otherwise the earlier valid offset is used, typically corresponding to \"summer\".\n <p>\n In the case of a gap, where clocks jump forward, there is no valid offset.\n Instead, the local date-time is adjusted to be later by the length of the gap.\n For a typical one hour daylight savings change, the local date-time will be\n moved one hour later into the offset typically corresponding to \"summer\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localDateTime</span> : Object {LocalDateTime}<div class='sub-desc'><p>the local date-time, not null</p>\n</div></li><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone, not null</p>\n</div></li><li><span class='pre'>preferredOffset</span> : Object {ZoneOffset}<div class='sub-desc'><p>the zone offset, null if no preference</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>the zoned date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-ofStrict' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-ofStrict' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-ofStrict' class='name expandable'>ofStrict</a>( <span class='pre'>localDateTime, offset, zone</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code ZonedDateTime} strictly validating the\n combination of local date-time, offset and zone...</div><div class='long'><p>Obtains an instance of {@code ZonedDateTime} strictly validating the\n combination of local date-time, offset and zone ID.\n <p>\n This creates a zoned date-time ensuring that the offset is valid for the\n local date-time according to the rules of the specified zone.\n If the offset is invalid, an exception is thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localDateTime</span> : Object {LocalDateTime}<div class='sub-desc'><p>the local date-time, not null</p>\n</div></li><li><span class='pre'>offset</span> : Object {ZoneOffset}<div class='sub-desc'><p>the zone offset, not null</p>\n</div></li><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>the zoned date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-parse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-parse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-parse' class='name expandable'>parse</a>( <span class='pre'>text, formatter</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code ZonedDateTime} from a text string using a specific formatter. ...</div><div class='long'><p>Obtains an instance of {@code ZonedDateTime} from a text string using a specific formatter.\n <p>\n The text is parsed using the formatter, returning a date-time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>the text to parse, not null</p>\n</div></li><li><span class='pre'>formatter</span> : Object {DateTimeFormatter}<div class='sub-desc'><p>the formatter to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>the parsed zoned date-time, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeParseException if the text cannot be parsed</p>\n</div></li></ul></div></div></div><div id='method-plus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plus' class='name expandable'>plus</a>( <span class='pre'>amountToAdd, unit</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this date-time with the specified amount added. ...</div><div class='long'><p>Returns a copy of this date-time with the specified amount added.\n <p>\n This returns a {@code ZonedDateTime}, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoUnit then the addition is implemented here.\n The zone is not part of the calculation and will be unchanged in the result.\n The calculation for date and time units differ.\n <p>\n Date units operate on the local time-line.\n The period is first added to the local date-time, then converted back\n to a zoned date-time using the zone ID.\n The conversion uses java.time.ZoneId, ZoneOffset)\n with the offset before the addition.\n <p>\n Time units operate on the instant time-line.\n The period is first added to the local date-time, then converted back to\n a zoned date-time using the zone ID.\n The conversion uses ZoneOffset, java.time.ZoneId)\n with the offset before the addition.\n <p>\n If the field is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n passing {@code this} as the argument. In this case, the unit determines\n whether and how to perform the addition.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToAdd</span> : Number<div class='sub-desc'><p>the amount of the unit to add to the result, may be negative</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit of the amount to add, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the specified amount added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the addition cannot be made</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plusDays' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plusDays' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plusDays' class='name expandable'>plusDays</a>( <span class='pre'>days</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of days added. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of days added.\n <p>\n This operates on the local time-line,\n adding days to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>days</span> : Number<div class='sub-desc'><p>the days to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the days added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-plusHours' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plusHours' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plusHours' class='name expandable'>plusHours</a>( <span class='pre'>hours</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of hours added. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of hours added.\n <p>\n This operates on the instant time-line, such that adding one hour will\n always be a duration of one hour later.\n This may cause the local date-time to change by an amount other than one hour.\n Note that this is a different approach to that used by days, months and years,\n thus adding one day is not the same as adding 24 hours.\n <p>\n For example, consider a time-zone where the spring DST cutover means that the\n local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.\n <ul>\n <li>Adding one hour to 00:30+02:00 will result in 01:30+02:00\n <li>Adding one hour to 01:30+02:00 will result in 01:30+01:00\n <li>Adding one hour to 01:30+01:00 will result in 02:30+01:00\n <li>Adding three hours to 00:30+02:00 will result in 02:30+01:00\n </li></li></li></li></ul>\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hours</span> : Number<div class='sub-desc'><p>the hours to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the hours added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-plusMinutes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plusMinutes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plusMinutes' class='name expandable'>plusMinutes</a>( <span class='pre'>minutes</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of minutes added. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of minutes added.\n <p>\n This operates on the instant time-line, such that adding one minute will\n always be a duration of one minute later.\n This may cause the local date-time to change by an amount other than one minute.\n Note that this is a different approach to that used by days, months and years.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>minutes</span> : Number<div class='sub-desc'><p>the minutes to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the minutes added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-plusMonths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plusMonths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plusMonths' class='name expandable'>plusMonths</a>( <span class='pre'>months</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of months added. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of months added.\n <p>\n This operates on the local time-line,\n adding months to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>months</span> : Number<div class='sub-desc'><p>the months to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the months added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-plusNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plusNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plusNanos' class='name expandable'>plusNanos</a>( <span class='pre'>nanos</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds added. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds added.\n <p>\n This operates on the instant time-line, such that adding one nano will\n always be a duration of one nano later.\n This may cause the local date-time to change by an amount other than one nano.\n Note that this is a different approach to that used by days, months and years.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanos</span> : Number<div class='sub-desc'><p>the nanos to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the nanoseconds added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-plusSeconds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plusSeconds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plusSeconds' class='name expandable'>plusSeconds</a>( <span class='pre'>seconds</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of seconds added. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of seconds added.\n <p>\n This operates on the instant time-line, such that adding one second will\n always be a duration of one second later.\n This may cause the local date-time to change by an amount other than one second.\n Note that this is a different approach to that used by days, months and years.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>seconds</span> : Number<div class='sub-desc'><p>the seconds to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the seconds added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-plusWeeks' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plusWeeks' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plusWeeks' class='name expandable'>plusWeeks</a>( <span class='pre'>weeks</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of weeks added. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of weeks added.\n <p>\n This operates on the local time-line,\n adding weeks to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>weeks</span> : Number<div class='sub-desc'><p>the weeks to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the weeks added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-plusYears' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-plusYears' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-plusYears' class='name expandable'>plusYears</a>( <span class='pre'>years</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the specified number of years added. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the specified number of years added.\n <p>\n This operates on the local time-line,\n adding years to the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>years</span> : Number<div class='sub-desc'><p>the years to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the years added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-query' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-query' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-query' class='name expandable'>query</a>( <span class='pre'>query, query</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries this date-time using the specified query. ...</div><div class='long'><p>Queries this date-time using the specified query.\n <p>\n This queries this date-time using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n <p>\n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing {@code this} as the argument.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>query</span> : Object {java.time.temporal.TemporalQuery}<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li><li><span class='pre'>query</span> : Object<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the query result, null may be returned (defined by the query)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to query (defined by the query)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs (defined by the query)</p>\n</div></li></ul></div></div></div><div id='method-range' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-range' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-range' class='name expandable'>range</a>( <span class='pre'>field</span> ) : Object {java.time.temporal.ValueRange}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the range of valid values for the specified field. ...</div><div class='long'><p>Gets the range of valid values for the specified field.\n <p>\n The range object expresses the minimum and maximum valid values for a field.\n This date-time is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to query the range for, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.ValueRange}</span><div class='sub-desc'><p>the range of valid values for the field, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the range for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li></ul></div></div></div><div id='method-toLocalDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-toLocalDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-toLocalDate' class='name expandable'>toLocalDate</a>( <span class='pre'></span> ) : Object {java.time.LocalDate}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the {@code LocalDate} part of this date-time. ...</div><div class='long'><p>Gets the {@code LocalDate} part of this date-time.\n <p>\n This returns a {@code LocalDate} with the same year, month and day\n as this date-time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.LocalDate}</span><div class='sub-desc'><p>the date part of this date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-toLocalDateTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-toLocalDateTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-toLocalDateTime' class='name expandable'>toLocalDateTime</a>( <span class='pre'></span> ) : Object {java.time.LocalDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the {@code LocalDateTime} part of this date-time. ...</div><div class='long'><p>Gets the {@code LocalDateTime} part of this date-time.\n <p>\n This returns a {@code LocalDateTime} with the same year, month, day and time\n as this date-time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.LocalDateTime}</span><div class='sub-desc'><p>the local date-time part of this date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-toLocalTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-toLocalTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-toLocalTime' class='name expandable'>toLocalTime</a>( <span class='pre'></span> ) : Object {java.time.LocalTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the {@code LocalTime} part of this date-time. ...</div><div class='long'><p>Gets the {@code LocalTime} part of this date-time.\n <p>\n This returns a {@code LocalTime} with the same hour, minute, second and\n nanosecond as this date-time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.LocalTime}</span><div class='sub-desc'><p>the time part of this date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-toOffsetDateTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-toOffsetDateTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-toOffsetDateTime' class='name expandable'>toOffsetDateTime</a>( <span class='pre'></span> ) : Object {java.time.OffsetDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts this date-time to an {@code OffsetDateTime}. ...</div><div class='long'><p>Converts this date-time to an {@code OffsetDateTime}.\n <p>\n This creates an offset date-time using the local date-time and offset.\n The zone ID is ignored.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetDateTime}</span><div class='sub-desc'><p>an offset date-time representing the same local date-time and offset, not null</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Outputs this date-time as a {@code String}, such as\n {@code 2007-12-03T10:15:30+01:00[Europe/Paris]}. ...</div><div class='long'><p>Outputs this date-time as a {@code String}, such as\n {@code 2007-12-03T10:15:30+01:00[Europe/Paris]}.\n <p>\n The format consists of the {@code LocalDateTime} followed by the {@code ZoneOffset}.\n If the {@code ZoneId} is not the same as the offset, then the ID is output.\n The output is compatible with ISO-8601 if the offset and ID are the same.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string representation of this date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-truncatedTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-truncatedTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-truncatedTo' class='name expandable'>truncatedTo</a>( <span class='pre'>unit</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the time truncated. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the time truncated.\n <p>\n Truncation returns a copy of the original date-time with fields\n smaller than the specified unit set to zero.\n For example, truncating with the minutes unit\n will set the second-of-minute and nano-of-second field to zero.\n <p>\n The unit must have a {@linkplain TemporalUnit#getDuration() duration}\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on ChronoUnit and\n DAYS. Other units throw an exception.\n <p>\n This operates on the local time-line,\n truncating\n the underlying local date-time. This is then converted back to a\n {@code ZonedDateTime}, using the zone ID to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to truncate to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the time truncated, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to truncate</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li></ul></div></div></div><div id='method-until' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-until' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-until' class='name expandable'>until</a>( <span class='pre'>endExclusive, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Calculates the amount of time until another date-time in terms of the specified unit. ...</div><div class='long'><p>Calculates the amount of time until another date-time in terms of the specified unit.\n <p>\n This calculates the amount of time between two {@code ZonedDateTime}\n objects in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified date-time.\n The result will be negative if the end is before the start.\n For example, the amount in days between two date-times can be calculated\n using {@code startDateTime.until(endDateTime, DAYS)}.\n <p>\n The {@code Temporal} passed to this method is converted to a\n {@code ZonedDateTime} using <a href=\"#!/api/java.time.ZonedDateTime-method-from\" rel=\"java.time.ZonedDateTime-method-from\" class=\"docClass\">from</a>(TemporalAccessor).\n If the time-zone differs between the two zoned date-times, the specified\n end date-time is normalized to have the same zone as this date-time.\n <p>\n The calculation returns a whole number, representing the number of\n complete units between the two date-times.\n For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z\n will only be one month as it is one minute short of two months.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use Temporal):</p>\n\n<pre>   // these two lines are equivalent\n   amount = start.until(end, MONTHS);\n   amount = MONTHS.between(start, end);\n </pre>\n\n\n<p> The choice should be made based on which makes the code more readable.\n <p>\n The calculation is implemented in this method for ChronoUnit.\n The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n {@code MINUTES}, {@code HOURS} and {@code HALF_DAYS}, {@code DAYS},\n {@code WEEKS}, {@code MONTHS}, {@code YEARS}, {@code DECADES},\n {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.\n Other {@code ChronoUnit} values will throw an exception.\n <p>\n The calculation for date and time units differ.\n <p>\n Date units operate on the local time-line, using the local date-time.\n For example, the period from noon on day 1 to noon the following day\n in days will always be counted as exactly one day, irrespective of whether\n there was a daylight savings change or not.\n <p>\n Time units operate on the instant time-line.\n The calculation effectively converts both zoned date-times to instants\n and then calculates the period between the instants.\n For example, the period from noon on day 1 to noon the following day\n in hours may be 23, 24 or 25 hours (or some other amount) depending on\n whether there was a daylight savings change or not.\n <p>\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n passing {@code this} as the first argument and the converted input temporal\n as the second argument.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>endExclusive</span> : Object {Temporal}<div class='sub-desc'><p>the end date, exclusive, which is converted to a {@code ZonedDateTime}, not null</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to measure the amount in, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the amount of time between this date-time and the end date-time</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the amount cannot be calculated, or the end\n  temporal cannot be converted to a {@code ZonedDateTime}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-with' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-with' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-with' class='name expandable'>with</a>( <span class='pre'>field, newValue</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this date-time with the specified field set to a new value. ...</div><div class='long'><p>Returns a copy of this date-time with the specified field set to a new value.\n <p>\n This returns a {@code ZonedDateTime}, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the year, month or day-of-month.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n <p>\n In some cases, changing the specified field can cause the resulting date-time to become invalid,\n such as changing the month from 31st January to February would make the day-of-month invalid.\n In cases like this, the field is responsible for resolving the date. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.\n <p>\n If the field is a ChronoField then the adjustment is implemented here.\n <p>\n The {@code INSTANT_SECONDS} field will return a date-time with the specified instant.\n The zone and nano-of-second are unchanged.\n The result will have an offset derived from the new instant and original zone.\n If the new instant value is outside the valid range then a {@code DateTimeException} will be thrown.\n <p>\n The {@code OFFSET_SECONDS} field will typically be ignored.\n The offset of a {@code ZonedDateTime} is controlled primarily by the time-zone.\n As such, changing the offset does not generally make sense, because there is only\n one valid offset for the local date-time and zone.\n If the zoned date-time is in a daylight savings overlap, then the offset is used\n to switch between the two valid offsets. In all other cases, the offset is ignored.\n If the new offset value is outside the valid range then a {@code DateTimeException} will be thrown.\n <p>\n The other supported fields will behave as per\n the matching method on long) java.time.LocalDateTime.\n The zone is not part of the calculation and will be unchanged.\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n passing {@code this} as the argument. In this case, the field determines\n whether and how to adjust the instant.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to set in the result, not null</p>\n</div></li><li><span class='pre'>newValue</span> : Number<div class='sub-desc'><p>the new value of the field in the result</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on {@code this} with the specified field set, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the field cannot be set</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-withDayOfMonth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withDayOfMonth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withDayOfMonth' class='name expandable'>withDayOfMonth</a>( <span class='pre'>dayOfMonth</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the day-of-month altered. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the day-of-month altered.\n <p>\n This operates on the local time-line,\n changing the day-of-month of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dayOfMonth</span> : Number<div class='sub-desc'><p>the day-of-month to set in the result, from 1 to 28-31</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested day, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the day-of-month value is invalid,\n  or if the day-of-month is invalid for the month-year</p>\n</div></li></ul></div></div></div><div id='method-withDayOfYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withDayOfYear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withDayOfYear' class='name expandable'>withDayOfYear</a>( <span class='pre'>dayOfYear</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the day-of-year altered. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the day-of-year altered.\n <p>\n This operates on the local time-line,\n changing the day-of-year of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dayOfYear</span> : Number<div class='sub-desc'><p>the day-of-year to set in the result, from 1 to 365-366</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date with the requested day, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the day-of-year value is invalid,\n  or if the day-of-year is invalid for the year</p>\n</div></li></ul></div></div></div><div id='method-withEarlierOffsetAtOverlap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withEarlierOffsetAtOverlap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withEarlierOffsetAtOverlap' class='name expandable'>withEarlierOffsetAtOverlap</a>( <span class='pre'></span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this date-time changing the zone offset to the\n earlier of the two valid offsets at a local time-li...</div><div class='long'><p>Returns a copy of this date-time changing the zone offset to the\n earlier of the two valid offsets at a local time-line overlap.\n <p>\n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the earlier of the two selected.\n <p>\n If this method is called when it is not an overlap, {@code this}\n is returned.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the earlier offset, not null</p>\n</div></li></ul></div></div></div><div id='method-withFixedOffsetZone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withFixedOffsetZone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withFixedOffsetZone' class='name expandable'>withFixedOffsetZone</a>( <span class='pre'></span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this date-time with the zone ID set to the offset. ...</div><div class='long'><p>Returns a copy of this date-time with the zone ID set to the offset.\n <p>\n This returns a zoned date-time where the zone ID is the same as <a href=\"#!/api/java.time.ZonedDateTime-method-getOffset\" rel=\"java.time.ZonedDateTime-method-getOffset\" class=\"docClass\">getOffset</a>().\n The local date-time, offset and instant of the result will be the same as in this date-time.\n <p>\n Setting the date-time to a fixed single offset means that any future\n calculations, such as addition or subtraction, have no complex edge cases\n due to time-zone rules.\n This might also be useful when sending a zoned date-time across a network,\n as most protocols, such as ISO-8601, only handle offsets,\n and not region-based zone IDs.\n <p>\n This is equivalent to {@code ZonedDateTime.of(zdt.toLocalDateTime(), zdt.getOffset())}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} with the zone ID set to the offset, not null</p>\n</div></li></ul></div></div></div><div id='method-withHour' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withHour' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withHour' class='name expandable'>withHour</a>( <span class='pre'>hour</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the hour-of-day altered. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the hour-of-day altered.\n <p>\n This operates on the local time-line,\n {@linkplain <a href=\"#!/api/java.time.LocalDateTime-method-withHour\" rel=\"java.time.LocalDateTime-method-withHour\" class=\"docClass\">java.time.LocalDateTime.withHour</a>(int) changing the time} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hour</span> : Number<div class='sub-desc'><p>the hour-of-day to set in the result, from 0 to 23</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested hour, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the hour value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withLaterOffsetAtOverlap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withLaterOffsetAtOverlap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withLaterOffsetAtOverlap' class='name expandable'>withLaterOffsetAtOverlap</a>( <span class='pre'></span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this date-time changing the zone offset to the\n later of the two valid offsets at a local time-line...</div><div class='long'><p>Returns a copy of this date-time changing the zone offset to the\n later of the two valid offsets at a local time-line overlap.\n <p>\n This method only has any effect when the local time-line overlaps, such as\n at an autumn daylight savings cutover. In this scenario, there are two\n valid offsets for the local date-time. Calling this method will return\n a zoned date-time with the later of the two selected.\n <p>\n If this method is called when it is not an overlap, {@code this}\n is returned.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the later offset, not null</p>\n</div></li></ul></div></div></div><div id='method-withMinute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withMinute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withMinute' class='name expandable'>withMinute</a>( <span class='pre'>minute</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the minute-of-hour altered. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the minute-of-hour altered.\n <p>\n This operates on the local time-line,\n {@linkplain <a href=\"#!/api/java.time.LocalDateTime-method-withMinute\" rel=\"java.time.LocalDateTime-method-withMinute\" class=\"docClass\">java.time.LocalDateTime.withMinute</a>(int) changing the time} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>minute</span> : Number<div class='sub-desc'><p>the minute-of-hour to set in the result, from 0 to 59</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested minute, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the minute value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withMonth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withMonth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withMonth' class='name expandable'>withMonth</a>( <span class='pre'>month</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the month-of-year altered. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the month-of-year altered.\n <p>\n This operates on the local time-line,\n changing the month of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>month</span> : Number<div class='sub-desc'><p>the month-of-year to set in the result, from 1 (January) to 12 (December)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested month, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the month-of-year value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withNano' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withNano' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withNano' class='name expandable'>withNano</a>( <span class='pre'>nanoOfSecond</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the nano-of-second altered. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the nano-of-second altered.\n <p>\n This operates on the local time-line,\n {@linkplain <a href=\"#!/api/java.time.LocalDateTime-method-withNano\" rel=\"java.time.LocalDateTime-method-withNano\" class=\"docClass\">java.time.LocalDateTime.withNano</a>(int) changing the time} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanoOfSecond</span> : Number<div class='sub-desc'><p>the nano-of-second to set in the result, from 0 to 999,999,999</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested nanosecond, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the nano value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withSecond' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withSecond' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withSecond' class='name expandable'>withSecond</a>( <span class='pre'>second</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the second-of-minute altered. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the second-of-minute altered.\n <p>\n This operates on the local time-line,\n {@linkplain <a href=\"#!/api/java.time.LocalDateTime-method-withSecond\" rel=\"java.time.LocalDateTime-method-withSecond\" class=\"docClass\">java.time.LocalDateTime.withSecond</a>(int) changing the time} of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>second</span> : Number<div class='sub-desc'><p>the second-of-minute to set in the result, from 0 to 59</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested second, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the second value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withYear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withYear' class='name expandable'>withYear</a>( <span class='pre'>year</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code ZonedDateTime} with the year altered. ...</div><div class='long'><p>Returns a copy of this {@code ZonedDateTime} with the year altered.\n <p>\n This operates on the local time-line,\n changing the year of the local date-time.\n This is then converted back to a {@code ZonedDateTime}, using the zone ID\n to obtain the offset.\n <p>\n When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n then the offset will be retained if possible, otherwise the earlier offset will be used.\n If in a gap, the local date-time will be adjusted forward by the length of the gap.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>year</span> : Number<div class='sub-desc'><p>the year to set in the result, from MIN_YEAR to MAX_YEAR</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested year, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the year value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withZoneSameInstant' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withZoneSameInstant' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withZoneSameInstant' class='name expandable'>withZoneSameInstant</a>( <span class='pre'>zone</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this date-time with a different time-zone,\n retaining the instant. ...</div><div class='long'><p>Returns a copy of this date-time with a different time-zone,\n retaining the instant.\n <p>\n This method changes the time-zone and retains the instant.\n This normally results in a change to the local date-time.\n <p>\n This method is based on retaining the same instant, thus gaps and overlaps\n in the local time-line have no effect on the result.\n <p>\n To change the offset while keeping the local time,\n use <a href=\"#!/api/java.time.ZonedDateTime-method-withZoneSameLocal\" rel=\"java.time.ZonedDateTime-method-withZoneSameLocal\" class=\"docClass\">withZoneSameLocal</a>(ZoneId).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone to change to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested zone, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the result exceeds the supported date range</p>\n</div></li></ul></div></div></div><div id='method-withZoneSameLocal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.ZonedDateTime'>java.time.ZonedDateTime</span><br/><a href='source/ZonedDateTime.html#java-time-ZonedDateTime-method-withZoneSameLocal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.ZonedDateTime-method-withZoneSameLocal' class='name expandable'>withZoneSameLocal</a>( <span class='pre'>zone</span> ) : Object {java.time.ZonedDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this date-time with a different time-zone,\n retaining the local date-time if possible. ...</div><div class='long'><p>Returns a copy of this date-time with a different time-zone,\n retaining the local date-time if possible.\n <p>\n This method changes the time-zone and retains the local date-time.\n The local date-time is only changed if it is invalid for the new zone,\n determined using the same approach as\n java.time.ZoneId, ZoneOffset).\n <p>\n To change the zone and adjust the local date-time,\n use <a href=\"#!/api/java.time.ZonedDateTime-method-withZoneSameInstant\" rel=\"java.time.ZonedDateTime-method-withZoneSameInstant\" class=\"docClass\">withZoneSameInstant</a>(ZoneId).\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone to change to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZonedDateTime}</span><div class='sub-desc'><p>a {@code ZonedDateTime} based on this date-time with the requested zone, not null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});