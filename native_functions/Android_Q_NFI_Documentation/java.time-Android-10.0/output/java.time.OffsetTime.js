Ext.data.JsonP.java_time_OffsetTime({"tagname":"class","name":"java.time.OffsetTime","autodetected":{},"files":[{"filename":"OffsetTime.js","href":"OffsetTime.html#java-time-OffsetTime"}],"extends":"java.lang.Object","since":"1.8","members":[{"name":"MAX","tagname":"property","owner":"java.time.OffsetTime","id":"property-MAX","meta":{}},{"name":"MIN","tagname":"property","owner":"java.time.OffsetTime","id":"property-MIN","meta":{}},{"name":"adjustInto","tagname":"method","owner":"java.time.OffsetTime","id":"method-adjustInto","meta":{}},{"name":"atDate","tagname":"method","owner":"java.time.OffsetTime","id":"method-atDate","meta":{}},{"name":"compareTo","tagname":"method","owner":"java.time.OffsetTime","id":"method-compareTo","meta":{}},{"name":"equals","tagname":"method","owner":"java.time.OffsetTime","id":"method-equals","meta":{}},{"name":"format","tagname":"method","owner":"java.time.OffsetTime","id":"method-format","meta":{}},{"name":"from","tagname":"method","owner":"java.time.OffsetTime","id":"method-from","meta":{}},{"name":"get","tagname":"method","owner":"java.time.OffsetTime","id":"method-get","meta":{}},{"name":"getHour","tagname":"method","owner":"java.time.OffsetTime","id":"method-getHour","meta":{}},{"name":"getLong","tagname":"method","owner":"java.time.OffsetTime","id":"method-getLong","meta":{}},{"name":"getMinute","tagname":"method","owner":"java.time.OffsetTime","id":"method-getMinute","meta":{}},{"name":"getNano","tagname":"method","owner":"java.time.OffsetTime","id":"method-getNano","meta":{}},{"name":"getOffset","tagname":"method","owner":"java.time.OffsetTime","id":"method-getOffset","meta":{}},{"name":"getSecond","tagname":"method","owner":"java.time.OffsetTime","id":"method-getSecond","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.time.OffsetTime","id":"method-hashCode","meta":{}},{"name":"isAfter","tagname":"method","owner":"java.time.OffsetTime","id":"method-isAfter","meta":{}},{"name":"isBefore","tagname":"method","owner":"java.time.OffsetTime","id":"method-isBefore","meta":{}},{"name":"isEqual","tagname":"method","owner":"java.time.OffsetTime","id":"method-isEqual","meta":{}},{"name":"isSupported","tagname":"method","owner":"java.time.OffsetTime","id":"method-isSupported","meta":{}},{"name":"minus","tagname":"method","owner":"java.time.OffsetTime","id":"method-minus","meta":{}},{"name":"minusHours","tagname":"method","owner":"java.time.OffsetTime","id":"method-minusHours","meta":{}},{"name":"minusMinutes","tagname":"method","owner":"java.time.OffsetTime","id":"method-minusMinutes","meta":{}},{"name":"minusNanos","tagname":"method","owner":"java.time.OffsetTime","id":"method-minusNanos","meta":{}},{"name":"minusSeconds","tagname":"method","owner":"java.time.OffsetTime","id":"method-minusSeconds","meta":{}},{"name":"now","tagname":"method","owner":"java.time.OffsetTime","id":"method-now","meta":{}},{"name":"of","tagname":"method","owner":"java.time.OffsetTime","id":"method-of","meta":{}},{"name":"ofInstant","tagname":"method","owner":"java.time.OffsetTime","id":"method-ofInstant","meta":{}},{"name":"parse","tagname":"method","owner":"java.time.OffsetTime","id":"method-parse","meta":{}},{"name":"plus","tagname":"method","owner":"java.time.OffsetTime","id":"method-plus","meta":{}},{"name":"plusHours","tagname":"method","owner":"java.time.OffsetTime","id":"method-plusHours","meta":{}},{"name":"plusMinutes","tagname":"method","owner":"java.time.OffsetTime","id":"method-plusMinutes","meta":{}},{"name":"plusNanos","tagname":"method","owner":"java.time.OffsetTime","id":"method-plusNanos","meta":{}},{"name":"plusSeconds","tagname":"method","owner":"java.time.OffsetTime","id":"method-plusSeconds","meta":{}},{"name":"query","tagname":"method","owner":"java.time.OffsetTime","id":"method-query","meta":{}},{"name":"range","tagname":"method","owner":"java.time.OffsetTime","id":"method-range","meta":{}},{"name":"toLocalTime","tagname":"method","owner":"java.time.OffsetTime","id":"method-toLocalTime","meta":{}},{"name":"toString","tagname":"method","owner":"java.time.OffsetTime","id":"method-toString","meta":{}},{"name":"truncatedTo","tagname":"method","owner":"java.time.OffsetTime","id":"method-truncatedTo","meta":{}},{"name":"until","tagname":"method","owner":"java.time.OffsetTime","id":"method-until","meta":{}},{"name":"with","tagname":"method","owner":"java.time.OffsetTime","id":"method-with","meta":{}},{"name":"withHour","tagname":"method","owner":"java.time.OffsetTime","id":"method-withHour","meta":{}},{"name":"withMinute","tagname":"method","owner":"java.time.OffsetTime","id":"method-withMinute","meta":{}},{"name":"withNano","tagname":"method","owner":"java.time.OffsetTime","id":"method-withNano","meta":{}},{"name":"withOffsetSameInstant","tagname":"method","owner":"java.time.OffsetTime","id":"method-withOffsetSameInstant","meta":{}},{"name":"withOffsetSameLocal","tagname":"method","owner":"java.time.OffsetTime","id":"method-withOffsetSameLocal","meta":{}},{"name":"withSecond","tagname":"method","owner":"java.time.OffsetTime","id":"method-withSecond","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.OffsetTime","short_doc":"implements java.time.temporal.Temporal\n\n implements java.time.temporal.TemporalAdjuster\n\n implements java.lang.Compar...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.time.OffsetTime</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/OffsetTime.html#java-time-OffsetTime' target='_blank'>OffsetTime.js</a></div></pre><div class='doc-contents'><p>implements java.time.temporal.Temporal</p>\n\n<p> implements java.time.temporal.TemporalAdjuster</p>\n\n<p> implements java.lang.Comparable</p>\n\n<p> implements java.io.Serializable</p>\n\n<p>A time with an offset from UTC/Greenwich in the ISO-8601 calendar system,\n such as {@code 10:15:30+01:00}.\n <p>\n {@code OffsetTime} is an immutable date-time object that represents a time, often\n viewed as hour-minute-second-offset.\n This class stores all time fields, to a precision of nanoseconds,\n as well as a zone offset.\n For example, the value \"13:45.30.123456789+02:00\" can be stored\n in an {@code OffsetTime}.</p>\n\n<p> @implSpec\n This class is immutable and thread-safe.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-MAX' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-property-MAX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-property-MAX' class='name expandable'>MAX</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The maximum supported {@code OffsetTime}, '23:59:59.999999999-18:00'. ...</div><div class='long'><p>The maximum supported {@code OffsetTime}, '23:59:59.999999999-18:00'.\nThis is the time just before midnight at the end of the day in the minimum offset\n(larger negative offsets are later on the time-line).\nThis combines <a href=\"#!/api/java.time.LocalTime-property-MAX\" rel=\"java.time.LocalTime-property-MAX\" class=\"docClass\">java.time.LocalTime.MAX</a> and <a href=\"#!/api/java.time.ZoneOffset-property-MIN\" rel=\"java.time.ZoneOffset-property-MIN\" class=\"docClass\">java.time.ZoneOffset.MIN</a>.\nThis could be used by an application as a \"far future\" date.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-MIN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-property-MIN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-property-MIN' class='name expandable'>MIN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The minimum supported {@code OffsetTime}, '00:00:00+18:00'. ...</div><div class='long'><p>The minimum supported {@code OffsetTime}, '00:00:00+18:00'.\nThis is the time of midnight at the start of the day in the maximum offset\n(larger offsets are earlier on the time-line).\nThis combines <a href=\"#!/api/java.time.LocalTime-property-MIN\" rel=\"java.time.LocalTime-property-MIN\" class=\"docClass\">java.time.LocalTime.MIN</a> and <a href=\"#!/api/java.time.ZoneOffset-property-MAX\" rel=\"java.time.ZoneOffset-property-MAX\" class=\"docClass\">java.time.ZoneOffset.MAX</a>.\nThis could be used by an application as a \"far past\" date.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-adjustInto' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-adjustInto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-adjustInto' class='name expandable'>adjustInto</a>( <span class='pre'>temporal</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adjusts the specified temporal object to have the same offset and time\n as this object. ...</div><div class='long'><p>Adjusts the specified temporal object to have the same offset and time\n as this object.\n <p>\n This returns a temporal object of the same observable type as the input\n with the offset and time changed to be the same as this.\n <p>\n The adjustment is equivalent to using long)\n twice, passing ChronoField.NANO_OF_DAY and\n ChronoField.OFFSET_SECONDS as the fields.\n <p>\n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisOffsetTime.adjustInto(temporal);\n   temporal = temporal.with(thisOffsetTime);\n </pre>\n\n\n<p> <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the target object to be adjusted, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>the adjusted object, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to make the adjustment</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-atDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-atDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-atDate' class='name expandable'>atDate</a>( <span class='pre'>date</span> ) : Object {java.time.OffsetDateTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Combines this time with a date to create an {@code OffsetDateTime}. ...</div><div class='long'><p>Combines this time with a date to create an {@code OffsetDateTime}.\n <p>\n This returns an {@code OffsetDateTime} formed from this time and the specified date.\n All possible combinations of date and time are valid.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>date</span> : Object {LocalDate}<div class='sub-desc'><p>the date to combine with, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetDateTime}</span><div class='sub-desc'><p>the offset date-time formed from this time and the specified date, not null</p>\n</div></li></ul></div></div></div><div id='method-compareTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'>other</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compares this {@code OffsetTime} to another time. ...</div><div class='long'><p>Compares this {@code OffsetTime} to another time.\n <p>\n The comparison is based first on the UTC equivalent instant, then on the local time.\n It is \"consistent with equals\", as defined by Comparable.\n <p>\n For example, the following is the comparator order:\n <ol>\n <li>{@code 10:30+01:00}</li>\n <li>{@code 11:00+01:00}</li>\n <li>{@code 12:00+02:00}</li>\n <li>{@code 11:30+01:00}</li>\n <li>{@code 12:00+01:00}</li>\n <li>{@code 12:30+01:00}</li>\n </ol>\n Values #2 and #3 represent the same instant on the time-line.\n When two values represent the same instant, the local time is compared\n to distinguish them. This step is needed to make the ordering\n consistent with {@code equals()}.\n <p>\n To compare the underlying local time of two {@code TemporalAccessor} instances,\n use ChronoField.NANO_OF_DAY as a comparator.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {OffsetTime}<div class='sub-desc'><p>the other time to compare to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the comparator value, negative if less, positive if greater</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code other} is null</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-equals' class='name expandable'>equals</a>( <span class='pre'>obj</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this time is equal to another time. ...</div><div class='long'><p>Checks if this time is equal to another time.\n <p>\n The comparison is based on the local-time and the offset.\n To compare for the same instant on the time-line, use <a href=\"#!/api/java.time.OffsetTime-method-isEqual\" rel=\"java.time.OffsetTime-method-isEqual\" class=\"docClass\">isEqual</a>(OffsetTime).\n <p>\n Only objects of type {@code OffsetTime} are compared, other types return false.\n To compare the underlying local time of two {@code TemporalAccessor} instances,\n use ChronoField.NANO_OF_DAY as a comparator.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>the object to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is equal to the other time</p>\n</div></li></ul></div></div></div><div id='method-format' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-format' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-format' class='name expandable'>format</a>( <span class='pre'>formatter</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Formats this time using the specified formatter. ...</div><div class='long'><p>Formats this time using the specified formatter.\n <p>\n This time will be passed to the formatter to produce a string.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>formatter</span> : Object {DateTimeFormatter}<div class='sub-desc'><p>the formatter to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the formatted time string, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if an error occurs during printing</p>\n</div></li></ul></div></div></div><div id='method-from' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-from' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-from' class='name expandable'>from</a>( <span class='pre'>temporal</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code OffsetTime} from a temporal object. ...</div><div class='long'><p>Obtains an instance of {@code OffsetTime} from a temporal object.\n <p>\n This obtains an offset time based on the specified temporal.\n A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n which this factory converts to an instance of {@code OffsetTime}.\n <p>\n The conversion extracts and combines the {@code ZoneOffset} and the\n {@code LocalTime} from the temporal object.\n Implementations are permitted to perform optimizations such as accessing\n those fields that are equivalent to the relevant objects.\n <p>\n This method matches the signature of the functional interface TemporalQuery\n allowing it to be used as a query via method reference, {@code OffsetTime::from}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {TemporalAccessor}<div class='sub-desc'><p>the temporal object to convert, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>the offset time, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to convert to an {@code OffsetTime}</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-get' class='name expandable'>get</a>( <span class='pre'>field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field from this time as an {@code int}. ...</div><div class='long'><p>Gets the value of the specified field from this time as an {@code int}.\n <p>\n This queries this time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this time, except {@code NANO_OF_DAY} and {@code MICRO_OF_DAY}\n which are too large to fit in an {@code int} and throw a {@code DateTimeException}.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained or\n         the value is outside the range of valid values for the field</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported or\n         the range of values exceeds an {@code int}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getHour' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-getHour' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-getHour' class='name expandable'>getHour</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the hour-of-day field. ...</div><div class='long'><p>Gets the hour-of-day field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the hour-of-day, from 0 to 23</p>\n</div></li></ul></div></div></div><div id='method-getLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-getLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-getLong' class='name expandable'>getLong</a>( <span class='pre'>field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field from this time as a {@code long}. ...</div><div class='long'><p>Gets the value of the specified field from this time as a {@code long}.\n <p>\n This queries this time for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return valid\n values based on this time.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getMinute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-getMinute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-getMinute' class='name expandable'>getMinute</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the minute-of-hour field. ...</div><div class='long'><p>Gets the minute-of-hour field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the minute-of-hour, from 0 to 59</p>\n</div></li></ul></div></div></div><div id='method-getNano' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-getNano' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-getNano' class='name expandable'>getNano</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the nano-of-second field. ...</div><div class='long'><p>Gets the nano-of-second field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the nano-of-second, from 0 to 999,999,999</p>\n</div></li></ul></div></div></div><div id='method-getOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-getOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-getOffset' class='name expandable'>getOffset</a>( <span class='pre'></span> ) : Object {java.time.ZoneOffset}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the zone offset, such as '+01:00'. ...</div><div class='long'><p>Gets the zone offset, such as '+01:00'.\n <p>\n This is the offset of the local time from UTC/Greenwich.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZoneOffset}</span><div class='sub-desc'><p>the zone offset, not null</p>\n</div></li></ul></div></div></div><div id='method-getSecond' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-getSecond' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-getSecond' class='name expandable'>getSecond</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the second-of-minute field. ...</div><div class='long'><p>Gets the second-of-minute field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the second-of-minute, from 0 to 59</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>A hash code for this time. ...</div><div class='long'><p>A hash code for this time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a suitable hash code</p>\n</div></li></ul></div></div></div><div id='method-isAfter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-isAfter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-isAfter' class='name expandable'>isAfter</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the instant of this {@code OffsetTime} is after that of the\n specified time applying both times to a common...</div><div class='long'><p>Checks if the instant of this {@code OffsetTime} is after that of the\n specified time applying both times to a common date.\n <p>\n This method differs from the comparison in <a href=\"#!/api/java.time.OffsetTime-method-compareTo\" rel=\"java.time.OffsetTime-method-compareTo\" class=\"docClass\">compareTo</a> in that it\n only compares the instant of the time. This is equivalent to converting both\n times to an instant using the same date and comparing the instants.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {OffsetTime}<div class='sub-desc'><p>the other time to compare to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is after the instant of the specified time</p>\n</div></li></ul></div></div></div><div id='method-isBefore' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-isBefore' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-isBefore' class='name expandable'>isBefore</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the instant of this {@code OffsetTime} is before that of the\n specified time applying both times to a commo...</div><div class='long'><p>Checks if the instant of this {@code OffsetTime} is before that of the\n specified time applying both times to a common date.\n <p>\n This method differs from the comparison in <a href=\"#!/api/java.time.OffsetTime-method-compareTo\" rel=\"java.time.OffsetTime-method-compareTo\" class=\"docClass\">compareTo</a> in that it\n only compares the instant of the time. This is equivalent to converting both\n times to an instant using the same date and comparing the instants.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {OffsetTime}<div class='sub-desc'><p>the other time to compare to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is before the instant of the specified time</p>\n</div></li></ul></div></div></div><div id='method-isEqual' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-isEqual' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-isEqual' class='name expandable'>isEqual</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the instant of this {@code OffsetTime} is equal to that of the\n specified time applying both times to a com...</div><div class='long'><p>Checks if the instant of this {@code OffsetTime} is equal to that of the\n specified time applying both times to a common date.\n <p>\n This method differs from the comparison in <a href=\"#!/api/java.time.OffsetTime-method-compareTo\" rel=\"java.time.OffsetTime-method-compareTo\" class=\"docClass\">compareTo</a> and <a href=\"#!/api/java.time.OffsetTime-method-equals\" rel=\"java.time.OffsetTime-method-equals\" class=\"docClass\">equals</a>\n in that it only compares the instant of the time. This is equivalent to converting both\n times to an instant using the same date and comparing the instants.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {OffsetTime}<div class='sub-desc'><p>the other time to compare to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is equal to the instant of the specified time</p>\n</div></li></ul></div></div></div><div id='method-isSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-isSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-isSupported' class='name expandable'>isSupported</a>( <span class='pre'>unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the specified unit is supported. ...</div><div class='long'><p>Checks if the specified unit is supported.\n <p>\n This checks if the specified unit can be added to, or subtracted from, this offset-time.\n If false, then calling the TemporalUnit) and\n TemporalUnit) minus methods will throw an exception.\n <p>\n If the unit is a ChronoUnit then the query is implemented here.\n The supported units are:\n <ul>\n <li>{@code NANOS}\n <li>{@code MICROS}\n <li>{@code MILLIS}\n <li>{@code SECONDS}\n <li>{@code MINUTES}\n <li>{@code HOURS}\n <li>{@code HALF_DAYS}\n </li></li></li></li></li></li></li></ul>\n All other {@code ChronoUnit} instances will return false.\n <p>\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}\n passing {@code this} as the argument.\n Whether the unit is supported is determined by the unit.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the unit can be added/subtracted, false if not</p>\n</div></li></ul></div></div></div><div id='method-minus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-minus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-minus' class='name expandable'>minus</a>( <span class='pre'>amountToSubtract, unit</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this time with the specified amount subtracted. ...</div><div class='long'><p>Returns a copy of this time with the specified amount subtracted.\n <p>\n This returns an {@code OffsetTime}, based on this one, with the amount\n in terms of the unit subtracted. If it is not possible to subtract the amount,\n because the unit is not supported or for some other reason, an exception is thrown.\n <p>\n This method is equivalent to TemporalUnit) with the amount negated.\n See that method for a full description of how addition, and thus subtraction, works.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToSubtract</span> : Number<div class='sub-desc'><p>the amount of the unit to subtract from the result, may be negative</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit of the amount to subtract, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the specified amount subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the subtraction cannot be made</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-minusHours' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-minusHours' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-minusHours' class='name expandable'>minusHours</a>( <span class='pre'>hours</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified number of hours subtracted. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified number of hours subtracted.\n <p>\n This subtracts the specified number of hours from this time, returning a new time.\n The calculation wraps around midnight.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hours</span> : Number<div class='sub-desc'><p>the hours to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the hours subtracted, not null</p>\n</div></li></ul></div></div></div><div id='method-minusMinutes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-minusMinutes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-minusMinutes' class='name expandable'>minusMinutes</a>( <span class='pre'>minutes</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified number of minutes subtracted. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified number of minutes subtracted.\n <p>\n This subtracts the specified number of minutes from this time, returning a new time.\n The calculation wraps around midnight.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>minutes</span> : Number<div class='sub-desc'><p>the minutes to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the minutes subtracted, not null</p>\n</div></li></ul></div></div></div><div id='method-minusNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-minusNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-minusNanos' class='name expandable'>minusNanos</a>( <span class='pre'>nanos</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds subtracted. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds subtracted.\n <p>\n This subtracts the specified number of nanoseconds from this time, returning a new time.\n The calculation wraps around midnight.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanos</span> : Number<div class='sub-desc'><p>the nanos to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the nanoseconds subtracted, not null</p>\n</div></li></ul></div></div></div><div id='method-minusSeconds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-minusSeconds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-minusSeconds' class='name expandable'>minusSeconds</a>( <span class='pre'>seconds</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified number of seconds subtracted. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified number of seconds subtracted.\n <p>\n This subtracts the specified number of seconds from this time, returning a new time.\n The calculation wraps around midnight.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>seconds</span> : Number<div class='sub-desc'><p>the seconds to subtract, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the seconds subtracted, not null</p>\n</div></li></ul></div></div></div><div id='method-now' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-now' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-now' class='name expandable'>now</a>( <span class='pre'>clock</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains the current time from the specified clock. ...</div><div class='long'><p>Obtains the current time from the specified clock.\n <p>\n This will query the specified clock to obtain the current time.\n The offset will be calculated from the time-zone in the clock.\n <p>\n Using this method allows the use of an alternate clock for testing.\n The alternate clock may be introduced using <a href=\"#!/api/java.time.Clock\" rel=\"java.time.Clock\" class=\"docClass\">dependency injection</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>clock</span> : Object {Clock}<div class='sub-desc'><p>the clock to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>the current time, not null</p>\n</div></li></ul></div></div></div><div id='method-of' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-of' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-of' class='name expandable'>of</a>( <span class='pre'>hour, minute, second, nanoOfSecond, offset</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code OffsetTime} from an hour, minute, second and nanosecond. ...</div><div class='long'><p>Obtains an instance of {@code OffsetTime} from an hour, minute, second and nanosecond.\n <p>\n This creates an offset time with the four specified fields.\n <p>\n This method exists primarily for writing test cases.\n Non test-code will typically use other methods to create an offset time.\n {@code LocalTime} has two additional convenience variants of the\n equivalent factory method taking fewer arguments.\n They are not provided here to reduce the footprint of the API.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hour</span> : Number<div class='sub-desc'><p>the hour-of-day to represent, from 0 to 23</p>\n</div></li><li><span class='pre'>minute</span> : Number<div class='sub-desc'><p>the minute-of-hour to represent, from 0 to 59</p>\n</div></li><li><span class='pre'>second</span> : Number<div class='sub-desc'><p>the second-of-minute to represent, from 0 to 59</p>\n</div></li><li><span class='pre'>nanoOfSecond</span> : Number<div class='sub-desc'><p>the nano-of-second to represent, from 0 to 999,999,999</p>\n</div></li><li><span class='pre'>offset</span> : Object {ZoneOffset}<div class='sub-desc'><p>the zone offset, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>the offset time, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the value of any field is out of range</p>\n</div></li></ul></div></div></div><div id='method-ofInstant' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-ofInstant' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-ofInstant' class='name expandable'>ofInstant</a>( <span class='pre'>instant, zone</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code OffsetTime} from an {@code Instant} and zone ID. ...</div><div class='long'><p>Obtains an instance of {@code OffsetTime} from an {@code Instant} and zone ID.\n <p>\n This creates an offset time with the same instant as that specified.\n Finding the offset from UTC/Greenwich is simple as there is only one valid\n offset for each instant.\n <p>\n The date component of the instant is dropped during the conversion.\n This means that the conversion can never fail due to the instant being\n out of the valid range of dates.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>instant</span> : Object {Instant}<div class='sub-desc'><p>the instant to create the time from, not null</p>\n</div></li><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone, which may be an offset, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>the offset time, not null</p>\n</div></li></ul></div></div></div><div id='method-parse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-parse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-parse' class='name expandable'>parse</a>( <span class='pre'>text, formatter</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code OffsetTime} from a text string using a specific formatter. ...</div><div class='long'><p>Obtains an instance of {@code OffsetTime} from a text string using a specific formatter.\n <p>\n The text is parsed using the formatter, returning a time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>the text to parse, not null</p>\n</div></li><li><span class='pre'>formatter</span> : Object {DateTimeFormatter}<div class='sub-desc'><p>the formatter to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>the parsed offset time, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeParseException if the text cannot be parsed</p>\n</div></li></ul></div></div></div><div id='method-plus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-plus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-plus' class='name expandable'>plus</a>( <span class='pre'>amountToAdd, unit</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this time with the specified amount added. ...</div><div class='long'><p>Returns a copy of this time with the specified amount added.\n <p>\n This returns an {@code OffsetTime}, based on this one, with the amount\n in terms of the unit added. If it is not possible to add the amount, because the\n unit is not supported or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoUnit then the addition is implemented by\n TemporalUnit).\n The offset is not part of the calculation and will be unchanged in the result.\n <p>\n If the field is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n passing {@code this} as the argument. In this case, the unit determines\n whether and how to perform the addition.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToAdd</span> : Number<div class='sub-desc'><p>the amount of the unit to add to the result, may be negative</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit of the amount to add, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the specified amount added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the addition cannot be made</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plusHours' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-plusHours' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-plusHours' class='name expandable'>plusHours</a>( <span class='pre'>hours</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified number of hours added. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified number of hours added.\n <p>\n This adds the specified number of hours to this time, returning a new time.\n The calculation wraps around midnight.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hours</span> : Number<div class='sub-desc'><p>the hours to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the hours added, not null</p>\n</div></li></ul></div></div></div><div id='method-plusMinutes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-plusMinutes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-plusMinutes' class='name expandable'>plusMinutes</a>( <span class='pre'>minutes</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified number of minutes added. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified number of minutes added.\n <p>\n This adds the specified number of minutes to this time, returning a new time.\n The calculation wraps around midnight.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>minutes</span> : Number<div class='sub-desc'><p>the minutes to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the minutes added, not null</p>\n</div></li></ul></div></div></div><div id='method-plusNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-plusNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-plusNanos' class='name expandable'>plusNanos</a>( <span class='pre'>nanos</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds added. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds added.\n <p>\n This adds the specified number of nanoseconds to this time, returning a new time.\n The calculation wraps around midnight.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanos</span> : Number<div class='sub-desc'><p>the nanos to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the nanoseconds added, not null</p>\n</div></li></ul></div></div></div><div id='method-plusSeconds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-plusSeconds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-plusSeconds' class='name expandable'>plusSeconds</a>( <span class='pre'>seconds</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified number of seconds added. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified number of seconds added.\n <p>\n This adds the specified number of seconds to this time, returning a new time.\n The calculation wraps around midnight.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>seconds</span> : Number<div class='sub-desc'><p>the seconds to add, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the seconds added, not null</p>\n</div></li></ul></div></div></div><div id='method-query' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-query' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-query' class='name expandable'>query</a>( <span class='pre'>query, query</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries this time using the specified query. ...</div><div class='long'><p>Queries this time using the specified query.\n <p>\n This queries this time using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n <p>\n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing {@code this} as the argument.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>query</span> : Object {java.time.temporal.TemporalQuery}<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li><li><span class='pre'>query</span> : Object<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the query result, null may be returned (defined by the query)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to query (defined by the query)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs (defined by the query)</p>\n</div></li></ul></div></div></div><div id='method-range' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-range' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-range' class='name expandable'>range</a>( <span class='pre'>field</span> ) : Object {java.time.temporal.ValueRange}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the range of valid values for the specified field. ...</div><div class='long'><p>Gets the range of valid values for the specified field.\n <p>\n The range object expresses the minimum and maximum valid values for a field.\n This time is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The supported fields will return\n appropriate range instances.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to query the range for, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.ValueRange}</span><div class='sub-desc'><p>the range of valid values for the field, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the range for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li></ul></div></div></div><div id='method-toLocalTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-toLocalTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-toLocalTime' class='name expandable'>toLocalTime</a>( <span class='pre'></span> ) : Object {java.time.LocalTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the {@code LocalTime} part of this date-time. ...</div><div class='long'><p>Gets the {@code LocalTime} part of this date-time.\n <p>\n This returns a {@code LocalTime} with the same hour, minute, second and\n nanosecond as this date-time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.LocalTime}</span><div class='sub-desc'><p>the time part of this date-time, not null</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Outputs this time as a {@code String}, such as {@code 10:15:30+01:00}. ...</div><div class='long'><p>Outputs this time as a {@code String}, such as {@code 10:15:30+01:00}.\n <p>\n The output will be one of the following ISO-8601 formats:\n <ul>\n <li>{@code HH:mmXXXXX}</li>\n <li>{@code HH:mm:ssXXXXX}</li>\n <li>{@code HH:mm:ss.SSSXXXXX}</li>\n <li>{@code HH:mm:ss.SSSSSSXXXXX}</li>\n <li>{@code HH:mm:ss.SSSSSSSSSXXXXX}</li>\n </ul>\n The format used will be the shortest that outputs the full value of\n the time where the omitted parts are implied to be zero.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string representation of this time, not null</p>\n</div></li></ul></div></div></div><div id='method-truncatedTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-truncatedTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-truncatedTo' class='name expandable'>truncatedTo</a>( <span class='pre'>unit</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the time truncated. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the time truncated.\n <p>\n Truncation returns a copy of the original time with fields\n smaller than the specified unit set to zero.\n For example, truncating with the minutes unit\n will set the second-of-minute and nano-of-second field to zero.\n <p>\n The unit must have a {@linkplain TemporalUnit#getDuration() duration}\n that divides into the length of a standard day without remainder.\n This includes all supplied time units on ChronoUnit and\n DAYS. Other units throw an exception.\n <p>\n The offset does not affect the calculation and will be the same in the result.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to truncate to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the time truncated, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to truncate</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li></ul></div></div></div><div id='method-until' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-until' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-until' class='name expandable'>until</a>( <span class='pre'>endExclusive, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Calculates the amount of time until another time in terms of the specified unit. ...</div><div class='long'><p>Calculates the amount of time until another time in terms of the specified unit.\n <p>\n This calculates the amount of time between two {@code OffsetTime}\n objects in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified time.\n The result will be negative if the end is before the start.\n For example, the amount in hours between two times can be calculated\n using {@code startTime.until(endTime, HOURS)}.\n <p>\n The {@code Temporal} passed to this method is converted to a\n {@code OffsetTime} using <a href=\"#!/api/java.time.OffsetTime-method-from\" rel=\"java.time.OffsetTime-method-from\" class=\"docClass\">from</a>(TemporalAccessor).\n If the offset differs between the two times, then the specified\n end time is normalized to have the same offset as this time.\n <p>\n The calculation returns a whole number, representing the number of\n complete units between the two times.\n For example, the amount in hours between 11:30Z and 13:29Z will only\n be one hour as it is one minute short of two hours.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method.\n The second is to use Temporal):</p>\n\n<pre>   // these two lines are equivalent\n   amount = start.until(end, MINUTES);\n   amount = MINUTES.between(start, end);\n </pre>\n\n\n<p> The choice should be made based on which makes the code more readable.\n <p>\n The calculation is implemented in this method for ChronoUnit.\n The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n {@code MINUTES}, {@code HOURS} and {@code HALF_DAYS} are supported.\n Other {@code ChronoUnit} values will throw an exception.\n <p>\n If the unit is not a {@code ChronoUnit}, then the result of this method\n is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n passing {@code this} as the first argument and the converted input temporal\n as the second argument.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>endExclusive</span> : Object {Temporal}<div class='sub-desc'><p>the end time, exclusive, which is converted to an {@code OffsetTime}, not null</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to measure the amount in, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the amount of time between this time and the end time</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the amount cannot be calculated, or the end\n  temporal cannot be converted to an {@code OffsetTime}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-with' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-with' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-with' class='name expandable'>with</a>( <span class='pre'>field, newValue</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this time with the specified field set to a new value. ...</div><div class='long'><p>Returns a copy of this time with the specified field set to a new value.\n <p>\n This returns an {@code OffsetTime}, based on this one, with the value\n for the specified field changed.\n This can be used to change any supported field, such as the hour, minute or second.\n If it is not possible to set the value, because the field is not supported or for\n some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the adjustment is implemented here.\n <p>\n The {@code OFFSET_SECONDS} field will return a time with the specified offset.\n The local time is unaltered. If the new offset value is outside the valid range\n then a {@code DateTimeException} will be thrown.\n <p>\n The other supported fields will behave as per\n the matching method on long) <a href=\"#!/api/java.time.LocalTime\" rel=\"java.time.LocalTime\" class=\"docClass\">java.time.LocalTime</a>}.\n In this case, the offset is not part of the calculation and will be unchanged.\n <p>\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n passing {@code this} as the argument. In this case, the field determines\n whether and how to adjust the instant.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to set in the result, not null</p>\n</div></li><li><span class='pre'>newValue</span> : Number<div class='sub-desc'><p>the new value of the field in the result</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on {@code this} with the specified field set, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the field cannot be set</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-withHour' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-withHour' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-withHour' class='name expandable'>withHour</a>( <span class='pre'>hour</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the hour-of-day altered. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the hour-of-day altered.\n <p>\n The offset does not affect the calculation and will be the same in the result.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hour</span> : Number<div class='sub-desc'><p>the hour-of-day to set in the result, from 0 to 23</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the requested hour, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the hour value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withMinute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-withMinute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-withMinute' class='name expandable'>withMinute</a>( <span class='pre'>minute</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the minute-of-hour altered. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the minute-of-hour altered.\n <p>\n The offset does not affect the calculation and will be the same in the result.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>minute</span> : Number<div class='sub-desc'><p>the minute-of-hour to set in the result, from 0 to 59</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the requested minute, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the minute value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withNano' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-withNano' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-withNano' class='name expandable'>withNano</a>( <span class='pre'>nanoOfSecond</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the nano-of-second altered. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the nano-of-second altered.\n <p>\n The offset does not affect the calculation and will be the same in the result.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanoOfSecond</span> : Number<div class='sub-desc'><p>the nano-of-second to set in the result, from 0 to 999,999,999</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the requested nanosecond, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the nanos value is invalid</p>\n</div></li></ul></div></div></div><div id='method-withOffsetSameInstant' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-withOffsetSameInstant' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-withOffsetSameInstant' class='name expandable'>withOffsetSameInstant</a>( <span class='pre'>offset</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified offset ensuring\n that the result is at the same instant ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified offset ensuring\n that the result is at the same instant on an implied day.\n <p>\n This method returns an object with the specified {@code ZoneOffset} and a {@code LocalTime}\n adjusted by the difference between the two offsets.\n This will result in the old and new objects representing the same instant on an implied day.\n This is useful for finding the local time in a different offset.\n For example, if this time represents {@code 10:30+02:00} and the offset specified is\n {@code +03:00}, then this method will return {@code 11:30+03:00}.\n <p>\n To change the offset without adjusting the local time use <a href=\"#!/api/java.time.OffsetTime-method-withOffsetSameLocal\" rel=\"java.time.OffsetTime-method-withOffsetSameLocal\" class=\"docClass\">withOffsetSameLocal</a>.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>offset</span> : Object {ZoneOffset}<div class='sub-desc'><p>the zone offset to change to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the requested offset, not null</p>\n</div></li></ul></div></div></div><div id='method-withOffsetSameLocal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-withOffsetSameLocal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-withOffsetSameLocal' class='name expandable'>withOffsetSameLocal</a>( <span class='pre'>offset</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the specified offset ensuring\n that the result has the same local time. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the specified offset ensuring\n that the result has the same local time.\n <p>\n This method returns an object with the same {@code LocalTime} and the specified {@code ZoneOffset}.\n No calculation is needed or performed.\n For example, if this time represents {@code 10:30+02:00} and the offset specified is\n {@code +03:00}, then this method will return {@code 10:30+03:00}.\n <p>\n To take into account the difference between the offsets, and adjust the time fields,\n use <a href=\"#!/api/java.time.OffsetTime-method-withOffsetSameInstant\" rel=\"java.time.OffsetTime-method-withOffsetSameInstant\" class=\"docClass\">withOffsetSameInstant</a>.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>offset</span> : Object {ZoneOffset}<div class='sub-desc'><p>the zone offset to change to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the requested offset, not null</p>\n</div></li></ul></div></div></div><div id='method-withSecond' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.OffsetTime'>java.time.OffsetTime</span><br/><a href='source/OffsetTime.html#java-time-OffsetTime-method-withSecond' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.OffsetTime-method-withSecond' class='name expandable'>withSecond</a>( <span class='pre'>second</span> ) : Object {java.time.OffsetTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this {@code OffsetTime} with the second-of-minute altered. ...</div><div class='long'><p>Returns a copy of this {@code OffsetTime} with the second-of-minute altered.\n <p>\n The offset does not affect the calculation and will be the same in the result.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>second</span> : Number<div class='sub-desc'><p>the second-of-minute to set in the result, from 0 to 59</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.OffsetTime}</span><div class='sub-desc'><p>an {@code OffsetTime} based on this time with the requested second, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the second value is invalid</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});