Ext.data.JsonP.java_time_Period({"tagname":"class","name":"java.time.Period","autodetected":{},"files":[{"filename":"Period.js","href":"Period.html#java-time-Period"}],"extends":"java.lang.Object","since":"1.8","members":[{"name":"ZERO","tagname":"property","owner":"java.time.Period","id":"property-ZERO","meta":{}},{"name":"addTo","tagname":"method","owner":"java.time.Period","id":"method-addTo","meta":{}},{"name":"between","tagname":"method","owner":"java.time.Period","id":"method-between","meta":{}},{"name":"equals","tagname":"method","owner":"java.time.Period","id":"method-equals","meta":{}},{"name":"from","tagname":"method","owner":"java.time.Period","id":"method-from","meta":{}},{"name":"get","tagname":"method","owner":"java.time.Period","id":"method-get","meta":{}},{"name":"getChronology","tagname":"method","owner":"java.time.Period","id":"method-getChronology","meta":{}},{"name":"getDays","tagname":"method","owner":"java.time.Period","id":"method-getDays","meta":{}},{"name":"getMonths","tagname":"method","owner":"java.time.Period","id":"method-getMonths","meta":{}},{"name":"getUnits","tagname":"method","owner":"java.time.Period","id":"method-getUnits","meta":{}},{"name":"getYears","tagname":"method","owner":"java.time.Period","id":"method-getYears","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.time.Period","id":"method-hashCode","meta":{}},{"name":"isNegative","tagname":"method","owner":"java.time.Period","id":"method-isNegative","meta":{}},{"name":"isZero","tagname":"method","owner":"java.time.Period","id":"method-isZero","meta":{}},{"name":"minus","tagname":"method","owner":"java.time.Period","id":"method-minus","meta":{}},{"name":"minusDays","tagname":"method","owner":"java.time.Period","id":"method-minusDays","meta":{}},{"name":"minusMonths","tagname":"method","owner":"java.time.Period","id":"method-minusMonths","meta":{}},{"name":"minusYears","tagname":"method","owner":"java.time.Period","id":"method-minusYears","meta":{}},{"name":"multipliedBy","tagname":"method","owner":"java.time.Period","id":"method-multipliedBy","meta":{}},{"name":"negated","tagname":"method","owner":"java.time.Period","id":"method-negated","meta":{}},{"name":"normalized","tagname":"method","owner":"java.time.Period","id":"method-normalized","meta":{}},{"name":"of","tagname":"method","owner":"java.time.Period","id":"method-of","meta":{}},{"name":"ofDays","tagname":"method","owner":"java.time.Period","id":"method-ofDays","meta":{}},{"name":"ofMonths","tagname":"method","owner":"java.time.Period","id":"method-ofMonths","meta":{}},{"name":"ofWeeks","tagname":"method","owner":"java.time.Period","id":"method-ofWeeks","meta":{}},{"name":"ofYears","tagname":"method","owner":"java.time.Period","id":"method-ofYears","meta":{}},{"name":"parse","tagname":"method","owner":"java.time.Period","id":"method-parse","meta":{}},{"name":"plus","tagname":"method","owner":"java.time.Period","id":"method-plus","meta":{}},{"name":"plusDays","tagname":"method","owner":"java.time.Period","id":"method-plusDays","meta":{}},{"name":"plusMonths","tagname":"method","owner":"java.time.Period","id":"method-plusMonths","meta":{}},{"name":"plusYears","tagname":"method","owner":"java.time.Period","id":"method-plusYears","meta":{}},{"name":"subtractFrom","tagname":"method","owner":"java.time.Period","id":"method-subtractFrom","meta":{}},{"name":"toString","tagname":"method","owner":"java.time.Period","id":"method-toString","meta":{}},{"name":"toTotalMonths","tagname":"method","owner":"java.time.Period","id":"method-toTotalMonths","meta":{}},{"name":"withDays","tagname":"method","owner":"java.time.Period","id":"method-withDays","meta":{}},{"name":"withMonths","tagname":"method","owner":"java.time.Period","id":"method-withMonths","meta":{}},{"name":"withYears","tagname":"method","owner":"java.time.Period","id":"method-withYears","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.Period","short_doc":"implements java.time.chrono.ChronoPeriod\n\n implements java.io.Serializable\n\nA date-based amount of time in the ISO-86...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.time.Period</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Period.html#java-time-Period' target='_blank'>Period.js</a></div></pre><div class='doc-contents'><p>implements java.time.chrono.ChronoPeriod</p>\n\n<p> implements java.io.Serializable</p>\n\n<p>A date-based amount of time in the ISO-8601 calendar system,\n such as '2 years, 3 months and 4 days'.\n <p>\n This class models a quantity or amount of time in terms of years, months and days.\n See <a href=\"#!/api/java.time.Duration\" rel=\"java.time.Duration\" class=\"docClass\">java.time.Duration</a> for the time-based equivalent to this class.\n <p>\n Durations and periods differ in their treatment of daylight savings time\n when added to <a href=\"#!/api/java.time.ZonedDateTime\" rel=\"java.time.ZonedDateTime\" class=\"docClass\">java.time.ZonedDateTime</a>. A {@code Duration} will add an exact\n number of seconds, thus a duration of one day is always exactly 24 hours.\n By contrast, a {@code Period} will add a conceptual day, trying to maintain\n the local time.\n <p>\n For example, consider adding a period of one day and a duration of one day to\n 18:00 on the evening before a daylight savings gap. The {@code Period} will add\n the conceptual day and result in a {@code ZonedDateTime} at 18:00 the following day.\n By contrast, the {@code Duration} will add exactly 24 hours, resulting in a\n {@code ZonedDateTime} at 19:00 the following day (assuming a one hour DST gap).\n <p>\n The supported units of a period are YEARS,\n MONTHS and DAYS.\n All three fields are always present, but may be set to zero.\n <p>\n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today's rules for leap years are applied for all time.\n <p>\n The period is modeled as a directed amount of time, meaning that individual parts of the\n period may be negative.</p>\n\n<p> @implSpec\n This class is immutable and thread-safe.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ZERO' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-property-ZERO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-property-ZERO' class='name expandable'>ZERO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A constant for a period of zero. ...</div><div class='long'><p>A constant for a period of zero.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addTo' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-addTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-addTo' class='name expandable'>addTo</a>( <span class='pre'>temporal</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds this period to the specified temporal object. ...</div><div class='long'><p>Adds this period to the specified temporal object.\n <p>\n This returns a temporal object of the same observable type as the input\n with this period added.\n If the temporal has a chronology, it must be the ISO chronology.\n <p>\n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.plus(TemporalAmount).</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   dateTime = thisPeriod.addTo(dateTime);\n   dateTime = dateTime.plus(thisPeriod);\n </pre>\n\n\n<p> <p>\n The calculation operates as follows.\n First, the chronology of the temporal is checked to ensure it is ISO chronology or null.\n Second, if the months are zero, the years are added if non-zero, otherwise\n the combination of years and months is added if non-zero.\n Finally, any days are added.\n <p>\n This approach ensures that a partial period can be added to a partial date.\n For example, a period of years and/or months can be added to a {@code YearMonth},\n but a period including days cannot.\n The approach also adds years and months together when necessary, which ensures\n correct behaviour at the end of the month.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the temporal object to adjust, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>an object of the same type with the adjustment made, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to add</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-between' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-between' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-between' class='name expandable'>between</a>( <span class='pre'>startDateInclusive, endDateExclusive</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a {@code Period} consisting of the number of years, months,\n and days between two dates. ...</div><div class='long'><p>Obtains a {@code Period} consisting of the number of years, months,\n and days between two dates.\n <p>\n The start date is included, but the end date is not.\n The period is calculated by removing complete months, then calculating\n the remaining number of days, adjusting to ensure that both have the same sign.\n The number of months is then split into years and months based on a 12 month year.\n A month is considered if the end day-of-month is greater than or equal to the start day-of-month.\n For example, from {@code 2010-01-15} to {@code 2011-03-18} is one year, two months and three days.\n <p>\n The result of this method can be a negative period if the end is before the start.\n The negative sign will be the same in each of year, month and day.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>startDateInclusive</span> : Object {LocalDate}<div class='sub-desc'><p>the start date, inclusive, not null</p>\n</div></li><li><span class='pre'>endDateExclusive</span> : Object {LocalDate}<div class='sub-desc'><p>the end date, exclusive, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>the period between this date and the end date, not null\n@see ChronoLocalDate#until(ChronoLocalDate)</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-equals' class='name expandable'>equals</a>( <span class='pre'>obj</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this period is equal to another period. ...</div><div class='long'><p>Checks if this period is equal to another period.\n <p>\n The comparison is based on the type {@code Period} and each of the three amounts.\n To be equal, the years, months and days units must be individually equal.\n Note that this means that a period of \"15 Months\" is not equal to a period\n of \"1 Year and 3 Months\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>the object to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is equal to the other period</p>\n</div></li></ul></div></div></div><div id='method-from' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-from' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-from' class='name expandable'>from</a>( <span class='pre'>amount</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains an instance of {@code Period} from a temporal amount. ...</div><div class='long'><p>Obtains an instance of {@code Period} from a temporal amount.\n <p>\n This obtains a period based on the specified amount.\n A {@code TemporalAmount} represents an  amount of time, which may be\n date-based or time-based, which this factory extracts to a {@code Period}.\n <p>\n The conversion loops around the set of units from the amount and uses\n the YEARS, MONTHS\n and DAYS units to create a period.\n If any other units are found then an exception is thrown.\n <p>\n If the amount is a {@code ChronoPeriod} then it must use the ISO chronology.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amount</span> : Object {TemporalAmount}<div class='sub-desc'><p>the temporal amount to convert, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>the equivalent period, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to convert to a {@code Period}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if the amount of years, months or days exceeds an int</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-get' class='name expandable'>get</a>( <span class='pre'>unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the requested unit. ...</div><div class='long'><p>Gets the value of the requested unit.\n <p>\n This returns a value for each of the three supported units,\n YEARS, MONTHS and\n DAYS.\n All other units throw an exception.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the {@code TemporalUnit} for which to return the value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the long value of the unit</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li></ul></div></div></div><div id='method-getChronology' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-getChronology' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-getChronology' class='name expandable'>getChronology</a>( <span class='pre'></span> ) : Object {java.time.chrono.IsoChronology}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the chronology of this period, which is the ISO calendar system. ...</div><div class='long'><p>Gets the chronology of this period, which is the ISO calendar system.\n <p>\n The {@code Chronology} represents the calendar system in use.\n The ISO-8601 calendar system is the modern civil calendar system used today\n in most of the world. It is equivalent to the proleptic Gregorian calendar\n system, in which today's rules for leap years are applied for all time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.chrono.IsoChronology}</span><div class='sub-desc'><p>the ISO chronology, not null</p>\n</div></li></ul></div></div></div><div id='method-getDays' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-getDays' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-getDays' class='name expandable'>getDays</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the amount of days of this period. ...</div><div class='long'><p>Gets the amount of days of this period.\n <p>\n This returns the days unit.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the amount of days of this period, may be negative</p>\n</div></li></ul></div></div></div><div id='method-getMonths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-getMonths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-getMonths' class='name expandable'>getMonths</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the amount of months of this period. ...</div><div class='long'><p>Gets the amount of months of this period.\n <p>\n This returns the months unit.\n <p>\n The months unit is not automatically normalized with the years unit.\n This means that a period of \"15 months\" is different to a period\n of \"1 year and 3 months\".</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the amount of months of this period, may be negative</p>\n</div></li></ul></div></div></div><div id='method-getUnits' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-getUnits' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-getUnits' class='name expandable'>getUnits</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the set of units supported by this period. ...</div><div class='long'><p>Gets the set of units supported by this period.\n <p>\n The supported units are YEARS,\n MONTHS and DAYS.\n They are returned in the order years, months, days.\n <p>\n This set can be used in conjunction with <a href=\"#!/api/java.time.Period-method-get\" rel=\"java.time.Period-method-get\" class=\"docClass\">get</a>(TemporalUnit)\n to access the entire state of the period.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a list containing the years, months and days units, not null</p>\n</div></li></ul></div></div></div><div id='method-getYears' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-getYears' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-getYears' class='name expandable'>getYears</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the amount of years of this period. ...</div><div class='long'><p>Gets the amount of years of this period.\n <p>\n This returns the years unit.\n <p>\n The months unit is not automatically normalized with the years unit.\n This means that a period of \"15 months\" is different to a period\n of \"1 year and 3 months\".</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the amount of years of this period, may be negative</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>A hash code for this period. ...</div><div class='long'><p>A hash code for this period.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a suitable hash code</p>\n</div></li></ul></div></div></div><div id='method-isNegative' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-isNegative' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-isNegative' class='name expandable'>isNegative</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if any of the three units of this period are negative. ...</div><div class='long'><p>Checks if any of the three units of this period are negative.\n <p>\n This checks whether the years, months or days units are less than zero.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if any unit of this period is negative</p>\n</div></li></ul></div></div></div><div id='method-isZero' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-isZero' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-isZero' class='name expandable'>isZero</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if all three units of this period are zero. ...</div><div class='long'><p>Checks if all three units of this period are zero.\n <p>\n A zero period has the value zero for the years, months and days units.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this period is zero-length</p>\n</div></li></ul></div></div></div><div id='method-minus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-minus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-minus' class='name expandable'>minus</a>( <span class='pre'>amountToSubtract</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified period subtracted. ...</div><div class='long'><p>Returns a copy of this period with the specified period subtracted.\n <p>\n This operates separately on the years, months and days.\n No normalization is performed.\n <p>\n For example, \"1 year, 6 months and 3 days\" minus \"2 years, 2 months and 2 days\"\n returns \"-1 years, 4 months and 1 day\".\n <p>\n The specified amount is typically an instance of {@code Period}.\n Other types are interpreted using from(TemporalAmount).\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToSubtract</span> : Object {TemporalAmount}<div class='sub-desc'><p>the amount to subtract, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the requested period subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the specified amount has a non-ISO chronology or\n  contains an invalid unit</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-minusDays' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-minusDays' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-minusDays' class='name expandable'>minusDays</a>( <span class='pre'>daysToSubtract</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified days subtracted. ...</div><div class='long'><p>Returns a copy of this period with the specified days subtracted.\n <p>\n This subtracts the amount from the days unit in a copy of this period.\n The years and months units are unaffected.\n For example, \"1 year, 6 months and 3 days\" minus 2 days returns \"1 year, 6 months and 1 day\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>daysToSubtract</span> : Number<div class='sub-desc'><p>the months to subtract, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the specified days subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-minusMonths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-minusMonths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-minusMonths' class='name expandable'>minusMonths</a>( <span class='pre'>monthsToSubtract</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified months subtracted. ...</div><div class='long'><p>Returns a copy of this period with the specified months subtracted.\n <p>\n This subtracts the amount from the months unit in a copy of this period.\n The years and days units are unaffected.\n For example, \"1 year, 6 months and 3 days\" minus 2 months returns \"1 year, 4 months and 3 days\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>monthsToSubtract</span> : Number<div class='sub-desc'><p>the years to subtract, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the specified months subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-minusYears' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-minusYears' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-minusYears' class='name expandable'>minusYears</a>( <span class='pre'>yearsToSubtract</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified years subtracted. ...</div><div class='long'><p>Returns a copy of this period with the specified years subtracted.\n <p>\n This subtracts the amount from the years unit in a copy of this period.\n The months and days units are unaffected.\n For example, \"1 year, 6 months and 3 days\" minus 2 years returns \"-1 years, 6 months and 3 days\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>yearsToSubtract</span> : Number<div class='sub-desc'><p>the years to subtract, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the specified years subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-multipliedBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-multipliedBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-multipliedBy' class='name expandable'>multipliedBy</a>( <span class='pre'>scalar</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new instance with each element in this period multiplied\n by the specified scalar. ...</div><div class='long'><p>Returns a new instance with each element in this period multiplied\n by the specified scalar.\n <p>\n This returns a period with each of the years, months and days units\n individually multiplied.\n For example, a period of \"2 years, -3 months and 4 days\" multiplied by\n 3 will return \"6 years, -9 months and 12 days\".\n No normalization is performed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>scalar</span> : Number<div class='sub-desc'><p>the scalar to multiply by, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the amounts multiplied by the scalar, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-negated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-negated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-negated' class='name expandable'>negated</a>( <span class='pre'></span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new instance with each amount in this period negated. ...</div><div class='long'><p>Returns a new instance with each amount in this period negated.\n <p>\n This returns a period with each of the years, months and days units\n individually negated.\n For example, a period of \"2 years, -3 months and 4 days\" will be\n negated to \"-2 years, 3 months and -4 days\".\n No normalization is performed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the amounts negated, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs, which only happens if\n  one of the units has the value {@code Long.MIN_VALUE}</p>\n</div></li></ul></div></div></div><div id='method-normalized' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-normalized' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-normalized' class='name expandable'>normalized</a>( <span class='pre'></span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the years and months normalized. ...</div><div class='long'><p>Returns a copy of this period with the years and months normalized.\n <p>\n This normalizes the years and months units, leaving the days unit unchanged.\n The months unit is adjusted to have an absolute value less than 11,\n with the years unit being adjusted to compensate. For example, a period of\n \"1 Year and 15 months\" will be normalized to \"2 years and 3 months\".\n <p>\n The sign of the years and months units will be the same after normalization.\n For example, a period of \"1 year and -25 months\" will be normalized to\n \"-1 year and -1 month\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with excess months normalized to years, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-of' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-of' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-of' class='name expandable'>of</a>( <span class='pre'>years, months, days</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a {@code Period} representing a number of years, months and days. ...</div><div class='long'><p>Obtains a {@code Period} representing a number of years, months and days.\n <p>\n This creates an instance based on years, months and days.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>years</span> : Number<div class='sub-desc'><p>the amount of years, may be negative</p>\n</div></li><li><span class='pre'>months</span> : Number<div class='sub-desc'><p>the amount of months, may be negative</p>\n</div></li><li><span class='pre'>days</span> : Number<div class='sub-desc'><p>the amount of days, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>the period of years, months and days, not null</p>\n</div></li></ul></div></div></div><div id='method-ofDays' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-ofDays' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-ofDays' class='name expandable'>ofDays</a>( <span class='pre'>days</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a {@code Period} representing a number of days. ...</div><div class='long'><p>Obtains a {@code Period} representing a number of days.\n <p>\n The resulting period will have the specified days.\n The years and months units will be zero.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>days</span> : Number<div class='sub-desc'><p>the number of days, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>the period of days, not null</p>\n</div></li></ul></div></div></div><div id='method-ofMonths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-ofMonths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-ofMonths' class='name expandable'>ofMonths</a>( <span class='pre'>months</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a {@code Period} representing a number of months. ...</div><div class='long'><p>Obtains a {@code Period} representing a number of months.\n <p>\n The resulting period will have the specified months.\n The years and days units will be zero.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>months</span> : Number<div class='sub-desc'><p>the number of months, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>the period of months, not null</p>\n</div></li></ul></div></div></div><div id='method-ofWeeks' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-ofWeeks' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-ofWeeks' class='name expandable'>ofWeeks</a>( <span class='pre'>weeks</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a {@code Period} representing a number of weeks. ...</div><div class='long'><p>Obtains a {@code Period} representing a number of weeks.\n <p>\n The resulting period will be day-based, with the amount of days\n equal to the number of weeks multiplied by 7.\n The years and months units will be zero.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>weeks</span> : Number<div class='sub-desc'><p>the number of weeks, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>the period, with the input weeks converted to days, not null</p>\n</div></li></ul></div></div></div><div id='method-ofYears' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-ofYears' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-ofYears' class='name expandable'>ofYears</a>( <span class='pre'>years</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a {@code Period} representing a number of years. ...</div><div class='long'><p>Obtains a {@code Period} representing a number of years.\n <p>\n The resulting period will have the specified years.\n The months and days units will be zero.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>years</span> : Number<div class='sub-desc'><p>the number of years, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>the period of years, not null</p>\n</div></li></ul></div></div></div><div id='method-parse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-parse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-parse' class='name expandable'>parse</a>( <span class='pre'>text</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a {@code Period} from a text string such as {@code PnYnMnD}. ...</div><div class='long'><p>Obtains a {@code Period} from a text string such as {@code PnYnMnD}.\n <p>\n This will parse the string produced by {@code toString()} which is\n based on the ISO-8601 period formats {@code PnYnMnD} and {@code PnW}.\n <p>\n The string starts with an optional sign, denoted by the ASCII negative\n or positive symbol. If negative, the whole period is negated.\n The ASCII letter \"P\" is next in upper or lower case.\n There are then four sections, each consisting of a number and a suffix.\n At least one of the four sections must be present.\n The sections have suffixes in ASCII of \"Y\", \"M\", \"W\" and \"D\" for\n years, months, weeks and days, accepted in upper or lower case.\n The suffixes must occur in order.\n The number part of each section must consist of ASCII digits.\n The number may be prefixed by the ASCII negative or positive symbol.\n The number must parse to an {@code int}.\n <p>\n The leading plus/minus sign, and negative values for other units are\n not part of the ISO-8601 standard. In addition, ISO-8601 does not\n permit mixing between the {@code PnYnMnD} and {@code PnW} formats.\n Any week-based input is multiplied by 7 and treated as a number of days.\n <p>\n For example, the following are valid inputs:</p>\n\n<pre>   \"P2Y\"             -- Period.ofYears(2)\n   \"P3M\"             -- Period.ofMonths(3)\n   \"P4W\"             -- Period.ofWeeks(4)\n   \"P5D\"             -- Period.ofDays(5)\n   \"P1Y2M3D\"         -- Period.of(1, 2, 3)\n   \"P1Y2M3W4D\"       -- Period.of(1, 2, 25)\n   \"P-1Y2M\"          -- Period.of(-1, 2, 0)\n   \"-P1Y2M\"          -- Period.of(-1, -2, 0)\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>the text to parse, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>the parsed period, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeParseException if the text cannot be parsed to a period</p>\n</div></li></ul></div></div></div><div id='method-plus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-plus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-plus' class='name expandable'>plus</a>( <span class='pre'>amountToAdd</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified period added. ...</div><div class='long'><p>Returns a copy of this period with the specified period added.\n <p>\n This operates separately on the years, months and days.\n No normalization is performed.\n <p>\n For example, \"1 year, 6 months and 3 days\" plus \"2 years, 2 months and 2 days\"\n returns \"3 years, 8 months and 5 days\".\n <p>\n The specified amount is typically an instance of {@code Period}.\n Other types are interpreted using from(TemporalAmount).\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToAdd</span> : Object {TemporalAmount}<div class='sub-desc'><p>the amount to add, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the requested period added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the specified amount has a non-ISO chronology or\n  contains an invalid unit</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plusDays' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-plusDays' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-plusDays' class='name expandable'>plusDays</a>( <span class='pre'>daysToAdd</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified days added. ...</div><div class='long'><p>Returns a copy of this period with the specified days added.\n <p>\n This adds the amount to the days unit in a copy of this period.\n The years and months units are unaffected.\n For example, \"1 year, 6 months and 3 days\" plus 2 days returns \"1 year, 6 months and 5 days\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>daysToAdd</span> : Number<div class='sub-desc'><p>the days to add, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the specified days added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plusMonths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-plusMonths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-plusMonths' class='name expandable'>plusMonths</a>( <span class='pre'>monthsToAdd</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified months added. ...</div><div class='long'><p>Returns a copy of this period with the specified months added.\n <p>\n This adds the amount to the months unit in a copy of this period.\n The years and days units are unaffected.\n For example, \"1 year, 6 months and 3 days\" plus 2 months returns \"1 year, 8 months and 3 days\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>monthsToAdd</span> : Number<div class='sub-desc'><p>the months to add, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the specified months added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plusYears' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-plusYears' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-plusYears' class='name expandable'>plusYears</a>( <span class='pre'>yearsToAdd</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified years added. ...</div><div class='long'><p>Returns a copy of this period with the specified years added.\n <p>\n This adds the amount to the years unit in a copy of this period.\n The months and days units are unaffected.\n For example, \"1 year, 6 months and 3 days\" plus 2 years returns \"3 years, 6 months and 3 days\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>yearsToAdd</span> : Number<div class='sub-desc'><p>the years to add, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the specified years added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-subtractFrom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-subtractFrom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-subtractFrom' class='name expandable'>subtractFrom</a>( <span class='pre'>temporal</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Subtracts this period from the specified temporal object. ...</div><div class='long'><p>Subtracts this period from the specified temporal object.\n <p>\n This returns a temporal object of the same observable type as the input\n with this period subtracted.\n If the temporal has a chronology, it must be the ISO chronology.\n <p>\n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.minus(TemporalAmount).</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   dateTime = thisPeriod.subtractFrom(dateTime);\n   dateTime = dateTime.minus(thisPeriod);\n </pre>\n\n\n<p> <p>\n The calculation operates as follows.\n First, the chronology of the temporal is checked to ensure it is ISO chronology or null.\n Second, if the months are zero, the years are subtracted if non-zero, otherwise\n the combination of years and months is subtracted if non-zero.\n Finally, any days are subtracted.\n <p>\n This approach ensures that a partial period can be subtracted from a partial date.\n For example, a period of years and/or months can be subtracted from a {@code YearMonth},\n but a period including days cannot.\n The approach also subtracts years and months together when necessary, which ensures\n correct behaviour at the end of the month.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the temporal object to adjust, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>an object of the same type with the adjustment made, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to subtract</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Outputs this period as a {@code String}, such as {@code P6Y3M1D}. ...</div><div class='long'><p>Outputs this period as a {@code String}, such as {@code P6Y3M1D}.\n <p>\n The output will be in the ISO-8601 period format.\n A zero period will be represented as zero days, 'P0D'.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string representation of this period, not null</p>\n</div></li></ul></div></div></div><div id='method-toTotalMonths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-toTotalMonths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-toTotalMonths' class='name expandable'>toTotalMonths</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the total number of months in this period. ...</div><div class='long'><p>Gets the total number of months in this period.\n <p>\n This returns the total number of months in the period by multiplying the\n number of years by 12 and adding the number of months.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the total number of months in the period, may be negative</p>\n</div></li></ul></div></div></div><div id='method-withDays' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-withDays' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-withDays' class='name expandable'>withDays</a>( <span class='pre'>days</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified amount of days. ...</div><div class='long'><p>Returns a copy of this period with the specified amount of days.\n <p>\n This sets the amount of the days unit in a copy of this period.\n The years and months units are unaffected.\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>days</span> : Number<div class='sub-desc'><p>the days to represent, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the requested days, not null</p>\n</div></li></ul></div></div></div><div id='method-withMonths' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-withMonths' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-withMonths' class='name expandable'>withMonths</a>( <span class='pre'>months</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified amount of months. ...</div><div class='long'><p>Returns a copy of this period with the specified amount of months.\n <p>\n This sets the amount of the months unit in a copy of this period.\n The years and days units are unaffected.\n <p>\n The months unit is not automatically normalized with the years unit.\n This means that a period of \"15 months\" is different to a period\n of \"1 year and 3 months\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>months</span> : Number<div class='sub-desc'><p>the months to represent, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the requested months, not null</p>\n</div></li></ul></div></div></div><div id='method-withYears' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Period'>java.time.Period</span><br/><a href='source/Period.html#java-time-Period-method-withYears' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Period-method-withYears' class='name expandable'>withYears</a>( <span class='pre'>years</span> ) : Object {java.time.Period}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this period with the specified amount of years. ...</div><div class='long'><p>Returns a copy of this period with the specified amount of years.\n <p>\n This sets the amount of the years unit in a copy of this period.\n The months and days units are unaffected.\n <p>\n The months unit is not automatically normalized with the years unit.\n This means that a period of \"15 months\" is different to a period\n of \"1 year and 3 months\".\n <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>years</span> : Number<div class='sub-desc'><p>the years to represent, may be negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Period}</span><div class='sub-desc'><p>a {@code Period} based on this period with the requested years, not null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});