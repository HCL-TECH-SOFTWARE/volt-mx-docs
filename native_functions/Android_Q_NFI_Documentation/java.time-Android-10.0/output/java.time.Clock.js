Ext.data.JsonP.java_time_Clock({"tagname":"class","name":"java.time.Clock","autodetected":{},"files":[{"filename":"Clock.js","href":"Clock.html#java-time-Clock"}],"extends":"java.lang.Object","since":"1.8","members":[{"name":"equals","tagname":"method","owner":"java.time.Clock","id":"method-equals","meta":{}},{"name":"fixed","tagname":"method","owner":"java.time.Clock","id":"method-fixed","meta":{}},{"name":"getZone","tagname":"method","owner":"java.time.Clock","id":"method-getZone","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.time.Clock","id":"method-hashCode","meta":{}},{"name":"instant","tagname":"method","owner":"java.time.Clock","id":"method-instant","meta":{}},{"name":"millis","tagname":"method","owner":"java.time.Clock","id":"method-millis","meta":{}},{"name":"offset","tagname":"method","owner":"java.time.Clock","id":"method-offset","meta":{}},{"name":"system","tagname":"method","owner":"java.time.Clock","id":"method-system","meta":{}},{"name":"systemDefaultZone","tagname":"method","owner":"java.time.Clock","id":"method-systemDefaultZone","meta":{}},{"name":"systemUTC","tagname":"method","owner":"java.time.Clock","id":"method-systemUTC","meta":{}},{"name":"tick","tagname":"method","owner":"java.time.Clock","id":"method-tick","meta":{}},{"name":"tickMinutes","tagname":"method","owner":"java.time.Clock","id":"method-tickMinutes","meta":{}},{"name":"tickSeconds","tagname":"method","owner":"java.time.Clock","id":"method-tickSeconds","meta":{}},{"name":"withZone","tagname":"method","owner":"java.time.Clock","id":"method-withZone","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.Clock","short_doc":"A clock providing access to the current instant, date and time using a time-zone. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.time.Clock</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Clock.html#java-time-Clock' target='_blank'>Clock.js</a></div></pre><div class='doc-contents'><p>A clock providing access to the current instant, date and time using a time-zone.\n <p>\n Instances of this class are used to find the current instant, which can be\n interpreted using the stored time-zone to find the current date and time.\n As such, a clock can be used instead of System.currentTimeMillis()\n and TimeZone.getDefault().\n <p>\n Use of a {@code Clock} is optional. All key date-time classes also have a\n {@code now()} factory method that uses the system clock in the default time zone.\n The primary purpose of this abstraction is to allow alternate clocks to be\n plugged in as and when required. Applications use an object to obtain the\n current time rather than a static method. This can simplify testing.\n <p>\n Best practice for applications is to pass a {@code Clock} into any method\n that requires the current instant. A dependency injection framework is one\n way to achieve this:</p>\n\n<pre>  public class MyBean {\n    private Clock clock;  // dependency inject\n    ...\n    public void process(LocalDate eventDate) {\n      if (eventDate.isBefore(LocalDate.now(clock)) {\n        ...\n      }\n    }\n  }\n </pre>\n\n\n<p> This approach allows an alternate clock, such as java.time.ZoneId) fixed\n or java.time.Duration) offset to be used during testing.\n <p>\n The {@code system} factory methods provide clocks based on the best available\n system clock This may use System.currentTimeMillis(), or a higher\n resolution clock if one is available.</p>\n\n<p> @implSpec\n This abstract class must be implemented with care to ensure other classes operate correctly.\n All implementations that can be instantiated must be final, immutable and thread-safe.\n <p>\n The principal methods are defined to allow the throwing of an exception.\n In normal use, no exceptions will be thrown, however one possible implementation would be to\n obtain the time from a central time server across the network. Obviously, in this case the\n lookup could fail, and so the method is permitted to throw an exception.\n <p>\n The returned instants from {@code Clock} work on a time-scale that ignores leap seconds,\n as described in <a href=\"#!/api/java.time.Instant\" rel=\"java.time.Instant\" class=\"docClass\">java.time.Instant</a>. If the implementation wraps a source that provides leap\n second information, then a mechanism should be used to \"smooth\" the leap second.\n The Java Time-Scale mandates the use of UTC-SLS, however clock implementations may choose\n how accurate they are with the time-scale so long as they document how they work.\n Implementations are therefore not required to actually perform the UTC-SLS slew or to\n otherwise be aware of leap seconds.\n <p>\n Implementations should implement {@code Serializable} wherever possible and must\n document whether or not they do support serialization.</p>\n\n<p> @implNote\n The clock implementation provided here is based on System.currentTimeMillis().\n That method provides little to no guarantee about the accuracy of the clock.\n Applications requiring a more accurate clock must implement this abstract class\n themselves using a different external clock, such as an NTP server.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-equals' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-equals' class='name expandable'>equals</a>( <span class='pre'>obj</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this clock is equal to another clock. ...</div><div class='long'><p>Checks if this clock is equal to another clock.\n <p>\n Clocks should override this method to compare equals based on\n their state and to meet the contract of Object.equals.\n If not overridden, the behavior is defined by Object.equals</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>the object to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is equal to the other clock</p>\n</div></li></ul></div></div></div><div id='method-fixed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-fixed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-fixed' class='name expandable'>fixed</a>( <span class='pre'>fixedInstant, zone</span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a clock that always returns the same instant. ...</div><div class='long'><p>Obtains a clock that always returns the same instant.\n <p>\n This clock simply returns the specified instant.\n As such, it is not a clock in the conventional sense.\n The main use case for this is in testing, where the fixed clock ensures\n tests are not dependent on the current clock.\n <p>\n The returned implementation is immutable, thread-safe and {@code Serializable}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fixedInstant</span> : Object {Instant}<div class='sub-desc'><p>the instant to use as the clock, not null</p>\n</div></li><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone to use to convert the instant to date-time, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock that always returns the same instant, not null</p>\n</div></li></ul></div></div></div><div id='method-getZone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-getZone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-getZone' class='name expandable'>getZone</a>( <span class='pre'></span> ) : Object {java.time.ZoneId}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the time-zone being used to create dates and times. ...</div><div class='long'><p>Gets the time-zone being used to create dates and times.\n <p>\n A clock will typically obtain the current instant and then convert that\n to a date or time using a time-zone. This method returns the time-zone used.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.ZoneId}</span><div class='sub-desc'><p>the time-zone being used to interpret instants, not null</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>A hash code for this clock. ...</div><div class='long'><p>A hash code for this clock.\n <p>\n Clocks should override this method based on\n their state and to meet the contract of Object.hashCode.\n If not overridden, the behavior is defined by Object.hashCode</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a suitable hash code</p>\n</div></li></ul></div></div></div><div id='method-instant' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-instant' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-instant' class='name expandable'>instant</a>( <span class='pre'></span> ) : Object {java.time.Instant}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current instant of the clock. ...</div><div class='long'><p>Gets the current instant of the clock.\n <p>\n This returns an instant representing the current instant as defined by the clock.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Instant}</span><div class='sub-desc'><p>the current instant from this clock, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the instant cannot be obtained, not thrown by most implementations</p>\n</div></li></ul></div></div></div><div id='method-millis' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-millis' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-millis' class='name expandable'>millis</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current millisecond instant of the clock. ...</div><div class='long'><p>Gets the current millisecond instant of the clock.\n <p>\n This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC).\n This is equivalent to the definition of System.currentTimeMillis().\n <p>\n Most applications should avoid this method and use <a href=\"#!/api/java.time.Instant\" rel=\"java.time.Instant\" class=\"docClass\">java.time.Instant</a> to represent\n an instant on the time-line rather than a raw millisecond value.\n This method is provided to allow the use of the clock in high performance use cases\n where the creation of an object would be unacceptable.\n <p>\n The default implementation currently calls <a href=\"#!/api/java.time.Clock-method-instant\" rel=\"java.time.Clock-method-instant\" class=\"docClass\">instant</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current millisecond instant from this clock, measured from\n  the Java epoch of 1970-01-01T00:00Z (UTC), not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the instant cannot be obtained, not thrown by most implementations</p>\n</div></li></ul></div></div></div><div id='method-offset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-offset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-offset' class='name expandable'>offset</a>( <span class='pre'>baseClock, offsetDuration</span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a clock that returns instants from the specified clock with the\n specified duration added\n \n This clock wraps...</div><div class='long'><p>Obtains a clock that returns instants from the specified clock with the\n specified duration added\n <p>\n This clock wraps another clock, returning instants that are later by the\n specified duration. If the duration is negative, the instants will be\n earlier than the current date and time.\n The main use case for this is to simulate running in the future or in the past.\n <p>\n A duration of zero would have no offsetting effect.\n Passing zero will return the underlying clock.\n <p>\n The returned implementation is immutable, thread-safe and {@code Serializable}\n providing that the base clock is.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>baseClock</span> : Object {Clock}<div class='sub-desc'><p>the base clock to add the duration to, not null</p>\n</div></li><li><span class='pre'>offsetDuration</span> : Object {Duration}<div class='sub-desc'><p>the duration to add, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock based on the base clock with the duration added, not null</p>\n</div></li></ul></div></div></div><div id='method-system' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-system' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-system' class='name expandable'>system</a>( <span class='pre'>zone</span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a clock that returns the current instant using best available\n system clock. ...</div><div class='long'><p>Obtains a clock that returns the current instant using best available\n system clock.\n <p>\n This clock is based on the best available system clock.\n This may use System.currentTimeMillis(), or a higher resolution\n clock if one is available.\n <p>\n Conversion from instant to date or time uses the specified time-zone.\n <p>\n The returned implementation is immutable, thread-safe and {@code Serializable}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone to use to convert the instant to date-time, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock that uses the best available system clock in the specified zone, not null</p>\n</div></li></ul></div></div></div><div id='method-systemDefaultZone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-systemDefaultZone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-systemDefaultZone' class='name expandable'>systemDefaultZone</a>( <span class='pre'></span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a clock that returns the current instant using the best available\n system clock, converting to date and time ...</div><div class='long'><p>Obtains a clock that returns the current instant using the best available\n system clock, converting to date and time using the default time-zone.\n <p>\n This clock is based on the best available system clock.\n This may use System.currentTimeMillis(), or a higher resolution\n clock if one is available.\n <p>\n Using this method hard codes a dependency to the default time-zone into your application.\n It is recommended to avoid this and use a specific time-zone whenever possible.\n The UTC clock should be used when you need the current instant\n without the date or time.\n <p>\n The returned implementation is immutable, thread-safe and {@code Serializable}.\n It is equivalent to {@code system(ZoneId.systemDefault())}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock that uses the best available system clock in the default zone, not null\n@see ZoneId#systemDefault()</p>\n</div></li></ul></div></div></div><div id='method-systemUTC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-systemUTC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-systemUTC' class='name expandable'>systemUTC</a>( <span class='pre'></span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a clock that returns the current instant using the best available\n system clock, converting to date and time ...</div><div class='long'><p>Obtains a clock that returns the current instant using the best available\n system clock, converting to date and time using the UTC time-zone.\n <p>\n This clock, rather than <a href=\"#!/api/java.time.Clock-method-systemDefaultZone\" rel=\"java.time.Clock-method-systemDefaultZone\" class=\"docClass\">systemDefaultZone</a>(), should be used when\n you need the current instant without the date or time.\n <p>\n This clock is based on the best available system clock.\n This may use System.currentTimeMillis(), or a higher resolution\n clock if one is available.\n <p>\n Conversion from instant to date or time uses the {@linkplain <a href=\"#!/api/java.time.ZoneOffset-property-UTC\" rel=\"java.time.ZoneOffset-property-UTC\" class=\"docClass\">java.time.ZoneOffset.UTC</a> UTC time-zone}.\n <p>\n The returned implementation is immutable, thread-safe and {@code Serializable}.\n It is equivalent to {@code system(ZoneOffset.UTC)}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock that uses the best available system clock in the UTC zone, not null</p>\n</div></li></ul></div></div></div><div id='method-tick' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-tick' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-tick' class='name expandable'>tick</a>( <span class='pre'>baseClock, tickDuration</span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a clock that returns instants from the specified clock truncated\n to the nearest occurrence of the specified ...</div><div class='long'><p>Obtains a clock that returns instants from the specified clock truncated\n to the nearest occurrence of the specified duration.\n <p>\n This clock will only tick as per the specified duration. Thus, if the duration\n is half a second, the clock will return instants truncated to the half second.\n <p>\n The tick duration must be positive. If it has a part smaller than a whole\n millisecond, then the whole duration must divide into one second without\n leaving a remainder. All normal tick durations will match these criteria,\n including any multiple of hours, minutes, seconds and milliseconds, and\n sensible nanosecond durations, such as 20ns, 250,000ns and 500,000ns.\n <p>\n A duration of zero or one nanosecond would have no truncation effect.\n Passing one of these will return the underlying clock.\n <p>\n Implementations may use a caching strategy for performance reasons.\n As such, it is possible that the start of the requested duration observed\n via this clock will be later than that observed directly via the underlying clock.\n <p>\n The returned implementation is immutable, thread-safe and {@code Serializable}\n providing that the base clock is.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>baseClock</span> : Object {Clock}<div class='sub-desc'><p>the base clock to base the ticking clock on, not null</p>\n</div></li><li><span class='pre'>tickDuration</span> : Object {Duration}<div class='sub-desc'><p>the duration of each visible tick, not negative, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock that ticks in whole units of the duration, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the duration is negative, or has a\n  part smaller than a whole millisecond such that the whole duration is not\n  divisible into one second</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if the duration is too large to be represented as nanos</p>\n</div></li></ul></div></div></div><div id='method-tickMinutes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-tickMinutes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-tickMinutes' class='name expandable'>tickMinutes</a>( <span class='pre'>zone</span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a clock that returns the current instant ticking in whole minutes\n using best available system clock. ...</div><div class='long'><p>Obtains a clock that returns the current instant ticking in whole minutes\n using best available system clock.\n <p>\n This clock will always have the nano-of-second and second-of-minute fields set to zero.\n This ensures that the visible time ticks in whole minutes.\n The underlying clock is the best available system clock, equivalent to\n using <a href=\"#!/api/java.time.Clock-method-system\" rel=\"java.time.Clock-method-system\" class=\"docClass\">system</a>(ZoneId).\n <p>\n Implementations may use a caching strategy for performance reasons.\n As such, it is possible that the start of the minute observed via this\n clock will be later than that observed directly via the underlying clock.\n <p>\n The returned implementation is immutable, thread-safe and {@code Serializable}.\n It is equivalent to {@code tick(system(zone), Duration.ofMinutes(1))}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone to use to convert the instant to date-time, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock that ticks in whole minutes using the specified zone, not null</p>\n</div></li></ul></div></div></div><div id='method-tickSeconds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-tickSeconds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-tickSeconds' class='name expandable'>tickSeconds</a>( <span class='pre'>zone</span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtains a clock that returns the current instant ticking in whole seconds\n using best available system clock. ...</div><div class='long'><p>Obtains a clock that returns the current instant ticking in whole seconds\n using best available system clock.\n <p>\n This clock will always have the nano-of-second field set to zero.\n This ensures that the visible time ticks in whole seconds.\n The underlying clock is the best available system clock, equivalent to\n using <a href=\"#!/api/java.time.Clock-method-system\" rel=\"java.time.Clock-method-system\" class=\"docClass\">system</a>(ZoneId).\n <p>\n Implementations may use a caching strategy for performance reasons.\n As such, it is possible that the start of the second observed via this\n clock will be later than that observed directly via the underlying clock.\n <p>\n The returned implementation is immutable, thread-safe and {@code Serializable}.\n It is equivalent to {@code tick(system(zone), Duration.ofSeconds(1))}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone to use to convert the instant to date-time, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock that ticks in whole seconds using the specified zone, not null</p>\n</div></li></ul></div></div></div><div id='method-withZone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.Clock'>java.time.Clock</span><br/><a href='source/Clock.html#java-time-Clock-method-withZone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.Clock-method-withZone' class='name expandable'>withZone</a>( <span class='pre'>zone</span> ) : Object {java.time.Clock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of this clock with a different time-zone. ...</div><div class='long'><p>Returns a copy of this clock with a different time-zone.\n <p>\n A clock will typically obtain the current instant and then convert that\n to a date or time using a time-zone. This method returns a clock with\n similar properties but using a different time-zone.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>zone</span> : Object {ZoneId}<div class='sub-desc'><p>the time-zone to change to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Clock}</span><div class='sub-desc'><p>a clock based on this clock with the specified time-zone, not null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});