Ext.data.JsonP.android_graphics_drawable_Drawable({"tagname":"class","name":"android.graphics.drawable.Drawable","autodetected":{},"files":[{"filename":"Drawable.js","href":"Drawable.html#android-graphics-drawable-Drawable"}],"extends":"java.lang.Object","members":[{"name":"applyTheme","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-applyTheme","meta":{}},{"name":"canApplyTheme","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-canApplyTheme","meta":{}},{"name":"clearColorFilter","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-clearColorFilter","meta":{}},{"name":"copyBounds","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-copyBounds","meta":{}},{"name":"createFromPath","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-createFromPath","meta":{}},{"name":"createFromResourceStream","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-createFromResourceStream","meta":{"deprecated":{"text":"<p>Prefer the version without an Options object.</p>\n"}}},{"name":"createFromStream","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-createFromStream","meta":{}},{"name":"createFromXml","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-createFromXml","meta":{}},{"name":"createFromXmlInner","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-createFromXmlInner","meta":{}},{"name":"draw","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-draw","meta":{}},{"name":"getAlpha","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getAlpha","meta":{}},{"name":"getBounds","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getBounds","meta":{}},{"name":"getCallback","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getCallback","meta":{}},{"name":"getChangingConfigurations","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getChangingConfigurations","meta":{}},{"name":"getColorFilter","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getColorFilter","meta":{}},{"name":"getConstantState","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getConstantState","meta":{}},{"name":"getCurrent","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getCurrent","meta":{}},{"name":"getDirtyBounds","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getDirtyBounds","meta":{}},{"name":"getHotspotBounds","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getHotspotBounds","meta":{}},{"name":"getIntrinsicHeight","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getIntrinsicHeight","meta":{}},{"name":"getIntrinsicWidth","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getIntrinsicWidth","meta":{}},{"name":"getLayoutDirection","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getLayoutDirection","meta":{}},{"name":"getLevel","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getLevel","meta":{}},{"name":"getMinimumHeight","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getMinimumHeight","meta":{}},{"name":"getMinimumWidth","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getMinimumWidth","meta":{}},{"name":"getOpacity","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getOpacity","meta":{"deprecated":{"text":"<p>This method is no longer used in graphics optimizations</p>\n"}}},{"name":"getOpticalInsets","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getOpticalInsets","meta":{}},{"name":"getOutline","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getOutline","meta":{}},{"name":"getPadding","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getPadding","meta":{}},{"name":"getState","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getState","meta":{}},{"name":"getTransparentRegion","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-getTransparentRegion","meta":{}},{"name":"inflate","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-inflate","meta":{}},{"name":"invalidateSelf","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-invalidateSelf","meta":{}},{"name":"isAutoMirrored","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-isAutoMirrored","meta":{}},{"name":"isFilterBitmap","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-isFilterBitmap","meta":{}},{"name":"isProjected","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-isProjected","meta":{}},{"name":"isStateful","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-isStateful","meta":{}},{"name":"isVisible","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-isVisible","meta":{}},{"name":"jumpToCurrentState","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-jumpToCurrentState","meta":{}},{"name":"mutate","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-mutate","meta":{}},{"name":"onLayoutDirectionChanged","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-onLayoutDirectionChanged","meta":{}},{"name":"resolveOpacity","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-resolveOpacity","meta":{}},{"name":"scheduleSelf","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-scheduleSelf","meta":{}},{"name":"setAlpha","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setAlpha","meta":{}},{"name":"setAutoMirrored","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setAutoMirrored","meta":{}},{"name":"setBounds","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setBounds","meta":{}},{"name":"setCallback","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setCallback","meta":{}},{"name":"setChangingConfigurations","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setChangingConfigurations","meta":{}},{"name":"setColorFilter","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setColorFilter","meta":{"deprecated":{"text":"<p>use setColorFilter(ColorFilter) with an instance\n of android.graphics.BlendModeColorFilter</p>\n"}}},{"name":"setDither","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setDither","meta":{"deprecated":{"text":"<p>This property is ignored.</p>\n"}}},{"name":"setFilterBitmap","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setFilterBitmap","meta":{}},{"name":"setHotspot","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setHotspot","meta":{}},{"name":"setHotspotBounds","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setHotspotBounds","meta":{}},{"name":"setLayoutDirection","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setLayoutDirection","meta":{}},{"name":"setLevel","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setLevel","meta":{}},{"name":"setState","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setState","meta":{}},{"name":"setTint","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setTint","meta":{}},{"name":"setTintBlendMode","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setTintBlendMode","meta":{}},{"name":"setTintList","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setTintList","meta":{}},{"name":"setTintMode","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setTintMode","meta":{}},{"name":"setVisible","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-setVisible","meta":{}},{"name":"unscheduleSelf","tagname":"method","owner":"android.graphics.drawable.Drawable","id":"method-unscheduleSelf","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.drawable.Drawable","short_doc":"A Drawable is a general abstraction for \"something that can be drawn.\"  Most\n often you will deal with Drawable as th...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["android.graphics.drawable.AdaptiveIconDrawable","android.graphics.drawable.AnimatedImageDrawable","android.graphics.drawable.AnimatedVectorDrawable","android.graphics.drawable.BitmapDrawable","android.graphics.drawable.ColorDrawable","android.graphics.drawable.ColorStateListDrawable","android.graphics.drawable.DrawableContainer","android.graphics.drawable.DrawableWrapper","android.graphics.drawable.GradientDrawable","android.graphics.drawable.LayerDrawable","android.graphics.drawable.NinePatchDrawable","android.graphics.drawable.PictureDrawable","android.graphics.drawable.ShapeDrawable","android.graphics.drawable.VectorDrawable"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.drawable.Drawable</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/android.graphics.drawable.AdaptiveIconDrawable' rel='android.graphics.drawable.AdaptiveIconDrawable' class='docClass'>android.graphics.drawable.AdaptiveIconDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.AnimatedImageDrawable' rel='android.graphics.drawable.AnimatedImageDrawable' class='docClass'>android.graphics.drawable.AnimatedImageDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.AnimatedVectorDrawable' rel='android.graphics.drawable.AnimatedVectorDrawable' class='docClass'>android.graphics.drawable.AnimatedVectorDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.BitmapDrawable' rel='android.graphics.drawable.BitmapDrawable' class='docClass'>android.graphics.drawable.BitmapDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.ColorDrawable' rel='android.graphics.drawable.ColorDrawable' class='docClass'>android.graphics.drawable.ColorDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.ColorStateListDrawable' rel='android.graphics.drawable.ColorStateListDrawable' class='docClass'>android.graphics.drawable.ColorStateListDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.DrawableContainer' rel='android.graphics.drawable.DrawableContainer' class='docClass'>android.graphics.drawable.DrawableContainer</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.DrawableWrapper' rel='android.graphics.drawable.DrawableWrapper' class='docClass'>android.graphics.drawable.DrawableWrapper</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.GradientDrawable' rel='android.graphics.drawable.GradientDrawable' class='docClass'>android.graphics.drawable.GradientDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.LayerDrawable' rel='android.graphics.drawable.LayerDrawable' class='docClass'>android.graphics.drawable.LayerDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.NinePatchDrawable' rel='android.graphics.drawable.NinePatchDrawable' class='docClass'>android.graphics.drawable.NinePatchDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.PictureDrawable' rel='android.graphics.drawable.PictureDrawable' class='docClass'>android.graphics.drawable.PictureDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.ShapeDrawable' rel='android.graphics.drawable.ShapeDrawable' class='docClass'>android.graphics.drawable.ShapeDrawable</a></div><div class='dependency'><a href='#!/api/android.graphics.drawable.VectorDrawable' rel='android.graphics.drawable.VectorDrawable' class='docClass'>android.graphics.drawable.VectorDrawable</a></div><h4>Files</h4><div class='dependency'><a href='source/Drawable.html#android-graphics-drawable-Drawable' target='_blank'>Drawable.js</a></div></pre><div class='doc-contents'><p>A Drawable is a general abstraction for \"something that can be drawn.\"  Most\n often you will deal with Drawable as the type of resource retrieved for\n drawing things to the screen; the Drawable class provides a generic API for\n dealing with an underlying visual resource that may take a variety of forms.\n Unlike a android.view.View, a Drawable does not have any facility to\n receive events or otherwise interact with the user.</p>\n\n<p> <p>In addition to simple drawing, Drawable provides a number of generic\n mechanisms for its client to interact with what is being drawn:</p>\n\n<p> <ul>\n     <li> The <a href=\"#!/api/android.graphics.drawable.Drawable-method-setBounds\" rel=\"android.graphics.drawable.Drawable-method-setBounds\" class=\"docClass\">setBounds</a> method <var>must</var> be called to tell the\n     Drawable where it is drawn and how large it should be.  All Drawables\n     should respect the requested size, often simply by scaling their\n     imagery.  A client can find the preferred size for some Drawables with\n     the <a href=\"#!/api/android.graphics.drawable.Drawable-method-getIntrinsicHeight\" rel=\"android.graphics.drawable.Drawable-method-getIntrinsicHeight\" class=\"docClass\">getIntrinsicHeight</a> and <a href=\"#!/api/android.graphics.drawable.Drawable-method-getIntrinsicWidth\" rel=\"android.graphics.drawable.Drawable-method-getIntrinsicWidth\" class=\"docClass\">getIntrinsicWidth</a> methods.</li></ul></p>\n\n<pre><code> &lt;li&gt; The <a href=\"#!/api/android.graphics.drawable.Drawable-method-getPadding\" rel=\"android.graphics.drawable.Drawable-method-getPadding\" class=\"docClass\">getPadding</a> method can return from some Drawables\n information about how to frame content that is placed inside of them.\n For example, a Drawable that is intended to be the frame for a button\n widget would need to return padding that correctly places the label\n inside of itself.\n\n &lt;li&gt; The <a href=\"#!/api/android.graphics.drawable.Drawable-method-setState\" rel=\"android.graphics.drawable.Drawable-method-setState\" class=\"docClass\">setState</a> method allows the client to tell the Drawable\n in which state it is to be drawn, such as \"focused\", \"selected\", etc.\n Some drawables may modify their imagery based on the selected state.\n\n &lt;li&gt; The <a href=\"#!/api/android.graphics.drawable.Drawable-method-setLevel\" rel=\"android.graphics.drawable.Drawable-method-setLevel\" class=\"docClass\">setLevel</a> method allows the client to supply a single\n continuous controller that can modify the Drawable is displayed, such as\n a battery level or progress level.  Some drawables may modify their\n imagery based on the current level.\n\n &lt;li&gt; A Drawable can perform animations by calling back to its client\n through the <a href=\"#!/api/android.graphics.drawable.Drawable.Callback\" rel=\"android.graphics.drawable.Drawable.Callback\" class=\"docClass\">android.graphics.drawable.Drawable.Callback</a> interface.  All clients should support this\n interface (via <a href=\"#!/api/android.graphics.drawable.Drawable-method-setCallback\" rel=\"android.graphics.drawable.Drawable-method-setCallback\" class=\"docClass\">setCallback</a>) so that animations will work.  A\n simple way to do this is through the system facilities such as\n android.view.View.setBackground(Drawable) and\n android.widget.ImageView.\n</code></pre>\n\n<p> </p>\n\n<p> Though usually not visible to the application, Drawables may take a variety\n of forms:</p>\n\n<p> <ul>\n     <li> <b>Bitmap</b>: the simplest Drawable, a PNG or JPEG image.\n     <li> <b>Nine Patch</b>: an extension to the PNG format allows it to\n     specify information about how to stretch it and place things inside of\n     it.\n     <li><b>Vector</b>: a drawable defined in an XML file as a set of points,\n     lines, and curves along with its associated color information. This type\n     of drawable can be scaled without loss of display quality.\n     <li> <b>Shape</b>: contains simple drawing commands instead of a raw\n     bitmap, allowing it to resize better in some cases.\n     <li> <b>Layers</b>: a compound drawable, which draws multiple underlying\n     drawables on top of each other.\n     <li> <b>States</b>: a compound drawable that selects one of a set of\n     drawables based on its state.\n     <li> <b>Levels</b>: a compound drawable that selects one of a set of\n     drawables based on its level.\n     <li> <b>Scale</b>: a compound drawable with a single child drawable,\n     whose overall size is modified based on the current level.\n </li></li></li></li></li></li></li></li></ul></p>\n\n<p> <a name=\"Custom\"></a>\n <h3>Custom drawables</h3></p>\n\n<p> <p>\n All versions of Android allow the Drawable class to be extended and used at\n run time in place of framework-provided drawable classes. Starting in\n API 24, custom drawables classes\n may also be used in XML.\n <p>\n <strong>Note:</strong> Custom drawable classes are only accessible from\n within your application package. Other applications will not be able to load\n them.\n <p>\n At a minimum, custom drawable classes must implement the abstract methods on\n Drawable and should override the draw(Canvas) method to\n draw content.\n <p>\n Custom drawables classes may be used in XML in multiple ways:\n <ul>\n     <li>\n         Using the fully-qualified class name as the XML element name. For\n         this method, the custom drawable class must be a public top-level\n         class.</li></ul></p>\n\n<pre> &lt;com.myapp.MyCustomDrawable xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     android:color=\"#ffff0000\" /&gt;\n </pre>\n\n\n<pre><code> &lt;/li&gt;\n &lt;li&gt;\n     Using &lt;em&gt;drawable&lt;/em&gt; as the XML element name and specifying the\n     fully-qualified class name from the &lt;em&gt;class&lt;/em&gt; attribute. This\n     method may be used for both public top-level classes and public\n     static inner classes.\n</code></pre>\n\n<pre> &lt;drawable xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     class=\"com.myapp.MyTopLevelClass$InnerCustomDrawable\"\n     android:color=\"#ffff0000\" /&gt;\n </pre>\n\n\n<pre><code> &lt;/li&gt;\n</code></pre>\n\n<p> </p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about how to use drawables, read the\n <a href=\"{@docRoot}guide/topics/graphics/2d-graphics.html\">Canvas and Drawables</a> developer\n guide. For information and examples of creating drawable resources (XML or bitmap files that\n can be loaded in code), read the\n <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>\n document.</p></div></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-applyTheme' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-applyTheme' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-applyTheme' class='name expandable'>applyTheme</a>( <span class='pre'>t</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Applies the specified theme to this Drawable and its children. ...</div><div class='long'><p>Applies the specified theme to this Drawable and its children.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>t</span> : Object {Resources.Theme}<div class='sub-desc'><p>the theme to apply</p>\n</div></li></ul></div></div></div><div id='method-canApplyTheme' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-canApplyTheme' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-canApplyTheme' class='name expandable'>canApplyTheme</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-clearColorFilter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-clearColorFilter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-clearColorFilter' class='name expandable'>clearColorFilter</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the color filter for this drawable. ...</div><div class='long'><p>Removes the color filter for this drawable.</p>\n</div></div></div><div id='method-copyBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-copyBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-copyBounds' class='name expandable'>copyBounds</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a copy of the drawable's bounds in a new Rect. ...</div><div class='long'><p>Return a copy of the drawable's bounds in a new Rect. This returns the\n same values as getBounds(), but the returned object is guaranteed to not\n be changed later by the drawable (i.e. it retains no reference to this\n rect). If the caller already has a Rect allocated, call copyBounds(rect).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>A copy of the drawable's bounds</p>\n</div></li></ul></div></div></div><div id='method-createFromPath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-createFromPath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-createFromPath' class='name expandable'>createFromPath</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a drawable from file path name. ...</div><div class='long'><p>Create a drawable from file path name.</p>\n</div></div></div><div id='method-createFromResourceStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-createFromResourceStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-createFromResourceStream' class='name expandable'>createFromResourceStream</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Create a drawable from an inputstream, using the given resources and\n value to determine density information. ...</div><div class='long'><p>Create a drawable from an inputstream, using the given resources and\n value to determine density information.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Prefer the version without an Options object.</p>\n\n        </div>\n</div></div></div><div id='method-createFromStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-createFromStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-createFromStream' class='name expandable'>createFromStream</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a drawable from an inputstream ...</div><div class='long'><p>Create a drawable from an inputstream</p>\n</div></div></div><div id='method-createFromXml' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-createFromXml' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-createFromXml' class='name expandable'>createFromXml</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a drawable from an XML document using an optional Theme. ...</div><div class='long'><p>Create a drawable from an XML document using an optional Theme.\n For more information on how to create resources in XML, see\n <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.</p>\n</div></div></div><div id='method-createFromXmlInner' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-createFromXmlInner' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-createFromXmlInner' class='name expandable'>createFromXmlInner</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a drawable from inside an XML document using an optional\n Theme. ...</div><div class='long'><p>Create a drawable from inside an XML document using an optional\n Theme. Called on a parser positioned at a tag in an XML\n document, tries to create a Drawable from that tag. Returns {@code null}\n if the tag is not a valid drawable.</p>\n</div></div></div><div id='method-draw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-draw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-draw' class='name expandable'>draw</a>( <span class='pre'>canvas</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Draw in its bounds (set via setBounds) respecting optional effects such\n as alpha (set via setAlpha) and color filter...</div><div class='long'><p>Draw in its bounds (set via setBounds) respecting optional effects such\n as alpha (set via setAlpha) and color filter (set via setColorFilter).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>canvas</span> : Object {Canvas}<div class='sub-desc'><p>The canvas to draw into</p>\n</div></li></ul></div></div></div><div id='method-getAlpha' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getAlpha' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getAlpha' class='name expandable'>getAlpha</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current alpha value for the drawable. ...</div><div class='long'><p>Gets the current alpha value for the drawable. 0 means fully transparent,\n 255 means fully opaque. This method is implemented by\n Drawable subclasses and the value returned is specific to how that class treats alpha.\n The default return value is 255 if the class does not override this method to return a value\n specific to its use of alpha.</p>\n</div></div></div><div id='method-getBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getBounds' class='name expandable'>getBounds</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the drawable's bounds Rect. ...</div><div class='long'><p>Return the drawable's bounds Rect. Note: for efficiency, the returned\n object may be the same object stored in the drawable (though this is not\n guaranteed), so if a persistent copy of the bounds is needed, call\n copyBounds(rect) instead.\n You should also not change the object returned by this method as it may\n be the same object stored in the drawable.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>The bounds of the drawable (which may change later, so caller\n         beware). DO NOT ALTER the returned object as it may change the\n         stored bounds of this drawable.\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-copyBounds\" rel=\"android.graphics.drawable.Drawable-method-copyBounds\" class=\"docClass\">copyBounds</a>()\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-copyBounds\" rel=\"android.graphics.drawable.Drawable-method-copyBounds\" class=\"docClass\">copyBounds</a>(android.graphics.Rect)</p>\n</div></li></ul></div></div></div><div id='method-getCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getCallback' class='name expandable'>getCallback</a>( <span class='pre'></span> ) : Object {android.graphics.drawable.Drawable.Callback}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the current android.graphics.drawable.Drawable.Callback implementation attached to this\n Drawable. ...</div><div class='long'><p>Return the current <a href=\"#!/api/android.graphics.drawable.Drawable.Callback\" rel=\"android.graphics.drawable.Drawable.Callback\" class=\"docClass\">android.graphics.drawable.Drawable.Callback</a> implementation attached to this\n Drawable.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.drawable.Drawable.Callback}</span><div class='sub-desc'><p>A Callback instance or null if no callback was set.\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setCallback\" rel=\"android.graphics.drawable.Drawable-method-setCallback\" class=\"docClass\">setCallback</a>(<a href=\"#!/api/android.graphics.drawable.Drawable.Callback\" rel=\"android.graphics.drawable.Drawable.Callback\" class=\"docClass\">android.graphics.drawable.Drawable.Callback</a>)</p>\n</div></li></ul></div></div></div><div id='method-getChangingConfigurations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getChangingConfigurations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getChangingConfigurations' class='name expandable'>getChangingConfigurations</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a mask of the configuration parameters for which this drawable\n may change, requiring that it be re-created. ...</div><div class='long'><p>Return a mask of the configuration parameters for which this drawable\n may change, requiring that it be re-created.  The default implementation\n returns whatever was provided through\n <a href=\"#!/api/android.graphics.drawable.Drawable-method-setChangingConfigurations\" rel=\"android.graphics.drawable.Drawable-method-setChangingConfigurations\" class=\"docClass\">setChangingConfigurations</a>(int) or 0 by default.  Subclasses\n may extend this to or in the changing configurations of any other\n drawables they hold.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns a mask of the changing configuration parameters, as\n defined by android.content.pm.ActivityInfo.\n@see android.content.pm.ActivityInfo</p>\n</div></li></ul></div></div></div><div id='method-getColorFilter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getColorFilter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getColorFilter' class='name expandable'>getColorFilter</a>( <span class='pre'></span> ) : Object {android.graphics.ColorFilter}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current color filter, or {@code null} if none set. ...</div><div class='long'><p>Returns the current color filter, or {@code null} if none set.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.ColorFilter}</span><div class='sub-desc'><p>the current color filter, or {@code null} if none set</p>\n</div></li></ul></div></div></div><div id='method-getConstantState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getConstantState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getConstantState' class='name expandable'>getConstantState</a>( <span class='pre'></span> ) : Object {android.graphics.drawable.Drawable.ConstantState}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a android.graphics.drawable.Drawable.ConstantState instance that holds the shared state of this Drawable. ...</div><div class='long'><p>Return a <a href=\"#!/api/android.graphics.drawable.Drawable.ConstantState\" rel=\"android.graphics.drawable.Drawable.ConstantState\" class=\"docClass\">android.graphics.drawable.Drawable.ConstantState</a> instance that holds the shared state of this Drawable.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.drawable.Drawable.ConstantState}</span><div class='sub-desc'><p>The ConstantState associated to that Drawable.\n@see ConstantState\n@see Drawable#mutate()</p>\n</div></li></ul></div></div></div><div id='method-getCurrent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getCurrent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getCurrent' class='name expandable'>getCurrent</a>( <span class='pre'></span> ) : Object {android.graphics.drawable.Drawable}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.drawable.Drawable}</span><div class='sub-desc'><p>The current drawable that will be used by this drawable. For simple drawables, this\n         is just the drawable itself. For drawables that change state like\n         StateListDrawable and LevelListDrawable this will be the child drawable\n         currently in use.</p>\n</div></li></ul></div></div></div><div id='method-getDirtyBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getDirtyBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getDirtyBounds' class='name expandable'>getDirtyBounds</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the drawable's dirty bounds Rect. ...</div><div class='long'><p>Return the drawable's dirty bounds Rect. Note: for efficiency, the\n returned object may be the same object stored in the drawable (though\n this is not guaranteed).\n <p>\n By default, this returns the full drawable bounds. Custom drawables may\n override this method to perform more precise invalidation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>The dirty bounds of this drawable</p>\n</div></li></ul></div></div></div><div id='method-getHotspotBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getHotspotBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getHotspotBounds' class='name expandable'>getHotspotBounds</a>( <span class='pre'>outRect</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Populates {@code outRect} with the hotspot bounds. ...</div><div class='long'><p>Populates {@code outRect} with the hotspot bounds.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>outRect</span> : Object {Rect}<div class='sub-desc'><p>the rect to populate with the hotspot bounds\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setHotspotBounds\" rel=\"android.graphics.drawable.Drawable-method-setHotspotBounds\" class=\"docClass\">setHotspotBounds</a>(int, int, int, int)</p>\n</div></li></ul></div></div></div><div id='method-getIntrinsicHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getIntrinsicHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getIntrinsicHeight' class='name expandable'>getIntrinsicHeight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the drawable's intrinsic height. ...</div><div class='long'><p>Returns the drawable's intrinsic height.\n <p>\n Intrinsic height is the height at which the drawable would like to be\n laid out, including any inherent padding. If the drawable has no\n intrinsic height, such as a solid color, this method returns -1.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the intrinsic height, or -1 if no intrinsic height</p>\n</div></li></ul></div></div></div><div id='method-getIntrinsicWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getIntrinsicWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getIntrinsicWidth' class='name expandable'>getIntrinsicWidth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the drawable's intrinsic width. ...</div><div class='long'><p>Returns the drawable's intrinsic width.\n <p>\n Intrinsic width is the width at which the drawable would like to be laid\n out, including any inherent padding. If the drawable has no intrinsic\n width, such as a solid color, this method returns -1.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the intrinsic width, or -1 if no intrinsic width</p>\n</div></li></ul></div></div></div><div id='method-getLayoutDirection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getLayoutDirection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getLayoutDirection' class='name expandable'>getLayoutDirection</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the resolved layout direction for this Drawable. ...</div><div class='long'><p>Returns the resolved layout direction for this Drawable.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>One of android.view.View.LAYOUT_DIRECTION_LTR,\n         android.view.View.LAYOUT_DIRECTION_RTL\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setLayoutDirection\" rel=\"android.graphics.drawable.Drawable-method-setLayoutDirection\" class=\"docClass\">setLayoutDirection</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-getLevel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getLevel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getLevel' class='name expandable'>getLevel</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the current level. ...</div><div class='long'><p>Retrieve the current level.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int Current level, from 0 (minimum) to 10000 (maximum).</p>\n</div></li></ul></div></div></div><div id='method-getMinimumHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getMinimumHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getMinimumHeight' class='name expandable'>getMinimumHeight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the minimum height suggested by this Drawable. ...</div><div class='long'><p>Returns the minimum height suggested by this Drawable. If a View uses this\n Drawable as a background, it is suggested that the View use at least this\n value for its height. (There will be some scenarios where this will not be\n possible.) This value should INCLUDE any padding.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The minimum height suggested by this Drawable. If this Drawable\n         doesn't have a suggested minimum height, 0 is returned.</p>\n</div></li></ul></div></div></div><div id='method-getMinimumWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getMinimumWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getMinimumWidth' class='name expandable'>getMinimumWidth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the minimum width suggested by this Drawable. ...</div><div class='long'><p>Returns the minimum width suggested by this Drawable. If a View uses this\n Drawable as a background, it is suggested that the View use at least this\n value for its width. (There will be some scenarios where this will not be\n possible.) This value should INCLUDE any padding.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The minimum width suggested by this Drawable. If this Drawable\n         doesn't have a suggested minimum width, 0 is returned.</p>\n</div></li></ul></div></div></div><div id='method-getOpacity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getOpacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getOpacity' class='name expandable'>getOpacity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Return the opacity/transparency of this Drawable. ...</div><div class='long'><p>Return the opacity/transparency of this Drawable.  The returned value is\n one of the abstract format constants in\n android.graphics.PixelFormat:\n android.graphics.PixelFormat.UNKNOWN,\n android.graphics.PixelFormat.TRANSLUCENT,\n android.graphics.PixelFormat.TRANSPARENT, or\n android.graphics.PixelFormat.OPAQUE.</p>\n\n<p> <p>An OPAQUE drawable is one that draws all all content within its bounds, completely\n covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing\n within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable\n is a drawable in any other state, where the drawable will draw some, but not all,\n of the content within its bounds and at least some content behind the drawable will\n be visible. If the visibility of the drawable's contents cannot be determined, the\n safest/best return value is TRANSLUCENT.</p>\n\n<p> <p>Generally a Drawable should be as conservative as possible with the\n value it returns.  For example, if it contains multiple child drawables\n and only shows one of them at a time, if only one of the children is\n TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be\n returned.  You can use the method <a href=\"#!/api/android.graphics.drawable.Drawable-method-resolveOpacity\" rel=\"android.graphics.drawable.Drawable-method-resolveOpacity\" class=\"docClass\">resolveOpacity</a> to perform a\n standard reduction of two opacities to the appropriate single output.</p>\n\n<p> <p>Note that the returned value does not necessarily take into account a\n custom alpha or color filter that has been applied by the client through\n the <a href=\"#!/api/android.graphics.drawable.Drawable-method-setAlpha\" rel=\"android.graphics.drawable.Drawable-method-setAlpha\" class=\"docClass\">setAlpha</a> or <a href=\"#!/api/android.graphics.drawable.Drawable-method-setColorFilter\" rel=\"android.graphics.drawable.Drawable-method-setColorFilter\" class=\"docClass\">setColorFilter</a> methods. Some subclasses,\n such as <a href=\"#!/api/android.graphics.drawable.BitmapDrawable\" rel=\"android.graphics.drawable.BitmapDrawable\" class=\"docClass\">android.graphics.drawable.BitmapDrawable</a>, <a href=\"#!/api/android.graphics.drawable.ColorDrawable\" rel=\"android.graphics.drawable.ColorDrawable\" class=\"docClass\">android.graphics.drawable.ColorDrawable</a>, and <a href=\"#!/api/android.graphics.drawable.GradientDrawable\" rel=\"android.graphics.drawable.GradientDrawable\" class=\"docClass\">android.graphics.drawable.GradientDrawable</a>,\n do account for the value of <a href=\"#!/api/android.graphics.drawable.Drawable-method-setAlpha\" rel=\"android.graphics.drawable.Drawable-method-setAlpha\" class=\"docClass\">setAlpha</a>, but the general behavior is dependent\n upon the implementation of the subclass.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This method is no longer used in graphics optimizations</p>\n\n        </div>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int The opacity class of the Drawable.\n@see android.graphics.PixelFormat</p>\n</div></li></ul></div></div></div><div id='method-getOpticalInsets' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getOpticalInsets' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getOpticalInsets' class='name expandable'>getOpticalInsets</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return in insets the layout insets suggested by this Drawable for use with alignment\n operations during layout. ...</div><div class='long'><p>Return in insets the layout insets suggested by this Drawable for use with alignment\n operations during layout.</p>\n</div></div></div><div id='method-getOutline' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getOutline' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getOutline' class='name expandable'>getOutline</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to get the drawable to populate the Outline that defines its drawing area. ...</div><div class='long'><p>Called to get the drawable to populate the Outline that defines its drawing area.\n <p>\n This method is called by the default android.view.ViewOutlineProvider to define\n the outline of the View.\n <p>\n The default behavior defines the outline to be the bounding rectangle of 0 alpha.\n Subclasses that wish to convey a different shape or alpha value must override this method.\n@see android.view.View#setOutlineProvider(android.view.ViewOutlineProvider)</p>\n</div></div></div><div id='method-getPadding' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getPadding' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getPadding' class='name expandable'>getPadding</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return in padding the insets suggested by this Drawable for placing\n content inside the drawable's bounds. ...</div><div class='long'><p>Return in padding the insets suggested by this Drawable for placing\n content inside the drawable's bounds. Positive values move toward the\n center of the Drawable (set Rect.inset).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this drawable actually has a padding, else false. When false is returned,\n the padding is always set to 0.</p>\n</div></li></ul></div></div></div><div id='method-getState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getState' class='name expandable'>getState</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Describes the current state, as a union of primitve states, such as\n android.R.attr.state_focused,\n android.R.attr.st...</div><div class='long'><p>Describes the current state, as a union of primitve states, such as\n android.R.attr.state_focused,\n android.R.attr.state_selected, etc.\n Some drawables may modify their imagery based on the selected state.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>An array of resource Ids describing the current state.</p>\n</div></li></ul></div></div></div><div id='method-getTransparentRegion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-getTransparentRegion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-getTransparentRegion' class='name expandable'>getTransparentRegion</a>( <span class='pre'></span> ) : Object {android.graphics.Region}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a Region representing the part of the Drawable that is completely\n transparent. ...</div><div class='long'><p>Returns a Region representing the part of the Drawable that is completely\n transparent.  This can be used to perform drawing operations, identifying\n which parts of the target will not change when rendering the Drawable.\n The default implementation returns null, indicating no transparent\n region; subclasses can optionally override this to return an actual\n Region if they want to supply this optimization information, but it is\n not required that they do so.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Region}</span><div class='sub-desc'><p>Returns null if the Drawables has no transparent region to\n report, else a Region holding the parts of the Drawable's bounds that\n are transparent.</p>\n</div></li></ul></div></div></div><div id='method-inflate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-inflate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-inflate' class='name expandable'>inflate</a>( <span class='pre'>r, parser, attrs, theme</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inflate this Drawable from an XML resource optionally styled by a theme. ...</div><div class='long'><p>Inflate this Drawable from an XML resource optionally styled by a theme.\n This can't be called more than once for each Drawable. Note that framework may have called\n this once to create the Drawable instance from XML resource.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>r</span> : Object {Resources}<div class='sub-desc'><p>Resources used to resolve attribute values</p>\n</div></li><li><span class='pre'>parser</span> : Object {XmlPullParser}<div class='sub-desc'><p>XML parser from which to inflate this Drawable</p>\n</div></li><li><span class='pre'>attrs</span> : Object {AttributeSet}<div class='sub-desc'><p>Base set of attribute values</p>\n</div></li><li><span class='pre'>theme</span> : Object {Resources.Theme}<div class='sub-desc'><p>Theme to apply, may be null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>XmlPullParserException</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException</p>\n</div></li></ul></div></div></div><div id='method-invalidateSelf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-invalidateSelf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-invalidateSelf' class='name expandable'>invalidateSelf</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Use the current android.graphics.drawable.Drawable.Callback implementation to have this Drawable\n redrawn. ...</div><div class='long'><p>Use the current <a href=\"#!/api/android.graphics.drawable.Drawable.Callback\" rel=\"android.graphics.drawable.Drawable.Callback\" class=\"docClass\">android.graphics.drawable.Drawable.Callback</a> implementation to have this Drawable\n redrawn.  Does nothing if there is no Callback attached to the\n Drawable.\n@see Callback#invalidateDrawable\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-getCallback\" rel=\"android.graphics.drawable.Drawable-method-getCallback\" class=\"docClass\">getCallback</a>()\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setCallback\" rel=\"android.graphics.drawable.Drawable-method-setCallback\" class=\"docClass\">setCallback</a>(<a href=\"#!/api/android.graphics.drawable.Drawable.Callback\" rel=\"android.graphics.drawable.Drawable.Callback\" class=\"docClass\">android.graphics.drawable.Drawable.Callback</a>)</p>\n</div></div></div><div id='method-isAutoMirrored' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-isAutoMirrored' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-isAutoMirrored' class='name expandable'>isAutoMirrored</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells if this Drawable will be automatically mirrored  when its layout direction is RTL\n right-to-left. ...</div><div class='long'><p>Tells if this Drawable will be automatically mirrored  when its layout direction is RTL\n right-to-left. See android.util.LayoutDirection.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>boolean Returns true if this Drawable will be automatically mirrored.</p>\n</div></li></ul></div></div></div><div id='method-isFilterBitmap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-isFilterBitmap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-isFilterBitmap' class='name expandable'>isFilterBitmap</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether this drawable filters its bitmaps\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setFilterBitmap\" rel=\"android.graphics.drawable.Drawable-method-setFilterBitmap\" class=\"docClass\">setFilterBitmap</a>(boolean)</p>\n</div></li></ul></div></div></div><div id='method-isProjected' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-isProjected' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-isProjected' class='name expandable'>isProjected</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Whether this drawable requests projection. ...</div><div class='long'><p>Whether this drawable requests projection. Indicates that the\n android.graphics.RenderNode this Drawable will draw into should be drawn immediately\n after the closest ancestor RenderNode containing a projection receiver.\n@see android.graphics.RenderNode#setProjectBackwards(boolean)</p>\n</div></div></div><div id='method-isStateful' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-isStateful' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-isStateful' class='name expandable'>isStateful</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether this drawable will change its appearance based on\n state. ...</div><div class='long'><p>Indicates whether this drawable will change its appearance based on\n state. Clients can use this to determine whether it is necessary to\n calculate their state and call setState.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if this drawable changes its appearance based on state,\n         false otherwise.\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setState\" rel=\"android.graphics.drawable.Drawable-method-setState\" class=\"docClass\">setState</a>(int[])</p>\n</div></li></ul></div></div></div><div id='method-isVisible' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-isVisible' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-isVisible' class='name expandable'>isVisible</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-jumpToCurrentState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-jumpToCurrentState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-jumpToCurrentState' class='name expandable'>jumpToCurrentState</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>If this Drawable does transition animations between states, ask that\n it immediately jump to the current state and sk...</div><div class='long'><p>If this Drawable does transition animations between states, ask that\n it immediately jump to the current state and skip any active animations.</p>\n</div></div></div><div id='method-mutate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-mutate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-mutate' class='name expandable'>mutate</a>( <span class='pre'></span> ) : Object {android.graphics.drawable.Drawable}<span class=\"signature\"></span></div><div class='description'><div class='short'>Make this drawable mutable. ...</div><div class='long'><p>Make this drawable mutable. This operation cannot be reversed. A mutable\n drawable is guaranteed to not share its state with any other drawable.\n This is especially useful when you need to modify properties of drawables\n loaded from resources. By default, all drawables instances loaded from\n the same resource share a common state; if you modify the state of one\n instance, all the other instances will receive the same modification.</p>\n\n<p> Calling this method on a mutable Drawable will have no effect.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.drawable.Drawable}</span><div class='sub-desc'><p>This drawable.\n@see ConstantState\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-getConstantState\" rel=\"android.graphics.drawable.Drawable-method-getConstantState\" class=\"docClass\">getConstantState</a>()</p>\n</div></li></ul></div></div></div><div id='method-onLayoutDirectionChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-onLayoutDirectionChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-onLayoutDirectionChanged' class='name expandable'>onLayoutDirectionChanged</a>( <span class='pre'>layoutDirection</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the drawable's resolved layout direction changes. ...</div><div class='long'><p>Called when the drawable's resolved layout direction changes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>layoutDirection</span> : Number<div class='sub-desc'><p>the new resolved layout direction</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the layout direction change has caused the\n         appearance of the drawable to change such that it needs to be\n         re-drawn, {@code false} otherwise\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setLayoutDirection\" rel=\"android.graphics.drawable.Drawable-method-setLayoutDirection\" class=\"docClass\">setLayoutDirection</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-resolveOpacity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-resolveOpacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-resolveOpacity' class='name expandable'>resolveOpacity</a>( <span class='pre'>op1, op2</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the appropriate opacity value for two source opacities. ...</div><div class='long'><p>Return the appropriate opacity value for two source opacities.  If\n either is UNKNOWN, that is returned; else, if either is TRANSLUCENT,\n that is returned; else, if either is TRANSPARENT, that is returned;\n else, OPAQUE is returned.</p>\n\n<p> <p>This is to help in implementing <a href=\"#!/api/android.graphics.drawable.Drawable-method-getOpacity\" rel=\"android.graphics.drawable.Drawable-method-getOpacity\" class=\"docClass\">getOpacity</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>op1</span> : Number<div class='sub-desc'><p>One opacity value.</p>\n</div></li><li><span class='pre'>op2</span> : Number<div class='sub-desc'><p>Another opacity value.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int The combined opacity value.\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-getOpacity\" rel=\"android.graphics.drawable.Drawable-method-getOpacity\" class=\"docClass\">getOpacity</a></p>\n</div></li></ul></div></div></div><div id='method-scheduleSelf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-scheduleSelf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-scheduleSelf' class='name expandable'>scheduleSelf</a>( <span class='pre'>what, when</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Use the current android.graphics.drawable.Drawable.Callback implementation to have this Drawable\n scheduled. ...</div><div class='long'><p>Use the current <a href=\"#!/api/android.graphics.drawable.Drawable.Callback\" rel=\"android.graphics.drawable.Drawable.Callback\" class=\"docClass\">android.graphics.drawable.Drawable.Callback</a> implementation to have this Drawable\n scheduled.  Does nothing if there is no Callback attached to the\n Drawable.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>what</span> : Object {Runnable}<div class='sub-desc'><p>The action being scheduled.</p>\n</div></li><li><span class='pre'>when</span> : Number<div class='sub-desc'><p>The time (in milliseconds) to run.\n@see Callback#scheduleDrawable</p>\n</div></li></ul></div></div></div><div id='method-setAlpha' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setAlpha' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setAlpha' class='name expandable'>setAlpha</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specify an alpha value for the drawable. ...</div><div class='long'><p>Specify an alpha value for the drawable. 0 means fully transparent, and\n 255 means fully opaque.</p>\n</div></div></div><div id='method-setAutoMirrored' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setAutoMirrored' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setAutoMirrored' class='name expandable'>setAutoMirrored</a>( <span class='pre'>mirrored</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set whether this Drawable is automatically mirrored when its layout direction is RTL\n (right-to left). ...</div><div class='long'><p>Set whether this Drawable is automatically mirrored when its layout direction is RTL\n (right-to left). See android.util.LayoutDirection.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mirrored</span> : Boolean<div class='sub-desc'><p>Set to true if the Drawable should be mirrored, false if not.</p>\n</div></li></ul></div></div></div><div id='method-setBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setBounds' class='name expandable'>setBounds</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specify a bounding rectangle for the Drawable. ...</div><div class='long'><p>Specify a bounding rectangle for the Drawable. This is where the drawable\n will draw when its draw() method is called.</p>\n</div></div></div><div id='method-setCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setCallback' class='name expandable'>setCallback</a>( <span class='pre'>cb</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Bind a android.graphics.drawable.Drawable.Callback object to this Drawable. ...</div><div class='long'><p>Bind a <a href=\"#!/api/android.graphics.drawable.Drawable.Callback\" rel=\"android.graphics.drawable.Drawable.Callback\" class=\"docClass\">android.graphics.drawable.Drawable.Callback</a> object to this Drawable.  Required for clients\n that want to support animated drawables.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cb</span> : Object {Drawable.Callback}<div class='sub-desc'><p>The client's Callback implementation.\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-getCallback\" rel=\"android.graphics.drawable.Drawable-method-getCallback\" class=\"docClass\">getCallback</a>()</p>\n</div></li></ul></div></div></div><div id='method-setChangingConfigurations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setChangingConfigurations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setChangingConfigurations' class='name expandable'>setChangingConfigurations</a>( <span class='pre'>configs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a mask of the configuration parameters for which this drawable\n may change, requiring that it be re-created. ...</div><div class='long'><p>Set a mask of the configuration parameters for which this drawable\n may change, requiring that it be re-created.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>configs</span> : Number<div class='sub-desc'><p>A mask of the changing configuration parameters, as\n defined by android.content.pm.ActivityInfo.\n@see android.content.pm.ActivityInfo</p>\n</div></li></ul></div></div></div><div id='method-setColorFilter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setColorFilter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setColorFilter' class='name expandable'>setColorFilter</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Specify a color and Porter-Duff mode to be the color filter for this\n drawable. ...</div><div class='long'><p>Specify a color and Porter-Duff mode to be the color filter for this\n drawable.\n <p>\n Convenience for <a href=\"#!/api/android.graphics.drawable.Drawable-method-setColorFilter\" rel=\"android.graphics.drawable.Drawable-method-setColorFilter\" class=\"docClass\">setColorFilter</a>(ColorFilter) which constructs a\n PorterDuffColorFilter.\n </p>\n <p class=\"note\"><strong>Note:</strong> Setting a color filter disables\n tint.\n </p>\n@see setColorFilter(ColorFilter) }</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>use setColorFilter(ColorFilter) with an instance\n of android.graphics.BlendModeColorFilter</p>\n\n        </div>\n</div></div></div><div id='method-setDither' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setDither' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setDither' class='name expandable'>setDither</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Set to true to have the drawable dither its colors when drawn to a\n device with fewer than 8-bits per color component. ...</div><div class='long'><p>Set to true to have the drawable dither its colors when drawn to a\n device with fewer than 8-bits per color component.\n@see android.graphics.Paint#setDither(boolean);</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This property is ignored.</p>\n\n        </div>\n</div></div></div><div id='method-setFilterBitmap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setFilterBitmap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setFilterBitmap' class='name expandable'>setFilterBitmap</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set to true to have the drawable filter its bitmaps with bilinear\n sampling when they are scaled or rotated. ...</div><div class='long'><p>Set to true to have the drawable filter its bitmaps with bilinear\n sampling when they are scaled or rotated.</p>\n\n<p> <p>This can improve appearance when bitmaps are rotated. If the drawable\n does not use bitmaps, this call is ignored.</p>\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-isFilterBitmap\" rel=\"android.graphics.drawable.Drawable-method-isFilterBitmap\" class=\"docClass\">isFilterBitmap</a>()\n@see android.graphics.Paint#setFilterBitmap(boolean);</p>\n</div></div></div><div id='method-setHotspot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setHotspot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setHotspot' class='name expandable'>setHotspot</a>( <span class='pre'>x, y</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies the hotspot's location within the drawable. ...</div><div class='long'><p>Specifies the hotspot's location within the drawable.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The X coordinate of the center of the hotspot</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>The Y coordinate of the center of the hotspot</p>\n</div></li></ul></div></div></div><div id='method-setHotspotBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setHotspotBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setHotspotBounds' class='name expandable'>setHotspotBounds</a>( <span class='pre'>left, top, right, bottom</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the bounds to which the hotspot is constrained, if they should be\n different from the drawable bounds. ...</div><div class='long'><p>Sets the bounds to which the hotspot is constrained, if they should be\n different from the drawable bounds.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>left</span> : Number<div class='sub-desc'><p>position in pixels of the left bound</p>\n</div></li><li><span class='pre'>top</span> : Number<div class='sub-desc'><p>position in pixels of the top bound</p>\n</div></li><li><span class='pre'>right</span> : Number<div class='sub-desc'><p>position in pixels of the right bound</p>\n</div></li><li><span class='pre'>bottom</span> : Number<div class='sub-desc'><p>position in pixels of the bottom bound\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-getHotspotBounds\" rel=\"android.graphics.drawable.Drawable-method-getHotspotBounds\" class=\"docClass\">getHotspotBounds</a>(android.graphics.Rect)</p>\n</div></li></ul></div></div></div><div id='method-setLayoutDirection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setLayoutDirection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setLayoutDirection' class='name expandable'>setLayoutDirection</a>( <span class='pre'>layoutDirection</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the layout direction for this drawable. ...</div><div class='long'><p>Set the layout direction for this drawable. Should be a resolved\n layout direction, as the Drawable has no capacity to do the resolution on\n its own.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>layoutDirection</span> : Number<div class='sub-desc'><p>the resolved layout direction for the drawable,\n                        either android.view.View.LAYOUT_DIRECTION_LTR\n                        or android.view.View.LAYOUT_DIRECTION_RTL</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the layout direction change has caused the\n         appearance of the drawable to change such that it needs to be\n         re-drawn, {@code false} otherwise\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-getLayoutDirection\" rel=\"android.graphics.drawable.Drawable-method-getLayoutDirection\" class=\"docClass\">getLayoutDirection</a>()</p>\n</div></li></ul></div></div></div><div id='method-setLevel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setLevel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setLevel' class='name expandable'>setLevel</a>( <span class='pre'>level</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Specify the level for the drawable. ...</div><div class='long'><p>Specify the level for the drawable.  This allows a drawable to vary its\n imagery based on a continuous controller, for example to show progress\n or volume level.</p>\n\n<p> <p>If the new level you are supplying causes the appearance of the\n Drawable to change, then it is responsible for calling\n <a href=\"#!/api/android.graphics.drawable.Drawable-method-invalidateSelf\" rel=\"android.graphics.drawable.Drawable-method-invalidateSelf\" class=\"docClass\">invalidateSelf</a> in order to have itself redrawn, <em>and</em>\n true will be returned from this function.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>level</span> : Number<div class='sub-desc'><p>The new level, from 0 (minimum) to 10000 (maximum).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this change in level has caused the appearance\n of the Drawable to change (hence requiring an invalidate), otherwise\n returns false.</p>\n</div></li></ul></div></div></div><div id='method-setState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setState' class='name expandable'>setState</a>( <span class='pre'>stateSet</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Specify a set of states for the drawable. ...</div><div class='long'><p>Specify a set of states for the drawable. These are use-case specific,\n so see the relevant documentation. As an example, the background for\n widgets like Button understand the following states:\n [android.R.attr.state_focused,\n  android.R.attr.state_pressed].</p>\n\n<p> <p>If the new state you are supplying causes the appearance of the\n Drawable to change, then it is responsible for calling\n <a href=\"#!/api/android.graphics.drawable.Drawable-method-invalidateSelf\" rel=\"android.graphics.drawable.Drawable-method-invalidateSelf\" class=\"docClass\">invalidateSelf</a> in order to have itself redrawn, <em>and</em>\n true will be returned from this function.</p>\n\n<p> <p>Note: The Drawable holds a reference on to <var>stateSet</var>\n until a new state array is given to it, so you must not modify this\n array during that time.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stateSet</span> : Object {int[]}<div class='sub-desc'><p>The new set of states to be displayed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this change in state has caused the appearance\n of the Drawable to change (hence requiring an invalidate), otherwise\n returns false.</p>\n</div></li></ul></div></div></div><div id='method-setTint' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setTint' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setTint' class='name expandable'>setTint</a>( <span class='pre'>tintColor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies tint color for this drawable. ...</div><div class='long'><p>Specifies tint color for this drawable.\n <p>\n A Drawable's drawing content will be blended together with its tint\n before it is drawn to the screen. This functions similarly to\n PorterDuff.Mode).\n </p>\n <p>\n To clear the tint, pass {@code null} to\n <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTintList\" rel=\"android.graphics.drawable.Drawable-method-setTintList\" class=\"docClass\">setTintList</a>(ColorStateList).\n </p>\n <p class=\"note\"><strong>Note:</strong> Setting a color filter via\n <a href=\"#!/api/android.graphics.drawable.Drawable-method-setColorFilter\" rel=\"android.graphics.drawable.Drawable-method-setColorFilter\" class=\"docClass\">setColorFilter</a>(ColorFilter) or\n PorterDuff.Mode) overrides tint.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tintColor</span> : Number<div class='sub-desc'><p>Color to use for tinting this drawable\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTintList\" rel=\"android.graphics.drawable.Drawable-method-setTintList\" class=\"docClass\">setTintList</a>(ColorStateList)\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTintMode\" rel=\"android.graphics.drawable.Drawable-method-setTintMode\" class=\"docClass\">setTintMode</a>(PorterDuff.Mode)\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTintBlendMode\" rel=\"android.graphics.drawable.Drawable-method-setTintBlendMode\" class=\"docClass\">setTintBlendMode</a>(BlendMode)</p>\n</div></li></ul></div></div></div><div id='method-setTintBlendMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setTintBlendMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setTintBlendMode' class='name expandable'>setTintBlendMode</a>( <span class='pre'>blendMode</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies a tint blending mode for this drawable. ...</div><div class='long'><p>Specifies a tint blending mode for this drawable.\n <p>\n Defines how this drawable's tint color should be blended into the drawable\n before it is drawn to screen. Default tint mode is BlendMode.SRC_IN.\n </p>\n <p class=\"note\"><strong>Note:</strong> Setting a color filter via\n <a href=\"#!/api/android.graphics.drawable.Drawable-method-setColorFilter\" rel=\"android.graphics.drawable.Drawable-method-setColorFilter\" class=\"docClass\">setColorFilter</a>(ColorFilter)\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>blendMode</span> : Object {BlendMode}<div class='sub-desc'><p>BlendMode to apply to the drawable, a value of null sets the default\n                  blend mode value of BlendMode.SRC_IN\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTint\" rel=\"android.graphics.drawable.Drawable-method-setTint\" class=\"docClass\">setTint</a>(int)\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTintList\" rel=\"android.graphics.drawable.Drawable-method-setTintList\" class=\"docClass\">setTintList</a>(ColorStateList)</p>\n</div></li></ul></div></div></div><div id='method-setTintList' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setTintList' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setTintList' class='name expandable'>setTintList</a>( <span class='pre'>tint</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies tint color for this drawable as a color state list. ...</div><div class='long'><p>Specifies tint color for this drawable as a color state list.\n <p>\n A Drawable's drawing content will be blended together with its tint\n before it is drawn to the screen. This functions similarly to\n PorterDuff.Mode).\n </p>\n <p class=\"note\"><strong>Note:</strong> Setting a color filter via\n <a href=\"#!/api/android.graphics.drawable.Drawable-method-setColorFilter\" rel=\"android.graphics.drawable.Drawable-method-setColorFilter\" class=\"docClass\">setColorFilter</a>(ColorFilter) or\n PorterDuff.Mode) overrides tint.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tint</span> : Object {ColorStateList}<div class='sub-desc'><p>Color state list to use for tinting this drawable, or\n            {@code null} to clear the tint\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTint\" rel=\"android.graphics.drawable.Drawable-method-setTint\" class=\"docClass\">setTint</a>(int)\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTintMode\" rel=\"android.graphics.drawable.Drawable-method-setTintMode\" class=\"docClass\">setTintMode</a>(PorterDuff.Mode)\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTintBlendMode\" rel=\"android.graphics.drawable.Drawable-method-setTintBlendMode\" class=\"docClass\">setTintBlendMode</a>(BlendMode)</p>\n</div></li></ul></div></div></div><div id='method-setTintMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setTintMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setTintMode' class='name expandable'>setTintMode</a>( <span class='pre'>tintMode</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies a tint blending mode for this drawable. ...</div><div class='long'><p>Specifies a tint blending mode for this drawable.\n <p>\n Defines how this drawable's tint color should be blended into the drawable\n before it is drawn to screen. Default tint mode is PorterDuff.Mode.SRC_IN.\n </p>\n <p class=\"note\"><strong>Note:</strong> Setting a color filter via\n <a href=\"#!/api/android.graphics.drawable.Drawable-method-setColorFilter\" rel=\"android.graphics.drawable.Drawable-method-setColorFilter\" class=\"docClass\">setColorFilter</a>(ColorFilter) or\n PorterDuff.Mode) overrides tint.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tintMode</span> : Object {PorterDuff.Mode}<div class='sub-desc'><p>A Porter-Duff blending mode to apply to the drawable, a value of null sets\n                 the default Porter-Diff blending mode value\n                 of PorterDuff.Mode.SRC_IN\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTint\" rel=\"android.graphics.drawable.Drawable-method-setTint\" class=\"docClass\">setTint</a>(int)\n@see <a href=\"#!/api/android.graphics.drawable.Drawable-method-setTintList\" rel=\"android.graphics.drawable.Drawable-method-setTintList\" class=\"docClass\">setTintList</a>(ColorStateList)</p>\n</div></li></ul></div></div></div><div id='method-setVisible' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-setVisible' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-setVisible' class='name expandable'>setVisible</a>( <span class='pre'>visible, restart</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Set whether this Drawable is visible. ...</div><div class='long'><p>Set whether this Drawable is visible.  This generally does not impact\n the Drawable's behavior, but is a hint that can be used by some\n Drawables, for example, to decide whether run animations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>visible</span> : Boolean<div class='sub-desc'><p>Set to true if visible, false if not.</p>\n</div></li><li><span class='pre'>restart</span> : Boolean<div class='sub-desc'><p>You can supply true here to force the drawable to behave\n                as if it has just become visible, even if it had last\n                been set visible.  Used for example to force animations\n                to restart.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>boolean Returns true if the new visibility is different than\n         its previous state.</p>\n</div></li></ul></div></div></div><div id='method-unscheduleSelf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.drawable.Drawable'>android.graphics.drawable.Drawable</span><br/><a href='source/Drawable.html#android-graphics-drawable-Drawable-method-unscheduleSelf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.drawable.Drawable-method-unscheduleSelf' class='name expandable'>unscheduleSelf</a>( <span class='pre'>what</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Use the current android.graphics.drawable.Drawable.Callback implementation to have this Drawable\n unscheduled. ...</div><div class='long'><p>Use the current <a href=\"#!/api/android.graphics.drawable.Drawable.Callback\" rel=\"android.graphics.drawable.Drawable.Callback\" class=\"docClass\">android.graphics.drawable.Drawable.Callback</a> implementation to have this Drawable\n unscheduled.  Does nothing if there is no Callback attached to the\n Drawable.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>what</span> : Object {Runnable}<div class='sub-desc'><p>The runnable that you no longer want called.\n@see Callback#unscheduleDrawable</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});