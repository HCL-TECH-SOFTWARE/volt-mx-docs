Ext.data.JsonP.android_view_inspector_IntFlagMapping({"tagname":"class","name":"android.view.inspector.IntFlagMapping","autodetected":{},"files":[{"filename":"IntFlagMapping.js","href":"IntFlagMapping.html#android-view-inspector-IntFlagMapping"}],"extends":"java.lang.Object","members":[{"name":"add","tagname":"method","owner":"android.view.inspector.IntFlagMapping","id":"method-add","meta":{}},{"name":"get","tagname":"method","owner":"android.view.inspector.IntFlagMapping","id":"method-get","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.view.inspector.IntFlagMapping","short_doc":"Maps the values of an {@code int} property to sets of string for properties that encode flags. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.view.inspector.IntFlagMapping</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/IntFlagMapping.html#android-view-inspector-IntFlagMapping' target='_blank'>IntFlagMapping.js</a></div></pre><div class='doc-contents'><p>Maps the values of an {@code int} property to sets of string for properties that encode flags.</p>\n\n<p> An <a href=\"#!/api/android.view.inspector.InspectionCompanion\" rel=\"android.view.inspector.InspectionCompanion\" class=\"docClass\">android.view.inspector.InspectionCompanion</a> may provide an instance of this class to a <a href=\"#!/api/android.view.inspector.PropertyMapper\" rel=\"android.view.inspector.PropertyMapper\" class=\"docClass\">android.view.inspector.PropertyMapper</a>\n for flag values packed into primitive {@code int} properties.</p>\n\n<p> Each flag has a mask and a target value, for non-exclusive flags, the target can also be used as\n the mask. A given integer value is compared against each flag to find what flags are active for\n it by bitwise anding it with the mask and comparing the result against the target, that is,\n {@code (value &amp; mask) == target}.</p>\n\n<p> @see PropertyMapper#mapIntFlag(String, int, java.util.function.IntFunction)</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inspector.IntFlagMapping'>android.view.inspector.IntFlagMapping</span><br/><a href='source/IntFlagMapping.html#android-view-inspector-IntFlagMapping-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inspector.IntFlagMapping-method-add' class='name expandable'>add</a>( <span class='pre'>mask, target, name</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a mutually exclusive flag to the map. ...</div><div class='long'><p>Add a mutually exclusive flag to the map.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mask</span> : Number<div class='sub-desc'><p>The bit mask to compare to and with a value</p>\n</div></li><li><span class='pre'>target</span> : Number<div class='sub-desc'><p>The target value to compare the masked value with</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name of the flag to include if enabled</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inspector.IntFlagMapping'>android.view.inspector.IntFlagMapping</span><br/><a href='source/IntFlagMapping.html#android-view-inspector-IntFlagMapping-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inspector.IntFlagMapping-method-get' class='name expandable'>get</a>( <span class='pre'>value</span> ) : Object {java.util.Set}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get a set of the names of enabled flags for a given property value. ...</div><div class='long'><p>Get a set of the names of enabled flags for a given property value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Number<div class='sub-desc'><p>The value of the property</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Set}</span><div class='sub-desc'><p>The names of the enabled flags, empty if no flags enabled</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});