Ext.data.JsonP.java_lang_reflect_InvocationHandler({"tagname":"class","name":"java.lang.reflect.InvocationHandler","autodetected":{},"files":[{"filename":"InvocationHandler.js","href":"InvocationHandler.html#java-lang-reflect-InvocationHandler"}],"author":[{"tagname":"author","name":"Peter Jones","email":null}],"since":"1.3","members":[{"name":"invoke","tagname":"method","owner":"java.lang.reflect.InvocationHandler","id":"method-invoke","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.reflect.InvocationHandler","short_doc":"{@code InvocationHandler} is the interface implemented by\n the invocation handler of a proxy instance. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/InvocationHandler.html#java-lang-reflect-InvocationHandler' target='_blank'>InvocationHandler.js</a></div></pre><div class='doc-contents'><p>{@code InvocationHandler} is the interface implemented by\n the <i>invocation handler</i> of a proxy instance.</p>\n\n<p> <p>Each proxy instance has an associated invocation handler.\n When a method is invoked on a proxy instance, the method\n invocation is encoded and dispatched to the {@code invoke}\n method of its invocation handler.</p>\n\n<p> @see         Proxy</p>\n        <p>Available since: <b>1.3</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-invoke' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.reflect.InvocationHandler'>java.lang.reflect.InvocationHandler</span><br/><a href='source/InvocationHandler.html#java-lang-reflect-InvocationHandler-method-invoke' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.reflect.InvocationHandler-method-invoke' class='name expandable'>invoke</a>( <span class='pre'>proxy, method, args</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Processes a method invocation on a proxy instance and returns\n the result. ...</div><div class='long'><p>Processes a method invocation on a proxy instance and returns\n the result.  This method will be invoked on an invocation handler\n when a method is invoked on a proxy instance that it is\n associated with.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>proxy</span> : Object {Object}<div class='sub-desc'><p>the proxy instance that the method was invoked on</p>\n</div></li><li><span class='pre'>method</span> : Object {Method}<div class='sub-desc'><p>the {@code Method} instance corresponding to\n the interface method invoked on the proxy instance.  The declaring\n class of the {@code Method} object will be the interface that\n the method was declared in, which may be a superinterface of the\n proxy interface that the proxy class inherits the method through.</p>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>an array of objects containing the values of the\n arguments passed in the method invocation on the proxy instance,\n or {@code null} if interface method takes no arguments.\n Arguments of primitive types are wrapped in instances of the\n appropriate primitive wrapper class, such as\n {@code java.lang.Integer} or {@code java.lang.Boolean}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the value to return from the method invocation on the\n proxy instance.  If the declared return type of the interface\n method is a primitive type, then the value returned by\n this method must be an instance of the corresponding primitive\n wrapper class; otherwise, it must be a type assignable to the\n declared return type.  If the value returned by this method is\n {@code null} and the interface method's return type is\n primitive, then a {@code NullPointerException} will be\n thrown by the method invocation on the proxy instance.  If the\n value returned by this method is otherwise not compatible with\n the interface method's declared return type as described above,\n a {@code ClassCastException} will be thrown by the method\n invocation on the proxy instance.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Throwable the exception to throw from the method\n invocation on the proxy instance.  The exception's type must be\n assignable either to any of the exception types declared in the\n {@code throws} clause of the interface method or to the\n unchecked exception types {@code java.lang.RuntimeException}\n or {@code java.lang.Error}.  If a checked exception is\n thrown by this method that is not assignable to any of the\n exception types declared in the {@code throws} clause of\n the interface method, then an\n UndeclaredThrowableException containing the\n exception that was thrown by this method will be thrown by the\n method invocation on the proxy instance.\n@see UndeclaredThrowableException</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});