Ext.data.JsonP.android_hardware_Camera({"tagname":"class","name":"android.hardware.Camera","autodetected":{},"files":[{"filename":"Camera.js","href":"Camera.html#android-hardware-Camera"}],"extends":"java.lang.Object","deprecated":{"text":"<p>We recommend using the new android.hardware.camera2 API for new\n             applications.</p>\n"},"members":[{"name":"ACTION_NEW_PICTURE","tagname":"property","owner":"android.hardware.Camera","id":"property-ACTION_NEW_PICTURE","meta":{}},{"name":"ACTION_NEW_VIDEO","tagname":"property","owner":"android.hardware.Camera","id":"property-ACTION_NEW_VIDEO","meta":{}},{"name":"CAMERA_ERROR_EVICTED","tagname":"property","owner":"android.hardware.Camera","id":"property-CAMERA_ERROR_EVICTED","meta":{}},{"name":"CAMERA_ERROR_SERVER_DIED","tagname":"property","owner":"android.hardware.Camera","id":"property-CAMERA_ERROR_SERVER_DIED","meta":{}},{"name":"CAMERA_ERROR_UNKNOWN","tagname":"property","owner":"android.hardware.Camera","id":"property-CAMERA_ERROR_UNKNOWN","meta":{}},{"name":"addCallbackBuffer","tagname":"method","owner":"android.hardware.Camera","id":"method-addCallbackBuffer","meta":{}},{"name":"addRawImageCallbackBuffer","tagname":"method","owner":"android.hardware.Camera","id":"method-addRawImageCallbackBuffer","meta":{}},{"name":"autoFocus","tagname":"method","owner":"android.hardware.Camera","id":"method-autoFocus","meta":{}},{"name":"cancelAutoFocus","tagname":"method","owner":"android.hardware.Camera","id":"method-cancelAutoFocus","meta":{}},{"name":"enableShutterSound","tagname":"method","owner":"android.hardware.Camera","id":"method-enableShutterSound","meta":{}},{"name":"getCameraInfo","tagname":"method","owner":"android.hardware.Camera","id":"method-getCameraInfo","meta":{}},{"name":"getNumberOfCameras","tagname":"method","owner":"android.hardware.Camera","id":"method-getNumberOfCameras","meta":{}},{"name":"getParameters","tagname":"method","owner":"android.hardware.Camera","id":"method-getParameters","meta":{}},{"name":"lock","tagname":"method","owner":"android.hardware.Camera","id":"method-lock","meta":{}},{"name":"open","tagname":"method","owner":"android.hardware.Camera","id":"method-open","meta":{}},{"name":"reconnect","tagname":"method","owner":"android.hardware.Camera","id":"method-reconnect","meta":{}},{"name":"release","tagname":"method","owner":"android.hardware.Camera","id":"method-release","meta":{}},{"name":"setAutoFocusMoveCallback","tagname":"method","owner":"android.hardware.Camera","id":"method-setAutoFocusMoveCallback","meta":{}},{"name":"setDisplayOrientation","tagname":"method","owner":"android.hardware.Camera","id":"method-setDisplayOrientation","meta":{}},{"name":"setErrorCallback","tagname":"method","owner":"android.hardware.Camera","id":"method-setErrorCallback","meta":{}},{"name":"setFaceDetectionListener","tagname":"method","owner":"android.hardware.Camera","id":"method-setFaceDetectionListener","meta":{}},{"name":"setOneShotPreviewCallback","tagname":"method","owner":"android.hardware.Camera","id":"method-setOneShotPreviewCallback","meta":{}},{"name":"setParameters","tagname":"method","owner":"android.hardware.Camera","id":"method-setParameters","meta":{}},{"name":"setPreviewCallback","tagname":"method","owner":"android.hardware.Camera","id":"method-setPreviewCallback","meta":{}},{"name":"setPreviewCallbackWithBuffer","tagname":"method","owner":"android.hardware.Camera","id":"method-setPreviewCallbackWithBuffer","meta":{}},{"name":"setPreviewDisplay","tagname":"method","owner":"android.hardware.Camera","id":"method-setPreviewDisplay","meta":{}},{"name":"setPreviewTexture","tagname":"method","owner":"android.hardware.Camera","id":"method-setPreviewTexture","meta":{}},{"name":"setZoomChangeListener","tagname":"method","owner":"android.hardware.Camera","id":"method-setZoomChangeListener","meta":{}},{"name":"startFaceDetection","tagname":"method","owner":"android.hardware.Camera","id":"method-startFaceDetection","meta":{}},{"name":"startPreview","tagname":"method","owner":"android.hardware.Camera","id":"method-startPreview","meta":{}},{"name":"startSmoothZoom","tagname":"method","owner":"android.hardware.Camera","id":"method-startSmoothZoom","meta":{}},{"name":"stopFaceDetection","tagname":"method","owner":"android.hardware.Camera","id":"method-stopFaceDetection","meta":{}},{"name":"stopPreview","tagname":"method","owner":"android.hardware.Camera","id":"method-stopPreview","meta":{}},{"name":"stopSmoothZoom","tagname":"method","owner":"android.hardware.Camera","id":"method-stopSmoothZoom","meta":{}},{"name":"takePicture","tagname":"method","owner":"android.hardware.Camera","id":"method-takePicture","meta":{}},{"name":"unlock","tagname":"method","owner":"android.hardware.Camera","id":"method-unlock","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.hardware.Camera","short_doc":"The Camera class is used to set image capture settings, start/stop preview,\n snap pictures, and retrieve frames for e...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.hardware.Camera</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Camera.html#android-hardware-Camera' target='_blank'>Camera.js</a></div></pre><div class='doc-contents'><p>The Camera class is used to set image capture settings, start/stop preview,\n snap pictures, and retrieve frames for encoding for video.  This class is a\n client for the Camera service, which manages the actual camera hardware.</p>\n\n<p> <p>To access the device camera, you must declare the\n android.Manifest.permission.CAMERA permission in your Android\n Manifest. Also be sure to include the\n <a href=\"{@docRoot}guide/topics/manifest/uses-feature-element.html\">&lt;uses-feature></a>\n manifest element to declare camera features used by your application.\n For example, if you use the camera and auto-focus feature, your Manifest\n should include the following:</p>\n <pre> &lt;uses-permission android:name=\"android.permission.CAMERA\" />\n &lt;uses-feature android:name=\"android.hardware.camera\" />\n &lt;uses-feature android:name=\"android.hardware.camera.autofocus\" /></pre></p>\n\n<p> <p>To take pictures with this class, use the following steps:</p></p>\n\n<p> <ol>\n <li>Obtain an instance of Camera from <a href=\"#!/api/android.hardware.Camera-method-open\" rel=\"android.hardware.Camera-method-open\" class=\"docClass\">open</a>(int).</li></ol></p>\n\n<p> <li>Get existing (default) settings with <a href=\"#!/api/android.hardware.Camera-method-getParameters\" rel=\"android.hardware.Camera-method-getParameters\" class=\"docClass\">getParameters</a>().</li></p>\n\n<p> <li>If necessary, modify the returned <a href=\"#!/api/android.hardware.Camera.Parameters\" rel=\"android.hardware.Camera.Parameters\" class=\"docClass\">android.hardware.Camera.Parameters</a> object and call\n setParameters(Camera.Parameters).</li></p>\n\n<p> <li>Call <a href=\"#!/api/android.hardware.Camera-method-setDisplayOrientation\" rel=\"android.hardware.Camera-method-setDisplayOrientation\" class=\"docClass\">setDisplayOrientation</a>(int) to ensure correct orientation of preview.</li></p>\n\n<p> <li><b>Important</b>: Pass a fully initialized SurfaceHolder to\n <a href=\"#!/api/android.hardware.Camera-method-setPreviewDisplay\" rel=\"android.hardware.Camera-method-setPreviewDisplay\" class=\"docClass\">setPreviewDisplay</a>(SurfaceHolder).  Without a surface, the camera\n will be unable to start the preview.</li></p>\n\n<p> <li><b>Important</b>: Call <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>() to start updating the\n preview surface.  Preview must be started before you can take a picture.</li></p>\n\n<p> <li>When you want, call android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback) to\n capture a photo.  Wait for the callbacks to provide the actual image data.</li></p>\n\n<p> <li>After taking a picture, preview display will have stopped.  To take more\n photos, call <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>() again first.</li></p>\n\n<p> <li>Call <a href=\"#!/api/android.hardware.Camera-method-stopPreview\" rel=\"android.hardware.Camera-method-stopPreview\" class=\"docClass\">stopPreview</a>() to stop updating the preview surface.</li></p>\n\n<p> <li><b>Important:</b> Call <a href=\"#!/api/android.hardware.Camera-method-release\" rel=\"android.hardware.Camera-method-release\" class=\"docClass\">release</a>() to release the camera for\n use by other applications.  Applications should release the camera\n immediately in android.app.Activity.onPause() (and re-<a href=\"#!/api/android.hardware.Camera-method-open\" rel=\"android.hardware.Camera-method-open\" class=\"docClass\">open</a>()\n it in android.app.Activity.onResume()).\n </li></p>\n\n<p> <p>To quickly switch to video recording mode, use these steps:</p></p>\n\n<p> <ol>\n <li>Obtain and initialize a Camera and start preview as described above.</li></ol></p>\n\n<p> <li>Call <a href=\"#!/api/android.hardware.Camera-method-unlock\" rel=\"android.hardware.Camera-method-unlock\" class=\"docClass\">unlock</a>() to allow the media process to access the camera.</li></p>\n\n<p> <li>Pass the camera to android.media.MediaRecorder.setCamera(Camera).\n See android.media.MediaRecorder information about video recording.</li></p>\n\n<p> <li>When finished recording, call <a href=\"#!/api/android.hardware.Camera-method-reconnect\" rel=\"android.hardware.Camera-method-reconnect\" class=\"docClass\">reconnect</a>() to re-acquire\n and re-lock the camera.</li></p>\n\n<p> <li>If desired, restart preview and take more photos or videos.</li></p>\n\n<p> <li>Call <a href=\"#!/api/android.hardware.Camera-method-stopPreview\" rel=\"android.hardware.Camera-method-stopPreview\" class=\"docClass\">stopPreview</a>() and <a href=\"#!/api/android.hardware.Camera-method-release\" rel=\"android.hardware.Camera-method-release\" class=\"docClass\">release</a>() as described above.\n </li></p>\n\n<p> <p>This class is not thread-safe, and is meant for use from one event thread.\n Most long-running operations (preview, focus, photo capture, etc) happen\n asynchronously and invoke callbacks as necessary.  Callbacks will be invoked\n on the event thread <a href=\"#!/api/android.hardware.Camera-method-open\" rel=\"android.hardware.Camera-method-open\" class=\"docClass\">open</a>(int) was called from.  This class's methods\n must never be called from multiple threads at once.</p></p>\n\n<p> <p class=\"caution\"><strong>Caution:</strong> Different Android-powered devices\n may have different hardware specifications, such as megapixel ratings and\n auto-focus capabilities. In order for your application to be compatible with\n more devices, you should not make assumptions about the device camera\n specifications.</p></p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about using cameras, read the\n <a href=\"{@docRoot}guide/topics/media/camera.html\">Camera</a> developer guide.</p>\n </div></p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This class has been <strong>deprecated</strong> </p>\n        <p>We recommend using the new android.hardware.camera2 API for new\n             applications.</p>\n\n        </div>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ACTION_NEW_PICTURE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-property-ACTION_NEW_PICTURE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-property-ACTION_NEW_PICTURE' class='name expandable'>ACTION_NEW_PICTURE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast Action:  A new picture is taken by the camera, and the entry of\nthe picture has been added to the media store. ...</div><div class='long'><p>Broadcast Action:  A new picture is taken by the camera, and the entry of\nthe picture has been added to the media store.\nandroid.content.Intent.getData is URI of the picture.</p>\n\n<p>In Android N this broadcast was removed, and\napplications are recommended to use\nJobInfo.Builder.android.app.job.JobInfo.Builder.addTriggerContentUri\ninstead.</p>\n\n\n\n\n<p>In Android O this broadcast has been brought\nback, but only for <em>registered</em> receivers.  Apps that are actively running can\nagain listen to the broadcast if they want an immediate clear signal about a picture\nbeing taken, however anything doing heavy work (or needing to be launched) as a result of\nthis should still use JobScheduler.</p>\n\n<p>Defaults to: <code>&quot;android.hardware.action.NEW_PICTURE&quot;</code></p></div></div></div><div id='property-ACTION_NEW_VIDEO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-property-ACTION_NEW_VIDEO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-property-ACTION_NEW_VIDEO' class='name expandable'>ACTION_NEW_VIDEO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast Action:  A new video is recorded by the camera, and the entry\nof the video has been added to the media store. ...</div><div class='long'><p>Broadcast Action:  A new video is recorded by the camera, and the entry\nof the video has been added to the media store.\nandroid.content.Intent.getData is URI of the video.</p>\n\n<p>In Android N this broadcast was removed, and\napplications are recommended to use\nJobInfo.Builder.android.app.job.JobInfo.Builder.addTriggerContentUri\ninstead.</p>\n\n\n\n\n<p>In Android O this broadcast has been brought\nback, but only for <em>registered</em> receivers.  Apps that are actively running can\nagain listen to the broadcast if they want an immediate clear signal about a video\nbeing taken, however anything doing heavy work (or needing to be launched) as a result of\nthis should still use JobScheduler.</p>\n\n<p>Defaults to: <code>&quot;android.hardware.action.NEW_VIDEO&quot;</code></p></div></div></div><div id='property-CAMERA_ERROR_EVICTED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-property-CAMERA_ERROR_EVICTED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-property-CAMERA_ERROR_EVICTED' class='name expandable'>CAMERA_ERROR_EVICTED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Camera was disconnected due to use by higher priority user. ...</div><div class='long'><p>Camera was disconnected due to use by higher priority user.\n@see Camera.ErrorCallback</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-CAMERA_ERROR_SERVER_DIED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-property-CAMERA_ERROR_SERVER_DIED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-property-CAMERA_ERROR_SERVER_DIED' class='name expandable'>CAMERA_ERROR_SERVER_DIED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Media server died. ...</div><div class='long'><p>Media server died. In this case, the application must release the\nCamera object and instantiate a new one.\n@see Camera.ErrorCallback</p>\n<p>Defaults to: <code>&quot;100&quot;</code></p></div></div></div><div id='property-CAMERA_ERROR_UNKNOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-property-CAMERA_ERROR_UNKNOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-property-CAMERA_ERROR_UNKNOWN' class='name expandable'>CAMERA_ERROR_UNKNOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Unspecified camera error. ...</div><div class='long'><p>Unspecified camera error.\n@see Camera.ErrorCallback</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addCallbackBuffer' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-addCallbackBuffer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-addCallbackBuffer' class='name expandable'>addCallbackBuffer</a>( <span class='pre'>callbackBuffer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds a pre-allocated buffer to the preview callback buffer queue. ...</div><div class='long'><p>Adds a pre-allocated buffer to the preview callback buffer queue.\n Applications can add one or more buffers to the queue. When a preview\n frame arrives and there is still at least one available buffer, the\n buffer will be used and removed from the queue. Then preview callback is\n invoked with the buffer. If a frame arrives and there is no buffer left,\n the frame is discarded. Applications should add buffers back when they\n finish processing the data in them.</p>\n\n<p> <p>For formats besides YV12, the size of the buffer is determined by\n multiplying the preview image width, height, and bytes per pixel. The\n width and height can be read from\n android.hardware.Camera.Parameters.getPreviewSize(). Bytes per pixel can be\n computed from android.graphics.ImageFormat.getBitsPerPixel(int) /\n 8, using the image format from\n android.hardware.Camera.Parameters.getPreviewFormat().</p>\n\n<p> <p>If using the android.graphics.ImageFormat.YV12 format, the\n size can be calculated using the equations listed in\n <a href=\"#!/api/android.hardware.Camera.Parameters-method-setPreviewFormat\" rel=\"android.hardware.Camera.Parameters-method-setPreviewFormat\" class=\"docClass\">android.hardware.Camera.Parameters.setPreviewFormat</a>.</p>\n\n<p> <p>This method is only necessary when\n <a href=\"#!/api/android.hardware.Camera-method-setPreviewCallbackWithBuffer\" rel=\"android.hardware.Camera-method-setPreviewCallbackWithBuffer\" class=\"docClass\">setPreviewCallbackWithBuffer</a>(PreviewCallback) is used. When\n <a href=\"#!/api/android.hardware.Camera-method-setPreviewCallback\" rel=\"android.hardware.Camera-method-setPreviewCallback\" class=\"docClass\">setPreviewCallback</a>(PreviewCallback) or\n <a href=\"#!/api/android.hardware.Camera-method-setOneShotPreviewCallback\" rel=\"android.hardware.Camera-method-setOneShotPreviewCallback\" class=\"docClass\">setOneShotPreviewCallback</a>(PreviewCallback) are used, buffers\n are automatically allocated. When a supplied buffer is too small to\n hold the preview frame data, preview callback will return null and\n the buffer will be removed from the buffer queue.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callbackBuffer</span> : Object {byte[]}<div class='sub-desc'><p>the buffer to add to the queue. The size of the\n   buffer must match the values described above.\n@see <a href=\"#!/api/android.hardware.Camera-method-setPreviewCallbackWithBuffer\" rel=\"android.hardware.Camera-method-setPreviewCallbackWithBuffer\" class=\"docClass\">setPreviewCallbackWithBuffer</a>(PreviewCallback)</p>\n</div></li></ul></div></div></div><div id='method-addRawImageCallbackBuffer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-addRawImageCallbackBuffer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-addRawImageCallbackBuffer' class='name expandable'>addRawImageCallbackBuffer</a>( <span class='pre'>callbackBuffer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds a pre-allocated buffer to the raw image callback buffer queue. ...</div><div class='long'><p>Adds a pre-allocated buffer to the raw image callback buffer queue.\n Applications can add one or more buffers to the queue. When a raw image\n frame arrives and there is still at least one available buffer, the\n buffer will be used to hold the raw image data and removed from the\n queue. Then raw image callback is invoked with the buffer. If a raw\n image frame arrives but there is no buffer left, the frame is\n discarded. Applications should add buffers back when they finish\n processing the data in them by calling this method again in order\n to avoid running out of raw image callback buffers.</p>\n\n<p> <p>The size of the buffer is determined by multiplying the raw image\n width, height, and bytes per pixel. The width and height can be\n read from android.hardware.Camera.Parameters.getPictureSize(). Bytes per pixel\n can be computed from\n android.graphics.ImageFormat.getBitsPerPixel(int) / 8,\n using the image format from android.hardware.Camera.Parameters.getPreviewFormat().</p>\n\n<p> <p>This method is only necessary when the PictureCallbck for raw image\n is used while calling android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback).</p>\n\n<p> <p>Please note that by calling this method, the mode for\n application-managed callback buffers is triggered. If this method has\n never been called, null will be returned by the raw image callback since\n there is no image callback buffer available. Furthermore, When a supplied\n buffer is too small to hold the raw image data, raw image callback will\n return null and the buffer will be removed from the buffer queue.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callbackBuffer</span> : Object {byte[]}<div class='sub-desc'><p>the buffer to add to the raw image callback buffer\n     queue. The size should be width * height * (bits per pixel) / 8. An\n     null callbackBuffer will be ignored and won't be added to the queue.\n@see <a href=\"#!/api/android.hardware.Camera-method-takePicture\" rel=\"android.hardware.Camera-method-takePicture\" class=\"docClass\">takePicture</a>(Camera.ShutterCallback,\n Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)}.</p>\n\n<p> {@hide}</p>\n</div></li></ul></div></div></div><div id='method-autoFocus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-autoFocus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-autoFocus' class='name expandable'>autoFocus</a>( <span class='pre'>cb</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts camera auto-focus and registers a callback function to run when\n the camera is focused. ...</div><div class='long'><p>Starts camera auto-focus and registers a callback function to run when\n the camera is focused.  This method is only valid when preview is active\n (between <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>() and before <a href=\"#!/api/android.hardware.Camera-method-stopPreview\" rel=\"android.hardware.Camera-method-stopPreview\" class=\"docClass\">stopPreview</a>()).</p>\n\n<p> <p>Callers should check\n android.hardware.Camera.Parameters.getFocusMode() to determine if\n this method should be called. If the camera does not support auto-focus,\n it is a no-op and android.hardware.Camera)\n callback will be called immediately.</p>\n\n<p> <p>If your application should not be installed\n on devices without auto-focus, you must declare that your application\n uses auto-focus with the\n <a href=\"{@docRoot}guide/topics/manifest/uses-feature-element.html\">&lt;uses-feature></a>\n manifest element.</p></p>\n\n<p> <p>If the current flash mode is not\n <a href=\"#!/api/android.hardware.Camera.Parameters-property-FLASH_MODE_OFF\" rel=\"android.hardware.Camera.Parameters-property-FLASH_MODE_OFF\" class=\"docClass\">android.hardware.Camera.Parameters.FLASH_MODE_OFF</a>, flash may be\n fired during auto-focus, depending on the driver and camera hardware.<p></p>\n\n<p> <p>Auto-exposure lock android.hardware.Camera.Parameters.getAutoExposureLock()\n and auto-white balance locks android.hardware.Camera.Parameters.getAutoWhiteBalanceLock()\n do not change during and after autofocus. But auto-focus routine may stop\n auto-exposure and auto-white balance transiently during focusing.</p>\n\n<p> <p>Stopping preview with <a href=\"#!/api/android.hardware.Camera-method-stopPreview\" rel=\"android.hardware.Camera-method-stopPreview\" class=\"docClass\">stopPreview</a>(), or triggering still\n image capture with android.hardware.Camera.PictureCallback, android.hardware.Camera.PictureCallback), will not change the\n the focus position. Applications must call cancelAutoFocus to reset the\n focus.</p></p>\n\n<p> <p>If autofocus is successful, consider using\n android.media.MediaActionSound to properly play back an autofocus\n success sound to the user.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cb</span> : Object {Camera.AutoFocusCallback}<div class='sub-desc'><p>the callback to run</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if starting autofocus fails; usually this would\n    be because of a hardware or other low-level error, or because\n    release() has been called on this Camera instance.\n@see <a href=\"#!/api/android.hardware.Camera-method-cancelAutoFocus\" rel=\"android.hardware.Camera-method-cancelAutoFocus\" class=\"docClass\">cancelAutoFocus</a>()\n@see <a href=\"#!/api/android.hardware.Camera.Parameters-method-setAutoExposureLock\" rel=\"android.hardware.Camera.Parameters-method-setAutoExposureLock\" class=\"docClass\">android.hardware.Camera.Parameters.setAutoExposureLock</a>(boolean)\n@see <a href=\"#!/api/android.hardware.Camera.Parameters-method-setAutoWhiteBalanceLock\" rel=\"android.hardware.Camera.Parameters-method-setAutoWhiteBalanceLock\" class=\"docClass\">android.hardware.Camera.Parameters.setAutoWhiteBalanceLock</a>(boolean)\n@see android.media.MediaActionSound</p>\n</div></li></ul></div></div></div><div id='method-cancelAutoFocus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-cancelAutoFocus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-cancelAutoFocus' class='name expandable'>cancelAutoFocus</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancels any auto-focus function in progress. ...</div><div class='long'><p>Cancels any auto-focus function in progress.\n Whether or not auto-focus is currently in progress,\n this function will return the focus position to the default.\n If the camera does not support auto-focus, this is a no-op.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if canceling autofocus fails; usually this would\n    be because of a hardware or other low-level error, or because\n    release() has been called on this Camera instance.\n@see <a href=\"#!/api/android.hardware.Camera-method-autoFocus\" rel=\"android.hardware.Camera-method-autoFocus\" class=\"docClass\">autoFocus</a>(Camera.AutoFocusCallback)</p>\n</div></li></ul></div></div></div><div id='method-enableShutterSound' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-enableShutterSound' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-enableShutterSound' class='name expandable'>enableShutterSound</a>( <span class='pre'>enabled</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable or disable the default shutter sound when taking a picture. ...</div><div class='long'><p>Enable or disable the default shutter sound when taking a picture.</p>\n\n\n<p> <p>By default, the camera plays the system-defined camera shutter sound\n when <a href=\"#!/api/android.hardware.Camera-method-takePicture\" rel=\"android.hardware.Camera-method-takePicture\" class=\"docClass\">takePicture</a> is called. Using this method, the shutter sound\n can be disabled. It is strongly recommended that an alternative shutter\n sound is played in the <a href=\"#!/api/android.hardware.Camera.ShutterCallback\" rel=\"android.hardware.Camera.ShutterCallback\" class=\"docClass\">android.hardware.Camera.ShutterCallback</a> when the system shutter\n sound is disabled.</p></p>\n\n<p> <p>Note that devices may not always allow disabling the camera shutter\n sound. If the shutter sound state cannot be set to the desired value,\n this method will return false. <a href=\"#!/api/android.hardware.Camera.CameraInfo-property-canDisableShutterSound\" rel=\"android.hardware.Camera.CameraInfo-property-canDisableShutterSound\" class=\"docClass\">android.hardware.Camera.CameraInfo.canDisableShutterSound</a>\n can be used to determine whether the device will allow the shutter sound\n to be disabled.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>whether the camera should play the system shutter sound\n                when <a href=\"#!/api/android.hardware.Camera-method-takePicture\" rel=\"android.hardware.Camera-method-takePicture\" class=\"docClass\">takePicture</a> is called.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the shutter sound state was successfully\n         changed. {@code false} if the shutter sound state could not be\n         changed. {@code true} is also returned if shutter sound playback\n         is already set to the requested state.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if the call fails; usually this would be because\n    of a hardware or other low-level error, or because release() has been\n    called on this Camera instance.\n@see <a href=\"#!/api/android.hardware.Camera-method-takePicture\" rel=\"android.hardware.Camera-method-takePicture\" class=\"docClass\">takePicture</a>\n@see CameraInfo#canDisableShutterSound\n@see ShutterCallback</p>\n</div></li></ul></div></div></div><div id='method-getCameraInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-getCameraInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-getCameraInfo' class='name expandable'>getCameraInfo</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the information about a particular camera. ...</div><div class='long'><p>Returns the information about a particular camera.\n If <a href=\"#!/api/android.hardware.Camera-method-getNumberOfCameras\" rel=\"android.hardware.Camera-method-getNumberOfCameras\" class=\"docClass\">getNumberOfCameras</a>() returns N, the valid id is 0 to N-1.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if an invalid ID is provided, or if there is an\n    error retrieving the information (generally due to a hardware or other\n    low-level failure).</p>\n</div></li></ul></div></div></div><div id='method-getNumberOfCameras' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-getNumberOfCameras' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-getNumberOfCameras' class='name expandable'>getNumberOfCameras</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of physical cameras available on this device. ...</div><div class='long'><p>Returns the number of physical cameras available on this device.\n The return value of this method might change dynamically if the device\n supports external cameras and an external camera is connected or\n disconnected.</p>\n\n<p> If there is a\n logical multi-camera in the system, to maintain app backward compatibility, this method will\n only expose one camera per facing for all logical camera and physical camera groups.\n Use camera2 API to see all cameras.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>total number of accessible camera devices, or 0 if there are no\n   cameras or an error was encountered enumerating them.</p>\n</div></li></ul></div></div></div><div id='method-getParameters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-getParameters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-getParameters' class='name expandable'>getParameters</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current settings for this Camera service. ...</div><div class='long'><p>Returns the current settings for this Camera service.\n If modifications are made to the returned Parameters, they must be passed\n to setParameters(Camera.Parameters) to take effect.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if reading parameters fails; usually this would\n    be because of a hardware or other low-level error, or because\n    release() has been called on this Camera instance.\n@see <a href=\"#!/api/android.hardware.Camera-method-setParameters\" rel=\"android.hardware.Camera-method-setParameters\" class=\"docClass\">setParameters</a>(Camera.Parameters)</p>\n</div></li></ul></div></div></div><div id='method-lock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-lock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-lock' class='name expandable'>lock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Re-locks the camera to prevent other processes from accessing it. ...</div><div class='long'><p>Re-locks the camera to prevent other processes from accessing it.\n Camera objects are locked by default unless <a href=\"#!/api/android.hardware.Camera-method-unlock\" rel=\"android.hardware.Camera-method-unlock\" class=\"docClass\">unlock</a>() is\n called.  Normally <a href=\"#!/api/android.hardware.Camera-method-reconnect\" rel=\"android.hardware.Camera-method-reconnect\" class=\"docClass\">reconnect</a>() is used instead.</p>\n\n<p> <p>Since API level 14, camera is automatically locked for applications in\n android.media.MediaRecorder.start(). Applications can use the\n camera (ex: zoom) after recording starts. There is no need to call this\n after recording starts or stops.</p>\n\n<p> <p>If you are not recording video, you probably do not need this method.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if the camera cannot be re-locked (for\n     example, if the camera is still in use by another process).</p>\n</div></li></ul></div></div></div><div id='method-open' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-open' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-open' class='name expandable'>open</a>( <span class='pre'></span> ) : Object {android.hardware.Camera}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new Camera object to access the first back-facing camera on the\n device. ...</div><div class='long'><p>Creates a new Camera object to access the first back-facing camera on the\n device. If the device does not have a back-facing camera, this returns\n null. Otherwise acts like the <a href=\"#!/api/android.hardware.Camera-method-open\" rel=\"android.hardware.Camera-method-open\" class=\"docClass\">open</a>(int) call.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.hardware.Camera}</span><div class='sub-desc'><p>a new Camera object for the first back-facing camera, or null if there is no\n  backfacing camera\n@see <a href=\"#!/api/android.hardware.Camera-method-open\" rel=\"android.hardware.Camera-method-open\" class=\"docClass\">open</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-reconnect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-reconnect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-reconnect' class='name expandable'>reconnect</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reconnects to the camera service after another process used it. ...</div><div class='long'><p>Reconnects to the camera service after another process used it.\n After <a href=\"#!/api/android.hardware.Camera-method-unlock\" rel=\"android.hardware.Camera-method-unlock\" class=\"docClass\">unlock</a>() is called, another process may use the\n camera; when the process is done, you must reconnect to the camera,\n which will re-acquire the lock and allow you to continue using the\n camera.</p>\n\n<p> <p>Since API level 14, camera is automatically locked for applications in\n android.media.MediaRecorder.start(). Applications can use the\n camera (ex: zoom) after recording starts. There is no need to call this\n after recording starts or stops.</p>\n\n<p> <p>If you are not recording video, you probably do not need this method.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if a connection cannot be re-established (for\n     example, if the camera is still in use by another process).</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if release() has been called on this Camera\n     instance.</p>\n</div></li></ul></div></div></div><div id='method-release' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-release' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-release' class='name expandable'>release</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Disconnects and releases the Camera object resources. ...</div><div class='long'><p>Disconnects and releases the Camera object resources.</p>\n\n<p> <p>You must call this as soon as you're done with the Camera object.</p></p>\n</div></div></div><div id='method-setAutoFocusMoveCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setAutoFocusMoveCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setAutoFocusMoveCallback' class='name expandable'>setAutoFocusMoveCallback</a>( <span class='pre'>cb</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets camera auto-focus move callback. ...</div><div class='long'><p>Sets camera auto-focus move callback.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cb</span> : Object {Camera.AutoFocusMoveCallback}<div class='sub-desc'><p>the callback to run</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if enabling the focus move callback fails;\n    usually this would be because of a hardware or other low-level error,\n    or because release() has been called on this Camera instance.</p>\n</div></li></ul></div></div></div><div id='method-setDisplayOrientation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setDisplayOrientation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setDisplayOrientation' class='name expandable'>setDisplayOrientation</a>( <span class='pre'>degrees</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the clockwise rotation of preview display in degrees. ...</div><div class='long'><p>Set the clockwise rotation of preview display in degrees. This affects\n the preview frames and the picture displayed after snapshot. This method\n is useful for portrait mode applications. Note that preview display of\n front-facing cameras is flipped horizontally before the rotation, that\n is, the image is reflected along the central vertical axis of the camera\n sensor. So the users can see themselves as looking into a mirror.</p>\n\n<p> <p>This does not affect the order of byte array passed in <a href=\"#!/api/android.hardware.Camera.PreviewCallback-method-onPreviewFrame\" rel=\"android.hardware.Camera.PreviewCallback-method-onPreviewFrame\" class=\"docClass\">android.hardware.Camera.PreviewCallback.onPreviewFrame</a>, JPEG pictures, or recorded videos. This\n method is not allowed to be called during preview.</p>\n\n<p> <p>If you want to make the camera image show in the same orientation as\n the display, you can use the following code.</p>\n\n<pre> public static void setCameraDisplayOrientation(Activity activity,\n         int cameraId, <a href=\"#!/api/android.hardware.Camera\" rel=\"android.hardware.Camera\" class=\"docClass\">android.hardware.Camera</a> camera) {\n     <a href=\"#!/api/android.hardware.Camera.CameraInfo\" rel=\"android.hardware.Camera.CameraInfo\" class=\"docClass\">android.hardware.Camera.CameraInfo</a> info =\n             new <a href=\"#!/api/android.hardware.Camera.CameraInfo\" rel=\"android.hardware.Camera.CameraInfo\" class=\"docClass\">android.hardware.Camera.CameraInfo</a>();\n     <a href=\"#!/api/android.hardware.Camera-method-getCameraInfo\" rel=\"android.hardware.Camera-method-getCameraInfo\" class=\"docClass\">android.hardware.Camera.getCameraInfo</a>(cameraId, info);\n     int rotation = activity.getWindowManager().getDefaultDisplay()\n             .getRotation();\n     int degrees = 0;\n     switch (rotation) {\n         case Surface.ROTATION_0: degrees = 0; break;\n         case Surface.ROTATION_90: degrees = 90; break;\n         case Surface.ROTATION_180: degrees = 180; break;\n         case Surface.ROTATION_270: degrees = 270; break;\n     }\n\n     int result;\n     if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {\n         result = (info.orientation + degrees) % 360;\n         result = (360 - result) % 360;  // compensate the mirror\n     } else {  // back-facing\n         result = (info.orientation - degrees + 360) % 360;\n     }\n     camera.setDisplayOrientation(result);\n }\n </pre>\n\n\n<p> <p>Starting from API level 14, this method can be called when preview is\n active.</p>\n\n<p> <p><b>Note: </b>Before API level 24, the default value for orientation is 0. Starting in\n API level 24, the default orientation will be such that applications in forced-landscape mode\n will have correct preview orientation, which may be either a default of 0 or\n 180. Applications that operate in portrait mode or allow for changing orientation must still\n call this method after each orientation change to ensure correct preview display in all\n cases.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>degrees</span> : Number<div class='sub-desc'><p>the angle that the picture will be rotated clockwise.\n                Valid values are 0, 90, 180, and 270.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if setting orientation fails; usually this would\n    be because of a hardware or other low-level error, or because\n    release() has been called on this Camera instance.\n@see <a href=\"#!/api/android.hardware.Camera-method-setPreviewDisplay\" rel=\"android.hardware.Camera-method-setPreviewDisplay\" class=\"docClass\">setPreviewDisplay</a>(SurfaceHolder)</p>\n</div></li></ul></div></div></div><div id='method-setErrorCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setErrorCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setErrorCallback' class='name expandable'>setErrorCallback</a>( <span class='pre'>cb</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers a callback to be invoked when an error occurs. ...</div><div class='long'><p>Registers a callback to be invoked when an error occurs.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cb</span> : Object {Camera.ErrorCallback}<div class='sub-desc'><p>The callback to run</p>\n</div></li></ul></div></div></div><div id='method-setFaceDetectionListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setFaceDetectionListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setFaceDetectionListener' class='name expandable'>setFaceDetectionListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers a listener to be notified about the faces detected in the\n preview frame. ...</div><div class='long'><p>Registers a listener to be notified about the faces detected in the\n preview frame.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {Camera.FaceDetectionListener}<div class='sub-desc'><p>the listener to notify\n@see <a href=\"#!/api/android.hardware.Camera-method-startFaceDetection\" rel=\"android.hardware.Camera-method-startFaceDetection\" class=\"docClass\">startFaceDetection</a>()</p>\n</div></li></ul></div></div></div><div id='method-setOneShotPreviewCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setOneShotPreviewCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setOneShotPreviewCallback' class='name expandable'>setOneShotPreviewCallback</a>( <span class='pre'>cb</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Installs a callback to be invoked for the next preview frame in\n addition to displaying it on the screen. ...</div><div class='long'><p>Installs a callback to be invoked for the next preview frame in\n addition to displaying it on the screen.  After one invocation, the\n callback is cleared. This method can be called any time, even when\n preview is live.  Any other preview callbacks are overridden.</p>\n\n\n<p> <p>If you are using the preview data to create video or still images,\n strongly consider using android.media.MediaActionSound to\n properly indicate image capture or recording start/stop to the user.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cb</span> : Object {Camera.PreviewCallback}<div class='sub-desc'><p>a callback object that receives a copy of the next preview frame,\n     or null to stop receiving callbacks.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if release() has been called on this Camera\n     instance.\n@see android.media.MediaActionSound</p>\n</div></li></ul></div></div></div><div id='method-setParameters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setParameters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setParameters' class='name expandable'>setParameters</a>( <span class='pre'>params</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Changes the settings for this Camera service. ...</div><div class='long'><p>Changes the settings for this Camera service.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {Camera.Parameters}<div class='sub-desc'><p>the Parameters to use for this Camera service</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if any parameter is invalid or not supported.\n@see <a href=\"#!/api/android.hardware.Camera-method-getParameters\" rel=\"android.hardware.Camera-method-getParameters\" class=\"docClass\">getParameters</a>()</p>\n</div></li></ul></div></div></div><div id='method-setPreviewCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setPreviewCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setPreviewCallback' class='name expandable'>setPreviewCallback</a>( <span class='pre'>cb</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Installs a callback to be invoked for every preview frame in addition\n to displaying them on the screen. ...</div><div class='long'><p>Installs a callback to be invoked for every preview frame in addition\n to displaying them on the screen.  The callback will be repeatedly called\n for as long as preview is active.  This method can be called at any time,\n even while preview is live.  Any other preview callbacks are\n overridden.</p>\n\n\n<p> <p>If you are using the preview data to create video or still images,\n strongly consider using android.media.MediaActionSound to\n properly indicate image capture or recording start/stop to the user.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cb</span> : Object {Camera.PreviewCallback}<div class='sub-desc'><p>a callback object that receives a copy of each preview frame,\n     or null to stop receiving callbacks.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if release() has been called on this Camera\n     instance.\n@see android.media.MediaActionSound</p>\n</div></li></ul></div></div></div><div id='method-setPreviewCallbackWithBuffer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setPreviewCallbackWithBuffer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setPreviewCallbackWithBuffer' class='name expandable'>setPreviewCallbackWithBuffer</a>( <span class='pre'>cb</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Installs a callback to be invoked for every preview frame, using\n buffers supplied with addCallbackBuffer(byte[]), in...</div><div class='long'><p>Installs a callback to be invoked for every preview frame, using\n buffers supplied with addCallbackBuffer(byte[]), in addition to\n displaying them on the screen.  The callback will be repeatedly called\n for as long as preview is active and buffers are available.  Any other\n preview callbacks are overridden.</p>\n\n\n<p> <p>The purpose of this method is to improve preview efficiency and frame\n rate by allowing preview frame memory reuse.  You must call\n addCallbackBuffer(byte[]) at some point -- before or after\n calling this method -- or no callbacks will received.</p></p>\n\n<p> <p>The buffer queue will be cleared if this method is called with a null\n callback, setPreviewCallback(Camera.PreviewCallback) is called,\n or setOneShotPreviewCallback(Camera.PreviewCallback) is\n called.</p></p>\n\n<p> <p>If you are using the preview data to create video or still images,\n strongly consider using android.media.MediaActionSound to\n properly indicate image capture or recording start/stop to the user.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cb</span> : Object {Camera.PreviewCallback}<div class='sub-desc'><p>a callback object that receives a copy of the preview frame,\n     or null to stop receiving callbacks and clear the buffer queue.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if release() has been called on this Camera\n     instance.\n@see <a href=\"#!/api/android.hardware.Camera-method-addCallbackBuffer\" rel=\"android.hardware.Camera-method-addCallbackBuffer\" class=\"docClass\">addCallbackBuffer</a>(byte[])\n@see android.media.MediaActionSound</p>\n</div></li></ul></div></div></div><div id='method-setPreviewDisplay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setPreviewDisplay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setPreviewDisplay' class='name expandable'>setPreviewDisplay</a>( <span class='pre'>holder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the Surface to be used for live preview. ...</div><div class='long'><p>Sets the Surface to be used for live preview.\n Either a surface or surface texture is necessary for preview, and\n preview is necessary to take pictures.  The same surface can be re-set\n without harm.  Setting a preview surface will un-set any preview surface\n texture that was set via <a href=\"#!/api/android.hardware.Camera-method-setPreviewTexture\" rel=\"android.hardware.Camera-method-setPreviewTexture\" class=\"docClass\">setPreviewTexture</a>.</p>\n\n<p> <p>The SurfaceHolder must already contain a surface when this\n method is called.  If you are using android.view.SurfaceView,\n you will need to register a SurfaceHolder.Callback with\n SurfaceHolder.addCallback(SurfaceHolder.Callback) and wait for\n SurfaceHolder.Callback.surfaceCreated(SurfaceHolder) before\n calling setPreviewDisplay() or starting preview.</p>\n\n<p> <p>This method must be called before <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>().  The\n one exception is that if the preview surface is not set (or set to null)\n before startPreview() is called, then this method may be called once\n with a non-null parameter to set the preview surface.  (This allows\n camera setup and surface creation to happen in parallel, saving time.)\n The preview surface may not otherwise change while preview is running.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>holder</span> : Object {SurfaceHolder}<div class='sub-desc'><p>containing the Surface on which to place the preview,\n     or null to remove the preview surface</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if the method fails (for example, if the surface\n     is unavailable or unsuitable).</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if release() has been called on this Camera\n    instance.</p>\n</div></li></ul></div></div></div><div id='method-setPreviewTexture' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setPreviewTexture' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setPreviewTexture' class='name expandable'>setPreviewTexture</a>( <span class='pre'>surfaceTexture, surfaceTexture</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the SurfaceTexture to be used for live preview. ...</div><div class='long'><p>Sets the SurfaceTexture to be used for live preview.\n Either a surface or surface texture is necessary for preview, and\n preview is necessary to take pictures.  The same surface texture can be\n re-set without harm.  Setting a preview surface texture will un-set any\n preview surface that was set via <a href=\"#!/api/android.hardware.Camera-method-setPreviewDisplay\" rel=\"android.hardware.Camera-method-setPreviewDisplay\" class=\"docClass\">setPreviewDisplay</a>.</p>\n\n<p> <p>This method must be called before <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>().  The\n one exception is that if the preview surface texture is not set (or set\n to null) before startPreview() is called, then this method may be called\n once with a non-null parameter to set the preview surface.  (This allows\n camera setup and surface creation to happen in parallel, saving time.)\n The preview surface texture may not otherwise change while preview is\n running.</p>\n\n<p> <p>The timestamps provided by SurfaceTexture.getTimestamp() for a\n SurfaceTexture set as the preview texture have an unspecified zero point,\n and cannot be directly compared between different cameras or different\n instances of the same camera, or across multiple runs of the same\n program.</p>\n\n<p> <p>If you are using the preview data to create video or still images,\n strongly consider using android.media.MediaActionSound to\n properly indicate image capture or recording start/stop to the user.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>surfaceTexture</span> : Object {SurfaceTexture}<div class='sub-desc'><p>the SurfaceTexture to which the preview\n     images are to be sent or null to remove the current preview surface\n     texture\n@see android.graphics.SurfaceTexture\n@see android.view.TextureView</p>\n</div></li><li><span class='pre'>surfaceTexture</span> : Object<div class='sub-desc'><p>the SurfaceTexture to which the preview\n     images are to be sent or null to remove the current preview surface\n     texture</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if the method fails (for example, if the surface\n     texture is unavailable or unsuitable).</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if release() has been called on this Camera\n    instance.</p>\n</div></li></ul></div></div></div><div id='method-setZoomChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-setZoomChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-setZoomChangeListener' class='name expandable'>setZoomChangeListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers a listener to be notified when the zoom value is updated by the\n camera driver during smooth zoom. ...</div><div class='long'><p>Registers a listener to be notified when the zoom value is updated by the\n camera driver during smooth zoom.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {Camera.OnZoomChangeListener}<div class='sub-desc'><p>the listener to notify\n@see <a href=\"#!/api/android.hardware.Camera-method-startSmoothZoom\" rel=\"android.hardware.Camera-method-startSmoothZoom\" class=\"docClass\">startSmoothZoom</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-startFaceDetection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-startFaceDetection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-startFaceDetection' class='name expandable'>startFaceDetection</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts the face detection. ...</div><div class='long'><p>Starts the face detection. This should be called after preview is started.\n The camera will notify <a href=\"#!/api/android.hardware.Camera.FaceDetectionListener\" rel=\"android.hardware.Camera.FaceDetectionListener\" class=\"docClass\">android.hardware.Camera.FaceDetectionListener</a> of the detected\n faces in the preview frame. The detected faces may be the same as the\n previous ones. Applications should call <a href=\"#!/api/android.hardware.Camera-method-stopFaceDetection\" rel=\"android.hardware.Camera-method-stopFaceDetection\" class=\"docClass\">stopFaceDetection</a> to\n stop the face detection. This method is supported if android.hardware.Camera.Parameters.getMaxNumDetectedFaces() returns a number larger than 0.\n If the face detection has started, apps should not call this again.</p>\n\n<p> <p>When the face detection is running, android.hardware.Camera.Parameters.setWhiteBalance(String),\n android.hardware.Camera.Parameters.setFocusAreas(List), and android.hardware.Camera.Parameters.setMeteringAreas(List)\n have no effect. The camera uses the detected faces to do auto-white balance,\n auto exposure, and autofocus.</p>\n\n<p> <p>If the apps call <a href=\"#!/api/android.hardware.Camera-method-autoFocus\" rel=\"android.hardware.Camera-method-autoFocus\" class=\"docClass\">autoFocus</a>(AutoFocusCallback), the camera\n will stop sending face callbacks. The last face callback indicates the\n areas used to do autofocus. After focus completes, face detection will\n resume sending face callbacks. If the apps call <a href=\"#!/api/android.hardware.Camera-method-cancelAutoFocus\" rel=\"android.hardware.Camera-method-cancelAutoFocus\" class=\"docClass\">cancelAutoFocus</a>(), the face callbacks will also resume.</p></p>\n\n<p> <p>After calling android.hardware.Camera.PictureCallback,\n android.hardware.Camera.PictureCallback) or <a href=\"#!/api/android.hardware.Camera-method-stopPreview\" rel=\"android.hardware.Camera-method-stopPreview\" class=\"docClass\">stopPreview</a>(), and then resuming\n preview with <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>(), the apps should call this method\n again to resume face detection.</p></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the face detection is unsupported.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if the method fails or the face detection is\n         already running.\n@see FaceDetectionListener\n@see <a href=\"#!/api/android.hardware.Camera-method-stopFaceDetection\" rel=\"android.hardware.Camera-method-stopFaceDetection\" class=\"docClass\">stopFaceDetection</a>()\n@see Parameters#getMaxNumDetectedFaces()</p>\n</div></li></ul></div></div></div><div id='method-startPreview' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-startPreview' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-startPreview' class='name expandable'>startPreview</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts capturing and drawing preview frames to the screen. ...</div><div class='long'><p>Starts capturing and drawing preview frames to the screen.\n Preview will not actually start until a surface is supplied\n with <a href=\"#!/api/android.hardware.Camera-method-setPreviewDisplay\" rel=\"android.hardware.Camera-method-setPreviewDisplay\" class=\"docClass\">setPreviewDisplay</a>(SurfaceHolder) or\n <a href=\"#!/api/android.hardware.Camera-method-setPreviewTexture\" rel=\"android.hardware.Camera-method-setPreviewTexture\" class=\"docClass\">setPreviewTexture</a>(SurfaceTexture).</p>\n\n<p> <p>If setPreviewCallback(Camera.PreviewCallback),\n setOneShotPreviewCallback(Camera.PreviewCallback), or\n setPreviewCallbackWithBuffer(Camera.PreviewCallback) were\n called, android.hardware.Camera)\n will be called when preview data becomes available.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if starting preview fails; usually this would be\n    because of a hardware or other low-level error, or because release()\n    has been called on this Camera instance. The QCIF (176x144) exception\n    mentioned in setPreviewSize and\n    setPictureSize can also cause this\n    exception be thrown.</p>\n</div></li></ul></div></div></div><div id='method-startSmoothZoom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-startSmoothZoom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-startSmoothZoom' class='name expandable'>startSmoothZoom</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Zooms to the requested value smoothly. ...</div><div class='long'><p>Zooms to the requested value smoothly. The driver will notify <a href=\"#!/api/android.hardware.Camera.OnZoomChangeListener\" rel=\"android.hardware.Camera.OnZoomChangeListener\" class=\"docClass\">android.hardware.Camera.OnZoomChangeListener</a> of the zoom value and whether zoom is stopped at\n the time. For example, suppose the current zoom is 0 and startSmoothZoom\n is called with value 3. The\n boolean, android.hardware.Camera)\n method will be called three times with zoom values 1, 2, and 3.\n Applications can call <a href=\"#!/api/android.hardware.Camera-method-stopSmoothZoom\" rel=\"android.hardware.Camera-method-stopSmoothZoom\" class=\"docClass\">stopSmoothZoom</a> to stop the zoom earlier.\n Applications should not call startSmoothZoom again or change the zoom\n value before zoom stops. If the supplied zoom value equals to the current\n zoom value, no zoom callback will be generated. This method is supported\n if <a href=\"#!/api/android.hardware.Camera.Parameters-method-isSmoothZoomSupported\" rel=\"android.hardware.Camera.Parameters-method-isSmoothZoomSupported\" class=\"docClass\">android.hardware.Camera.Parameters.isSmoothZoomSupported</a>\n returns true.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Number<div class='sub-desc'><p>zoom value. The valid range is 0 to <a href=\"#!/api/android.hardware.Camera.Parameters-method-getMaxZoom\" rel=\"android.hardware.Camera.Parameters-method-getMaxZoom\" class=\"docClass\">android.hardware.Camera.Parameters.getMaxZoom</a>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the zoom value is invalid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if the method fails.\n@see <a href=\"#!/api/android.hardware.Camera-method-setZoomChangeListener\" rel=\"android.hardware.Camera-method-setZoomChangeListener\" class=\"docClass\">setZoomChangeListener</a>(OnZoomChangeListener)</p>\n</div></li></ul></div></div></div><div id='method-stopFaceDetection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-stopFaceDetection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-stopFaceDetection' class='name expandable'>stopFaceDetection</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stops the face detection. ...</div><div class='long'><p>Stops the face detection.\n@see <a href=\"#!/api/android.hardware.Camera-method-startFaceDetection\" rel=\"android.hardware.Camera-method-startFaceDetection\" class=\"docClass\">startFaceDetection</a>()</p>\n</div></div></div><div id='method-stopPreview' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-stopPreview' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-stopPreview' class='name expandable'>stopPreview</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stops capturing and drawing preview frames to the surface, and\n resets the camera for a future call to startPreview(). ...</div><div class='long'><p>Stops capturing and drawing preview frames to the surface, and\n resets the camera for a future call to <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>().</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if stopping preview fails; usually this would be\n    because of a hardware or other low-level error, or because release()\n    has been called on this Camera instance.</p>\n</div></li></ul></div></div></div><div id='method-stopSmoothZoom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-stopSmoothZoom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-stopSmoothZoom' class='name expandable'>stopSmoothZoom</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stops the smooth zoom. ...</div><div class='long'><p>Stops the smooth zoom. Applications should wait for the <a href=\"#!/api/android.hardware.Camera.OnZoomChangeListener\" rel=\"android.hardware.Camera.OnZoomChangeListener\" class=\"docClass\">android.hardware.Camera.OnZoomChangeListener</a> to know when the zoom is actually stopped. This\n method is supported if <a href=\"#!/api/android.hardware.Camera.Parameters-method-isSmoothZoomSupported\" rel=\"android.hardware.Camera.Parameters-method-isSmoothZoomSupported\" class=\"docClass\">android.hardware.Camera.Parameters.isSmoothZoomSupported</a> is true.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if the method fails.</p>\n</div></li></ul></div></div></div><div id='method-takePicture' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-takePicture' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-takePicture' class='name expandable'>takePicture</a>( <span class='pre'>shutter, raw, postview, jpeg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Triggers an asynchronous image capture. ...</div><div class='long'><p>Triggers an asynchronous image capture. The camera service will initiate\n a series of callbacks to the application as the image capture progresses.\n The shutter callback occurs after the image is captured. This can be used\n to trigger a sound to let the user know that image has been captured. The\n raw callback occurs when the raw image data is available (NOTE: the data\n will be null if there is no raw image callback buffer available or the\n raw image callback buffer is not large enough to hold the raw image).\n The postview callback occurs when a scaled, fully processed postview\n image is available (NOTE: not all hardware supports this). The jpeg\n callback occurs when the compressed image is available. If the\n application does not need a particular callback, a null can be passed\n instead of a callback method.</p>\n\n<p> <p>This method is only valid when preview is active (after\n <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>()).  Preview will be stopped after the image is\n taken; callers must call <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>() again if they want to\n re-start preview or take more pictures. This should not be called between\n android.media.MediaRecorder.start() and\n android.media.MediaRecorder.stop().</p>\n\n<p> <p>After calling this method, you must not call <a href=\"#!/api/android.hardware.Camera-method-startPreview\" rel=\"android.hardware.Camera-method-startPreview\" class=\"docClass\">startPreview</a>()\n or take another picture until the JPEG callback has returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>shutter</span> : Object {Camera.ShutterCallback}<div class='sub-desc'><p>the callback for image capture moment, or null</p>\n</div></li><li><span class='pre'>raw</span> : Object {Camera.PictureCallback}<div class='sub-desc'><p>the callback for raw (uncompressed) image data, or null</p>\n</div></li><li><span class='pre'>postview</span> : Object {Camera.PictureCallback}<div class='sub-desc'><p>callback with postview image data, may be null</p>\n</div></li><li><span class='pre'>jpeg</span> : Object {Camera.PictureCallback}<div class='sub-desc'><p>the callback for JPEG image data, or null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if starting picture capture fails; usually this\n    would be because of a hardware or other low-level error, or because\n    release() has been called on this Camera instance.</p>\n</div></li></ul></div></div></div><div id='method-unlock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.Camera'>android.hardware.Camera</span><br/><a href='source/Camera.html#android-hardware-Camera-method-unlock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.Camera-method-unlock' class='name expandable'>unlock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Unlocks the camera to allow another process to access it. ...</div><div class='long'><p>Unlocks the camera to allow another process to access it.\n Normally, the camera is locked to the process with an active Camera\n object until <a href=\"#!/api/android.hardware.Camera-method-release\" rel=\"android.hardware.Camera-method-release\" class=\"docClass\">release</a>() is called.  To allow rapid handoff\n between processes, you can call this method to release the camera\n temporarily for another process to use; once the other process is done\n you can call <a href=\"#!/api/android.hardware.Camera-method-reconnect\" rel=\"android.hardware.Camera-method-reconnect\" class=\"docClass\">reconnect</a>() to reclaim the camera.</p>\n\n<p> <p>This must be done before calling\n android.media.MediaRecorder.setCamera(Camera). This cannot be\n called after recording starts.</p>\n\n<p> <p>If you are not recording video, you probably do not need this method.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if the camera cannot be unlocked.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"deprecated":{"text":"<p>We recommend using the new android.hardware.camera2 API for new\n             applications.</p>\n"}}});