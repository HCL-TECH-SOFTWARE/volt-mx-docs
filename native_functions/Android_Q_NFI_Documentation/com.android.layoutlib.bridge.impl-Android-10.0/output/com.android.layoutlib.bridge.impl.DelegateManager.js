Ext.data.JsonP.com_android_layoutlib_bridge_impl_DelegateManager({"tagname":"class","name":"com.android.layoutlib.bridge.impl.DelegateManager","autodetected":{},"files":[{"filename":"DelegateManager.js","href":"DelegateManager.html#com-android-layoutlib-bridge-impl-DelegateManager"}],"extends":"java.lang.Object","params":[{"tagname":"params","doc":"<p><T> the delegate class to manage</T></p>\n"}],"members":[{"name":"addNewDelegate","tagname":"method","owner":"com.android.layoutlib.bridge.impl.DelegateManager","id":"method-addNewDelegate","meta":{}},{"name":"dump","tagname":"method","owner":"com.android.layoutlib.bridge.impl.DelegateManager","id":"method-dump","meta":{}},{"name":"getDelegate","tagname":"method","owner":"com.android.layoutlib.bridge.impl.DelegateManager","id":"method-getDelegate","meta":{}},{"name":"markAsNativeAllocation","tagname":"method","owner":"com.android.layoutlib.bridge.impl.DelegateManager","id":"method-markAsNativeAllocation","meta":{}},{"name":"removeJavaReferenceFor","tagname":"method","owner":"com.android.layoutlib.bridge.impl.DelegateManager","id":"method-removeJavaReferenceFor","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.layoutlib.bridge.impl.DelegateManager","short_doc":"Manages native delegates. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.layoutlib.bridge.impl.DelegateManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/DelegateManager.html#com-android-layoutlib-bridge-impl-DelegateManager' target='_blank'>DelegateManager.js</a></div></pre><div class='doc-contents'><p>Manages native delegates.</p>\n\n<p> This is used in conjunction with layoublib_create: certain Android java classes are mere\n wrappers around a heavily native based implementation, and we need a way to run these classes\n in our Android Studio rendering framework without bringing all the native code from the Android\n platform.</p>\n\n<p> Thus we instruct layoutlib_create to modify the bytecode of these classes to replace their\n native methods by \"delegate calls\".</p>\n\n<p> For example, a native method android.graphics.Matrix.init(...) will actually become\n a call to android.graphics.Matrix_Delegate.init(...).</p>\n\n<p> The Android java classes that use native code uses an int (Java side) to reference native\n objects. This int is generally directly the pointer to the C structure counterpart.\n Typically a creation method will return such an int, and then this int will be passed later\n to a Java method to identify the C object to manipulate.</p>\n\n<p> Since we cannot use the Java object reference as the int directly, DelegateManager manages the\n int -> Delegate class link.</p>\n\n<p> Native methods usually always have the int as parameters. The first thing the delegate method\n will do is call <a href=\"#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-getDelegate\" rel=\"com.android.layoutlib.bridge.impl.DelegateManager-method-getDelegate\" class=\"docClass\">getDelegate</a>(long) to get the Java object matching the int.</p>\n\n<p> Typical native init methods are returning a new int back to the Java class, so\n <a href=\"#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-addNewDelegate\" rel=\"com.android.layoutlib.bridge.impl.DelegateManager-method-addNewDelegate\" class=\"docClass\">addNewDelegate</a>(Object) does the same.</p>\n\n<p> The JNI references are counted, so we do the same through a WeakReference. Because\n the Java object needs to count as a reference (even though it only holds an int), we use the\n following mechanism:</p>\n\n<ul>\n<li><p><a href=\"#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-addNewDelegate\" rel=\"com.android.layoutlib.bridge.impl.DelegateManager-method-addNewDelegate\" class=\"docClass\">addNewDelegate</a>(Object) and <a href=\"#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-removeJavaReferenceFor\" rel=\"com.android.layoutlib.bridge.impl.DelegateManager-method-removeJavaReferenceFor\" class=\"docClass\">removeJavaReferenceFor</a>(long) adds and removes\nthe delegate to/from a set. This set holds the reference and prevents the GC from reclaiming\nthe delegate.</p></li>\n<li><p><a href=\"#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-addNewDelegate\" rel=\"com.android.layoutlib.bridge.impl.DelegateManager-method-addNewDelegate\" class=\"docClass\">addNewDelegate</a>(Object) also adds the delegate to a SparseArray that holds a\nWeakReference to the delegate. This allows the delegate to be deleted automatically\nwhen nothing references it. This means that any class that holds a delegate (except for the\nJava main class) must not use the int but the Delegate class instead. The integers must\nonly be used in the API between the main Java class and the Delegate.</p></li>\n</ul>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> the delegate class to manage</T></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addNewDelegate' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.layoutlib.bridge.impl.DelegateManager'>com.android.layoutlib.bridge.impl.DelegateManager</span><br/><a href='source/DelegateManager.html#com-android-layoutlib-bridge-impl-DelegateManager-method-addNewDelegate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-addNewDelegate' class='name expandable'>addNewDelegate</a>( <span class='pre'>newDelegate</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds a delegate to the manager and returns the native int used to identify it. ...</div><div class='long'><p>Adds a delegate to the manager and returns the native int used to identify it.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newDelegate</span> : Object {Object}<div class='sub-desc'><p>the delegate to add</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a unique native int to identify the delegate</p>\n</div></li></ul></div></div></div><div id='method-dump' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.layoutlib.bridge.impl.DelegateManager'>com.android.layoutlib.bridge.impl.DelegateManager</span><br/><a href='source/DelegateManager.html#com-android-layoutlib-bridge-impl-DelegateManager-method-dump' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-dump' class='name expandable'>dump</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getDelegate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.layoutlib.bridge.impl.DelegateManager'>com.android.layoutlib.bridge.impl.DelegateManager</span><br/><a href='source/DelegateManager.html#com-android-layoutlib-bridge-impl-DelegateManager-method-getDelegate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-getDelegate' class='name expandable'>getDelegate</a>( <span class='pre'>native_object</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the delegate from the given native int. ...</div><div class='long'><p>Returns the delegate from the given native int.\n <p>\n If the int is zero, then this will always return null.\n <p>\n If the int is non zero and the delegate is not found, this will throw an assert.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>native_object</span> : Number<div class='sub-desc'><p>the native int.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the delegate or null if not found.</p>\n</div></li></ul></div></div></div><div id='method-markAsNativeAllocation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.layoutlib.bridge.impl.DelegateManager'>com.android.layoutlib.bridge.impl.DelegateManager</span><br/><a href='source/DelegateManager.html#com-android-layoutlib-bridge-impl-DelegateManager-method-markAsNativeAllocation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-markAsNativeAllocation' class='name expandable'>markAsNativeAllocation</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method marks the given native_object as a native allocation of the passed referent. ...</div><div class='long'><p>This method marks the given native_object as a native allocation of the passed referent.\n This means that the lifecycle of the native_object can now be attached to the referent and\n if the referent is disposed, we can safely dispose the delegate.\n This method is called by the NativeAllocationRegistry_Delegate and allows the\n DelegateManager to remove the strong reference to the delegate.</p>\n</div></div></div><div id='method-removeJavaReferenceFor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.layoutlib.bridge.impl.DelegateManager'>com.android.layoutlib.bridge.impl.DelegateManager</span><br/><a href='source/DelegateManager.html#com-android-layoutlib-bridge-impl-DelegateManager-method-removeJavaReferenceFor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.layoutlib.bridge.impl.DelegateManager-method-removeJavaReferenceFor' class='name expandable'>removeJavaReferenceFor</a>( <span class='pre'>native_object</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the main reference on the given delegate. ...</div><div class='long'><p>Removes the main reference on the given delegate.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>native_object</span> : Number<div class='sub-desc'><p>the native integer representing the delegate.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});