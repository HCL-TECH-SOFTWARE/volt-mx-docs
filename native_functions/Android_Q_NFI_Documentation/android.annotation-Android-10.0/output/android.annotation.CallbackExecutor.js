Ext.data.JsonP.android_annotation_CallbackExecutor({"tagname":"class","name":"android.annotation.CallbackExecutor","autodetected":{},"files":[{"filename":"CallbackExecutor.js","href":"CallbackExecutor.html#android-annotation-CallbackExecutor"}],"hide":true,"members":[],"alternateClassNames":[],"aliases":{},"id":"class-android.annotation.CallbackExecutor","short_doc":"implements java.lang.annotation.Annotation\n\n @paramDoc Callback and listener events are dispatched through this\n     ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/CallbackExecutor.html#android-annotation-CallbackExecutor' target='_blank'>CallbackExecutor.js</a></div></pre><div class='doc-contents'><p>implements java.lang.annotation.Annotation</p>\n\n<p> @paramDoc Callback and listener events are dispatched through this\n           Executor, providing an easy way to control which thread is\n           used. To dispatch events through the main thread of your\n           application, you can use Context.getMainExecutor(). To\n           dispatch events through a shared thread pool, you can use\n           AsyncTask.THREAD_POOL_EXECUTOR.</p>\n</div><div class='members'></div></div>","meta":{}});