Ext.data.JsonP.android_annotation_CheckResult({"tagname":"class","name":"android.annotation.CheckResult","autodetected":{},"files":[{"filename":"CheckResult.js","href":"CheckResult.html#android-annotation-CheckResult"}],"hide":true,"members":[{"name":"suggest","tagname":"method","owner":"android.annotation.CheckResult","id":"method-suggest","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.annotation.CheckResult","short_doc":"implements java.lang.annotation.Annotation\n\n Denotes that the annotated method returns a result that it typically is\n...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/CheckResult.html#android-annotation-CheckResult' target='_blank'>CheckResult.js</a></div></pre><div class='doc-contents'><p>implements java.lang.annotation.Annotation</p>\n\n<p> Denotes that the annotated method returns a result that it typically is\n an error to ignore. This is usually used for methods that have no side effect,\n so calling it without actually looking at the result usually means the developer\n has misunderstood what the method does.\n <p>\n Example:\n <pre>{@code\n  public @CheckResult String trim(String s) { return s.trim(); }\n  ...\n  s.trim(); // this is probably an error\n  s = s.trim(); // ok\n }</pre></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-suggest' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.annotation.CheckResult'>android.annotation.CheckResult</span><br/><a href='source/CheckResult.html#android-annotation-CheckResult-method-suggest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.annotation.CheckResult-method-suggest' class='name expandable'>suggest</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines the name of the suggested method to use instead, if applicable (using\n the same signature format as javadoc.)...</div><div class='long'><p>Defines the name of the suggested method to use instead, if applicable (using\n the same signature format as javadoc.) If there is more than one possibility,\n list them all separated by commas.\n <p>\n For example, ProcessBuilder has a method named {@code redirectErrorStream()}\n which sounds like it might redirect the error stream. It does not. It's just\n a getter which returns whether the process builder will redirect the error stream,\n and to actually set it, you must call {@code redirectErrorStream(boolean)}.\n In that case, the method should be defined like this:</p>\n\n<pre>  &#64;CheckResult(suggest=\"#redirectErrorStream(boolean)\")\n  public boolean redirectErrorStream() { ... }\n </pre>\n\n</div></div></div></div></div></div></div>","meta":{}});