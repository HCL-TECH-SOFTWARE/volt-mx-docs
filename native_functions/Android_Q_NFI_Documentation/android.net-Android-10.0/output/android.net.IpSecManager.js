Ext.data.JsonP.android_net_IpSecManager({"tagname":"class","name":"android.net.IpSecManager","autodetected":{},"files":[{"filename":"IpSecManager.js","href":"IpSecManager.html#android-net-IpSecManager"}],"extends":"java.lang.Object","members":[{"name":"DIRECTION_IN","tagname":"property","owner":"android.net.IpSecManager","id":"property-DIRECTION_IN","meta":{}},{"name":"DIRECTION_OUT","tagname":"property","owner":"android.net.IpSecManager","id":"property-DIRECTION_OUT","meta":{}},{"name":"allocateSecurityParameterIndex","tagname":"method","owner":"android.net.IpSecManager","id":"method-allocateSecurityParameterIndex","meta":{}},{"name":"applyTransportModeTransform","tagname":"method","owner":"android.net.IpSecManager","id":"method-applyTransportModeTransform","meta":{}},{"name":"openUdpEncapsulationSocket","tagname":"method","owner":"android.net.IpSecManager","id":"method-openUdpEncapsulationSocket","meta":{}},{"name":"removeTransportModeTransforms","tagname":"method","owner":"android.net.IpSecManager","id":"method-removeTransportModeTransforms","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.net.IpSecManager","short_doc":"This class contains methods for managing IPsec sessions. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.net.IpSecManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/IpSecManager.html#android-net-IpSecManager' target='_blank'>IpSecManager.js</a></div></pre><div class='doc-contents'><p>This class contains methods for managing IPsec sessions. Once configured, the kernel will apply\n confidentiality (encryption) and integrity (authentication) to IP traffic.</p>\n\n<p> <p>Note that not all aspects of IPsec are permitted by this API. Applications may create\n transport mode security associations and apply them to individual sockets. Applications looking\n to create a VPN should use <a href=\"#!/api/android.net.VpnService\" rel=\"android.net.VpnService\" class=\"docClass\">android.net.VpnService</a>.</p>\n\n<p> @see <a href=\"https://tools.ietf.org/html/rfc4301\">RFC 4301, Security Architecture for the\n     Internet Protocol</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DIRECTION_IN' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.IpSecManager'>android.net.IpSecManager</span><br/><a href='source/IpSecManager.html#android-net-IpSecManager-property-DIRECTION_IN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.IpSecManager-property-DIRECTION_IN' class='name expandable'>DIRECTION_IN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Used when applying a transform to direct traffic through an android.net.IpSecTransform\ntowards the host. ...</div><div class='long'><p>Used when applying a transform to direct traffic through an <a href=\"#!/api/android.net.IpSecTransform\" rel=\"android.net.IpSecTransform\" class=\"docClass\">android.net.IpSecTransform</a>\ntowards the host.</p>\n\n<p><p>See int, android.net.IpSecTransform).</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-DIRECTION_OUT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.IpSecManager'>android.net.IpSecManager</span><br/><a href='source/IpSecManager.html#android-net-IpSecManager-property-DIRECTION_OUT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.IpSecManager-property-DIRECTION_OUT' class='name expandable'>DIRECTION_OUT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Used when applying a transform to direct traffic through an android.net.IpSecTransform\naway from the host. ...</div><div class='long'><p>Used when applying a transform to direct traffic through an <a href=\"#!/api/android.net.IpSecTransform\" rel=\"android.net.IpSecTransform\" class=\"docClass\">android.net.IpSecTransform</a>\naway from the host.</p>\n\n<p><p>See int, android.net.IpSecTransform).</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-allocateSecurityParameterIndex' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.IpSecManager'>android.net.IpSecManager</span><br/><a href='source/IpSecManager.html#android-net-IpSecManager-method-allocateSecurityParameterIndex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.IpSecManager-method-allocateSecurityParameterIndex' class='name expandable'>allocateSecurityParameterIndex</a>( <span class='pre'>destinationAddress, requestedSpi</span> ) : Object {android.net.IpSecManager.SecurityParameterIndex}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reserve the requested SPI for traffic bound to or from the specified destination address. ...</div><div class='long'><p>Reserve the requested SPI for traffic bound to or from the specified destination address.</p>\n\n<p> <p>If successful, this SPI is guaranteed available until released by a call to android.net.IpSecManager.SecurityParameterIndex.close().</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>destinationAddress</span> : Object {InetAddress}<div class='sub-desc'><p>the destination address for traffic bearing the requested SPI.\n     For inbound traffic, the destination should be an address currently assigned on-device.</p>\n</div></li><li><span class='pre'>requestedSpi</span> : Number<div class='sub-desc'><p>the requested SPI. The range 1-255 is reserved and may not be used. See\n     RFC 4303 Section 2.1.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.IpSecManager.SecurityParameterIndex}</span><div class='sub-desc'><p>the reserved SecurityParameterIndex</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>@link #ResourceUnavailableException</span><div class='sub-desc'><p>indicating that too many SPIs are\n     currently allocated for this user</p>\n</div></li><li><span class='pre'>@link #SpiUnavailableException</span><div class='sub-desc'><p>indicating that the requested SPI could not be\n     reserved</p>\n</div></li></ul></div></div></div><div id='method-applyTransportModeTransform' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.IpSecManager'>android.net.IpSecManager</span><br/><a href='source/IpSecManager.html#android-net-IpSecManager-method-applyTransportModeTransform' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.IpSecManager-method-applyTransportModeTransform' class='name expandable'>applyTransportModeTransform</a>( <span class='pre'>socket, direction, transform</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Apply an IPsec transform to a socket. ...</div><div class='long'><p>Apply an IPsec transform to a socket.</p>\n\n<p> <p>This applies transport mode encapsulation to the given socket. Once applied, I/O on the\n socket will be encapsulated according to the parameters of the {@code IpSecTransform}. When\n the transform is removed from the socket by calling <a href=\"#!/api/android.net.IpSecManager-method-removeTransportModeTransforms\" rel=\"android.net.IpSecManager-method-removeTransportModeTransforms\" class=\"docClass\">removeTransportModeTransforms</a>,\n unprotected traffic can resume on that socket.</p>\n\n<p> <p>For security reasons, the destination address of any traffic on the socket must match the\n remote {@code InetAddress} of the {@code IpSecTransform}. Attempts to send traffic to any\n other IP address will result in an IOException. In addition, reads and writes on the socket\n will throw IOException if the user deactivates the transform (by calling android.net.IpSecTransform.close()) without calling <a href=\"#!/api/android.net.IpSecManager-method-removeTransportModeTransforms\" rel=\"android.net.IpSecManager-method-removeTransportModeTransforms\" class=\"docClass\">removeTransportModeTransforms</a>.</p>\n\n<p> <p>Note that when applied to TCP sockets, calling android.net.IpSecTransform.close() on an\n applied transform before completion of graceful shutdown may result in the shutdown sequence\n failing to complete. As such, applications requiring graceful shutdown MUST close the socket\n prior to deactivating the applied transform. Socket closure may be performed asynchronously\n (in batches), so the returning of a close function does not guarantee shutdown of a socket.\n Setting an SO_LINGER timeout results in socket closure being performed synchronously, and is\n sufficient to ensure shutdown.</p>\n\n<p> Specifically, if the transform is deactivated (by calling android.net.IpSecTransform.close()),\n prior to the socket being closed, the standard [FIN - FIN/ACK - ACK], or the reset [RST]\n packets are dropped due to the lack of a valid Transform. Similarly, if a socket without the\n SO_LINGER option set is closed, the delayed/batched FIN packets may be dropped.</p>\n\n<p> <h4>Rekey Procedure</h4></p>\n\n<p> <p>When applying a new tranform to a socket in the outbound direction, the previous transform\n will be removed and the new transform will take effect immediately, sending all traffic on\n the new transform; however, when applying a transform in the inbound direction, traffic\n on the old transform will continue to be decrypted and delivered until that transform is\n deallocated by calling android.net.IpSecTransform.close(). This overlap allows lossless rekey\n procedures where both transforms are valid until both endpoints are using the new transform\n and all in-flight packets have been received.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>socket</span> : Object {FileDescriptor}<div class='sub-desc'><p>a socket file descriptor</p>\n</div></li><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p>the direction in which the transform should be applied</p>\n</div></li><li><span class='pre'>transform</span> : Object {IpSecTransform}<div class='sub-desc'><p>a transport mode {@code IpSecTransform}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException indicating that the transform could not be applied</p>\n</div></li></ul></div></div></div><div id='method-openUdpEncapsulationSocket' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.IpSecManager'>android.net.IpSecManager</span><br/><a href='source/IpSecManager.html#android-net-IpSecManager-method-openUdpEncapsulationSocket' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.IpSecManager-method-openUdpEncapsulationSocket' class='name expandable'>openUdpEncapsulationSocket</a>( <span class='pre'></span> ) : Object {android.net.IpSecManager.UdpEncapsulationSocket}<span class=\"signature\"></span></div><div class='description'><div class='short'>Open a socket for UDP encapsulation. ...</div><div class='long'><p>Open a socket for UDP encapsulation.</p>\n\n<p> <p>See <a href=\"#!/api/android.net.IpSecManager.UdpEncapsulationSocket\" rel=\"android.net.IpSecManager.UdpEncapsulationSocket\" class=\"docClass\">android.net.IpSecManager.UdpEncapsulationSocket</a> for the proper way to close the returned socket.</p>\n\n<p> <p>The local port of the returned socket can be obtained by calling android.net.IpSecManager.UdpEncapsulationSocket.getPort().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.IpSecManager.UdpEncapsulationSocket}</span><div class='sub-desc'><p>a socket that is bound to a local port</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException indicating that the socket could not be opened or bound</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ResourceUnavailableException indicating that too many encapsulation sockets are open</p>\n</div></li></ul></div></div></div><div id='method-removeTransportModeTransforms' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.IpSecManager'>android.net.IpSecManager</span><br/><a href='source/IpSecManager.html#android-net-IpSecManager-method-removeTransportModeTransforms' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.IpSecManager-method-removeTransportModeTransforms' class='name expandable'>removeTransportModeTransforms</a>( <span class='pre'>socket</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove an IPsec transform from a socket. ...</div><div class='long'><p>Remove an IPsec transform from a socket.</p>\n\n<p> <p>Once removed, traffic on the socket will not be encrypted. Removing transforms from a\n socket allows the socket to be reused for communication in the clear.</p>\n\n<p> <p>If an {@code IpSecTransform} object applied to this socket was deallocated by calling\n android.net.IpSecTransform.close(), then communication on the socket will fail until this method\n is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>socket</span> : Object {FileDescriptor}<div class='sub-desc'><p>a socket that previously had a transform applied to it</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException indicating that the transform could not be removed from the socket</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});