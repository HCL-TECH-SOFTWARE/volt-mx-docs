Ext.data.JsonP.android_net_VpnService({"tagname":"class","name":"android.net.VpnService","autodetected":{},"files":[{"filename":"VpnService.js","href":"VpnService.html#android-net-VpnService"}],"extends":"android.app.Service","members":[{"name":"SERVICE_INTERFACE","tagname":"property","owner":"android.net.VpnService","id":"property-SERVICE_INTERFACE","meta":{}},{"name":"SERVICE_META_DATA_SUPPORTS_ALWAYS_ON","tagname":"property","owner":"android.net.VpnService","id":"property-SERVICE_META_DATA_SUPPORTS_ALWAYS_ON","meta":{}},{"name":"isAlwaysOn","tagname":"method","owner":"android.net.VpnService","id":"method-isAlwaysOn","meta":{}},{"name":"isLockdownEnabled","tagname":"method","owner":"android.net.VpnService","id":"method-isLockdownEnabled","meta":{}},{"name":"onBind","tagname":"method","owner":"android.net.VpnService","id":"method-onBind","meta":{}},{"name":"onRevoke","tagname":"method","owner":"android.net.VpnService","id":"method-onRevoke","meta":{}},{"name":"prepare","tagname":"method","owner":"android.net.VpnService","id":"method-prepare","meta":{}},{"name":"protect","tagname":"method","owner":"android.net.VpnService","id":"method-protect","meta":{}},{"name":"setUnderlyingNetworks","tagname":"method","owner":"android.net.VpnService","id":"method-setUnderlyingNetworks","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.net.VpnService","short_doc":"VpnService is a base class for applications to extend and build their\n own VPN solutions. ...","classIcon":"icon-class","superclasses":["android.app.Service"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>android.app.Service<div class='subclass '><strong>android.net.VpnService</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/VpnService.html#android-net-VpnService' target='_blank'>VpnService.js</a></div></pre><div class='doc-contents'><p>VpnService is a base class for applications to extend and build their\n own VPN solutions. In general, it creates a virtual network interface,\n configures addresses and routing rules, and returns a file descriptor\n to the application. Each read from the descriptor retrieves an outgoing\n packet which was routed to the interface. Each write to the descriptor\n injects an incoming packet just like it was received from the interface.\n The interface is running on Internet Protocol (IP), so packets are\n always started with IP headers. The application then completes a VPN\n connection by processing and exchanging packets with the remote server\n over a tunnel.</p>\n\n<p> <p>Letting applications intercept packets raises huge security concerns.\n A VPN application can easily break the network. Besides, two of them may\n conflict with each other. The system takes several actions to address\n these issues. Here are some key points:\n <ul>\n   <li>User action is required the first time an application creates a VPN\n       connection.</li>\n   <li>There can be only one VPN connection running at the same time. The\n       existing interface is deactivated when a new one is created.</li>\n   <li>A system-managed notification is shown during the lifetime of a\n       VPN connection.</li>\n   <li>A system-managed dialog gives the information of the current VPN\n       connection. It also provides a button to disconnect.</li>\n   <li>The network is restored automatically when the file descriptor is\n       closed. It also covers the cases when a VPN application is crashed\n       or killed by the system.</li>\n </ul></p>\n\n<p> <p>There are two primary methods in this class: <a href=\"#!/api/android.net.VpnService-method-prepare\" rel=\"android.net.VpnService-method-prepare\" class=\"docClass\">prepare</a> and\n android.net.IpSecTransform.Builder.establish. The former deals with user action and stops\n the VPN connection created by another application. The latter creates\n a VPN interface using the parameters supplied to the <a href=\"#!/api/android.net.IpSecTransform.Builder\" rel=\"android.net.IpSecTransform.Builder\" class=\"docClass\">android.net.IpSecTransform.Builder</a>.\n An application must call <a href=\"#!/api/android.net.VpnService-method-prepare\" rel=\"android.net.VpnService-method-prepare\" class=\"docClass\">prepare</a> to grant the right to use\n other methods in this class, and the right can be revoked at any time.\n Here are the general steps to create a VPN connection:\n <ol>\n   <li>When the user presses the button to connect, call <a href=\"#!/api/android.net.VpnService-method-prepare\" rel=\"android.net.VpnService-method-prepare\" class=\"docClass\">prepare</a>\n       and launch the returned intent, if non-null.</li>\n   <li>When the application becomes prepared, start the service.</li>\n   <li>Create a tunnel to the remote server and negotiate the network\n       parameters for the VPN connection.</li>\n   <li>Supply those parameters to a <a href=\"#!/api/android.net.IpSecTransform.Builder\" rel=\"android.net.IpSecTransform.Builder\" class=\"docClass\">android.net.IpSecTransform.Builder</a> and create a VPN\n       interface by calling android.net.IpSecTransform.Builder.establish.</li>\n   <li>Process and exchange packets between the tunnel and the returned\n       file descriptor.</li>\n   <li>When <a href=\"#!/api/android.net.VpnService-method-onRevoke\" rel=\"android.net.VpnService-method-onRevoke\" class=\"docClass\">onRevoke</a> is invoked, close the file descriptor and\n       shut down the tunnel gracefully.</li>\n </ol></p>\n\n<p> <p>Services extending this class need to be declared with an appropriate\n permission and intent filter. Their access must be secured by\n android.Manifest.permission.BIND_VPN_SERVICE permission, and\n their intent filter must match <a href=\"#!/api/android.net.VpnService-property-SERVICE_INTERFACE\" rel=\"android.net.VpnService-property-SERVICE_INTERFACE\" class=\"docClass\">SERVICE_INTERFACE</a> action. Here\n is an example of declaring a VPN service in {@code AndroidManifest.xml}:</p>\n\n<pre> &lt;service android:name=\".ExampleVpnService\"\n         android:permission=\"android.permission.BIND_VPN_SERVICE\"&gt;\n     &lt;intent-filter&gt;\n         &lt;action android:name=\"<a href=\"#!/api/android.net.VpnService\" rel=\"android.net.VpnService\" class=\"docClass\">android.net.VpnService</a>\"/&gt;\n     &lt;/intent-filter&gt;\n &lt;/service&gt;</pre>\n\n\n<p> <p> The Android system starts a VPN in the background by calling\n startService(). In Android 8.0\n (API level 26) and higher, the system places VPN apps on the temporary\n whitelist for a short period so the app can start in the background. The VPN\n app must promote itself to the foreground after it's launched or the system\n will shut down the app.</p>\n\n<p> <h3>Developer's guide</h3></p>\n\n<p> <p>To learn more about developing VPN apps, read the\n <a href=\"{@docRoot}guide/topics/connectivity/vpn\">VPN developer's guide</a>.</p>\n\n<p> @see Builder</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-SERVICE_INTERFACE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-property-SERVICE_INTERFACE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-property-SERVICE_INTERFACE' class='name expandable'>SERVICE_INTERFACE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The action must be matched by the intent filter of this service. ...</div><div class='long'><p>The action must be matched by the intent filter of this service. It also\nneeds to require android.Manifest.permission.BIND_VPN_SERVICE\npermission so that other applications cannot abuse it.</p>\n<p>Defaults to: <code>&quot;android.net.VpnService&quot;</code></p></div></div></div><div id='property-SERVICE_META_DATA_SUPPORTS_ALWAYS_ON' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-property-SERVICE_META_DATA_SUPPORTS_ALWAYS_ON' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-property-SERVICE_META_DATA_SUPPORTS_ALWAYS_ON' class='name expandable'>SERVICE_META_DATA_SUPPORTS_ALWAYS_ON</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Key for boolean meta-data field indicating whether this VpnService supports always-on mode. ...</div><div class='long'><p>Key for boolean meta-data field indicating whether this VpnService supports always-on mode.</p>\n\n<p><p>For a VPN app targeting API 24 or above, Android\nprovides users with the ability to set it as always-on, so that VPN connection is\npersisted after device reboot and app upgrade. Always-on VPN can also be enabled by device\nowner and profile owner apps through\nDevicePolicyManager.setAlwaysOnVpnPackage.</p>\n\n<p><p>VPN apps not supporting this feature should opt out by adding this meta-data field to the\n{@code VpnService} component of {@code AndroidManifest.xml}. In case there is more than one\n{@code VpnService} component defined in {@code AndroidManifest.xml}, opting out any one of\nthem will opt out the entire app. For example,\n<pre> {@code\n<service android:name=\".ExampleVpnService\"\n        android:permission=\"android.permission.BIND_VPN_SERVICE\">\n    <intent-filter>\n        <action android:name=\"android.net.VpnService\"/>\n    </intent-filter>\n    <meta-data android:name=\"android.net.VpnService.SUPPORTS_ALWAYS_ON\"\n            android:value=false/>\n</action></intent></service>\n} </pre></p>\n\n<p><p>This meta-data field defaults to {@code true} if absent. It will only have effect on\nandroid.os.Build.VERSION_CODES.O_MR1 or higher.</p>\n<p>Defaults to: <code>&quot;android.net.VpnService.SUPPORTS_ALWAYS_ON&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-isAlwaysOn' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-method-isAlwaysOn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-method-isAlwaysOn' class='name expandable'>isAlwaysOn</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the service is running in always-on VPN mode. ...</div><div class='long'><p>Returns whether the service is running in always-on VPN mode. In this mode the system ensures\n that the service is always running by restarting it when necessary, e.g. after reboot.\n@see DevicePolicyManager#setAlwaysOnVpnPackage(ComponentName, String, boolean, Set)</p>\n</div></div></div><div id='method-isLockdownEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-method-isLockdownEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-method-isLockdownEnabled' class='name expandable'>isLockdownEnabled</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the service is running in always-on VPN lockdown mode. ...</div><div class='long'><p>Returns whether the service is running in always-on VPN lockdown mode. In this mode the\n system ensures that the service is always running and that the apps aren't allowed to bypass\n the VPN.\n@see DevicePolicyManager#setAlwaysOnVpnPackage(ComponentName, String, boolean, Set)</p>\n</div></div></div><div id='method-onBind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-method-onBind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-method-onBind' class='name expandable'>onBind</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the communication interface to the service. ...</div><div class='long'><p>Return the communication interface to the service. This method returns\n {@code null} on Intents other than <a href=\"#!/api/android.net.VpnService-property-SERVICE_INTERFACE\" rel=\"android.net.VpnService-property-SERVICE_INTERFACE\" class=\"docClass\">SERVICE_INTERFACE</a>\n action. Applications overriding this method must identify the intent\n and return the corresponding interface accordingly.\n@see Service#onBind</p>\n</div></div></div><div id='method-onRevoke' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-method-onRevoke' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-method-onRevoke' class='name expandable'>onRevoke</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Invoked when the application is revoked. ...</div><div class='long'><p>Invoked when the application is revoked. At this moment, the VPN\n interface is already deactivated by the system. The application should\n close the file descriptor and shut down gracefully. The default\n implementation of this method is calling Service.stopSelf().</p>\n\n<p> <p class=\"note\">Calls to this method may not happen on the main thread\n of the process.\n@see <a href=\"#!/api/android.net.VpnService-method-prepare\" rel=\"android.net.VpnService-method-prepare\" class=\"docClass\">prepare</a></p>\n</div></div></div><div id='method-prepare' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-method-prepare' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-method-prepare' class='name expandable'>prepare</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Prepare to establish a VPN connection. ...</div><div class='long'><p>Prepare to establish a VPN connection. This method returns {@code null}\n if the VPN application is already prepared or if the user has previously\n consented to the VPN application. Otherwise, it returns an\n Intent to a system activity. The application should launch the\n activity using Activity.startActivityForResult to get itself\n prepared. The activity may pop up a dialog to require user action, and\n the result will come back via its Activity.onActivityResult.\n If the result is Activity.RESULT_OK, the application becomes\n prepared and is granted to use other methods in this class.</p>\n\n<p> <p>Only one application can be granted at the same time. The right\n is revoked when another application is granted. The application\n losing the right will be notified via its <a href=\"#!/api/android.net.VpnService-method-onRevoke\" rel=\"android.net.VpnService-method-onRevoke\" class=\"docClass\">onRevoke</a>. Unless\n it becomes prepared again, subsequent calls to other methods in this\n class will fail.</p>\n\n<p> <p>The user may disable the VPN at any time while it is activated, in\n which case this method will return an intent the next time it is\n executed to obtain the user's consent again.\n@see <a href=\"#!/api/android.net.VpnService-method-onRevoke\" rel=\"android.net.VpnService-method-onRevoke\" class=\"docClass\">onRevoke</a></p>\n</div></div></div><div id='method-protect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-method-protect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-method-protect' class='name expandable'>protect</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method to protect a DatagramSocket from VPN\n connections. ...</div><div class='long'><p>Convenience method to protect a DatagramSocket from VPN\n connections.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} on success.\n@see <a href=\"#!/api/android.net.VpnService-method-protect\" rel=\"android.net.VpnService-method-protect\" class=\"docClass\">protect</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-setUnderlyingNetworks' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.VpnService'>android.net.VpnService</span><br/><a href='source/VpnService.html#android-net-VpnService-method-setUnderlyingNetworks' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.VpnService-method-setUnderlyingNetworks' class='name expandable'>setUnderlyingNetworks</a>( <span class='pre'>networks</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the underlying networks used by the VPN for its upstream connections. ...</div><div class='long'><p>Sets the underlying networks used by the VPN for its upstream connections.</p>\n\n<p> <p>Used by the system to know the actual networks that carry traffic for apps affected by\n this VPN in order to present this information to the user (e.g., via status bar icons).</p>\n\n<p> <p>This method only needs to be called if the VPN has explicitly bound its underlying\n communications channels &mdash; such as the socket(s) passed to <a href=\"#!/api/android.net.VpnService-method-protect\" rel=\"android.net.VpnService-method-protect\" class=\"docClass\">protect</a>(int) &mdash;\n to a {@code Network} using APIs such as android.net.Network.bindSocket(Socket) or\n android.net.Network.bindSocket(DatagramSocket). The VPN should call this method every time\n the set of {@code Network}s it is using changes.</p>\n\n<p> <p>{@code networks} is one of the following:\n <ul>\n <li><strong>a non-empty array</strong>: an array of one or more <a href=\"#!/api/android.net.Network\" rel=\"android.net.Network\" class=\"docClass\">android.net.Network</a>s, in\n decreasing preference order. For example, if this VPN uses both wifi and mobile (cellular)\n networks to carry app traffic, but prefers or uses wifi more than mobile, wifi should appear\n first in the array.</li>\n <li><strong>an empty array</strong>: a zero-element array, meaning that the VPN has no\n underlying network connection, and thus, app traffic will not be sent or received.</li>\n <li><strong>null</strong>: (default) signifies that the VPN uses whatever is the system's\n default network. I.e., it doesn't use the {@code bindSocket} or {@code bindDatagramSocket}\n APIs mentioned above to send traffic over specific channels.</li>\n </ul></p>\n\n<p> <p>This call will succeed only if the VPN is currently established. For setting this value\n when the VPN has not yet been established, see android.net.IpSecTransform.Builder.setUnderlyingNetworks.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>networks</span> : Object {android.net.Network[]}<div class='sub-desc'><p>An array of networks the VPN uses to tunnel traffic to/from its servers.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} on success.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});