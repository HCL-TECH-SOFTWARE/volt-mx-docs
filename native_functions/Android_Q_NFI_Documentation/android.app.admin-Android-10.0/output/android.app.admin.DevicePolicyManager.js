Ext.data.JsonP.android_app_admin_DevicePolicyManager({"tagname":"class","name":"android.app.admin.DevicePolicyManager","autodetected":{},"files":[{"filename":"DevicePolicyManager.js","href":"DevicePolicyManager.html#android-app-admin-DevicePolicyManager"}],"extends":"java.lang.Object","members":[{"name":"ACTION_ADD_DEVICE_ADMIN","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_ADD_DEVICE_ADMIN","meta":{}},{"name":"ACTION_ADMIN_POLICY_COMPLIANCE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_ADMIN_POLICY_COMPLIANCE","meta":{}},{"name":"ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED","meta":{}},{"name":"ACTION_DEVICE_ADMIN_SERVICE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_DEVICE_ADMIN_SERVICE","meta":{}},{"name":"ACTION_DEVICE_OWNER_CHANGED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_DEVICE_OWNER_CHANGED","meta":{}},{"name":"ACTION_GET_PROVISIONING_MODE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_GET_PROVISIONING_MODE","meta":{}},{"name":"ACTION_MANAGED_PROFILE_PROVISIONED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_MANAGED_PROFILE_PROVISIONED","meta":{}},{"name":"ACTION_PROFILE_OWNER_CHANGED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_PROFILE_OWNER_CHANGED","meta":{}},{"name":"ACTION_PROVISIONING_SUCCESSFUL","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_PROVISIONING_SUCCESSFUL","meta":{}},{"name":"ACTION_PROVISION_MANAGED_DEVICE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_PROVISION_MANAGED_DEVICE","meta":{}},{"name":"ACTION_PROVISION_MANAGED_PROFILE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_PROVISION_MANAGED_PROFILE","meta":{}},{"name":"ACTION_SET_NEW_PARENT_PROFILE_PASSWORD","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD","meta":{}},{"name":"ACTION_SET_NEW_PASSWORD","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_SET_NEW_PASSWORD","meta":{}},{"name":"ACTION_START_ENCRYPTION","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_START_ENCRYPTION","meta":{}},{"name":"ACTION_SYSTEM_UPDATE_POLICY_CHANGED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ACTION_SYSTEM_UPDATE_POLICY_CHANGED","meta":{}},{"name":"DELEGATION_APP_RESTRICTIONS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_APP_RESTRICTIONS","meta":{}},{"name":"DELEGATION_BLOCK_UNINSTALL","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_BLOCK_UNINSTALL","meta":{}},{"name":"DELEGATION_CERT_INSTALL","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_CERT_INSTALL","meta":{}},{"name":"DELEGATION_CERT_SELECTION","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_CERT_SELECTION","meta":{}},{"name":"DELEGATION_ENABLE_SYSTEM_APP","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_ENABLE_SYSTEM_APP","meta":{}},{"name":"DELEGATION_INSTALL_EXISTING_PACKAGE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_INSTALL_EXISTING_PACKAGE","meta":{}},{"name":"DELEGATION_KEEP_UNINSTALLED_PACKAGES","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_KEEP_UNINSTALLED_PACKAGES","meta":{}},{"name":"DELEGATION_NETWORK_LOGGING","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_NETWORK_LOGGING","meta":{}},{"name":"DELEGATION_PACKAGE_ACCESS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_PACKAGE_ACCESS","meta":{}},{"name":"DELEGATION_PERMISSION_GRANT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-DELEGATION_PERMISSION_GRANT","meta":{}},{"name":"ENCRYPTION_STATUS_ACTIVATING","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ENCRYPTION_STATUS_ACTIVATING","meta":{}},{"name":"ENCRYPTION_STATUS_ACTIVE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ENCRYPTION_STATUS_ACTIVE","meta":{}},{"name":"ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY","meta":{}},{"name":"ENCRYPTION_STATUS_ACTIVE_PER_USER","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ENCRYPTION_STATUS_ACTIVE_PER_USER","meta":{}},{"name":"ENCRYPTION_STATUS_INACTIVE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ENCRYPTION_STATUS_INACTIVE","meta":{}},{"name":"ENCRYPTION_STATUS_UNSUPPORTED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ENCRYPTION_STATUS_UNSUPPORTED","meta":{}},{"name":"EXTRA_ADD_EXPLANATION","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_ADD_EXPLANATION","meta":{}},{"name":"EXTRA_DELEGATION_SCOPES","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_DELEGATION_SCOPES","meta":{}},{"name":"EXTRA_DEVICE_ADMIN","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_DEVICE_ADMIN","meta":{}},{"name":"EXTRA_PASSWORD_COMPLEXITY","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PASSWORD_COMPLEXITY","meta":{}},{"name":"EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE","meta":{}},{"name":"EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE","meta":{}},{"name":"EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME","meta":{}},{"name":"EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE","meta":{}},{"name":"EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM","meta":{}},{"name":"EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER","meta":{}},{"name":"EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION","meta":{}},{"name":"EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME","meta":{"deprecated":{"text":"<p>Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME</a>. This extra is still\nsupported, but only if there is only one device admin receiver in the package that requires\nthe permission android.Manifest.permission.BIND_DEVICE_ADMIN.</p>\n"}}},{"name":"EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM","meta":{}},{"name":"EXTRA_PROVISIONING_DISCLAIMERS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DISCLAIMERS","meta":{}},{"name":"EXTRA_PROVISIONING_DISCLAIMER_CONTENT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DISCLAIMER_CONTENT","meta":{}},{"name":"EXTRA_PROVISIONING_DISCLAIMER_HEADER","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_DISCLAIMER_HEADER","meta":{}},{"name":"EXTRA_PROVISIONING_EMAIL_ADDRESS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_EMAIL_ADDRESS","meta":{"deprecated":{"text":"<p>From android.os.Build.VERSION_CODES.O, never used while provisioning the\ndevice.</p>\n"}}},{"name":"EXTRA_PROVISIONING_IMEI","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_IMEI","meta":{}},{"name":"EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION","meta":{}},{"name":"EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED","meta":{}},{"name":"EXTRA_PROVISIONING_LOCALE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_LOCALE","meta":{}},{"name":"EXTRA_PROVISIONING_LOCAL_TIME","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_LOCAL_TIME","meta":{}},{"name":"EXTRA_PROVISIONING_LOGO_URI","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_LOGO_URI","meta":{}},{"name":"EXTRA_PROVISIONING_MAIN_COLOR","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_MAIN_COLOR","meta":{}},{"name":"EXTRA_PROVISIONING_MODE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_MODE","meta":{}},{"name":"EXTRA_PROVISIONING_SERIAL_NUMBER","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_SERIAL_NUMBER","meta":{}},{"name":"EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS","meta":{}},{"name":"EXTRA_PROVISIONING_SKIP_ENCRYPTION","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_SKIP_ENCRYPTION","meta":{}},{"name":"EXTRA_PROVISIONING_SKIP_USER_CONSENT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_SKIP_USER_CONSENT","meta":{}},{"name":"EXTRA_PROVISIONING_TIME_ZONE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_TIME_ZONE","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_DOMAIN","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_DOMAIN","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_EAP_METHOD","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_EAP_METHOD","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_HIDDEN","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_HIDDEN","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_IDENTITY","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_IDENTITY","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_PAC_URL","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_PAC_URL","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_PASSWORD","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_PASSWORD","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_PHASE2_AUTH","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_PHASE2_AUTH","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_PROXY_BYPASS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_PROXY_BYPASS","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_PROXY_HOST","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_PROXY_HOST","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_PROXY_PORT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_PROXY_PORT","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_SECURITY_TYPE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_SSID","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_SSID","meta":{}},{"name":"EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE","meta":{}},{"name":"FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY","meta":{}},{"name":"FLAG_MANAGED_CAN_ACCESS_PARENT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-FLAG_MANAGED_CAN_ACCESS_PARENT","meta":{}},{"name":"FLAG_PARENT_CAN_ACCESS_MANAGED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-FLAG_PARENT_CAN_ACCESS_MANAGED","meta":{}},{"name":"ID_TYPE_BASE_INFO","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ID_TYPE_BASE_INFO","meta":{}},{"name":"ID_TYPE_IMEI","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ID_TYPE_IMEI","meta":{}},{"name":"ID_TYPE_MEID","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ID_TYPE_MEID","meta":{}},{"name":"ID_TYPE_SERIAL","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-ID_TYPE_SERIAL","meta":{}},{"name":"INSTALLKEY_REQUEST_CREDENTIALS_ACCESS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-INSTALLKEY_REQUEST_CREDENTIALS_ACCESS","meta":{}},{"name":"INSTALLKEY_SET_USER_SELECTABLE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-INSTALLKEY_SET_USER_SELECTABLE","meta":{}},{"name":"KEYGUARD_DISABLE_BIOMETRICS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_BIOMETRICS","meta":{}},{"name":"KEYGUARD_DISABLE_FACE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_FACE","meta":{}},{"name":"KEYGUARD_DISABLE_FEATURES_ALL","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_FEATURES_ALL","meta":{}},{"name":"KEYGUARD_DISABLE_FEATURES_NONE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_FEATURES_NONE","meta":{}},{"name":"KEYGUARD_DISABLE_FINGERPRINT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_FINGERPRINT","meta":{}},{"name":"KEYGUARD_DISABLE_IRIS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_IRIS","meta":{}},{"name":"KEYGUARD_DISABLE_REMOTE_INPUT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_REMOTE_INPUT","meta":{}},{"name":"KEYGUARD_DISABLE_SECURE_CAMERA","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_SECURE_CAMERA","meta":{}},{"name":"KEYGUARD_DISABLE_SECURE_NOTIFICATIONS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_SECURE_NOTIFICATIONS","meta":{}},{"name":"KEYGUARD_DISABLE_TRUST_AGENTS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_TRUST_AGENTS","meta":{}},{"name":"KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS","meta":{}},{"name":"KEYGUARD_DISABLE_WIDGETS_ALL","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-KEYGUARD_DISABLE_WIDGETS_ALL","meta":{}},{"name":"LEAVE_ALL_SYSTEM_APPS_ENABLED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-LEAVE_ALL_SYSTEM_APPS_ENABLED","meta":{}},{"name":"LOCK_TASK_FEATURE_GLOBAL_ACTIONS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-LOCK_TASK_FEATURE_GLOBAL_ACTIONS","meta":{}},{"name":"LOCK_TASK_FEATURE_HOME","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-LOCK_TASK_FEATURE_HOME","meta":{}},{"name":"LOCK_TASK_FEATURE_KEYGUARD","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-LOCK_TASK_FEATURE_KEYGUARD","meta":{}},{"name":"LOCK_TASK_FEATURE_NONE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-LOCK_TASK_FEATURE_NONE","meta":{}},{"name":"LOCK_TASK_FEATURE_NOTIFICATIONS","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-LOCK_TASK_FEATURE_NOTIFICATIONS","meta":{}},{"name":"LOCK_TASK_FEATURE_OVERVIEW","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-LOCK_TASK_FEATURE_OVERVIEW","meta":{}},{"name":"LOCK_TASK_FEATURE_SYSTEM_INFO","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-LOCK_TASK_FEATURE_SYSTEM_INFO","meta":{}},{"name":"MAKE_USER_EPHEMERAL","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-MAKE_USER_EPHEMERAL","meta":{}},{"name":"MIME_TYPE_PROVISIONING_NFC","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-MIME_TYPE_PROVISIONING_NFC","meta":{}},{"name":"PASSWORD_COMPLEXITY_HIGH","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_COMPLEXITY_HIGH","meta":{}},{"name":"PASSWORD_COMPLEXITY_LOW","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_COMPLEXITY_LOW","meta":{}},{"name":"PASSWORD_COMPLEXITY_MEDIUM","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_COMPLEXITY_MEDIUM","meta":{}},{"name":"PASSWORD_COMPLEXITY_NONE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_COMPLEXITY_NONE","meta":{}},{"name":"PASSWORD_QUALITY_ALPHABETIC","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_QUALITY_ALPHABETIC","meta":{}},{"name":"PASSWORD_QUALITY_ALPHANUMERIC","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_QUALITY_ALPHANUMERIC","meta":{}},{"name":"PASSWORD_QUALITY_BIOMETRIC_WEAK","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_QUALITY_BIOMETRIC_WEAK","meta":{}},{"name":"PASSWORD_QUALITY_COMPLEX","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_QUALITY_COMPLEX","meta":{}},{"name":"PASSWORD_QUALITY_NUMERIC","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_QUALITY_NUMERIC","meta":{}},{"name":"PASSWORD_QUALITY_NUMERIC_COMPLEX","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_QUALITY_NUMERIC_COMPLEX","meta":{}},{"name":"PASSWORD_QUALITY_SOMETHING","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_QUALITY_SOMETHING","meta":{}},{"name":"PASSWORD_QUALITY_UNSPECIFIED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PASSWORD_QUALITY_UNSPECIFIED","meta":{}},{"name":"PERMISSION_GRANT_STATE_DEFAULT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PERMISSION_GRANT_STATE_DEFAULT","meta":{}},{"name":"PERMISSION_GRANT_STATE_DENIED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PERMISSION_GRANT_STATE_DENIED","meta":{}},{"name":"PERMISSION_GRANT_STATE_GRANTED","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PERMISSION_GRANT_STATE_GRANTED","meta":{}},{"name":"PERMISSION_POLICY_AUTO_DENY","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PERMISSION_POLICY_AUTO_DENY","meta":{}},{"name":"PERMISSION_POLICY_AUTO_GRANT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PERMISSION_POLICY_AUTO_GRANT","meta":{}},{"name":"PERMISSION_POLICY_PROMPT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PERMISSION_POLICY_PROMPT","meta":{}},{"name":"POLICY_DISABLE_CAMERA","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-POLICY_DISABLE_CAMERA","meta":{}},{"name":"POLICY_DISABLE_SCREEN_CAPTURE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-POLICY_DISABLE_SCREEN_CAPTURE","meta":{}},{"name":"PRIVATE_DNS_MODE_OFF","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PRIVATE_DNS_MODE_OFF","meta":{}},{"name":"PRIVATE_DNS_MODE_OPPORTUNISTIC","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PRIVATE_DNS_MODE_OPPORTUNISTIC","meta":{}},{"name":"PRIVATE_DNS_MODE_PROVIDER_HOSTNAME","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PRIVATE_DNS_MODE_PROVIDER_HOSTNAME","meta":{}},{"name":"PRIVATE_DNS_MODE_UNKNOWN","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PRIVATE_DNS_MODE_UNKNOWN","meta":{}},{"name":"PRIVATE_DNS_SET_ERROR_FAILURE_SETTING","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PRIVATE_DNS_SET_ERROR_FAILURE_SETTING","meta":{}},{"name":"PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING","meta":{}},{"name":"PRIVATE_DNS_SET_NO_ERROR","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PRIVATE_DNS_SET_NO_ERROR","meta":{}},{"name":"PROVISIONING_MODE_FULLY_MANAGED_DEVICE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PROVISIONING_MODE_FULLY_MANAGED_DEVICE","meta":{}},{"name":"PROVISIONING_MODE_MANAGED_PROFILE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-PROVISIONING_MODE_MANAGED_PROFILE","meta":{}},{"name":"RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT","meta":{}},{"name":"RESET_PASSWORD_REQUIRE_ENTRY","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-RESET_PASSWORD_REQUIRE_ENTRY","meta":{}},{"name":"SKIP_SETUP_WIZARD","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-SKIP_SETUP_WIZARD","meta":{}},{"name":"WIPE_EUICC","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-WIPE_EUICC","meta":{}},{"name":"WIPE_EXTERNAL_STORAGE","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-WIPE_EXTERNAL_STORAGE","meta":{}},{"name":"WIPE_RESET_PROTECTION_DATA","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-WIPE_RESET_PROTECTION_DATA","meta":{}},{"name":"WIPE_SILENTLY","tagname":"property","owner":"android.app.admin.DevicePolicyManager","id":"property-WIPE_SILENTLY","meta":{}},{"name":"addCrossProfileIntentFilter","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-addCrossProfileIntentFilter","meta":{}},{"name":"addCrossProfileWidgetProvider","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-addCrossProfileWidgetProvider","meta":{}},{"name":"addOverrideApn","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-addOverrideApn","meta":{}},{"name":"addPersistentPreferredActivity","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-addPersistentPreferredActivity","meta":{}},{"name":"addUserRestriction","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-addUserRestriction","meta":{}},{"name":"bindDeviceAdminServiceAsUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-bindDeviceAdminServiceAsUser","meta":{}},{"name":"clearApplicationUserData","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-clearApplicationUserData","meta":{}},{"name":"clearCrossProfileIntentFilters","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-clearCrossProfileIntentFilters","meta":{}},{"name":"clearDeviceOwnerApp","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-clearDeviceOwnerApp","meta":{"deprecated":{"text":"<p>This method is expected to be used for testing purposes only. The device owner\n will lose control of the device and its data after calling it. In order to protect any\n sensitive data that remains on the device, it is advised that the device owner factory resets\n the device instead of calling this method. See wipeData(int).</p>\n"}}},{"name":"clearPackagePersistentPreferredActivities","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-clearPackagePersistentPreferredActivities","meta":{}},{"name":"clearProfileOwner","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-clearProfileOwner","meta":{"deprecated":{"text":"<p>This method is expected to be used for testing purposes only. The profile owner\n will lose control of the user and its data after calling it. In order to protect any\n sensitive data that remains on this user, it is advised that the profile owner deletes it\n instead of calling this method. See wipeData(int).</p>\n"}}},{"name":"clearResetPasswordToken","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-clearResetPasswordToken","meta":{}},{"name":"clearUserRestriction","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-clearUserRestriction","meta":{}},{"name":"createAdminSupportIntent","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-createAdminSupportIntent","meta":{}},{"name":"createAndInitializeUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-createAndInitializeUser","meta":{"deprecated":{"text":"<p>From android.os.Build.VERSION_CODES.M</p>\n"},"removed":{"text":"<p>From android.os.Build.VERSION_CODES.N</p>\n"}}},{"name":"createAndManageUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-createAndManageUser","meta":{}},{"name":"createUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-createUser","meta":{"deprecated":{"text":"<p>From android.os.Build.VERSION_CODES.M</p>\n"},"removed":{"text":"<p>From android.os.Build.VERSION_CODES.N</p>\n"}}},{"name":"enableSystemApp","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-enableSystemApp","meta":{}},{"name":"forceRemoveActiveAdmin","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-forceRemoveActiveAdmin","meta":{}},{"name":"generateKeyPair","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-generateKeyPair","meta":{}},{"name":"getAccountTypesWithManagementDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getAccountTypesWithManagementDisabled","meta":{}},{"name":"getActiveAdmins","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getActiveAdmins","meta":{}},{"name":"getAffiliationIds","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getAffiliationIds","meta":{}},{"name":"getAlwaysOnVpnLockdownWhitelist","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getAlwaysOnVpnLockdownWhitelist","meta":{}},{"name":"getAlwaysOnVpnPackage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getAlwaysOnVpnPackage","meta":{}},{"name":"getApplicationRestrictions","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getApplicationRestrictions","meta":{}},{"name":"getApplicationRestrictionsManagingPackage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getApplicationRestrictionsManagingPackage","meta":{"deprecated":{"text":"<p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getDelegatePackages\" rel=\"android.app.admin.DevicePolicyManager-method-getDelegatePackages\" class=\"docClass\">getDelegatePackages</a>\n with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" class=\"docClass\">DELEGATION_APP_RESTRICTIONS</a> scope instead.</p>\n"}}},{"name":"getAutoTimeRequired","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getAutoTimeRequired","meta":{}},{"name":"getBindDeviceAdminTargetUsers","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getBindDeviceAdminTargetUsers","meta":{}},{"name":"getCertInstallerPackage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getCertInstallerPackage","meta":{"deprecated":{"text":"<p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getDelegatePackages\" rel=\"android.app.admin.DevicePolicyManager-method-getDelegatePackages\" class=\"docClass\">getDelegatePackages</a>\n with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a> scope instead.</p>\n"}}},{"name":"getCrossProfileWidgetProviders","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getCrossProfileWidgetProviders","meta":{}},{"name":"getDelegatePackages","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getDelegatePackages","meta":{}},{"name":"getDelegatedScopes","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getDelegatedScopes","meta":{}},{"name":"getDeviceOwnerLockScreenInfo","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getDeviceOwnerLockScreenInfo","meta":{}},{"name":"getEndUserSessionMessage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getEndUserSessionMessage","meta":{}},{"name":"getGlobalPrivateDnsHost","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getGlobalPrivateDnsHost","meta":{}},{"name":"getGlobalPrivateDnsMode","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getGlobalPrivateDnsMode","meta":{}},{"name":"getInstalledCaCerts","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getInstalledCaCerts","meta":{}},{"name":"getKeepUninstalledPackages","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getKeepUninstalledPackages","meta":{}},{"name":"getLockTaskFeatures","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getLockTaskFeatures","meta":{}},{"name":"getLockTaskPackages","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getLockTaskPackages","meta":{}},{"name":"getLongSupportMessage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getLongSupportMessage","meta":{}},{"name":"getMeteredDataDisabledPackages","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getMeteredDataDisabledPackages","meta":{}},{"name":"getOrganizationColor","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getOrganizationColor","meta":{}},{"name":"getOrganizationColorForUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getOrganizationColorForUser","meta":{}},{"name":"getOrganizationName","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getOrganizationName","meta":{}},{"name":"getOverrideApns","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getOverrideApns","meta":{}},{"name":"getPasswordComplexity","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPasswordComplexity","meta":{}},{"name":"getPasswordExpiration","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPasswordExpiration","meta":{}},{"name":"getPasswordExpirationTimeout","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPasswordExpirationTimeout","meta":{}},{"name":"getPasswordMaximumLength","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPasswordMaximumLength","meta":{}},{"name":"getPendingSystemUpdate","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPendingSystemUpdate","meta":{}},{"name":"getPermissionGrantState","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPermissionGrantState","meta":{}},{"name":"getPermissionPolicy","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPermissionPolicy","meta":{}},{"name":"getPermittedCrossProfileNotificationListeners","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPermittedCrossProfileNotificationListeners","meta":{}},{"name":"getPermittedInputMethods","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getPermittedInputMethods","meta":{}},{"name":"getProfileOwnerNameAsUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getProfileOwnerNameAsUser","meta":{}},{"name":"getSecondaryUsers","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getSecondaryUsers","meta":{}},{"name":"getShortSupportMessage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getShortSupportMessage","meta":{}},{"name":"getStartUserSessionMessage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getStartUserSessionMessage","meta":{}},{"name":"getStorageEncryption","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getStorageEncryption","meta":{}},{"name":"getSystemUpdatePolicy","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getSystemUpdatePolicy","meta":{}},{"name":"getTransferOwnershipBundle","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getTransferOwnershipBundle","meta":{}},{"name":"getUserRestrictions","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getUserRestrictions","meta":{}},{"name":"getWifiMacAddress","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-getWifiMacAddress","meta":{}},{"name":"hasCaCertInstalled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-hasCaCertInstalled","meta":{}},{"name":"hasGrantedPolicy","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-hasGrantedPolicy","meta":{}},{"name":"installCaCert","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-installCaCert","meta":{}},{"name":"installExistingPackage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-installExistingPackage","meta":{}},{"name":"installKeyPair","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-installKeyPair","meta":{}},{"name":"installSystemUpdate","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-installSystemUpdate","meta":{}},{"name":"isActivePasswordSufficient","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isActivePasswordSufficient","meta":{}},{"name":"isAdminActive","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isAdminActive","meta":{}},{"name":"isAffiliatedUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isAffiliatedUser","meta":{}},{"name":"isAlwaysOnVpnLockdownEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isAlwaysOnVpnLockdownEnabled","meta":{}},{"name":"isApplicationHidden","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isApplicationHidden","meta":{}},{"name":"isBackupServiceEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isBackupServiceEnabled","meta":{}},{"name":"isCallerApplicationRestrictionsManagingPackage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isCallerApplicationRestrictionsManagingPackage","meta":{"deprecated":{"text":"<p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-getDelegatedScopes\" class=\"docClass\">getDelegatedScopes</a>\n instead.</p>\n"}}},{"name":"isDeviceIdAttestationSupported","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isDeviceIdAttestationSupported","meta":{}},{"name":"isDeviceOwnerApp","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isDeviceOwnerApp","meta":{}},{"name":"isEphemeralUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isEphemeralUser","meta":{}},{"name":"isLockTaskPermitted","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isLockTaskPermitted","meta":{}},{"name":"isLogoutEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isLogoutEnabled","meta":{}},{"name":"isManagedProfile","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isManagedProfile","meta":{}},{"name":"isMasterVolumeMuted","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isMasterVolumeMuted","meta":{}},{"name":"isNetworkLoggingEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isNetworkLoggingEnabled","meta":{}},{"name":"isOverrideApnEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isOverrideApnEnabled","meta":{}},{"name":"isPackageSuspended","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isPackageSuspended","meta":{}},{"name":"isProfileOwnerApp","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isProfileOwnerApp","meta":{}},{"name":"isProvisioningAllowed","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isProvisioningAllowed","meta":{}},{"name":"isResetPasswordTokenActive","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isResetPasswordTokenActive","meta":{}},{"name":"isSecurityLoggingEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isSecurityLoggingEnabled","meta":{}},{"name":"isSystemOnlyUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isSystemOnlyUser","meta":{}},{"name":"isUninstallBlocked","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isUninstallBlocked","meta":{}},{"name":"isUninstallInQueue","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isUninstallInQueue","meta":{}},{"name":"isUsingUnifiedPassword","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-isUsingUnifiedPassword","meta":{}},{"name":"lockNow","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-lockNow","meta":{}},{"name":"logoutUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-logoutUser","meta":{}},{"name":"reboot","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-reboot","meta":{}},{"name":"removeActiveAdmin","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-removeActiveAdmin","meta":{}},{"name":"removeCrossProfileWidgetProvider","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-removeCrossProfileWidgetProvider","meta":{}},{"name":"removeKeyPair","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-removeKeyPair","meta":{}},{"name":"removeOverrideApn","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-removeOverrideApn","meta":{}},{"name":"removeUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-removeUser","meta":{}},{"name":"requestBugreport","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-requestBugreport","meta":{}},{"name":"resetPassword","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-resetPassword","meta":{}},{"name":"resetPasswordWithToken","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-resetPasswordWithToken","meta":{}},{"name":"retrieveNetworkLogs","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-retrieveNetworkLogs","meta":{}},{"name":"retrievePreRebootSecurityLogs","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-retrievePreRebootSecurityLogs","meta":{}},{"name":"retrieveSecurityLogs","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-retrieveSecurityLogs","meta":{}},{"name":"setAccountManagementDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setAccountManagementDisabled","meta":{}},{"name":"setActiveProfileOwner","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setActiveProfileOwner","meta":{}},{"name":"setAffiliationIds","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setAffiliationIds","meta":{}},{"name":"setAlwaysOnVpnPackage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setAlwaysOnVpnPackage","meta":{}},{"name":"setApplicationHidden","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setApplicationHidden","meta":{}},{"name":"setApplicationRestrictions","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setApplicationRestrictions","meta":{}},{"name":"setApplicationRestrictionsManagingPackage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setApplicationRestrictionsManagingPackage","meta":{"deprecated":{"text":"<p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" class=\"docClass\">DELEGATION_APP_RESTRICTIONS</a> scope instead.</p>\n"}}},{"name":"setAutoTimeRequired","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setAutoTimeRequired","meta":{}},{"name":"setBackupServiceEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setBackupServiceEnabled","meta":{}},{"name":"setBluetoothContactSharingDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setBluetoothContactSharingDisabled","meta":{}},{"name":"setCameraDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setCameraDisabled","meta":{}},{"name":"setCertInstallerPackage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setCertInstallerPackage","meta":{"deprecated":{"text":"<p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a> scope instead.</p>\n"}}},{"name":"setCrossProfileCalendarPackages","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setCrossProfileCalendarPackages","meta":{}},{"name":"setCrossProfileCallerIdDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setCrossProfileCallerIdDisabled","meta":{}},{"name":"setCrossProfileContactsSearchDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setCrossProfileContactsSearchDisabled","meta":{}},{"name":"setDefaultSmsApplication","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setDefaultSmsApplication","meta":{}},{"name":"setDelegatedScopes","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setDelegatedScopes","meta":{}},{"name":"setDeviceOwner","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setDeviceOwner","meta":{}},{"name":"setDeviceOwnerLockScreenInfo","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setDeviceOwnerLockScreenInfo","meta":{}},{"name":"setEndUserSessionMessage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setEndUserSessionMessage","meta":{}},{"name":"setGlobalPrivateDnsModeOpportunistic","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setGlobalPrivateDnsModeOpportunistic","meta":{}},{"name":"setGlobalPrivateDnsModeSpecifiedHost","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setGlobalPrivateDnsModeSpecifiedHost","meta":{}},{"name":"setGlobalSetting","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setGlobalSetting","meta":{}},{"name":"setKeepUninstalledPackages","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setKeepUninstalledPackages","meta":{}},{"name":"setKeyPairCertificate","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setKeyPairCertificate","meta":{}},{"name":"setKeyguardDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setKeyguardDisabled","meta":{}},{"name":"setKeyguardDisabledFeatures","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setKeyguardDisabledFeatures","meta":{}},{"name":"setLockTaskFeatures","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setLockTaskFeatures","meta":{}},{"name":"setLockTaskPackages","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setLockTaskPackages","meta":{}},{"name":"setLogoutEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setLogoutEnabled","meta":{}},{"name":"setLongSupportMessage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setLongSupportMessage","meta":{}},{"name":"setMasterVolumeMuted","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setMasterVolumeMuted","meta":{}},{"name":"setMaximumFailedPasswordsForWipe","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setMaximumFailedPasswordsForWipe","meta":{}},{"name":"setMaximumTimeToLock","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setMaximumTimeToLock","meta":{}},{"name":"setMeteredDataDisabledPackages","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setMeteredDataDisabledPackages","meta":{}},{"name":"setNetworkLoggingEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setNetworkLoggingEnabled","meta":{}},{"name":"setOrganizationColor","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setOrganizationColor","meta":{}},{"name":"setOrganizationColorForUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setOrganizationColorForUser","meta":{}},{"name":"setOrganizationName","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setOrganizationName","meta":{}},{"name":"setOverrideApnsEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setOverrideApnsEnabled","meta":{}},{"name":"setPackagesSuspended","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPackagesSuspended","meta":{}},{"name":"setPasswordExpirationTimeout","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordExpirationTimeout","meta":{}},{"name":"setPasswordHistoryLength","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordHistoryLength","meta":{}},{"name":"setPasswordMinimumLength","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordMinimumLength","meta":{}},{"name":"setPasswordMinimumLetters","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordMinimumLetters","meta":{}},{"name":"setPasswordMinimumLowerCase","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordMinimumLowerCase","meta":{}},{"name":"setPasswordMinimumNonLetter","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordMinimumNonLetter","meta":{}},{"name":"setPasswordMinimumNumeric","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordMinimumNumeric","meta":{}},{"name":"setPasswordMinimumSymbols","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordMinimumSymbols","meta":{}},{"name":"setPasswordMinimumUpperCase","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordMinimumUpperCase","meta":{}},{"name":"setPasswordQuality","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPasswordQuality","meta":{}},{"name":"setPermissionGrantState","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPermissionGrantState","meta":{}},{"name":"setPermissionPolicy","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPermissionPolicy","meta":{}},{"name":"setPermittedAccessibilityServices","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPermittedAccessibilityServices","meta":{}},{"name":"setPermittedCrossProfileNotificationListeners","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPermittedCrossProfileNotificationListeners","meta":{}},{"name":"setPermittedInputMethods","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setPermittedInputMethods","meta":{}},{"name":"setProfileEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setProfileEnabled","meta":{}},{"name":"setProfileName","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setProfileName","meta":{}},{"name":"setProfileOwner","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setProfileOwner","meta":{}},{"name":"setRecommendedGlobalProxy","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setRecommendedGlobalProxy","meta":{}},{"name":"setRequiredStrongAuthTimeout","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setRequiredStrongAuthTimeout","meta":{}},{"name":"setResetPasswordToken","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setResetPasswordToken","meta":{}},{"name":"setRestrictionsProvider","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setRestrictionsProvider","meta":{}},{"name":"setScreenCaptureDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setScreenCaptureDisabled","meta":{}},{"name":"setSecureSetting","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setSecureSetting","meta":{}},{"name":"setSecurityLoggingEnabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setSecurityLoggingEnabled","meta":{}},{"name":"setShortSupportMessage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setShortSupportMessage","meta":{}},{"name":"setStartUserSessionMessage","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setStartUserSessionMessage","meta":{}},{"name":"setStatusBarDisabled","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setStatusBarDisabled","meta":{}},{"name":"setStorageEncryption","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setStorageEncryption","meta":{}},{"name":"setSystemSetting","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setSystemSetting","meta":{}},{"name":"setSystemUpdatePolicy","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setSystemUpdatePolicy","meta":{}},{"name":"setTime","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setTime","meta":{}},{"name":"setTimeZone","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setTimeZone","meta":{}},{"name":"setTrustAgentConfiguration","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setTrustAgentConfiguration","meta":{}},{"name":"setUninstallBlocked","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setUninstallBlocked","meta":{}},{"name":"setUserIcon","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-setUserIcon","meta":{}},{"name":"startUserInBackground","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-startUserInBackground","meta":{}},{"name":"stopUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-stopUser","meta":{}},{"name":"switchUser","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-switchUser","meta":{}},{"name":"transferOwnership","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-transferOwnership","meta":{}},{"name":"uninstallAllUserCaCerts","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-uninstallAllUserCaCerts","meta":{}},{"name":"uninstallCaCert","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-uninstallCaCert","meta":{}},{"name":"uninstallPackageWithActiveAdmins","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-uninstallPackageWithActiveAdmins","meta":{}},{"name":"updateOverrideApn","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-updateOverrideApn","meta":{}},{"name":"wipeData","tagname":"method","owner":"android.app.admin.DevicePolicyManager","id":"method-wipeData","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.app.admin.DevicePolicyManager","short_doc":"Public interface for managing policies enforced on a device. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.app.admin.DevicePolicyManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager' target='_blank'>DevicePolicyManager.js</a></div></pre><div class='doc-contents'><p>Public interface for managing policies enforced on a device. Most clients of this class must be\n registered with the system as a <a href=\"{@docRoot}guide/topics/admin/device-admin.html\">device\n administrator</a>. Additionally, a device administrator may be registered as either a profile or\n device owner. A given method is accessible to all device administrators unless the documentation\n for that method specifies that it is restricted to either device or profile owners. Any\n application calling an api may only pass as an argument a device administrator component it\n owns. Otherwise, a SecurityException will be thrown.\n <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>\n For more information about managing policies for device administration, read the <a href=\n \"{@docRoot}guide/topics/admin/device-admin.html\">Device Administration</a> developer\n guide. </p></div></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ACTION_ADD_DEVICE_ADMIN' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_ADD_DEVICE_ADMIN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_ADD_DEVICE_ADMIN' class='name expandable'>ACTION_ADD_DEVICE_ADMIN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: ask the user to add a new device administrator to the system. ...</div><div class='long'><p>Activity action: ask the user to add a new device administrator to the system.\nThe desired policy is the ComponentName of the policy in the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_DEVICE_ADMIN\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_DEVICE_ADMIN\" class=\"docClass\">EXTRA_DEVICE_ADMIN</a> extra field.  This will invoke a UI to\nbring the user through adding the device administrator to the system (or\nallowing them to reject it).</p>\n\n<p><p>You can optionally include the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_ADD_EXPLANATION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_ADD_EXPLANATION\" class=\"docClass\">EXTRA_ADD_EXPLANATION</a>\nfield to provide the user with additional explanation (in addition\nto your component's description) about what is being added.</p>\n\n<p><p>If your administrator is already active, this will ordinarily return immediately (without\nuser intervention).  However, if your administrator has been updated and is requesting\nadditional uses-policy flags, the user will be presented with the new list.  New policies\nwill not be available to the updated administrator until the user has accepted the new list.</p>\n<p>Defaults to: <code>&quot;android.app.action.ADD_DEVICE_ADMIN&quot;</code></p></div></div></div><div id='property-ACTION_ADMIN_POLICY_COMPLIANCE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_ADMIN_POLICY_COMPLIANCE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_ADMIN_POLICY_COMPLIANCE' class='name expandable'>ACTION_ADMIN_POLICY_COMPLIANCE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: Starts the administrator to show policy compliance for the provisioning. ...</div><div class='long'><p>Activity action: Starts the administrator to show policy compliance for the provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.action.ADMIN_POLICY_COMPLIANCE&quot;</code></p></div></div></div><div id='property-ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED' class='name expandable'>ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast Action: Sent after application delegation scopes are changed. ...</div><div class='long'><p>Broadcast Action: Sent after application delegation scopes are changed. The new delegation\nscopes will be sent in an {@code ArrayList<String>} extra identified by the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_DELEGATION_SCOPES\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_DELEGATION_SCOPES\" class=\"docClass\">EXTRA_DELEGATION_SCOPES</a> key.</String></p>\n\n<p class=”note”> Note: This is a protected intent that can only be sent by the system.</p>\n\n<p>Defaults to: <code>&quot;android.app.action.APPLICATION_DELEGATION_SCOPES_CHANGED&quot;</code></p></div></div></div><div id='property-ACTION_DEVICE_ADMIN_SERVICE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_DEVICE_ADMIN_SERVICE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_DEVICE_ADMIN_SERVICE' class='name expandable'>ACTION_DEVICE_ADMIN_SERVICE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Service action: Action for a service that device owner and profile owner can optionally\nown. ...</div><div class='long'><p>Service action: Action for a service that device owner and profile owner can optionally\nown.  If a device owner or a profile owner has such a service, the system tries to keep\na bound connection to it, in order to keep their process always running.\nThe service must be protected with the android.Manifest.permission.BIND_DEVICE_ADMIN\npermission.</p>\n<p>Defaults to: <code>&quot;android.app.action.DEVICE_ADMIN_SERVICE&quot;</code></p></div></div></div><div id='property-ACTION_DEVICE_OWNER_CHANGED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_DEVICE_OWNER_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_DEVICE_OWNER_CHANGED' class='name expandable'>ACTION_DEVICE_OWNER_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast action: sent when the device owner is set, changed or cleared. ...</div><div class='long'><p>Broadcast action: sent when the device owner is set, changed or cleared.</p>\n\n<p>This broadcast is sent only to the primary user.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a>\n@see DevicePolicyManager#transferOwnership(ComponentName, ComponentName, PersistableBundle)</p>\n<p>Defaults to: <code>&quot;android.app.action.DEVICE_OWNER_CHANGED&quot;</code></p></div></div></div><div id='property-ACTION_GET_PROVISIONING_MODE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_GET_PROVISIONING_MODE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_GET_PROVISIONING_MODE' class='name expandable'>ACTION_GET_PROVISIONING_MODE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: Starts the administrator to get the mode for the provisioning. ...</div><div class='long'><p>Activity action: Starts the administrator to get the mode for the provisioning.\nThis intent may contain the following extras:</p>\n\n<ul>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE\" class=\"docClass\">EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE</a></li>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_IMEI\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_IMEI\" class=\"docClass\">EXTRA_PROVISIONING_IMEI</a></li>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SERIAL_NUMBER\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SERIAL_NUMBER\" class=\"docClass\">EXTRA_PROVISIONING_SERIAL_NUMBER</a></li>\n</ul>\n\n\n\n\n<p><p>The target activity should return one of the following values in\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_MODE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_MODE\" class=\"docClass\">EXTRA_PROVISIONING_MODE</a> as result:\n<ul>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_FULLY_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_FULLY_MANAGED_DEVICE\" class=\"docClass\">PROVISIONING_MODE_FULLY_MANAGED_DEVICE</a></li>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_MANAGED_PROFILE\" class=\"docClass\">PROVISIONING_MODE_MANAGED_PROFILE</a></li>\n</ul></p>\n\n<p><p>If performing fully-managed device provisioning and the admin app desires to show its\nown education screens, the target activity can additionally return\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS\" class=\"docClass\">EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS</a> set to <code>true</code>.</p>\n\n<p><p>The target activity may also return the account that needs to be migrated from primary\nuser to managed profile in case of a profile owner provisioning in\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" class=\"docClass\">EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE</a> as result.</p>\n<p>Defaults to: <code>&quot;android.app.action.GET_PROVISIONING_MODE&quot;</code></p></div></div></div><div id='property-ACTION_MANAGED_PROFILE_PROVISIONED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_MANAGED_PROFILE_PROVISIONED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_MANAGED_PROFILE_PROVISIONED' class='name expandable'>ACTION_MANAGED_PROFILE_PROVISIONED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast Action: This broadcast is sent to indicate that provisioning of a managed profile\nhas completed successfully. ...</div><div class='long'><p>Broadcast Action: This broadcast is sent to indicate that provisioning of a managed profile\nhas completed successfully.</p>\n\n<p><p>The broadcast is limited to the primary profile, to the app specified in the provisioning\nintent with action <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a>.</p>\n\n<p><p>This intent will contain the following extras\n<ul>\n<li>Intent.EXTRA_USER, corresponds to the UserHandle of the managed\nprofile.</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" class=\"docClass\">EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE</a>, corresponds to the account requested to\nbe migrated at provisioning time, if any.</li>\n</ul></p>\n<p>Defaults to: <code>&quot;android.app.action.MANAGED_PROFILE_PROVISIONED&quot;</code></p></div></div></div><div id='property-ACTION_PROFILE_OWNER_CHANGED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_PROFILE_OWNER_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROFILE_OWNER_CHANGED' class='name expandable'>ACTION_PROFILE_OWNER_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast action: sent when the profile owner is set, changed or cleared. ...</div><div class='long'><p>Broadcast action: sent when the profile owner is set, changed or cleared.</p>\n\n<p>This broadcast is sent only to the user managed by the new profile owner.\n@see DevicePolicyManager#transferOwnership(ComponentName, ComponentName, PersistableBundle)</p>\n<p>Defaults to: <code>&quot;android.app.action.PROFILE_OWNER_CHANGED&quot;</code></p></div></div></div><div id='property-ACTION_PROVISIONING_SUCCESSFUL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_PROVISIONING_SUCCESSFUL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISIONING_SUCCESSFUL' class='name expandable'>ACTION_PROVISIONING_SUCCESSFUL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: This activity action is sent to indicate that provisioning of a managed\nprofile or managed device ha...</div><div class='long'><p>Activity action: This activity action is sent to indicate that provisioning of a managed\nprofile or managed device has completed successfully. It'll be sent at the same time as\n<a href=\"#!/api/android.app.admin.DeviceAdminReceiver-property-ACTION_PROFILE_PROVISIONING_COMPLETE\" rel=\"android.app.admin.DeviceAdminReceiver-property-ACTION_PROFILE_PROVISIONING_COMPLETE\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.ACTION_PROFILE_PROVISIONING_COMPLETE</a> broadcast but this will be\ndelivered faster as it's an activity intent.</p>\n\n<p><p>The intent is only sent to the new device or profile owner.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a></p>\n<p>Defaults to: <code>&quot;android.app.action.PROVISIONING_SUCCESSFUL&quot;</code></p></div></div></div><div id='property-ACTION_PROVISION_MANAGED_DEVICE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE' class='name expandable'>ACTION_PROVISION_MANAGED_DEVICE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: Starts the provisioning flow which sets up a managed device. ...</div><div class='long'><p>Activity action: Starts the provisioning flow which sets up a managed device.\nMust be started with int).</p>\n\n<p><p> During device owner provisioning a device admin app is set as the owner of the device.\nA device owner has full control over the device. The device owner can not be modified by the\nuser.</p>\n\n<p><p> A typical use case would be a device that is owned by a company, but used by either an\nemployee or client.</p>\n\n<p><p> An intent with this action can be sent only on an unprovisioned device.\nIt is possible to check if provisioning is allowed or not by querying the method\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isProvisioningAllowed\" rel=\"android.app.admin.DevicePolicyManager-method-isProvisioningAllowed\" class=\"docClass\">isProvisioningAllowed</a>(String).</p>\n\n<p><p>The intent contains the following extras:\n<ul>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME</a></li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_ENCRYPTION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_ENCRYPTION\" class=\"docClass\">EXTRA_PROVISIONING_SKIP_ENCRYPTION</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED\" class=\"docClass\">EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE\" class=\"docClass\">EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOGO_URI\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOGO_URI\" class=\"docClass\">EXTRA_PROVISIONING_LOGO_URI</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_MAIN_COLOR\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_MAIN_COLOR\" class=\"docClass\">EXTRA_PROVISIONING_MAIN_COLOR</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS\" class=\"docClass\">EXTRA_PROVISIONING_DISCLAIMERS</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS\" class=\"docClass\">EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS</a>, optional</li>\n</ul></p>\n\n<p><p>When device owner provisioning has completed, an intent of the type\n<a href=\"#!/api/android.app.admin.DeviceAdminReceiver-property-ACTION_PROFILE_PROVISIONING_COMPLETE\" rel=\"android.app.admin.DeviceAdminReceiver-property-ACTION_PROFILE_PROVISIONING_COMPLETE\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.ACTION_PROFILE_PROVISIONING_COMPLETE</a> is broadcast to the\ndevice owner.</p>\n\n<p><p>From version android.os.Build.VERSION_CODES.O, when device owner provisioning has\ncompleted, along with the above broadcast, activity intent\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISIONING_SUCCESSFUL\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISIONING_SUCCESSFUL\" class=\"docClass\">ACTION_PROVISIONING_SUCCESSFUL</a> will also be sent to the device owner.</p>\n\n<p><p>If provisioning fails, the device is factory reset.</p>\n\n<p><p>A result code of android.app.Activity.RESULT_OK implies that the synchronous part\nof the provisioning flow was successful, although this doesn't guarantee the full flow will\nsucceed. Conversely a result code of android.app.Activity.RESULT_CANCELED implies\nthat the user backed-out of provisioning, or some precondition for provisioning wasn't met.</p>\n<p>Defaults to: <code>&quot;android.app.action.PROVISION_MANAGED_DEVICE&quot;</code></p></div></div></div><div id='property-ACTION_PROVISION_MANAGED_PROFILE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE' class='name expandable'>ACTION_PROVISION_MANAGED_PROFILE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: Starts the provisioning flow which sets up a managed profile. ...</div><div class='long'><p>Activity action: Starts the provisioning flow which sets up a managed profile.</p>\n\n<p><p>A managed profile allows data separation for example for the usage of a\ndevice as a personal and corporate device. The user which provisioning is started from and\nthe managed profile share a launcher.</p>\n\n<p><p>This intent will typically be sent by a mobile device management application (MDM).\nProvisioning adds a managed profile and sets the MDM as the profile owner who has full\ncontrol over the profile.</p>\n\n<p><p>It is possible to check if provisioning is allowed or not by querying the method\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isProvisioningAllowed\" rel=\"android.app.admin.DevicePolicyManager-method-isProvisioningAllowed\" class=\"docClass\">isProvisioningAllowed</a>(String).</p>\n\n<p><p>In version android.os.Build.VERSION_CODES.LOLLIPOP, this intent must contain the\nextra <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME</a>.\nAs of android.os.Build.VERSION_CODES.M, it should contain the extra\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME</a> instead, although specifying only\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME</a> is still supported.</p>\n\n<p><p>The intent may also contain the following extras:\n<ul>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" class=\"docClass\">EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE</a>, optional </li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_ENCRYPTION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_ENCRYPTION\" class=\"docClass\">EXTRA_PROVISIONING_SKIP_ENCRYPTION</a>, optional, supported from\nandroid.os.Build.VERSION_CODES.N</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE\" class=\"docClass\">EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOGO_URI\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOGO_URI\" class=\"docClass\">EXTRA_PROVISIONING_LOGO_URI</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_MAIN_COLOR\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_MAIN_COLOR\" class=\"docClass\">EXTRA_PROVISIONING_MAIN_COLOR</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_USER_CONSENT\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_USER_CONSENT\" class=\"docClass\">EXTRA_PROVISIONING_SKIP_USER_CONSENT</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION\" class=\"docClass\">EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS\" class=\"docClass\">EXTRA_PROVISIONING_DISCLAIMERS</a>, optional</li>\n</ul></p>\n\n<p><p>When managed provisioning has completed, broadcasts are sent to the application specified\nin the provisioning intent. The\n<a href=\"#!/api/android.app.admin.DeviceAdminReceiver-property-ACTION_PROFILE_PROVISIONING_COMPLETE\" rel=\"android.app.admin.DeviceAdminReceiver-property-ACTION_PROFILE_PROVISIONING_COMPLETE\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.ACTION_PROFILE_PROVISIONING_COMPLETE</a> broadcast is sent in the\nmanaged profile and the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_MANAGED_PROFILE_PROVISIONED\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_MANAGED_PROFILE_PROVISIONED\" class=\"docClass\">ACTION_MANAGED_PROFILE_PROVISIONED</a> broadcast is sent in\nthe primary profile.</p>\n\n<p><p>From version android.os.Build.VERSION_CODES.O, when managed provisioning has\ncompleted, along with the above broadcast, activity intent\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISIONING_SUCCESSFUL\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISIONING_SUCCESSFUL\" class=\"docClass\">ACTION_PROVISIONING_SUCCESSFUL</a> will also be sent to the profile owner.</p>\n\n<p><p>If provisioning fails, the managedProfile is removed so the device returns to its\nprevious state.</p>\n\n<p><p>If launched with int) a\nresult code of android.app.Activity.RESULT_OK implies that the synchronous part of\nthe provisioning flow was successful, although this doesn't guarantee the full flow will\nsucceed. Conversely a result code of android.app.Activity.RESULT_CANCELED implies\nthat the user backed-out of provisioning, or some precondition for provisioning wasn't met.</p>\n<p>Defaults to: <code>&quot;android.app.action.PROVISION_MANAGED_PROFILE&quot;</code></p></div></div></div><div id='property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD' class='name expandable'>ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: have the user enter a new password for the parent profile. ...</div><div class='long'><p>Activity action: have the user enter a new password for the parent profile.\nIf the intent is launched from within a managed profile, this will trigger\nentering a new password for the parent of the profile. In all other cases\nthe behaviour is identical to <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a>.</p>\n<p>Defaults to: <code>&quot;android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD&quot;</code></p></div></div></div><div id='property-ACTION_SET_NEW_PASSWORD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD' class='name expandable'>ACTION_SET_NEW_PASSWORD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: have the user enter a new password. ...</div><div class='long'><p>Activity action: have the user enter a new password.</p>\n\n<p><p>For admin apps, this activity should be launched after using int), or int) to have the user enter a new password that\nmeets the current requirements. You can use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isActivePasswordSufficient\" rel=\"android.app.admin.DevicePolicyManager-method-isActivePasswordSufficient\" class=\"docClass\">isActivePasswordSufficient</a>() to\ndetermine whether you need to have the user select a new password in order to meet the\ncurrent constraints. Upon being resumed from this activity, you can check the new\npassword characteristics to see if they are sufficient.</p>\n\n<p><p>Non-admin apps can use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" rel=\"android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" class=\"docClass\">getPasswordComplexity</a>() to check the current screen lock\ncomplexity, and use this activity with extra <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PASSWORD_COMPLEXITY\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PASSWORD_COMPLEXITY\" class=\"docClass\">EXTRA_PASSWORD_COMPLEXITY</a> to suggest\nto users how complex the app wants the new screen lock to be. Note that both <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" rel=\"android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" class=\"docClass\">getPasswordComplexity</a>() and the extra <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PASSWORD_COMPLEXITY\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PASSWORD_COMPLEXITY\" class=\"docClass\">EXTRA_PASSWORD_COMPLEXITY</a> require the\ncalling app to have the permission permission.REQUEST_PASSWORD_COMPLEXITY.</p>\n\n<p><p>If the intent is launched from within a managed profile with a profile\nowner built against android.os.Build.VERSION_CODES.M or before,\nthis will trigger entering a new password for the parent of the profile.\nFor all other cases it will trigger entering a new password for the user\nor profile it is launched from.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a></p>\n<p>Defaults to: <code>&quot;android.app.action.SET_NEW_PASSWORD&quot;</code></p></div></div></div><div id='property-ACTION_START_ENCRYPTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_START_ENCRYPTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_START_ENCRYPTION' class='name expandable'>ACTION_START_ENCRYPTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Activity action: begin the process of encrypting data on the device. ...</div><div class='long'><p>Activity action: begin the process of encrypting data on the device.  This activity should\nbe launched after using <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setStorageEncryption\" rel=\"android.app.admin.DevicePolicyManager-method-setStorageEncryption\" class=\"docClass\">setStorageEncryption</a> to request encryption be activated.\nAfter resuming from this activity, use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getStorageEncryption\" rel=\"android.app.admin.DevicePolicyManager-method-getStorageEncryption\" class=\"docClass\">getStorageEncryption</a>\nto check encryption status.  However, on some devices this activity may never return, as\nit may trigger a reboot and in some cases a complete data wipe of the device.</p>\n<p>Defaults to: <code>&quot;android.app.action.START_ENCRYPTION&quot;</code></p></div></div></div><div id='property-ACTION_SYSTEM_UPDATE_POLICY_CHANGED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ACTION_SYSTEM_UPDATE_POLICY_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SYSTEM_UPDATE_POLICY_CHANGED' class='name expandable'>ACTION_SYSTEM_UPDATE_POLICY_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast action: notify that a new local system update policy has been set by the device\nowner. ...</div><div class='long'><p>Broadcast action: notify that a new local system update policy has been set by the device\nowner. The new policy can be retrieved by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getSystemUpdatePolicy\" rel=\"android.app.admin.DevicePolicyManager-method-getSystemUpdatePolicy\" class=\"docClass\">getSystemUpdatePolicy</a>().</p>\n<p>Defaults to: <code>&quot;android.app.action.SYSTEM_UPDATE_POLICY_CHANGED&quot;</code></p></div></div></div><div id='property-DELEGATION_APP_RESTRICTIONS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS' class='name expandable'>DELEGATION_APP_RESTRICTIONS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Delegation of application restrictions management. ...</div><div class='long'><p>Delegation of application restrictions management. This scope grants access to the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setApplicationRestrictions\" rel=\"android.app.admin.DevicePolicyManager-method-setApplicationRestrictions\" class=\"docClass\">setApplicationRestrictions</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getApplicationRestrictions\" rel=\"android.app.admin.DevicePolicyManager-method-getApplicationRestrictions\" class=\"docClass\">getApplicationRestrictions</a> APIs.</p>\n<p>Defaults to: <code>&quot;delegation-app-restrictions&quot;</code></p></div></div></div><div id='property-DELEGATION_BLOCK_UNINSTALL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_BLOCK_UNINSTALL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_BLOCK_UNINSTALL' class='name expandable'>DELEGATION_BLOCK_UNINSTALL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Delegation of application uninstall block. ...</div><div class='long'><p>Delegation of application uninstall block. This scope grants access to the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setUninstallBlocked\" rel=\"android.app.admin.DevicePolicyManager-method-setUninstallBlocked\" class=\"docClass\">setUninstallBlocked</a> API.</p>\n<p>Defaults to: <code>&quot;delegation-block-uninstall&quot;</code></p></div></div></div><div id='property-DELEGATION_CERT_INSTALL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_CERT_INSTALL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL' class='name expandable'>DELEGATION_CERT_INSTALL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Delegation of certificate installation and management. ...</div><div class='long'><p>Delegation of certificate installation and management. This scope grants access to the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getInstalledCaCerts\" rel=\"android.app.admin.DevicePolicyManager-method-getInstalledCaCerts\" class=\"docClass\">getInstalledCaCerts</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-hasCaCertInstalled\" rel=\"android.app.admin.DevicePolicyManager-method-hasCaCertInstalled\" class=\"docClass\">hasCaCertInstalled</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installCaCert\" rel=\"android.app.admin.DevicePolicyManager-method-installCaCert\" class=\"docClass\">installCaCert</a>,\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-uninstallCaCert\" rel=\"android.app.admin.DevicePolicyManager-method-uninstallCaCert\" class=\"docClass\">uninstallCaCert</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-uninstallAllUserCaCerts\" rel=\"android.app.admin.DevicePolicyManager-method-uninstallAllUserCaCerts\" class=\"docClass\">uninstallAllUserCaCerts</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-installKeyPair\" class=\"docClass\">installKeyPair</a> APIs.</p>\n<p>Defaults to: <code>&quot;delegation-cert-install&quot;</code></p></div></div></div><div id='property-DELEGATION_CERT_SELECTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_CERT_SELECTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_SELECTION' class='name expandable'>DELEGATION_CERT_SELECTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Grants access to selection of KeyChain certificates on behalf of requesting apps. ...</div><div class='long'><p>Grants access to selection of KeyChain certificates on behalf of requesting apps.\nOnce granted the app will start receiving\nDelegatedAdminReceiver.onChoosePrivateKeyAlias. The caller (PO/DO) will\nno longer receive <a href=\"#!/api/android.app.admin.DeviceAdminReceiver-method-onChoosePrivateKeyAlias\" rel=\"android.app.admin.DeviceAdminReceiver-method-onChoosePrivateKeyAlias\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.onChoosePrivateKeyAlias</a>.\nThere can be at most one app that has this delegation.\nIf another app already had delegated certificate selection access,\nit will lose the delegation when a new app is delegated.</p>\n\n<p><p> Can be granted by Device Owner or Profile Owner.</p>\n<p>Defaults to: <code>&quot;delegation-cert-selection&quot;</code></p></div></div></div><div id='property-DELEGATION_ENABLE_SYSTEM_APP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_ENABLE_SYSTEM_APP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_ENABLE_SYSTEM_APP' class='name expandable'>DELEGATION_ENABLE_SYSTEM_APP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Delegation for enabling system apps. ...</div><div class='long'><p>Delegation for enabling system apps. This scope grants access to the <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-enableSystemApp\" rel=\"android.app.admin.DevicePolicyManager-method-enableSystemApp\" class=\"docClass\">enableSystemApp</a>\nAPI.</p>\n<p>Defaults to: <code>&quot;delegation-enable-system-app&quot;</code></p></div></div></div><div id='property-DELEGATION_INSTALL_EXISTING_PACKAGE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_INSTALL_EXISTING_PACKAGE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_INSTALL_EXISTING_PACKAGE' class='name expandable'>DELEGATION_INSTALL_EXISTING_PACKAGE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Delegation for installing existing packages. ...</div><div class='long'><p>Delegation for installing existing packages. This scope grants access to the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installExistingPackage\" rel=\"android.app.admin.DevicePolicyManager-method-installExistingPackage\" class=\"docClass\">installExistingPackage</a> API.</p>\n<p>Defaults to: <code>&quot;delegation-install-existing-package&quot;</code></p></div></div></div><div id='property-DELEGATION_KEEP_UNINSTALLED_PACKAGES' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES' class='name expandable'>DELEGATION_KEEP_UNINSTALLED_PACKAGES</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Delegation of management of uninstalled packages. ...</div><div class='long'><p>Delegation of management of uninstalled packages. This scope grants access to the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setKeepUninstalledPackages\" rel=\"android.app.admin.DevicePolicyManager-method-setKeepUninstalledPackages\" class=\"docClass\">setKeepUninstalledPackages</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getKeepUninstalledPackages\" rel=\"android.app.admin.DevicePolicyManager-method-getKeepUninstalledPackages\" class=\"docClass\">getKeepUninstalledPackages</a> APIs.</p>\n<p>Defaults to: <code>&quot;delegation-keep-uninstalled-packages&quot;</code></p></div></div></div><div id='property-DELEGATION_NETWORK_LOGGING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_NETWORK_LOGGING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_NETWORK_LOGGING' class='name expandable'>DELEGATION_NETWORK_LOGGING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Grants access to setNetworkLoggingEnabled, isNetworkLoggingEnabled and\nretrieveNetworkLogs. ...</div><div class='long'><p>Grants access to <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setNetworkLoggingEnabled\" rel=\"android.app.admin.DevicePolicyManager-method-setNetworkLoggingEnabled\" class=\"docClass\">setNetworkLoggingEnabled</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isNetworkLoggingEnabled\" rel=\"android.app.admin.DevicePolicyManager-method-isNetworkLoggingEnabled\" class=\"docClass\">isNetworkLoggingEnabled</a> and\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-retrieveNetworkLogs\" rel=\"android.app.admin.DevicePolicyManager-method-retrieveNetworkLogs\" class=\"docClass\">retrieveNetworkLogs</a>. Once granted the delegated app will start receiving\nDelegatedAdminReceiver.onNetworkLogsAvailable() callback, and Device owner will no longer\nreceive the DeviceAdminReceiver.onNetworkLogsAvailable() callback.\nThere can be at most one app that has this delegation.\nIf another app already had delegated network logging access,\nit will lose the delegation when a new app is delegated.</p>\n\n<p><p> Can only be granted by Device Owner.</p>\n<p>Defaults to: <code>&quot;delegation-network-logging&quot;</code></p></div></div></div><div id='property-DELEGATION_PACKAGE_ACCESS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS' class='name expandable'>DELEGATION_PACKAGE_ACCESS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Delegation of package access state. ...</div><div class='long'><p>Delegation of package access state. This scope grants access to the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isApplicationHidden\" rel=\"android.app.admin.DevicePolicyManager-method-isApplicationHidden\" class=\"docClass\">isApplicationHidden</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setApplicationHidden\" rel=\"android.app.admin.DevicePolicyManager-method-setApplicationHidden\" class=\"docClass\">setApplicationHidden</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isPackageSuspended\" rel=\"android.app.admin.DevicePolicyManager-method-isPackageSuspended\" class=\"docClass\">isPackageSuspended</a>, and\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPackagesSuspended\" rel=\"android.app.admin.DevicePolicyManager-method-setPackagesSuspended\" class=\"docClass\">setPackagesSuspended</a> APIs.</p>\n<p>Defaults to: <code>&quot;delegation-package-access&quot;</code></p></div></div></div><div id='property-DELEGATION_PERMISSION_GRANT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT' class='name expandable'>DELEGATION_PERMISSION_GRANT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Delegation of permission policy and permission grant state. ...</div><div class='long'><p>Delegation of permission policy and permission grant state. This scope grants access to the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPermissionPolicy\" rel=\"android.app.admin.DevicePolicyManager-method-setPermissionPolicy\" class=\"docClass\">setPermissionPolicy</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getPermissionGrantState\" rel=\"android.app.admin.DevicePolicyManager-method-getPermissionGrantState\" class=\"docClass\">getPermissionGrantState</a>,\nand <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPermissionGrantState\" rel=\"android.app.admin.DevicePolicyManager-method-setPermissionGrantState\" class=\"docClass\">setPermissionGrantState</a> APIs.</p>\n<p>Defaults to: <code>&quot;delegation-permission-grant&quot;</code></p></div></div></div><div id='property-ENCRYPTION_STATUS_ACTIVATING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVATING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVATING' class='name expandable'>ENCRYPTION_STATUS_ACTIVATING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Result code for getStorageEncryptionStatus:\nindicating that encryption is not currently active, but is currently\nbein...</div><div class='long'><p>Result code for getStorageEncryptionStatus:\nindicating that encryption is not currently active, but is currently\nbeing activated.  This is only reported by devices that support\nencryption of data and only when the storage is currently\nundergoing a process of becoming encrypted.  A device that must reboot and/or wipe data\nto become encrypted will never return this value.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-ENCRYPTION_STATUS_ACTIVE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE' class='name expandable'>ENCRYPTION_STATUS_ACTIVE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Result code for setStorageEncryption and getStorageEncryptionStatus:\nindicating that encryption is active. ...</div><div class='long'><p>Result code for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setStorageEncryption\" rel=\"android.app.admin.DevicePolicyManager-method-setStorageEncryption\" class=\"docClass\">setStorageEncryption</a> and getStorageEncryptionStatus:\nindicating that encryption is active.</p>\n\n<p><p>\nAlso see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_PER_USER\" rel=\"android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_PER_USER\" class=\"docClass\">ENCRYPTION_STATUS_ACTIVE_PER_USER</a>.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY' class='name expandable'>ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Result code for getStorageEncryptionStatus:\nindicating that encryption is active, but an encryption key has not\nbeen ...</div><div class='long'><p>Result code for getStorageEncryptionStatus:\nindicating that encryption is active, but an encryption key has not\nbeen set by the user.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-ENCRYPTION_STATUS_ACTIVE_PER_USER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_PER_USER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_PER_USER' class='name expandable'>ENCRYPTION_STATUS_ACTIVE_PER_USER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Result code for getStorageEncryptionStatus:\nindicating that encryption is active and the encryption key is tied to th...</div><div class='long'><p>Result code for getStorageEncryptionStatus:\nindicating that encryption is active and the encryption key is tied to the user or profile.</p>\n\n<p><p>\nThis value is only returned to apps targeting API level 24 and above. For apps targeting\nearlier API levels, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE\" rel=\"android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE\" class=\"docClass\">ENCRYPTION_STATUS_ACTIVE</a> is returned, even if the\nencryption key is specific to the user or profile.</p>\n<p>Defaults to: <code>&quot;5&quot;</code></p></div></div></div><div id='property-ENCRYPTION_STATUS_INACTIVE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ENCRYPTION_STATUS_INACTIVE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_INACTIVE' class='name expandable'>ENCRYPTION_STATUS_INACTIVE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Result code for setStorageEncryption and getStorageEncryptionStatus:\nindicating that encryption is supported, but is ...</div><div class='long'><p>Result code for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setStorageEncryption\" rel=\"android.app.admin.DevicePolicyManager-method-setStorageEncryption\" class=\"docClass\">setStorageEncryption</a> and getStorageEncryptionStatus:\nindicating that encryption is supported, but is not currently active.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-ENCRYPTION_STATUS_UNSUPPORTED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ENCRYPTION_STATUS_UNSUPPORTED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_UNSUPPORTED' class='name expandable'>ENCRYPTION_STATUS_UNSUPPORTED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Result code for setStorageEncryption and getStorageEncryptionStatus:\nindicating that encryption is not supported. ...</div><div class='long'><p>Result code for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setStorageEncryption\" rel=\"android.app.admin.DevicePolicyManager-method-setStorageEncryption\" class=\"docClass\">setStorageEncryption</a> and getStorageEncryptionStatus:\nindicating that encryption is not supported.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-EXTRA_ADD_EXPLANATION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_ADD_EXPLANATION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_ADD_EXPLANATION' class='name expandable'>EXTRA_ADD_EXPLANATION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An optional CharSequence providing additional explanation for why the\nadmin is being added. ...</div><div class='long'><p>An optional CharSequence providing additional explanation for why the\nadmin is being added.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_ADD_DEVICE_ADMIN\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_ADD_DEVICE_ADMIN\" class=\"docClass\">ACTION_ADD_DEVICE_ADMIN</a></p>\n<p>Defaults to: <code>&quot;android.app.extra.ADD_EXPLANATION&quot;</code></p></div></div></div><div id='property-EXTRA_DELEGATION_SCOPES' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_DELEGATION_SCOPES' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_DELEGATION_SCOPES' class='name expandable'>EXTRA_DELEGATION_SCOPES</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An {@code ArrayList} corresponding to the delegation scopes given to an app in the\nACTION_APPLICATION_DELEGATION_SCOP...</div><div class='long'><p>An {@code ArrayList<String>} corresponding to the delegation scopes given to an app in the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED\" class=\"docClass\">ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED</a> broadcast.</String></p>\n<p>Defaults to: <code>&quot;android.app.extra.DELEGATION_SCOPES&quot;</code></p></div></div></div><div id='property-EXTRA_DEVICE_ADMIN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_DEVICE_ADMIN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_DEVICE_ADMIN' class='name expandable'>EXTRA_DEVICE_ADMIN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The ComponentName of the administrator component. ...</div><div class='long'><p>The ComponentName of the administrator component.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_ADD_DEVICE_ADMIN\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_ADD_DEVICE_ADMIN\" class=\"docClass\">ACTION_ADD_DEVICE_ADMIN</a></p>\n<p>Defaults to: <code>&quot;android.app.extra.DEVICE_ADMIN&quot;</code></p></div></div></div><div id='property-EXTRA_PASSWORD_COMPLEXITY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PASSWORD_COMPLEXITY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PASSWORD_COMPLEXITY' class='name expandable'>EXTRA_PASSWORD_COMPLEXITY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An integer indicating the complexity level of the new password an app would like the user to\nset when launching the a...</div><div class='long'><p>An integer indicating the complexity level of the new password an app would like the user to\nset when launching the action <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a>.</p>\n\n<p><p>Must be one of\n<ul>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_HIGH\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_HIGH\" class=\"docClass\">PASSWORD_COMPLEXITY_HIGH</a>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_MEDIUM\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_MEDIUM\" class=\"docClass\">PASSWORD_COMPLEXITY_MEDIUM</a>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_LOW\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_LOW\" class=\"docClass\">PASSWORD_COMPLEXITY_LOW</a>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_NONE\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_NONE\" class=\"docClass\">PASSWORD_COMPLEXITY_NONE</a>\n</li></li></li></li></ul></p>\n\n<p><p>If an invalid value is used, it will be treated as <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_NONE\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_NONE\" class=\"docClass\">PASSWORD_COMPLEXITY_NONE</a>.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PASSWORD_COMPLEXITY&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE' class='name expandable'>EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An android.accounts.Account extra holding the account to migrate during managed\nprofile provisioning. ...</div><div class='long'><p>An android.accounts.Account extra holding the account to migrate during managed\nprofile provisioning. If the account supplied is present in the primary user, it will be\ncopied, along with its credentials to the managed profile and removed from the primary user.</p>\n\n<p>Use with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a>.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_ACCOUNT_TO_MIGRATE&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE' class='name expandable'>EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A android.os.Parcelable extra of type android.os.PersistableBundle that\nallows a mobile device management application...</div><div class='long'><p>A android.os.Parcelable extra of type android.os.PersistableBundle that\nallows a mobile device management application or NFC programmer application which starts\nmanaged provisioning to pass data to the management application instance after provisioning.</p>\n\n<p><p>\nIf used with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a> it can be used by the application that\nsends the intent to pass data to itself on the newly created profile.\nIf used with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a> it allows passing data to the same\ninstance of the app on the primary user.\nStarting from android.os.Build.VERSION_CODES.M, if used with\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> as part of NFC managed device provisioning, the NFC\nmessage should contain a stringified java.util.Properties instance, whose string\nproperties will be converted into a android.os.PersistableBundle and passed to the\nmanagement application after provisioning.</p>\n\n<p><p>\nIn both cases the application receives the data in\n<a href=\"#!/api/android.app.admin.DeviceAdminReceiver-method-onProfileProvisioningComplete\" rel=\"android.app.admin.DeviceAdminReceiver-method-onProfileProvisioningComplete\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.onProfileProvisioningComplete</a> via an intent with the action\n<a href=\"#!/api/android.app.admin.DeviceAdminReceiver-property-ACTION_PROFILE_PROVISIONING_COMPLETE\" rel=\"android.app.admin.DeviceAdminReceiver-property-ACTION_PROFILE_PROVISIONING_COMPLETE\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.ACTION_PROFILE_PROVISIONING_COMPLETE</a>. The bundle is not changed\nduring the managed provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME' class='name expandable'>EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A ComponentName extra indicating the device admin receiver of the mobile device management\napplication that will be s...</div><div class='long'><p>A ComponentName extra indicating the device admin receiver of the mobile device management\napplication that will be set as the profile owner or device owner and active admin.</p>\n\n<p><p>If an application starts provisioning directly via an intent with action\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a> or\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a> the package name of this\ncomponent has to match the package name of the application that started provisioning.</p>\n\n<p><p>This component is set as device owner and active admin when device owner provisioning is\nstarted by an intent with action <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a> or by an NFC\nmessage containing an NFC record with MIME type\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a>. For the NFC record, the component name must be\nflattened to a string, via ComponentName.flattenToShortString().</p>\n\n<p>@see DeviceAdminReceiver</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE' class='name expandable'>EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An int extra holding a minimum required version code for the device admin package. ...</div><div class='long'><p>An int extra holding a minimum required version code for the device admin package. If the\ndevice admin is already installed on the device, it will only be re-downloaded from\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION</a> if the version of the\ninstalled package is less than this version code.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM' class='name expandable'>EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the URL-safe base64 encoded SHA-256 hash of the file at download\nlocation specified in EXTRA_P...</div><div class='long'><p>A String extra holding the URL-safe base64 encoded SHA-256 hash of the file at download\nlocation specified in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION</a>.</p>\n\n<p><p>Either this extra or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM</a> must be\npresent. The provided checksum must match the checksum of the file at the download\nlocation. If the checksum doesn't match an error will be shown to the user and the user will\nbe asked to factory reset the device.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n\n<p><p><strong>Note:</strong> for devices running android.os.Build.VERSION_CODES.LOLLIPOP\nand android.os.Build.VERSION_CODES.LOLLIPOP_MR1 only SHA-1 hash is supported.\nStarting from android.os.Build.VERSION_CODES.M, this parameter accepts SHA-256 in\naddition to SHA-1. From android.os.Build.VERSION_CODES.Q, only SHA-256 hash is\nsupported.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER' class='name expandable'>EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding a http cookie header which should be used in the http request to the\nurl specified in EXTRA_PR...</div><div class='long'><p>A String extra holding a http cookie header which should be used in the http request to the\nurl specified in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION</a>.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION' class='name expandable'>EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding a url that specifies the download location of the device admin\npackage. ...</div><div class='long'><p>A String extra holding a url that specifies the download location of the device admin\npackage. When not provided it is assumed that the device admin package is already installed.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME' class='name expandable'>EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>A String extra holding the package name of the mobile device management application that\nwill be set as the profile o...</div><div class='long'><p>A String extra holding the package name of the mobile device management application that\nwill be set as the profile owner or device owner.</p>\n\n<p><p>If an application starts provisioning directly via an intent with action\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a> this package has to match the package name of the\napplication that started provisioning. The package will be set as profile owner in that case.</p>\n\n<p><p>This package is set as device owner when device owner provisioning is started by an NFC\nmessage containing an NFC record with MIME type <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a>.</p>\n\n<p><p> When this extra is set, the application must have exactly one device admin receiver.\nThis receiver will be set as the profile or device owner and active admin.</p>\n\n<p>@see DeviceAdminReceiver</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME</a>. This extra is still\nsupported, but only if there is only one device admin receiver in the package that requires\nthe permission android.Manifest.permission.BIND_DEVICE_ADMIN.</p>\n\n        </div>\n</div></div></div><div id='property-EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM' class='name expandable'>EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the URL-safe base64 encoded SHA-256 checksum of any signature of the\nandroid package archive a...</div><div class='long'><p>A String extra holding the URL-safe base64 encoded SHA-256 checksum of any signature of the\nandroid package archive at the download location specified in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION</a>.</p>\n\n<p><p>The signatures of an android package archive can be obtained using\nandroid.content.pm.PackageManager.getPackageArchiveInfo with flag\nandroid.content.pm.PackageManager.GET_SIGNATURES.</p>\n\n<p><p>Either this extra or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM</a> must be\npresent. The provided checksum must match the checksum of any signature of the file at\nthe download location. If the checksum does not match an error will be shown to the user and\nthe user will be asked to factory reset the device.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DISCLAIMERS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS' class='name expandable'>EXTRA_PROVISIONING_DISCLAIMERS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A Bundle[] extra consisting of list of disclaimer headers and disclaimer contents. ...</div><div class='long'><p>A Bundle[] extra consisting of list of disclaimer headers and disclaimer contents.\nEach Bundle must have both <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_HEADER\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_HEADER\" class=\"docClass\">EXTRA_PROVISIONING_DISCLAIMER_HEADER</a>\nas disclaimer header, and <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_CONTENT\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_CONTENT\" class=\"docClass\">EXTRA_PROVISIONING_DISCLAIMER_CONTENT</a> as disclaimer\ncontent.</p>\n\n<p><p> The extra typically contains one disclaimer from the company of mobile device\nmanagement application (MDM), and one disclaimer from the organization.</p>\n\n<p><p> Call Parcelable[]) to put the Bundle[]</p>\n\n<p><p> Maximum 3 key-value pairs can be specified. The rest will be ignored.</p>\n\n<p><p> Use in an intent with action <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a> or\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a></p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DISCLAIMERS&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DISCLAIMER_CONTENT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_CONTENT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_CONTENT' class='name expandable'>EXTRA_PROVISIONING_DISCLAIMER_CONTENT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A Uri extra pointing to disclaimer content. ...</div><div class='long'><p>A Uri extra pointing to disclaimer content.</p>\n\n<h5>The following URI schemes are accepted:</h5>\n\n\n<ul>\n<li>content (android.content.ContentResolver.SCHEME_CONTENT)</li>\n<li>android.resource (android.content.ContentResolver.SCHEME_ANDROID_RESOURCE)</li>\n</ul>\n\n\n\n\n<p><p> Styled text is supported in the disclaimer content. The content is parsed by\nandroid.text.Html.fromHtml(String) and displayed in a\nandroid.widget.TextView.</p>\n\n<p><p> If a <code>content:</code> URI is passed, URI is passed, the intent should have the flag\nIntent.FLAG_GRANT_READ_URI_PERMISSION and the uri should be added to the\nandroid.content.ClipData of the intent too.</p>\n\n<p><p> Use in Bundle <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS\" class=\"docClass\">EXTRA_PROVISIONING_DISCLAIMERS</a></p>\n\n<p><p> System app, i.e. application with ApplicationInfo.FLAG_SYSTEM, can also insert a\ndisclaimer by declaring an application-level meta-data in {@code AndroidManifest.xml}.\nMust use it with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_HEADER\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_HEADER\" class=\"docClass\">EXTRA_PROVISIONING_DISCLAIMER_HEADER</a>. Here is the example:</p>\n\n<p><pre> &lt;meta-data\n     android:name=\"android.app.extra.PROVISIONING_DISCLAIMER_CONTENT\"\n     android:resource=\"@string/disclaimer_content\"\n/&gt;</pre></p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DISCLAIMER_CONTENT&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_DISCLAIMER_HEADER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_HEADER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_HEADER' class='name expandable'>EXTRA_PROVISIONING_DISCLAIMER_HEADER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra of localized disclaimer header. ...</div><div class='long'><p>A String extra of localized disclaimer header.</p>\n\n<p><p> The extra is typically the company name of mobile device management application (MDM)\nor the organization name.</p>\n\n<p><p> Use in Bundle <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMERS\" class=\"docClass\">EXTRA_PROVISIONING_DISCLAIMERS</a></p>\n\n<p><p> System app, i.e. application with ApplicationInfo.FLAG_SYSTEM, can also insert a\ndisclaimer by declaring an application-level meta-data in {@code AndroidManifest.xml}.\nMust use it with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_CONTENT\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DISCLAIMER_CONTENT\" class=\"docClass\">EXTRA_PROVISIONING_DISCLAIMER_CONTENT</a>. Here is the example:</p>\n\n<p><pre> &lt;meta-data\n     android:name=\"android.app.extra.PROVISIONING_DISCLAIMER_HEADER\"\n     android:resource=\"@string/disclaimer_header\"\n/&gt;</pre></p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_DISCLAIMER_HEADER&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_EMAIL_ADDRESS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_EMAIL_ADDRESS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_EMAIL_ADDRESS' class='name expandable'>EXTRA_PROVISIONING_EMAIL_ADDRESS</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_EMAIL_ADDRESS&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.O, never used while provisioning the\ndevice.</p>\n\n        </div>\n</div></div></div><div id='property-EXTRA_PROVISIONING_IMEI' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_IMEI' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_IMEI' class='name expandable'>EXTRA_PROVISIONING_IMEI</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A string extra holding the IMEI (International Mobile Equipment Identity) of the device. ...</div><div class='long'><p>A string extra holding the IMEI (International Mobile Equipment Identity) of the device.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_IMEI&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION' class='name expandable'>EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Boolean extra to indicate that the migrated account should be kept. ...</div><div class='long'><p>Boolean extra to indicate that the migrated account should be kept. This is used in\nconjunction with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" class=\"docClass\">EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE</a>. If it's set to {@code true},\nthe account will not be removed from the primary user after it is migrated to the newly\ncreated user or profile.</p>\n\n<p><p> Defaults to {@code false}</p>\n\n<p><p> Use with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a> and\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE\" class=\"docClass\">EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE</a></p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED' class='name expandable'>EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A Boolean extra that can be used by the mobile device management application to skip the\ndisabling of system apps dur...</div><div class='long'><p>A Boolean extra that can be used by the mobile device management application to skip the\ndisabling of system apps during provisioning when set to {@code true}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> or an intent with action\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a> that starts device owner provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_LOCALE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_LOCALE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOCALE' class='name expandable'>EXTRA_PROVISIONING_LOCALE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the java.util.Locale that the device will be set to. ...</div><div class='long'><p>A String extra holding the java.util.Locale that the device will be set to.\nFormat: xx_yy, where xx is the language code, and yy the country code.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_LOCALE&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_LOCAL_TIME' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_LOCAL_TIME' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOCAL_TIME' class='name expandable'>EXTRA_PROVISIONING_LOCAL_TIME</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A Long extra holding the wall clock time (in milliseconds) to be set on the device's\nandroid.app.AlarmManager. ...</div><div class='long'><p>A Long extra holding the wall clock time (in milliseconds) to be set on the device's\nandroid.app.AlarmManager.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_LOCAL_TIME&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_LOGO_URI' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_LOGO_URI' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOGO_URI' class='name expandable'>EXTRA_PROVISIONING_LOGO_URI</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A Uri extra pointing to a logo image. ...</div><div class='long'><p>A Uri extra pointing to a logo image. This image will be shown during the\nprovisioning. If this extra is not passed, a default image will be shown.</p>\n\n<h5>The following URI schemes are accepted:</h5>\n\n\n<ul>\n<li>content (android.content.ContentResolver.SCHEME_CONTENT)</li>\n<li>android.resource (android.content.ContentResolver.SCHEME_ANDROID_RESOURCE)</li>\n</ul>\n\n\n\n\n<p><p> It is the responsibility of the caller to provide an image with a reasonable\npixel density for the device.</p>\n\n<p><p> If a content: URI is passed, the intent should have the flag\nIntent.FLAG_GRANT_READ_URI_PERMISSION and the uri should be added to the\nandroid.content.ClipData of the intent too.</p>\n\n<p><p>Use in an intent with action <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a> or\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a></p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_LOGO_URI&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_MAIN_COLOR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_MAIN_COLOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_MAIN_COLOR' class='name expandable'>EXTRA_PROVISIONING_MAIN_COLOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A integer extra indicating the predominant color to show during the provisioning. ...</div><div class='long'><p>A integer extra indicating the predominant color to show during the provisioning.\nRefer to android.graphics.Color for how the color is represented.</p>\n\n<p><p>Use with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a> or\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a>.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_MAIN_COLOR&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_MODE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_MODE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_MODE' class='name expandable'>EXTRA_PROVISIONING_MODE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An intent extra holding the provisioning mode returned by the administrator. ...</div><div class='long'><p>An intent extra holding the provisioning mode returned by the administrator.\nThe value for this extra should be one of the following:</p>\n\n<ul>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_FULLY_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_FULLY_MANAGED_DEVICE\" class=\"docClass\">PROVISIONING_MODE_FULLY_MANAGED_DEVICE</a></li>\n    <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_MANAGED_PROFILE\" class=\"docClass\">PROVISIONING_MODE_MANAGED_PROFILE</a></li>\n</ul>\n\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_MODE&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_SERIAL_NUMBER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_SERIAL_NUMBER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SERIAL_NUMBER' class='name expandable'>EXTRA_PROVISIONING_SERIAL_NUMBER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A string extra holding the serial number of the device. ...</div><div class='long'><p>A string extra holding the serial number of the device.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_SERIAL_NUMBER&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS' class='name expandable'>EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A boolean extra indicating if the education screens from the provisioning flow should be\nskipped. ...</div><div class='long'><p>A boolean extra indicating if the education screens from the provisioning flow should be\nskipped. If unspecified, defaults to {@code false}.</p>\n\n<p><p>This extra can be set in the following ways:\n<ul>\n<li>By the admin app when performing the admin-integrated\nprovisioning flow as a result of the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_GET_PROVISIONING_MODE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_GET_PROVISIONING_MODE\" class=\"docClass\">ACTION_GET_PROVISIONING_MODE</a> activity</li>\n<li>With intent action <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a></li>\n</ul></p>\n\n<p><p>If the education screens are skipped, it is the admin application's responsibility\nto display its own user education screens.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_SKIP_EDUCATION_SCREENS&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_SKIP_ENCRYPTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_ENCRYPTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_ENCRYPTION' class='name expandable'>EXTRA_PROVISIONING_SKIP_ENCRYPTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A boolean extra indicating whether device encryption can be skipped as part of device owner\nor managed profile provis...</div><div class='long'><p>A boolean extra indicating whether device encryption can be skipped as part of device owner\nor managed profile provisioning.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> or an intent with action\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a> that starts device owner provisioning.</p>\n\n<p><p>From android.os.Build.VERSION_CODES.N onwards, this is also supported for an\nintent with action <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a>.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_SKIP_ENCRYPTION&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_SKIP_USER_CONSENT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_USER_CONSENT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_SKIP_USER_CONSENT' class='name expandable'>EXTRA_PROVISIONING_SKIP_USER_CONSENT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A boolean extra indicating if the user consent steps from the provisioning flow should be\nskipped. ...</div><div class='long'><p>A boolean extra indicating if the user consent steps from the provisioning flow should be\nskipped. If unspecified, defaults to {@code false}.</p>\n\n<p>It can only be used by an existing device owner trying to create a managed profile via\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a>. Otherwise it is ignored.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_SKIP_USER_CONSENT&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_TIME_ZONE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_TIME_ZONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_TIME_ZONE' class='name expandable'>EXTRA_PROVISIONING_TIME_ZONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the time zone android.app.AlarmManager that the device\nwill be set to. ...</div><div class='long'><p>A String extra holding the time zone android.app.AlarmManager that the device\nwill be set to.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_TIME_ZONE&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY' class='name expandable'>EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The anonymous identity of the wifi network in EXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>The anonymous identity of the wifi network in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>. This is\nonly used if the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a> is {@code EAP}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump. It can also be used for QR code provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_ANONYMOUS_IDENTITY&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE' class='name expandable'>EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The CA certificate of the wifi network in EXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>The CA certificate of the wifi network in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>. This should\nbe an X.509 certificate Base64 encoded DER format, ie. PEM representation of a certificate\nwithout header, footer and line breaks. <a href=\n\"https://tools.ietf.org/html/rfc7468\"> More information</a> This is only\nused if the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a> is {@code EAP}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump. It can also be used for QR code provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_CA_CERTIFICATE&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_DOMAIN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_DOMAIN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_DOMAIN' class='name expandable'>EXTRA_PROVISIONING_WIFI_DOMAIN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The domain of the wifi network in EXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>The domain of the wifi network in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>. This is only used if\nthe <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a> is {@code EAP}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump. It can also be used for QR code provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_DOMAIN&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_EAP_METHOD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_EAP_METHOD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_EAP_METHOD' class='name expandable'>EXTRA_PROVISIONING_WIFI_EAP_METHOD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The EAP method of the wifi network in EXTRA_PROVISIONING_WIFI_SSID\nand could be one of {@code PEAP}, {@code TLS}, {@c...</div><div class='long'><p>The EAP method of the wifi network in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>\nand could be one of {@code PEAP}, {@code TLS}, {@code TTLS}, {@code PWD}, {@code SIM},\n{@code AKA} or {@code AKA_PRIME}. This is only used if the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a> is {@code EAP}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump. It can also be used for QR code provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_EAP_METHOD&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_HIDDEN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_HIDDEN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_HIDDEN' class='name expandable'>EXTRA_PROVISIONING_WIFI_HIDDEN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A boolean extra indicating whether the wifi network in EXTRA_PROVISIONING_WIFI_SSID\nis hidden or not. ...</div><div class='long'><p>A boolean extra indicating whether the wifi network in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>\nis hidden or not.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_HIDDEN&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_IDENTITY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_IDENTITY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_IDENTITY' class='name expandable'>EXTRA_PROVISIONING_WIFI_IDENTITY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The identity of the wifi network in EXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>The identity of the wifi network in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>. This is only used\nif the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a> is {@code EAP}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump. It can also be used for QR code provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_IDENTITY&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_PAC_URL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PAC_URL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PAC_URL' class='name expandable'>EXTRA_PROVISIONING_WIFI_PAC_URL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the proxy auto-config (PAC) URL for the wifi network in\nEXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>A String extra holding the proxy auto-config (PAC) URL for the wifi network in\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_PAC_URL&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_PASSWORD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PASSWORD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PASSWORD' class='name expandable'>EXTRA_PROVISIONING_WIFI_PASSWORD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the password of the wifi network in\nEXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>A String extra holding the password of the wifi network in\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_PASSWORD&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_PHASE2_AUTH' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PHASE2_AUTH' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PHASE2_AUTH' class='name expandable'>EXTRA_PROVISIONING_WIFI_PHASE2_AUTH</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The phase 2 authentication of the wifi network in EXTRA_PROVISIONING_WIFI_SSID\nand could be one of {@code NONE}, {@co...</div><div class='long'><p>The phase 2 authentication of the wifi network in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>\nand could be one of {@code NONE}, {@code PAP}, {@code MSCHAP}, {@code MSCHAPV2}, {@code GTC},\n{@code SIM}, {@code AKA} or {@code AKA_PRIME}. This is only used if the\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a> is {@code EAP}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump. It can also be used for QR code provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_PHASE2_AUTH&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_PROXY_BYPASS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_BYPASS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_BYPASS' class='name expandable'>EXTRA_PROVISIONING_WIFI_PROXY_BYPASS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the proxy bypass for the wifi network in\nEXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>A String extra holding the proxy bypass for the wifi network in\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_PROXY_BYPASS&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_PROXY_HOST' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_HOST' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_HOST' class='name expandable'>EXTRA_PROVISIONING_WIFI_PROXY_HOST</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the proxy host for the wifi network in\nEXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>A String extra holding the proxy host for the wifi network in\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_PROXY_HOST&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_PROXY_PORT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_PORT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_PORT' class='name expandable'>EXTRA_PROVISIONING_WIFI_PROXY_PORT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An int extra holding the proxy port for the wifi network in\nEXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>An int extra holding the proxy port for the wifi network in\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_PROXY_PORT&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE' class='name expandable'>EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra indicating the security type of the wifi network in\nEXTRA_PROVISIONING_WIFI_SSID and could be one of {...</div><div class='long'><p>A String extra indicating the security type of the wifi network in\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a> and could be one of {@code NONE}, {@code WPA},\n{@code WEP} or {@code EAP}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_SECURITY_TYPE&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_SSID' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID' class='name expandable'>EXTRA_PROVISIONING_WIFI_SSID</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A String extra holding the ssid of the wifi network that should be used during nfc device\nowner provisioning for down...</div><div class='long'><p>A String extra holding the ssid of the wifi network that should be used during nfc device\nowner provisioning for downloading the mobile device management application.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_SSID&quot;</code></p></div></div></div><div id='property-EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE' class='name expandable'>EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The user certificate of the wifi network in EXTRA_PROVISIONING_WIFI_SSID. ...</div><div class='long'><p>The user certificate of the wifi network in <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>. This\nshould be an X.509 certificate and private key Base64 encoded DER format, ie. PEM\nrepresentation of a certificate and key without header, footer and line breaks. <a href=\n\"https://tools.ietf.org/html/rfc7468\"> More information</a> This is only\nused if the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a> is {@code EAP}.</p>\n\n<p><p>Use in an NFC record with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" rel=\"android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC\" class=\"docClass\">MIME_TYPE_PROVISIONING_NFC</a> that starts device owner\nprovisioning via an NFC bump. It can also be used for QR code provisioning.</p>\n<p>Defaults to: <code>&quot;android.app.extra.PROVISIONING_WIFI_USER_CERTIFICATE&quot;</code></p></div></div></div><div id='property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY' class='name expandable'>FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for lockNow(int): also evict the user's credential encryption key from the\nkeyring. ...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-lockNow\" rel=\"android.app.admin.DevicePolicyManager-method-lockNow\" class=\"docClass\">lockNow</a>(int): also evict the user's credential encryption key from the\nkeyring. The user's credential will need to be entered again in order to derive the\ncredential encryption key that will be stored back in the keyring for future use.</p>\n\n<p><p>\nThis flag can only be used by a profile owner when locking a managed profile when\ngetStorageEncryptionStatus returns <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_PER_USER\" rel=\"android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_PER_USER\" class=\"docClass\">ENCRYPTION_STATUS_ACTIVE_PER_USER</a>.\n<p>\nIn order to secure user data, the user will be stopped and restarted so apps should wait\nuntil they are next run to perform further actions.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-FLAG_MANAGED_CAN_ACCESS_PARENT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-FLAG_MANAGED_CAN_ACCESS_PARENT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-FLAG_MANAGED_CAN_ACCESS_PARENT' class='name expandable'>FLAG_MANAGED_CAN_ACCESS_PARENT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag used by addCrossProfileIntentFilter to allow activities in\nthe managed profile to access intents sent from the p...</div><div class='long'><p>Flag used by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-addCrossProfileIntentFilter\" rel=\"android.app.admin.DevicePolicyManager-method-addCrossProfileIntentFilter\" class=\"docClass\">addCrossProfileIntentFilter</a> to allow activities in\nthe managed profile to access intents sent from the parent profile.\nThat is, when an app in the parent profile calls\nActivity.startActivity(Intent), the intent can be resolved by a\nmatching activity in the managed profile.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-FLAG_PARENT_CAN_ACCESS_MANAGED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-FLAG_PARENT_CAN_ACCESS_MANAGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-FLAG_PARENT_CAN_ACCESS_MANAGED' class='name expandable'>FLAG_PARENT_CAN_ACCESS_MANAGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag used by addCrossProfileIntentFilter to allow activities in\nthe parent profile to access intents sent from the ma...</div><div class='long'><p>Flag used by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-addCrossProfileIntentFilter\" rel=\"android.app.admin.DevicePolicyManager-method-addCrossProfileIntentFilter\" class=\"docClass\">addCrossProfileIntentFilter</a> to allow activities in\nthe parent profile to access intents sent from the managed profile.\nThat is, when an app in the managed profile calls\nActivity.startActivity(Intent), the intent can be resolved by a\nmatching activity in the parent profile.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-ID_TYPE_BASE_INFO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ID_TYPE_BASE_INFO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_BASE_INFO' class='name expandable'>ID_TYPE_BASE_INFO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the device should attest its manufacturer details. ...</div><div class='long'><p>Specifies that the device should attest its manufacturer details. For use with\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a>.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a></p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-ID_TYPE_IMEI' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ID_TYPE_IMEI' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_IMEI' class='name expandable'>ID_TYPE_IMEI</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the device should attest its IMEI. ...</div><div class='long'><p>Specifies that the device should attest its IMEI. For use with <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a>.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a></p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-ID_TYPE_MEID' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ID_TYPE_MEID' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_MEID' class='name expandable'>ID_TYPE_MEID</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the device should attest its MEID. ...</div><div class='long'><p>Specifies that the device should attest its MEID. For use with <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a>.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a></p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-ID_TYPE_SERIAL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-ID_TYPE_SERIAL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_SERIAL' class='name expandable'>ID_TYPE_SERIAL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the device should attest its serial number. ...</div><div class='long'><p>Specifies that the device should attest its serial number. For use with\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a>.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a></p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-INSTALLKEY_REQUEST_CREDENTIALS_ACCESS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-INSTALLKEY_REQUEST_CREDENTIALS_ACCESS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-INSTALLKEY_REQUEST_CREDENTIALS_ACCESS' class='name expandable'>INSTALLKEY_REQUEST_CREDENTIALS_ACCESS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the calling app should be granted access to the installed credentials\nimmediately. ...</div><div class='long'><p>Specifies that the calling app should be granted access to the installed credentials\nimmediately. Otherwise, access to the credentials will be gated by user approval.\nFor use with PrivateKey, Certificate[], String, int)</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-installKeyPair\" class=\"docClass\">installKeyPair</a>(ComponentName, PrivateKey, Certificate[], String, int)</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-INSTALLKEY_SET_USER_SELECTABLE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-INSTALLKEY_SET_USER_SELECTABLE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-INSTALLKEY_SET_USER_SELECTABLE' class='name expandable'>INSTALLKEY_SET_USER_SELECTABLE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that a user can select the key via the Certificate Selection prompt. ...</div><div class='long'><p>Specifies that a user can select the key via the Certificate Selection prompt.\nIf this flag is not set when calling <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-installKeyPair\" class=\"docClass\">installKeyPair</a>, the key can only be granted\naccess by implementing <a href=\"#!/api/android.app.admin.DeviceAdminReceiver-method-onChoosePrivateKeyAlias\" rel=\"android.app.admin.DeviceAdminReceiver-method-onChoosePrivateKeyAlias\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.onChoosePrivateKeyAlias</a>.\nFor use with PrivateKey, Certificate[], String, int)</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-installKeyPair\" class=\"docClass\">installKeyPair</a>(ComponentName, PrivateKey, Certificate[], String, int)</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_BIOMETRICS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_BIOMETRICS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_BIOMETRICS' class='name expandable'>KEYGUARD_DISABLE_BIOMETRICS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable all biometric authentication on keyguard secure screens (e.g. ...</div><div class='long'><p>Disable all biometric authentication on keyguard secure screens (e.g. PIN/Pattern/Password).</p>\n<p>Defaults to: <code>&quot;416&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_FACE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_FACE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FACE' class='name expandable'>KEYGUARD_DISABLE_FACE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable face authentication on keyguard secure screens (e.g. ...</div><div class='long'><p>Disable face authentication on keyguard secure screens (e.g. PIN/Pattern/Password).</p>\n<p>Defaults to: <code>&quot;128&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_FEATURES_ALL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_FEATURES_ALL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FEATURES_ALL' class='name expandable'>KEYGUARD_DISABLE_FEATURES_ALL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable all current and future keyguard customizations. ...</div><div class='long'><p>Disable all current and future keyguard customizations.</p>\n<p>Defaults to: <code>&quot;2147483647&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_FEATURES_NONE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_FEATURES_NONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FEATURES_NONE' class='name expandable'>KEYGUARD_DISABLE_FEATURES_NONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Widgets are enabled in keyguard ...</div><div class='long'><p>Widgets are enabled in keyguard</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_FINGERPRINT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT' class='name expandable'>KEYGUARD_DISABLE_FINGERPRINT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable fingerprint authentication on keyguard secure screens (e.g. ...</div><div class='long'><p>Disable fingerprint authentication on keyguard secure screens (e.g. PIN/Pattern/Password).</p>\n<p>Defaults to: <code>&quot;32&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_IRIS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_IRIS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_IRIS' class='name expandable'>KEYGUARD_DISABLE_IRIS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable iris authentication on keyguard secure screens (e.g. ...</div><div class='long'><p>Disable iris authentication on keyguard secure screens (e.g. PIN/Pattern/Password).</p>\n<p>Defaults to: <code>&quot;256&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_REMOTE_INPUT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_REMOTE_INPUT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_REMOTE_INPUT' class='name expandable'>KEYGUARD_DISABLE_REMOTE_INPUT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable text entry into notifications on secure keyguard screens (e.g. ...</div><div class='long'><p>Disable text entry into notifications on secure keyguard screens (e.g. PIN/Pattern/Password).\nThis flag has no effect starting from version android.os.Build.VERSION_CODES.N</p>\n<p>Defaults to: <code>&quot;64&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_SECURE_CAMERA' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_SECURE_CAMERA' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_SECURE_CAMERA' class='name expandable'>KEYGUARD_DISABLE_SECURE_CAMERA</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable the camera on secure keyguard screens (e.g. ...</div><div class='long'><p>Disable the camera on secure keyguard screens (e.g. PIN/Pattern/Password)</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_SECURE_NOTIFICATIONS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_SECURE_NOTIFICATIONS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_SECURE_NOTIFICATIONS' class='name expandable'>KEYGUARD_DISABLE_SECURE_NOTIFICATIONS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable showing all notifications on secure keyguard screens (e.g. ...</div><div class='long'><p>Disable showing all notifications on secure keyguard screens (e.g. PIN/Pattern/Password)</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_TRUST_AGENTS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS' class='name expandable'>KEYGUARD_DISABLE_TRUST_AGENTS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable trust agents on secure keyguard screens (e.g. ...</div><div class='long'><p>Disable trust agents on secure keyguard screens (e.g. PIN/Pattern/Password).\nBy setting this flag alone, all trust agents are disabled. If the admin then wants to\nwhitelist specific features of some trust agent, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setTrustAgentConfiguration\" rel=\"android.app.admin.DevicePolicyManager-method-setTrustAgentConfiguration\" class=\"docClass\">setTrustAgentConfiguration</a> can be\nused in conjuction to set trust-agent-specific configurations.</p>\n<p>Defaults to: <code>&quot;16&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS' class='name expandable'>KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Only allow redacted notifications on secure keyguard screens (e.g. ...</div><div class='long'><p>Only allow redacted notifications on secure keyguard screens (e.g. PIN/Pattern/Password)</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-KEYGUARD_DISABLE_WIDGETS_ALL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-KEYGUARD_DISABLE_WIDGETS_ALL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_WIDGETS_ALL' class='name expandable'>KEYGUARD_DISABLE_WIDGETS_ALL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable all keyguard widgets. ...</div><div class='long'><p>Disable all keyguard widgets. Has no effect starting from\nandroid.os.Build.VERSION_CODES.LOLLIPOP since keyguard widget is only supported\non Android versions lower than 5.0.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-LEAVE_ALL_SYSTEM_APPS_ENABLED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-LEAVE_ALL_SYSTEM_APPS_ENABLED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-LEAVE_ALL_SYSTEM_APPS_ENABLED' class='name expandable'>LEAVE_ALL_SYSTEM_APPS_ENABLED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag used by createAndManageUser to specify that the newly created user should skip\nthe disabling of system apps duri...</div><div class='long'><p>Flag used by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-createAndManageUser\" rel=\"android.app.admin.DevicePolicyManager-method-createAndManageUser\" class=\"docClass\">createAndManageUser</a> to specify that the newly created user should skip\nthe disabling of system apps during provisioning.</p>\n<p>Defaults to: <code>&quot;16&quot;</code></p></div></div></div><div id='property-LOCK_TASK_FEATURE_GLOBAL_ACTIONS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-LOCK_TASK_FEATURE_GLOBAL_ACTIONS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_GLOBAL_ACTIONS' class='name expandable'>LOCK_TASK_FEATURE_GLOBAL_ACTIONS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable the global actions dialog during LockTask mode. ...</div><div class='long'><p>Enable the global actions dialog during LockTask mode. This is the dialog that shows up when\nthe user long-presses the power button, for example. Note that the user may not be able to\npower off the device if this flag is not set.</p>\n\n<p><p>This flag is enabled by default until int) is\ncalled for the first time.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" class=\"docClass\">setLockTaskFeatures</a>(ComponentName, int)</p>\n<p>Defaults to: <code>&quot;16&quot;</code></p></div></div></div><div id='property-LOCK_TASK_FEATURE_HOME' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME' class='name expandable'>LOCK_TASK_FEATURE_HOME</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable the Home button during LockTask mode. ...</div><div class='long'><p>Enable the Home button during LockTask mode. Note that if a custom launcher is used, it has\nto be registered as the default launcher with\nIntentFilter, ComponentName), and its\npackage needs to be whitelisted for LockTask with\nString[]).</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" class=\"docClass\">setLockTaskFeatures</a>(ComponentName, int)</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-LOCK_TASK_FEATURE_KEYGUARD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-LOCK_TASK_FEATURE_KEYGUARD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_KEYGUARD' class='name expandable'>LOCK_TASK_FEATURE_KEYGUARD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable the keyguard during LockTask mode. ...</div><div class='long'><p>Enable the keyguard during LockTask mode. Note that if the keyguard is already disabled with\nboolean), setting this flag will have no effect.\nIf this flag is not set, the keyguard will not be shown even if the user has a lock screen\ncredential.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" class=\"docClass\">setLockTaskFeatures</a>(ComponentName, int)</p>\n<p>Defaults to: <code>&quot;32&quot;</code></p></div></div></div><div id='property-LOCK_TASK_FEATURE_NONE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-LOCK_TASK_FEATURE_NONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_NONE' class='name expandable'>LOCK_TASK_FEATURE_NONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable all configurable SystemUI features during LockTask mode. ...</div><div class='long'><p>Disable all configurable SystemUI features during LockTask mode. This includes,</p>\n\n<ul>\n    <li>system info area in the status bar (connectivity icons, clock, etc.)\n    <li>notifications (including alerts, icons, and the notification shade)\n    <li>Home button\n    <li>Recents button and UI\n    <li>global actions menu (i.e. power button menu)\n    <li>keyguard\n</li></li></li></li></li></li></ul>\n\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" class=\"docClass\">setLockTaskFeatures</a>(ComponentName, int)</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-LOCK_TASK_FEATURE_NOTIFICATIONS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-LOCK_TASK_FEATURE_NOTIFICATIONS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_NOTIFICATIONS' class='name expandable'>LOCK_TASK_FEATURE_NOTIFICATIONS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable notifications during LockTask mode. ...</div><div class='long'><p>Enable notifications during LockTask mode. This includes notification icons on the status\nbar, heads-up notifications, and the expandable notification shade. Note that the Quick\nSettings panel remains disabled. This feature flag can only be used in combination with\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME\" rel=\"android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME\" class=\"docClass\">LOCK_TASK_FEATURE_HOME</a>. int)\nthrows an IllegalArgumentException if this feature flag is defined without\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME\" rel=\"android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME\" class=\"docClass\">LOCK_TASK_FEATURE_HOME</a>.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" class=\"docClass\">setLockTaskFeatures</a>(ComponentName, int)</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-LOCK_TASK_FEATURE_OVERVIEW' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-LOCK_TASK_FEATURE_OVERVIEW' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_OVERVIEW' class='name expandable'>LOCK_TASK_FEATURE_OVERVIEW</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable the Overview button and the Overview screen during LockTask mode. ...</div><div class='long'><p>Enable the Overview button and the Overview screen during LockTask mode. This feature flag\ncan only be used in combination with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME\" rel=\"android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME\" class=\"docClass\">LOCK_TASK_FEATURE_HOME</a>, and\nint) will throw an\nIllegalArgumentException if this feature flag is defined without\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME\" rel=\"android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_HOME\" class=\"docClass\">LOCK_TASK_FEATURE_HOME</a>.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" class=\"docClass\">setLockTaskFeatures</a>(ComponentName, int)</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-LOCK_TASK_FEATURE_SYSTEM_INFO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-LOCK_TASK_FEATURE_SYSTEM_INFO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_SYSTEM_INFO' class='name expandable'>LOCK_TASK_FEATURE_SYSTEM_INFO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable the system info area in the status bar during LockTask mode. ...</div><div class='long'><p>Enable the system info area in the status bar during LockTask mode. The system info area\nusually occupies the right side of the status bar (although this can differ across OEMs). It\nincludes all system information indicators, such as date and time, connectivity, battery,\nvibration mode, etc.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" class=\"docClass\">setLockTaskFeatures</a>(ComponentName, int)</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-MAKE_USER_EPHEMERAL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-MAKE_USER_EPHEMERAL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-MAKE_USER_EPHEMERAL' class='name expandable'>MAKE_USER_EPHEMERAL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag used by createAndManageUser to specify that the user should be created\nephemeral. ...</div><div class='long'><p>Flag used by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-createAndManageUser\" rel=\"android.app.admin.DevicePolicyManager-method-createAndManageUser\" class=\"docClass\">createAndManageUser</a> to specify that the user should be created\nephemeral. Ephemeral users will be removed after switching to another user or rebooting the\ndevice.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-MIME_TYPE_PROVISIONING_NFC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-MIME_TYPE_PROVISIONING_NFC' class='name expandable'>MIME_TYPE_PROVISIONING_NFC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This MIME type is used for starting the device owner provisioning. ...</div><div class='long'><p>This MIME type is used for starting the device owner provisioning.</p>\n\n<p><p>During device owner provisioning a device admin app is set as the owner of the device.\nA device owner has full control over the device. The device owner can not be modified by the\nuser and the only way of resetting the device is if the device owner app calls a factory\nreset.</p>\n\n<p><p> A typical use case would be a device that is owned by a company, but used by either an\nemployee or client.</p>\n\n<p><p> The NFC message must be sent to an unprovisioned device.</p>\n\n<p><p>The NFC record must contain a serialized java.util.Properties object which\ncontains the following properties:\n<ul>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME</a></li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOCAL_TIME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOCAL_TIME\" class=\"docClass\">EXTRA_PROVISIONING_LOCAL_TIME</a> (convert to String), optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_TIME_ZONE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_TIME_ZONE\" class=\"docClass\">EXTRA_PROVISIONING_TIME_ZONE</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOCALE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_LOCALE\" class=\"docClass\">EXTRA_PROVISIONING_LOCALE</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SSID\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SSID</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_HIDDEN\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_HIDDEN\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_HIDDEN</a> (convert to String), optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_SECURITY_TYPE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_SECURITY_TYPE</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PASSWORD\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_PASSWORD</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_HOST\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_HOST\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_PROXY_HOST</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_PORT\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_PORT\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_PROXY_PORT</a> (convert to String), optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_BYPASS\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PROXY_BYPASS\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_PROXY_BYPASS</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PAC_URL\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PAC_URL\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_PAC_URL</a>, optional</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE\" class=\"docClass\">EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE</a>, optional, supported from android.os.Build.VERSION_CODES.M </li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_EAP_METHOD\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_EAP_METHOD\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_EAP_METHOD</a>, optional, supported from android.os.Build.VERSION_CODES.Q</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PHASE2_AUTH\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_PHASE2_AUTH\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_PHASE2_AUTH</a>, optional, supported from android.os.Build.VERSION_CODES.Q</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE</a>, optional, supported from android.os.Build.VERSION_CODES.Q</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE</a>, optional, supported from android.os.Build.VERSION_CODES.Q</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_IDENTITY\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_IDENTITY\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_IDENTITY</a>, optional, supported from android.os.Build.VERSION_CODES.Q</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY</a>, optional, supported from android.os.Build.VERSION_CODES.Q</li>\n<li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_DOMAIN\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_WIFI_DOMAIN\" class=\"docClass\">EXTRA_PROVISIONING_WIFI_DOMAIN</a>, optional, supported from android.os.Build.VERSION_CODES.Q</li></ul></p>\n\n<p><p>\nAs of android.os.Build.VERSION_CODES.M, the properties should contain\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME</a> instead of\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME</a>, (although specifying only\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\" class=\"docClass\">EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME</a> is still supported).</p>\n<p>Defaults to: <code>&quot;application/com.android.managedprovisioning&quot;</code></p></div></div></div><div id='property-PASSWORD_COMPLEXITY_HIGH' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_COMPLEXITY_HIGH' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_HIGH' class='name expandable'>PASSWORD_COMPLEXITY_HIGH</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for getPasswordComplexity(): password satisfies one of the following:\n\n\nPIN with no repeating (4444) or orde...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" rel=\"android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" class=\"docClass\">getPasswordComplexity</a>(): password satisfies one of the following:</p>\n\n<ul>\n<li>PIN with <b>no</b> repeating (4444) or ordered (1234, 4321, 2468) sequences, length at\nleast 8\n<li>alphabetic, length at least 6\n<li>alphanumeric, length at least 6\n</li></li></li></ul>\n\n\n\n\n<p><p>Note that these complexity constants are ordered so that higher values are more complex.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC_COMPLEX</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHABETIC</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHANUMERIC</a></p>\n<p>Defaults to: <code>&quot;327680&quot;</code></p></div></div></div><div id='property-PASSWORD_COMPLEXITY_LOW' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_COMPLEXITY_LOW' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_LOW' class='name expandable'>PASSWORD_COMPLEXITY_LOW</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for getPasswordComplexity(): password satisfies one of the following:\n\n\npattern\nPIN with repeating (4444) or...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" rel=\"android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" class=\"docClass\">getPasswordComplexity</a>(): password satisfies one of the following:</p>\n\n<ul>\n<li>pattern\n<li>PIN with repeating (4444) or ordered (1234, 4321, 2468) sequences\n</li></li></ul>\n\n\n\n\n<p><p>Note that these complexity constants are ordered so that higher values are more complex.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_SOMETHING\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_SOMETHING\" class=\"docClass\">PASSWORD_QUALITY_SOMETHING</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC</a></p>\n<p>Defaults to: <code>&quot;65536&quot;</code></p></div></div></div><div id='property-PASSWORD_COMPLEXITY_MEDIUM' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_COMPLEXITY_MEDIUM' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_MEDIUM' class='name expandable'>PASSWORD_COMPLEXITY_MEDIUM</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for getPasswordComplexity(): password satisfies one of the following:\n\n\nPIN with no repeating (4444) or orde...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" rel=\"android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" class=\"docClass\">getPasswordComplexity</a>(): password satisfies one of the following:</p>\n\n<ul>\n<li>PIN with <b>no</b> repeating (4444) or ordered (1234, 4321, 2468) sequences, length at\nleast 4\n<li>alphabetic, length at least 4\n<li>alphanumeric, length at least 4\n</li></li></li></ul>\n\n\n\n\n<p><p>Note that these complexity constants are ordered so that higher values are more complex.</p>\n\n<p>@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC_COMPLEX</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHABETIC</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHANUMERIC</a></p>\n<p>Defaults to: <code>&quot;196608&quot;</code></p></div></div></div><div id='property-PASSWORD_COMPLEXITY_NONE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_COMPLEXITY_NONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_COMPLEXITY_NONE' class='name expandable'>PASSWORD_COMPLEXITY_NONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for getPasswordComplexity(): no password. ...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" rel=\"android.app.admin.DevicePolicyManager-method-getPasswordComplexity\" class=\"docClass\">getPasswordComplexity</a>(): no password.</p>\n\n<p><p>Note that these complexity constants are ordered so that higher values are more complex.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-PASSWORD_QUALITY_ALPHABETIC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC' class='name expandable'>PASSWORD_QUALITY_ALPHABETIC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for setPasswordQuality: the user must have entered a\npassword containing at least alphabetic (or other symbo...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>: the user must have entered a\npassword containing at least alphabetic (or other symbol) characters.\nNote that quality constants are ordered so that higher values are more\nrestrictive.</p>\n<p>Defaults to: <code>&quot;262144&quot;</code></p></div></div></div><div id='property-PASSWORD_QUALITY_ALPHANUMERIC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC' class='name expandable'>PASSWORD_QUALITY_ALPHANUMERIC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for setPasswordQuality: the user must have entered a\npassword containing at least both> numeric and\nalphabet...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>: the user must have entered a\npassword containing at least <em>both></em> numeric <em>and</em>\nalphabetic (or other symbol) characters.  Note that quality constants are\nordered so that higher values are more restrictive.</p>\n<p>Defaults to: <code>&quot;327680&quot;</code></p></div></div></div><div id='property-PASSWORD_QUALITY_BIOMETRIC_WEAK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_QUALITY_BIOMETRIC_WEAK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_BIOMETRIC_WEAK' class='name expandable'>PASSWORD_QUALITY_BIOMETRIC_WEAK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for setPasswordQuality: the policy allows for low-security biometric\nrecognition technology. ...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>: the policy allows for low-security biometric\nrecognition technology.  This implies technologies that can recognize the identity of\nan individual to about a 3 digit PIN (false detection is less than 1 in 1,000).\nNote that quality constants are ordered so that higher values are more restrictive.</p>\n<p>Defaults to: <code>&quot;32768&quot;</code></p></div></div></div><div id='property-PASSWORD_QUALITY_COMPLEX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX' class='name expandable'>PASSWORD_QUALITY_COMPLEX</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for setPasswordQuality: the user must have entered a\npassword containing at least a letter, a numerical digi...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>: the user must have entered a\npassword containing at least a letter, a numerical digit and a special\nsymbol, by default. With this password quality, passwords can be\nrestricted to contain various sets of characters, like at least an\nuppercase letter, etc. These are specified using various methods,\nlike int). Note\nthat quality constants are ordered so that higher values are more\nrestrictive.</p>\n<p>Defaults to: <code>&quot;393216&quot;</code></p></div></div></div><div id='property-PASSWORD_QUALITY_NUMERIC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC' class='name expandable'>PASSWORD_QUALITY_NUMERIC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for setPasswordQuality: the user must have entered a\npassword containing at least numeric characters. ...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>: the user must have entered a\npassword containing at least numeric characters.  Note that quality\nconstants are ordered so that higher values are more restrictive.</p>\n<p>Defaults to: <code>&quot;131072&quot;</code></p></div></div></div><div id='property-PASSWORD_QUALITY_NUMERIC_COMPLEX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX' class='name expandable'>PASSWORD_QUALITY_NUMERIC_COMPLEX</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for setPasswordQuality: the user must have entered a\npassword containing at least numeric characters with no...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>: the user must have entered a\npassword containing at least numeric characters with no repeating (4444)\nor ordered (1234, 4321, 2468) sequences.  Note that quality\nconstants are ordered so that higher values are more restrictive.</p>\n<p>Defaults to: <code>&quot;196608&quot;</code></p></div></div></div><div id='property-PASSWORD_QUALITY_SOMETHING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_QUALITY_SOMETHING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_SOMETHING' class='name expandable'>PASSWORD_QUALITY_SOMETHING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for setPasswordQuality: the policy requires some kind\nof password or pattern, but doesn't care what it is. ...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>: the policy requires some kind\nof password or pattern, but doesn't care what it is. Note that quality constants\nare ordered so that higher values are more restrictive.</p>\n<p>Defaults to: <code>&quot;65536&quot;</code></p></div></div></div><div id='property-PASSWORD_QUALITY_UNSPECIFIED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PASSWORD_QUALITY_UNSPECIFIED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_UNSPECIFIED' class='name expandable'>PASSWORD_QUALITY_UNSPECIFIED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for setPasswordQuality: the policy has no requirements\nfor the password. ...</div><div class='long'><p>Constant for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>: the policy has no requirements\nfor the password.  Note that quality constants are ordered so that higher\nvalues are more restrictive.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-PERMISSION_GRANT_STATE_DEFAULT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT' class='name expandable'>PERMISSION_GRANT_STATE_DEFAULT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Runtime permission state: The user can manage the permission\nthrough the UI. ...</div><div class='long'><p>Runtime permission state: The user can manage the permission\nthrough the UI.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-PERMISSION_GRANT_STATE_DENIED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED' class='name expandable'>PERMISSION_GRANT_STATE_DENIED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Runtime permission state: The permission is denied to the app\nand the user cannot manage the permission through the UI. ...</div><div class='long'><p>Runtime permission state: The permission is denied to the app\nand the user cannot manage the permission through the UI.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-PERMISSION_GRANT_STATE_GRANTED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED' class='name expandable'>PERMISSION_GRANT_STATE_GRANTED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Runtime permission state: The permission is granted to the app\nand the user cannot manage the permission through the UI. ...</div><div class='long'><p>Runtime permission state: The permission is granted to the app\nand the user cannot manage the permission through the UI.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-PERMISSION_POLICY_AUTO_DENY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PERMISSION_POLICY_AUTO_DENY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_AUTO_DENY' class='name expandable'>PERMISSION_POLICY_AUTO_DENY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Permission policy to always deny new permission requests for runtime permissions. ...</div><div class='long'><p>Permission policy to always deny new permission requests for runtime permissions.\nAlready granted or denied permissions are not affected by this.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-PERMISSION_POLICY_AUTO_GRANT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PERMISSION_POLICY_AUTO_GRANT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_AUTO_GRANT' class='name expandable'>PERMISSION_POLICY_AUTO_GRANT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Permission policy to always grant new permission requests for runtime permissions. ...</div><div class='long'><p>Permission policy to always grant new permission requests for runtime permissions.\nAlready granted or denied permissions are not affected by this.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-PERMISSION_POLICY_PROMPT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PERMISSION_POLICY_PROMPT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_PROMPT' class='name expandable'>PERMISSION_POLICY_PROMPT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Permission policy to prompt user for new permission requests for runtime permissions. ...</div><div class='long'><p>Permission policy to prompt user for new permission requests for runtime permissions.\nAlready granted or denied permissions are not affected by this.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-POLICY_DISABLE_CAMERA' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-POLICY_DISABLE_CAMERA' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-POLICY_DISABLE_CAMERA' class='name expandable'>POLICY_DISABLE_CAMERA</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to indicate the feature of disabling the camera. ...</div><div class='long'><p>Constant to indicate the feature of disabling the camera. Used as argument to\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-createAdminSupportIntent\" rel=\"android.app.admin.DevicePolicyManager-method-createAdminSupportIntent\" class=\"docClass\">createAdminSupportIntent</a>(String).\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setCameraDisabled\" rel=\"android.app.admin.DevicePolicyManager-method-setCameraDisabled\" class=\"docClass\">setCameraDisabled</a>(ComponentName, boolean)</p>\n<p>Defaults to: <code>&quot;policy_disable_camera&quot;</code></p></div></div></div><div id='property-POLICY_DISABLE_SCREEN_CAPTURE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-POLICY_DISABLE_SCREEN_CAPTURE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-POLICY_DISABLE_SCREEN_CAPTURE' class='name expandable'>POLICY_DISABLE_SCREEN_CAPTURE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to indicate the feature of disabling screen captures. ...</div><div class='long'><p>Constant to indicate the feature of disabling screen captures. Used as argument to\n<a href=\"#!/api/android.app.admin.DevicePolicyManager-method-createAdminSupportIntent\" rel=\"android.app.admin.DevicePolicyManager-method-createAdminSupportIntent\" class=\"docClass\">createAdminSupportIntent</a>(String).\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setScreenCaptureDisabled\" rel=\"android.app.admin.DevicePolicyManager-method-setScreenCaptureDisabled\" class=\"docClass\">setScreenCaptureDisabled</a>(ComponentName, boolean)</p>\n<p>Defaults to: <code>&quot;policy_disable_screen_capture&quot;</code></p></div></div></div><div id='property-PRIVATE_DNS_MODE_OFF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PRIVATE_DNS_MODE_OFF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PRIVATE_DNS_MODE_OFF' class='name expandable'>PRIVATE_DNS_MODE_OFF</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that Private DNS was turned off completely. ...</div><div class='long'><p>Specifies that Private DNS was turned off completely.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-PRIVATE_DNS_MODE_OPPORTUNISTIC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PRIVATE_DNS_MODE_OPPORTUNISTIC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PRIVATE_DNS_MODE_OPPORTUNISTIC' class='name expandable'>PRIVATE_DNS_MODE_OPPORTUNISTIC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the device owner requested opportunistic DNS over TLS ...</div><div class='long'><p>Specifies that the device owner requested opportunistic DNS over TLS</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-PRIVATE_DNS_MODE_PROVIDER_HOSTNAME' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PRIVATE_DNS_MODE_PROVIDER_HOSTNAME' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PRIVATE_DNS_MODE_PROVIDER_HOSTNAME' class='name expandable'>PRIVATE_DNS_MODE_PROVIDER_HOSTNAME</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the device owner configured a specific host to use for Private DNS. ...</div><div class='long'><p>Specifies that the device owner configured a specific host to use for Private DNS.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-PRIVATE_DNS_MODE_UNKNOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PRIVATE_DNS_MODE_UNKNOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PRIVATE_DNS_MODE_UNKNOWN' class='name expandable'>PRIVATE_DNS_MODE_UNKNOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the Private DNS setting is in an unknown state. ...</div><div class='long'><p>Specifies that the Private DNS setting is in an unknown state.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-PRIVATE_DNS_SET_ERROR_FAILURE_SETTING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PRIVATE_DNS_SET_ERROR_FAILURE_SETTING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PRIVATE_DNS_SET_ERROR_FAILURE_SETTING' class='name expandable'>PRIVATE_DNS_SET_ERROR_FAILURE_SETTING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>General failure to set the Private DNS mode, not due to one of the reasons listed above. ...</div><div class='long'><p>General failure to set the Private DNS mode, not due to one of the reasons listed above.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING' class='name expandable'>PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If the {@code privateDnsHost} provided was of a valid hostname but that host was found\nto not support DNS-over-TLS. ...</div><div class='long'><p>If the {@code privateDnsHost} provided was of a valid hostname but that host was found\nto not support DNS-over-TLS.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-PRIVATE_DNS_SET_NO_ERROR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PRIVATE_DNS_SET_NO_ERROR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PRIVATE_DNS_SET_NO_ERROR' class='name expandable'>PRIVATE_DNS_SET_NO_ERROR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The selected mode has been set successfully. ...</div><div class='long'><p>The selected mode has been set successfully. If the mode is\n{@code PRIVATE_DNS_MODE_PROVIDER_HOSTNAME} then it implies the supplied host is valid\nand reachable.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-PROVISIONING_MODE_FULLY_MANAGED_DEVICE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PROVISIONING_MODE_FULLY_MANAGED_DEVICE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_FULLY_MANAGED_DEVICE' class='name expandable'>PROVISIONING_MODE_FULLY_MANAGED_DEVICE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The provisioning mode for fully managed device. ...</div><div class='long'><p>The provisioning mode for fully managed device.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-PROVISIONING_MODE_MANAGED_PROFILE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-PROVISIONING_MODE_MANAGED_PROFILE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-PROVISIONING_MODE_MANAGED_PROFILE' class='name expandable'>PROVISIONING_MODE_MANAGED_PROFILE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The provisioning mode for managed profile. ...</div><div class='long'><p>The provisioning mode for managed profile.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT' class='name expandable'>RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for resetPasswordWithToken and resetPassword: don't ask for user\ncredentials on device boot. ...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-resetPasswordWithToken\" rel=\"android.app.admin.DevicePolicyManager-method-resetPasswordWithToken\" class=\"docClass\">resetPasswordWithToken</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-resetPassword\" rel=\"android.app.admin.DevicePolicyManager-method-resetPassword\" class=\"docClass\">resetPassword</a>: don't ask for user\ncredentials on device boot.\nIf the flag is set, the device can be booted without asking for user password.\nThe absence of this flag does not change the current boot requirements. This flag\ncan be set by the device owner only. If the app is not the device owner, the flag\nis ignored. Once the flag is set, it cannot be reverted back without resetting the\ndevice to factory defaults.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-RESET_PASSWORD_REQUIRE_ENTRY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-RESET_PASSWORD_REQUIRE_ENTRY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_REQUIRE_ENTRY' class='name expandable'>RESET_PASSWORD_REQUIRE_ENTRY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for resetPasswordWithToken and resetPassword: don't allow other admins\nto change the password again until the us...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-resetPasswordWithToken\" rel=\"android.app.admin.DevicePolicyManager-method-resetPasswordWithToken\" class=\"docClass\">resetPasswordWithToken</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-resetPassword\" rel=\"android.app.admin.DevicePolicyManager-method-resetPassword\" class=\"docClass\">resetPassword</a>: don't allow other admins\nto change the password again until the user has entered it.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-SKIP_SETUP_WIZARD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-SKIP_SETUP_WIZARD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-SKIP_SETUP_WIZARD' class='name expandable'>SKIP_SETUP_WIZARD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag used by createAndManageUser to skip setup wizard after creating a new user. ...</div><div class='long'><p>Flag used by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-createAndManageUser\" rel=\"android.app.admin.DevicePolicyManager-method-createAndManageUser\" class=\"docClass\">createAndManageUser</a> to skip setup wizard after creating a new user.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-WIPE_EUICC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-WIPE_EUICC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-WIPE_EUICC' class='name expandable'>WIPE_EUICC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for wipeData(int): also erase the device's eUICC data. ...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-wipeData\" rel=\"android.app.admin.DevicePolicyManager-method-wipeData\" class=\"docClass\">wipeData</a>(int): also erase the device's eUICC data.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-WIPE_EXTERNAL_STORAGE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-WIPE_EXTERNAL_STORAGE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-WIPE_EXTERNAL_STORAGE' class='name expandable'>WIPE_EXTERNAL_STORAGE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for wipeData(int): also erase the device's external\nstorage (such as SD cards). ...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-wipeData\" rel=\"android.app.admin.DevicePolicyManager-method-wipeData\" class=\"docClass\">wipeData</a>(int): also erase the device's external\nstorage (such as SD cards).</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-WIPE_RESET_PROTECTION_DATA' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-WIPE_RESET_PROTECTION_DATA' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-WIPE_RESET_PROTECTION_DATA' class='name expandable'>WIPE_RESET_PROTECTION_DATA</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for wipeData(int): also erase the factory reset protection\ndata. ...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-wipeData\" rel=\"android.app.admin.DevicePolicyManager-method-wipeData\" class=\"docClass\">wipeData</a>(int): also erase the factory reset protection\ndata.</p>\n\n<p><p>This flag may only be set by device owner admins; if it is set by\nother admins a SecurityException will be thrown.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-WIPE_SILENTLY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-property-WIPE_SILENTLY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-property-WIPE_SILENTLY' class='name expandable'>WIPE_SILENTLY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for wipeData(int): won't show reason for wiping to the user. ...</div><div class='long'><p>Flag for <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-wipeData\" rel=\"android.app.admin.DevicePolicyManager-method-wipeData\" class=\"docClass\">wipeData</a>(int): won't show reason for wiping to the user.</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addCrossProfileIntentFilter' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-addCrossProfileIntentFilter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-addCrossProfileIntentFilter' class='name expandable'>addCrossProfileIntentFilter</a>( <span class='pre'>admin, filter, flags</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the profile owner of a managed profile so that some intents sent in the managed\n profile can also be resolv...</div><div class='long'><p>Called by the profile owner of a managed profile so that some intents sent in the managed\n profile can also be resolved in the parent, or vice versa. Only activity intents are\n supported.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>filter</span> : Object {IntentFilter}<div class='sub-desc'><p>The IntentFilter the intent has to match to be also resolved in the\n            other profile</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>DevicePolicyManager.FLAG_MANAGED_CAN_ACCESS_PARENT and\n            DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED are supported.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-addCrossProfileWidgetProvider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-addCrossProfileWidgetProvider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-addCrossProfileWidgetProvider' class='name expandable'>addCrossProfileWidgetProvider</a>( <span class='pre'>admin, packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the profile owner of a managed profile to enable widget providers from a given\n package to be available in ...</div><div class='long'><p>Called by the profile owner of a managed profile to enable widget providers from a given\n package to be available in the parent profile. As a result the user will be able to add\n widgets from the white-listed package running under the profile to a widget host which runs\n under the parent profile, for example the home screen. Note that a package may have zero or\n more provider components, where each component provides a different widget type.\n <p>\n <strong>Note:</strong> By default no widget provider package is white-listed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The package from which widget providers are white-listed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether the package was added.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-removeCrossProfileWidgetProvider\" rel=\"android.app.admin.DevicePolicyManager-method-removeCrossProfileWidgetProvider\" class=\"docClass\">removeCrossProfileWidgetProvider</a>(android.content.ComponentName, String)\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getCrossProfileWidgetProviders\" rel=\"android.app.admin.DevicePolicyManager-method-getCrossProfileWidgetProviders\" class=\"docClass\">getCrossProfileWidgetProviders</a>(android.content.ComponentName)</p>\n</div></li></ul></div></div></div><div id='method-addOverrideApn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-addOverrideApn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-addOverrideApn' class='name expandable'>addOverrideApn</a>( <span class='pre'>admin, apnSetting</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to add an override APN. ...</div><div class='long'><p>Called by device owner to add an override APN.</p>\n\n<p> <p>This method may returns {@code -1} if {@code apnSetting} conflicts with an existing\n override APN. Update the existing conflicted APN with\n int, ApnSetting) instead of adding a new entry.\n <p>Two override APNs are considered to conflict when all the following APIs return\n the same values on both override APNs:\n <ul>\n   <li>ApnSetting.getOperatorNumeric()</li>\n   <li>ApnSetting.getApnName()</li>\n   <li>ApnSetting.getProxyAddressAsString()</li>\n   <li>ApnSetting.getProxyPort()</li>\n   <li>ApnSetting.getMmsProxyAddressAsString()</li>\n   <li>ApnSetting.getMmsProxyPort()</li>\n   <li>ApnSetting.getMmsc()</li>\n   <li>ApnSetting.isEnabled()</li>\n   <li>ApnSetting.getMvnoType()</li>\n   <li>ApnSetting.getProtocol()</li>\n   <li>ApnSetting.getRoamingProtocol()</li>\n </ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with</p>\n</div></li><li><span class='pre'>apnSetting</span> : Object {ApnSetting}<div class='sub-desc'><p>the override APN to insert</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The {@code id} of inserted override APN. Or {@code -1} when failed to insert into\n         the database.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" rel=\"android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" class=\"docClass\">setOverrideApnsEnabled</a>(ComponentName, boolean)</p>\n</div></li></ul></div></div></div><div id='method-addPersistentPreferredActivity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-addPersistentPreferredActivity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-addPersistentPreferredActivity' class='name expandable'>addPersistentPreferredActivity</a>( <span class='pre'>admin, filter, activity</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to set a default activity that the system selects\n to handle intents that m...</div><div class='long'><p>Called by a profile owner or device owner to set a default activity that the system selects\n to handle intents that match the given IntentFilter. This activity will remain the\n default intent handler even if the set of potential event handlers for the intent filter\n changes and if the intent preferences are reset.\n <p>\n Note that the caller should still declare the activity in the manifest, the API just sets\n the activity to be the default one to handle the given intent filter.\n <p>\n The default disambiguation mechanism takes over if the activity is not installed (anymore).\n When the activity is (re)installed, it is automatically reset as default intent handler for\n the filter.\n <p>\n The calling device admin must be a profile owner or device owner. If it is not, a security\n exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>filter</span> : Object {IntentFilter}<div class='sub-desc'><p>The IntentFilter for which a default handler is added.</p>\n</div></li><li><span class='pre'>activity</span> : Object {ComponentName}<div class='sub-desc'><p>The Activity that is added as default intent handler.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-addUserRestriction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-addUserRestriction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-addUserRestriction' class='name expandable'>addUserRestriction</a>( <span class='pre'>admin, key</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile or device owner to set a user restriction specified by the key. ...</div><div class='long'><p>Called by a profile or device owner to set a user restriction specified by the key.\n <p>\n The calling device admin must be a profile or device owner; if it is not, a security\n exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>key</span> : String<div class='sub-desc'><p>The key of the restriction. See the constants in android.os.UserManager\n            for the list of keys.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-bindDeviceAdminServiceAsUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-bindDeviceAdminServiceAsUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-bindDeviceAdminServiceAsUser' class='name expandable'>bindDeviceAdminServiceAsUser</a>( <span class='pre'>admin, serviceIntent, conn, flags, targetUser</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to bind to a service from a profile owner or vice versa. ...</div><div class='long'><p>Called by a device owner to bind to a service from a profile owner or vice versa.\n See <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getBindDeviceAdminTargetUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getBindDeviceAdminTargetUsers\" class=\"docClass\">getBindDeviceAdminTargetUsers</a> for a definition of which\n device/profile owners are allowed to bind to services of another profile/device owner.\n <p>\n The service must be protected by android.Manifest.permission.BIND_DEVICE_ADMIN.\n Note that the Context used to obtain this\n <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance via Context.getSystemService(Class) will be used\n to bind to the android.app.Service.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>serviceIntent</span> : Object {Intent}<div class='sub-desc'><p>Identifies the service to connect to.  The Intent must specify either an\n        explicit component name or a package name to match an\n        IntentFilter published by a service.</p>\n</div></li><li><span class='pre'>conn</span> : Object {ServiceConnection}<div class='sub-desc'><p>Receives information as the service is started and stopped in main thread. This\n        must be a valid ServiceConnection object; it must not be {@code null}.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Operation options for the binding operation. See\n        ServiceConnection, int).</p>\n</div></li><li><span class='pre'>targetUser</span> : Object {UserHandle}<div class='sub-desc'><p>Which user to bind to. Must be one of the users returned by\n        <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getBindDeviceAdminTargetUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getBindDeviceAdminTargetUsers\" class=\"docClass\">getBindDeviceAdminTargetUsers</a>, otherwise a SecurityException will\n        be thrown.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>If you have successfully bound to the service, {@code true} is returned;\n         {@code false} is returned if the connection is not made and you will not\n         receive the service object.\n@see Context#bindService(Intent, ServiceConnection, int)\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getBindDeviceAdminTargetUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getBindDeviceAdminTargetUsers\" class=\"docClass\">getBindDeviceAdminTargetUsers</a>(ComponentName)</p>\n</div></li></ul></div></div></div><div id='method-clearApplicationUserData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-clearApplicationUserData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-clearApplicationUserData' class='name expandable'>clearApplicationUserData</a>( <span class='pre'>admin, packageName, executor, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the device owner or profile owner to clear application user data of a given\n package. ...</div><div class='long'><p>Called by the device owner or profile owner to clear application user data of a given\n package. The behaviour of this is equivalent to the target application calling\n android.app.ActivityManager.clearApplicationUserData().</p>\n\n<p> <p><strong>Note:</strong> an application can store data outside of its application data, e.g.\n external storage or user dictionary. This data will not be wiped by calling this API.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The name of the package which will have its user data wiped.</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>The executor through which the listener should be invoked.</p>\n</div></li><li><span class='pre'>listener</span> : Object {DevicePolicyManager.OnClearApplicationUserDataListener}<div class='sub-desc'><p>A callback object that will inform the caller when the clearing is done.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not the device owner/profile owner.</p>\n</div></li></ul></div></div></div><div id='method-clearCrossProfileIntentFilters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-clearCrossProfileIntentFilters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-clearCrossProfileIntentFilters' class='name expandable'>clearCrossProfileIntentFilters</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of a managed profile to remove the cross-profile intent filters\n that go from the managed p...</div><div class='long'><p>Called by a profile owner of a managed profile to remove the cross-profile intent filters\n that go from the managed profile to the parent, or from the parent to the managed profile.\n Only removes those that have been set by the profile owner.\n <p>\n <em>Note</em>: A list of default cross profile intent filters are set up by the system when\n the profile is created, some of them ensure the proper functioning of the profile, while\n others enable sharing of data from the parent to the managed profile for user convenience.\n These default intent filters are not cleared when this API is called. If the default cross\n profile data sharing is not desired, they can be disabled with\n UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-clearDeviceOwnerApp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-clearDeviceOwnerApp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-clearDeviceOwnerApp' class='name expandable'>clearDeviceOwnerApp</a>( <span class='pre'>packageName</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Clears the current device owner. ...</div><div class='long'><p>Clears the current device owner. The caller must be the device owner. This function should be\n used cautiously as once it is called it cannot be undone. The device owner can only be set as\n a part of device setup, before it completes.\n <p>\n While some policies previously set by the device owner will be cleared by this method, it is\n a best-effort process and some other policies will still remain in place after the device\n owner is cleared.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This method is expected to be used for testing purposes only. The device owner\n will lose control of the device and its data after calling it. In order to protect any\n sensitive data that remains on the device, it is advised that the device owner factory resets\n the device instead of calling this method. See wipeData(int).</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The package name of the device owner.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not in {@code packageName} or {@code packageName}\n             does not own the current device owner component.</p>\n</div></li></ul></div></div></div><div id='method-clearPackagePersistentPreferredActivities' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-clearPackagePersistentPreferredActivities' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-clearPackagePersistentPreferredActivities' class='name expandable'>clearPackagePersistentPreferredActivities</a>( <span class='pre'>admin, packageName</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to remove all persistent intent handler preferences\n associated with the gi...</div><div class='long'><p>Called by a profile owner or device owner to remove all persistent intent handler preferences\n associated with the given package that were set by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-addPersistentPreferredActivity\" rel=\"android.app.admin.DevicePolicyManager-method-addPersistentPreferredActivity\" class=\"docClass\">addPersistentPreferredActivity</a>.\n <p>\n The calling device admin must be a profile owner. If it is not, a security exception will be\n thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The name of the package for which preferences are removed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-clearProfileOwner' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-clearProfileOwner' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-clearProfileOwner' class='name expandable'>clearProfileOwner</a>( <span class='pre'>admin</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Clears the active profile owner. ...</div><div class='long'><p>Clears the active profile owner. The caller must be the profile owner of this user, otherwise\n a SecurityException will be thrown. This method is not available to managed profile owners.\n <p>\n While some policies previously set by the profile owner will be cleared by this method, it is\n a best-effort process and some other policies will still remain in place after the profile\n owner is cleared.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This method is expected to be used for testing purposes only. The profile owner\n will lose control of the user and its data after calling it. In order to protect any\n sensitive data that remains on this user, it is advised that the profile owner deletes it\n instead of calling this method. See wipeData(int).</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The component to remove as the profile owner.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active profile owner, or the method is\n being called from a managed profile.</p>\n</div></li></ul></div></div></div><div id='method-clearResetPasswordToken' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-clearResetPasswordToken' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-clearResetPasswordToken' class='name expandable'>clearResetPasswordToken</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile or device owner to revoke the current password reset token. ...</div><div class='long'><p>Called by a profile or device owner to revoke the current password reset token.</p>\n\n<p> <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, this\n method has no effect - the reset token should not have been set in the first place - and\n false is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the operation is successful, false otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if admin is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-clearUserRestriction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-clearUserRestriction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-clearUserRestriction' class='name expandable'>clearUserRestriction</a>( <span class='pre'>admin, key</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile or device owner to clear a user restriction specified by the key. ...</div><div class='long'><p>Called by a profile or device owner to clear a user restriction specified by the key.\n <p>\n The calling device admin must be a profile or device owner; if it is not, a security\n exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>key</span> : String<div class='sub-desc'><p>The key of the restriction. See the constants in android.os.UserManager\n            for the list of keys.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-createAdminSupportIntent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-createAdminSupportIntent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-createAdminSupportIntent' class='name expandable'>createAdminSupportIntent</a>( <span class='pre'>restriction</span> ) : Object {android.content.Intent}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by any app to display a support dialog when a feature was disabled by an admin. ...</div><div class='long'><p>Called by any app to display a support dialog when a feature was disabled by an admin.\n This returns an intent that can be used with Context.startActivity(Intent) to\n display the dialog. It will tell the user that the feature indicated by {@code restriction}\n was disabled by an admin, and include a link for more information. The default content of\n the dialog can be changed by the restricting admin via\n CharSequence). If the restriction is not\n set (i.e. the feature is available), then the return value will be {@code null}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>restriction</span> : String<div class='sub-desc'><p>Indicates for which feature the dialog should be displayed. Can be a\n            user restriction from UserManager, e.g.\n            UserManager.DISALLOW_ADJUST_VOLUME, or one of the constants\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-POLICY_DISABLE_CAMERA\" rel=\"android.app.admin.DevicePolicyManager-property-POLICY_DISABLE_CAMERA\" class=\"docClass\">POLICY_DISABLE_CAMERA</a> or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-POLICY_DISABLE_SCREEN_CAPTURE\" rel=\"android.app.admin.DevicePolicyManager-property-POLICY_DISABLE_SCREEN_CAPTURE\" class=\"docClass\">POLICY_DISABLE_SCREEN_CAPTURE</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.Intent}</span><div class='sub-desc'><p>Intent An intent to be used to start the dialog-activity if the restriction is\n            set by an admin, or null if the restriction does not exist or no admin set it.</p>\n</div></li></ul></div></div></div><div id='method-createAndInitializeUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-createAndInitializeUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-createAndInitializeUser' class='name expandable'>createAndInitializeUser</a>( <span class='pre'>admin, name, ownerName, profileOwnerComponent, adminExtras</span> ) : Object {android.os.UserHandle}<span class=\"signature\"><span class='deprecated' >deprecated</span><span class='removed' >removed</span></span></div><div class='description'><div class='short'>Called by a device owner to create a user with the specified name. ...</div><div class='long'><p>Called by a device owner to create a user with the specified name. The UserHandle returned\n by this method should not be persisted as user handles are recycled as users are removed and\n created. If you need to persist an identifier for this user, use\n UserManager.getSerialNumberForUser.  The new user will be started in the background\n immediately.</p>\n\n<p> <p> profileOwnerComponent is the <a href=\"#!/api/android.app.admin.DeviceAdminReceiver\" rel=\"android.app.admin.DeviceAdminReceiver\" class=\"docClass\">android.app.admin.DeviceAdminReceiver</a> to be the profile owner as well\n as registered as an active admin on the new user.  The profile owner package will be\n installed on the new user if it already is installed on the device.</p>\n\n<p> <p>If the optionalInitializeData is not null, then the extras will be passed to the\n profileOwnerComponent when onEnable is called.</p>\n        <div class='rounded-box removed-box deprecated-tag-box'>\n        <p>This method has been <strong>removed</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.N</p>\n\n        </div>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.M</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the user's name</p>\n</div></li><li><span class='pre'>ownerName</span> : String<div class='sub-desc'><p>the human readable name of the organisation associated with this DPM.</p>\n</div></li><li><span class='pre'>profileOwnerComponent</span> : Object {ComponentName}<div class='sub-desc'><p>The DeviceAdminReceiver that will be an active admin on\n      the user.</p>\n</div></li><li><span class='pre'>adminExtras</span> : Object {Bundle}<div class='sub-desc'><p>Extras that will be passed to onEnable of the admin receiver\n      on the new user.\n@see UserHandle</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.UserHandle}</span><div class='sub-desc'><p>the android.os.UserHandle object for the created user, or {@code null} if the\n         user could not be created.</p>\n</div></li></ul></div></div></div><div id='method-createAndManageUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-createAndManageUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-createAndManageUser' class='name expandable'>createAndManageUser</a>( <span class='pre'>admin, name, profileOwner, adminExtras, flags</span> ) : Object {android.os.UserHandle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to create a user with the specified name and a given component of\n the calling package as pr...</div><div class='long'><p>Called by a device owner to create a user with the specified name and a given component of\n the calling package as profile owner. The UserHandle returned by this method should not be\n persisted as user handles are recycled as users are removed and created. If you need to\n persist an identifier for this user, use UserManager.getSerialNumberForUser. The new\n user will not be started in the background.\n <p>\n admin is the <a href=\"#!/api/android.app.admin.DeviceAdminReceiver\" rel=\"android.app.admin.DeviceAdminReceiver\" class=\"docClass\">android.app.admin.DeviceAdminReceiver</a> which is the device owner. profileOwner is also a\n DeviceAdminReceiver in the same package as admin, and will become the profile owner and will\n be registered as an active admin on the new user. The profile owner package will be installed\n on the new user.\n <p>\n If the adminExtras are not null, they will be stored on the device until the user is started\n for the first time. Then the extras will be passed to the admin when onEnable is called.\n <p>From android.os.Build.VERSION_CODES.P onwards, if targeting\n android.os.Build.VERSION_CODES.P, throws UserOperationException instead of\n returning {@code null} on failure.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The user's name.</p>\n</div></li><li><span class='pre'>profileOwner</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver will be profile owner. Has to be in the\n            same package as admin, otherwise no user is created and an\n            IllegalArgumentException is thrown.</p>\n</div></li><li><span class='pre'>adminExtras</span> : Object {PersistableBundle}<div class='sub-desc'><p>Extras that will be passed to onEnable of the admin receiver on the new\n            user.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-SKIP_SETUP_WIZARD\" rel=\"android.app.admin.DevicePolicyManager-property-SKIP_SETUP_WIZARD\" class=\"docClass\">SKIP_SETUP_WIZARD</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-MAKE_USER_EPHEMERAL\" rel=\"android.app.admin.DevicePolicyManager-property-MAKE_USER_EPHEMERAL\" class=\"docClass\">MAKE_USER_EPHEMERAL</a> and\n        <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-LEAVE_ALL_SYSTEM_APPS_ENABLED\" rel=\"android.app.admin.DevicePolicyManager-property-LEAVE_ALL_SYSTEM_APPS_ENABLED\" class=\"docClass\">LEAVE_ALL_SYSTEM_APPS_ENABLED</a> are supported.\n@see UserHandle</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.UserHandle}</span><div class='sub-desc'><p>the android.os.UserHandle object for the created user, or {@code null} if the\n         user could not be created.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UserOperationException if the user could not be created and the calling app is\n targeting android.os.Build.VERSION_CODES.P and running on\n android.os.Build.VERSION_CODES.P.</p>\n</div></li></ul></div></div></div><div id='method-createUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-createUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-createUser' class='name expandable'>createUser</a>( <span class='pre'>admin, name</span> ) : Object {android.os.UserHandle}<span class=\"signature\"><span class='deprecated' >deprecated</span><span class='removed' >removed</span></span></div><div class='description'><div class='short'>Called by a device owner to create a user with the specified name. ...</div><div class='long'><p>Called by a device owner to create a user with the specified name. The UserHandle returned\n by this method should not be persisted as user handles are recycled as users are removed and\n created. If you need to persist an identifier for this user, use\n UserManager.getSerialNumberForUser.</p>\n        <div class='rounded-box removed-box deprecated-tag-box'>\n        <p>This method has been <strong>removed</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.N</p>\n\n        </div>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.M</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>name</span> : String<div class='sub-desc'><p>the user's name\n@see UserHandle</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.UserHandle}</span><div class='sub-desc'><p>the android.os.UserHandle object for the created user, or {@code null} if the\n         user could not be created.</p>\n</div></li></ul></div></div></div><div id='method-enableSystemApp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-enableSystemApp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-enableSystemApp' class='name expandable'>enableSystemApp</a>( <span class='pre'>admin, intent</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Re-enable system apps by intent that were disabled by default when the user was initialized. ...</div><div class='long'><p>Re-enable system apps by intent that were disabled by default when the user was initialized.\n This function can be called by a device owner, profile owner, or by a delegate given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_ENABLE_SYSTEM_APP\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_ENABLE_SYSTEM_APP\" class=\"docClass\">DELEGATION_ENABLE_SYSTEM_APP</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if the caller is an enable system app delegate.</p>\n</div></li><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>An intent matching the app(s) to be installed. All apps that resolve for this\n            intent will be re-enabled in the calling profile.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int The number of activities that matched the intent and were installed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a></p>\n</div></li></ul></div></div></div><div id='method-forceRemoveActiveAdmin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-forceRemoveActiveAdmin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-forceRemoveActiveAdmin' class='name expandable'>forceRemoveActiveAdmin</a>( <span class='pre'>userHandle, admin, admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>userHandle</span> : Object {ComponentName}<div class='sub-desc'><p>user id to remove the admin for.</p>\n</div></li><li><span class='pre'>admin</span> : Number<div class='sub-desc'><p>The administration compononent to remove.</p>\n</div></li><li><span class='pre'>admin</span> : Object<div class='sub-desc'><p>The administration compononent to remove.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not shell / root or the admin package\n         isn't a test application see ApplicationInfo.FLAG_TEST_APP.</p>\n</div></li></ul></div></div></div><div id='method-generateKeyPair' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-generateKeyPair' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair' class='name expandable'>generateKeyPair</a>( <span class='pre'>admin, algorithm, keySpec, idAttestationFlags</span> ) : Object {android.security.AttestedKeyPair}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device or profile owner, or delegated certificate installer, to generate a\n new private/public key pair. ...</div><div class='long'><p>Called by a device or profile owner, or delegated certificate installer, to generate a\n new private/public key pair. If the device supports key generation via secure hardware,\n this method is useful for creating a key in KeyChain that never left the secure hardware.\n Access to the key is controlled the same way as in <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-installKeyPair\" class=\"docClass\">installKeyPair</a>.</p>\n\n<p> <p>Because this method might take several seconds to complete, it should only be called from\n a worker thread. This method returns {@code null} when called from the main thread.</p>\n\n<p> <p>Note: If the provided {@code alias} is of an existing alias, all former grants that apps\n have been given to access the key and certificates associated with this alias will be\n revoked.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if calling from a delegated certificate installer.</p>\n</div></li><li><span class='pre'>algorithm</span> : String<div class='sub-desc'><p>The key generation algorithm, see java.security.KeyPairGenerator.</p>\n</div></li><li><span class='pre'>keySpec</span> : Object {KeyGenParameterSpec}<div class='sub-desc'><p>Specification of the key to generate, see\n java.security.KeyPairGenerator.</p>\n</div></li><li><span class='pre'>idAttestationFlags</span> : Number<div class='sub-desc'><p>A bitmask of all the identifiers that should be included in the\n        attestation record ({@code ID_TYPE_BASE_INFO}, {@code ID_TYPE_SERIAL},\n        {@code ID_TYPE_IMEI} and {@code ID_TYPE_MEID}), or {@code 0} if no device\n        identification is required in the attestation record.\n        Device owner, profile owner and their delegated certificate installer can use\n        <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_BASE_INFO\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_BASE_INFO\" class=\"docClass\">ID_TYPE_BASE_INFO</a> to request inclusion of the general device information\n        including manufacturer, model, brand, device and product in the attestation record.\n        Only device owner and their delegated certificate installer can use\n        <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_SERIAL\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_SERIAL\" class=\"docClass\">ID_TYPE_SERIAL</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_IMEI\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_IMEI\" class=\"docClass\">ID_TYPE_IMEI</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_MEID\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_MEID\" class=\"docClass\">ID_TYPE_MEID</a> to request\n        unique device identifiers to be attested.\n        <p>\n        If any of <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_SERIAL\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_SERIAL\" class=\"docClass\">ID_TYPE_SERIAL</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_IMEI\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_IMEI\" class=\"docClass\">ID_TYPE_IMEI</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_MEID\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_MEID\" class=\"docClass\">ID_TYPE_MEID</a>\n        is set, it is implicitly assumed that <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_BASE_INFO\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_BASE_INFO\" class=\"docClass\">ID_TYPE_BASE_INFO</a> is also set.\n        <p>\n        If any flag is specified, then an attestation challenge must be included in the\n        {@code keySpec}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.security.AttestedKeyPair}</span><div class='sub-desc'><p>A non-null {@code AttestedKeyPair} if the key generation succeeded, null otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner. If Device ID attestation is requested (using <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_SERIAL\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_SERIAL\" class=\"docClass\">ID_TYPE_SERIAL</a>,\n         <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_IMEI\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_IMEI\" class=\"docClass\">ID_TYPE_IMEI</a> or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ID_TYPE_MEID\" rel=\"android.app.admin.DevicePolicyManager-property-ID_TYPE_MEID\" class=\"docClass\">ID_TYPE_MEID</a>), the caller must be the Device Owner\n         or the Certificate Installer delegate.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the alias in {@code keySpec} is empty, if the\n         algorithm specification in {@code keySpec} is not {@code RSAKeyGenParameterSpec}\n         or {@code ECGenParameterSpec}, or if Device ID attestation was requested but the\n         {@code keySpec} does not contain an attestation challenge.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if Device ID attestation was requested but the\n         underlying hardware does not support it.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>StrongBoxUnavailableException if the use of StrongBox for key generation was\n         specified in {@code keySpec} but the device does not have one.\n@see KeyGenParameterSpec.Builder#setAttestationChallenge(byte[])</p>\n</div></li></ul></div></div></div><div id='method-getAccountTypesWithManagementDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getAccountTypesWithManagementDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getAccountTypesWithManagementDisabled' class='name expandable'>getAccountTypesWithManagementDisabled</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the array of accounts for which account management is disabled by the profile owner. ...</div><div class='long'><p>Gets the array of accounts for which account management is disabled by the profile owner.</p>\n\n<p> <p> Account management can be disabled/enabled by calling\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAccountManagementDisabled\" rel=\"android.app.admin.DevicePolicyManager-method-setAccountManagementDisabled\" class=\"docClass\">setAccountManagementDisabled</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a list of account types for which account management has been disabled.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAccountManagementDisabled\" rel=\"android.app.admin.DevicePolicyManager-method-setAccountManagementDisabled\" class=\"docClass\">setAccountManagementDisabled</a></p>\n</div></li></ul></div></div></div><div id='method-getActiveAdmins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getActiveAdmins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getActiveAdmins' class='name expandable'>getActiveAdmins</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a list of all currently active device administrators' component\n names. ...</div><div class='long'><p>Return a list of all currently active device administrators' component\n names.  If there are no administrators {@code null} may be\n returned.</p>\n</div></div></div><div id='method-getAffiliationIds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getAffiliationIds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getAffiliationIds' class='name expandable'>getAffiliationIds</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the set of affiliation ids previously set via setAffiliationIds, or an\n empty set if none have been set. ...</div><div class='long'><p>Returns the set of affiliation ids previously set via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a>, or an\n empty set if none have been set.</p>\n</div></div></div><div id='method-getAlwaysOnVpnLockdownWhitelist' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getAlwaysOnVpnLockdownWhitelist' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getAlwaysOnVpnLockdownWhitelist' class='name expandable'>getAlwaysOnVpnLockdownWhitelist</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device or profile owner to query the set of packages that are allowed to access\n the network directly when ...</div><div class='long'><p>Called by device or profile owner to query the set of packages that are allowed to access\n the network directly when always-on VPN is in lockdown mode but not connected. Returns\n {@code null} when always-on VPN is not active or not in lockdown mode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAlwaysOnVpnPackage\" rel=\"android.app.admin.DevicePolicyManager-method-setAlwaysOnVpnPackage\" class=\"docClass\">setAlwaysOnVpnPackage</a>(ComponentName, String, boolean, Set)</p>\n</div></li></ul></div></div></div><div id='method-getAlwaysOnVpnPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getAlwaysOnVpnPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getAlwaysOnVpnPackage' class='name expandable'>getAlwaysOnVpnPackage</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device or profile owner to read the name of the package administering an\n always-on VPN connection for th...</div><div class='long'><p>Called by a device or profile owner to read the name of the package administering an\n always-on VPN connection for the current user. If there is no such package, or the always-on\n VPN is provided by the system instead of by an application, {@code null} will be returned.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>Package name of VPN controller responsible for always-on VPN, or {@code null} if none\n         is set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getApplicationRestrictions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getApplicationRestrictions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getApplicationRestrictions' class='name expandable'>getApplicationRestrictions</a>( <span class='pre'>admin, packageName</span> ) : Object {android.os.Bundle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the application restrictions for a given target application running in the calling\n user. ...</div><div class='long'><p>Retrieves the application restrictions for a given target application running in the calling\n user.\n <p>\n The caller must be a profile or device owner on that user, or the package allowed to manage\n application restrictions via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a> with the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" class=\"docClass\">DELEGATION_APP_RESTRICTIONS</a> scope; otherwise a security exception will be thrown.</p>\n\n<p> <p>NOTE: The method performs disk I/O and shouldn't be called on the main thread</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if called by the application restrictions managing package.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The name of the package to fetch restricted settings of.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.Bundle}</span><div class='sub-desc'><p>Bundle of settings corresponding to what was set last time\n         DevicePolicyManager.setApplicationRestrictions was called, or an empty\n         Bundle if no restrictions have been set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" class=\"docClass\">DELEGATION_APP_RESTRICTIONS</a></p>\n</div></li></ul></div></div></div><div id='method-getApplicationRestrictionsManagingPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getApplicationRestrictionsManagingPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getApplicationRestrictionsManagingPackage' class='name expandable'>getApplicationRestrictionsManagingPackage</a>( <span class='pre'>admin</span> ) : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to retrieve the application restrictions managing\n package for the current ...</div><div class='long'><p>Called by a profile owner or device owner to retrieve the application restrictions managing\n package for the current user, or {@code null} if none is set. If there are multiple\n delegates this function will return one of them.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getDelegatePackages\" rel=\"android.app.admin.DevicePolicyManager-method-getDelegatePackages\" class=\"docClass\">getDelegatePackages</a>\n with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" class=\"docClass\">DELEGATION_APP_RESTRICTIONS</a> scope instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The package name allowed to manage application restrictions on the current user, or\n         {@code null} if none is set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getAutoTimeRequired' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getAutoTimeRequired' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getAutoTimeRequired' class='name expandable'>getAutoTimeRequired</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if auto time is required.</p>\n</div></li></ul></div></div></div><div id='method-getBindDeviceAdminTargetUsers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getBindDeviceAdminTargetUsers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getBindDeviceAdminTargetUsers' class='name expandable'>getBindDeviceAdminTargetUsers</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the list of target users that the calling device or profile owner can use when\n calling bindDeviceAdminServic...</div><div class='long'><p>Returns the list of target users that the calling device or profile owner can use when\n calling <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-bindDeviceAdminServiceAsUser\" rel=\"android.app.admin.DevicePolicyManager-method-bindDeviceAdminServiceAsUser\" class=\"docClass\">bindDeviceAdminServiceAsUser</a>.\n <p>\n A device owner can bind to a service from a profile owner and vice versa, provided that:\n <ul>\n <li>Both belong to the same package name.\n <li>Both users are affiliated. See <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a>.\n </li></li></ul></p>\n</div></div></div><div id='method-getCertInstallerPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getCertInstallerPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getCertInstallerPackage' class='name expandable'>getCertInstallerPackage</a>( <span class='pre'>admin</span> ) : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to retrieve the certificate installer for the user,\n or {@code null} if non...</div><div class='long'><p>Called by a profile owner or device owner to retrieve the certificate installer for the user,\n or {@code null} if none is set. If there are multiple delegates this function will return one\n of them.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getDelegatePackages\" rel=\"android.app.admin.DevicePolicyManager-method-getDelegatePackages\" class=\"docClass\">getDelegatePackages</a>\n with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a> scope instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The package name of the current delegated certificate installer, or {@code null} if\n         none is set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getCrossProfileWidgetProviders' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getCrossProfileWidgetProviders' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getCrossProfileWidgetProviders' class='name expandable'>getCrossProfileWidgetProviders</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the profile owner of a managed profile to query providers from which packages are\n available in the parent ...</div><div class='long'><p>Called by the profile owner of a managed profile to query providers from which packages are\n available in the parent profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>The white-listed package list.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-addCrossProfileWidgetProvider\" rel=\"android.app.admin.DevicePolicyManager-method-addCrossProfileWidgetProvider\" class=\"docClass\">addCrossProfileWidgetProvider</a>(android.content.ComponentName, String)\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-removeCrossProfileWidgetProvider\" rel=\"android.app.admin.DevicePolicyManager-method-removeCrossProfileWidgetProvider\" class=\"docClass\">removeCrossProfileWidgetProvider</a>(android.content.ComponentName, String)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getDelegatePackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getDelegatePackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getDelegatePackages' class='name expandable'>getDelegatePackages</a>( <span class='pre'>admin, delegationScope</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to retrieve a list of delegate packages that were\n granted a delegation scope. ...</div><div class='long'><p>Called by a profile owner or device owner to retrieve a list of delegate packages that were\n granted a delegation scope.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>delegationScope</span> : String<div class='sub-desc'><p>The scope whose delegates should be retrieved.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>A list of package names of the current delegated packages for\n               {@code delegationScope}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getDelegatedScopes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getDelegatedScopes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getDelegatedScopes' class='name expandable'>getDelegatedScopes</a>( <span class='pre'>admin, delegatedPackage</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to retrieve a list of the scopes given to a\n delegate package. ...</div><div class='long'><p>Called by a profile owner or device owner to retrieve a list of the scopes given to a\n delegate package. Other apps can use this method to retrieve their own delegated scopes by\n passing {@code null} for {@code admin} and their own package name as\n {@code delegatedPackage}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if the caller is {@code delegatedPackage}.</p>\n</div></li><li><span class='pre'>delegatedPackage</span> : String<div class='sub-desc'><p>The package name of the app whose scopes should be retrieved.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>A list containing the scopes given to {@code delegatedPackage}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getDeviceOwnerLockScreenInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getDeviceOwnerLockScreenInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getDeviceOwnerLockScreenInfo' class='name expandable'>getDeviceOwnerLockScreenInfo</a>( <span class='pre'></span> ) : Object {java.lang.CharSequence}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.CharSequence}</span><div class='sub-desc'><p>The device owner information. If it is not set returns {@code null}.</p>\n</div></li></ul></div></div></div><div id='method-getEndUserSessionMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getEndUserSessionMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getEndUserSessionMessage' class='name expandable'>getEndUserSessionMessage</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the user session end message. ...</div><div class='long'><p>Returns the user session end message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-getGlobalPrivateDnsHost' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getGlobalPrivateDnsHost' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getGlobalPrivateDnsHost' class='name expandable'>getGlobalPrivateDnsHost</a>( <span class='pre'>admin</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the system-wide Private DNS host. ...</div><div class='long'><p>Returns the system-wide Private DNS host.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The hostname used for Private DNS queries, null if none is set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not the device owner.</p>\n</div></li></ul></div></div></div><div id='method-getGlobalPrivateDnsMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getGlobalPrivateDnsMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getGlobalPrivateDnsMode' class='name expandable'>getGlobalPrivateDnsMode</a>( <span class='pre'>admin</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the system-wide Private DNS mode. ...</div><div class='long'><p>Returns the system-wide Private DNS mode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>one of {@code PRIVATE_DNS_MODE_OFF}, {@code PRIVATE_DNS_MODE_OPPORTUNISTIC},\n {@code PRIVATE_DNS_MODE_PROVIDER_HOSTNAME} or {@code PRIVATE_DNS_MODE_UNKNOWN}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not the device owner.</p>\n</div></li></ul></div></div></div><div id='method-getInstalledCaCerts' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getInstalledCaCerts' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getInstalledCaCerts' class='name expandable'>getInstalledCaCerts</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns all CA certificates that are currently trusted, excluding system CA certificates. ...</div><div class='long'><p>Returns all CA certificates that are currently trusted, excluding system CA certificates.\n If a user has installed any certificates by other means than device policy these will be\n included too.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n              {@code null} if calling from a delegated certificate installer.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a List of byte[] arrays, each encoding one user CA certificate.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner.</p>\n</div></li></ul></div></div></div><div id='method-getKeepUninstalledPackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getKeepUninstalledPackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getKeepUninstalledPackages' class='name expandable'>getKeepUninstalledPackages</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the list of apps to keep around as APKs even if no user has currently installed it. ...</div><div class='long'><p>Get the list of apps to keep around as APKs even if no user has currently installed it. This\n function can be called by a device owner or by a delegate given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES\" class=\"docClass\">DELEGATION_KEEP_UNINSTALLED_PACKAGES</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.\n <p>\n Please note that packages returned in this method are not automatically pre-cached.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if the caller is a keep uninstalled packages delegate.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>List of package names to keep cached.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES\" class=\"docClass\">DELEGATION_KEEP_UNINSTALLED_PACKAGES</a></p>\n</div></li></ul></div></div></div><div id='method-getLockTaskFeatures' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getLockTaskFeatures' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getLockTaskFeatures' class='name expandable'>getLockTaskFeatures</a>( <span class='pre'>admin</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets which system features are enabled for LockTask mode. ...</div><div class='long'><p>Gets which system features are enabled for LockTask mode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>bitfield of flags. See int) for a list.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not the device owner, the profile owner of an\n affiliated user or profile, or the profile owner when no device owner is set.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskFeatures\" class=\"docClass\">setLockTaskFeatures</a></p>\n</div></li></ul></div></div></div><div id='method-getLockTaskPackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getLockTaskPackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getLockTaskPackages' class='name expandable'>getLockTaskPackages</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the list of packages allowed to start the lock task mode. ...</div><div class='long'><p>Returns the list of packages allowed to start the lock task mode.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not the device owner, the profile owner of an\n affiliated user or profile, or the profile owner when no device owner is set.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskPackages\" rel=\"android.app.admin.DevicePolicyManager-method-setLockTaskPackages\" class=\"docClass\">setLockTaskPackages</a></p>\n</div></li></ul></div></div></div><div id='method-getLongSupportMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getLongSupportMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getLongSupportMessage' class='name expandable'>getLongSupportMessage</a>( <span class='pre'>admin</span> ) : Object {java.lang.CharSequence}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device admin to get the long support message. ...</div><div class='long'><p>Called by a device admin to get the long support message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.CharSequence}</span><div class='sub-desc'><p>The message set by CharSequence) or\n         null if no message has been set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator.</p>\n</div></li></ul></div></div></div><div id='method-getMeteredDataDisabledPackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getMeteredDataDisabledPackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getMeteredDataDisabledPackages' class='name expandable'>getMeteredDataDisabledPackages</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device or profile owner to retrieve the list of packages which are restricted\n by the admin from using me...</div><div class='long'><p>Called by a device or profile owner to retrieve the list of packages which are restricted\n by the admin from using metered data.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>the list of restricted package names.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getOrganizationColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getOrganizationColor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getOrganizationColor' class='name expandable'>getOrganizationColor</a>( <span class='pre'>admin</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of a managed profile to retrieve the color used for customization. ...</div><div class='long'><p>Called by a profile owner of a managed profile to retrieve the color used for customization.\n This color is used as background color of the confirm credentials screen for that user.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The 24bit (0xRRGGBB) representation of the color to be used.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getOrganizationColorForUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getOrganizationColorForUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getOrganizationColorForUser' class='name expandable'>getOrganizationColorForUser</a>( <span class='pre'>userHandle, userHandle</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>userHandle</span> : Number<div class='sub-desc'><p>The user id of the user we're interested in.</p>\n</div></li><li><span class='pre'>userHandle</span> : Object<div class='sub-desc'><p>The user id of the user we're interested in.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The 24bit (0xRRGGBB) representation of the color to be used.</p>\n</div></li></ul></div></div></div><div id='method-getOrganizationName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getOrganizationName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getOrganizationName' class='name expandable'>getOrganizationName</a>( <span class='pre'>admin</span> ) : Object {java.lang.CharSequence}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of a managed profile to retrieve the name of the organization under\n management. ...</div><div class='long'><p>Called by a profile owner of a managed profile to retrieve the name of the organization under\n management.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.CharSequence}</span><div class='sub-desc'><p>The organization name or {@code null} if none is set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getOverrideApns' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getOverrideApns' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getOverrideApns' class='name expandable'>getOverrideApns</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to get all override APNs inserted by device owner. ...</div><div class='long'><p>Called by device owner to get all override APNs inserted by device owner.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>A list of override APNs inserted by device owner.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" rel=\"android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" class=\"docClass\">setOverrideApnsEnabled</a>(ComponentName, boolean)</p>\n</div></li></ul></div></div></div><div id='method-getPasswordComplexity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPasswordComplexity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPasswordComplexity' class='name expandable'>getPasswordComplexity</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns how complex the current user's screen lock is. ...</div><div class='long'><p>Returns how complex the current user's screen lock is.</p>\n\n<p> <p>Note that when called from a profile which uses an unified challenge with its parent, the\n screen lock complexity of the parent will be returned. However, this API does not support\n explicitly querying the parent profile screen lock complexity via getParentProfileInstance.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the user is not unlocked.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the calling application does not have the permission\n                           permission.REQUEST_PASSWORD_COMPLEXITY</p>\n</div></li></ul></div></div></div><div id='method-getPasswordExpiration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPasswordExpiration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPasswordExpiration' class='name expandable'>getPasswordExpiration</a>( <span class='pre'>admin</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the current password expiration time for a particular admin or all admins that set\n restrictions on this user and...</div><div class='long'><p>Get the current password expiration time for a particular admin or all admins that set\n restrictions on this user and its participating profiles. Restrictions on profiles that have\n a separate challenge are not taken into account. If admin is {@code null}, then a composite\n of all expiration times is returned - which will be the minimum of all of them.</p>\n\n<p> <p>This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance\n returned by getParentProfileInstance(ComponentName) in order to retrieve\n the password expiration for the parent profile.</p>\n\n<p> <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password expiration is always disabled and this method always returns 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The name of the admin component to check, or {@code null} to aggregate all admins.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The password expiration time, in milliseconds since epoch.</p>\n</div></li></ul></div></div></div><div id='method-getPasswordExpirationTimeout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPasswordExpirationTimeout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPasswordExpirationTimeout' class='name expandable'>getPasswordExpirationTimeout</a>( <span class='pre'>admin</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the password expiration timeout for the given admin. ...</div><div class='long'><p>Get the password expiration timeout for the given admin. The expiration timeout is the\n recurring expiration timeout provided in the call to\n long) for the given admin or the\n aggregate of all participating policy administrators if {@code admin} is null. Admins that\n have set restrictions on profiles that have a separate challenge are not taken into account.</p>\n\n<p> <p>This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance\n returned by getParentProfileInstance(ComponentName) in order to retrieve\n restrictions on the parent profile.</p>\n\n<p> <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password expiration is always disabled and this method always returns 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The name of the admin component to check, or {@code null} to aggregate all admins.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The timeout for the given admin or the minimum of all timeouts</p>\n</div></li></ul></div></div></div><div id='method-getPasswordMaximumLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPasswordMaximumLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPasswordMaximumLength' class='name expandable'>getPasswordMaximumLength</a>( <span class='pre'>quality</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the maximum password length that the device supports for a\n particular password quality. ...</div><div class='long'><p>Return the maximum password length that the device supports for a\n particular password quality.\n <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always empty and this method always returns 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>quality</span> : Number<div class='sub-desc'><p>The quality being interrogated.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the maximum length that the user can enter.</p>\n</div></li></ul></div></div></div><div id='method-getPendingSystemUpdate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPendingSystemUpdate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPendingSystemUpdate' class='name expandable'>getPendingSystemUpdate</a>( <span class='pre'>admin</span> ) : Object {android.app.admin.SystemUpdateInfo}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device or profile owners to get information about a pending system update. ...</div><div class='long'><p>Called by device or profile owners to get information about a pending system update.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which profile or device owner this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.admin.SystemUpdateInfo}</span><div class='sub-desc'><p>Information about a pending system update or {@code null} if no update pending.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see DeviceAdminReceiver#onSystemUpdatePending(Context, Intent, long)</p>\n</div></li></ul></div></div></div><div id='method-getPermissionGrantState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPermissionGrantState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPermissionGrantState' class='name expandable'>getPermissionGrantState</a>( <span class='pre'>admin, packageName, permission</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current grant state of a runtime permission for a specific application. ...</div><div class='long'><p>Returns the current grant state of a runtime permission for a specific application. This\n function can be called by a device owner, profile owner, or by a delegate given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" class=\"docClass\">DELEGATION_PERMISSION_GRANT</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which profile or device owner this request is associated with, or {@code null}\n            if the caller is a permission grant delegate.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The application to check the grant state for.</p>\n</div></li><li><span class='pre'>permission</span> : String<div class='sub-desc'><p>The permission to check for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current grant state specified by device policy. If the profile or device owner\n         has not set a grant state, the return value is\n         <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" class=\"docClass\">PERMISSION_GRANT_STATE_DEFAULT</a>. This does not indicate whether or not the\n         permission is currently granted for the package.\n         <p/>\n         If a grant state was set by the profile or device owner, then the return value will\n         be one of <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED\" class=\"docClass\">PERMISSION_GRANT_STATE_DENIED</a> or\n         <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED\" class=\"docClass\">PERMISSION_GRANT_STATE_GRANTED</a>, which indicates if the permission is\n         currently denied or granted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPermissionGrantState\" rel=\"android.app.admin.DevicePolicyManager-method-setPermissionGrantState\" class=\"docClass\">setPermissionGrantState</a>(ComponentName, String, String, int)\n@see PackageManager#checkPermission(String, String)\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" class=\"docClass\">DELEGATION_PERMISSION_GRANT</a></p>\n</div></li></ul></div></div></div><div id='method-getPermissionPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPermissionPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPermissionPolicy' class='name expandable'>getPermissionPolicy</a>( <span class='pre'>admin</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current runtime permission policy set by the device or profile owner. ...</div><div class='long'><p>Returns the current runtime permission policy set by the device or profile owner. The\n default is <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_PROMPT\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_PROMPT\" class=\"docClass\">PERMISSION_POLICY_PROMPT</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which profile or device owner this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current policy for future permission requests.</p>\n</div></li></ul></div></div></div><div id='method-getPermittedCrossProfileNotificationListeners' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPermittedCrossProfileNotificationListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPermittedCrossProfileNotificationListeners' class='name expandable'>getPermittedCrossProfileNotificationListeners</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the list of packages installed on the primary user that allowed to use a\n android.service.notification.Notifi...</div><div class='long'><p>Returns the list of packages installed on the primary user that allowed to use a\n android.service.notification.NotificationListenerService to receive\n notifications from this managed profile, as set by the profile owner.\n <p>\n An empty list means no notification listener services except system ones are allowed.\n A {@code null} return value indicates that all notification listeners are allowed.</p>\n</div></div></div><div id='method-getPermittedInputMethods' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getPermittedInputMethods' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getPermittedInputMethods' class='name expandable'>getPermittedInputMethods</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the list of permitted input methods set by this device or profile owner. ...</div><div class='long'><p>Returns the list of permitted input methods set by this device or profile owner.\n <p>\n An empty list means no input methods except system input methods are allowed. Null means all\n input methods are allowed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>List of input method package names.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getProfileOwnerNameAsUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getProfileOwnerNameAsUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getProfileOwnerNameAsUser' class='name expandable'>getProfileOwnerNameAsUser</a>( <span class='pre'>userId, userId</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>userId</span> : Number<div class='sub-desc'><p>The user for whom to fetch the profile owner name, if any.</p>\n</div></li><li><span class='pre'>userId</span> : Object<div class='sub-desc'><p>The user for whom to fetch the profile owner name, if any.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the human readable name of the organisation associated with this profile owner or\n         null if one is not set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the userId is invalid.</p>\n</div></li></ul></div></div></div><div id='method-getSecondaryUsers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getSecondaryUsers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getSecondaryUsers' class='name expandable'>getSecondaryUsers</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to list all secondary users on the device. ...</div><div class='long'><p>Called by a device owner to list all secondary users on the device. Managed profiles are not\n considered as secondary users.\n <p> Used for various user management APIs, including <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-switchUser\" rel=\"android.app.admin.DevicePolicyManager-method-switchUser\" class=\"docClass\">switchUser</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-removeUser\" rel=\"android.app.admin.DevicePolicyManager-method-removeUser\" class=\"docClass\">removeUser</a>\n and <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-stopUser\" rel=\"android.app.admin.DevicePolicyManager-method-stopUser\" class=\"docClass\">stopUser</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>list of other UserHandles on the device.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-removeUser\" rel=\"android.app.admin.DevicePolicyManager-method-removeUser\" class=\"docClass\">removeUser</a>(ComponentName, UserHandle)\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-switchUser\" rel=\"android.app.admin.DevicePolicyManager-method-switchUser\" class=\"docClass\">switchUser</a>(ComponentName, UserHandle)\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-startUserInBackground\" rel=\"android.app.admin.DevicePolicyManager-method-startUserInBackground\" class=\"docClass\">startUserInBackground</a>(ComponentName, UserHandle)\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-stopUser\" rel=\"android.app.admin.DevicePolicyManager-method-stopUser\" class=\"docClass\">stopUser</a>(ComponentName, UserHandle)</p>\n</div></li></ul></div></div></div><div id='method-getShortSupportMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getShortSupportMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getShortSupportMessage' class='name expandable'>getShortSupportMessage</a>( <span class='pre'>admin</span> ) : Object {java.lang.CharSequence}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device admin to get the short support message. ...</div><div class='long'><p>Called by a device admin to get the short support message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.CharSequence}</span><div class='sub-desc'><p>The message set by CharSequence) or\n         null if no message has been set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator.</p>\n</div></li></ul></div></div></div><div id='method-getStartUserSessionMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getStartUserSessionMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getStartUserSessionMessage' class='name expandable'>getStartUserSessionMessage</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the user session start message. ...</div><div class='long'><p>Returns the user session start message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-getStorageEncryption' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getStorageEncryption' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getStorageEncryption' class='name expandable'>getStorageEncryption</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to\n determine the requested setting for secure storage. ...</div><div class='long'><p>Called by an application that is administering the device to\n determine the requested setting for secure storage.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.  If null,\n this will return the requested encryption setting as an aggregate of all active\n administrators.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the admin(s) are requesting encryption, false if not.</p>\n</div></li></ul></div></div></div><div id='method-getSystemUpdatePolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getSystemUpdatePolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getSystemUpdatePolicy' class='name expandable'>getSystemUpdatePolicy</a>( <span class='pre'></span> ) : Object {android.app.admin.SystemUpdatePolicy}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve a local system update policy set previously by setSystemUpdatePolicy. ...</div><div class='long'><p>Retrieve a local system update policy set previously by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setSystemUpdatePolicy\" rel=\"android.app.admin.DevicePolicyManager-method-setSystemUpdatePolicy\" class=\"docClass\">setSystemUpdatePolicy</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.admin.SystemUpdatePolicy}</span><div class='sub-desc'><p>The current policy object, or {@code null} if no policy is set.</p>\n</div></li></ul></div></div></div><div id='method-getTransferOwnershipBundle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getTransferOwnershipBundle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getTransferOwnershipBundle' class='name expandable'>getTransferOwnershipBundle</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the data passed from the current administrator to the new administrator during an\n ownership transfer. ...</div><div class='long'><p>Returns the data passed from the current administrator to the new administrator during an\n ownership transfer. This is the same {@code bundle} passed in\n ComponentName, PersistableBundle). The bundle is\n persisted until the profile owner or device owner is removed.</p>\n\n<p> <p>This is the same <code>bundle</code> received in the\n PersistableBundle).\n Use this method to retrieve it after the transfer as long as the new administrator is the\n active device or profile owner.</p>\n\n<p> <p>Returns <code>null</code> if no ownership transfer was started for the calling user.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-transferOwnership\" rel=\"android.app.admin.DevicePolicyManager-method-transferOwnership\" class=\"docClass\">transferOwnership</a>\n@see DeviceAdminReceiver#onTransferOwnershipComplete(Context, PersistableBundle)</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getUserRestrictions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getUserRestrictions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getUserRestrictions' class='name expandable'>getUserRestrictions</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile or device owner to get user restrictions set with\n String). ...</div><div class='long'><p>Called by a profile or device owner to get user restrictions set with\n String).\n <p>\n The target user may have more restrictions set by the system or other device owner / profile\n owner. To get all the user restrictions currently set, use\n UserManager.getUserRestrictions().</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-getWifiMacAddress' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-getWifiMacAddress' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-getWifiMacAddress' class='name expandable'>getWifiMacAddress</a>( <span class='pre'>admin</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to get the MAC address of the Wi-Fi device. ...</div><div class='long'><p>Called by device owner to get the MAC address of the Wi-Fi device.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which device owner this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the MAC address of the Wi-Fi device, or null when the information is not available.\n         (For example, Wi-Fi hasn't been enabled, or the device doesn't support Wi-Fi.)\n         <p>\n         The address will be in the {@code XX:XX:XX:XX:XX:XX} format.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-hasCaCertInstalled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-hasCaCertInstalled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-hasCaCertInstalled' class='name expandable'>hasCaCertInstalled</a>( <span class='pre'>admin, certBuffer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether this certificate is installed as a trusted CA. ...</div><div class='long'><p>Returns whether this certificate is installed as a trusted CA.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n              {@code null} if calling from a delegated certificate installer.</p>\n</div></li><li><span class='pre'>certBuffer</span> : Object {byte[]}<div class='sub-desc'><p>encoded form of the certificate to look up.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner.</p>\n</div></li></ul></div></div></div><div id='method-hasGrantedPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-hasGrantedPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-hasGrantedPolicy' class='name expandable'>hasGrantedPolicy</a>( <span class='pre'>admin, usesPolicy</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if an administrator has been granted a particular device policy. ...</div><div class='long'><p>Returns true if an administrator has been granted a particular device policy. This can be\n used to check whether the administrator was activated under an earlier set of policies, but\n requires additional policies after an upgrade.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with. Must be an\n            active administrator, or an exception will be thrown.</p>\n</div></li><li><span class='pre'>usesPolicy</span> : Number<div class='sub-desc'><p>Which uses-policy to check, as defined in DeviceAdminInfo.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator.</p>\n</div></li></ul></div></div></div><div id='method-installCaCert' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-installCaCert' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-installCaCert' class='name expandable'>installCaCert</a>( <span class='pre'>admin, certBuffer</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Installs the given certificate as a user CA. ...</div><div class='long'><p>Installs the given certificate as a user CA.\n <p>\n Inserted user CAs aren't automatically trusted by apps in Android 7.0 (API level 24) and\n higher. App developers can change the default behavior for an app by adding a\n <a href=\"{@docRoot}training/articles/security-config.html\">Security Configuration\n File</a> to the app manifest file.</p>\n\n<p> The caller must be a profile or device owner on that user, or a delegate package given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>; otherwise a\n security exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n              {@code null} if calling from a delegated certificate installer.</p>\n</div></li><li><span class='pre'>certBuffer</span> : Object {byte[]}<div class='sub-desc'><p>encoded form of the certificate to install.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>false if the certBuffer cannot be parsed or installation is\n         interrupted, true otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a></p>\n</div></li></ul></div></div></div><div id='method-installExistingPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-installExistingPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-installExistingPackage' class='name expandable'>installExistingPackage</a>( <span class='pre'>admin, packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Install an existing package that has been installed in another user, or has been kept after\n removal via setKeepUnins...</div><div class='long'><p>Install an existing package that has been installed in another user, or has been kept after\n removal via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setKeepUninstalledPackages\" rel=\"android.app.admin.DevicePolicyManager-method-setKeepUninstalledPackages\" class=\"docClass\">setKeepUninstalledPackages</a>.\n This function can be called by a device owner, profile owner or a delegate given\n the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_INSTALL_EXISTING_PACKAGE\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_INSTALL_EXISTING_PACKAGE\" class=\"docClass\">DELEGATION_INSTALL_EXISTING_PACKAGE</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.\n When called in a secondary user or managed profile, the user/profile must be affiliated with\n the device. See <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The package to be installed in the calling profile.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the app is installed; {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not the device owner, or the profile owner of\n an affiliated user or profile.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setKeepUninstalledPackages\" rel=\"android.app.admin.DevicePolicyManager-method-setKeepUninstalledPackages\" class=\"docClass\">setKeepUninstalledPackages</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a></p>\n</div></li></ul></div></div></div><div id='method-installKeyPair' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-installKeyPair' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-installKeyPair' class='name expandable'>installKeyPair</a>( <span class='pre'>admin, privKey, certs, alias, flags</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device or profile owner, or delegated certificate installer, to install a\n certificate chain and correspo...</div><div class='long'><p>Called by a device or profile owner, or delegated certificate installer, to install a\n certificate chain and corresponding private key for the leaf certificate. All apps within the\n profile will be able to access the certificate chain and use the private key, given direct\n user approval (if the user is allowed to select the private key).</p>\n\n<p> <p>The caller of this API may grant itself access to the certificate and private key\n immediately, without user approval. It is a best practice not to request this unless strictly\n necessary since it opens up additional security vulnerabilities.</p>\n\n<p> <p>Include <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-INSTALLKEY_SET_USER_SELECTABLE\" rel=\"android.app.admin.DevicePolicyManager-property-INSTALLKEY_SET_USER_SELECTABLE\" class=\"docClass\">INSTALLKEY_SET_USER_SELECTABLE</a> in the {@code flags} argument to allow\n the user to select the key from a dialog.</p>\n\n<p> <p>Note: If the provided {@code alias} is of an existing alias, all former grants that apps\n have been given to access the key and certificates associated with this alias will be\n revoked.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n        {@code null} if calling from a delegated certificate installer.</p>\n</div></li><li><span class='pre'>privKey</span> : Object {PrivateKey}<div class='sub-desc'><p>The private key to install.</p>\n</div></li><li><span class='pre'>certs</span> : Object {java.security.cert.Certificate[]}<div class='sub-desc'><p>The certificate chain to install. The chain should start with the leaf\n        certificate and include the chain of trust in order. This will be returned by\n        android.security.KeyChain.getCertificateChain.</p>\n</div></li><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>The private key alias under which to install the certificate. If a certificate\n        with that alias already exists, it will be overwritten.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Flags to request that the calling app be granted access to the credentials\n        and set the key to be user-selectable. See <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-INSTALLKEY_SET_USER_SELECTABLE\" rel=\"android.app.admin.DevicePolicyManager-property-INSTALLKEY_SET_USER_SELECTABLE\" class=\"docClass\">INSTALLKEY_SET_USER_SELECTABLE</a> and\n        <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-INSTALLKEY_REQUEST_CREDENTIALS_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-INSTALLKEY_REQUEST_CREDENTIALS_ACCESS\" class=\"docClass\">INSTALLKEY_REQUEST_CREDENTIALS_ACCESS</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the keys were installed, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner.\n@see android.security.KeyChain#getCertificateChain\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a></p>\n</div></li></ul></div></div></div><div id='method-installSystemUpdate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-installSystemUpdate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-installSystemUpdate' class='name expandable'>installSystemUpdate</a>( <span class='pre'>admin, updateFilePath, executor, callback</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to install a system update from the given file. ...</div><div class='long'><p>Called by device owner to install a system update from the given file. The device will be\n rebooted in order to finish installing the update. Note that if the device is rebooted, this\n doesn't necessarily mean that the update has been applied successfully. The caller should\n additionally check the system version with android.os.Build.FINGERPRINT or android.os.Build.VERSION. If an error occurs during processing the OTA before the reboot,\n the caller will be notified by <a href=\"#!/api/android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback\" rel=\"android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback\" class=\"docClass\">android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback</a>. If device does not have\n sufficient battery level, the installation will fail with error <a href=\"#!/api/android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback-property-UPDATE_ERROR_BATTERY_LOW\" rel=\"android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback-property-UPDATE_ERROR_BATTERY_LOW\" class=\"docClass\">android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback.UPDATE_ERROR_BATTERY_LOW</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The DeviceAdminReceiver that this request is associated with.</p>\n</div></li><li><span class='pre'>updateFilePath</span> : Object {Uri}<div class='sub-desc'><p>An Uri of the file that contains the update. The file should be\n readable by the calling app.</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>The executor through which the callback should be invoked.</p>\n</div></li><li><span class='pre'>callback</span> : Object {DevicePolicyManager.InstallSystemUpdateCallback}<div class='sub-desc'><p>A callback object that will inform the caller when installing an update\n fails.</p>\n</div></li></ul></div></div></div><div id='method-isActivePasswordSufficient' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isActivePasswordSufficient' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isActivePasswordSufficient' class='name expandable'>isActivePasswordSufficient</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Determines whether the calling user's current password meets policy requirements\n (e.g. ...</div><div class='long'><p>Determines whether the calling user's current password meets policy requirements\n (e.g. quality, minimum length). The user must be unlocked to perform this check.</p>\n\n<p> <p>Policy requirements which affect this check can be set by admins of the user, but also\n by the admin of a managed profile associated with the calling user (when the managed profile\n doesn't have a separate work challenge). When a managed profile has a separate work\n challenge, its policy requirements only affect the managed profile.</p>\n\n<p> <p>Depending on the user, this method checks the policy requirement against one of the\n following passwords:\n <ul>\n <li>For the primary user or secondary users: the personal keyguard password.\n <li>For managed profiles: a work challenge if set, otherwise the parent user's personal\n     keyguard password.\n <ul/>\n In other words, it's always checking the requirement against the password that is protecting\n the calling user.</ul></li></li></ul></p>\n\n<p> <p>Note that this method considers all policy requirements targeting the password in\n question. For example a profile owner might set a requirement on the parent profile i.e.\n personal keyguard but not on the profile itself. When the device has a weak personal keyguard\n password and no separate work challenge, calling this method will return {@code false}\n despite the profile owner not setting a policy on the profile itself. This is because the\n profile's current password is the personal keyguard password, and it does not meet all policy\n requirements.</p>\n\n<p> <p>Device admins must request <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> before\n calling this method. Note, this policy type is deprecated for device admins in Android 9.0\n (API level 28) or higher.</p>\n\n<p> <p>This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to determine if the password set on\n the parent profile is sufficient.</p>\n\n<p> <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty - i.e. this method will always return false on such\n devices, provided any password requirements were set.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the password meets the policy requirements, {@code false} otherwise</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the calling application isn't an active admin that uses\n     DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the user isn't unlocked</p>\n</div></li></ul></div></div></div><div id='method-isAdminActive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isAdminActive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isAdminActive' class='name expandable'>isAdminActive</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return true if the given administrator component is currently active (enabled) in the system. ...</div><div class='long'><p>Return true if the given administrator component is currently active (enabled) in the system.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The administrator component to check for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if {@code admin} is currently enabled in the system, {@code false}\n         otherwise</p>\n</div></li></ul></div></div></div><div id='method-isAffiliatedUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isAffiliatedUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser' class='name expandable'>isAffiliatedUser</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether this user/profile is affiliated with the device. ...</div><div class='long'><p>Returns whether this user/profile is affiliated with the device.\n <p>\n By definition, the user that the device owner runs on is always affiliated with the device.\n Any other user/profile is considered affiliated with the device if the set specified by its\n profile owner via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a> intersects with the device owner's.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a></p>\n</div></div></div><div id='method-isAlwaysOnVpnLockdownEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isAlwaysOnVpnLockdownEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isAlwaysOnVpnLockdownEnabled' class='name expandable'>isAlwaysOnVpnLockdownEnabled</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device or profile owner to query whether current always-on VPN is configured in\n lockdown mode. ...</div><div class='long'><p>Called by device or profile owner to query whether current always-on VPN is configured in\n lockdown mode. Returns {@code false} when no always-on configuration is set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAlwaysOnVpnPackage\" rel=\"android.app.admin.DevicePolicyManager-method-setAlwaysOnVpnPackage\" class=\"docClass\">setAlwaysOnVpnPackage</a>(ComponentName, String, boolean)</p>\n</div></li></ul></div></div></div><div id='method-isApplicationHidden' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isApplicationHidden' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isApplicationHidden' class='name expandable'>isApplicationHidden</a>( <span class='pre'>admin, packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Determine if a package is hidden. ...</div><div class='long'><p>Determine if a package is hidden. This function can be called by a device owner, profile\n owner, or by a delegate given the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a> scope via\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if the caller is a package access delegate.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The name of the package to retrieve the hidden status of.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>boolean {@code true} if the package is hidden, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a></p>\n</div></li></ul></div></div></div><div id='method-isBackupServiceEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isBackupServiceEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isBackupServiceEnabled' class='name expandable'>isBackupServiceEnabled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return whether the backup service is enabled by the device owner or profile owner for the\n current user, as previousl...</div><div class='long'><p>Return whether the backup service is enabled by the device owner or profile owner for the\n current user, as previously set by boolean).</p>\n\n<p> <p> Whether the backup functionality is actually enabled or not depends on settings from both\n the current user and the device owner, please see\n boolean) for details.</p>\n\n<p> <p> Backup service manages all backup and restore mechanisms on the device.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if backup service is enabled, {@code false} otherwise.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setBackupServiceEnabled\" rel=\"android.app.admin.DevicePolicyManager-method-setBackupServiceEnabled\" class=\"docClass\">setBackupServiceEnabled</a></p>\n</div></li></ul></div></div></div><div id='method-isCallerApplicationRestrictionsManagingPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isCallerApplicationRestrictionsManagingPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isCallerApplicationRestrictionsManagingPackage' class='name expandable'>isCallerApplicationRestrictionsManagingPackage</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Called by any application to find out whether it has been granted permission via\n setApplicationRestrictionsManagingP...</div><div class='long'><p>Called by any application to find out whether it has been granted permission via\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setApplicationRestrictionsManagingPackage\" rel=\"android.app.admin.DevicePolicyManager-method-setApplicationRestrictionsManagingPackage\" class=\"docClass\">setApplicationRestrictionsManagingPackage</a> to manage application restrictions\n for the calling user.</p>\n\n<p> <p>This is done by comparing the calling Linux uid with the uid of the package specified by\n that method.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-getDelegatedScopes\" class=\"docClass\">getDelegatedScopes</a>\n instead.</p>\n\n        </div>\n</div></div></div><div id='method-isDeviceIdAttestationSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isDeviceIdAttestationSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isDeviceIdAttestationSupported' class='name expandable'>isDeviceIdAttestationSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if the device supports attestation of device identifiers in addition\n to key attestation. ...</div><div class='long'><p>Returns {@code true} if the device supports attestation of device identifiers in addition\n to key attestation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if Device ID attestation is supported.</p>\n</div></li></ul></div></div></div><div id='method-isDeviceOwnerApp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isDeviceOwnerApp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isDeviceOwnerApp' class='name expandable'>isDeviceOwnerApp</a>( <span class='pre'>packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Used to determine if a particular package has been registered as a Device Owner app. ...</div><div class='long'><p>Used to determine if a particular package has been registered as a Device Owner app.\n A device owner app is a special device admin that cannot be deactivated by the user, once\n activated as a device admin. It also cannot be uninstalled. To check whether a particular\n package is currently registered as the device owner app, pass in the package name from\n Context.getPackageName() to this method.<p/>This is useful for device\n admin apps that want to check whether they are also registered as the device owner app. The\n exact mechanism by which a device admin app is registered as a device owner app is defined by\n the setup process.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>the package name of the app, to compare with the registered device owner\n app, if any.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether or not the package is registered as the device owner app.</p>\n</div></li></ul></div></div></div><div id='method-isEphemeralUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isEphemeralUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isEphemeralUser' class='name expandable'>isEphemeralUser</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the profile owner is running in an ephemeral user. ...</div><div class='long'><p>Checks if the profile owner is running in an ephemeral user.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether the profile owner is running in an ephemeral user.</p>\n</div></li></ul></div></div></div><div id='method-isLockTaskPermitted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isLockTaskPermitted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isLockTaskPermitted' class='name expandable'>isLockTaskPermitted</a>( <span class='pre'>pkg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This function lets the caller know whether the given component is allowed to start the\n lock task mode. ...</div><div class='long'><p>This function lets the caller know whether the given component is allowed to start the\n lock task mode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pkg</span> : String<div class='sub-desc'><p>The package to check</p>\n</div></li></ul></div></div></div><div id='method-isLogoutEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isLogoutEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isLogoutEnabled' class='name expandable'>isLogoutEnabled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether logout is enabled by a device owner. ...</div><div class='long'><p>Returns whether logout is enabled by a device owner.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if logout is enabled by device owner, {@code false} otherwise.</p>\n</div></li></ul></div></div></div><div id='method-isManagedProfile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isManagedProfile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isManagedProfile' class='name expandable'>isManagedProfile</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return if this user is a managed profile of another user. ...</div><div class='long'><p>Return if this user is a managed profile of another user. An admin can become the profile\n owner of a managed profile with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a> and of a managed\n user with <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-createAndManageUser\" rel=\"android.app.admin.DevicePolicyManager-method-createAndManageUser\" class=\"docClass\">createAndManageUser</a></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which profile owner this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>if this user is a managed profile of another user.</p>\n</div></li></ul></div></div></div><div id='method-isMasterVolumeMuted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isMasterVolumeMuted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isMasterVolumeMuted' class='name expandable'>isMasterVolumeMuted</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by profile or device owners to check whether the master volume mute is on or off. ...</div><div class='long'><p>Called by profile or device owners to check whether the master volume mute is on or off.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if master volume is muted, {@code false} if it's not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-isNetworkLoggingEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isNetworkLoggingEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isNetworkLoggingEnabled' class='name expandable'>isNetworkLoggingEnabled</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return whether network logging is enabled by a device owner. ...</div><div class='long'><p>Return whether network logging is enabled by a device owner.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with. Can only\n be {@code null} if the caller is a delegated app with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_NETWORK_LOGGING\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_NETWORK_LOGGING\" class=\"docClass\">DELEGATION_NETWORK_LOGGING</a>\n or has MANAGE_USERS permission.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if network logging is enabled by device owner, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner and caller has\n no MANAGE_USERS permission</p>\n</div></li></ul></div></div></div><div id='method-isOverrideApnEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isOverrideApnEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isOverrideApnEnabled' class='name expandable'>isOverrideApnEnabled</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to check if override APNs are currently enabled. ...</div><div class='long'><p>Called by device owner to check if override APNs are currently enabled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if override APNs are currently enabled, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" rel=\"android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" class=\"docClass\">setOverrideApnsEnabled</a>(ComponentName, boolean)</p>\n</div></li></ul></div></div></div><div id='method-isPackageSuspended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isPackageSuspended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isPackageSuspended' class='name expandable'>isPackageSuspended</a>( <span class='pre'>admin, packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Determine if a package is suspended. ...</div><div class='long'><p>Determine if a package is suspended. This function can be called by a device owner, profile\n owner, or by a delegate given the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a> scope via\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if the caller is a package access delegate.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The name of the package to retrieve the suspended status of.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the package is suspended or {@code false} if the package is not\n         suspended, could not be found or an error occurred.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NameNotFoundException if the package could not be found.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a></p>\n</div></li></ul></div></div></div><div id='method-isProfileOwnerApp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isProfileOwnerApp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isProfileOwnerApp' class='name expandable'>isProfileOwnerApp</a>( <span class='pre'>packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Used to determine if a particular package is registered as the profile owner for the\n user. ...</div><div class='long'><p>Used to determine if a particular package is registered as the profile owner for the\n user. A profile owner is a special device admin that has additional privileges\n within the profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The package name of the app to compare with the registered profile owner.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether or not the package is registered as the profile owner.</p>\n</div></li></ul></div></div></div><div id='method-isProvisioningAllowed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isProvisioningAllowed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isProvisioningAllowed' class='name expandable'>isProvisioningAllowed</a>( <span class='pre'>action</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether it is possible for the caller to initiate provisioning of a managed profile\n or device, setting itsel...</div><div class='long'><p>Returns whether it is possible for the caller to initiate provisioning of a managed profile\n or device, setting itself as the device or profile owner.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : String<div class='sub-desc'><p>One of <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_DEVICE\" class=\"docClass\">ACTION_PROVISION_MANAGED_DEVICE</a>,\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_PROVISION_MANAGED_PROFILE\" class=\"docClass\">ACTION_PROVISION_MANAGED_PROFILE</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether provisioning a managed profile or device is possible.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the supplied action is not valid.</p>\n</div></li></ul></div></div></div><div id='method-isResetPasswordTokenActive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isResetPasswordTokenActive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isResetPasswordTokenActive' class='name expandable'>isResetPasswordTokenActive</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile or device owner to check if the current reset password token is active. ...</div><div class='long'><p>Called by a profile or device owner to check if the current reset password token is active.</p>\n\n<p> <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature,\n false is always returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the token is active, false otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if admin is not a device or profile owner.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if no token has been set.</p>\n</div></li></ul></div></div></div><div id='method-isSecurityLoggingEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isSecurityLoggingEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isSecurityLoggingEnabled' class='name expandable'>isSecurityLoggingEnabled</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return whether security logging is enabled or not by the device owner. ...</div><div class='long'><p>Return whether security logging is enabled or not by the device owner.</p>\n\n<p> <p>Can only be called by the device owner, otherwise a SecurityException will be\n thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which device owner this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if security logging is enabled by device owner, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-isSystemOnlyUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isSystemOnlyUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isSystemOnlyUser' class='name expandable'>isSystemOnlyUser</a>( <span class='pre'>admin, admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which device owner this request is associated with.</p>\n</div></li><li><span class='pre'>admin</span> : Object<div class='sub-desc'><p>Which device owner this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>if this user is a system-only user.</p>\n</div></li></ul></div></div></div><div id='method-isUninstallBlocked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isUninstallBlocked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isUninstallBlocked' class='name expandable'>isUninstallBlocked</a>( <span class='pre'>admin, packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Check whether the user has been blocked by device policy from uninstalling a package. ...</div><div class='long'><p>Check whether the user has been blocked by device policy from uninstalling a package.\n Requires the caller to be the profile owner if checking a specific admin's policy.\n <p>\n <strong>Note:</strong> Starting from android.os.Build.VERSION_CODES.LOLLIPOP_MR1, the\n behavior of this API is changed such that passing {@code null} as the {@code admin} parameter\n will return if any admin has blocked the uninstallation. Before L MR1, passing {@code null}\n will cause a NullPointerException to be raised.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The name of the admin component whose blocking policy will be checked, or\n            {@code null} to check whether any admin has blocked the uninstallation.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>package to check.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if uninstallation is blocked.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-isUninstallInQueue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isUninstallInQueue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isUninstallInQueue' class='name expandable'>isUninstallInQueue</a>( <span class='pre'>packageName, packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>the package to check for</p>\n</div></li><li><span class='pre'>packageName</span> : Object<div class='sub-desc'><p>the package to check for</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether the uninstall intent for {@code packageName} is pending</p>\n</div></li></ul></div></div></div><div id='method-isUsingUnifiedPassword' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-isUsingUnifiedPassword' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-isUsingUnifiedPassword' class='name expandable'>isUsingUnifiedPassword</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>When called by a profile owner of a managed profile returns true if the profile uses unified\n challenge with its pare...</div><div class='long'><p>When called by a profile owner of a managed profile returns true if the profile uses unified\n challenge with its parent user.</p>\n\n<p> <strong>Note</strong>: This method is not concerned with password quality and will return\n false if the profile has empty password as a separate challenge.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner of a managed profile.\n@see UserManager#DISALLOW_UNIFIED_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-lockNow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-lockNow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-lockNow' class='name expandable'>lockNow</a>( <span class='pre'>flags</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Make the device lock immediately, as if the lock screen timeout has expired at the point of\n this call. ...</div><div class='long'><p>Make the device lock immediately, as if the lock screen timeout has expired at the point of\n this call.\n <p>\n The calling device admin must have requested <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_FORCE_LOCK\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_FORCE_LOCK\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_FORCE_LOCK</a>\n to be able to call this method; if it has not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to lock the parent profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>May be 0 or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY\" rel=\"android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY\" class=\"docClass\">FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY</a>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the calling application does not own an active administrator\n             that uses DeviceAdminInfo.USES_POLICY_FORCE_LOCK or the\n             <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY\" rel=\"android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY\" class=\"docClass\">FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY</a> flag is passed by an application\n             that is not a profile\n             owner of a managed profile.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY\" rel=\"android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY\" class=\"docClass\">FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY</a> flag is\n             passed when locking the parent profile.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY\" rel=\"android.app.admin.DevicePolicyManager-property-FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY\" class=\"docClass\">FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY</a>\n             flag is passed when getStorageEncryptionStatus does not return\n             <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_PER_USER\" rel=\"android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE_PER_USER\" class=\"docClass\">ENCRYPTION_STATUS_ACTIVE_PER_USER</a>.</p>\n</div></li></ul></div></div></div><div id='method-logoutUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-logoutUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-logoutUser' class='name expandable'>logoutUser</a>( <span class='pre'>admin</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of secondary user that is affiliated with the device to stop the\n calling user and switch b...</div><div class='long'><p>Called by a profile owner of secondary user that is affiliated with the device to stop the\n calling user and switch back to primary.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>one of the following result codes:\n UserManager.USER_OPERATION_ERROR_UNKNOWN,\n UserManager.USER_OPERATION_SUCCESS,\n UserManager.USER_OPERATION_ERROR_MANAGED_PROFILE,\n UserManager.USER_OPERATION_ERROR_CURRENT_USER</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner affiliated with the device.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" class=\"docClass\">getSecondaryUsers</a>(ComponentName)</p>\n</div></li></ul></div></div></div><div id='method-reboot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-reboot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-reboot' class='name expandable'>reboot</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to reboot the device. ...</div><div class='long'><p>Called by device owner to reboot the device. If there is an ongoing call on the device,\n throws an IllegalStateException.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which device owner the request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if device has an ongoing call.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see TelephonyManager#CALL_STATE_IDLE</p>\n</div></li></ul></div></div></div><div id='method-removeActiveAdmin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-removeActiveAdmin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-removeActiveAdmin' class='name expandable'>removeActiveAdmin</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a current administration component. ...</div><div class='long'><p>Remove a current administration component.  This can only be called\n by the application that owns the administration component; if you\n try to remove someone else's component, a security exception will be\n thrown.</p>\n\n<p> <p>Note that the operation is not synchronous and the admin might still be active (as\n indicated by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getActiveAdmins\" rel=\"android.app.admin.DevicePolicyManager-method-getActiveAdmins\" class=\"docClass\">getActiveAdmins</a>()) by the time this method returns.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The administration compononent to remove.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not in the owner application of {@code admin}.</p>\n</div></li></ul></div></div></div><div id='method-removeCrossProfileWidgetProvider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-removeCrossProfileWidgetProvider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-removeCrossProfileWidgetProvider' class='name expandable'>removeCrossProfileWidgetProvider</a>( <span class='pre'>admin, packageName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the profile owner of a managed profile to disable widget providers from a given\n package to be available in...</div><div class='long'><p>Called by the profile owner of a managed profile to disable widget providers from a given\n package to be available in the parent profile. For this method to take effect the package\n should have been added via\n android.content.ComponentName, String).\n <p>\n <strong>Note:</strong> By default no widget provider package is white-listed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The package from which widget providers are no longer white-listed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether the package was removed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-addCrossProfileWidgetProvider\" rel=\"android.app.admin.DevicePolicyManager-method-addCrossProfileWidgetProvider\" class=\"docClass\">addCrossProfileWidgetProvider</a>(android.content.ComponentName, String)\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getCrossProfileWidgetProviders\" rel=\"android.app.admin.DevicePolicyManager-method-getCrossProfileWidgetProviders\" class=\"docClass\">getCrossProfileWidgetProviders</a>(android.content.ComponentName)</p>\n</div></li></ul></div></div></div><div id='method-removeKeyPair' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-removeKeyPair' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-removeKeyPair' class='name expandable'>removeKeyPair</a>( <span class='pre'>admin, alias</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device or profile owner, or delegated certificate installer, to remove a\n certificate and private key pai...</div><div class='long'><p>Called by a device or profile owner, or delegated certificate installer, to remove a\n certificate and private key pair installed under a given alias.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n        {@code null} if calling from a delegated certificate installer.</p>\n</div></li><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>The private key alias under which the certificate is installed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the private key alias no longer exists, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a></p>\n</div></li></ul></div></div></div><div id='method-removeOverrideApn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-removeOverrideApn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-removeOverrideApn' class='name expandable'>removeOverrideApn</a>( <span class='pre'>admin, apnId</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to remove an override APN. ...</div><div class='long'><p>Called by device owner to remove an override APN.</p>\n\n<p> <p>This method may returns {@code false} if there is no override APN with the given\n {@code apnId}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with</p>\n</div></li><li><span class='pre'>apnId</span> : Number<div class='sub-desc'><p>the {@code id} of the override APN to remove</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the required override APN is successfully removed, {@code false}\n         otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" rel=\"android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" class=\"docClass\">setOverrideApnsEnabled</a>(ComponentName, boolean)</p>\n</div></li></ul></div></div></div><div id='method-removeUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-removeUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-removeUser' class='name expandable'>removeUser</a>( <span class='pre'>admin, userHandle</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to remove a user/profile and all associated data. ...</div><div class='long'><p>Called by a device owner to remove a user/profile and all associated data. The primary user\n can not be removed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>userHandle</span> : Object {UserHandle}<div class='sub-desc'><p>the user to remove.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the user was removed, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-requestBugreport' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-requestBugreport' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-requestBugreport' class='name expandable'>requestBugreport</a>( <span class='pre'>admin</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to request a bugreport. ...</div><div class='long'><p>Called by a device owner to request a bugreport.\n <p>\n If the device contains secondary users or profiles, they must be affiliated with the device.\n Otherwise a SecurityException will be thrown. See <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the bugreport collection started successfully, or {@code false} if it\n         wasn't triggered because a previous bugreport operation is still active (either the\n         bugreport is still running or waiting for the user to share or decline)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner, or there is at least one\n         profile or secondary user that is not affiliated with the device.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a></p>\n</div></li></ul></div></div></div><div id='method-resetPassword' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-resetPassword' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-resetPassword' class='name expandable'>resetPassword</a>( <span class='pre'>password, flags</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Force a new password for device unlock (the password needed to access the entire device) or\n the work profile challen...</div><div class='long'><p>Force a new password for device unlock (the password needed to access the entire device) or\n the work profile challenge on the current user. This takes effect immediately.\n <p>\n <em>For device owner and profile owners targeting SDK level\n android.os.Build.VERSION_CODES.O or above, this API is no longer available and will\n throw SecurityException. Please use the new API <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-resetPasswordWithToken\" rel=\"android.app.admin.DevicePolicyManager-method-resetPasswordWithToken\" class=\"docClass\">resetPasswordWithToken</a>\n instead. </em>\n <p>\n <em>Note: This API has been limited as of android.os.Build.VERSION_CODES.N for\n device admins that are not device owner and not profile owner.\n The password can now only be changed if there is currently no password set.  Device owner\n and profile owner can still do this when user is unlocked and does not have a managed\n profile.</em>\n <p>\n The given password must be sufficient for the current password quality and length constraints\n as returned by getPasswordQuality(ComponentName) and\n getPasswordMinimumLength(ComponentName); if it does not meet these constraints, then\n it will be rejected and false returned. Note that the password may be a stronger quality\n (containing alphanumeric characters when the requested quality is only numeric), in which\n case the currently active quality will be increased to match.\n <p>\n Calling with a null or empty password will clear any existing PIN, pattern or password if the\n current password constraints allow it. <em>Note: This will not work in\n android.os.Build.VERSION_CODES.N and later for managed profiles, or for device admins\n that are not device owner or profile owner.  Once set, the password cannot be changed to null\n or empty except by these admins.</em>\n <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, this\n methods does nothing.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_RESET_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_RESET_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_RESET_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>password</span> : String<div class='sub-desc'><p>The new password for the user. Null or empty clears the password.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>May be 0 or combination of <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_REQUIRE_ENTRY\" rel=\"android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_REQUIRE_ENTRY\" class=\"docClass\">RESET_PASSWORD_REQUIRE_ENTRY</a> and\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT\" rel=\"android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT\" class=\"docClass\">RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if the password was applied, or false if it is not acceptable for the\n         current constraints or if the user has not been decrypted yet.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the calling application does not own an active administrator\n             that uses DeviceAdminInfo.USES_POLICY_RESET_PASSWORD</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the calling user is locked or has a managed profile.</p>\n</div></li></ul></div></div></div><div id='method-resetPasswordWithToken' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-resetPasswordWithToken' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-resetPasswordWithToken' class='name expandable'>resetPasswordWithToken</a>( <span class='pre'>admin, password, token, flags</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device or profile owner to force set a new device unlock password or a managed\n profile challenge on curren...</div><div class='long'><p>Called by device or profile owner to force set a new device unlock password or a managed\n profile challenge on current user. This takes effect immediately.\n <p>\n Unlike <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-resetPassword\" rel=\"android.app.admin.DevicePolicyManager-method-resetPassword\" class=\"docClass\">resetPassword</a>, this API can change the password even before the user or\n device is unlocked or decrypted. The supplied token must have been previously provisioned via\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setResetPasswordToken\" rel=\"android.app.admin.DevicePolicyManager-method-setResetPasswordToken\" class=\"docClass\">setResetPasswordToken</a>, and in active state <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isResetPasswordTokenActive\" rel=\"android.app.admin.DevicePolicyManager-method-isResetPasswordTokenActive\" class=\"docClass\">isResetPasswordTokenActive</a>.\n <p>\n The given password must be sufficient for the current password quality and length constraints\n as returned by getPasswordQuality(ComponentName) and\n getPasswordMinimumLength(ComponentName); if it does not meet these constraints, then\n it will be rejected and false returned. Note that the password may be a stronger quality, for\n example, a password containing alphanumeric characters when the requested quality is only\n numeric.\n <p>\n Calling with a {@code null} or empty password will clear any existing PIN, pattern or\n password if the current password constraints allow it.\n <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature,\n calling this methods has no effect - the password is always empty - and false is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>password</span> : String<div class='sub-desc'><p>The new password for the user. {@code null} or empty clears the password.</p>\n</div></li><li><span class='pre'>token</span> : Object {byte[]}<div class='sub-desc'><p>the password reset token previously provisioned by\n        <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setResetPasswordToken\" rel=\"android.app.admin.DevicePolicyManager-method-setResetPasswordToken\" class=\"docClass\">setResetPasswordToken</a>.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>May be 0 or combination of <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_REQUIRE_ENTRY\" rel=\"android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_REQUIRE_ENTRY\" class=\"docClass\">RESET_PASSWORD_REQUIRE_ENTRY</a> and\n        <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT\" rel=\"android.app.admin.DevicePolicyManager-property-RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT\" class=\"docClass\">RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if the password was applied, or false if it is not acceptable for the\n         current constraints.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if admin is not a device or profile owner.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the provided token is not valid.</p>\n</div></li></ul></div></div></div><div id='method-retrieveNetworkLogs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-retrieveNetworkLogs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-retrieveNetworkLogs' class='name expandable'>retrieveNetworkLogs</a>( <span class='pre'>admin, batchToken</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner or delegated app with DELEGATION_NETWORK_LOGGING to retrieve\n the most recent batch of network...</div><div class='long'><p>Called by device owner or delegated app with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_NETWORK_LOGGING\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_NETWORK_LOGGING\" class=\"docClass\">DELEGATION_NETWORK_LOGGING</a> to retrieve\n the most recent batch of network logging events.\n A device owner has to provide a batchToken provided as part of\n <a href=\"#!/api/android.app.admin.DeviceAdminReceiver-method-onNetworkLogsAvailable\" rel=\"android.app.admin.DeviceAdminReceiver-method-onNetworkLogsAvailable\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.onNetworkLogsAvailable</a> callback. If the token doesn't match the\n token of the most recent available batch of logs, {@code null} will be returned.</p>\n\n<p> <p> <a href=\"#!/api/android.app.admin.NetworkEvent\" rel=\"android.app.admin.NetworkEvent\" class=\"docClass\">android.app.admin.NetworkEvent</a> can be one of <a href=\"#!/api/android.app.admin.DnsEvent\" rel=\"android.app.admin.DnsEvent\" class=\"docClass\">android.app.admin.DnsEvent</a> or <a href=\"#!/api/android.app.admin.ConnectEvent\" rel=\"android.app.admin.ConnectEvent\" class=\"docClass\">android.app.admin.ConnectEvent</a>.</p>\n\n<p> <p> The list of network events is sorted chronologically, and contains at most 1200 events.</p>\n\n<p> <p> Access to the logs is rate limited and this method will only return a new batch of logs\n after the device device owner has been notified via\n <a href=\"#!/api/android.app.admin.DeviceAdminReceiver-method-onNetworkLogsAvailable\" rel=\"android.app.admin.DeviceAdminReceiver-method-onNetworkLogsAvailable\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.onNetworkLogsAvailable</a>.</p>\n\n<p> <p>If a secondary user or profile is created, calling this method will throw a\n SecurityException until all users become affiliated again. It will also no longer be\n possible to retrieve the network logs batch with the most recent batchToken provided\n by <a href=\"#!/api/android.app.admin.DeviceAdminReceiver-method-onNetworkLogsAvailable\" rel=\"android.app.admin.DeviceAdminReceiver-method-onNetworkLogsAvailable\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.onNetworkLogsAvailable</a>. See\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n        {@code null} if called by a delegated app.</p>\n</div></li><li><span class='pre'>batchToken</span> : Number<div class='sub-desc'><p>A token of the batch to retrieve</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>A new batch of network logs which is a list of NetworkEvent. Returns\n        {@code null} if the batch represented by batchToken is no longer available or if\n        logging is disabled.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner, or there is at least one\n profile or secondary user that is not affiliated with the device.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a>\n@see DeviceAdminReceiver#onNetworkLogsAvailable</p>\n</div></li></ul></div></div></div><div id='method-retrievePreRebootSecurityLogs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-retrievePreRebootSecurityLogs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-retrievePreRebootSecurityLogs' class='name expandable'>retrievePreRebootSecurityLogs</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owners to retrieve device logs from before the device's last reboot. ...</div><div class='long'><p>Called by device owners to retrieve device logs from before the device's last reboot.\n <p>\n <strong> This API is not supported on all devices. Calling this API on unsupported devices\n will result in {@code null} being returned. The device logs are retrieved from a RAM region\n which is not guaranteed to be corruption-free during power cycles, as a result be cautious\n about data corruption when parsing. </strong></p>\n\n<p> <p>If there is any other user or profile on the device, it must be affiliated with the\n device. Otherwise a SecurityException will be thrown. See <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which device owner this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>Device logs from before the latest reboot of the system, or {@code null} if this API\n         is not supported on the device.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner, or there is at least one\n profile or secondary user that is not affiliated with the device.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-retrieveSecurityLogs\" rel=\"android.app.admin.DevicePolicyManager-method-retrieveSecurityLogs\" class=\"docClass\">retrieveSecurityLogs</a></p>\n</div></li></ul></div></div></div><div id='method-retrieveSecurityLogs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-retrieveSecurityLogs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-retrieveSecurityLogs' class='name expandable'>retrieveSecurityLogs</a>( <span class='pre'>admin</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to retrieve all new security logging entries since the last call to\n this API after device boots. ...</div><div class='long'><p>Called by device owner to retrieve all new security logging entries since the last call to\n this API after device boots.</p>\n\n<p> <p> Access to the logs is rate limited and it will only return new logs after the device\n owner has been notified via <a href=\"#!/api/android.app.admin.DeviceAdminReceiver-method-onSecurityLogsAvailable\" rel=\"android.app.admin.DeviceAdminReceiver-method-onSecurityLogsAvailable\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.onSecurityLogsAvailable</a>.</p>\n\n<p> <p>If there is any other user or profile on the device, it must be affiliated with the\n device. Otherwise a SecurityException will be thrown. See <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which device owner this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>the new batch of security logs which is a list of SecurityEvent,\n or {@code null} if rate limitation is exceeded or if logging is currently disabled.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner, or there is at least one\n profile or secondary user that is not affiliated with the device.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>\n@see DeviceAdminReceiver#onSecurityLogsAvailable</p>\n</div></li></ul></div></div></div><div id='method-setAccountManagementDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setAccountManagementDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setAccountManagementDisabled' class='name expandable'>setAccountManagementDisabled</a>( <span class='pre'>admin, accountType, disabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner or profile owner to disable account management for a specific type\n of account. ...</div><div class='long'><p>Called by a device owner or profile owner to disable account management for a specific type\n of account.\n <p>\n The calling device admin must be a device owner or profile owner. If it is not, a security\n exception will be thrown.\n <p>\n When account management is disabled for an account type, adding or removing an account of\n that type will not be possible.\n <p>\n From android.os.Build.VERSION_CODES.N the profile or device owner can still use\n android.accounts.AccountManager APIs to add or remove accounts when account\n management for a specific type is disabled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>accountType</span> : String<div class='sub-desc'><p>For which account management is disabled or enabled.</p>\n</div></li><li><span class='pre'>disabled</span> : Boolean<div class='sub-desc'><p>The boolean indicating that account management will be disabled (true) or\n            enabled (false).</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setActiveProfileOwner' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setActiveProfileOwner' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setActiveProfileOwner' class='name expandable'>setActiveProfileOwner</a>( <span class='pre'>admin, ownerName, admin, ownerName</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The component to register as an active admin and profile owner.</p>\n</div></li><li><span class='pre'>ownerName</span> : String<div class='sub-desc'><p>The user-visible name of the entity that is managing this user.</p>\n</div></li><li><span class='pre'>admin</span> : Object<div class='sub-desc'><p>The component to register as an active admin and profile owner.</p>\n</div></li><li><span class='pre'>ownerName</span> : Object<div class='sub-desc'><p>The user-visible name of the entity that is managing this user.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether the admin was successfully registered as the profile owner.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if packageName is null, the package isn't installed, or\n         the user has already been set up.</p>\n</div></li></ul></div></div></div><div id='method-setAffiliationIds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setAffiliationIds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds' class='name expandable'>setAffiliationIds</a>( <span class='pre'>admin, ids</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates the entity that controls the device or profile owner. ...</div><div class='long'><p>Indicates the entity that controls the device or profile owner. Two users/profiles are\n affiliated if the set of ids set by their device or profile owners intersect.</p>\n\n<p> <p>A user/profile that is affiliated with the device owner user is considered to be\n affiliated with the device.</p>\n\n<p> <p><strong>Note:</strong> Features that depend on user affiliation (such as security logging\n or <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-bindDeviceAdminServiceAsUser\" rel=\"android.app.admin.DevicePolicyManager-method-bindDeviceAdminServiceAsUser\" class=\"docClass\">bindDeviceAdminServiceAsUser</a>) won't be available when a secondary user or profile\n is created, until it becomes affiliated. Therefore it is recommended that the appropriate\n affiliation ids are set by its profile owner as soon as possible after the user/profile is\n created.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which profile or device owner this request is associated with.</p>\n</div></li><li><span class='pre'>ids</span> : Object {java.util.Set}<div class='sub-desc'><p>A set of opaque non-empty affiliation ids.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code ids} is null or contains an empty string.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a></p>\n</div></li></ul></div></div></div><div id='method-setAlwaysOnVpnPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setAlwaysOnVpnPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setAlwaysOnVpnPackage' class='name expandable'>setAlwaysOnVpnPackage</a>( <span class='pre'>vpnPackage, lockdownEnabled, lockdownWhitelist</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>A version of String, boolean) that allows the\n admin to specify a set of apps that should be able to access the netwo...</div><div class='long'><p>A version of String, boolean) that allows the\n admin to specify a set of apps that should be able to access the network directly when VPN\n is not connected. When VPN connects these apps switch over to VPN if allowed to use that VPN.\n System apps can always bypass VPN.\n <p> Note that the system doesn't update the whitelist when packages are installed or\n uninstalled, the admin app must call this method to keep the list up to date.\n <p> When {@code lockdownEnabled} is false {@code lockdownWhitelist} is ignored . When\n {@code lockdownEnabled} is {@code true} and {@code lockdownWhitelist} is {@code null} or\n empty, only system apps can bypass VPN.\n <p> Setting always-on VPN package to {@code null} or using\n String, boolean) clears lockdown whitelist.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>vpnPackage</span> : Object {ComponentName}<div class='sub-desc'><p>package name for an installed VPN app on the device, or {@code null}\n         to remove an existing always-on VPN configuration</p>\n</div></li><li><span class='pre'>lockdownEnabled</span> : String<div class='sub-desc'><p>{@code true} to disallow networking when the VPN is not connected or\n         {@code false} otherwise. This has no effect when clearing.</p>\n</div></li><li><span class='pre'>lockdownWhitelist</span> : Boolean<div class='sub-desc'><p>Packages that will be able to access the network directly when VPN\n         is in lockdown mode but not connected. Has no effect when clearing.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile\n         owner.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NameNotFoundException if {@code vpnPackage} or one of\n         {@code lockdownWhitelist} is not installed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if {@code vpnPackage} exists but does\n         not support being set as always-on, or if always-on VPN is not\n         available.</p>\n</div></li></ul></div></div></div><div id='method-setApplicationHidden' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setApplicationHidden' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setApplicationHidden' class='name expandable'>setApplicationHidden</a>( <span class='pre'>admin, packageName, hidden</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Hide or unhide packages. ...</div><div class='long'><p>Hide or unhide packages. When a package is hidden it is unavailable for use, but the data and\n actual package file remain. This function can be called by a device owner, profile owner, or\n by a delegate given the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a> scope via\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if the caller is a package access delegate.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The name of the package to hide or unhide.</p>\n</div></li><li><span class='pre'>hidden</span> : Boolean<div class='sub-desc'><p>{@code true} if the package should be hidden, {@code false} if it should be\n            unhidden.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>boolean Whether the hidden setting of the package was successfully updated.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a></p>\n</div></li></ul></div></div></div><div id='method-setApplicationRestrictions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setApplicationRestrictions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setApplicationRestrictions' class='name expandable'>setApplicationRestrictions</a>( <span class='pre'>admin, packageName, settings</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the application restrictions for a given target application running in the calling user. ...</div><div class='long'><p>Sets the application restrictions for a given target application running in the calling user.\n <p>\n The caller must be a profile or device owner on that user, or the package allowed to manage\n application restrictions via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a> with the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" class=\"docClass\">DELEGATION_APP_RESTRICTIONS</a> scope; otherwise a security exception will be thrown.\n <p>\n The provided Bundle consists of key-value pairs, where the types of values may be:\n <ul>\n <li>{@code boolean}\n <li>{@code int}\n <li>{@code String} or {@code String[]}\n <li>From android.os.Build.VERSION_CODES.M, {@code Bundle} or {@code Bundle[]}\n </li></li></li></li></ul>\n <p>\n If the restrictions are not available yet, but may be applied in the near future, the caller\n can notify the target application of that by adding\n UserManager.KEY_RESTRICTIONS_PENDING to the settings parameter.\n <p>\n The application restrictions are only made visible to the target application via\n UserManager.getApplicationRestrictions(String), in addition to the profile or device\n owner, and the application restrictions managing package via\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getApplicationRestrictions\" rel=\"android.app.admin.DevicePolicyManager-method-getApplicationRestrictions\" class=\"docClass\">getApplicationRestrictions</a>.</p>\n\n<p> <p>NOTE: The method performs disk I/O and shouldn't be called on the main thread</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if called by the application restrictions managing package.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The name of the package to update restricted settings for.</p>\n</div></li><li><span class='pre'>settings</span> : Object {Bundle}<div class='sub-desc'><p>A Bundle to be parsed by the receiving application, conveying a new\n            set of active restrictions.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" class=\"docClass\">DELEGATION_APP_RESTRICTIONS</a>\n@see UserManager#KEY_RESTRICTIONS_PENDING</p>\n</div></li></ul></div></div></div><div id='method-setApplicationRestrictionsManagingPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setApplicationRestrictionsManagingPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setApplicationRestrictionsManagingPackage' class='name expandable'>setApplicationRestrictionsManagingPackage</a>( <span class='pre'>admin, packageName</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to grant permission to a package to manage\n application restrictions for th...</div><div class='long'><p>Called by a profile owner or device owner to grant permission to a package to manage\n application restrictions for the calling user via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setApplicationRestrictions\" rel=\"android.app.admin.DevicePolicyManager-method-setApplicationRestrictions\" class=\"docClass\">setApplicationRestrictions</a> and\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getApplicationRestrictions\" rel=\"android.app.admin.DevicePolicyManager-method-getApplicationRestrictions\" class=\"docClass\">getApplicationRestrictions</a>.\n <p>\n This permission is persistent until it is later cleared by calling this method with a\n {@code null} value or uninstalling the managing package.\n <p>\n The supplied application restriction managing package must be installed when calling this\n API, otherwise an NameNotFoundException will be thrown.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_APP_RESTRICTIONS\" class=\"docClass\">DELEGATION_APP_RESTRICTIONS</a> scope instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The package name which will be given access to application restrictions\n            APIs. If {@code null} is given the current package will be cleared.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NameNotFoundException if {@code packageName} is not found</p>\n</div></li></ul></div></div></div><div id='method-setAutoTimeRequired' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setAutoTimeRequired' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setAutoTimeRequired' class='name expandable'>setAutoTimeRequired</a>( <span class='pre'>admin, required</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner, or alternatively a profile owner from Android 8.0 (API level 26) or\n higher, to set whether...</div><div class='long'><p>Called by a device owner, or alternatively a profile owner from Android 8.0 (API level 26) or\n higher, to set whether auto time is required. If auto time is required, no user will be able\n set the date and time and network date and time will be used.\n <p>\n Note: if auto time is required the user can still manually set the time zone.\n <p>\n The calling device admin must be a device owner, or alternatively a profile owner from\n Android 8.0 (API level 26) or higher. If it is not, a security exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>required</span> : Boolean<div class='sub-desc'><p>Whether auto time is set required or not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setBackupServiceEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setBackupServiceEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setBackupServiceEnabled' class='name expandable'>setBackupServiceEnabled</a>( <span class='pre'>admin, enabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Allows the device owner or profile owner to enable or disable the backup service. ...</div><div class='long'><p>Allows the device owner or profile owner to enable or disable the backup service.</p>\n\n<p> <p> Each user has its own backup service which manages the backup and restore mechanisms in\n that user. Disabling the backup service will prevent data from being backed up or restored.</p>\n\n<p> <p> Device owner calls this API to control backup services across all users on the device.\n Profile owner can use this API to enable or disable the profile's backup service. However,\n for a managed profile its backup functionality is only enabled if both the device owner\n and the profile owner have enabled the backup service.</p>\n\n<p> <p> By default, backup service is disabled on a device with device owner, and within a\n managed profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>{@code true} to enable the backup service, {@code false} to disable it.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner or a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setBluetoothContactSharingDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setBluetoothContactSharingDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setBluetoothContactSharingDisabled' class='name expandable'>setBluetoothContactSharingDisabled</a>( <span class='pre'>admin, disabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of a managed profile to set whether bluetooth devices can access\n enterprise contacts. ...</div><div class='long'><p>Called by a profile owner of a managed profile to set whether bluetooth devices can access\n enterprise contacts.\n <p>\n The calling device admin must be a profile owner. If it is not, a security exception will be\n thrown.\n <p>\n This API works on managed profile only.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>disabled</span> : Boolean<div class='sub-desc'><p>If true, bluetooth devices cannot access enterprise contacts.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setCameraDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setCameraDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setCameraDisabled' class='name expandable'>setCameraDisabled</a>( <span class='pre'>admin, disabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to disable all cameras on the\n device, for this user. ...</div><div class='long'><p>Called by an application that is administering the device to disable all cameras on the\n device, for this user. After setting this, no applications running as this user will be able\n to access any cameras on the device.\n <p>\n If the caller is device owner, then the restriction will be applied to all users.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_DISABLE_CAMERA\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_DISABLE_CAMERA\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_DISABLE_CAMERA</a> to be able to call this method; if it has\n not, a security exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>disabled</span> : Boolean<div class='sub-desc'><p>Whether or not the camera should be disabled.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or does not use\n             DeviceAdminInfo.USES_POLICY_DISABLE_CAMERA.</p>\n</div></li></ul></div></div></div><div id='method-setCertInstallerPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setCertInstallerPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setCertInstallerPackage' class='name expandable'>setCertInstallerPackage</a>( <span class='pre'>admin, installerPackage</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to grant access to privileged certificate\n manipulation APIs to a third-par...</div><div class='long'><p>Called by a profile owner or device owner to grant access to privileged certificate\n manipulation APIs to a third-party certificate installer app. Granted APIs include\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getInstalledCaCerts\" rel=\"android.app.admin.DevicePolicyManager-method-getInstalledCaCerts\" class=\"docClass\">getInstalledCaCerts</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-hasCaCertInstalled\" rel=\"android.app.admin.DevicePolicyManager-method-hasCaCertInstalled\" class=\"docClass\">hasCaCertInstalled</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installCaCert\" rel=\"android.app.admin.DevicePolicyManager-method-installCaCert\" class=\"docClass\">installCaCert</a>,\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-uninstallCaCert\" rel=\"android.app.admin.DevicePolicyManager-method-uninstallCaCert\" class=\"docClass\">uninstallCaCert</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-uninstallAllUserCaCerts\" rel=\"android.app.admin.DevicePolicyManager-method-uninstallAllUserCaCerts\" class=\"docClass\">uninstallAllUserCaCerts</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-installKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-installKeyPair\" class=\"docClass\">installKeyPair</a>.\n <p>\n Delegated certificate installer is a per-user state. The delegated access is persistent until\n it is later cleared by calling this method with a null value or uninstallling the certificate\n installer.\n <p>\n <b>Note:</b>Starting from android.os.Build.VERSION_CODES.N, if the caller\n application's target SDK version is android.os.Build.VERSION_CODES.N or newer, the\n supplied certificate installer package must be installed when calling this API, otherwise an\n IllegalArgumentException will be thrown.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>From android.os.Build.VERSION_CODES.O. Use <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a> scope instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>installerPackage</span> : String<div class='sub-desc'><p>The package name of the certificate installer which will be given\n            access. If {@code null} is given the current package will be cleared.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setCrossProfileCalendarPackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setCrossProfileCalendarPackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setCrossProfileCalendarPackages' class='name expandable'>setCrossProfileCalendarPackages</a>( <span class='pre'>admin, packageNames</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Allows a set of packages to access cross-profile calendar APIs. ...</div><div class='long'><p>Allows a set of packages to access cross-profile calendar APIs.</p>\n\n<p> <p>Called by a profile owner of a managed profile.</p>\n\n<p> <p>Calling with a {@code null} value for the set disables the restriction so that all\n packages are allowed to access cross-profile calendar APIs. Calling with an empty set\n disallows all packages from accessing cross-profile calendar APIs. If this method isn't\n called, no package is allowed to access cross-profile calendar APIs by default.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with</p>\n</div></li><li><span class='pre'>packageNames</span> : Object {java.util.Set}<div class='sub-desc'><p>set of packages to be whitelisted</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner\n@see #getCrossProfileCalendarPackages(ComponentName)</p>\n</div></li></ul></div></div></div><div id='method-setCrossProfileCallerIdDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setCrossProfileCallerIdDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setCrossProfileCallerIdDisabled' class='name expandable'>setCrossProfileCallerIdDisabled</a>( <span class='pre'>admin, disabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of a managed profile to set whether caller-Id information from the\n managed profile will be...</div><div class='long'><p>Called by a profile owner of a managed profile to set whether caller-Id information from the\n managed profile will be shown in the parent profile, for incoming calls.\n <p>\n The calling device admin must be a profile owner. If it is not, a security exception will be\n thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>disabled</span> : Boolean<div class='sub-desc'><p>If true caller-Id information in the managed profile is not displayed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setCrossProfileContactsSearchDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setCrossProfileContactsSearchDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setCrossProfileContactsSearchDisabled' class='name expandable'>setCrossProfileContactsSearchDisabled</a>( <span class='pre'>admin, disabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of a managed profile to set whether contacts search from the\n managed profile will be shown...</div><div class='long'><p>Called by a profile owner of a managed profile to set whether contacts search from the\n managed profile will be shown in the parent profile, for incoming calls.\n <p>\n The calling device admin must be a profile owner. If it is not, a security exception will be\n thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>disabled</span> : Boolean<div class='sub-desc'><p>If true contacts search in the managed profile is not displayed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setDefaultSmsApplication' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setDefaultSmsApplication' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setDefaultSmsApplication' class='name expandable'>setDefaultSmsApplication</a>( <span class='pre'>admin, packageName</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to set the default SMS application. ...</div><div class='long'><p>Called by a device owner to set the default SMS application.\n <p>\n The calling device admin must be a device owner. If it is not, a security exception will be\n thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The name of the package to set as the default SMS application.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setDelegatedScopes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setDelegatedScopes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes' class='name expandable'>setDelegatedScopes</a>( <span class='pre'>admin, delegatePackage, scopes</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner or device owner to grant access to privileged APIs to another app. ...</div><div class='long'><p>Called by a profile owner or device owner to grant access to privileged APIs to another app.\n Granted APIs are determined by {@code scopes}, which is a list of the {@code DELEGATION_*}\n constants.\n <p>\n A broadcast with the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED\" class=\"docClass\">ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED</a> action will be\n sent to the {@code delegatePackage} with its new scopes in an {@code ArrayList<String>} extra\n under the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-EXTRA_DELEGATION_SCOPES\" rel=\"android.app.admin.DevicePolicyManager-property-EXTRA_DELEGATION_SCOPES\" class=\"docClass\">EXTRA_DELEGATION_SCOPES</a> key. The broadcast is sent with the\n Intent.FLAG_RECEIVER_REGISTERED_ONLY flag.\n <p>\n Delegated scopes are a per-user state. The delegated access is persistent until it is later\n cleared by calling this method with an empty {@code scopes} list or uninstalling the\n {@code delegatePackage}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>delegatePackage</span> : String<div class='sub-desc'><p>The package name of the app which will be given access.</p>\n</div></li><li><span class='pre'>scopes</span> : Object {java.util.List}<div class='sub-desc'><p>The groups of privileged APIs whose access should be granted to\n            {@code delegatedPackage}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setDeviceOwner' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setDeviceOwner' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setDeviceOwner' class='name expandable'>setDeviceOwner</a>( <span class='pre'>who, ownerName, userId, userId</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>who</span> : Object {ComponentName}<div class='sub-desc'><p>the component name to be registered as device owner.</p>\n</div></li><li><span class='pre'>ownerName</span> : String<div class='sub-desc'><p>the human readable name of the institution that owns this device.</p>\n</div></li><li><span class='pre'>userId</span> : Number<div class='sub-desc'><p>ID of the user on which the device owner runs.</p>\n</div></li><li><span class='pre'>userId</span> : Object<div class='sub-desc'><p>ID of the user on which the device owner runs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether the package was successfully registered as the device owner.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the package name is null or invalid</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException If the preconditions mentioned are not met.</p>\n</div></li></ul></div></div></div><div id='method-setDeviceOwnerLockScreenInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setDeviceOwnerLockScreenInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setDeviceOwnerLockScreenInfo' class='name expandable'>setDeviceOwnerLockScreenInfo</a>( <span class='pre'>admin, info</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the device owner information to be shown on the lock screen. ...</div><div class='long'><p>Sets the device owner information to be shown on the lock screen.\n <p>\n If the device owner information is {@code null} or empty then the device owner info is\n cleared and the user owner info is shown on the lock screen if it is set.\n <p>\n If the device owner information contains only whitespaces then the message on the lock screen\n will be blank and the user will not be allowed to change it.\n <p>\n If the device owner information needs to be localized, it is the responsibility of the\n <a href=\"#!/api/android.app.admin.DeviceAdminReceiver\" rel=\"android.app.admin.DeviceAdminReceiver\" class=\"docClass\">android.app.admin.DeviceAdminReceiver</a> to listen to the Intent.ACTION_LOCALE_CHANGED broadcast\n and set a new version of this string accordingly.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The name of the admin component to check.</p>\n</div></li><li><span class='pre'>info</span> : Object {CharSequence}<div class='sub-desc'><p>Device owner information which will be displayed instead of the user owner info.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setEndUserSessionMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setEndUserSessionMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setEndUserSessionMessage' class='name expandable'>setEndUserSessionMessage</a>( <span class='pre'>admin, endUserSessionMessage</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to specify the user session end message. ...</div><div class='long'><p>Called by a device owner to specify the user session end message. This may be displayed\n during a user switch.\n <p>\n The message should be limited to a short statement or it may be truncated.\n <p>\n If the message needs to be localized, it is the responsibility of the\n <a href=\"#!/api/android.app.admin.DeviceAdminReceiver\" rel=\"android.app.admin.DeviceAdminReceiver\" class=\"docClass\">android.app.admin.DeviceAdminReceiver</a> to listen to the Intent.ACTION_LOCALE_CHANGED broadcast\n and set a new version of this message accordingly.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>endUserSessionMessage</span> : Object {CharSequence}<div class='sub-desc'><p>message for ending user session, or {@code null} to use system\n default message.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setGlobalPrivateDnsModeOpportunistic' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setGlobalPrivateDnsModeOpportunistic' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setGlobalPrivateDnsModeOpportunistic' class='name expandable'>setGlobalPrivateDnsModeOpportunistic</a>( <span class='pre'>admin</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the global Private DNS mode to opportunistic. ...</div><div class='long'><p>Sets the global Private DNS mode to opportunistic.\n May only be called by the device owner.</p>\n\n<p> <p>In this mode, the DNS subsystem will attempt a TLS handshake to the network-supplied\n resolver prior to attempting name resolution in cleartext.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code PRIVATE_DNS_SET_NO_ERROR} if the mode was set successfully, or\n         {@code PRIVATE_DNS_SET_ERROR_FAILURE_SETTING} if it could not be set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not the device owner.</p>\n</div></li></ul></div></div></div><div id='method-setGlobalPrivateDnsModeSpecifiedHost' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setGlobalPrivateDnsModeSpecifiedHost' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setGlobalPrivateDnsModeSpecifiedHost' class='name expandable'>setGlobalPrivateDnsModeSpecifiedHost</a>( <span class='pre'>admin, privateDnsHost</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the global Private DNS host to be used. ...</div><div class='long'><p>Sets the global Private DNS host to be used.\n May only be called by the device owner.</p>\n\n<p> <p>Note that the method is blocking as it will perform a connectivity check to the resolver,\n to ensure it is valid. Because of that, the method should not be called on any thread that\n relates to user interaction, such as the UI thread.</p>\n\n<p> <p>In case a VPN is used in conjunction with Private DNS resolver, the Private DNS resolver\n must be reachable both from within and outside the VPN. Otherwise, the device may lose\n the ability to resolve hostnames as system traffic to the resolver may not go through the\n VPN.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>privateDnsHost</span> : String<div class='sub-desc'><p>The hostname of a server that implements DNS over TLS (RFC7858).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code PRIVATE_DNS_SET_NO_ERROR} if the mode was set successfully,\n         {@code PRIVATE_DNS_SET_ERROR_FAILURE_SETTING} if it could not be set or\n         {@code PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING} if the specified host does not\n         implement RFC7858.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the {@code privateDnsHost} is not a valid hostname.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the caller is not the device owner.</p>\n</div></li></ul></div></div></div><div id='method-setGlobalSetting' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setGlobalSetting' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setGlobalSetting' class='name expandable'>setGlobalSetting</a>( <span class='pre'>admin, setting, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to update android.provider.Settings.Global settings. ...</div><div class='long'><p>Called by device owner to update android.provider.Settings.Global settings.\n Validation that the value of the setting is in the correct form for the setting type should\n be performed by the caller.\n <p>\n The settings that can be updated with this method are:\n <ul>\n <li>android.provider.Settings.Global.ADB_ENABLED</li>\n <li>android.provider.Settings.Global.AUTO_TIME</li>\n <li>android.provider.Settings.Global.AUTO_TIME_ZONE</li>\n <li>android.provider.Settings.Global.DATA_ROAMING</li>\n <li>android.provider.Settings.Global.USB_MASS_STORAGE_ENABLED</li>\n <li>android.provider.Settings.Global.WIFI_SLEEP_POLICY</li>\n <li>android.provider.Settings.Global.STAY_ON_WHILE_PLUGGED_IN This setting is only\n available from android.os.Build.VERSION_CODES.M onwards and can only be set if\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setMaximumTimeToLock\" rel=\"android.app.admin.DevicePolicyManager-method-setMaximumTimeToLock\" class=\"docClass\">setMaximumTimeToLock</a> is not used to set a timeout.</li>\n <li>android.provider.Settings.Global.WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN</li> This\n setting is only available from android.os.Build.VERSION_CODES.M onwards.\n </ul>\n <p>\n Changing the following settings has no effect as of android.os.Build.VERSION_CODES.M:\n <ul>\n <li>android.provider.Settings.Global.BLUETOOTH_ON. Use\n android.bluetooth.BluetoothAdapter.enable() and\n android.bluetooth.BluetoothAdapter.disable() instead.</li>\n <li>android.provider.Settings.Global.DEVELOPMENT_SETTINGS_ENABLED</li>\n <li>android.provider.Settings.Global.MODE_RINGER. Use\n android.media.AudioManager.setRingerMode(int) instead.</li>\n <li>android.provider.Settings.Global.NETWORK_PREFERENCE</li>\n <li>android.provider.Settings.Global.WIFI_ON. Use\n android.net.wifi.WifiManager.setWifiEnabled(boolean) instead.</li>\n </ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>setting</span> : String<div class='sub-desc'><p>The name of the setting to update.</p>\n</div></li><li><span class='pre'>value</span> : String<div class='sub-desc'><p>The value to update the setting to.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setKeepUninstalledPackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setKeepUninstalledPackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setKeepUninstalledPackages' class='name expandable'>setKeepUninstalledPackages</a>( <span class='pre'>admin, packageNames</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a list of apps to keep around as APKs even if no user has currently installed it. ...</div><div class='long'><p>Set a list of apps to keep around as APKs even if no user has currently installed it. This\n function can be called by a device owner or by a delegate given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES\" class=\"docClass\">DELEGATION_KEEP_UNINSTALLED_PACKAGES</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.</p>\n\n<p> <p>Please note that setting this policy does not imply that specified apps will be\n automatically pre-cached.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if the caller is a keep uninstalled packages delegate.</p>\n</div></li><li><span class='pre'>packageNames</span> : Object {java.util.List}<div class='sub-desc'><p>List of package names to keep cached.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_KEEP_UNINSTALLED_PACKAGES\" class=\"docClass\">DELEGATION_KEEP_UNINSTALLED_PACKAGES</a></p>\n</div></li></ul></div></div></div><div id='method-setKeyPairCertificate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setKeyPairCertificate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setKeyPairCertificate' class='name expandable'>setKeyPairCertificate</a>( <span class='pre'>admin, alias, certs, isUserSelectable</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device or profile owner, or delegated certificate installer, to associate\n certificates with a key pair t...</div><div class='long'><p>Called by a device or profile owner, or delegated certificate installer, to associate\n certificates with a key pair that was generated using <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-generateKeyPair\" rel=\"android.app.admin.DevicePolicyManager-method-generateKeyPair\" class=\"docClass\">generateKeyPair</a>, and\n set whether the key is available for the user to choose in the certificate selection\n prompt.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n            {@code null} if calling from a delegated certificate installer.</p>\n</div></li><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>The private key alias under which to install the certificate. The {@code alias}\n        should denote an existing private key. If a certificate with that alias already\n        exists, it will be overwritten.</p>\n</div></li><li><span class='pre'>certs</span> : Object {java.util.List}<div class='sub-desc'><p>The certificate chain to install. The chain should start with the leaf\n        certificate and include the chain of trust in order. This will be returned by\n        android.security.KeyChain.getCertificateChain.</p>\n</div></li><li><span class='pre'>isUserSelectable</span> : Boolean<div class='sub-desc'><p>{@code true} to indicate that a user can select this key via the\n        certificate selection prompt, {@code false} to indicate that this key can only be\n        granted access by implementing\n        <a href=\"#!/api/android.app.admin.DeviceAdminReceiver-method-onChoosePrivateKeyAlias\" rel=\"android.app.admin.DeviceAdminReceiver-method-onChoosePrivateKeyAlias\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.onChoosePrivateKeyAlias</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the provided {@code alias} exists and the certificates has been\n        successfully associated with it, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner, or {@code admin} is null but the calling application is not a delegated\n         certificate installer.</p>\n</div></li></ul></div></div></div><div id='method-setKeyguardDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setKeyguardDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setKeyguardDisabled' class='name expandable'>setKeyguardDisabled</a>( <span class='pre'>admin, disabled</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner or profile owner of secondary users that is affiliated with the\n device to disable the keygu...</div><div class='long'><p>Called by a device owner or profile owner of secondary users that is affiliated with the\n device to disable the keyguard altogether.\n <p>\n Setting the keyguard to disabled has the same effect as choosing \"None\" as the screen lock\n type. However, this call has no effect if a password, pin or pattern is currently set. If a\n password, pin or pattern is set after the keyguard was disabled, the keyguard stops being\n disabled.</p>\n\n<p> <p>\n As of android.os.Build.VERSION_CODES.P, this call also dismisses the\n keyguard if it is currently shown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>disabled</span> : Boolean<div class='sub-desc'><p>{@code true} disables the keyguard, {@code false} reenables it.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code false} if attempting to disable the keyguard while a lock password was in\n         place. {@code true} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not the device owner, or a profile owner of\n secondary user that is affiliated with the device.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" class=\"docClass\">getSecondaryUsers</a></p>\n</div></li></ul></div></div></div><div id='method-setKeyguardDisabledFeatures' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setKeyguardDisabledFeatures' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setKeyguardDisabledFeatures' class='name expandable'>setKeyguardDisabledFeatures</a>( <span class='pre'>admin, which</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to disable keyguard customizations,\n such as widgets. ...</div><div class='long'><p>Called by an application that is administering the device to disable keyguard customizations,\n such as widgets. After setting this, keyguard features will be disabled according to the\n provided feature list.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_DISABLE_KEYGUARD_FEATURES\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_DISABLE_KEYGUARD_FEATURES\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_DISABLE_KEYGUARD_FEATURES</a> to be able to call this method;\n if it has not, a security exception will be thrown.\n <p>\n Calling this from a managed profile before version android.os.Build.VERSION_CODES.M\n will throw a security exception. From version android.os.Build.VERSION_CODES.M the\n profile owner of a managed profile can set:\n <ul>\n <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a>, which affects the parent user, but only if there\n is no separate challenge set on the managed profile.\n <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" class=\"docClass\">KEYGUARD_DISABLE_FINGERPRINT</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FACE\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FACE\" class=\"docClass\">KEYGUARD_DISABLE_FACE</a> or\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_IRIS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_IRIS\" class=\"docClass\">KEYGUARD_DISABLE_IRIS</a> which affects the managed profile challenge if\n there is one, or the parent user otherwise.\n <li><a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS\" class=\"docClass\">KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS</a> which affects notifications generated\n by applications in the managed profile.\n </li></li></li></ul>\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" class=\"docClass\">KEYGUARD_DISABLE_FINGERPRINT</a>,\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FACE\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FACE\" class=\"docClass\">KEYGUARD_DISABLE_FACE</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_IRIS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_IRIS\" class=\"docClass\">KEYGUARD_DISABLE_IRIS</a> can also be\n set on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.\n <p>\n Requests to disable other features on a managed profile will be ignored.\n <p>\n The admin can check which features have been disabled by calling\n getKeyguardDisabledFeatures(ComponentName)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>which</span> : Number<div class='sub-desc'><p>The disabled features flag which can be either\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FEATURES_NONE\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FEATURES_NONE\" class=\"docClass\">KEYGUARD_DISABLE_FEATURES_NONE</a> (default),\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FEATURES_ALL\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FEATURES_ALL\" class=\"docClass\">KEYGUARD_DISABLE_FEATURES_ALL</a>, or a combination of\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_WIDGETS_ALL\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_WIDGETS_ALL\" class=\"docClass\">KEYGUARD_DISABLE_WIDGETS_ALL</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_SECURE_CAMERA\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_SECURE_CAMERA\" class=\"docClass\">KEYGUARD_DISABLE_SECURE_CAMERA</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_SECURE_NOTIFICATIONS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_SECURE_NOTIFICATIONS\" class=\"docClass\">KEYGUARD_DISABLE_SECURE_NOTIFICATIONS</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS\" class=\"docClass\">KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" class=\"docClass\">KEYGUARD_DISABLE_FINGERPRINT</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FACE\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FACE\" class=\"docClass\">KEYGUARD_DISABLE_FACE</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_IRIS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_IRIS\" class=\"docClass\">KEYGUARD_DISABLE_IRIS</a>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or does not user\n             DeviceAdminInfo.USES_POLICY_DISABLE_KEYGUARD_FEATURES</p>\n</div></li></ul></div></div></div><div id='method-setLockTaskFeatures' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setLockTaskFeatures' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskFeatures' class='name expandable'>setLockTaskFeatures</a>( <span class='pre'>admin, flags</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets which system features are enabled when the device runs in lock task mode. ...</div><div class='long'><p>Sets which system features are enabled when the device runs in lock task mode. This method\n doesn't affect the features when lock task mode is inactive. Any system features not included\n in {@code flags} are implicitly disabled when calling this method. By default, only\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_GLOBAL_ACTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_GLOBAL_ACTIONS\" class=\"docClass\">LOCK_TASK_FEATURE_GLOBAL_ACTIONS</a> is enabled—all the other features are disabled. To\n disable the global actions dialog, call this method omitting\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_GLOBAL_ACTIONS\" rel=\"android.app.admin.DevicePolicyManager-property-LOCK_TASK_FEATURE_GLOBAL_ACTIONS\" class=\"docClass\">LOCK_TASK_FEATURE_GLOBAL_ACTIONS</a>.</p>\n\n<p> <p>This method can only be called by the device owner, a profile owner of an affiliated\n user or profile, or the profile owner when no device owner is set. See\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>.\n Any features set using this method are cleared if the user becomes unaffiliated.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>The system features enabled during lock task mode.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not the device owner, the profile owner of an\n affiliated user or profile, or the profile owner when no device owner is set.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a></p>\n</div></li></ul></div></div></div><div id='method-setLockTaskPackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setLockTaskPackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setLockTaskPackages' class='name expandable'>setLockTaskPackages</a>( <span class='pre'>packages, admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets which packages may enter lock task mode. ...</div><div class='long'><p>Sets which packages may enter lock task mode.\n <p>\n Any packages that share uid with an allowed package will also be allowed to activate lock\n task. From android.os.Build.VERSION_CODES.M removing packages from the lock task\n package list results in locked tasks belonging to those packages to be finished.\n <p>\n This function can only be called by the device owner, a profile owner of an affiliated user\n or profile, or the profile owner when no device owner is set. See <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>.\n Any package set via this method will be cleared if the user becomes unaffiliated.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>packages</span> : Object {ComponentName}<div class='sub-desc'><p>The list of packages allowed to enter lock task mode</p>\n</div></li><li><span class='pre'>admin</span> : Object {java.lang.String[]}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not the device owner, the profile owner of an\n affiliated user or profile, or the profile owner when no device owner is set.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>\n@see Activity#startLockTask()\n@see DeviceAdminReceiver#onLockTaskModeEntering(Context, Intent, String)\n@see DeviceAdminReceiver#onLockTaskModeExiting(Context, Intent)\n@see UserManager#DISALLOW_CREATE_WINDOWS</p>\n</div></li></ul></div></div></div><div id='method-setLogoutEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setLogoutEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setLogoutEnabled' class='name expandable'>setLogoutEnabled</a>( <span class='pre'>admin, enabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to specify whether logout is enabled for all secondary users. ...</div><div class='long'><p>Called by a device owner to specify whether logout is enabled for all secondary users. The\n system may show a logout button that stops the user and switches back to the primary user.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>whether logout should be enabled or not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setLongSupportMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setLongSupportMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setLongSupportMessage' class='name expandable'>setLongSupportMessage</a>( <span class='pre'>admin, message, message</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device admin to set the long support message. ...</div><div class='long'><p>Called by a device admin to set the long support message. This will be displayed to the user\n in the device administators settings screen.\n <p>\n If the long support message needs to be localized, it is the responsibility of the\n <a href=\"#!/api/android.app.admin.DeviceAdminReceiver\" rel=\"android.app.admin.DeviceAdminReceiver\" class=\"docClass\">android.app.admin.DeviceAdminReceiver</a> to listen to the Intent.ACTION_LOCALE_CHANGED broadcast\n and set a new version of this string accordingly.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>message</span> : Object {CharSequence}<div class='sub-desc'><p>Long message to be displayed to the user in settings or null to clear the\n            existing message.</p>\n</div></li><li><span class='pre'>message</span> : Object<div class='sub-desc'><p>Long message to be displayed to the user in settings or null to clear the\n            existing message.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator.</p>\n</div></li></ul></div></div></div><div id='method-setMasterVolumeMuted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setMasterVolumeMuted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setMasterVolumeMuted' class='name expandable'>setMasterVolumeMuted</a>( <span class='pre'>admin, on</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by profile or device owners to set the master volume mute on or off. ...</div><div class='long'><p>Called by profile or device owners to set the master volume mute on or off.\n This has no effect when set on a managed profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>on</span> : Boolean<div class='sub-desc'><p>{@code true} to mute master volume, {@code false} to turn mute off.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setMaximumFailedPasswordsForWipe' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setMaximumFailedPasswordsForWipe' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setMaximumFailedPasswordsForWipe' class='name expandable'>setMaximumFailedPasswordsForWipe</a>( <span class='pre'>admin, num</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Setting this to a value greater than zero enables a built-in policy that will perform a\n device or profile wipe after...</div><div class='long'><p>Setting this to a value greater than zero enables a built-in policy that will perform a\n device or profile wipe after too many incorrect device-unlock passwords have been entered.\n This built-in policy combines watching for failed passwords and wiping the device, and\n requires that you request both <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_WATCH_LOGIN\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_WATCH_LOGIN\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_WATCH_LOGIN</a> and\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_WIPE_DATA\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_WIPE_DATA\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_WIPE_DATA</a>}.\n <p>\n To implement any other policy (e.g. wiping data for a particular application only, erasing or\n revoking credentials, or reporting the failure to a server), you should implement\n android.content.Intent) instead. Do not\n use this API, because if the maximum count is reached, the device or profile will be wiped\n immediately, and your callback will not be invoked.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set a value on the parent\n profile.\n <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always empty and this method has no effect - i.e. the policy is not set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>num</span> : Number<div class='sub-desc'><p>The number of failed password attempts at which point the device or profile will\n            be wiped.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or does not use\n             both DeviceAdminInfo.USES_POLICY_WATCH_LOGIN and\n             DeviceAdminInfo.USES_POLICY_WIPE_DATA.</p>\n</div></li></ul></div></div></div><div id='method-setMaximumTimeToLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setMaximumTimeToLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setMaximumTimeToLock' class='name expandable'>setMaximumTimeToLock</a>( <span class='pre'>admin, timeMs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the maximum time for user\n activity until the device...</div><div class='long'><p>Called by an application that is administering the device to set the maximum time for user\n activity until the device will lock. This limits the length that the user can set. It takes\n effect immediately.\n <p>\n The calling device admin must have requested <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_FORCE_LOCK\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_FORCE_LOCK\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_FORCE_LOCK</a>\n to be able to call this method; if it has not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>timeMs</span> : Number<div class='sub-desc'><p>The new desired maximum time to lock in milliseconds. A value of 0 means there\n            is no restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or it does not use\n             DeviceAdminInfo.USES_POLICY_FORCE_LOCK</p>\n</div></li></ul></div></div></div><div id='method-setMeteredDataDisabledPackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setMeteredDataDisabledPackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setMeteredDataDisabledPackages' class='name expandable'>setMeteredDataDisabledPackages</a>( <span class='pre'>admin, packageNames</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device or profile owner to restrict packages from using metered data. ...</div><div class='long'><p>Called by a device or profile owner to restrict packages from using metered data.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageNames</span> : Object {java.util.List}<div class='sub-desc'><p>the list of package names to be restricted.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a list of package names which could not be restricted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setNetworkLoggingEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setNetworkLoggingEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setNetworkLoggingEnabled' class='name expandable'>setNetworkLoggingEnabled</a>( <span class='pre'>admin, enabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner or delegated app with DELEGATION_NETWORK_LOGGING to\n control the network logging feature. ...</div><div class='long'><p>Called by a device owner or delegated app with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_NETWORK_LOGGING\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_NETWORK_LOGGING\" class=\"docClass\">DELEGATION_NETWORK_LOGGING</a> to\n control the network logging feature.</p>\n\n<p> <p> Network logs contain DNS lookup and connect() library call events. The following library\n     functions are recorded while network logging is active:\n     <ul>\n       <li>{@code getaddrinfo()}</li>\n       <li>{@code gethostbyname()}</li>\n       <li>{@code connect()}</li>\n     </ul></p>\n\n<p> <p> Network logging is a low-overhead tool for forensics but it is not guaranteed to use\n     full system call logging; event reporting is enabled by default for all processes but not\n     strongly enforced.\n     Events from applications using alternative implementations of libc, making direct kernel\n     calls, or deliberately obfuscating traffic may not be recorded.</p>\n\n<p> <p> Some common network events may not be reported. For example:\n     <ul>\n       <li>Applications may hardcode IP addresses to reduce the number of DNS lookups, or use\n           an alternative system for name resolution, and so avoid calling\n           {@code getaddrinfo()} or {@code gethostbyname}.</li>\n       <li>Applications may use datagram sockets for performance reasons, for example\n           for a game client. Calling {@code connect()} is unnecessary for this kind of\n           socket, so it will not trigger a network event.</li>\n     </ul></p>\n\n<p> <p> It is possible to directly intercept layer 3 traffic leaving the device using an\n     always-on VPN service.\n     See String, boolean)\n     and android.net.VpnService for details.</p>\n\n<p> <p><strong>Note:</strong> The device owner won't be able to retrieve network logs if there\n are unaffiliated secondary users or profiles on the device, regardless of whether the\n feature is enabled. Logs will be discarded if the internal buffer fills up while waiting for\n all users to become affiliated. Therefore it's recommended that affiliation ids are set for\n new users as soon as possible after provisioning via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n        {@code null} if called by a delegated app.</p>\n</div></li><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>whether network logging should be enabled or not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-retrieveNetworkLogs\" rel=\"android.app.admin.DevicePolicyManager-method-retrieveNetworkLogs\" class=\"docClass\">retrieveNetworkLogs</a></p>\n</div></li></ul></div></div></div><div id='method-setOrganizationColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setOrganizationColor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setOrganizationColor' class='name expandable'>setOrganizationColor</a>( <span class='pre'>admin, color</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of a managed profile to set the color used for customization. ...</div><div class='long'><p>Called by a profile owner of a managed profile to set the color used for customization. This\n color is used as background color of the confirm credentials screen for that user. The\n default color is teal (#00796B).\n <p>\n The confirm credentials screen can be created using\n android.app.KeyguardManager.createConfirmDeviceCredentialIntent.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>color</span> : Number<div class='sub-desc'><p>The 24bit (0xRRGGBB) representation of the color to be used.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setOrganizationColorForUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setOrganizationColorForUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setOrganizationColorForUser' class='name expandable'>setOrganizationColorForUser</a>( <span class='pre'>color, userId, userId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>color</span> : Number<div class='sub-desc'><p>The 24bit (0xRRGGBB) representation of the color to be used.</p>\n</div></li><li><span class='pre'>userId</span> : Number<div class='sub-desc'><p>which user to set the color to.</p>\n</div></li><li><span class='pre'>userId</span> : Object<div class='sub-desc'><p>which user to set the color to.\n@RequiresPermission(allOf = {\n       Manifest.permission.MANAGE_USERS,\n       Manifest.permission.INTERACT_ACROSS_USERS_FULL})</p>\n</div></li></ul></div></div></div><div id='method-setOrganizationName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setOrganizationName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setOrganizationName' class='name expandable'>setOrganizationName</a>( <span class='pre'>admin, title</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the device owner (since API 26) or profile owner (since API 24) to set the name of\n the organization under ...</div><div class='long'><p>Called by the device owner (since API 26) or profile owner (since API 24) to set the name of\n the organization under management.</p>\n\n<p> <p>If the organization name needs to be localized, it is the responsibility of the <a href=\"#!/api/android.app.admin.DeviceAdminReceiver\" rel=\"android.app.admin.DeviceAdminReceiver\" class=\"docClass\">android.app.admin.DeviceAdminReceiver</a> to listen to the Intent.ACTION_LOCALE_CHANGED broadcast and set\n a new version of this string accordingly.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>title</span> : Object {CharSequence}<div class='sub-desc'><p>The organization name or {@code null} to clear a previously set name.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setOverrideApnsEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setOverrideApnsEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled' class='name expandable'>setOverrideApnsEnabled</a>( <span class='pre'>admin, enabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to set if override APNs should be enabled. ...</div><div class='long'><p>Called by device owner to set if override APNs should be enabled.\n <p> Override APNs are separated from other APNs on the device, and can only be inserted or\n modified by the device owner. When enabled, only override APNs are in use, any other APNs\n are ignored.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with</p>\n</div></li><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>{@code true} if override APNs should be enabled, {@code false} otherwise</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setPackagesSuspended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPackagesSuspended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPackagesSuspended' class='name expandable'>setPackagesSuspended</a>( <span class='pre'>admin, packageNames, suspended</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device or profile owners to suspend packages for this user. ...</div><div class='long'><p>Called by device or profile owners to suspend packages for this user. This function can be\n called by a device owner, profile owner, or by a delegate given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.\n <p>\n A suspended package will not be able to start activities. Its notifications will be hidden,\n it will not show up in recents, will not be able to show toasts or dialogs or ring the\n device.\n <p>\n The package must already be installed. If the package is uninstalled while suspended the\n package will no longer be suspended. The admin can block this by using\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setUninstallBlocked\" rel=\"android.app.admin.DevicePolicyManager-method-setUninstallBlocked\" class=\"docClass\">setUninstallBlocked</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>The name of the admin component to check, or {@code null} if the caller is a\n            package access delegate.</p>\n</div></li><li><span class='pre'>packageNames</span> : Object {java.lang.String[]}<div class='sub-desc'><p>The package names to suspend or unsuspend.</p>\n</div></li><li><span class='pre'>suspended</span> : Boolean<div class='sub-desc'><p>If set to {@code true} than the packages will be suspended, if set to\n            {@code false} the packages will be unsuspended.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>an array of package names for which the suspended status is not set as requested in\n         this method.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PACKAGE_ACCESS\" class=\"docClass\">DELEGATION_PACKAGE_ACCESS</a></p>\n</div></li></ul></div></div></div><div id='method-setPasswordExpirationTimeout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordExpirationTimeout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordExpirationTimeout' class='name expandable'>setPasswordExpirationTimeout</a>( <span class='pre'>admin, timeout</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device admin to set the password expiration timeout. ...</div><div class='long'><p>Called by a device admin to set the password expiration timeout. Calling this method will\n restart the countdown for password expiration for the given admin, as will changing the\n device password (for all admins).\n <p>\n The provided timeout is the time delta in ms and will be added to the current time. For\n example, to have the password expire 5 days from now, timeout would be 5 * 86400 * 1000 =\n 432000000 ms for timeout.\n <p>\n To disable password expiration, a value of 0 may be used for timeout.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password expiration is always disabled.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_EXPIRE_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_EXPIRE_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_EXPIRE_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n Note that setting the password will automatically reset the expiration time for all active\n admins. Active admins do not need to explicitly call this method in that case.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>The limit (in ms) that a password can remain in effect. A value of 0 means\n            there is no restriction (unlimited).</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_EXPIRE_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordHistoryLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordHistoryLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordHistoryLength' class='name expandable'>setPasswordHistoryLength</a>( <span class='pre'>admin, length</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the length of the password\n history. ...</div><div class='long'><p>Called by an application that is administering the device to set the length of the password\n history. After setting this, the user will not be able to enter a new password that is the\n same as any password in the history. Note that the current password will remain until the\n user has set a new one, so the change does not take place immediately. To prompt the user for\n a new password, use <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after setting this value. This constraint is\n only imposed if the administrator has also requested either <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC</a>\n , <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC_COMPLEX</a> <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHABETIC</a>, or\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHANUMERIC</a> with <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password history length is always 0.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>The new desired length of password history. A value of 0 means there is no\n            restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordMinimumLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordMinimumLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordMinimumLength' class='name expandable'>setPasswordMinimumLength</a>( <span class='pre'>admin, length</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the minimum allowed password\n length. ...</div><div class='long'><p>Called by an application that is administering the device to set the minimum allowed password\n length. After setting this, the user will not be able to enter a new password that is not at\n least as restrictive as what has been set. Note that the current password will remain until\n the user has set a new one, so the change does not take place immediately. To prompt the user\n for a new password, use <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after setting this value. This constraint is\n only imposed if the administrator has also requested either <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC</a>\n , <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC_COMPLEX</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHABETIC</a>,\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHANUMERIC</a>, or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_COMPLEX</a> with\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>The new desired minimum password length. A value of 0 means there is no\n            restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordMinimumLetters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordMinimumLetters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordMinimumLetters' class='name expandable'>setPasswordMinimumLetters</a>( <span class='pre'>admin, length</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the minimum number of\n letters required in the passw...</div><div class='long'><p>Called by an application that is administering the device to set the minimum number of\n letters required in the password. After setting this, the user will not be able to enter a\n new password that is not at least as restrictive as what has been set. Note that the current\n password will remain until the user has set a new one, so the change does not take place\n immediately. To prompt the user for a new password, use <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after setting this value. This constraint is\n only imposed if the administrator has also requested <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_COMPLEX</a> with\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>. The default value is 1.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>The new desired minimum number of letters required in the password. A value of\n            0 means there is no restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordMinimumLowerCase' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordMinimumLowerCase' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordMinimumLowerCase' class='name expandable'>setPasswordMinimumLowerCase</a>( <span class='pre'>admin, length</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the minimum number of lower\n case letters required i...</div><div class='long'><p>Called by an application that is administering the device to set the minimum number of lower\n case letters required in the password. After setting this, the user will not be able to enter\n a new password that is not at least as restrictive as what has been set. Note that the\n current password will remain until the user has set a new one, so the change does not take\n place immediately. To prompt the user for a new password, use\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after\n setting this value. This constraint is only imposed if the administrator has also requested\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_COMPLEX</a> with <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>. The default value is 0.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>The new desired minimum number of lower case letters required in the password.\n            A value of 0 means there is no restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordMinimumNonLetter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordMinimumNonLetter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordMinimumNonLetter' class='name expandable'>setPasswordMinimumNonLetter</a>( <span class='pre'>admin, length</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the minimum number of\n non-letter characters (numeri...</div><div class='long'><p>Called by an application that is administering the device to set the minimum number of\n non-letter characters (numerical digits or symbols) required in the password. After setting\n this, the user will not be able to enter a new password that is not at least as restrictive\n as what has been set. Note that the current password will remain until the user has set a new\n one, so the change does not take place immediately. To prompt the user for a new password,\n use <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after\n setting this value. This constraint is only imposed if the administrator has also requested\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_COMPLEX</a> with <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>. The default value is 0.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>The new desired minimum number of letters required in the password. A value of\n            0 means there is no restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordMinimumNumeric' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordMinimumNumeric' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordMinimumNumeric' class='name expandable'>setPasswordMinimumNumeric</a>( <span class='pre'>admin, length</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the minimum number of\n numerical digits required in ...</div><div class='long'><p>Called by an application that is administering the device to set the minimum number of\n numerical digits required in the password. After setting this, the user will not be able to\n enter a new password that is not at least as restrictive as what has been set. Note that the\n current password will remain until the user has set a new one, so the change does not take\n place immediately. To prompt the user for a new password, use\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after\n setting this value. This constraint is only imposed if the administrator has also requested\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_COMPLEX</a> with <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>. The default value is 1.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>The new desired minimum number of numerical digits required in the password. A\n            value of 0 means there is no restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordMinimumSymbols' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordMinimumSymbols' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordMinimumSymbols' class='name expandable'>setPasswordMinimumSymbols</a>( <span class='pre'>admin, length</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the minimum number of\n symbols required in the passw...</div><div class='long'><p>Called by an application that is administering the device to set the minimum number of\n symbols required in the password. After setting this, the user will not be able to enter a\n new password that is not at least as restrictive as what has been set. Note that the current\n password will remain until the user has set a new one, so the change does not take place\n immediately. To prompt the user for a new password, use <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after setting this value. This constraint is\n only imposed if the administrator has also requested <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_COMPLEX</a> with\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>. The default value is 1.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>The new desired minimum number of symbols required in the password. A value of\n            0 means there is no restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordMinimumUpperCase' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordMinimumUpperCase' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordMinimumUpperCase' class='name expandable'>setPasswordMinimumUpperCase</a>( <span class='pre'>admin, length</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the minimum number of upper\n case letters required i...</div><div class='long'><p>Called by an application that is administering the device to set the minimum number of upper\n case letters required in the password. After setting this, the user will not be able to enter\n a new password that is not at least as restrictive as what has been set. Note that the\n current password will remain until the user has set a new one, so the change does not take\n place immediately. To prompt the user for a new password, use\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after\n setting this value. This constraint is only imposed if the administrator has also requested\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_COMPLEX</a> with <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality\" rel=\"android.app.admin.DevicePolicyManager-method-setPasswordQuality\" class=\"docClass\">setPasswordQuality</a>. The default value is 0.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>The new desired minimum number of upper case letters required in the password.\n            A value of 0 means there is no restriction.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPasswordQuality' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPasswordQuality' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPasswordQuality' class='name expandable'>setPasswordQuality</a>( <span class='pre'>admin, quality</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to set the password restrictions it\n is imposing. ...</div><div class='long'><p>Called by an application that is administering the device to set the password restrictions it\n is imposing. After setting this, the user will not be able to enter a new password that is\n not at least as restrictive as what has been set. Note that the current password will remain\n until the user has set a new one, so the change does not take place immediately. To prompt\n the user for a new password, use <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PASSWORD</a> or\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SET_NEW_PARENT_PROFILE_PASSWORD\" class=\"docClass\">ACTION_SET_NEW_PARENT_PROFILE_PASSWORD</a> after calling this method.\n <p>\n Quality constants are ordered so that higher values are more restrictive; thus the highest\n requested quality constant (between the policy set here, the user's preference, and any other\n considerations) is the one that is in effect.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n password is always treated as empty.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_LIMIT_PASSWORD\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</a> to be able to call this method; if it has\n not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>quality</span> : Number<div class='sub-desc'><p>The new desired quality. One of <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_UNSPECIFIED\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_UNSPECIFIED\" class=\"docClass\">PASSWORD_QUALITY_UNSPECIFIED</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_SOMETHING\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_SOMETHING\" class=\"docClass\">PASSWORD_QUALITY_SOMETHING</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_NUMERIC_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_NUMERIC_COMPLEX</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHABETIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHABETIC</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_ALPHANUMERIC\" class=\"docClass\">PASSWORD_QUALITY_ALPHANUMERIC</a> or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" rel=\"android.app.admin.DevicePolicyManager-property-PASSWORD_QUALITY_COMPLEX\" class=\"docClass\">PASSWORD_QUALITY_COMPLEX</a>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or if {@code admin}\n             does not use DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD</p>\n</div></li></ul></div></div></div><div id='method-setPermissionGrantState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPermissionGrantState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPermissionGrantState' class='name expandable'>setPermissionGrantState</a>( <span class='pre'>admin, packageName, permission, grantState</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the grant state of a runtime permission for a specific application. ...</div><div class='long'><p>Sets the grant state of a runtime permission for a specific application. The state can be\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" class=\"docClass\">default</a> in which a user can manage it through the UI,\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED\" class=\"docClass\">denied</a>, in which the permission is denied and the user\n cannot manage it through the UI, and <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED\" class=\"docClass\">granted</a> in which\n the permission is granted and the user cannot manage it through the UI. This method can only\n be called by a profile owner, device owner, or a delegate given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" class=\"docClass\">DELEGATION_PERMISSION_GRANT</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.\n <p/>\n Note that user cannot manage other permissions in the affected group through the UI\n either and their granted state will be kept as the current value. Thus, it's recommended that\n you set the grant state of all the permissions in the affected group.\n <p/>\n Setting the grant state to <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" class=\"docClass\">default</a> does not revoke\n the permission. It retains the previous grant, if any.\n <p/>\n Device admins with a {@code targetSdkVersion} &lt; android.os.Build.VERSION_CODES.Q\n cannot grant and revoke permissions for applications built with a {@code targetSdkVersion}\n &lt; android.os.Build.VERSION_CODES.M.\n <p/>\n Admins with a {@code targetSdkVersion} &ge; android.os.Build.VERSION_CODES.Q can\n grant and revoke permissions of all apps. Similar to the user revoking a permission from a\n application built with a {@code targetSdkVersion} &lt;\n android.os.Build.VERSION_CODES.M the app-op matching the permission is set to\n android.app.AppOpsManager.MODE_IGNORED, but the permission stays granted.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which profile or device owner this request is associated with.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The application to grant or revoke a permission to.</p>\n</div></li><li><span class='pre'>permission</span> : String<div class='sub-desc'><p>The permission to grant or revoke.</p>\n</div></li><li><span class='pre'>grantState</span> : Number<div class='sub-desc'><p>The permission grant state which is one of\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED\" class=\"docClass\">PERMISSION_GRANT_STATE_DENIED</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" class=\"docClass\">PERMISSION_GRANT_STATE_DEFAULT</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED\" class=\"docClass\">PERMISSION_GRANT_STATE_GRANTED</a>,</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether the permission was successfully granted or revoked.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DENIED\" class=\"docClass\">PERMISSION_GRANT_STATE_DENIED</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_DEFAULT\" class=\"docClass\">PERMISSION_GRANT_STATE_DEFAULT</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_GRANT_STATE_GRANTED\" class=\"docClass\">PERMISSION_GRANT_STATE_GRANTED</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" class=\"docClass\">DELEGATION_PERMISSION_GRANT</a></p>\n</div></li></ul></div></div></div><div id='method-setPermissionPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPermissionPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPermissionPolicy' class='name expandable'>setPermissionPolicy</a>( <span class='pre'>admin, policy</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the default response for future runtime permission requests by applications. ...</div><div class='long'><p>Set the default response for future runtime permission requests by applications. This\n function can be called by a device owner, profile owner, or by a delegate given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" class=\"docClass\">DELEGATION_PERMISSION_GRANT</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.\n The policy can allow for normal operation which prompts the user to grant a permission, or\n can allow automatic granting or denying of runtime permission requests by an application.\n This also applies to new permissions declared by app updates. When a permission is denied or\n granted this way, the effect is equivalent to setting the permission * grant state via\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPermissionGrantState\" rel=\"android.app.admin.DevicePolicyManager-method-setPermissionGrantState\" class=\"docClass\">setPermissionGrantState</a>.\n <p/>\n As this policy only acts on runtime permission requests, it only applies to applications\n built with a {@code targetSdkVersion} of android.os.Build.VERSION_CODES.M or later.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which profile or device owner this request is associated with.</p>\n</div></li><li><span class='pre'>policy</span> : Number<div class='sub-desc'><p>One of the policy constants <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_PROMPT\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_PROMPT\" class=\"docClass\">PERMISSION_POLICY_PROMPT</a>,\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_AUTO_GRANT\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_AUTO_GRANT\" class=\"docClass\">PERMISSION_POLICY_AUTO_GRANT</a> and <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_AUTO_DENY\" rel=\"android.app.admin.DevicePolicyManager-property-PERMISSION_POLICY_AUTO_DENY\" class=\"docClass\">PERMISSION_POLICY_AUTO_DENY</a>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setPermissionGrantState\" rel=\"android.app.admin.DevicePolicyManager-method-setPermissionGrantState\" class=\"docClass\">setPermissionGrantState</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_PERMISSION_GRANT\" class=\"docClass\">DELEGATION_PERMISSION_GRANT</a></p>\n</div></li></ul></div></div></div><div id='method-setPermittedAccessibilityServices' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPermittedAccessibilityServices' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPermittedAccessibilityServices' class='name expandable'>setPermittedAccessibilityServices</a>( <span class='pre'>admin, packageNames</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile or device owner to set the permitted\n android.accessibilityservice.AccessibilityService. ...</div><div class='long'><p>Called by a profile or device owner to set the permitted\n android.accessibilityservice.AccessibilityService. When set by\n a device owner or profile owner the restriction applies to all profiles of the user the\n device owner or profile owner is an admin for. By default, the user can use any accessibility\n service. When zero or more packages have been added, accessibility services that are not in\n the list and not part of the system can not be enabled by the user.\n <p>\n Calling with a null value for the list disables the restriction so that all services can be\n used, calling with an empty list only allows the built-in system services. Any non-system\n accessibility service that's currently enabled must be included in the list.\n <p>\n System accessibility services are always available to the user the list can't modify this.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageNames</span> : Object {java.util.List}<div class='sub-desc'><p>List of accessibility service package names.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the operation succeeded, or {@code false} if the list didn't\n         contain every enabled non-system accessibility service.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setPermittedCrossProfileNotificationListeners' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPermittedCrossProfileNotificationListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPermittedCrossProfileNotificationListeners' class='name expandable'>setPermittedCrossProfileNotificationListeners</a>( <span class='pre'>admin, packageList</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile owner of a managed profile to set the packages that are allowed to use\n a android.service.notific...</div><div class='long'><p>Called by a profile owner of a managed profile to set the packages that are allowed to use\n a android.service.notification.NotificationListenerService in the primary user to\n see notifications from the managed profile. By default all packages are permitted by this\n policy. When zero or more packages have been added, notification listeners installed on the\n primary user that are not in the list and are not part of the system won't receive events\n for managed profile notifications.\n <p>\n Calling with a {@code null} value for the list disables the restriction so that all\n notification listener services be used. Calling with an empty list disables all but the\n system's own notification listeners. System notification listener services are always\n available to the user.\n <p>\n If a device or profile owner want to stop notification listeners in their user from seeing\n that user's notifications they should prevent that service from running instead (e.g. via\n String, boolean))</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageList</span> : Object {java.util.List}<div class='sub-desc'><p>List of package names to whitelist</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if setting the restriction succeeded. It will fail if called outside a managed\n profile</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.\n@see android.service.notification.NotificationListenerService</p>\n</div></li></ul></div></div></div><div id='method-setPermittedInputMethods' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setPermittedInputMethods' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setPermittedInputMethods' class='name expandable'>setPermittedInputMethods</a>( <span class='pre'>admin, packageNames</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile or device owner to set the permitted input methods services for this\n user. ...</div><div class='long'><p>Called by a profile or device owner to set the permitted input methods services for this\n user. By default, the user can use any input method.\n <p>\n When zero or more packages have been added, input method that are not in the list and not\n part of the system can not be enabled by the user. This method will fail if it is called for\n a admin that is not for the foreground user or a profile of the foreground user. Any\n non-system input method service that's currently enabled must be included in the list.\n <p>\n Calling with a null value for the list disables the restriction so that all input methods can\n be used, calling with an empty list disables all but the system's own input methods.\n <p>\n System input methods are always available to the user - this method can't modify this.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>packageNames</span> : Object {java.util.List}<div class='sub-desc'><p>List of input method package names.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the operation succeeded, or {@code false} if the list didn't\n        contain every enabled non-system input method service.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setProfileEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setProfileEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setProfileEnabled' class='name expandable'>setProfileEnabled</a>( <span class='pre'>admin, admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the enabled state of the profile. ...</div><div class='long'><p>Sets the enabled state of the profile. A profile should be enabled only once it is ready to\n be used. Only the profile owner can call this.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>admin</span> : Object<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setProfileName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setProfileName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setProfileName' class='name expandable'>setProfileName</a>( <span class='pre'>admin, profileName, admin, profileName</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the name of the profile. ...</div><div class='long'><p>Sets the name of the profile. In the device owner case it sets the name of the user which it\n is called from. Only a profile owner or device owner can call this. If this is never called\n by the profile or device owner, the name will be set to default values.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associate with.</p>\n</div></li><li><span class='pre'>profileName</span> : String<div class='sub-desc'><p>The name of the profile.</p>\n</div></li><li><span class='pre'>admin</span> : Object<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associate with.</p>\n</div></li><li><span class='pre'>profileName</span> : Object<div class='sub-desc'><p>The name of the profile.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setProfileOwner' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setProfileOwner' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setProfileOwner' class='name expandable'>setProfileOwner</a>( <span class='pre'>admin, ownerName, userHandle, userHandle</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>the component name to be registered as profile owner.</p>\n</div></li><li><span class='pre'>ownerName</span> : String<div class='sub-desc'><p>the human readable name of the organisation associated with this DPM.</p>\n</div></li><li><span class='pre'>userHandle</span> : Number<div class='sub-desc'><p>the userId to set the profile owner for.</p>\n</div></li><li><span class='pre'>userHandle</span> : Object<div class='sub-desc'><p>the userId to set the profile owner for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether the component was successfully registered as the profile owner.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if admin is null, the package isn't installed, or the\n preconditions mentioned are not met.</p>\n</div></li></ul></div></div></div><div id='method-setRecommendedGlobalProxy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setRecommendedGlobalProxy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setRecommendedGlobalProxy' class='name expandable'>setRecommendedGlobalProxy</a>( <span class='pre'>admin, proxyInfo, proxyInfo</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a network-independent global HTTP proxy. ...</div><div class='long'><p>Set a network-independent global HTTP proxy. This is not normally what you want for typical\n HTTP proxies - they are generally network dependent. However if you're doing something\n unusual like general internal filtering this may be useful. On a private network where the\n proxy is not accessible, you may break HTTP using this.\n <p>\n This method requires the caller to be the device owner.\n <p>\n This proxy is only a recommendation and it is possible that some apps will ignore it.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>proxyInfo</span> : Object {ProxyInfo}<div class='sub-desc'><p>The a ProxyInfo object defining the new global HTTP proxy. A\n            {@code null} value will clear the global HTTP proxy.</p>\n</div></li><li><span class='pre'>proxyInfo</span> : Object<div class='sub-desc'><p>The a ProxyInfo object defining the new global HTTP proxy. A\n            {@code null} value will clear the global HTTP proxy.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not the device owner.</p>\n</div></li></ul></div></div></div><div id='method-setRequiredStrongAuthTimeout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setRequiredStrongAuthTimeout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setRequiredStrongAuthTimeout' class='name expandable'>setRequiredStrongAuthTimeout</a>( <span class='pre'>admin, timeoutMs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device/profile owner to set the timeout after which unlocking with secondary, non\n strong auth (e.g. ...</div><div class='long'><p>Called by a device/profile owner to set the timeout after which unlocking with secondary, non\n strong auth (e.g. fingerprint, face, trust agents) times out, i.e. the user has to use a\n strong authentication method like password, pin or pattern.</p>\n\n<p> <p>This timeout is used internally to reset the timer to require strong auth again after\n specified timeout each time it has been successfully used.</p>\n\n<p> <p>Fingerprint can also be disabled altogether using <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" class=\"docClass\">KEYGUARD_DISABLE_FINGERPRINT</a>.</p>\n\n<p> <p>Trust agents can also be disabled altogether using <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a>.</p>\n\n<p> <p>The calling device admin must be a device or profile owner. If it is not,\n a SecurityException will be thrown.</p>\n\n<p> <p>The calling device admin can verify the value it has set by calling\n getRequiredStrongAuthTimeout(ComponentName) and passing in its instance.</p>\n\n<p> <p>This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set restrictions on the parent\n profile.</p>\n\n<p> <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature,\n calling this methods has no effect - i.e. the timeout is not set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>timeoutMs</span> : Number<div class='sub-desc'><p>The new timeout in milliseconds, after which the user will have to unlock\n         with strong authentication method. A value of 0 means the admin is not participating\n         in controlling the timeout.\n         The minimum and maximum timeouts are platform-defined and are typically 1 hour and\n         72 hours, respectively. Though discouraged, the admin may choose to require strong\n         auth at all times using <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_FINGERPRINT\" class=\"docClass\">KEYGUARD_DISABLE_FINGERPRINT</a> and/or\n         <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setResetPasswordToken' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setResetPasswordToken' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setResetPasswordToken' class='name expandable'>setResetPasswordToken</a>( <span class='pre'>admin, token</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a profile or device owner to provision a token which can later be used to reset the\n device lockscreen pass...</div><div class='long'><p>Called by a profile or device owner to provision a token which can later be used to reset the\n device lockscreen password (if called by device owner), or managed profile challenge (if\n called by profile owner), via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-resetPasswordWithToken\" rel=\"android.app.admin.DevicePolicyManager-method-resetPasswordWithToken\" class=\"docClass\">resetPasswordWithToken</a>.\n <p>\n If the user currently has a lockscreen password, the provisioned token will not be\n immediately usable; it only becomes active after the user performs a confirm credential\n operation, which can be triggered by KeyguardManager.createConfirmDeviceCredentialIntent.\n If the user has no lockscreen password, the token is activated immediately. In all cases,\n the active state of the current token can be checked by <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isResetPasswordTokenActive\" rel=\"android.app.admin.DevicePolicyManager-method-isResetPasswordTokenActive\" class=\"docClass\">isResetPasswordTokenActive</a>.\n For security reasons, un-activated tokens are only stored in memory and will be lost once\n the device reboots. In this case a new token needs to be provisioned again.\n <p>\n Once provisioned and activated, the token will remain effective even if the user changes\n or clears the lockscreen password.\n <p>\n <em>This token is highly sensitive and should be treated at the same level as user\n credentials. In particular, NEVER store this token on device in plaintext. Do not store\n the plaintext token in device-encrypted storage if it will be needed to reset password on\n file-based encryption devices before user unlocks. Consider carefully how any password token\n will be stored on your server and who will need access to them. Tokens may be the subject of\n legal access requests.\n </em>\n <p>On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, the\n reset token is not set and this method returns false.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>token</span> : Object {byte[]}<div class='sub-desc'><p>a secure token a least 32-byte long, which must be generated by a\n        cryptographically strong random number generator.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the operation is successful, false otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if admin is not a device or profile owner.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the supplied token is invalid.</p>\n</div></li></ul></div></div></div><div id='method-setRestrictionsProvider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setRestrictionsProvider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setRestrictionsProvider' class='name expandable'>setRestrictionsProvider</a>( <span class='pre'>admin, provider</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Designates a specific service component as the provider for making permission requests of a\n local or remote administ...</div><div class='long'><p>Designates a specific service component as the provider for making permission requests of a\n local or remote administrator of the user.\n <p/>\n Only a profile owner can designate the restrictions provider.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>provider</span> : Object {ComponentName}<div class='sub-desc'><p>The component name of the service that implements\n            RestrictionsReceiver. If this param is null, it removes the restrictions\n            provider previously assigned.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setScreenCaptureDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setScreenCaptureDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setScreenCaptureDisabled' class='name expandable'>setScreenCaptureDisabled</a>( <span class='pre'>admin, disabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device/profile owner to set whether the screen capture is disabled. ...</div><div class='long'><p>Called by a device/profile owner to set whether the screen capture is disabled. Disabling\n screen capture also prevents the content from being shown on display devices that do not have\n a secure video output. See android.view.Display.FLAG_SECURE for more details about\n secure surfaces and secure displays.\n <p>\n The calling device admin must be a device or profile owner. If it is not, a security\n exception will be thrown.\n <p>\n From version android.os.Build.VERSION_CODES.M disabling screen capture also blocks\n assist requests for all activities of the relevant user.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>disabled</span> : Boolean<div class='sub-desc'><p>Whether screen capture is disabled or not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setSecureSetting' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setSecureSetting' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setSecureSetting' class='name expandable'>setSecureSetting</a>( <span class='pre'>admin, setting, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by profile or device owners to update android.provider.Settings.Secure\n settings. ...</div><div class='long'><p>Called by profile or device owners to update android.provider.Settings.Secure\n settings. Validation that the value of the setting is in the correct form for the setting\n type should be performed by the caller.\n <p>\n The settings that can be updated by a profile or device owner with this method are:\n <ul>\n <li>android.provider.Settings.Secure.DEFAULT_INPUT_METHOD</li>\n <li>android.provider.Settings.Secure.SKIP_FIRST_USE_HINTS</li>\n </ul>\n <p>\n A device owner can additionally update the following settings:\n <ul>\n <li>android.provider.Settings.Secure.LOCATION_MODE</li>\n </ul></p>\n\n<p> <strong>Note: Starting from Android O, apps should no longer call this method with the\n setting android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS, which is\n deprecated. Instead, device owners or profile owners should use the restriction\n UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES.\n If any app targeting android.os.Build.VERSION_CODES.O or higher calls this method\n with android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS,\n an UnsupportedOperationException is thrown.</strong></p>\n\n<p> Starting from Android Q, the device and profile owner can also call\n UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY to restrict unknown sources for\n all users.\n </p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>setting</span> : String<div class='sub-desc'><p>The name of the setting to update.</p>\n</div></li><li><span class='pre'>value</span> : String<div class='sub-desc'><p>The value to update the setting to.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setSecurityLoggingEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setSecurityLoggingEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setSecurityLoggingEnabled' class='name expandable'>setSecurityLoggingEnabled</a>( <span class='pre'>admin, enabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to control the security logging feature. ...</div><div class='long'><p>Called by device owner to control the security logging feature.</p>\n\n<p> <p> Security logs contain various information intended for security auditing purposes.\n See <a href=\"#!/api/android.app.admin.SecurityLog.SecurityEvent\" rel=\"android.app.admin.SecurityLog.SecurityEvent\" class=\"docClass\">android.app.admin.SecurityLog.SecurityEvent</a> for details.</p>\n\n<p> <p><strong>Note:</strong> The device owner won't be able to retrieve security logs if there\n are unaffiliated secondary users or profiles on the device, regardless of whether the\n feature is enabled. Logs will be discarded if the internal buffer fills up while waiting for\n all users to become affiliated. Therefore it's recommended that affiliation ids are set for\n new users as soon as possible after provisioning via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which device owner this request is associated with.</p>\n</div></li><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>whether security logging should be enabled or not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setAffiliationIds\" rel=\"android.app.admin.DevicePolicyManager-method-setAffiliationIds\" class=\"docClass\">setAffiliationIds</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-retrieveSecurityLogs\" rel=\"android.app.admin.DevicePolicyManager-method-retrieveSecurityLogs\" class=\"docClass\">retrieveSecurityLogs</a></p>\n</div></li></ul></div></div></div><div id='method-setShortSupportMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setShortSupportMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setShortSupportMessage' class='name expandable'>setShortSupportMessage</a>( <span class='pre'>admin, message, message</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device admin to set the short support message. ...</div><div class='long'><p>Called by a device admin to set the short support message. This will be displayed to the user\n in settings screens where funtionality has been disabled by the admin. The message should be\n limited to a short statement such as \"This setting is disabled by your administrator. Contact\n someone@example.com for support.\" If the message is longer than 200 characters it may be\n truncated.\n <p>\n If the short support message needs to be localized, it is the responsibility of the\n <a href=\"#!/api/android.app.admin.DeviceAdminReceiver\" rel=\"android.app.admin.DeviceAdminReceiver\" class=\"docClass\">android.app.admin.DeviceAdminReceiver</a> to listen to the Intent.ACTION_LOCALE_CHANGED broadcast\n and set a new version of this string accordingly.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>message</span> : Object {CharSequence}<div class='sub-desc'><p>Short message to be displayed to the user in settings or null to clear the\n            existing message.</p>\n</div></li><li><span class='pre'>message</span> : Object<div class='sub-desc'><p>Short message to be displayed to the user in settings or null to clear the\n            existing message.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator.</p>\n</div></li></ul></div></div></div><div id='method-setStartUserSessionMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setStartUserSessionMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setStartUserSessionMessage' class='name expandable'>setStartUserSessionMessage</a>( <span class='pre'>admin, startUserSessionMessage</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to specify the user session start message. ...</div><div class='long'><p>Called by a device owner to specify the user session start message. This may be displayed\n during a user switch.\n <p>\n The message should be limited to a short statement or it may be truncated.\n <p>\n If the message needs to be localized, it is the responsibility of the\n <a href=\"#!/api/android.app.admin.DeviceAdminReceiver\" rel=\"android.app.admin.DeviceAdminReceiver\" class=\"docClass\">android.app.admin.DeviceAdminReceiver</a> to listen to the Intent.ACTION_LOCALE_CHANGED broadcast\n and set a new version of this message accordingly.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>startUserSessionMessage</span> : Object {CharSequence}<div class='sub-desc'><p>message for starting user session, or {@code null} to use\n system default message.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setStatusBarDisabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setStatusBarDisabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setStatusBarDisabled' class='name expandable'>setStatusBarDisabled</a>( <span class='pre'>admin, disabled</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner or profile owner of secondary users  that is affiliated with the\n device to disable the status...</div><div class='long'><p>Called by device owner or profile owner of secondary users  that is affiliated with the\n device to disable the status bar. Disabling the status bar blocks notifications, quick\n settings and other screen overlays that allow escaping from a single use device.\n <p>\n <strong>Note:</strong> This method has no effect for LockTask mode. The behavior of the\n status bar in LockTask mode can be configured with\n int). Calls to this method when the device is in\n LockTask mode will be registered, but will only take effect when the device leaves LockTask\n mode.</p>\n\n<p> <p>This policy does not have any effect while on the lock screen, where the status bar will\n not be disabled. Using LockTask instead of this method is recommended.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>disabled</span> : Boolean<div class='sub-desc'><p>{@code true} disables the status bar, {@code false} reenables it.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code false} if attempting to disable the status bar failed. {@code true} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not the device owner, or a profile owner of\n secondary user that is affiliated with the device.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" rel=\"android.app.admin.DevicePolicyManager-method-isAffiliatedUser\" class=\"docClass\">isAffiliatedUser</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" class=\"docClass\">getSecondaryUsers</a></p>\n</div></li></ul></div></div></div><div id='method-setStorageEncryption' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setStorageEncryption' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setStorageEncryption' class='name expandable'>setStorageEncryption</a>( <span class='pre'>admin, encrypt</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by an application that is administering the device to request that the storage system\n be encrypted. ...</div><div class='long'><p>Called by an application that is administering the device to request that the storage system\n be encrypted. Does nothing if the caller is on a secondary user or a managed profile.\n <p>\n When multiple device administrators attempt to control device encryption, the most secure,\n supported setting will always be used. If any device administrator requests device\n encryption, it will be enabled; Conversely, if a device administrator attempts to disable\n device encryption while another device administrator has enabled it, the call to disable will\n fail (most commonly returning <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE\" rel=\"android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE\" class=\"docClass\">ENCRYPTION_STATUS_ACTIVE</a>).\n <p>\n This policy controls encryption of the secure (application data) storage area. Data written\n to other storage areas may or may not be encrypted, and this policy does not require or\n control the encryption of any other storage areas. There is one exception: If\n android.os.Environment.isExternalStorageEmulated() is {@code true}, then the\n directory returned by android.os.Environment.getExternalStorageDirectory() must be\n written to disk within the encrypted storage area.\n <p>\n Important Note: On some devices, it is possible to encrypt storage without requiring the user\n to create a device PIN or Password. In this case, the storage is encrypted, but the\n encryption key may not be fully secured. For maximum security, the administrator should also\n require (and check for) a pattern, PIN, or password.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>encrypt</span> : Boolean<div class='sub-desc'><p>true to request encryption, false to release any previous request</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the new total request status (for all active admins), or DevicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED if called for a non-system user.\n         Will be one of <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_UNSUPPORTED\" rel=\"android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_UNSUPPORTED\" class=\"docClass\">ENCRYPTION_STATUS_UNSUPPORTED</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_INACTIVE\" rel=\"android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_INACTIVE\" class=\"docClass\">ENCRYPTION_STATUS_INACTIVE</a>, or <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE\" rel=\"android.app.admin.DevicePolicyManager-property-ENCRYPTION_STATUS_ACTIVE\" class=\"docClass\">ENCRYPTION_STATUS_ACTIVE</a>. This is the value\n         of the requests; use getStorageEncryptionStatus() to query the actual device\n         state.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or does not use\n             DeviceAdminInfo.USES_ENCRYPTED_STORAGE</p>\n</div></li></ul></div></div></div><div id='method-setSystemSetting' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setSystemSetting' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setSystemSetting' class='name expandable'>setSystemSetting</a>( <span class='pre'>admin, setting, value, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device or profile owner to update android.provider.Settings.System\n settings. ...</div><div class='long'><p>Called by a device or profile owner to update android.provider.Settings.System\n settings. Validation that the value of the setting is in the correct form for the setting\n type should be performed by the caller.\n <p>\n The settings that can be updated by a device owner or profile owner of secondary user with\n this method are:\n <ul>\n <li>android.provider.Settings.System.SCREEN_BRIGHTNESS</li>\n <li>android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE</li>\n <li>android.provider.Settings.System.SCREEN_OFF_TIMEOUT</li>\n </ul>\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>setting</span> : String<div class='sub-desc'><p>The name of the setting to update.</p>\n</div></li><li><span class='pre'>value</span> : String<div class='sub-desc'><p>The value to update the setting to.</p>\n</div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to update the setting to.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-setSystemUpdatePolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setSystemUpdatePolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setSystemUpdatePolicy' class='name expandable'>setSystemUpdatePolicy</a>( <span class='pre'>admin, policy</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owners to set a local system update policy. ...</div><div class='long'><p>Called by device owners to set a local system update policy. When a new policy is set,\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-ACTION_SYSTEM_UPDATE_POLICY_CHANGED\" rel=\"android.app.admin.DevicePolicyManager-property-ACTION_SYSTEM_UPDATE_POLICY_CHANGED\" class=\"docClass\">ACTION_SYSTEM_UPDATE_POLICY_CHANGED</a> is broadcasted.\n <p>\n If the supplied system update policy has freeze periods set but the freeze periods do not\n meet 90-day maximum length or 60-day minimum separation requirement set out in\n <a href=\"#!/api/android.app.admin.SystemUpdatePolicy-method-setFreezePeriods\" rel=\"android.app.admin.SystemUpdatePolicy-method-setFreezePeriods\" class=\"docClass\">android.app.admin.SystemUpdatePolicy.setFreezePeriods</a>,\n <a href=\"#!/api/android.app.admin.SystemUpdatePolicy.ValidationFailedException\" rel=\"android.app.admin.SystemUpdatePolicy.ValidationFailedException\" class=\"docClass\">android.app.admin.SystemUpdatePolicy.ValidationFailedException</a> will the thrown. Note that the system\n keeps a record of freeze periods the device experienced previously, and combines them with\n the new freeze periods to be set when checking the maximum freeze length and minimum freeze\n separation constraints. As a result, freeze periods that passed validation during\n <a href=\"#!/api/android.app.admin.SystemUpdatePolicy-method-setFreezePeriods\" rel=\"android.app.admin.SystemUpdatePolicy-method-setFreezePeriods\" class=\"docClass\">android.app.admin.SystemUpdatePolicy.setFreezePeriods</a> might fail the additional checks here due to\n the freeze period history. If this is causing issues during development,\n {@code adb shell dpm clear-freeze-period-record} can be used to clear the record.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with. All\n            components in the device owner package can set system update policies and the most\n            recent policy takes effect.</p>\n</div></li><li><span class='pre'>policy</span> : Object {SystemUpdatePolicy}<div class='sub-desc'><p>the new policy, or {@code null} to clear the current policy.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the policy type or maintenance window is not valid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SystemUpdatePolicy.ValidationFailedException if the policy's freeze period does not\n             meet the requirement.\n@see SystemUpdatePolicy\n@see SystemUpdatePolicy#setFreezePeriods(List)</p>\n</div></li></ul></div></div></div><div id='method-setTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setTime' class='name expandable'>setTime</a>( <span class='pre'>admin, millis</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to set the system wall clock time. ...</div><div class='long'><p>Called by device owner to set the system wall clock time. This only takes effect if called\n when android.provider.Settings.Global.AUTO_TIME is 0, otherwise {@code false} will be\n returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with</p>\n</div></li><li><span class='pre'>millis</span> : Number<div class='sub-desc'><p>time in milliseconds since the Epoch</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if set time succeeded, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setTimeZone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setTimeZone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setTimeZone' class='name expandable'>setTimeZone</a>( <span class='pre'>admin, timeZone, timeZone</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to set the system's persistent default time zone. ...</div><div class='long'><p>Called by device owner to set the system's persistent default time zone. This only takes\n effect if called when android.provider.Settings.Global.AUTO_TIME_ZONE is 0, otherwise\n {@code false} will be returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with</p>\n</div></li><li><span class='pre'>timeZone</span> : String<div class='sub-desc'><p>one of the Olson ids from the list returned by\n     java.util.TimeZone.getAvailableIDs</p>\n</div></li><li><span class='pre'>timeZone</span> : Object<div class='sub-desc'><p>one of the Olson ids from the list returned by\n     java.util.TimeZone.getAvailableIDs</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if set timezone succeeded, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.</p>\n</div></li></ul></div></div></div><div id='method-setTrustAgentConfiguration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setTrustAgentConfiguration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setTrustAgentConfiguration' class='name expandable'>setTrustAgentConfiguration</a>( <span class='pre'>admin, target, configuration</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets a list of configuration features to enable for a trust agent component. ...</div><div class='long'><p>Sets a list of configuration features to enable for a trust agent component. This is meant to\n be used in conjunction with <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a>, which disables all trust\n agents but those enabled by this function call. If flag\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a> is not set, then this call has no effect.\n <p>\n For any specific trust agent, whether it is disabled or not depends on the aggregated state\n of each admin's <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a> setting and its trust agent\n configuration as set by this function call. In particular: if any admin sets\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a> and does not additionally set any\n trust agent configuration, the trust agent is disabled completely. Otherwise, the trust agent\n will receive the list of configurations from all admins who set\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" rel=\"android.app.admin.DevicePolicyManager-property-KEYGUARD_DISABLE_TRUST_AGENTS\" class=\"docClass\">KEYGUARD_DISABLE_TRUST_AGENTS</a> and aggregate the configurations to determine its\n behavior. The exact meaning of aggregation is trust-agent-specific.\n <p>\n The calling device admin must have requested\n <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_DISABLE_KEYGUARD_FEATURES\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_DISABLE_KEYGUARD_FEATURES\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_DISABLE_KEYGUARD_FEATURES</a> to be able to call this method;\n if not, a security exception will be thrown.\n <p>\n This method can be called on the <a href=\"#!/api/android.app.admin.DevicePolicyManager\" rel=\"android.app.admin.DevicePolicyManager\" class=\"docClass\">android.app.admin.DevicePolicyManager</a> instance returned by\n getParentProfileInstance(ComponentName) in order to set the configuration for\n the parent profile.\n <p>\n On devices not supporting PackageManager.FEATURE_SECURE_LOCK_SCREEN feature, calling\n this method has no effect - no trust agent configuration will be set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>target</span> : Object {ComponentName}<div class='sub-desc'><p>Component name of the agent to be configured.</p>\n</div></li><li><span class='pre'>configuration</span> : Object {PersistableBundle}<div class='sub-desc'><p>Trust-agent-specific feature configuration bundle. Please consult\n        documentation of the specific trust agent to determine the interpretation of this\n        bundle.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not an active administrator or does not use\n             DeviceAdminInfo.USES_POLICY_DISABLE_KEYGUARD_FEATURES</p>\n</div></li></ul></div></div></div><div id='method-setUninstallBlocked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setUninstallBlocked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setUninstallBlocked' class='name expandable'>setUninstallBlocked</a>( <span class='pre'>admin, packageName, uninstallBlocked</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Change whether a user can uninstall a package. ...</div><div class='long'><p>Change whether a user can uninstall a package. This function can be called by a device owner,\n profile owner, or by a delegate given the <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_BLOCK_UNINSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_BLOCK_UNINSTALL\" class=\"docClass\">DELEGATION_BLOCK_UNINSTALL</a> scope via\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n             {@code null} if the caller is a block uninstall delegate.</p>\n</div></li><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>package to change.</p>\n</div></li><li><span class='pre'>uninstallBlocked</span> : Boolean<div class='sub-desc'><p>true if the user shouldn't be able to uninstall the package.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_BLOCK_UNINSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_BLOCK_UNINSTALL\" class=\"docClass\">DELEGATION_BLOCK_UNINSTALL</a></p>\n</div></li></ul></div></div></div><div id='method-setUserIcon' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-setUserIcon' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-setUserIcon' class='name expandable'>setUserIcon</a>( <span class='pre'>admin, icon</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by profile or device owners to set the user's photo. ...</div><div class='long'><p>Called by profile or device owners to set the user's photo.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>icon</span> : Object {Bitmap}<div class='sub-desc'><p>the bitmap to set as the photo.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device or profile owner.</p>\n</div></li></ul></div></div></div><div id='method-startUserInBackground' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-startUserInBackground' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-startUserInBackground' class='name expandable'>startUserInBackground</a>( <span class='pre'>admin, userHandle</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to start the specified secondary user in background. ...</div><div class='long'><p>Called by a device owner to start the specified secondary user in background.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>userHandle</span> : Object {UserHandle}<div class='sub-desc'><p>the user to be started in background.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>one of the following result codes:\n UserManager.USER_OPERATION_ERROR_UNKNOWN,\n UserManager.USER_OPERATION_SUCCESS,\n UserManager.USER_OPERATION_ERROR_MANAGED_PROFILE,\n UserManager.USER_OPERATION_ERROR_MAX_RUNNING_USERS,</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" class=\"docClass\">getSecondaryUsers</a>(ComponentName)</p>\n</div></li></ul></div></div></div><div id='method-stopUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-stopUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-stopUser' class='name expandable'>stopUser</a>( <span class='pre'>admin, userHandle</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to stop the specified secondary user. ...</div><div class='long'><p>Called by a device owner to stop the specified secondary user.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>userHandle</span> : Object {UserHandle}<div class='sub-desc'><p>the user to be stopped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>one of the following result codes:\n UserManager.USER_OPERATION_ERROR_UNKNOWN,\n UserManager.USER_OPERATION_SUCCESS,\n UserManager.USER_OPERATION_ERROR_MANAGED_PROFILE,\n UserManager.USER_OPERATION_ERROR_CURRENT_USER</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" class=\"docClass\">getSecondaryUsers</a>(ComponentName)</p>\n</div></li></ul></div></div></div><div id='method-switchUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-switchUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-switchUser' class='name expandable'>switchUser</a>( <span class='pre'>admin, userHandle</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a device owner to switch the specified secondary user to the foreground. ...</div><div class='long'><p>Called by a device owner to switch the specified secondary user to the foreground.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with.</p>\n</div></li><li><span class='pre'>userHandle</span> : Object {UserHandle}<div class='sub-desc'><p>the user to switch to; null will switch to primary.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the switch was successful, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see Intent#ACTION_USER_FOREGROUND\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" rel=\"android.app.admin.DevicePolicyManager-method-getSecondaryUsers\" class=\"docClass\">getSecondaryUsers</a>(ComponentName)</p>\n</div></li></ul></div></div></div><div id='method-transferOwnership' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-transferOwnership' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-transferOwnership' class='name expandable'>transferOwnership</a>( <span class='pre'>admin, target, bundle</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Changes the current administrator to another one. ...</div><div class='long'><p>Changes the current administrator to another one. All policies from the current\n administrator are migrated to the new administrator. The whole operation is atomic -\n the transfer is either complete or not done at all.</p>\n\n<p> <p>Depending on the current administrator (device owner, profile owner), you have the\n following expected behaviour:\n <ul>\n     <li>A device owner can only be transferred to a new device owner</li>\n     <li>A profile owner can only be transferred to a new profile owner</li>\n </ul></p>\n\n<p> <p>Use the {@code bundle} parameter to pass data to the new administrator. The data\n will be received in the\n PersistableBundle)\n callback of the new administrator.</p>\n\n<p> <p>The transfer has failed if the original administrator is still the corresponding owner\n after calling this method.</p>\n\n<p> <p>The incoming target administrator must have the\n <code>&lt;support-transfer-ownership /&gt;</code> tag inside the\n <code>&lt;device-admin&gt;&lt;/device-admin&gt;</code> tags in the xml file referenced by\n <a href=\"#!/api/android.app.admin.DeviceAdminReceiver-property-DEVICE_ADMIN_META_DATA\" rel=\"android.app.admin.DeviceAdminReceiver-property-DEVICE_ADMIN_META_DATA\" class=\"docClass\">android.app.admin.DeviceAdminReceiver.DEVICE_ADMIN_META_DATA</a>. Otherwise an\n IllegalArgumentException will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with</p>\n</div></li><li><span class='pre'>target</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver we want the new administrator to be</p>\n</div></li><li><span class='pre'>bundle</span> : Object {PersistableBundle}<div class='sub-desc'><p>data to be sent to the new administrator</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner nor a profile owner</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code admin} or {@code target} is {@code null}, they\n are components in the same package or {@code target} is not an active admin</p>\n</div></li></ul></div></div></div><div id='method-uninstallAllUserCaCerts' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-uninstallAllUserCaCerts' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-uninstallAllUserCaCerts' class='name expandable'>uninstallAllUserCaCerts</a>( <span class='pre'>admin</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Uninstalls all custom trusted CA certificates from the profile. ...</div><div class='long'><p>Uninstalls all custom trusted CA certificates from the profile. Certificates installed by\n means other than device policy will also be removed, except for system CA certificates.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n              {@code null} if calling from a delegated certificate installer.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner.</p>\n</div></li></ul></div></div></div><div id='method-uninstallCaCert' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-uninstallCaCert' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-uninstallCaCert' class='name expandable'>uninstallCaCert</a>( <span class='pre'>admin, certBuffer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Uninstalls the given certificate from trusted user CAs, if present. ...</div><div class='long'><p>Uninstalls the given certificate from trusted user CAs, if present.</p>\n\n<p> The caller must be a profile or device owner on that user, or a delegate package given the\n <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a> scope via <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>; otherwise a\n security exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>Which DeviceAdminReceiver this request is associated with, or\n              {@code null} if calling from a delegated certificate installer.</p>\n</div></li><li><span class='pre'>certBuffer</span> : Object {byte[]}<div class='sub-desc'><p>encoded form of the certificate to remove.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not {@code null} and not a device or profile\n         owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" rel=\"android.app.admin.DevicePolicyManager-method-setDelegatedScopes\" class=\"docClass\">setDelegatedScopes</a>\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" rel=\"android.app.admin.DevicePolicyManager-property-DELEGATION_CERT_INSTALL\" class=\"docClass\">DELEGATION_CERT_INSTALL</a></p>\n</div></li></ul></div></div></div><div id='method-uninstallPackageWithActiveAdmins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-uninstallPackageWithActiveAdmins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-uninstallPackageWithActiveAdmins' class='name expandable'>uninstallPackageWithActiveAdmins</a>( <span class='pre'>packageName, packageName</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>the package containing active DAs to be uninstalled</p>\n</div></li><li><span class='pre'>packageName</span> : Object<div class='sub-desc'><p>the package containing active DAs to be uninstalled</p>\n</div></li></ul></div></div></div><div id='method-updateOverrideApn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-updateOverrideApn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-updateOverrideApn' class='name expandable'>updateOverrideApn</a>( <span class='pre'>admin, apnId, apnSetting</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by device owner to update an override APN. ...</div><div class='long'><p>Called by device owner to update an override APN.</p>\n\n<p> <p>This method may returns {@code false} if there is no override APN with the given\n {@code apnId}.\n <p>This method may also returns {@code false} if {@code apnSetting} conflicts with an\n existing override APN. Update the existing conflicted APN instead.\n <p>See <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-addOverrideApn\" rel=\"android.app.admin.DevicePolicyManager-method-addOverrideApn\" class=\"docClass\">addOverrideApn</a> for the definition of conflict.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>admin</span> : Object {ComponentName}<div class='sub-desc'><p>which DeviceAdminReceiver this request is associated with</p>\n</div></li><li><span class='pre'>apnId</span> : Number<div class='sub-desc'><p>the {@code id} of the override APN to update</p>\n</div></li><li><span class='pre'>apnSetting</span> : Object {ApnSetting}<div class='sub-desc'><p>the override APN to update</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the required override APN is successfully updated,\n         {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if {@code admin} is not a device owner.\n@see <a href=\"#!/api/android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" rel=\"android.app.admin.DevicePolicyManager-method-setOverrideApnsEnabled\" class=\"docClass\">setOverrideApnsEnabled</a>(ComponentName, boolean)</p>\n</div></li></ul></div></div></div><div id='method-wipeData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.admin.DevicePolicyManager'>android.app.admin.DevicePolicyManager</span><br/><a href='source/DevicePolicyManager.html#android-app-admin-DevicePolicyManager-method-wipeData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.admin.DevicePolicyManager-method-wipeData' class='name expandable'>wipeData</a>( <span class='pre'>flags, reason</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ask that all user data be wiped. ...</div><div class='long'><p>Ask that all user data be wiped. If called as a secondary user, the user will be removed and\n other users will remain unaffected, the provided reason for wiping data can be shown to\n user. Calling from the primary user will cause the device to reboot, erasing all device data\n - including all the secondary users and their data - while booting up. In this case, we don't\n show the reason to the user since the device would be factory reset.\n <p>\n The calling device admin must have requested <a href=\"#!/api/android.app.admin.DeviceAdminInfo-property-USES_POLICY_WIPE_DATA\" rel=\"android.app.admin.DeviceAdminInfo-property-USES_POLICY_WIPE_DATA\" class=\"docClass\">android.app.admin.DeviceAdminInfo.USES_POLICY_WIPE_DATA</a> to\n be able to call this method; if it has not, a security exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Bit mask of additional options: currently supported flags are\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-WIPE_EXTERNAL_STORAGE\" rel=\"android.app.admin.DevicePolicyManager-property-WIPE_EXTERNAL_STORAGE\" class=\"docClass\">WIPE_EXTERNAL_STORAGE</a>, <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-WIPE_RESET_PROTECTION_DATA\" rel=\"android.app.admin.DevicePolicyManager-property-WIPE_RESET_PROTECTION_DATA\" class=\"docClass\">WIPE_RESET_PROTECTION_DATA</a> and\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-WIPE_EUICC\" rel=\"android.app.admin.DevicePolicyManager-property-WIPE_EUICC\" class=\"docClass\">WIPE_EUICC</a>.</p>\n</div></li><li><span class='pre'>reason</span> : Object {CharSequence}<div class='sub-desc'><p>a string that contains the reason for wiping data, which can be\n            presented to the user.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the calling application does not own an active administrator\n            that uses DeviceAdminInfo.USES_POLICY_WIPE_DATA</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the input reason string is null or empty, or if\n            <a href=\"#!/api/android.app.admin.DevicePolicyManager-property-WIPE_SILENTLY\" rel=\"android.app.admin.DevicePolicyManager-property-WIPE_SILENTLY\" class=\"docClass\">WIPE_SILENTLY</a> is set.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});