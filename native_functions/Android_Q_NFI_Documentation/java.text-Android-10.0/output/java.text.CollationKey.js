Ext.data.JsonP.java_text_CollationKey({"tagname":"class","name":"java.text.CollationKey","autodetected":{},"files":[{"filename":"CollationKey.js","href":"CollationKey.html#java-text-CollationKey"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Helena Shih","email":null}],"members":[{"name":"compareTo","tagname":"method","owner":"java.text.CollationKey","id":"method-compareTo","meta":{}},{"name":"getSourceString","tagname":"method","owner":"java.text.CollationKey","id":"method-getSourceString","meta":{}},{"name":"toByteArray","tagname":"method","owner":"java.text.CollationKey","id":"method-toByteArray","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.text.CollationKey","short_doc":"implements java.lang.Comparable\n\nA CollationKey represents a String under the\n rules of a specific Collator object. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.text.CollationKey</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/CollationKey.html#java-text-CollationKey' target='_blank'>CollationKey.js</a></div></pre><div class='doc-contents'><p>implements java.lang.Comparable</p>\n\n<p>A <code>CollationKey</code> represents a <code>String</code> under the\n rules of a specific <code>Collator</code> object. Comparing two\n <code>CollationKey</code>s returns the relative order of the\n <code>String</code>s they represent. Using <code>CollationKey</code>s\n to compare <code>String</code>s is generally faster than using\n <code>Collator.compare</code>. Thus, when the <code>String</code>s\n must be compared multiple times, for example when sorting a list\n of <code>String</code>s. It's more efficient to use <code>CollationKey</code>s.</p>\n\n<p> <p>\n You can not create <code>CollationKey</code>s directly. Rather,\n generate them by calling <code>Collator.getCollationKey</code>.\n You can only compare <code>CollationKey</code>s generated from\n the same <code>Collator</code> object.</p>\n\n<p> <p>\n Generating a <code>CollationKey</code> for a <code>String</code>\n involves examining the entire <code>String</code>\n and converting it to series of bits that can be compared bitwise. This\n allows fast comparisons once the keys are generated. The cost of generating\n keys is recouped in faster comparisons when <code>String</code>s need\n to be compared many times. On the other hand, the result of a comparison\n is often determined by the first couple of characters of each <code>String</code>.\n <code>Collator.compare</code> examines only as many characters as it needs which\n allows it to be faster when doing single comparisons.\n <p>\n The following example shows how <code>CollationKey</code>s might be used\n to sort a list of <code>String</code>s.\n <blockquote>\n <pre>{@code\n // Create an array of CollationKeys for the Strings to be sorted.\n Collator myCollator = Collator.getInstance();\n CollationKey[] keys = new CollationKey[3];\n keys[0] = myCollator.getCollationKey(\"Tom\");\n keys[1] = myCollator.getCollationKey(\"Dick\");\n keys[2] = myCollator.getCollationKey(\"Harry\");\n sort(keys);</pre></blockquote></p>\n\n<p> //...</p>\n\n<p> // Inside body of sort routine, compare keys this way\n if (keys[i].compareTo(keys[j]) > 0)\n    // swap keys[i] and keys[j]</p>\n\n<p> //...</p>\n\n<p> // Finally, when we've returned from sort.\n System.out.println(keys[0].getSourceString());\n System.out.println(keys[1].getSourceString());\n System.out.println(keys[2].getSourceString());\n }\n </p>\n\n<p> @see          Collator\n @see          RuleBasedCollator</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-compareTo' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.CollationKey'>java.text.CollationKey</span><br/><a href='source/CollationKey.html#java-text-CollationKey-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.CollationKey-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'>target</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compare this CollationKey to the target CollationKey. ...</div><div class='long'><p>Compare this CollationKey to the target CollationKey. The collation rules of the\n Collator object which created these keys are applied. <strong>Note:</strong>\n CollationKeys created by different Collators can not be compared.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object {CollationKey}<div class='sub-desc'><p>target CollationKey</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns an integer value. Value is less than zero if this is less\n than target, value is zero if this and target are equal and value is greater than\n zero if this is greater than target.\n@see <a href=\"#!/api/java.text.Collator-method-compare\" rel=\"java.text.Collator-method-compare\" class=\"docClass\">java.text.Collator.compare</a></p>\n</div></li></ul></div></div></div><div id='method-getSourceString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.CollationKey'>java.text.CollationKey</span><br/><a href='source/CollationKey.html#java-text-CollationKey-method-getSourceString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.CollationKey-method-getSourceString' class='name expandable'>getSourceString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the String that this CollationKey represents. ...</div><div class='long'><p>Returns the String that this CollationKey represents.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the source string of this CollationKey</p>\n</div></li></ul></div></div></div><div id='method-toByteArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.CollationKey'>java.text.CollationKey</span><br/><a href='source/CollationKey.html#java-text-CollationKey-method-toByteArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.CollationKey-method-toByteArray' class='name expandable'>toByteArray</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts the CollationKey to a sequence of bits. ...</div><div class='long'><p>Converts the CollationKey to a sequence of bits. If two CollationKeys\n could be legitimately compared, then one could compare the byte arrays\n for each of those keys to obtain the same result.  Byte arrays are\n organized most significant byte first.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a byte array representation of the CollationKey</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});