Ext.data.JsonP.java_text_MessageFormat({"tagname":"class","name":"java.text.MessageFormat","autodetected":{},"files":[{"filename":"MessageFormat.js","href":"MessageFormat.html#java-text-MessageFormat"}],"extends":"java.text.Format","author":[{"tagname":"author","name":"Mark Davis","email":null}],"members":[{"name":"applyPattern","tagname":"method","owner":"java.text.MessageFormat","id":"method-applyPattern","meta":{}},{"name":"clone","tagname":"method","owner":"java.text.MessageFormat","id":"method-clone","meta":{}},{"name":"equals","tagname":"method","owner":"java.text.MessageFormat","id":"method-equals","meta":{}},{"name":"format","tagname":"method","owner":"java.text.MessageFormat","id":"method-format","meta":{}},{"name":"formatToCharacterIterator","tagname":"method","owner":"java.text.MessageFormat","id":"method-formatToCharacterIterator","meta":{}},{"name":"getFormats","tagname":"method","owner":"java.text.MessageFormat","id":"method-getFormats","meta":{}},{"name":"getFormatsByArgumentIndex","tagname":"method","owner":"java.text.MessageFormat","id":"method-getFormatsByArgumentIndex","meta":{}},{"name":"getLocale","tagname":"method","owner":"java.text.MessageFormat","id":"method-getLocale","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.text.MessageFormat","id":"method-hashCode","meta":{}},{"name":"parse","tagname":"method","owner":"java.text.MessageFormat","id":"method-parse","meta":{}},{"name":"parseObject","tagname":"method","owner":"java.text.MessageFormat","id":"method-parseObject","meta":{}},{"name":"setFormat","tagname":"method","owner":"java.text.MessageFormat","id":"method-setFormat","meta":{}},{"name":"setFormatByArgumentIndex","tagname":"method","owner":"java.text.MessageFormat","id":"method-setFormatByArgumentIndex","meta":{}},{"name":"setFormats","tagname":"method","owner":"java.text.MessageFormat","id":"method-setFormats","meta":{}},{"name":"setFormatsByArgumentIndex","tagname":"method","owner":"java.text.MessageFormat","id":"method-setFormatsByArgumentIndex","meta":{}},{"name":"setLocale","tagname":"method","owner":"java.text.MessageFormat","id":"method-setLocale","meta":{}},{"name":"toPattern","tagname":"method","owner":"java.text.MessageFormat","id":"method-toPattern","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.text.MessageFormat","short_doc":"MessageFormat provides a means to produce concatenated\n messages in a language-neutral way. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.text.Format"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.text.Format' rel='java.text.Format' class='docClass'>java.text.Format</a><div class='subclass '><strong>java.text.MessageFormat</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/MessageFormat.html#java-text-MessageFormat' target='_blank'>MessageFormat.js</a></div></pre><div class='doc-contents'><p><code>MessageFormat</code> provides a means to produce concatenated\n messages in a language-neutral way. Use this to construct messages\n displayed for end users.</p>\n\n<p> <p>\n <code>MessageFormat</code> takes a set of objects, formats them, then\n inserts the formatted strings into the pattern at the appropriate places.</p>\n\n<p> <p>\n <strong>Note:</strong>\n <code>MessageFormat</code> differs from the other <code>Format</code>\n classes in that you create a <code>MessageFormat</code> object with one\n of its constructors (not with a <code>getInstance</code> style factory\n method). The factory methods aren't necessary because <code>MessageFormat</code>\n itself doesn't implement locale specific behavior. Any locale specific\n behavior is defined by the pattern that you provide as well as the\n subformats used for inserted arguments.</p>\n\n<p> <h3><a name=\"patterns\">Patterns and Their Interpretation</a></h3></p>\n\n<p> <code>MessageFormat</code> uses patterns of the following form:\n <blockquote></blockquote></p>\n\n<pre> <i>MessageFormatPattern:</i>\n         <i>String</i>\n         <i>MessageFormatPattern</i> <i>FormatElement</i> <i>String</i>\n\n <i>FormatElement:</i>\n         { <i>ArgumentIndex</i> }\n         { <i>ArgumentIndex</i> , <i>FormatType</i> }\n         { <i>ArgumentIndex</i> , <i>FormatType</i> , <i>FormatStyle</i> }\n\n <i>FormatType: one of </i>\n         number date time choice\n\n <i>FormatStyle:</i>\n         short\n         medium\n         long\n         full\n         integer\n         currency\n         percent\n         <i>SubformatPattern</i>\n </pre>\n\n\n<p></p>\n\n<p> <p>Within a <i>String</i>, a pair of single quotes can be used to\n quote any arbitrary characters except single quotes. For example,\n pattern string <code>\"'{0}'\"</code> represents string\n <code>\"{0}\"</code>, not a <i>FormatElement</i>. A single quote itself\n must be represented by doubled single quotes {@code ''} throughout a\n <i>String</i>.  For example, pattern string <code>\"'{''}'\"</code> is\n interpreted as a sequence of <code>'{</code> (start of quoting and a\n left curly brace), <code>''</code> (a single quote), and\n <code>}'</code> (a right curly brace and end of quoting),\n <em>not</em> <code>'{'</code> and <code>'}'</code> (quoted left and\n right curly braces): representing string <code>\"{'}\"</code>,\n <em>not</em> <code>\"{}\"</code>.</p>\n\n<p> <p>A <i>SubformatPattern</i> is interpreted by its corresponding\n subformat, and subformat-dependent pattern rules apply. For example,\n pattern string <code>\"{1,number,<u>$'#',##</u>}\"</code>\n (<i>SubformatPattern</i> with underline) will produce a number format\n with the pound-sign quoted, with a result such as: {@code\n \"$#31,45\"}. Refer to each {@code Format} subclass documentation for\n details.</p>\n\n<p> <p>Any unmatched quote is treated as closed at the end of the given\n pattern. For example, pattern string {@code \"'{0}\"} is treated as\n pattern {@code \"'{0}'\"}.</p>\n\n<p> <p>Any curly braces within an unquoted pattern must be balanced. For\n example, <code>\"ab {0} de\"</code> and <code>\"ab '}' de\"</code> are\n valid patterns, but <code>\"ab {0'}' de\"</code>, <code>\"ab } de\"</code>\n and <code>\"''{''\"</code> are not.</p>\n\n<p> <dl><dt><b>Warning:</b><dd>The rules for using quotes within message\n format patterns unfortunately have shown to be somewhat confusing.\n In particular, it isn't always obvious to localizers whether single\n quotes need to be doubled or not. Make sure to inform localizers about\n the rules, and tell them (for example, by using comments in resource\n bundle source files) which strings will be processed by {@code MessageFormat}.\n Note that localizers may need to use single quotes in translated\n strings where the original version doesn't have them.\n </dd></dt></dl>\n <p>\n The <i>ArgumentIndex</i> value is a non-negative integer written\n using the digits {@code '0'} through {@code '9'}, and represents an index into the\n {@code arguments} array passed to the {@code format} methods\n or the result array returned by the {@code parse} methods.\n <p>\n The <i>FormatType</i> and <i>FormatStyle</i> values are used to create\n a {@code Format} instance for the format element. The following\n table shows how the values map to {@code Format} instances. Combinations not\n shown in the table are illegal. A <i>SubformatPattern</i> must\n be a valid pattern string for the {@code Format} subclass used.</p>\n\n<p> <table border=1 summary=\"Shows how FormatType and FormatStyle values map to Format instances\">\n    <tr>\n       <th id=\"ft\" class=\"TableHeadingColor\">FormatType\n       <th id=\"fs\" class=\"TableHeadingColor\">FormatStyle\n       <th id=\"sc\" class=\"TableHeadingColor\">Subformat Created\n    <tr>\n       <td headers=\"ft\"><i>(none)</i>\n       <td headers=\"fs\"><i>(none)</i>\n       <td headers=\"sc\"><code>null</code>\n    <tr>\n       <td headers=\"ft\" rowspan=5><code>number</code>\n       <td headers=\"fs\"><i>(none)</i>\n       <td headers=\"sc\">java.text.NumberFormat.getInstance{@code (getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>integer</code>\n       <td headers=\"sc\">java.text.NumberFormat.getIntegerInstance{@code (getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>currency</code>\n       <td headers=\"sc\">java.text.NumberFormat.getCurrencyInstance{@code (getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>percent</code>\n       <td headers=\"sc\">java.text.NumberFormat.getPercentInstance{@code (getLocale())}\n    <tr>\n       <td headers=\"fs\"><i>SubformatPattern</i>\n       <td headers=\"sc\">{@code new} java.text.DecimalFormat{@code (subformatPattern,} java.text.DecimalFormatSymbols.getInstance{@code (getLocale()))}\n    <tr>\n       <td headers=\"ft\" rowspan=6><code>date</code>\n       <td headers=\"fs\"><i>(none)</i>\n       <td headers=\"sc\">java.text.DateFormat.getDateInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-DEFAULT\" rel=\"java.text.DateFormat-property-DEFAULT\" class=\"docClass\">java.text.DateFormat.DEFAULT</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>short</code>\n       <td headers=\"sc\">java.text.DateFormat.getDateInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-SHORT\" rel=\"java.text.DateFormat-property-SHORT\" class=\"docClass\">java.text.DateFormat.SHORT</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>medium</code>\n       <td headers=\"sc\">java.text.DateFormat.getDateInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-DEFAULT\" rel=\"java.text.DateFormat-property-DEFAULT\" class=\"docClass\">java.text.DateFormat.DEFAULT</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>long</code>\n       <td headers=\"sc\">java.text.DateFormat.getDateInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-LONG\" rel=\"java.text.DateFormat-property-LONG\" class=\"docClass\">java.text.DateFormat.LONG</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>full</code>\n       <td headers=\"sc\">java.text.DateFormat.getDateInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-FULL\" rel=\"java.text.DateFormat-property-FULL\" class=\"docClass\">java.text.DateFormat.FULL</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><i>SubformatPattern</i>\n       <td headers=\"sc\">{@code new} java.text.SimpleDateFormat{@code (subformatPattern, getLocale())}\n    <tr>\n       <td headers=\"ft\" rowspan=6><code>time</code>\n       <td headers=\"fs\"><i>(none)</i>\n       <td headers=\"sc\">java.text.DateFormat.getTimeInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-DEFAULT\" rel=\"java.text.DateFormat-property-DEFAULT\" class=\"docClass\">java.text.DateFormat.DEFAULT</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>short</code>\n       <td headers=\"sc\">java.text.DateFormat.getTimeInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-SHORT\" rel=\"java.text.DateFormat-property-SHORT\" class=\"docClass\">java.text.DateFormat.SHORT</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>medium</code>\n       <td headers=\"sc\">java.text.DateFormat.getTimeInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-DEFAULT\" rel=\"java.text.DateFormat-property-DEFAULT\" class=\"docClass\">java.text.DateFormat.DEFAULT</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>long</code>\n       <td headers=\"sc\">java.text.DateFormat.getTimeInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-LONG\" rel=\"java.text.DateFormat-property-LONG\" class=\"docClass\">java.text.DateFormat.LONG</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><code>full</code>\n       <td headers=\"sc\">java.text.DateFormat.getTimeInstance{@code (}<a href=\"#!/api/java.text.DateFormat-property-FULL\" rel=\"java.text.DateFormat-property-FULL\" class=\"docClass\">java.text.DateFormat.FULL</a>{@code , getLocale())}\n    <tr>\n       <td headers=\"fs\"><i>SubformatPattern</i>\n       <td headers=\"sc\">{@code new} java.text.SimpleDateFormat{@code (subformatPattern, getLocale())}\n    <tr>\n       <td headers=\"ft\"><code>choice</code>\n       <td headers=\"fs\"><i>SubformatPattern</i>\n       <td headers=\"sc\">{@code new} java.text.ChoiceFormat{@code (subformatPattern)}\n </td></td></td></tr></td></td></tr></td></td></tr></td></td></tr></td></td></tr></td></td></tr></td></td></td></tr></td></td></tr></td></td></tr></td></td></tr></td></td></tr></td></td></tr></td></td></td></tr></td></td></tr></td></td></tr></td></td></tr></td></td></tr></td></td></td></tr></td></td></td></tr></th></th></th></tr></table></p>\n\n<p> <h4>Usage Information</h4></p>\n\n<p> <p>\n Here are some examples of usage.\n In real internationalized programs, the message format pattern and other\n static strings will, of course, be obtained from resource bundles.\n Other parameters will be dynamically determined at runtime.\n <p>\n The first example uses the static method <code>MessageFormat.format</code>,\n which internally creates a <code>MessageFormat</code> for one-time use:\n <blockquote></blockquote></p>\n\n<pre> int planet = 7;\n String event = \"a disturbance in the Force\";\n\n String result = MessageFormat.format(\n     \"At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.\",\n     planet, new Date(), event);\n </pre>\n\n\n<p>\n The output is:\n <blockquote></blockquote></p>\n\n<pre> At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.\n </pre>\n\n\n<p></p>\n\n<p> <p>\n The following example creates a <code>MessageFormat</code> instance that\n can be used repeatedly:\n <blockquote></blockquote></p>\n\n<pre> int fileCount = 1273;\n String diskName = \"MyDisk\";\n Object[] testArgs = {new Long(fileCount), diskName};\n\n MessageFormat form = new MessageFormat(\n     \"The disk \\\"{1}\\\" contains {0} file(s).\");\n\n System.out.println(form.format(testArgs));\n </pre>\n\n\n<p>\n The output with different values for <code>fileCount</code>:\n <blockquote></blockquote></p>\n\n<pre> The disk \"MyDisk\" contains 0 file(s).\n The disk \"MyDisk\" contains 1 file(s).\n The disk \"MyDisk\" contains 1,273 file(s).\n </pre>\n\n\n<p></p>\n\n<p> <p>\n For more sophisticated patterns, you can use a <code>ChoiceFormat</code>\n to produce correct forms for singular and plural:\n <blockquote></blockquote></p>\n\n<pre> MessageFormat form = new MessageFormat(\"The disk \\\"{1}\\\" contains {0}.\");\n double[] filelimits = {0,1,2};\n String[] filepart = {\"no files\",\"one file\",\"{0,number} files\"};\n ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);\n form.setFormatByArgumentIndex(0, fileform);\n\n int fileCount = 1273;\n String diskName = \"MyDisk\";\n Object[] testArgs = {new Long(fileCount), diskName};\n\n System.out.println(form.format(testArgs));\n </pre>\n\n\n<p>\n The output with different values for <code>fileCount</code>:\n <blockquote></blockquote></p>\n\n<pre> The disk \"MyDisk\" contains no files.\n The disk \"MyDisk\" contains one file.\n The disk \"MyDisk\" contains 1,273 files.\n </pre>\n\n\n<p></p>\n\n<p> <p>\n You can create the <code>ChoiceFormat</code> programmatically, as in the\n above example, or by using a pattern. See <a href=\"#!/api/java.text.ChoiceFormat\" rel=\"java.text.ChoiceFormat\" class=\"docClass\">java.text.ChoiceFormat</a>\n for more information.\n <blockquote><pre>{@code\n form.applyPattern(\n    \"There {0,choice,0#are no files|1#is one file|1<are {0,number,integer} files}.\");\n }</pre></are></pre></blockquote></p>\n\n<p> <p>\n <strong>Note:</strong> As we see above, the string produced\n by a <code>ChoiceFormat</code> in <code>MessageFormat</code> is treated as special;\n occurrences of '{' are used to indicate subformats, and cause recursion.\n If you create both a <code>MessageFormat</code> and <code>ChoiceFormat</code>\n programmatically (instead of using the string patterns), then be careful not to\n produce a format that recurses on itself, which will cause an infinite loop.\n <p>\n When a single argument is parsed more than once in the string, the last match\n will be the final result of the parsing.  For example,\n <blockquote></blockquote></p>\n\n<pre> MessageFormat mf = new MessageFormat(\"{0,number,#.##}, {0,number,#.#}\");\n Object[] objs = {new Double(3.1415)};\n String result = mf.format( objs );\n // result now equals \"3.14, 3.1\"\n objs = null;\n objs = mf.parse(result, new ParsePosition(0));\n // objs now equals {new Double(3.1)}\n </pre>\n\n\n<p></p>\n\n<p> <p>\n Likewise, parsing with a {@code MessageFormat} object using patterns containing\n multiple occurrences of the same argument would return the last match.  For\n example,\n <blockquote></blockquote></p>\n\n<pre> MessageFormat mf = new MessageFormat(\"{0}, {0}, {0}\");\n String forParsing = \"x, y, z\";\n Object[] objs = mf.parse(forParsing, new ParsePosition(0));\n // result now equals {new String(\"z\")}\n </pre>\n\n\n<p></p>\n\n<p> <h4><a name=\"synchronization\">Synchronization</a></h4></p>\n\n<p> <p>\n Message formats are not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.</p>\n\n<p> @see          java.util.Locale\n @see          Format\n @see          NumberFormat\n @see          DecimalFormat\n @see          DecimalFormatSymbols\n @see          ChoiceFormat\n @see          DateFormat\n @see          SimpleDateFormat</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-applyPattern' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-applyPattern' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-applyPattern' class='name expandable'>applyPattern</a>( <span class='pre'>pattern</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the pattern used by this message format. ...</div><div class='long'><p>Sets the pattern used by this message format.\n The method parses the pattern and creates a list of subformats\n for the format elements contained in it.\n Patterns and their interpretation are specified in the\n <a href=\"#patterns\">class description</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pattern</span> : String<div class='sub-desc'><p>the pattern for this message format\n@exception IllegalArgumentException if the pattern is invalid</p>\n</div></li></ul></div></div></div><div id='method-clone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-clone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-clone' class='name expandable'>clone</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates and returns a copy of this object. ...</div><div class='long'><p>Creates and returns a copy of this object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>a clone of this instance.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.text.Format-method-clone\" rel=\"java.text.Format-method-clone\" class=\"docClass\">java.text.Format.clone</a></p></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-equals' class='name expandable'>equals</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Equality comparison between two message format objects ...</div><div class='long'><p>Equality comparison between two message format objects</p>\n</div></div></div><div id='method-format' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-format' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-format' class='name expandable'>format</a>( <span class='pre'>arguments, result, pos</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Formats an array of objects and appends the MessageFormat's\n pattern, with format elements replaced by the formatted ...</div><div class='long'><p>Formats an array of objects and appends the <code>MessageFormat</code>'s\n pattern, with format elements replaced by the formatted objects, to the\n provided <code>StringBuffer</code>.\n This is equivalent to\n <blockquote>\n     <code>java.lang.StringBuffer, java.text.FieldPosition) format((Object[]) arguments, result, pos)</code>\n </blockquote></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arguments</span> : Object {Object}<div class='sub-desc'><p>an array of objects to be formatted and substituted.</p>\n</div></li><li><span class='pre'>result</span> : Object {StringBuffer}<div class='sub-desc'><p>where text is appended.</p>\n</div></li><li><span class='pre'>pos</span> : Object {FieldPosition}<div class='sub-desc'><p>On input: an alignment field, if desired.\n            On output: the offsets of the alignment field.\n@exception IllegalArgumentException if an argument in the\n            <code>arguments</code> array is not of the type\n            expected by the format element(s) that use it.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.text.Format-method-format\" rel=\"java.text.Format-method-format\" class=\"docClass\">java.text.Format.format</a></p></div></div></div><div id='method-formatToCharacterIterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-formatToCharacterIterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-formatToCharacterIterator' class='name expandable'>formatToCharacterIterator</a>( <span class='pre'>arguments</span> ) : Object {java.text.AttributedCharacterIterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Formats an array of objects and inserts them into the\n MessageFormat's pattern, producing an\n AttributedCharacterIter...</div><div class='long'><p>Formats an array of objects and inserts them into the\n <code>MessageFormat</code>'s pattern, producing an\n <code>AttributedCharacterIterator</code>.\n You can use the returned <code>AttributedCharacterIterator</code>\n to build the resulting String, as well as to determine information\n about the resulting String.\n <p>\n The text of the returned <code>AttributedCharacterIterator</code> is\n the same that would be returned by\n <blockquote>\n     <code>java.lang.StringBuffer, java.text.FieldPosition) format(arguments, new StringBuffer(), null).toString()</code>\n </blockquote>\n <p>\n In addition, the <code>AttributedCharacterIterator</code> contains at\n least attributes indicating where text was generated from an\n argument in the <code>arguments</code> array. The keys of these attributes are of\n type <code>MessageFormat.Field</code>, their values are\n <code>Integer</code> objects indicating the index in the <code>arguments</code>\n array of the argument from which the text was generated.\n <p>\n The attributes/value from the underlying <code>Format</code>\n instances that <code>MessageFormat</code> uses will also be\n placed in the resulting <code>AttributedCharacterIterator</code>.\n This allows you to not only find where an argument is placed in the\n resulting String, but also which fields it contains in turn.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arguments</span> : Object {Object}<div class='sub-desc'><p>an array of objects to be formatted and substituted.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.text.AttributedCharacterIterator}</span><div class='sub-desc'><p>AttributedCharacterIterator describing the formatted value.\n@exception NullPointerException if <code>arguments</code> is null.\n@exception IllegalArgumentException if an argument in the\n            <code>arguments</code> array is not of the type\n            expected by the format element(s) that use it.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.text.Format-method-formatToCharacterIterator\" rel=\"java.text.Format-method-formatToCharacterIterator\" class=\"docClass\">java.text.Format.formatToCharacterIterator</a></p></div></div></div><div id='method-getFormats' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-getFormats' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-getFormats' class='name expandable'>getFormats</a>( <span class='pre'></span> ) : Object {java.text.Format}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the formats used for the format elements in the\n previously set pattern string. ...</div><div class='long'><p>Gets the formats used for the format elements in the\n previously set pattern string.\n The order of formats in the returned array corresponds to\n the order of format elements in the pattern string.\n <p>\n Since the order of format elements in a pattern string often\n changes during localization, it's generally better to use the\n <a href=\"#!/api/java.text.MessageFormat-method-getFormatsByArgumentIndex\" rel=\"java.text.MessageFormat-method-getFormatsByArgumentIndex\" class=\"docClass\">getFormatsByArgumentIndex</a>\n method, which assumes an order of formats corresponding to the\n order of elements in the <code>arguments</code> array passed to\n the <code>format</code> methods or the result array returned by\n the <code>parse</code> methods.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.text.Format}</span><div class='sub-desc'><p>the formats used for the format elements in the pattern</p>\n</div></li></ul></div></div></div><div id='method-getFormatsByArgumentIndex' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-getFormatsByArgumentIndex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-getFormatsByArgumentIndex' class='name expandable'>getFormatsByArgumentIndex</a>( <span class='pre'></span> ) : Object {java.text.Format}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the formats used for the values passed into\n format methods or returned from parse\n methods. ...</div><div class='long'><p>Gets the formats used for the values passed into\n <code>format</code> methods or returned from <code>parse</code>\n methods. The indices of elements in the returned array\n correspond to the argument indices used in the previously set\n pattern string.\n The order of formats in the returned array thus corresponds to\n the order of elements in the <code>arguments</code> array passed\n to the <code>format</code> methods or the result array returned\n by the <code>parse</code> methods.\n <p>\n If an argument index is used for more than one format element\n in the pattern string, then the format used for the last such\n format element is returned in the array. If an argument index\n is not used for any format element in the pattern string, then\n null is returned in the array.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.text.Format}</span><div class='sub-desc'><p>the formats used for the arguments within the pattern</p>\n</div></li></ul></div></div></div><div id='method-getLocale' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-getLocale' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-getLocale' class='name expandable'>getLocale</a>( <span class='pre'></span> ) : Object {java.util.Locale}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the locale that's used when creating or comparing subformats. ...</div><div class='long'><p>Gets the locale that's used when creating or comparing subformats.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Locale}</span><div class='sub-desc'><p>the locale used when creating or comparing subformats</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a hash code for the message format object. ...</div><div class='long'><p>Generates a hash code for the message format object.</p>\n</div></div></div><div id='method-parse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-parse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-parse' class='name expandable'>parse</a>( <span class='pre'>source</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Parses text from the beginning of the given string to produce an object\n array. ...</div><div class='long'><p>Parses text from the beginning of the given string to produce an object\n array.\n The method may not use the entire text of the given string.\n <p>\n See the java.text.ParsePosition) method for more information\n on message parsing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : String<div class='sub-desc'><p>A <code>String</code> whose beginning should be parsed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>An <code>Object</code> array parsed from the string.\n@exception ParseException if the beginning of the specified string\n            cannot be parsed.</p>\n</div></li></ul></div></div></div><div id='method-parseObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-parseObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-parseObject' class='name expandable'>parseObject</a>( <span class='pre'>source, pos</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Parses text from a string to produce an object array. ...</div><div class='long'><p>Parses text from a string to produce an object array.\n <p>\n The method attempts to parse text starting at the index given by\n <code>pos</code>.\n If parsing succeeds, then the index of <code>pos</code> is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n object array is returned. The updated <code>pos</code> can be used to\n indicate the starting point for the next call to this method.\n If an error occurs, then the index of <code>pos</code> is not\n changed, the error index of <code>pos</code> is set to the index of\n the character where the error occurred, and null is returned.\n <p>\n See the java.text.ParsePosition) method for more information\n on message parsing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : String<div class='sub-desc'><p>A <code>String</code>, part of which should be parsed.</p>\n</div></li><li><span class='pre'>pos</span> : Object {ParsePosition}<div class='sub-desc'><p>A <code>ParsePosition</code> object with index and error\n            index information as described above.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>An <code>Object</code> array parsed from the string. In case of\n         error, returns null.\n@exception NullPointerException if <code>pos</code> is null.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.text.Format-method-parseObject\" rel=\"java.text.Format-method-parseObject\" class=\"docClass\">java.text.Format.parseObject</a></p></div></div></div><div id='method-setFormat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-setFormat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-setFormat' class='name expandable'>setFormat</a>( <span class='pre'>formatElementIndex, newFormat</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the format to use for the format element with the given\n format element index within the previously set pattern ...</div><div class='long'><p>Sets the format to use for the format element with the given\n format element index within the previously set pattern string.\n The format element index is the zero-based number of the format\n element counting from the start of the pattern string.\n <p>\n Since the order of format elements in a pattern string often\n changes during localization, it is generally better to use the\n <a href=\"#!/api/java.text.MessageFormat-method-setFormatByArgumentIndex\" rel=\"java.text.MessageFormat-method-setFormatByArgumentIndex\" class=\"docClass\">setFormatByArgumentIndex</a>\n method, which accesses format elements based on the argument\n index they specify.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>formatElementIndex</span> : Number<div class='sub-desc'><p>the index of a format element within the pattern</p>\n</div></li><li><span class='pre'>newFormat</span> : Object {Format}<div class='sub-desc'><p>the format to use for the specified format element\n@exception ArrayIndexOutOfBoundsException if {@code formatElementIndex} is equal to or\n            larger than the number of format elements in the pattern string</p>\n</div></li></ul></div></div></div><div id='method-setFormatByArgumentIndex' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-setFormatByArgumentIndex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-setFormatByArgumentIndex' class='name expandable'>setFormatByArgumentIndex</a>( <span class='pre'>argumentIndex, newFormat</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the format to use for the format elements within the\n previously set pattern string that use the given argument\n...</div><div class='long'><p>Sets the format to use for the format elements within the\n previously set pattern string that use the given argument\n index.\n The argument index is part of the format element definition and\n represents an index into the <code>arguments</code> array passed\n to the <code>format</code> methods or the result array returned\n by the <code>parse</code> methods.\n <p>\n If the argument index is used for more than one format element\n in the pattern string, then the new format is used for all such\n format elements. If the argument index is not used for any format\n element in the pattern string, then the new format is ignored.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>argumentIndex</span> : Number<div class='sub-desc'><p>the argument index for which to use the new format</p>\n</div></li><li><span class='pre'>newFormat</span> : Object {Format}<div class='sub-desc'><p>the new format to use</p>\n</div></li></ul></div></div></div><div id='method-setFormats' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-setFormats' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-setFormats' class='name expandable'>setFormats</a>( <span class='pre'>newFormats</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the formats to use for the format elements in the\n previously set pattern string. ...</div><div class='long'><p>Sets the formats to use for the format elements in the\n previously set pattern string.\n The order of formats in <code>newFormats</code> corresponds to\n the order of format elements in the pattern string.\n <p>\n If more formats are provided than needed by the pattern string,\n the remaining ones are ignored. If fewer formats are provided\n than needed, then only the first <code>newFormats.length</code>\n formats are replaced.\n <p>\n Since the order of format elements in a pattern string often\n changes during localization, it is generally better to use the\n <a href=\"#!/api/java.text.MessageFormat-method-setFormatsByArgumentIndex\" rel=\"java.text.MessageFormat-method-setFormatsByArgumentIndex\" class=\"docClass\">setFormatsByArgumentIndex</a>\n method, which assumes an order of formats corresponding to the\n order of elements in the <code>arguments</code> array passed to\n the <code>format</code> methods or the result array returned by\n the <code>parse</code> methods.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newFormats</span> : Object {java.text.Format[]}<div class='sub-desc'><p>the new formats to use\n@exception NullPointerException if <code>newFormats</code> is null</p>\n</div></li></ul></div></div></div><div id='method-setFormatsByArgumentIndex' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-setFormatsByArgumentIndex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-setFormatsByArgumentIndex' class='name expandable'>setFormatsByArgumentIndex</a>( <span class='pre'>newFormats</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the formats to use for the values passed into\n format methods or returned from parse\n methods. ...</div><div class='long'><p>Sets the formats to use for the values passed into\n <code>format</code> methods or returned from <code>parse</code>\n methods. The indices of elements in <code>newFormats</code>\n correspond to the argument indices used in the previously set\n pattern string.\n The order of formats in <code>newFormats</code> thus corresponds to\n the order of elements in the <code>arguments</code> array passed\n to the <code>format</code> methods or the result array returned\n by the <code>parse</code> methods.\n <p>\n If an argument index is used for more than one format element\n in the pattern string, then the corresponding new format is used\n for all such format elements. If an argument index is not used\n for any format element in the pattern string, then the\n corresponding new format is ignored. If fewer formats are provided\n than needed, then only the formats for argument indices less\n than <code>newFormats.length</code> are replaced.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newFormats</span> : Object {java.text.Format[]}<div class='sub-desc'><p>the new formats to use\n@exception NullPointerException if <code>newFormats</code> is null</p>\n</div></li></ul></div></div></div><div id='method-setLocale' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-setLocale' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-setLocale' class='name expandable'>setLocale</a>( <span class='pre'>locale</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the locale to be used when creating or comparing subformats. ...</div><div class='long'><p>Sets the locale to be used when creating or comparing subformats.\n This affects subsequent calls\n <ul>\n <li>to the <a href=\"#!/api/java.text.MessageFormat-method-applyPattern\" rel=\"java.text.MessageFormat-method-applyPattern\" class=\"docClass\">applyPattern</a>\n     and <a href=\"#!/api/java.text.MessageFormat-method-toPattern\" rel=\"java.text.MessageFormat-method-toPattern\" class=\"docClass\">toPattern</a> methods if format elements specify\n     a format type and therefore have the subformats created in the\n     <code>applyPattern</code> method, as well as\n <li>to the <code>format</code> and\n     <a href=\"#!/api/java.text.MessageFormat-method-formatToCharacterIterator\" rel=\"java.text.MessageFormat-method-formatToCharacterIterator\" class=\"docClass\">formatToCharacterIterator</a> methods\n     if format elements do not specify a format type and therefore have\n     the subformats created in the formatting methods.\n </li></li></ul>\n Subformats that have already been created are not affected.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>locale</span> : Object {Locale}<div class='sub-desc'><p>the locale to be used when creating or comparing subformats</p>\n</div></li></ul></div></div></div><div id='method-toPattern' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.MessageFormat'>java.text.MessageFormat</span><br/><a href='source/MessageFormat.html#java-text-MessageFormat-method-toPattern' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.MessageFormat-method-toPattern' class='name expandable'>toPattern</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a pattern representing the current state of the message format. ...</div><div class='long'><p>Returns a pattern representing the current state of the message format.\n The string is constructed from internal information and therefore\n does not necessarily equal the previously applied pattern.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a pattern representing the current state of the message format</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});