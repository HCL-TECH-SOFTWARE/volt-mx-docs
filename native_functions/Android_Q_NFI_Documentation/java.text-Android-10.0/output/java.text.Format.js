Ext.data.JsonP.java_text_Format({"tagname":"class","name":"java.text.Format","autodetected":{},"files":[{"filename":"Format.js","href":"Format.html#java-text-Format"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Mark Davis","email":null}],"members":[{"name":"clone","tagname":"method","owner":"java.text.Format","id":"method-clone","meta":{}},{"name":"format","tagname":"method","owner":"java.text.Format","id":"method-format","meta":{}},{"name":"formatToCharacterIterator","tagname":"method","owner":"java.text.Format","id":"method-formatToCharacterIterator","meta":{}},{"name":"parseObject","tagname":"method","owner":"java.text.Format","id":"method-parseObject","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.text.Format","short_doc":"implements java.io.Serializable\n\n implements java.lang.Cloneable\n\nFormat is an abstract base class for formatting loc...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.text.DateFormat","java.text.MessageFormat","java.text.NumberFormat"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.text.Format</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.text.DateFormat' rel='java.text.DateFormat' class='docClass'>java.text.DateFormat</a></div><div class='dependency'><a href='#!/api/java.text.MessageFormat' rel='java.text.MessageFormat' class='docClass'>java.text.MessageFormat</a></div><div class='dependency'><a href='#!/api/java.text.NumberFormat' rel='java.text.NumberFormat' class='docClass'>java.text.NumberFormat</a></div><h4>Files</h4><div class='dependency'><a href='source/Format.html#java-text-Format' target='_blank'>Format.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p> implements java.lang.Cloneable</p>\n\n<p><code>Format</code> is an abstract base class for formatting locale-sensitive\n information such as dates, messages, and numbers.</p>\n\n<p> <p>\n <code>Format</code> defines the programming interface for formatting\n locale-sensitive objects into <code>String</code>s (the\n <code>format</code> method) and for parsing <code>String</code>s back\n into objects (the <code>parseObject</code> method).</p>\n\n<p> <p>\n Generally, a format's <code>parseObject</code> method must be able to parse\n any string formatted by its <code>format</code> method. However, there may\n be exceptional cases where this is not possible. For example, a\n <code>format</code> method might create two adjacent integer numbers with\n no separator in between, and in this case the <code>parseObject</code> could\n not tell which digits belong to which number.</p>\n\n<p> <h3>Subclassing</h3></p>\n\n<p> <p>\n The Java Platform provides three specialized subclasses of <code>Format</code>--\n <code>DateFormat</code>, <code>MessageFormat</code>, and\n <code>NumberFormat</code>--for formatting dates, messages, and numbers,\n respectively.\n <p>\n Concrete subclasses must implement three methods:\n <ol>\n <li> <code>format(Object obj, StringBuffer toAppendTo, FieldPosition pos)</code>\n <li> <code>formatToCharacterIterator(Object obj)</code>\n <li> <code>parseObject(String source, ParsePosition pos)</code>\n </li></li></li></ol>\n These general methods allow polymorphic parsing and formatting of objects\n and are used, for example, by <code>MessageFormat</code>.\n Subclasses often also provide additional <code>format</code> methods for\n specific input types as well as <code>parse</code> methods for specific\n result types. Any <code>parse</code> method that does not take a\n <code>ParsePosition</code> argument should throw <code>ParseException</code>\n when no text in the required format is at the beginning of the input text.</p>\n\n<p> <p>\n Most subclasses will also implement the following factory methods:\n <ol>\n <li>\n <code>getInstance</code> for getting a useful format object appropriate\n for the current locale\n <li>\n <code>getInstance(Locale)</code> for getting a useful format\n object appropriate for the specified locale\n </li></li></ol>\n In addition, some subclasses may also implement other\n <code>getXxxxInstance</code> methods for more specialized control. For\n example, the <code>NumberFormat</code> class provides\n <code>getPercentInstance</code> and <code>getCurrencyInstance</code>\n methods for getting specialized number formatters.</p>\n\n<p> <p>\n Subclasses of <code>Format</code> that allow programmers to create objects\n for locales (with <code>getInstance(Locale)</code> for example)\n must also implement the following class method:\n <blockquote></blockquote></p>\n\n<pre> public static Locale[] getAvailableLocales()\n </pre>\n\n\n<p> </p>\n\n<p> <p>\n And finally subclasses may define a set of constants to identify the various\n fields in the formatted output. These constants are used to create a FieldPosition\n object which identifies what information is contained in the field and its\n position in the formatted result. These constants should be named\n <code><em>item</em>_FIELD</code> where <code><em>item</em></code> identifies\n the field. For examples of these constants, see <code>ERA_FIELD</code> and its\n friends in <a href=\"#!/api/java.text.DateFormat\" rel=\"java.text.DateFormat\" class=\"docClass\">java.text.DateFormat</a>.</p>\n\n<p> <h4><a name=\"synchronization\">Synchronization</a></h4></p>\n\n<p> <p>\n Formats are generally not synchronized.\n It is recommended to create separate format instances for each thread.\n If multiple threads access a format concurrently, it must be synchronized\n externally.</p>\n\n<p> @see          <a href=\"#!/api/java.text.ParsePosition\" rel=\"java.text.ParsePosition\" class=\"docClass\">java.text.ParsePosition</a>\n @see          <a href=\"#!/api/java.text.FieldPosition\" rel=\"java.text.FieldPosition\" class=\"docClass\">java.text.FieldPosition</a>\n @see          <a href=\"#!/api/java.text.NumberFormat\" rel=\"java.text.NumberFormat\" class=\"docClass\">java.text.NumberFormat</a>\n @see          <a href=\"#!/api/java.text.DateFormat\" rel=\"java.text.DateFormat\" class=\"docClass\">java.text.DateFormat</a>\n @see          <a href=\"#!/api/java.text.MessageFormat\" rel=\"java.text.MessageFormat\" class=\"docClass\">java.text.MessageFormat</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-clone' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.Format'>java.text.Format</span><br/><a href='source/Format.html#java-text-Format-method-clone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.Format-method-clone' class='name expandable'>clone</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates and returns a copy of this object. ...</div><div class='long'><p>Creates and returns a copy of this object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>a clone of this instance.</p>\n</div></li></ul></div></div></div><div id='method-format' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.Format'>java.text.Format</span><br/><a href='source/Format.html#java-text-Format-method-format' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.Format-method-format' class='name expandable'>format</a>( <span class='pre'>obj, toAppendTo, pos</span> ) : Object {java.lang.StringBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Formats an object and appends the resulting text to a given string\n buffer. ...</div><div class='long'><p>Formats an object and appends the resulting text to a given string\n buffer.\n If the <code>pos</code> argument identifies a field used by the format,\n then its indices are set to the beginning and end of the first such\n field encountered.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>The object to format</p>\n</div></li><li><span class='pre'>toAppendTo</span> : Object {StringBuffer}<div class='sub-desc'><p>where the text is to be appended</p>\n</div></li><li><span class='pre'>pos</span> : Object {FieldPosition}<div class='sub-desc'><p>A <code>FieldPosition</code> identifying a field\n               in the formatted text</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.StringBuffer}</span><div class='sub-desc'><p>the string buffer passed in as <code>toAppendTo</code>,\n               with formatted text appended\n@exception NullPointerException if <code>toAppendTo</code> or\n            <code>pos</code> is null\n@exception IllegalArgumentException if the Format cannot format the given\n            object</p>\n</div></li></ul></div></div></div><div id='method-formatToCharacterIterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.Format'>java.text.Format</span><br/><a href='source/Format.html#java-text-Format-method-formatToCharacterIterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.Format-method-formatToCharacterIterator' class='name expandable'>formatToCharacterIterator</a>( <span class='pre'>obj, obj</span> ) : Object {java.text.AttributedCharacterIterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Formats an Object producing an AttributedCharacterIterator. ...</div><div class='long'><p>Formats an Object producing an <code>AttributedCharacterIterator</code>.\n You can use the returned <code>AttributedCharacterIterator</code>\n to build the resulting String, as well as to determine information\n about the resulting String.\n <p>\n Each attribute key of the AttributedCharacterIterator will be of type\n <code>Field</code>. It is up to each <code>Format</code> implementation\n to define what the legal values are for each attribute in the\n <code>AttributedCharacterIterator</code>, but typically the attribute\n key is also used as the attribute value.\n <p>The default implementation creates an\n <code>AttributedCharacterIterator</code> with no attributes. Subclasses\n that support fields should override this and create an\n <code>AttributedCharacterIterator</code> with meaningful attributes.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>The object to format\n@exception IllegalArgumentException when the Format cannot format the\n            given object.</p>\n</div></li><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>The object to format</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.text.AttributedCharacterIterator}</span><div class='sub-desc'><p>AttributedCharacterIterator describing the formatted value.</p>\n</div></li></ul></div></div></div><div id='method-parseObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.text.Format'>java.text.Format</span><br/><a href='source/Format.html#java-text-Format-method-parseObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.text.Format-method-parseObject' class='name expandable'>parseObject</a>( <span class='pre'>source</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Parses text from the beginning of the given string to produce an object. ...</div><div class='long'><p>Parses text from the beginning of the given string to produce an object.\n The method may not use the entire text of the given string.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : String<div class='sub-desc'><p>A <code>String</code> whose beginning should be parsed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>An <code>Object</code> parsed from the string.\n@exception ParseException if the beginning of the specified string\n            cannot be parsed.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});