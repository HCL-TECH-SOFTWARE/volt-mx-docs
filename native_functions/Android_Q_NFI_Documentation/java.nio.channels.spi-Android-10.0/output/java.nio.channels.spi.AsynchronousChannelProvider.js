Ext.data.JsonP.java_nio_channels_spi_AsynchronousChannelProvider({"tagname":"class","name":"java.nio.channels.spi.AsynchronousChannelProvider","autodetected":{},"files":[{"filename":"AsynchronousChannelProvider.js","href":"AsynchronousChannelProvider.html#java-nio-channels-spi-AsynchronousChannelProvider"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"openAsynchronousChannelGroup","tagname":"method","owner":"java.nio.channels.spi.AsynchronousChannelProvider","id":"method-openAsynchronousChannelGroup","meta":{}},{"name":"openAsynchronousServerSocketChannel","tagname":"method","owner":"java.nio.channels.spi.AsynchronousChannelProvider","id":"method-openAsynchronousServerSocketChannel","meta":{}},{"name":"openAsynchronousSocketChannel","tagname":"method","owner":"java.nio.channels.spi.AsynchronousChannelProvider","id":"method-openAsynchronousSocketChannel","meta":{}},{"name":"provider","tagname":"method","owner":"java.nio.channels.spi.AsynchronousChannelProvider","id":"method-provider","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.spi.AsynchronousChannelProvider","short_doc":"Service-provider class for asynchronous channels. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.channels.spi.AsynchronousChannelProvider</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AsynchronousChannelProvider.html#java-nio-channels-spi-AsynchronousChannelProvider' target='_blank'>AsynchronousChannelProvider.js</a></div></pre><div class='doc-contents'><p>Service-provider class for asynchronous channels.</p>\n\n<p> <p> An asynchronous channel provider is a concrete subclass of this class that\n has a zero-argument constructor and implements the abstract methods specified\n below.  A given invocation of the Java virtual machine maintains a single\n system-wide default provider instance, which is returned by the provider method.  The first invocation of that method will locate\n the default provider as specified below.</p>\n\n<p> <p> All of the methods in this class are safe for use by multiple concurrent\n threads.  </p></p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-openAsynchronousChannelGroup' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.AsynchronousChannelProvider'>java.nio.channels.spi.AsynchronousChannelProvider</span><br/><a href='source/AsynchronousChannelProvider.html#java-nio-channels-spi-AsynchronousChannelProvider-method-openAsynchronousChannelGroup' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.AsynchronousChannelProvider-method-openAsynchronousChannelGroup' class='name expandable'>openAsynchronousChannelGroup</a>( <span class='pre'>executor, initialSize</span> ) : Object {java.nio.channels.AsynchronousChannelGroup}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a new asynchronous channel group with the given thread pool. ...</div><div class='long'><p>Constructs a new asynchronous channel group with the given thread pool.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {ExecutorService}<div class='sub-desc'><p>The thread pool</p>\n</div></li><li><span class='pre'>initialSize</span> : Number<div class='sub-desc'><p>A value {@code >=0} or a negative value for implementation\n          specific default</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousChannelGroup}</span><div class='sub-desc'><p>A new asynchronous channel group</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs\n@see AsynchronousChannelGroup#withCachedThreadPool</p>\n</div></li></ul></div></div></div><div id='method-openAsynchronousServerSocketChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.AsynchronousChannelProvider'>java.nio.channels.spi.AsynchronousChannelProvider</span><br/><a href='source/AsynchronousChannelProvider.html#java-nio-channels-spi-AsynchronousChannelProvider-method-openAsynchronousServerSocketChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.AsynchronousChannelProvider-method-openAsynchronousServerSocketChannel' class='name expandable'>openAsynchronousServerSocketChannel</a>( <span class='pre'>group</span> ) : Object {java.nio.channels.AsynchronousServerSocketChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens an asynchronous server-socket channel. ...</div><div class='long'><p>Opens an asynchronous server-socket channel.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>group</span> : Object {AsynchronousChannelGroup}<div class='sub-desc'><p>The group to which the channel is bound, or {@code null} to\n          bind to the default group</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousServerSocketChannel}</span><div class='sub-desc'><p>The new channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalChannelGroupException\n          If the provider that created the group differs from this provider</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ShutdownChannelGroupException\n          The group is shutdown</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-openAsynchronousSocketChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.AsynchronousChannelProvider'>java.nio.channels.spi.AsynchronousChannelProvider</span><br/><a href='source/AsynchronousChannelProvider.html#java-nio-channels-spi-AsynchronousChannelProvider-method-openAsynchronousSocketChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.AsynchronousChannelProvider-method-openAsynchronousSocketChannel' class='name expandable'>openAsynchronousSocketChannel</a>( <span class='pre'>group</span> ) : Object {java.nio.channels.AsynchronousSocketChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens an asynchronous socket channel. ...</div><div class='long'><p>Opens an asynchronous socket channel.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>group</span> : Object {AsynchronousChannelGroup}<div class='sub-desc'><p>The group to which the channel is bound, or {@code null} to\n          bind to the default group</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousSocketChannel}</span><div class='sub-desc'><p>The new channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalChannelGroupException\n          If the provider that created the group differs from this provider</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ShutdownChannelGroupException\n          The group is shutdown</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-provider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.AsynchronousChannelProvider'>java.nio.channels.spi.AsynchronousChannelProvider</span><br/><a href='source/AsynchronousChannelProvider.html#java-nio-channels-spi-AsynchronousChannelProvider-method-provider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.AsynchronousChannelProvider-method-provider' class='name expandable'>provider</a>( <span class='pre'></span> ) : Object {java.nio.channels.spi.AsynchronousChannelProvider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the system-wide default asynchronous channel provider for this\n invocation of the Java virtual machine. ...</div><div class='long'><p>Returns the system-wide default asynchronous channel provider for this\n invocation of the Java virtual machine.</p>\n\n<p> <p> The first invocation of this method locates the default provider\n object as follows: </p></p>\n\n<p> <ol></ol></p>\n\n<p>   <li><p> If the system property\n   <tt><a href=\"#!/api/java.nio.channels.spi.AsynchronousChannelProvider\" rel=\"java.nio.channels.spi.AsynchronousChannelProvider\" class=\"docClass\">java.nio.channels.spi.AsynchronousChannelProvider</a></tt> is defined\n   then it is taken to be the fully-qualified name of a concrete provider class.\n   The class is loaded and instantiated; if this process fails then an\n   unspecified error is thrown.  </p></li></p>\n\n<p>   <li><p> If a provider class has been installed in a jar file that is\n   visible to the system class loader, and that jar file contains a\n   provider-configuration file named\n   <tt><a href=\"#!/api/java.nio.channels.spi.AsynchronousChannelProvider\" rel=\"java.nio.channels.spi.AsynchronousChannelProvider\" class=\"docClass\">java.nio.channels.spi.AsynchronousChannelProvider</a></tt> in the resource\n   directory <tt>META-INF/services</tt>, then the first class name\n   specified in that file is taken.  The class is loaded and\n   instantiated; if this process fails then an unspecified error is\n   thrown.  </p></li></p>\n\n<p>   <li><p> Finally, if no provider has been specified by any of the above\n   means then the system-default provider class is instantiated and the\n   result is returned.  </p></li></p>\n\n<p> </p>\n\n<p> <p> Subsequent invocations of this method return the provider that was\n returned by the first invocation.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.spi.AsynchronousChannelProvider}</span><div class='sub-desc'><p>The system-wide default AsynchronousChannel provider</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});