Ext.data.JsonP.java_nio_channels_spi_SelectorProvider({"tagname":"class","name":"java.nio.channels.spi.SelectorProvider","autodetected":{},"files":[{"filename":"SelectorProvider.js","href":"SelectorProvider.html#java-nio-channels-spi-SelectorProvider"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"inheritedChannel","tagname":"method","owner":"java.nio.channels.spi.SelectorProvider","id":"method-inheritedChannel","meta":{}},{"name":"openDatagramChannel","tagname":"method","owner":"java.nio.channels.spi.SelectorProvider","id":"method-openDatagramChannel","meta":{}},{"name":"openPipe","tagname":"method","owner":"java.nio.channels.spi.SelectorProvider","id":"method-openPipe","meta":{}},{"name":"openSelector","tagname":"method","owner":"java.nio.channels.spi.SelectorProvider","id":"method-openSelector","meta":{}},{"name":"openServerSocketChannel","tagname":"method","owner":"java.nio.channels.spi.SelectorProvider","id":"method-openServerSocketChannel","meta":{}},{"name":"openSocketChannel","tagname":"method","owner":"java.nio.channels.spi.SelectorProvider","id":"method-openSocketChannel","meta":{}},{"name":"provider","tagname":"method","owner":"java.nio.channels.spi.SelectorProvider","id":"method-provider","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.spi.SelectorProvider","short_doc":"Service-provider class for selectors and selectable channels. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.channels.spi.SelectorProvider</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/SelectorProvider.html#java-nio-channels-spi-SelectorProvider' target='_blank'>SelectorProvider.js</a></div></pre><div class='doc-contents'><p>Service-provider class for selectors and selectable channels.</p>\n\n<p> <p> A selector provider is a concrete subclass of this class that has a\n zero-argument constructor and implements the abstract methods specified\n below.  A given invocation of the Java virtual machine maintains a single\n system-wide default provider instance, which is returned by the provider method.  The first invocation of that method will locate\n the default provider as specified below.</p>\n\n<p> <p> The system-wide default provider is used by the static <tt>open</tt>\n methods of the DatagramChannel, Pipe, Selector, ServerSocketChannel, and SocketChannel classes.  It is also\n used by the System.inheritedChannel()\n method. A program may make use of a provider other than the default provider\n by instantiating that provider and then directly invoking the <tt>open</tt>\n methods defined in this class.</p>\n\n<p> <p> All of the methods in this class are safe for use by multiple concurrent\n threads.  </p></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-inheritedChannel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.SelectorProvider'>java.nio.channels.spi.SelectorProvider</span><br/><a href='source/SelectorProvider.html#java-nio-channels-spi-SelectorProvider-method-inheritedChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.SelectorProvider-method-inheritedChannel' class='name expandable'>inheritedChannel</a>( <span class='pre'></span> ) : Object {java.nio.channels.Channel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the channel inherited from the entity that created this\n Java virtual machine. ...</div><div class='long'><p>Returns the channel inherited from the entity that created this\n Java virtual machine.</p>\n\n<p> <p> On many operating systems a process, such as a Java virtual\n machine, can be started in a manner that allows the process to\n inherit a channel from the entity that created the process. The\n manner in which this is done is system dependent, as are the\n possible entities to which the channel may be connected. For example,\n on UNIX systems, the Internet services daemon (<i>inetd</i>) is used to\n start programs to service requests when a request arrives on an\n associated network port. In this example, the process that is started,\n inherits a channel representing a network socket.</p>\n\n<p> <p> In cases where the inherited channel represents a network socket\n then the Channel type returned\n by this method is determined as follows:</p>\n\n<p> <ul></ul></p>\n\n<p>  <li><p> If the inherited channel represents a stream-oriented connected\n  socket then a SocketChannel is\n  returned. The socket channel is, at least initially, in blocking\n  mode, bound to a socket address, and connected to a peer.\n  </p></li></p>\n\n<p>  <li><p> If the inherited channel represents a stream-oriented listening\n  socket then a ServerSocketChannel is returned. The server-socket channel is, at\n  least initially, in blocking mode, and bound to a socket address.\n  </p></li></p>\n\n<p>  <li><p> If the inherited channel is a datagram-oriented socket\n  then a DatagramChannel is\n  returned. The datagram channel is, at least initially, in blocking\n  mode, and bound to a socket address.\n  </p></li></p>\n\n<p> </p>\n\n<p> <p> In addition to the network-oriented channels described, this method\n may return other kinds of channels in the future.</p>\n\n<p> <p> The first invocation of this method creates the channel that is\n returned. Subsequent invocations of this method return the same\n channel. </p></p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.Channel}</span><div class='sub-desc'><p>The inherited channel, if any, otherwise <tt>null</tt>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager has been installed and it denies\n          RuntimePermission<tt>(\"inheritedChannel\")</tt></p>\n</div></li></ul></div></div></div><div id='method-openDatagramChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.SelectorProvider'>java.nio.channels.spi.SelectorProvider</span><br/><a href='source/SelectorProvider.html#java-nio-channels-spi-SelectorProvider-method-openDatagramChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.SelectorProvider-method-openDatagramChannel' class='name expandable'>openDatagramChannel</a>( <span class='pre'>family</span> ) : Object {java.nio.channels.DatagramChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a datagram channel. ...</div><div class='long'><p>Opens a datagram channel.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>family</span> : Object {ProtocolFamily}<div class='sub-desc'><p>The protocol family</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.DatagramChannel}</span><div class='sub-desc'><p>A new datagram channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If the specified protocol family is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-openPipe' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.SelectorProvider'>java.nio.channels.spi.SelectorProvider</span><br/><a href='source/SelectorProvider.html#java-nio-channels-spi-SelectorProvider-method-openPipe' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.SelectorProvider-method-openPipe' class='name expandable'>openPipe</a>( <span class='pre'></span> ) : Object {java.nio.channels.Pipe}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a pipe. ...</div><div class='long'><p>Opens a pipe.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.Pipe}</span><div class='sub-desc'><p>The new pipe</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-openSelector' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.SelectorProvider'>java.nio.channels.spi.SelectorProvider</span><br/><a href='source/SelectorProvider.html#java-nio-channels-spi-SelectorProvider-method-openSelector' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.SelectorProvider-method-openSelector' class='name expandable'>openSelector</a>( <span class='pre'></span> ) : Object {java.nio.channels.spi.AbstractSelector}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a selector. ...</div><div class='long'><p>Opens a selector.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.spi.AbstractSelector}</span><div class='sub-desc'><p>The new selector</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-openServerSocketChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.SelectorProvider'>java.nio.channels.spi.SelectorProvider</span><br/><a href='source/SelectorProvider.html#java-nio-channels-spi-SelectorProvider-method-openServerSocketChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.SelectorProvider-method-openServerSocketChannel' class='name expandable'>openServerSocketChannel</a>( <span class='pre'></span> ) : Object {java.nio.channels.ServerSocketChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a server-socket channel. ...</div><div class='long'><p>Opens a server-socket channel.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.ServerSocketChannel}</span><div class='sub-desc'><p>The new channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-openSocketChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.SelectorProvider'>java.nio.channels.spi.SelectorProvider</span><br/><a href='source/SelectorProvider.html#java-nio-channels-spi-SelectorProvider-method-openSocketChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.SelectorProvider-method-openSocketChannel' class='name expandable'>openSocketChannel</a>( <span class='pre'></span> ) : Object {java.nio.channels.SocketChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a socket channel. ...</div><div class='long'><p>Opens a socket channel.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.SocketChannel}</span><div class='sub-desc'><p>The new channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-provider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.SelectorProvider'>java.nio.channels.spi.SelectorProvider</span><br/><a href='source/SelectorProvider.html#java-nio-channels-spi-SelectorProvider-method-provider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.SelectorProvider-method-provider' class='name expandable'>provider</a>( <span class='pre'></span> ) : Object {java.nio.channels.spi.SelectorProvider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the system-wide default selector provider for this invocation of\n the Java virtual machine. ...</div><div class='long'><p>Returns the system-wide default selector provider for this invocation of\n the Java virtual machine.</p>\n\n<p> <p> The first invocation of this method locates the default provider\n object as follows: </p></p>\n\n<p> <ol></ol></p>\n\n<p>   <li><p> If the system property\n   <tt><a href=\"#!/api/java.nio.channels.spi.SelectorProvider\" rel=\"java.nio.channels.spi.SelectorProvider\" class=\"docClass\">java.nio.channels.spi.SelectorProvider</a></tt> is defined then it is\n   taken to be the fully-qualified name of a concrete provider class.\n   The class is loaded and instantiated; if this process fails then an\n   unspecified error is thrown.  </p></li></p>\n\n<p>   <li><p> If a provider class has been installed in a jar file that is\n   visible to the system class loader, and that jar file contains a\n   provider-configuration file named\n   <tt><a href=\"#!/api/java.nio.channels.spi.SelectorProvider\" rel=\"java.nio.channels.spi.SelectorProvider\" class=\"docClass\">java.nio.channels.spi.SelectorProvider</a></tt> in the resource\n   directory <tt>META-INF/services</tt>, then the first class name\n   specified in that file is taken.  The class is loaded and\n   instantiated; if this process fails then an unspecified error is\n   thrown.  </p></li></p>\n\n<p>   <li><p> Finally, if no provider has been specified by any of the above\n   means then the system-default provider class is instantiated and the\n   result is returned.  </p></li></p>\n\n<p> </p>\n\n<p> <p> Subsequent invocations of this method return the provider that was\n returned by the first invocation.  </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.spi.SelectorProvider}</span><div class='sub-desc'><p>The system-wide default selector provider</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});