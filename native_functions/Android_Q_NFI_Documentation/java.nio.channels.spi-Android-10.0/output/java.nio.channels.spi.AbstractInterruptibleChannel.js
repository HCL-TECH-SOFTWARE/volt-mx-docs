Ext.data.JsonP.java_nio_channels_spi_AbstractInterruptibleChannel({"tagname":"class","name":"java.nio.channels.spi.AbstractInterruptibleChannel","autodetected":{},"files":[{"filename":"AbstractInterruptibleChannel.js","href":"AbstractInterruptibleChannel.html#java-nio-channels-spi-AbstractInterruptibleChannel"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Mark Reinhold","email":null},{"tagname":"author","name":"JSR-51 Expert Group","email":null}],"since":"1.4","members":[{"name":"close","tagname":"method","owner":"java.nio.channels.spi.AbstractInterruptibleChannel","id":"method-close","meta":{}},{"name":"isOpen","tagname":"method","owner":"java.nio.channels.spi.AbstractInterruptibleChannel","id":"method-isOpen","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.channels.spi.AbstractInterruptibleChannel","short_doc":"implements java.nio.channels.Channel\n\n implements java.nio.channels.InterruptibleChannel\n\nBase implementation class f...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.channels.spi.AbstractInterruptibleChannel</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AbstractInterruptibleChannel.html#java-nio-channels-spi-AbstractInterruptibleChannel' target='_blank'>AbstractInterruptibleChannel.js</a></div></pre><div class='doc-contents'><p>implements java.nio.channels.Channel</p>\n\n<p> implements java.nio.channels.InterruptibleChannel</p>\n\n<p>Base implementation class for interruptible channels.</p>\n\n<p> <p> This class encapsulates the low-level machinery required to implement\n the asynchronous closing and interruption of channels.  A concrete channel\n class must invoke the begin and end methods\n before and after, respectively, invoking an I/O operation that might block\n indefinitely.  In order to ensure that the end method is always\n invoked, these methods should be used within a\n <tt>try</tt>&nbsp;...&nbsp;<tt>finally</tt> block:</p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> boolean completed = false;\n try {\n     begin();\n     completed = ...;    // Perform blocking I/O operation\n     return ...;         // Return result\n } finally {\n     end(completed);\n }</pre>\n\n\n<p></p>\n\n<p> <p> The <tt>completed</tt> argument to the end method tells\n whether or not the I/O operation actually completed, that is, whether it had\n any effect that would be visible to the invoker.  In the case of an\n operation that reads bytes, for example, this argument should be\n <tt>true</tt> if, and only if, some bytes were actually transferred into the\n invoker's target buffer.</p>\n\n<p> <p> A concrete channel class must also implement the implCloseChannel method in such a way that if it is\n invoked while another thread is blocked in a native I/O operation upon the\n channel then that operation will immediately return, either by throwing an\n exception or by returning normally.  If a thread is interrupted or the\n channel upon which it is blocked is asynchronously closed then the channel's\n end method will throw the appropriate exception.</p>\n\n<p> <p> This class performs the synchronization required to implement the java.nio.channels.Channel specification.  Implementations of the implCloseChannel method need not synchronize against\n other threads that might be attempting to close the channel.  </p></p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.AbstractInterruptibleChannel'>java.nio.channels.spi.AbstractInterruptibleChannel</span><br/><a href='source/AbstractInterruptibleChannel.html#java-nio-channels-spi-AbstractInterruptibleChannel-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.AbstractInterruptibleChannel-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this channel. ...</div><div class='long'><p>Closes this channel.</p>\n\n<p> <p> If the channel has already been closed then this method returns\n immediately.  Otherwise it marks the channel as closed and then invokes\n the implCloseChannel method in order to\n complete the close operation.  </p></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-isOpen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.channels.spi.AbstractInterruptibleChannel'>java.nio.channels.spi.AbstractInterruptibleChannel</span><br/><a href='source/AbstractInterruptibleChannel.html#java-nio-channels-spi-AbstractInterruptibleChannel-method-isOpen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.channels.spi.AbstractInterruptibleChannel-method-isOpen' class='name expandable'>isOpen</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});