Ext.data.JsonP.java_math_BigInteger({"tagname":"class","name":"java.math.BigInteger","autodetected":{},"files":[{"filename":"BigInteger.js","href":"BigInteger.html#java-math-BigInteger"}],"extends":"java.lang.Number","members":[{"name":"ONE","tagname":"property","owner":"java.math.BigInteger","id":"property-ONE","meta":{}},{"name":"TEN","tagname":"property","owner":"java.math.BigInteger","id":"property-TEN","meta":{}},{"name":"ZERO","tagname":"property","owner":"java.math.BigInteger","id":"property-ZERO","meta":{}},{"name":"abs","tagname":"method","owner":"java.math.BigInteger","id":"method-abs","meta":{}},{"name":"add","tagname":"method","owner":"java.math.BigInteger","id":"method-add","meta":{}},{"name":"and","tagname":"method","owner":"java.math.BigInteger","id":"method-and","meta":{}},{"name":"andNot","tagname":"method","owner":"java.math.BigInteger","id":"method-andNot","meta":{}},{"name":"bitCount","tagname":"method","owner":"java.math.BigInteger","id":"method-bitCount","meta":{}},{"name":"bitLength","tagname":"method","owner":"java.math.BigInteger","id":"method-bitLength","meta":{}},{"name":"clearBit","tagname":"method","owner":"java.math.BigInteger","id":"method-clearBit","meta":{}},{"name":"compareTo","tagname":"method","owner":"java.math.BigInteger","id":"method-compareTo","meta":{}},{"name":"divide","tagname":"method","owner":"java.math.BigInteger","id":"method-divide","meta":{}},{"name":"divideAndRemainder","tagname":"method","owner":"java.math.BigInteger","id":"method-divideAndRemainder","meta":{}},{"name":"doubleValue","tagname":"method","owner":"java.math.BigInteger","id":"method-doubleValue","meta":{}},{"name":"equals","tagname":"method","owner":"java.math.BigInteger","id":"method-equals","meta":{}},{"name":"flipBit","tagname":"method","owner":"java.math.BigInteger","id":"method-flipBit","meta":{}},{"name":"floatValue","tagname":"method","owner":"java.math.BigInteger","id":"method-floatValue","meta":{}},{"name":"gcd","tagname":"method","owner":"java.math.BigInteger","id":"method-gcd","meta":{}},{"name":"getLowestSetBit","tagname":"method","owner":"java.math.BigInteger","id":"method-getLowestSetBit","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.math.BigInteger","id":"method-hashCode","meta":{}},{"name":"intValue","tagname":"method","owner":"java.math.BigInteger","id":"method-intValue","meta":{}},{"name":"isProbablePrime","tagname":"method","owner":"java.math.BigInteger","id":"method-isProbablePrime","meta":{}},{"name":"longValue","tagname":"method","owner":"java.math.BigInteger","id":"method-longValue","meta":{}},{"name":"max","tagname":"method","owner":"java.math.BigInteger","id":"method-max","meta":{}},{"name":"min","tagname":"method","owner":"java.math.BigInteger","id":"method-min","meta":{}},{"name":"mod","tagname":"method","owner":"java.math.BigInteger","id":"method-mod","meta":{}},{"name":"modInverse","tagname":"method","owner":"java.math.BigInteger","id":"method-modInverse","meta":{}},{"name":"modPow","tagname":"method","owner":"java.math.BigInteger","id":"method-modPow","meta":{}},{"name":"multiply","tagname":"method","owner":"java.math.BigInteger","id":"method-multiply","meta":{}},{"name":"negate","tagname":"method","owner":"java.math.BigInteger","id":"method-negate","meta":{}},{"name":"nextProbablePrime","tagname":"method","owner":"java.math.BigInteger","id":"method-nextProbablePrime","meta":{}},{"name":"not","tagname":"method","owner":"java.math.BigInteger","id":"method-not","meta":{}},{"name":"or","tagname":"method","owner":"java.math.BigInteger","id":"method-or","meta":{}},{"name":"pow","tagname":"method","owner":"java.math.BigInteger","id":"method-pow","meta":{}},{"name":"probablePrime","tagname":"method","owner":"java.math.BigInteger","id":"method-probablePrime","meta":{}},{"name":"remainder","tagname":"method","owner":"java.math.BigInteger","id":"method-remainder","meta":{}},{"name":"setBit","tagname":"method","owner":"java.math.BigInteger","id":"method-setBit","meta":{}},{"name":"shiftLeft","tagname":"method","owner":"java.math.BigInteger","id":"method-shiftLeft","meta":{}},{"name":"shiftRight","tagname":"method","owner":"java.math.BigInteger","id":"method-shiftRight","meta":{}},{"name":"signum","tagname":"method","owner":"java.math.BigInteger","id":"method-signum","meta":{}},{"name":"subtract","tagname":"method","owner":"java.math.BigInteger","id":"method-subtract","meta":{}},{"name":"testBit","tagname":"method","owner":"java.math.BigInteger","id":"method-testBit","meta":{}},{"name":"toByteArray","tagname":"method","owner":"java.math.BigInteger","id":"method-toByteArray","meta":{}},{"name":"toString","tagname":"method","owner":"java.math.BigInteger","id":"method-toString","meta":{}},{"name":"valueOf","tagname":"method","owner":"java.math.BigInteger","id":"method-valueOf","meta":{}},{"name":"xor","tagname":"method","owner":"java.math.BigInteger","id":"method-xor","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.math.BigInteger","short_doc":"implements java.lang.Comparable\n\n implements java.io.Serializable\n\nAn immutable arbitrary-precision signed integer. ...","classIcon":"icon-class","superclasses":["java.lang.Number"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Number<div class='subclass '><strong>java.math.BigInteger</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/BigInteger.html#java-math-BigInteger' target='_blank'>BigInteger.js</a></div></pre><div class='doc-contents'><p>implements java.lang.Comparable</p>\n\n<p> implements java.io.Serializable</p>\n\n<p>An immutable arbitrary-precision signed integer.</p>\n\n<p> <h3>Fast Cryptography</h3>\n This implementation is efficient for operations traditionally used in\n cryptography, such as the generation of large prime numbers and computation\n of the modular inverse.</p>\n\n<p> <h3>Slow Two's Complement Bitwise Operations</h3>\n This API includes operations for bitwise operations in two's complement\n representation. Two's complement is not the internal representation used by\n this implementation, so such methods may be inefficient. Use java.util.BitSet for high-performance bitwise operations on\n arbitrarily-large sequences of bits.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ONE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-property-ONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-property-ONE' class='name expandable'>ONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The {@code BigInteger} constant 1. ...</div><div class='long'><p>The {@code BigInteger} constant 1.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-TEN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-property-TEN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-property-TEN' class='name expandable'>TEN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The {@code BigInteger} constant 10. ...</div><div class='long'><p>The {@code BigInteger} constant 10.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-ZERO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-property-ZERO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-property-ZERO' class='name expandable'>ZERO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The {@code BigInteger} constant 0. ...</div><div class='long'><p>The {@code BigInteger} constant 0.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-abs' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-abs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-abs' class='name expandable'>abs</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is the absolute value of {@code\n this}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is the absolute value of {@code\n this}.</p>\n</div></div></div><div id='method-add' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-add' class='name expandable'>add</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this + value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this + value}.</p>\n</div></div></div><div id='method-and' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-and' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-and' class='name expandable'>and</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this &amp; value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this &amp; value}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended\n as the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {BigInteger}<div class='sub-desc'><p>value to be and'ed with {@code this}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}.</p>\n</div></li></ul></div></div></div><div id='method-andNot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-andNot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-andNot' class='name expandable'>andNot</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this &amp; ~value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this &amp; ~value}.\n Evaluating {@code x.andNot(value)} returns the same result as {@code\n x.and(value.not())}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended\n as the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {BigInteger}<div class='sub-desc'><p>value to be not'ed and then and'ed with {@code this}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}.</p>\n</div></li></ul></div></div></div><div id='method-bitCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-bitCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-bitCount' class='name expandable'>bitCount</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of bits in the two's complement representation of\n {@code this} which differ from the sign bit. ...</div><div class='long'><p>Returns the number of bits in the two's complement representation of\n {@code this} which differ from the sign bit. If {@code this} is negative,\n the result is equivalent to the number of bits set in the two's\n complement representation of {@code -this - 1}.</p>\n\n<p> <p>Use {@code bitLength(0)} to find the length of the binary value in\n bits.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n</div></div></div><div id='method-bitLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-bitLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-bitLength' class='name expandable'>bitLength</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the length of the value's two's complement representation without\n leading zeros for positive numbers / witho...</div><div class='long'><p>Returns the length of the value's two's complement representation without\n leading zeros for positive numbers / without leading ones for negative\n values.</p>\n\n<p> <p>The two's complement representation of {@code this} will be at least\n {@code bitLength() + 1} bits long.</p>\n\n<p> <p>The value will fit into an {@code int} if {@code bitLength() &lt; 32} or\n into a {@code long} if {@code bitLength() &lt; 64}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the length of the minimal two's complement representation for\n     {@code this} without the sign bit.</p>\n</div></li></ul></div></div></div><div id='method-clearBit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-clearBit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-clearBit' class='name expandable'>clearBit</a>( <span class='pre'>n</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} which has the same binary representation\n as {@code this} but with the bit at position n...</div><div class='long'><p>Returns a {@code BigInteger} which has the same binary representation\n as {@code this} but with the bit at position n cleared. The result is\n equivalent to {@code this &amp; ~pow(2, n)}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>position where the bit in {@code this} has to be cleared.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code n &lt; 0}.</p>\n</div></li></ul></div></div></div><div id='method-compareTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Compares this {@code BigInteger} with {@code value}. ...</div><div class='long'><p>Compares this {@code BigInteger} with {@code value}. Returns {@code -1}\n if {@code this &lt; value}, {@code 0} if {@code this == value} and {@code 1}\n if {@code this > value}, .</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {BigInteger}<div class='sub-desc'><p>value to be compared with {@code this}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}.</p>\n</div></li></ul></div></div></div><div id='method-divide' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-divide' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-divide' class='name expandable'>divide</a>( <span class='pre'>divisor</span> ) : Object {java.math.BigInteger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this / divisor}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this / divisor}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>divisor</span> : Object {BigInteger}<div class='sub-desc'><p>value by which {@code this} is divided.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigInteger}</span><div class='sub-desc'><p>{@code this / divisor}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code divisor == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code divisor == 0}.</p>\n</div></li></ul></div></div></div><div id='method-divideAndRemainder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-divideAndRemainder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-divideAndRemainder' class='name expandable'>divideAndRemainder</a>( <span class='pre'>divisor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a two element {@code BigInteger} array containing\n {@code this / divisor} at index 0 and {@code this % diviso...</div><div class='long'><p>Returns a two element {@code BigInteger} array containing\n {@code this / divisor} at index 0 and {@code this % divisor} at index 1.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>divisor</span> : Object {BigInteger}<div class='sub-desc'><p>value by which {@code this} is divided.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code divisor == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code divisor == 0}.\n@see <a href=\"#!/api/java.math.BigInteger-method-divide\" rel=\"java.math.BigInteger-method-divide\" class=\"docClass\">divide</a>\n@see <a href=\"#!/api/java.math.BigInteger-method-remainder\" rel=\"java.math.BigInteger-method-remainder\" class=\"docClass\">remainder</a></p>\n</div></li></ul></div></div></div><div id='method-doubleValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-doubleValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-doubleValue' class='name expandable'>doubleValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigInteger} as a double. ...</div><div class='long'><p>Returns this {@code BigInteger} as a double. If {@code this} is too big\n to be represented as a double, then {@code Double.POSITIVE_INFINITY} or\n {@code Double.NEGATIVE_INFINITY} is returned. Note that not all integers\n in the range {@code [-Double.MAX_VALUE, Double.MAX_VALUE]} can be exactly\n represented as a double.</p>\n</div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-equals' class='name expandable'>equals</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-flipBit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-flipBit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-flipBit' class='name expandable'>flipBit</a>( <span class='pre'>n</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} which has the same binary representation\n as {@code this} but with the bit at position n...</div><div class='long'><p>Returns a {@code BigInteger} which has the same binary representation\n as {@code this} but with the bit at position n flipped. The result is\n equivalent to {@code this ^ pow(2, n)}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>position where the bit in {@code this} has to be flipped.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code n &lt; 0}.</p>\n</div></li></ul></div></div></div><div id='method-floatValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-floatValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-floatValue' class='name expandable'>floatValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigInteger} as a float. ...</div><div class='long'><p>Returns this {@code BigInteger} as a float. If {@code this} is too big to\n be represented as a float, then {@code Float.POSITIVE_INFINITY} or\n {@code Float.NEGATIVE_INFINITY} is returned. Note that not all integers\n in the range {@code [-Float.MAX_VALUE, Float.MAX_VALUE]} can be exactly\n represented as a float.</p>\n</div></div></div><div id='method-gcd' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-gcd' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-gcd' class='name expandable'>gcd</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is greatest common divisor\n of {@code this} and {@code value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is greatest common divisor\n of {@code this} and {@code value}. If {@code this == 0} and {@code\n value == 0} then zero is returned, otherwise the result is positive.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {BigInteger}<div class='sub-desc'><p>value with which the greatest common divisor is computed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}.</p>\n</div></li></ul></div></div></div><div id='method-getLowestSetBit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-getLowestSetBit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-getLowestSetBit' class='name expandable'>getLowestSetBit</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the position of the lowest set bit in the two's complement\n representation of this {@code BigInteger}. ...</div><div class='long'><p>Returns the position of the lowest set bit in the two's complement\n representation of this {@code BigInteger}. If all bits are zero (this==0)\n then -1 is returned as result.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n</div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-intValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-intValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-intValue' class='name expandable'>intValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigInteger} as an int value. ...</div><div class='long'><p>Returns this {@code BigInteger} as an int value. If {@code this} is too\n big to be represented as an int, then {@code this % (1 &lt;&lt; 32)} is\n returned.</p>\n</div></div></div><div id='method-isProbablePrime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-isProbablePrime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-isProbablePrime' class='name expandable'>isProbablePrime</a>( <span class='pre'>certainty</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether this {@code BigInteger} is probably prime. ...</div><div class='long'><p>Tests whether this {@code BigInteger} is probably prime. If {@code true}\n is returned, then this is prime with a probability greater than\n {@code 1 - 1/2<sup>certainty</sup>)}. If {@code false} is returned, then this\n is definitely composite. If the argument {@code certainty} &lt;= 0, then\n this method returns true.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>certainty</span> : Number<div class='sub-desc'><p>tolerated primality uncertainty.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true}, if {@code this} is probably prime, {@code false}\n     otherwise.</p>\n</div></li></ul></div></div></div><div id='method-longValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-longValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-longValue' class='name expandable'>longValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigInteger} as a long value. ...</div><div class='long'><p>Returns this {@code BigInteger} as a long value. If {@code this} is too\n big to be represented as a long, then {@code this % pow(2, 64)} is\n returned.</p>\n</div></div></div><div id='method-max' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-max' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-max' class='name expandable'>max</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the maximum of this {@code BigInteger} and {@code value}. ...</div><div class='long'><p>Returns the maximum of this {@code BigInteger} and {@code value}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {BigInteger}<div class='sub-desc'><p>value to be used to compute the maximum with {@code this}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}</p>\n</div></li></ul></div></div></div><div id='method-min' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-min' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-min' class='name expandable'>min</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the minimum of this {@code BigInteger} and {@code value}. ...</div><div class='long'><p>Returns the minimum of this {@code BigInteger} and {@code value}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {BigInteger}<div class='sub-desc'><p>value to be used to compute the minimum with {@code this}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}.</p>\n</div></li></ul></div></div></div><div id='method-mod' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-mod' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-mod' class='name expandable'>mod</a>( <span class='pre'>m</span> ) : Object {java.math.BigInteger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this mod m}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this mod m}. The\n modulus {@code m} must be positive. The result is guaranteed to be in the\n interval {@code [0, m)} (0 inclusive, m exclusive). The behavior of this\n function is not equivalent to the behavior of the % operator defined for\n the built-in {@code int}'s.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>m</span> : Object {BigInteger}<div class='sub-desc'><p>the modulus.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigInteger}</span><div class='sub-desc'><p>{@code this mod m}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code m == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code m &lt; 0}.</p>\n</div></li></ul></div></div></div><div id='method-modInverse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-modInverse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-modInverse' class='name expandable'>modInverse</a>( <span class='pre'>m</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code 1/this mod m}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code 1/this mod m}. The\n modulus {@code m} must be positive. The result is guaranteed to be in the\n interval {@code [0, m)} (0 inclusive, m exclusive). If {@code this} is\n not relatively prime to m, then an exception is thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>m</span> : Object {BigInteger}<div class='sub-desc'><p>the modulus.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code m == null}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code m &lt; 0 or} if {@code this} is not\n     relatively prime to {@code m}</p>\n</div></li></ul></div></div></div><div id='method-modPow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-modPow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-modPow' class='name expandable'>modPow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code\n pow(this, exponent) mod modulus}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code\n pow(this, exponent) mod modulus}. The modulus must be positive. The\n result is guaranteed to be in the interval {@code [0, modulus)}.\n If the exponent is negative, then\n {@code pow(this.modInverse(modulus), -exponent) mod modulus} is computed.\n The inverse of this only exists if {@code this} is relatively prime to the modulus,\n otherwise an exception is thrown.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code modulus == null} or {@code exponent == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code modulus &lt; 0} or if {@code exponent &lt; 0} and\n     not relatively prime to {@code modulus}.</p>\n</div></li></ul></div></div></div><div id='method-multiply' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-multiply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-multiply' class='name expandable'>multiply</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this * value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this * value}.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}.</p>\n</div></li></ul></div></div></div><div id='method-negate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-negate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-negate' class='name expandable'>negate</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is the {@code -this}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is the {@code -this}.</p>\n</div></div></div><div id='method-nextProbablePrime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-nextProbablePrime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-nextProbablePrime' class='name expandable'>nextProbablePrime</a>( <span class='pre'></span> ) : Object {java.math.BigInteger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the smallest integer x > {@code this} which is probably prime as\n a {@code BigInteger} instance. ...</div><div class='long'><p>Returns the smallest integer x > {@code this} which is probably prime as\n a {@code BigInteger} instance. The probability that the returned {@code\n BigInteger} is prime is greater than {@code 1 - 1/2<sup>100</sup>}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigInteger}</span><div class='sub-desc'><p>smallest integer > {@code this} which is probably prime.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code this &lt; 0}.</p>\n</div></li></ul></div></div></div><div id='method-not' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-not' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-not' class='name expandable'>not</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code ~this}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code ~this}. The result\n of this operation is {@code -this-1}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n</div></div></div><div id='method-or' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-or' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-or' class='name expandable'>or</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this | value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this | value}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {BigInteger}<div class='sub-desc'><p>value to be or'ed with {@code this}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}.</p>\n</div></li></ul></div></div></div><div id='method-pow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-pow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-pow' class='name expandable'>pow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code pow(this, exp)}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code pow(this, exp)}.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code exp &lt; 0}.</p>\n</div></li></ul></div></div></div><div id='method-probablePrime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-probablePrime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-probablePrime' class='name expandable'>probablePrime</a>( <span class='pre'>bitLength</span> ) : Object {java.math.BigInteger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a random positive {@code BigInteger} instance in the range {@code\n [0, pow(2, bitLength)-1]} which is probabl...</div><div class='long'><p>Returns a random positive {@code BigInteger} instance in the range {@code\n [0, pow(2, bitLength)-1]} which is probably prime. The probability that\n the returned {@code BigInteger} is prime is greater than {@code 1 - 1/2<sup>100</sup>)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>bitLength</span> : Number<div class='sub-desc'><p>length of the new {@code BigInteger} in bits.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigInteger}</span><div class='sub-desc'><p>probably prime random {@code BigInteger} instance.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code bitLength &lt; 2}.</p>\n</div></li></ul></div></div></div><div id='method-remainder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-remainder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-remainder' class='name expandable'>remainder</a>( <span class='pre'>divisor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this % divisor}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this % divisor}.\n Regarding signs this methods has the same behavior as the % operator on\n ints: the sign of the remainder is the same as the sign of this.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>divisor</span> : Object {BigInteger}<div class='sub-desc'><p>value by which {@code this} is divided.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code divisor == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code divisor == 0}.</p>\n</div></li></ul></div></div></div><div id='method-setBit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-setBit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-setBit' class='name expandable'>setBit</a>( <span class='pre'>n</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} which has the same binary representation\n as {@code this} but with the bit at position n...</div><div class='long'><p>Returns a {@code BigInteger} which has the same binary representation\n as {@code this} but with the bit at position n set. The result is\n equivalent to {@code this | pow(2, n)}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>position where the bit in {@code this} has to be set.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code n &lt; 0}.</p>\n</div></li></ul></div></div></div><div id='method-shiftLeft' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-shiftLeft' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-shiftLeft' class='name expandable'>shiftLeft</a>( <span class='pre'>n</span> ) : Object {java.math.BigInteger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this &lt;&lt; n}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this &lt;&lt; n}. The\n result is equivalent to {@code this * pow(2, n)} if n >= 0. The shift\n distance may be negative which means that {@code this} is shifted right.\n The result then corresponds to {@code floor(this / pow(2, -n))}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method on negative values is\n not recommended as the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>shift distance.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigInteger}</span><div class='sub-desc'><p>{@code this &lt;&lt; n} if {@code n >= 0}; {@code this >> (-n)}.\n     otherwise</p>\n</div></li></ul></div></div></div><div id='method-shiftRight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-shiftRight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-shiftRight' class='name expandable'>shiftRight</a>( <span class='pre'>n</span> ) : Object {java.math.BigInteger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this >> n}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this >> n}. For\n negative arguments, the result is also negative. The shift distance may\n be negative which means that {@code this} is shifted left.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method on negative values is\n not recommended as the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>shift distance</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigInteger}</span><div class='sub-desc'><p>{@code this >> n} if {@code n >= 0}; {@code this &lt;&lt; (-n)}\n     otherwise</p>\n</div></li></ul></div></div></div><div id='method-signum' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-signum' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-signum' class='name expandable'>signum</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the sign of this {@code BigInteger}. ...</div><div class='long'><p>Returns the sign of this {@code BigInteger}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code -1} if {@code this &lt; 0}, {@code 0} if {@code this == 0},\n     {@code 1} if {@code this > 0}.</p>\n</div></li></ul></div></div></div><div id='method-subtract' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-subtract' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-subtract' class='name expandable'>subtract</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this - value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this - value}.</p>\n</div></div></div><div id='method-testBit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-testBit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-testBit' class='name expandable'>testBit</a>( <span class='pre'>n</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether the bit at position n in {@code this} is set. ...</div><div class='long'><p>Tests whether the bit at position n in {@code this} is set. The result is\n equivalent to {@code this &amp; pow(2, n) != 0}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>position where the bit in {@code this} has to be inspected.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if {@code n &lt; 0}.</p>\n</div></li></ul></div></div></div><div id='method-toByteArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-toByteArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-toByteArray' class='name expandable'>toByteArray</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the two's complement representation of this {@code BigInteger} in\n a byte array. ...</div><div class='long'><p>Returns the two's complement representation of this {@code BigInteger} in\n a byte array.</p>\n</div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-toString' class='name expandable'>toString</a>( <span class='pre'>radix</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string containing a string representation of this {@code\n BigInteger} with base radix. ...</div><div class='long'><p>Returns a string containing a string representation of this {@code\n BigInteger} with base radix. If {@code radix &lt; Character.MIN_RADIX} or\n {@code radix > Character.MAX_RADIX} then a decimal representation is\n returned. The characters of the string representation are generated with\n method {@code Character.forDigit}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>radix</span> : Number<div class='sub-desc'><p>base to be used for the string representation.</p>\n</div></li></ul></div></div></div><div id='method-valueOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-valueOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-valueOf' class='name expandable'>valueOf</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is equal to {@code value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is equal to {@code value}.</p>\n</div></div></div><div id='method-xor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigInteger'>java.math.BigInteger</span><br/><a href='source/BigInteger.html#java-math-BigInteger-method-xor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigInteger-method-xor' class='name expandable'>xor</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigInteger} whose value is {@code this ^ value}. ...</div><div class='long'><p>Returns a {@code BigInteger} whose value is {@code this ^ value}.</p>\n\n<p> <p><b>Implementation Note:</b> Usage of this method is not recommended as\n the current implementation is not efficient.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {BigInteger}<div class='sub-desc'><p>value to be xor'ed with {@code this}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code value == null}</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});