Ext.data.JsonP.java_math_BigDecimal({"tagname":"class","name":"java.math.BigDecimal","autodetected":{},"files":[{"filename":"BigDecimal.js","href":"BigDecimal.html#java-math-BigDecimal"}],"extends":"java.lang.Number","members":[{"name":"ONE","tagname":"property","owner":"java.math.BigDecimal","id":"property-ONE","meta":{}},{"name":"ROUND_CEILING","tagname":"property","owner":"java.math.BigDecimal","id":"property-ROUND_CEILING","meta":{}},{"name":"ROUND_DOWN","tagname":"property","owner":"java.math.BigDecimal","id":"property-ROUND_DOWN","meta":{}},{"name":"ROUND_FLOOR","tagname":"property","owner":"java.math.BigDecimal","id":"property-ROUND_FLOOR","meta":{}},{"name":"ROUND_HALF_DOWN","tagname":"property","owner":"java.math.BigDecimal","id":"property-ROUND_HALF_DOWN","meta":{}},{"name":"ROUND_HALF_EVEN","tagname":"property","owner":"java.math.BigDecimal","id":"property-ROUND_HALF_EVEN","meta":{}},{"name":"ROUND_HALF_UP","tagname":"property","owner":"java.math.BigDecimal","id":"property-ROUND_HALF_UP","meta":{}},{"name":"ROUND_UNNECESSARY","tagname":"property","owner":"java.math.BigDecimal","id":"property-ROUND_UNNECESSARY","meta":{}},{"name":"ROUND_UP","tagname":"property","owner":"java.math.BigDecimal","id":"property-ROUND_UP","meta":{}},{"name":"TEN","tagname":"property","owner":"java.math.BigDecimal","id":"property-TEN","meta":{}},{"name":"ZERO","tagname":"property","owner":"java.math.BigDecimal","id":"property-ZERO","meta":{}},{"name":"abs","tagname":"method","owner":"java.math.BigDecimal","id":"method-abs","meta":{}},{"name":"add","tagname":"method","owner":"java.math.BigDecimal","id":"method-add","meta":{}},{"name":"byteValueExact","tagname":"method","owner":"java.math.BigDecimal","id":"method-byteValueExact","meta":{}},{"name":"compareTo","tagname":"method","owner":"java.math.BigDecimal","id":"method-compareTo","meta":{}},{"name":"divide","tagname":"method","owner":"java.math.BigDecimal","id":"method-divide","meta":{}},{"name":"divideAndRemainder","tagname":"method","owner":"java.math.BigDecimal","id":"method-divideAndRemainder","meta":{}},{"name":"divideToIntegralValue","tagname":"method","owner":"java.math.BigDecimal","id":"method-divideToIntegralValue","meta":{}},{"name":"doubleValue","tagname":"method","owner":"java.math.BigDecimal","id":"method-doubleValue","meta":{}},{"name":"equals","tagname":"method","owner":"java.math.BigDecimal","id":"method-equals","meta":{}},{"name":"floatValue","tagname":"method","owner":"java.math.BigDecimal","id":"method-floatValue","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.math.BigDecimal","id":"method-hashCode","meta":{}},{"name":"intValue","tagname":"method","owner":"java.math.BigDecimal","id":"method-intValue","meta":{}},{"name":"intValueExact","tagname":"method","owner":"java.math.BigDecimal","id":"method-intValueExact","meta":{}},{"name":"longValue","tagname":"method","owner":"java.math.BigDecimal","id":"method-longValue","meta":{}},{"name":"longValueExact","tagname":"method","owner":"java.math.BigDecimal","id":"method-longValueExact","meta":{}},{"name":"max","tagname":"method","owner":"java.math.BigDecimal","id":"method-max","meta":{}},{"name":"min","tagname":"method","owner":"java.math.BigDecimal","id":"method-min","meta":{}},{"name":"movePointLeft","tagname":"method","owner":"java.math.BigDecimal","id":"method-movePointLeft","meta":{}},{"name":"movePointRight","tagname":"method","owner":"java.math.BigDecimal","id":"method-movePointRight","meta":{}},{"name":"multiply","tagname":"method","owner":"java.math.BigDecimal","id":"method-multiply","meta":{}},{"name":"negate","tagname":"method","owner":"java.math.BigDecimal","id":"method-negate","meta":{}},{"name":"plus","tagname":"method","owner":"java.math.BigDecimal","id":"method-plus","meta":{}},{"name":"pow","tagname":"method","owner":"java.math.BigDecimal","id":"method-pow","meta":{}},{"name":"precision","tagname":"method","owner":"java.math.BigDecimal","id":"method-precision","meta":{}},{"name":"remainder","tagname":"method","owner":"java.math.BigDecimal","id":"method-remainder","meta":{}},{"name":"round","tagname":"method","owner":"java.math.BigDecimal","id":"method-round","meta":{}},{"name":"scale","tagname":"method","owner":"java.math.BigDecimal","id":"method-scale","meta":{}},{"name":"scaleByPowerOfTen","tagname":"method","owner":"java.math.BigDecimal","id":"method-scaleByPowerOfTen","meta":{}},{"name":"setScale","tagname":"method","owner":"java.math.BigDecimal","id":"method-setScale","meta":{}},{"name":"shortValueExact","tagname":"method","owner":"java.math.BigDecimal","id":"method-shortValueExact","meta":{}},{"name":"signum","tagname":"method","owner":"java.math.BigDecimal","id":"method-signum","meta":{}},{"name":"stripTrailingZeros","tagname":"method","owner":"java.math.BigDecimal","id":"method-stripTrailingZeros","meta":{}},{"name":"subtract","tagname":"method","owner":"java.math.BigDecimal","id":"method-subtract","meta":{}},{"name":"toBigInteger","tagname":"method","owner":"java.math.BigDecimal","id":"method-toBigInteger","meta":{}},{"name":"toBigIntegerExact","tagname":"method","owner":"java.math.BigDecimal","id":"method-toBigIntegerExact","meta":{}},{"name":"toEngineeringString","tagname":"method","owner":"java.math.BigDecimal","id":"method-toEngineeringString","meta":{}},{"name":"toPlainString","tagname":"method","owner":"java.math.BigDecimal","id":"method-toPlainString","meta":{}},{"name":"toString","tagname":"method","owner":"java.math.BigDecimal","id":"method-toString","meta":{}},{"name":"ulp","tagname":"method","owner":"java.math.BigDecimal","id":"method-ulp","meta":{}},{"name":"unscaledValue","tagname":"method","owner":"java.math.BigDecimal","id":"method-unscaledValue","meta":{}},{"name":"valueOf","tagname":"method","owner":"java.math.BigDecimal","id":"method-valueOf","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.math.BigDecimal","short_doc":"implements java.lang.Comparable\n\n implements java.io.Serializable\n\nAn immutable arbitrary-precision signed decimal. ...","classIcon":"icon-class","superclasses":["java.lang.Number"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Number<div class='subclass '><strong>java.math.BigDecimal</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/BigDecimal.html#java-math-BigDecimal' target='_blank'>BigDecimal.js</a></div></pre><div class='doc-contents'><p>implements java.lang.Comparable</p>\n\n<p> implements java.io.Serializable</p>\n\n<p>An immutable arbitrary-precision signed decimal.</p>\n\n<p> <p>A value is represented by an arbitrary-precision \"unscaled value\" and a signed 32-bit \"scale\",\n combined thus: {@code unscaled * 10<sup>-scale</sup>}. See <a href=\"#!/api/java.math.BigDecimal-method-unscaledValue\" rel=\"java.math.BigDecimal-method-unscaledValue\" class=\"docClass\">unscaledValue</a> and <a href=\"#!/api/java.math.BigDecimal-method-scale\" rel=\"java.math.BigDecimal-method-scale\" class=\"docClass\">scale</a>.</p>\n\n<p> <p>Most operations allow you to supply a <a href=\"#!/api/java.math.MathContext\" rel=\"java.math.MathContext\" class=\"docClass\">java.math.MathContext</a> to specify a desired rounding mode.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ONE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ONE' class='name expandable'>ONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The constant one as a {@code BigDecimal}. ...</div><div class='long'><p>The constant one as a {@code BigDecimal}.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-ROUND_CEILING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ROUND_CEILING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ROUND_CEILING' class='name expandable'>ROUND_CEILING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Rounding mode to round towards positive infinity. ...</div><div class='long'><p>Rounding mode to round towards positive infinity. For positive values\nthis rounding mode behaves as <a href=\"#!/api/java.math.BigDecimal-property-ROUND_UP\" rel=\"java.math.BigDecimal-property-ROUND_UP\" class=\"docClass\">ROUND_UP</a>, for negative values as\n<a href=\"#!/api/java.math.BigDecimal-property-ROUND_DOWN\" rel=\"java.math.BigDecimal-property-ROUND_DOWN\" class=\"docClass\">ROUND_DOWN</a>.</p>\n\n<p>@see RoundingMode#CEILING</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-ROUND_DOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ROUND_DOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ROUND_DOWN' class='name expandable'>ROUND_DOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Rounding mode where the values are rounded towards zero. ...</div><div class='long'><p>Rounding mode where the values are rounded towards zero.</p>\n\n<p>@see RoundingMode#DOWN</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-ROUND_FLOOR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ROUND_FLOOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ROUND_FLOOR' class='name expandable'>ROUND_FLOOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Rounding mode to round towards negative infinity. ...</div><div class='long'><p>Rounding mode to round towards negative infinity. For positive values\nthis rounding mode behaves as <a href=\"#!/api/java.math.BigDecimal-property-ROUND_DOWN\" rel=\"java.math.BigDecimal-property-ROUND_DOWN\" class=\"docClass\">ROUND_DOWN</a>, for negative values as\n<a href=\"#!/api/java.math.BigDecimal-property-ROUND_UP\" rel=\"java.math.BigDecimal-property-ROUND_UP\" class=\"docClass\">ROUND_UP</a>.</p>\n\n<p>@see RoundingMode#FLOOR</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-ROUND_HALF_DOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ROUND_HALF_DOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ROUND_HALF_DOWN' class='name expandable'>ROUND_HALF_DOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Rounding mode where values are rounded towards the nearest neighbor. ...</div><div class='long'><p>Rounding mode where values are rounded towards the nearest neighbor.\nTies are broken by rounding down.</p>\n\n<p>@see RoundingMode#HALF_DOWN</p>\n<p>Defaults to: <code>&quot;5&quot;</code></p></div></div></div><div id='property-ROUND_HALF_EVEN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ROUND_HALF_EVEN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ROUND_HALF_EVEN' class='name expandable'>ROUND_HALF_EVEN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Rounding mode where values are rounded towards the nearest neighbor. ...</div><div class='long'><p>Rounding mode where values are rounded towards the nearest neighbor.\nTies are broken by rounding to the even neighbor.</p>\n\n<p>@see RoundingMode#HALF_EVEN</p>\n<p>Defaults to: <code>&quot;6&quot;</code></p></div></div></div><div id='property-ROUND_HALF_UP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ROUND_HALF_UP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ROUND_HALF_UP' class='name expandable'>ROUND_HALF_UP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Rounding mode where values are rounded towards the nearest neighbor. ...</div><div class='long'><p>Rounding mode where values are rounded towards the nearest neighbor.\nTies are broken by rounding up.</p>\n\n<p>@see RoundingMode#HALF_UP</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-ROUND_UNNECESSARY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ROUND_UNNECESSARY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ROUND_UNNECESSARY' class='name expandable'>ROUND_UNNECESSARY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Rounding mode where the rounding operations throws an {@code\nArithmeticException} for the case that rounding is neces...</div><div class='long'><p>Rounding mode where the rounding operations throws an {@code\nArithmeticException} for the case that rounding is necessary, i.e. for\nthe case that the value cannot be represented exactly.</p>\n\n<p>@see RoundingMode#UNNECESSARY</p>\n<p>Defaults to: <code>&quot;7&quot;</code></p></div></div></div><div id='property-ROUND_UP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ROUND_UP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ROUND_UP' class='name expandable'>ROUND_UP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Rounding mode where positive values are rounded towards positive infinity\nand negative values towards negative infinity. ...</div><div class='long'><p>Rounding mode where positive values are rounded towards positive infinity\nand negative values towards negative infinity.</p>\n\n<p>@see RoundingMode#UP</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-TEN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-TEN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-TEN' class='name expandable'>TEN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The constant ten as a {@code BigDecimal}. ...</div><div class='long'><p>The constant ten as a {@code BigDecimal}.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-ZERO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-property-ZERO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-property-ZERO' class='name expandable'>ZERO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The constant zero as a {@code BigDecimal}. ...</div><div class='long'><p>The constant zero as a {@code BigDecimal}.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-abs' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-abs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-abs' class='name expandable'>abs</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigDecimal} whose value is the absolute value of\n {@code this}. ...</div><div class='long'><p>Returns a {@code BigDecimal} whose value is the absolute value of\n {@code this}. The result is rounded according to the passed context\n {@code mc}.</p>\n</div></div></div><div id='method-add' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-add' class='name expandable'>add</a>( <span class='pre'>augend, mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code this + augend}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code this + augend}.\n The result is rounded according to the passed context {@code mc}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>augend</span> : Object {BigDecimal}<div class='sub-desc'><p>value to be added to {@code this}.</p>\n</div></li><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>rounding mode and precision for the result of this operation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code this + augend}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code augend == null} or {@code mc == null}.</p>\n</div></li></ul></div></div></div><div id='method-byteValueExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-byteValueExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-byteValueExact' class='name expandable'>byteValueExact</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as a byte value if it has no fractional\n part and if its value fits to the byte range...</div><div class='long'><p>Returns this {@code BigDecimal} as a byte value if it has no fractional\n part and if its value fits to the byte range ([-128..127]). If these\n conditions are not met, an {@code ArithmeticException} is thrown.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if rounding is necessary or the number doesn't fit in a byte.</p>\n</div></li></ul></div></div></div><div id='method-compareTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'>val</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compares this {@code BigDecimal} with {@code val}. ...</div><div class='long'><p>Compares this {@code BigDecimal} with {@code val}. Returns one of the\n three values {@code 1}, {@code 0}, or {@code -1}. The method behaves as\n if {@code this.subtract(val)} is computed. If this difference is > 0 then\n 1 is returned, if the difference is &lt; 0 then -1 is returned, and if the\n difference is 0 then 0 is returned. This means, that if two decimal\n instances are compared which are equal in value but differ in scale, then\n these two instances are considered as equal.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Object {BigDecimal}<div class='sub-desc'><p>value to be compared with {@code this}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code 1} if {@code this > val}, {@code -1} if {@code this &lt; val},\n         {@code 0} if {@code this == val}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code val == null}.</p>\n</div></li></ul></div></div></div><div id='method-divide' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-divide' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-divide' class='name expandable'>divide</a>( <span class='pre'>divisor, mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code this / divisor}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code this / divisor}.\n The result is rounded according to the passed context {@code mc}. If the\n passed math context specifies precision {@code 0}, then this call is\n equivalent to {@code this.divide(divisor)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>divisor</span> : Object {BigDecimal}<div class='sub-desc'><p>value by which {@code this} is divided.</p>\n</div></li><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>rounding mode and precision for the result of this operation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code this / divisor}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code divisor == null} or {@code mc == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code divisor == 0}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code mc.getRoundingMode() == UNNECESSARY} and rounding\n             is necessary according {@code mc.getPrecision()}.</p>\n</div></li></ul></div></div></div><div id='method-divideAndRemainder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-divideAndRemainder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-divideAndRemainder' class='name expandable'>divideAndRemainder</a>( <span class='pre'>divisor, mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code BigDecimal} array which contains the integral part of\n {@code this / divisor} at index 0 and the rem...</div><div class='long'><p>Returns a {@code BigDecimal} array which contains the integral part of\n {@code this / divisor} at index 0 and the remainder {@code this %\n divisor} at index 1. The quotient is rounded down towards zero to the\n next integer. The rounding mode passed with the parameter {@code mc} is\n not considered. But if the precision of {@code mc > 0} and the integral\n part requires more digits, then an {@code ArithmeticException} is thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>divisor</span> : Object {BigDecimal}<div class='sub-desc'><p>value by which {@code this} is divided.</p>\n</div></li><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>math context which determines the maximal precision of the\n            result.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code [this.divideToIntegralValue(divisor),\n         this.remainder(divisor)]}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code divisor == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code divisor == 0}.\n@see <a href=\"#!/api/java.math.BigDecimal-method-divideToIntegralValue\" rel=\"java.math.BigDecimal-method-divideToIntegralValue\" class=\"docClass\">divideToIntegralValue</a>\n@see <a href=\"#!/api/java.math.BigDecimal-method-remainder\" rel=\"java.math.BigDecimal-method-remainder\" class=\"docClass\">remainder</a></p>\n</div></li></ul></div></div></div><div id='method-divideToIntegralValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-divideToIntegralValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-divideToIntegralValue' class='name expandable'>divideToIntegralValue</a>( <span class='pre'>divisor, mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is the integral part of\n {@code this / divisor}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is the integral part of\n {@code this / divisor}. The quotient is rounded down towards zero to the\n next integer. The rounding mode passed with the parameter {@code mc} is\n not considered. But if the precision of {@code mc > 0} and the integral\n part requires more digits, then an {@code ArithmeticException} is thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>divisor</span> : Object {BigDecimal}<div class='sub-desc'><p>value by which {@code this} is divided.</p>\n</div></li><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>math context which determines the maximal precision of the\n            result.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>integral part of {@code this / divisor}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code divisor == null} or {@code mc == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code divisor == 0}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code mc.getPrecision() > 0} and the result requires more\n             digits to be represented.</p>\n</div></li></ul></div></div></div><div id='method-doubleValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-doubleValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-doubleValue' class='name expandable'>doubleValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as a double value. ...</div><div class='long'><p>Returns this {@code BigDecimal} as a double value. If {@code this} is too\n big to be represented as an float, then {@code Double.POSITIVE_INFINITY}\n or {@code Double.NEGATIVE_INFINITY} is returned.\n <p>\n Note, that if the unscaled value has more than 53 significant digits,\n then this decimal cannot be represented exactly in a double variable. In\n this case the result is rounded.\n <p>\n For example, if the instance {@code x1 = new BigDecimal(\"0.1\")} cannot be\n represented exactly as a double, and thus {@code x1.equals(new\n BigDecimal(x1.doubleValue())} returns {@code false} for this case.\n <p>\n Similarly, if the instance {@code new BigDecimal(9007199254740993L)} is\n converted to a double, the result is {@code 9.007199254740992E15}.\n <p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>this {@code BigDecimal} as a double value.</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-equals' class='name expandable'>equals</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if {@code x} is a {@code BigDecimal} instance and if\n this instance is equal to this big decimal. ...</div><div class='long'><p>Returns {@code true} if {@code x} is a {@code BigDecimal} instance and if\n this instance is equal to this big decimal. Two big decimals are equal if\n their unscaled value and their scale is equal. For example, 1.0\n (10<em>10<sup>-1</sup>) is not equal to 1.00 (100</em>10<sup>-2</sup>). Similarly, zero\n instances are not equal if their scale differs.</p>\n</div></div></div><div id='method-floatValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-floatValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-floatValue' class='name expandable'>floatValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as a float value. ...</div><div class='long'><p>Returns this {@code BigDecimal} as a float value. If {@code this} is too\n big to be represented as an float, then {@code Float.POSITIVE_INFINITY}\n or {@code Float.NEGATIVE_INFINITY} is returned.\n <p>\n Note, that if the unscaled value has more than 24 significant digits,\n then this decimal cannot be represented exactly in a float variable. In\n this case the result is rounded.\n <p>\n For example, if the instance {@code x1 = new BigDecimal(\"0.1\")} cannot be\n represented exactly as a float, and thus {@code x1.equals(new\n BigDecimal(x1.floatValue())} returns {@code false} for this case.\n <p>\n Similarly, if the instance {@code new BigDecimal(16777217)} is converted\n to a float, the result is {@code 1.6777216E}7.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>this {@code BigDecimal} as a float value.</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a hash code for this {@code BigDecimal}. ...</div><div class='long'><p>Returns a hash code for this {@code BigDecimal}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>hash code for {@code this}.</p>\n</div></li></ul></div></div></div><div id='method-intValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-intValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-intValue' class='name expandable'>intValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as an int value. ...</div><div class='long'><p>Returns this {@code BigDecimal} as an int value. Any fractional part is\n discarded. If the integral part of {@code this} is too big to be\n represented as an int, then {@code this % 2<sup>32</sup>} is returned.</p>\n</div></div></div><div id='method-intValueExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-intValueExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-intValueExact' class='name expandable'>intValueExact</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as a int value if it has no fractional\n part and if its value fits to the int range (...</div><div class='long'><p>Returns this {@code BigDecimal} as a int value if it has no fractional\n part and if its value fits to the int range ([-2<sup>31</sup>..2<sup>31</sup>-1]). If\n these conditions are not met, an {@code ArithmeticException} is thrown.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if rounding is necessary or the number doesn't fit in an int.</p>\n</div></li></ul></div></div></div><div id='method-longValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-longValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-longValue' class='name expandable'>longValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as an long value. ...</div><div class='long'><p>Returns this {@code BigDecimal} as an long value. Any fractional part is\n discarded. If the integral part of {@code this} is too big to be\n represented as an long, then {@code this % 2<sup>64</sup>} is returned.</p>\n</div></div></div><div id='method-longValueExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-longValueExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-longValueExact' class='name expandable'>longValueExact</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as a long value if it has no fractional\n part and if its value fits to the int range ...</div><div class='long'><p>Returns this {@code BigDecimal} as a long value if it has no fractional\n part and if its value fits to the int range ([-2<sup>63</sup>..2<sup>63</sup>-1]). If\n these conditions are not met, an {@code ArithmeticException} is thrown.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if rounding is necessary or the number doesn't fit in a long.</p>\n</div></li></ul></div></div></div><div id='method-max' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-max' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-max' class='name expandable'>max</a>( <span class='pre'>val</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the maximum of this {@code BigDecimal} and {@code val}. ...</div><div class='long'><p>Returns the maximum of this {@code BigDecimal} and {@code val}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Object {BigDecimal}<div class='sub-desc'><p>value to be used to compute the maximum with this.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code max(this, val}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code val == null}.</p>\n</div></li></ul></div></div></div><div id='method-min' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-min' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-min' class='name expandable'>min</a>( <span class='pre'>val</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the minimum of this {@code BigDecimal} and {@code val}. ...</div><div class='long'><p>Returns the minimum of this {@code BigDecimal} and {@code val}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Object {BigDecimal}<div class='sub-desc'><p>value to be used to compute the minimum with this.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code min(this, val}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code val == null}.</p>\n</div></li></ul></div></div></div><div id='method-movePointLeft' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-movePointLeft' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-movePointLeft' class='name expandable'>movePointLeft</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} instance where the decimal point has\n been moved {@code n} places to the left. ...</div><div class='long'><p>Returns a new {@code BigDecimal} instance where the decimal point has\n been moved {@code n} places to the left. If {@code n &lt; 0} then the\n decimal point is moved {@code -n} places to the right.</p>\n\n<p> <p>The result is obtained by changing its scale. If the scale of the result\n becomes negative, then its precision is increased such that the scale is\n zero.</p>\n\n<p> <p>Note, that {@code movePointLeft(0)} returns a result which is\n mathematically equivalent, but which has {@code scale >= 0}.</p>\n</div></div></div><div id='method-movePointRight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-movePointRight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-movePointRight' class='name expandable'>movePointRight</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} instance where the decimal point has\n been moved {@code n} places to the right. ...</div><div class='long'><p>Returns a new {@code BigDecimal} instance where the decimal point has\n been moved {@code n} places to the right. If {@code n &lt; 0} then the\n decimal point is moved {@code -n} places to the left.</p>\n\n<p> <p>The result is obtained by changing its scale. If the scale of the result\n becomes negative, then its precision is increased such that the scale is\n zero.</p>\n\n<p> <p>Note, that {@code movePointRight(0)} returns a result which is\n mathematically equivalent, but which has scale >= 0.</p>\n</div></div></div><div id='method-multiply' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-multiply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-multiply' class='name expandable'>multiply</a>( <span class='pre'>multiplicand, mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code this *\n multiplicand}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code this *\n multiplicand}. The result is rounded according to the passed context\n {@code mc}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>multiplicand</span> : Object {BigDecimal}<div class='sub-desc'><p>value to be multiplied with {@code this}.</p>\n</div></li><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>rounding mode and precision for the result of this operation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code this * multiplicand}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code multiplicand == null} or {@code mc == null}.</p>\n</div></li></ul></div></div></div><div id='method-negate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-negate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-negate' class='name expandable'>negate</a>( <span class='pre'>mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is the {@code -this}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is the {@code -this}. The\n result is rounded according to the passed context {@code mc}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>rounding mode and precision for the result of this operation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code -this}</p>\n</div></li></ul></div></div></div><div id='method-plus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-plus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-plus' class='name expandable'>plus</a>( <span class='pre'>mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code +this}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code +this}. The result\n is rounded according to the passed context {@code mc}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>rounding mode and precision for the result of this operation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code this}, rounded</p>\n</div></li></ul></div></div></div><div id='method-pow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-pow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-pow' class='name expandable'>pow</a>( <span class='pre'>mc</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code thisn}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code this<sup>n</sup>}. The\n result is rounded according to the passed context {@code mc}.</p>\n\n<p> <p>Implementation Note: The implementation is based on the ANSI standard\n X3.274-1996 algorithm.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mc</span> : Number<div class='sub-desc'><p>rounding mode and precision for the result of this operation.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code n &lt; 0} or {@code n > 999999999}.</p>\n</div></li></ul></div></div></div><div id='method-precision' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-precision' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-precision' class='name expandable'>precision</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the precision of this {@code BigDecimal}. ...</div><div class='long'><p>Returns the precision of this {@code BigDecimal}. The precision is the\n number of decimal digits used to represent this decimal. It is equivalent\n to the number of digits of the unscaled value. The precision of {@code 0}\n is {@code 1} (independent of the scale).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the precision of this {@code BigDecimal}.</p>\n</div></li></ul></div></div></div><div id='method-remainder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-remainder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-remainder' class='name expandable'>remainder</a>( <span class='pre'>divisor, mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code this % divisor}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code this % divisor}.\n <p>\n The remainder is defined as {@code this -\n this.divideToIntegralValue(divisor) * divisor}.\n <p>\n The specified rounding mode {@code mc} is used for the division only.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>divisor</span> : Object {BigDecimal}<div class='sub-desc'><p>value by which {@code this} is divided.</p>\n</div></li><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>rounding mode and precision to be used.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code this % divisor}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code divisor == null}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code divisor == 0}.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code mc.getPrecision() > 0} and the result of {@code\n             this.divideToIntegralValue(divisor, mc)} requires more digits\n             to be represented.</p>\n</div></li></ul></div></div></div><div id='method-round' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-round' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-round' class='name expandable'>round</a>( <span class='pre'>mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code this}, rounded\n according to the passed context {@code mc}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code this}, rounded\n according to the passed context {@code mc}.\n <p>\n If {@code mc.precision = 0}, then no rounding is performed.\n <p>\n If {@code mc.precision > 0} and {@code mc.roundingMode == UNNECESSARY},\n then an {@code ArithmeticException} is thrown if the result cannot be\n represented exactly within the given precision.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>rounding mode and precision for the result of this operation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code this} rounded according to the passed context.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if {@code mc.precision > 0} and {@code mc.roundingMode ==\n             UNNECESSARY} and this cannot be represented within the given\n             precision.</p>\n</div></li></ul></div></div></div><div id='method-scale' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-scale' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-scale' class='name expandable'>scale</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the scale of this {@code BigDecimal}. ...</div><div class='long'><p>Returns the scale of this {@code BigDecimal}. The scale is the number of\n digits behind the decimal point. The value of this {@code BigDecimal} is\n the {@code unsignedValue * 10<sup>-scale</sup>}. If the scale is negative,\n then this {@code BigDecimal} represents a big integer.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the scale of this {@code BigDecimal}.</p>\n</div></li></ul></div></div></div><div id='method-scaleByPowerOfTen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-scaleByPowerOfTen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-scaleByPowerOfTen' class='name expandable'>scaleByPowerOfTen</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code this * 10n}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code this * 10<sup>n</sup>}.\n The scale of the result is {@code this.scale()} - {@code n}.\n The precision of the result is the precision of {@code this}.</p>\n\n<p> <p>This method has the same effect as <a href=\"#!/api/java.math.BigDecimal-method-movePointRight\" rel=\"java.math.BigDecimal-method-movePointRight\" class=\"docClass\">movePointRight</a>, except that\n the precision is not changed.</p>\n</div></div></div><div id='method-setScale' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-setScale' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-setScale' class='name expandable'>setScale</a>( <span class='pre'>newScale</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} instance with the specified scale. ...</div><div class='long'><p>Returns a new {@code BigDecimal} instance with the specified scale. If\n the new scale is greater than the old scale, then additional zeros are\n added to the unscaled value. If the new scale is smaller than the old\n scale, then trailing zeros are removed. If the trailing digits are not\n zeros then an ArithmeticException is thrown.\n <p>\n If no exception is thrown, then the following equation holds: {@code\n x.setScale(s).compareTo(x) == 0}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newScale</span> : Number<div class='sub-desc'><p>scale of the result returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>a new {@code BigDecimal} instance with the specified scale.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if rounding would be necessary.</p>\n</div></li></ul></div></div></div><div id='method-shortValueExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-shortValueExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-shortValueExact' class='name expandable'>shortValueExact</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as a short value if it has no fractional\n part and if its value fits to the short ran...</div><div class='long'><p>Returns this {@code BigDecimal} as a short value if it has no fractional\n part and if its value fits to the short range ([-2<sup>15</sup>..2<sup>15</sup>-1]). If\n these conditions are not met, an {@code ArithmeticException} is thrown.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if rounding is necessary of the number doesn't fit in a short.</p>\n</div></li></ul></div></div></div><div id='method-signum' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-signum' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-signum' class='name expandable'>signum</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the sign of this {@code BigDecimal}. ...</div><div class='long'><p>Returns the sign of this {@code BigDecimal}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code -1} if {@code this &lt; 0},\n         {@code 0} if {@code this == 0},\n         {@code 1} if {@code this > 0}.</p>\n</div></li></ul></div></div></div><div id='method-stripTrailingZeros' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-stripTrailingZeros' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-stripTrailingZeros' class='name expandable'>stripTrailingZeros</a>( <span class='pre'></span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} instance with the same value as {@code\n this} but with a unscaled value where the tr...</div><div class='long'><p>Returns a new {@code BigDecimal} instance with the same value as {@code\n this} but with a unscaled value where the trailing zeros have been\n removed. If the unscaled value of {@code this} has n trailing zeros, then\n the scale and the precision of the result has been reduced by n.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>a new {@code BigDecimal} instance equivalent to this where the\n         trailing zeros of the unscaled value have been removed.</p>\n</div></li></ul></div></div></div><div id='method-subtract' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-subtract' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-subtract' class='name expandable'>subtract</a>( <span class='pre'>subtrahend, mc</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.\n The result is rounded according to the passed context {@code mc}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>subtrahend</span> : Object {BigDecimal}<div class='sub-desc'><p>value to be subtracted from {@code this}.</p>\n</div></li><li><span class='pre'>mc</span> : Object {MathContext}<div class='sub-desc'><p>rounding mode and precision for the result of this operation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code this - subtrahend}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n             if {@code subtrahend == null} or {@code mc == null}.</p>\n</div></li></ul></div></div></div><div id='method-toBigInteger' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-toBigInteger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-toBigInteger' class='name expandable'>toBigInteger</a>( <span class='pre'></span> ) : Object {java.math.BigInteger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as a big integer instance. ...</div><div class='long'><p>Returns this {@code BigDecimal} as a big integer instance. A fractional\n part is discarded.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigInteger}</span><div class='sub-desc'><p>this {@code BigDecimal} as a big integer instance.</p>\n</div></li></ul></div></div></div><div id='method-toBigIntegerExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-toBigIntegerExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-toBigIntegerExact' class='name expandable'>toBigIntegerExact</a>( <span class='pre'></span> ) : Object {java.math.BigInteger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this {@code BigDecimal} as a big integer instance if it has no\n fractional part. ...</div><div class='long'><p>Returns this {@code BigDecimal} as a big integer instance if it has no\n fractional part. If this {@code BigDecimal} has a fractional part, i.e.\n if rounding would be necessary, an {@code ArithmeticException} is thrown.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigInteger}</span><div class='sub-desc'><p>this {@code BigDecimal} as a big integer value.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n             if rounding is necessary.</p>\n</div></li></ul></div></div></div><div id='method-toEngineeringString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-toEngineeringString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-toEngineeringString' class='name expandable'>toEngineeringString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string representation of this {@code BigDecimal}. ...</div><div class='long'><p>Returns a string representation of this {@code BigDecimal}. This\n representation always prints all significant digits of this value.\n <p>\n If the scale is negative or if {@code scale - precision >= 6} then\n engineering notation is used. Engineering notation is similar to the\n scientific notation except that the exponent is made to be a multiple of\n 3 such that the integer part is >= 1 and &lt; 1000.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string representation of {@code this} in engineering notation\n         if necessary.</p>\n</div></li></ul></div></div></div><div id='method-toPlainString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-toPlainString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-toPlainString' class='name expandable'>toPlainString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string representation of this {@code BigDecimal}. ...</div><div class='long'><p>Returns a string representation of this {@code BigDecimal}. No scientific\n notation is used. This methods adds zeros where necessary.\n <p>\n If this string representation is used to create a new instance, this\n instance is generally not identical to {@code this} as the precision\n changes.\n <p>\n {@code x.equals(new BigDecimal(x.toPlainString())} usually returns\n {@code false}.\n <p>\n {@code x.compareTo(new BigDecimal(x.toPlainString())} returns {@code 0}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string representation of {@code this} without exponent part.</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a canonical string representation of this {@code BigDecimal}. ...</div><div class='long'><p>Returns a canonical string representation of this {@code BigDecimal}. If\n necessary, scientific notation is used. This representation always prints\n all significant digits of this value.\n <p>\n If the scale is negative or if {@code scale - precision >= 6} then\n scientific notation is used.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string representation of {@code this} in scientific notation if\n         necessary.</p>\n</div></li></ul></div></div></div><div id='method-ulp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-ulp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-ulp' class='name expandable'>ulp</a>( <span class='pre'></span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the unit in the last place (ULP) of this {@code BigDecimal}\n instance. ...</div><div class='long'><p>Returns the unit in the last place (ULP) of this {@code BigDecimal}\n instance. An ULP is the distance to the nearest big decimal with the same\n precision.</p>\n\n<p> <p>The amount of a rounding error in the evaluation of a floating-point\n operation is often expressed in ULPs. An error of 1 ULP is often seen as\n a tolerable error.</p>\n\n<p> <p>For class {@code BigDecimal}, the ULP of a number is simply 10<sup>-scale</sup>.\n For example, {@code new BigDecimal(0.1).ulp()} returns {@code 1E-55}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>unit in the last place (ULP) of this {@code BigDecimal} instance.</p>\n</div></li></ul></div></div></div><div id='method-unscaledValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-unscaledValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-unscaledValue' class='name expandable'>unscaledValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the unscaled value (mantissa) of this {@code BigDecimal} instance\n as a {@code BigInteger}. ...</div><div class='long'><p>Returns the unscaled value (mantissa) of this {@code BigDecimal} instance\n as a {@code BigInteger}. The unscaled value can be computed as\n {@code this * 10<sup>scale</sup>}.</p>\n</div></div></div><div id='method-valueOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.math.BigDecimal'>java.math.BigDecimal</span><br/><a href='source/BigDecimal.html#java-math-BigDecimal-method-valueOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.math.BigDecimal-method-valueOf' class='name expandable'>valueOf</a>( <span class='pre'>val</span> ) : Object {java.math.BigDecimal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code BigDecimal} instance whose value is equal to {@code\n val}. ...</div><div class='long'><p>Returns a new {@code BigDecimal} instance whose value is equal to {@code\n val}. The new decimal is constructed as if the {@code BigDecimal(String)}\n constructor is called with an argument which is equal to {@code\n Double.toString(val)}. For example, {@code valueOf(\"0.1\")} is converted to\n (unscaled=1, scale=1), although the double {@code 0.1} cannot be\n represented exactly as a double value. In contrast to that, a new {@code\n BigDecimal(0.1)} instance has the value {@code\n 0.1000000000000000055511151231257827021181583404541015625} with an\n unscaled value {@code 1000000000000000055511151231257827021181583404541015625}\n and the scale {@code 55}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Number<div class='sub-desc'><p>double value to be converted to a {@code BigDecimal}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.math.BigDecimal}</span><div class='sub-desc'><p>{@code BigDecimal} instance with the value {@code val}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NumberFormatException\n             if {@code val} is infinite or {@code val} is not a number</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});