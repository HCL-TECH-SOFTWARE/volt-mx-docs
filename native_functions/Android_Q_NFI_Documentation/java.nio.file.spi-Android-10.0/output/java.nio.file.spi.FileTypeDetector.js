Ext.data.JsonP.java_nio_file_spi_FileTypeDetector({"tagname":"class","name":"java.nio.file.spi.FileTypeDetector","autodetected":{},"files":[{"filename":"FileTypeDetector.js","href":"FileTypeDetector.html#java-nio-file-spi-FileTypeDetector"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"probeContentType","tagname":"method","owner":"java.nio.file.spi.FileTypeDetector","id":"method-probeContentType","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.spi.FileTypeDetector","short_doc":"A file type detector for probing a file to guess its file type. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.file.spi.FileTypeDetector</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/FileTypeDetector.html#java-nio-file-spi-FileTypeDetector' target='_blank'>FileTypeDetector.js</a></div></pre><div class='doc-contents'><p>A file type detector for probing a file to guess its file type.</p>\n\n<p> <p> A file type detector is a concrete implementation of this class, has a\n zero-argument constructor, and implements the abstract methods specified\n below.</p>\n\n<p> <p> The means by which a file type detector determines the file type is\n highly implementation specific. A simple implementation might examine the\n <em>file extension</em> (a convention used in some platforms) and map it to\n a file type. In other cases, the file type may be stored as a file <a\n href=\"../attribute/package-summary.html\"> attribute</a> or the bytes in a\n file may be examined to guess its file type.</p>\n\n<p> @see java.nio.file.Files#probeContentType(Path)</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-probeContentType' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileTypeDetector'>java.nio.file.spi.FileTypeDetector</span><br/><a href='source/FileTypeDetector.html#java-nio-file-spi-FileTypeDetector-method-probeContentType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileTypeDetector-method-probeContentType' class='name expandable'>probeContentType</a>( <span class='pre'>path</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Probes the given file to guess its content type. ...</div><div class='long'><p>Probes the given file to guess its content type.</p>\n\n<p> <p> The means by which this method determines the file type is highly\n implementation specific. It may simply examine the file name, it may use\n a file <a href=\"../attribute/package-summary.html\">attribute</a>,\n or it may examines bytes in the file.</p>\n\n<p> <p> The probe result is the string form of the value of a\n Multipurpose Internet Mail Extension (MIME) content type as\n defined by <a href=\"http://www.ietf.org/rfc/rfc2045.txt\"><i>RFC&nbsp;2045:\n Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet\n Message Bodies</i></a>. The string must be parsable according to the\n grammar in the RFC 2045.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to probe</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The content type or {@code null} if the file type is not\n          recognized</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          An I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If the implementation requires to access the file, and a\n          security manager is installed, and it denies an unspecified\n          permission required by a file system provider implementation.\n          If the file reference is associated with the default file system\n          provider then the SecurityManager.checkRead(String) method\n          is invoked to check read access to the file.\n@see java.nio.file.Files#probeContentType</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});