Ext.data.JsonP.java_nio_file_spi_FileSystemProvider({"tagname":"class","name":"java.nio.file.spi.FileSystemProvider","autodetected":{},"files":[{"filename":"FileSystemProvider.js","href":"FileSystemProvider.html#java-nio-file-spi-FileSystemProvider"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"checkAccess","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-checkAccess","meta":{}},{"name":"copy","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-copy","meta":{}},{"name":"createDirectory","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-createDirectory","meta":{}},{"name":"createLink","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-createLink","meta":{}},{"name":"createSymbolicLink","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-createSymbolicLink","meta":{}},{"name":"delete","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-delete","meta":{}},{"name":"deleteIfExists","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-deleteIfExists","meta":{}},{"name":"getFileAttributeView","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-getFileAttributeView","meta":{}},{"name":"getFileStore","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-getFileStore","meta":{}},{"name":"getFileSystem","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-getFileSystem","meta":{}},{"name":"getPath","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-getPath","meta":{}},{"name":"getScheme","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-getScheme","meta":{}},{"name":"installedProviders","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-installedProviders","meta":{}},{"name":"isHidden","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-isHidden","meta":{}},{"name":"isSameFile","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-isSameFile","meta":{}},{"name":"move","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-move","meta":{}},{"name":"newAsynchronousFileChannel","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-newAsynchronousFileChannel","meta":{}},{"name":"newByteChannel","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-newByteChannel","meta":{}},{"name":"newDirectoryStream","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-newDirectoryStream","meta":{}},{"name":"newFileChannel","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-newFileChannel","meta":{}},{"name":"newFileSystem","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-newFileSystem","meta":{}},{"name":"newInputStream","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-newInputStream","meta":{}},{"name":"newOutputStream","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-newOutputStream","meta":{}},{"name":"readAttributes","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-readAttributes","meta":{}},{"name":"readSymbolicLink","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-readSymbolicLink","meta":{}},{"name":"setAttribute","tagname":"method","owner":"java.nio.file.spi.FileSystemProvider","id":"method-setAttribute","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.spi.FileSystemProvider","short_doc":"Service-provider class for file systems. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.file.spi.FileSystemProvider</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider' target='_blank'>FileSystemProvider.js</a></div></pre><div class='doc-contents'><p>Service-provider class for file systems. The methods defined by the java.nio.file.Files class will typically delegate to an instance of this\n class.</p>\n\n<p> <p> A file system provider is a concrete implementation of this class that\n implements the abstract methods defined by this class. A provider is\n identified by a {@code URI} scheme. The default provider\n is identified by the URI scheme \"file\". It creates the FileSystem that\n provides access to the file systems accessible to the Java virtual machine.\n The FileSystems class defines how file system providers are located\n and loaded. The default provider is typically a system-default provider but\n may be overridden if the system property {@code\n java.nio.file.spi.DefaultFileSystemProvider} is set. In that case, the\n provider has a one argument constructor whose formal parameter type is {@code\n FileSystemProvider}. All other providers have a zero argument constructor\n that initializes the provider.</p>\n\n<p> <p> A provider is a factory for one or more FileSystem instances. Each\n file system is identified by a {@code URI} where the URI's scheme matches\n the provider's <a href=\"#!/api/java.nio.file.spi.FileSystemProvider-method-getScheme\" rel=\"java.nio.file.spi.FileSystemProvider-method-getScheme\" class=\"docClass\">scheme</a>. The default file system, for example,\n is identified by the URI {@code \"file:///\"}. A memory-based file system,\n for example, may be identified by a URI such as {@code \"memory:///?name=logfs\"}.\n The <a href=\"#!/api/java.nio.file.spi.FileSystemProvider-method-newFileSystem\" rel=\"java.nio.file.spi.FileSystemProvider-method-newFileSystem\" class=\"docClass\">newFileSystem</a> method may be used to create a file\n system, and the <a href=\"#!/api/java.nio.file.spi.FileSystemProvider-method-getFileSystem\" rel=\"java.nio.file.spi.FileSystemProvider-method-getFileSystem\" class=\"docClass\">getFileSystem</a> method may be used to\n obtain a reference to an existing file system created by the provider. Where\n a provider is the factory for a single file system then it is provider dependent\n if the file system is created when the provider is initialized, or later when\n the {@code newFileSystem} method is invoked. In the case of the default\n provider, the {@code FileSystem} is created when the provider is initialized.</p>\n\n<p> <p> All of the methods in this class are safe for use by multiple concurrent\n threads.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-checkAccess' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-checkAccess' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-checkAccess' class='name expandable'>checkAccess</a>( <span class='pre'>path, modes</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks the existence, and optionally the accessibility, of a file. ...</div><div class='long'><p>Checks the existence, and optionally the accessibility, of a file.</p>\n\n<p> <p> This method may be used by the isReadable,\n isWritable and isExecutable methods to check the accessibility of a file.</p>\n\n<p> <p> This method checks the existence of a file and that this Java virtual\n machine has appropriate privileges that would allow it access the file\n according to all of access modes specified in the {@code modes} parameter\n as follows:</p>\n\n<p> <table border=1 cellpadding=5 summary=\"\">\n <tr> <th>Value</th> <th>Description</th> </tr>\n <tr>\n   <td> READ </td>\n   <td> Checks that the file exists and that the Java virtual machine has\n     permission to read the file. </td>\n </tr>\n <tr>\n   <td> WRITE </td>\n   <td> Checks that the file exists and that the Java virtual machine has\n     permission to write to the file, </td>\n </tr>\n <tr>\n   <td> EXECUTE </td>\n   <td> Checks that the file exists and that the Java virtual machine has\n     permission to execute the file. The semantics\n     may differ when checking access to a directory. For example, on UNIX\n     systems, checking for {@code EXECUTE} access checks that the Java\n     virtual machine has permission to search the directory in order to\n     access file or subdirectories. </td>\n </tr>\n </table></p>\n\n<p> <p> If the {@code modes} parameter is of length zero, then the existence\n of the file is checked.</p>\n\n<p> <p> This method follows symbolic links if the file referenced by this\n object is a symbolic link. Depending on the implementation, this method\n may require to read file permissions, access control lists, or other\n file attributes in order to check the effective access to the file. To\n determine the effective access to a file may require access to several\n attributes and so in some implementations this method may not be atomic\n with respect to other file system operations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to check</p>\n</div></li><li><span class='pre'>modes</span> : Object {java.nio.file.AccessMode[]}<div class='sub-desc'><p>The access modes to check; may have zero elements</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          an implementation is required to support checking for\n          {@code READ}, {@code WRITE}, and {@code EXECUTE} access. This\n          exception is specified to allow for the {@code Access} enum to\n          be extended in future releases.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFileException\n          if a file does not exist <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AccessDeniedException\n          the requested access would be denied or the access cannot be\n          determined because the Java virtual machine has insufficient\n          privileges or other reasons. <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          is invoked when checking read access to the file or only the\n          existence of the file, the checkWrite is invoked when checking write access to the file,\n          and checkExec is invoked\n          when checking execute access.</p>\n</div></li></ul></div></div></div><div id='method-copy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-copy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-copy' class='name expandable'>copy</a>( <span class='pre'>source, target, options</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Copy a file to a target file. ...</div><div class='long'><p>Copy a file to a target file. This method works in exactly the manner\n specified by the Files.copy(Path,Path,CopyOption[]) method\n except that both the source and target paths must be associated with\n this provider.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : Object {Path}<div class='sub-desc'><p>the path to the file to copy</p>\n</div></li><li><span class='pre'>target</span> : Object {Path}<div class='sub-desc'><p>the path to the target file</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.CopyOption[]}<div class='sub-desc'><p>options specifying how the copy should be done</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains a copy option that is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if the target file exists but cannot be replaced because the\n          {@code REPLACE_EXISTING} option is not specified <i>(optional\n          specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DirectoryNotEmptyException\n          the {@code REPLACE_EXISTING} option is specified but the file\n          cannot be replaced because it is a non-empty directory\n          <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the source file, the\n          checkWrite is invoked\n          to check write access to the target file. If a symbolic link is\n          copied the security manager is invoked to check LinkPermission{@code (\"symbolic\")}.</p>\n</div></li></ul></div></div></div><div id='method-createDirectory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-createDirectory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-createDirectory' class='name expandable'>createDirectory</a>( <span class='pre'>dir, attrs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new directory. ...</div><div class='long'><p>Creates a new directory. This method works in exactly the manner\n specified by the Files.createDirectory method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dir</span> : Object {Path}<div class='sub-desc'><p>the directory to create</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the directory</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains an attribute that cannot be set atomically\n          when creating the directory</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if a directory could not otherwise be created because a file of\n          that name already exists <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs or the parent directory does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to the new directory.</p>\n</div></li></ul></div></div></div><div id='method-createLink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-createLink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-createLink' class='name expandable'>createLink</a>( <span class='pre'>link, existing</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new link (directory entry) for an existing file. ...</div><div class='long'><p>Creates a new link (directory entry) for an existing file. This method\n works in exactly the manner specified by the Files.createLink\n method.</p>\n\n<p> <p> The default implementation of this method throws {@code\n UnsupportedOperationException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>link</span> : Object {Path}<div class='sub-desc'><p>the link (directory entry) to create</p>\n</div></li><li><span class='pre'>existing</span> : Object {Path}<div class='sub-desc'><p>a path to an existing file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the implementation does not support adding an existing file\n          to a directory</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if the entry could not otherwise be created because a file of\n          that name already exists <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager\n          is installed, it denies LinkPermission<tt>(\"hard\")</tt>\n          or its checkWrite\n          method denies write access to either the  link or the\n          existing file.</p>\n</div></li></ul></div></div></div><div id='method-createSymbolicLink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-createSymbolicLink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-createSymbolicLink' class='name expandable'>createSymbolicLink</a>( <span class='pre'>link, target, attrs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a symbolic link to a target. ...</div><div class='long'><p>Creates a symbolic link to a target. This method works in exactly the\n manner specified by the Files.createSymbolicLink method.</p>\n\n<p> <p> The default implementation of this method throws {@code\n UnsupportedOperationException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>link</span> : Object {Path}<div class='sub-desc'><p>the path of the symbolic link to create</p>\n</div></li><li><span class='pre'>target</span> : Object {Path}<div class='sub-desc'><p>the target of the symbolic link</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>the array of attributes to set atomically when creating the\n          symbolic link</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the implementation does not support symbolic links or the\n          array contains an attribute that cannot be set atomically when\n          creating the symbolic link</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if a file with the name already exists <i>(optional specific\n          exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager\n          is installed, it denies LinkPermission<tt>(\"symbolic\")</tt>\n          or its checkWrite\n          method denies write access to the path of the symbolic link.</p>\n</div></li></ul></div></div></div><div id='method-delete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-delete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-delete' class='name expandable'>delete</a>( <span class='pre'>path</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes a file. ...</div><div class='long'><p>Deletes a file. This method works in exactly the  manner specified by the\n Files.delete method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to delete</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFileException\n          if the file does not exist <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DirectoryNotEmptyException\n          if the file is a directory and could not otherwise be deleted\n          because the directory is not empty <i>(optional specific\n          exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the SecurityManager.checkDelete(String) method\n          is invoked to check delete access to the file</p>\n</div></li></ul></div></div></div><div id='method-deleteIfExists' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-deleteIfExists' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-deleteIfExists' class='name expandable'>deleteIfExists</a>( <span class='pre'>path</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes a file if it exists. ...</div><div class='long'><p>Deletes a file if it exists. This method works in exactly the manner\n specified by the Files.deleteIfExists method.</p>\n\n<p> <p> The default implementation of this method simply invokes <a href=\"#!/api/java.nio.file.spi.FileSystemProvider-method-delete\" rel=\"java.nio.file.spi.FileSystemProvider-method-delete\" class=\"docClass\">delete</a> ignoring the {@code NoSuchFileException} when the file does not\n exist. It may be overridden where appropriate.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to delete</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file was deleted by this method; {@code\n          false} if the file could not be deleted because it did not\n          exist</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DirectoryNotEmptyException\n          if the file is a directory and could not otherwise be deleted\n          because the directory is not empty <i>(optional specific\n          exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the SecurityManager.checkDelete(String) method\n          is invoked to check delete access to the file</p>\n</div></li></ul></div></div></div><div id='method-getFileAttributeView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-getFileAttributeView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-getFileAttributeView' class='name expandable'>getFileAttributeView</a>( <span class='pre'>path, type, options, options</span> ) : Object {java.nio.file.attribute.FileAttributeView}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a file attribute view of a given type. ...</div><div class='long'><p>Returns a file attribute view of a given type. This method works in\n exactly the manner specified by the Files.getFileAttributeView\n method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>type</span> : Object {java.lang.Class}<div class='sub-desc'><p>the {@code Class} object corresponding to the file attribute view</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li><li><span class='pre'>options</span> : Object<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.attribute.FileAttributeView}</span><div class='sub-desc'><p>a file attribute view of the specified type, or {@code null} if\n          the attribute view type is not available</p>\n</div></li></ul></div></div></div><div id='method-getFileStore' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-getFileStore' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-getFileStore' class='name expandable'>getFileStore</a>( <span class='pre'>path</span> ) : Object {java.nio.file.FileStore}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the FileStore representing the file store where a file\n is located. ...</div><div class='long'><p>Returns the FileStore representing the file store where a file\n is located. This method works in exactly the manner specified by the\n Files.getFileStore method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileStore}</span><div class='sub-desc'><p>the file store where the file is stored</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file, and in\n          addition it checks RuntimePermission<tt>\n          (\"getFileStoreAttributes\")</tt></p>\n</div></li></ul></div></div></div><div id='method-getFileSystem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-getFileSystem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-getFileSystem' class='name expandable'>getFileSystem</a>( <span class='pre'>uri</span> ) : Object {java.nio.file.FileSystem}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an existing {@code FileSystem} created by this provider. ...</div><div class='long'><p>Returns an existing {@code FileSystem} created by this provider.</p>\n\n<p> <p> This method returns a reference to a {@code FileSystem} that was\n created by invoking the newFileSystem(URI,Map)\n method. File systems created the newFileSystem(Path,Map) method are not returned by this method.\n The file system is identified by its {@code URI}. Its exact form\n is highly provider dependent. In the case of the default provider the URI's\n path component is {@code \"/\"} and the authority, query and fragment components\n are undefined (Undefined components are represented by {@code null}).</p>\n\n<p> <p> Once a file system created by this provider is closed it is provider-dependent if this\n method returns a reference to the closed file system or throws FileSystemNotFoundException. If the provider allows a new file system to\n be created with the same URI as a file system it previously created then\n this method throws the exception if invoked after the file system is\n closed (and before a new instance is created by the <a href=\"#!/api/java.nio.file.spi.FileSystemProvider-method-newFileSystem\" rel=\"java.nio.file.spi.FileSystemProvider-method-newFileSystem\" class=\"docClass\">newFileSystem</a> method).</p>\n\n<p> <p> If a security manager is installed then a provider implementation\n may require to check a permission before returning a reference to an\n existing file system. In the case of the default file system, no permission check is required.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {URI}<div class='sub-desc'><p>URI reference</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileSystem}</span><div class='sub-desc'><p>The file system</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the pre-conditions for the {@code uri} parameter aren't met</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileSystemNotFoundException\n          If the file system does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager is installed and it denies an unspecified\n          permission.</p>\n</div></li></ul></div></div></div><div id='method-getPath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-getPath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-getPath' class='name expandable'>getPath</a>( <span class='pre'>uri</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a {@code Path} object by converting the given URI. ...</div><div class='long'><p>Return a {@code Path} object by converting the given URI. The\n resulting {@code Path} is associated with a FileSystem that\n already exists or is constructed automatically.</p>\n\n<p> <p> The exact form of the URI is file system provider dependent. In the\n case of the default provider, the URI scheme is {@code \"file\"} and the\n given URI has a non-empty path component, and undefined query, and\n fragment components. The resulting {@code Path} is associated with the\n default default {@code FileSystem}.</p>\n\n<p> <p> If a security manager is installed then a provider implementation\n may require to check a permission. In the case of the default file system, no permission check is\n required.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {URI}<div class='sub-desc'><p>The URI to convert</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>The resulting {@code Path}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the URI scheme does not identify this provider or other\n          preconditions on the uri parameter do not hold</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileSystemNotFoundException\n          The file system, identified by the URI, does not exist and\n          cannot be created automatically</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager is installed and it denies an unspecified\n          permission.</p>\n</div></li></ul></div></div></div><div id='method-getScheme' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-getScheme' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-getScheme' class='name expandable'>getScheme</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the URI scheme that identifies this provider. ...</div><div class='long'><p>Returns the URI scheme that identifies this provider.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The URI scheme</p>\n</div></li></ul></div></div></div><div id='method-installedProviders' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-installedProviders' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-installedProviders' class='name expandable'>installedProviders</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a list of the installed file system providers. ...</div><div class='long'><p>Returns a list of the installed file system providers.</p>\n\n<p> <p> The first invocation of this method causes the default provider to be\n initialized (if not already initialized) and loads any other installed\n providers as described by the FileSystems class.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>An unmodifiable list of the installed file system providers. The\n          list contains at least one element, that is the default file\n          system provider</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ServiceConfigurationError\n          When an error occurs while loading a service provider</p>\n</div></li></ul></div></div></div><div id='method-isHidden' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-isHidden' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-isHidden' class='name expandable'>isHidden</a>( <span class='pre'>path</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not a file is considered hidden. ...</div><div class='long'><p>Tells whether or not a file is considered <em>hidden</em>. This method\n works in exactly the manner specified by the Files.isHidden\n method.</p>\n\n<p> <p> This method is invoked by the isHidden method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to test</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file is considered hidden</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-isSameFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-isSameFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-isSameFile' class='name expandable'>isSameFile</a>( <span class='pre'>path, path2</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if two paths locate the same file. ...</div><div class='long'><p>Tests if two paths locate the same file. This method works in exactly the\n manner specified by the Files.isSameFile method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>one path to the file</p>\n</div></li><li><span class='pre'>path2</span> : Object {Path}<div class='sub-desc'><p>the other path</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if, and only if, the two paths locate the same file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to both files.</p>\n</div></li></ul></div></div></div><div id='method-move' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-move' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-move' class='name expandable'>move</a>( <span class='pre'>source, target, options</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Move or rename a file to a target file. ...</div><div class='long'><p>Move or rename a file to a target file. This method works in exactly the\n manner specified by the Files.move method except that both the\n source and target paths must be associated with this provider.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : Object {Path}<div class='sub-desc'><p>the path to the file to move</p>\n</div></li><li><span class='pre'>target</span> : Object {Path}<div class='sub-desc'><p>the path to the target file</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.CopyOption[]}<div class='sub-desc'><p>options specifying how the move should be done</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains a copy option that is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if the target file exists but cannot be replaced because the\n          {@code REPLACE_EXISTING} option is not specified <i>(optional\n          specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DirectoryNotEmptyException\n          the {@code REPLACE_EXISTING} option is specified but the file\n          cannot be replaced because it is a non-empty directory\n          <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AtomicMoveNotSupportedException\n          if the options array contains the {@code ATOMIC_MOVE} option but\n          the file cannot be moved as an atomic file system operation.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to both the source and\n          target file.</p>\n</div></li></ul></div></div></div><div id='method-newAsynchronousFileChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-newAsynchronousFileChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-newAsynchronousFileChannel' class='name expandable'>newAsynchronousFileChannel</a>( <span class='pre'>path, options, executor, attrs</span> ) : Object {java.nio.channels.AsynchronousFileChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file. ...</div><div class='long'><p>Opens or creates a file for reading and/or writing, returning an\n asynchronous file channel to access the file. This method works in\n exactly the manner specified by the AsynchronousFileChannel.open method.\n A provider that does not support all the features required to construct\n an asynchronous file channel throws {@code UnsupportedOperationException}.\n The default provider is required to support the creation of asynchronous\n file channels. When not overridden, the default implementation of this\n method throws {@code UnsupportedOperationException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path of the file to open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.util.Set}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li><li><span class='pre'>executor</span> : Object {ExecutorService}<div class='sub-desc'><p>the thread pool or {@code null} to associate the channel with\n          the default thread pool</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.AsynchronousFileChannel}</span><div class='sub-desc'><p>a new asynchronous file channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the set contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this provider that does not support creating asynchronous file\n          channels, or an unsupported open option or file attribute is\n          specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default file system, the SecurityManager.checkRead(String) method is invoked to check\n          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check\n          write access if the file is opened for writing</p>\n</div></li></ul></div></div></div><div id='method-newByteChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-newByteChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-newByteChannel' class='name expandable'>newByteChannel</a>( <span class='pre'>path, options, attrs</span> ) : Object {java.nio.channels.SeekableByteChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file, returning a seekable byte channel to access the\n file. ...</div><div class='long'><p>Opens or creates a file, returning a seekable byte channel to access the\n file. This method works in exactly the manner specified by the Files.newByteChannel(Path,Set,FileAttribute[]) method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.util.Set}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.SeekableByteChannel}</span><div class='sub-desc'><p>a new seekable byte channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the set contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported open option is specified or the array contains\n          attributes that cannot be set atomically when creating the file</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if a file of that name already exists and the CREATE_NEW option is specified\n          <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the path if the file is\n          opened for reading. The checkWrite method is invoked to check write access to the path\n          if the file is opened for writing. The checkDelete method is\n          invoked to check delete access if the file is opened with the\n          {@code DELETE_ON_CLOSE} option.</p>\n</div></li></ul></div></div></div><div id='method-newDirectoryStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-newDirectoryStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-newDirectoryStream' class='name expandable'>newDirectoryStream</a>( <span class='pre'>dir, filter</span> ) : Object {java.nio.file.DirectoryStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a directory, returning a {@code DirectoryStream} to iterate over\n the entries in the directory. ...</div><div class='long'><p>Opens a directory, returning a {@code DirectoryStream} to iterate over\n the entries in the directory. This method works in exactly the manner\n specified by the java.nio.file.DirectoryStream.Filter)\n method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dir</span> : Object {Path}<div class='sub-desc'><p>the path to the directory</p>\n</div></li><li><span class='pre'>filter</span> : Object {java.nio.file.DirectoryStream.Filter}<div class='sub-desc'><p>the directory stream filter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.DirectoryStream}</span><div class='sub-desc'><p>a new and open {@code DirectoryStream} object</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NotDirectoryException\n          if the file could not otherwise be opened because it is not\n          a directory <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the directory.</p>\n</div></li></ul></div></div></div><div id='method-newFileChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-newFileChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-newFileChannel' class='name expandable'>newFileChannel</a>( <span class='pre'>path, options, attrs</span> ) : Object {java.nio.channels.FileChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file for reading and/or writing, returning a file\n channel to access the file. ...</div><div class='long'><p>Opens or creates a file for reading and/or writing, returning a file\n channel to access the file. This method works in exactly the manner\n specified by the FileChannel.open method. A provider that does not support all the\n features required to construct a file channel throws {@code\n UnsupportedOperationException}. The default provider is required to\n support the creation of file channels. When not overridden, the default\n implementation throws {@code UnsupportedOperationException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path of the file to open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.util.Set}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.FileChannel}</span><div class='sub-desc'><p>a new file channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the set contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this provider that does not support creating file channels,\n          or an unsupported open option or file attribute is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default file system, the SecurityManager.checkRead(String) method is invoked to check\n          read access if the file is opened for reading. The SecurityManager.checkWrite(String) method is invoked to check\n          write access if the file is opened for writing</p>\n</div></li></ul></div></div></div><div id='method-newFileSystem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-newFileSystem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-newFileSystem' class='name expandable'>newFileSystem</a>( <span class='pre'>path, env</span> ) : Object {java.nio.file.FileSystem}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a new {@code FileSystem} to access the contents of a file as a\n file system. ...</div><div class='long'><p>Constructs a new {@code FileSystem} to access the contents of a file as a\n file system.</p>\n\n<p> <p> This method is intended for specialized providers of pseudo file\n systems where the contents of one or more files is treated as a file\n system. The {@code env} parameter is a map of provider specific properties\n to configure the file system.</p>\n\n<p> <p> If this provider does not support the creation of such file systems\n or if the provider does not recognize the file type of the given file then\n it throws {@code UnsupportedOperationException}. The default implementation\n of this method throws {@code UnsupportedOperationException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>The path to the file</p>\n</div></li><li><span class='pre'>env</span> : Object {java.util.Map}<div class='sub-desc'><p>A map of provider specific properties to configure the file system;\n          may be empty</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileSystem}</span><div class='sub-desc'><p>A new file system</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this provider does not support access to the contents as a\n          file system or it does not recognize the file type of the\n          given file</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the {@code env} parameter does not contain properties required\n          by the provider, or a property value is invalid</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager is installed and it denies an unspecified\n          permission.</p>\n</div></li></ul></div></div></div><div id='method-newInputStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-newInputStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-newInputStream' class='name expandable'>newInputStream</a>( <span class='pre'>path, options</span> ) : Object {java.io.InputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a file, returning an input stream to read from the file. ...</div><div class='long'><p>Opens a file, returning an input stream to read from the file. This\n method works in exactly the manner specified by the Files.newInputStream method.</p>\n\n<p> <p> The default implementation of this method opens a channel to the file\n as if by invoking the <a href=\"#!/api/java.nio.file.spi.FileSystemProvider-method-newByteChannel\" rel=\"java.nio.file.spi.FileSystemProvider-method-newByteChannel\" class=\"docClass\">newByteChannel</a> method and constructs a\n stream that reads bytes from the channel. This method should be overridden\n where appropriate.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to open</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.InputStream}</span><div class='sub-desc'><p>a new input stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if an invalid combination of options is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported option is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-newOutputStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-newOutputStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-newOutputStream' class='name expandable'>newOutputStream</a>( <span class='pre'>path, options</span> ) : Object {java.io.OutputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file, returning an output stream that may be used to\n write bytes to the file. ...</div><div class='long'><p>Opens or creates a file, returning an output stream that may be used to\n write bytes to the file. This method works in exactly the manner\n specified by the Files.newOutputStream method.</p>\n\n<p> <p> The default implementation of this method opens a channel to the file\n as if by invoking the <a href=\"#!/api/java.nio.file.spi.FileSystemProvider-method-newByteChannel\" rel=\"java.nio.file.spi.FileSystemProvider-method-newByteChannel\" class=\"docClass\">newByteChannel</a> method and constructs a\n stream that writes bytes to the channel. This method should be overridden\n where appropriate.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.OutputStream}</span><div class='sub-desc'><p>a new output stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if {@code options} contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported option is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to the file. The checkDelete method is\n          invoked to check delete access if the file is opened with the\n          {@code DELETE_ON_CLOSE} option.</p>\n</div></li></ul></div></div></div><div id='method-readAttributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-readAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-readAttributes' class='name expandable'>readAttributes</a>( <span class='pre'>path, attributes, options</span> ) : Object {java.util.Map}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a set of file attributes as a bulk operation. ...</div><div class='long'><p>Reads a set of file attributes as a bulk operation. This method works in\n exactly the manner specified by the Files.readAttributes(Path,String,LinkOption[]) method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>attributes</span> : String<div class='sub-desc'><p>the attributes to read</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Map}</span><div class='sub-desc'><p>a map of the attributes returned; may be empty. The map's keys\n          are the attribute names, its values are the attribute values</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the attribute view is not available</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if no attributes are specified or an unrecognized attributes is\n          specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkRead\n          method denies read access to the file. If this method is invoked\n          to read security sensitive attributes then the security manager\n          may be invoke to check for additional permissions.</p>\n</div></li></ul></div></div></div><div id='method-readSymbolicLink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-readSymbolicLink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-readSymbolicLink' class='name expandable'>readSymbolicLink</a>( <span class='pre'>link</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads the target of a symbolic link. ...</div><div class='long'><p>Reads the target of a symbolic link. This method works in exactly the\n manner specified by the Files.readSymbolicLink method.</p>\n\n<p> <p> The default implementation of this method throws {@code\n UnsupportedOperationException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>link</span> : Object {Path}<div class='sub-desc'><p>the path to the symbolic link</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>The target of the symbolic link</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the implementation does not support symbolic links</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotLinkException\n          if the target could otherwise not be read because the file\n          is not a symbolic link <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager\n          is installed, it checks that {@code FilePermission} has been\n          granted with the \"{@code readlink}\" action to read the link.</p>\n</div></li></ul></div></div></div><div id='method-setAttribute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.spi.FileSystemProvider'>java.nio.file.spi.FileSystemProvider</span><br/><a href='source/FileSystemProvider.html#java-nio-file-spi-FileSystemProvider-method-setAttribute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.spi.FileSystemProvider-method-setAttribute' class='name expandable'>setAttribute</a>( <span class='pre'>path, attribute, value, options</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the value of a file attribute. ...</div><div class='long'><p>Sets the value of a file attribute. This method works in exactly the\n manner specified by the Files.setAttribute method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>attribute</span> : String<div class='sub-desc'><p>the attribute to set</p>\n</div></li><li><span class='pre'>value</span> : Object {Object}<div class='sub-desc'><p>the attribute value</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the attribute view is not available</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the attribute name is not specified, or is not recognized, or\n          the attribute value is of the correct type but has an\n          inappropriate value</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException\n          If the attribute value is not of the expected type or is a\n          collection containing elements that are not of the expected\n          type</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkWrite\n          method denies write access to the file. If this method is invoked\n          to set security sensitive attributes then the security manager\n          may be invoked to check for additional permissions.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});