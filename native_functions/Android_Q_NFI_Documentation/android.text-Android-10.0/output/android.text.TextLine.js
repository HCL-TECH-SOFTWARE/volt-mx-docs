Ext.data.JsonP.android_text_TextLine({"tagname":"class","name":"android.text.TextLine","autodetected":{},"files":[{"filename":"TextLine.js","href":"TextLine.html#android-text-TextLine"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"isLineEndSpace","tagname":"method","owner":"android.text.TextLine","id":"method-isLineEndSpace","meta":{}},{"name":"justify","tagname":"method","owner":"android.text.TextLine","id":"method-justify","meta":{}},{"name":"measure","tagname":"method","owner":"android.text.TextLine","id":"method-measure","meta":{}},{"name":"measureAllOffsets","tagname":"method","owner":"android.text.TextLine","id":"method-measureAllOffsets","meta":{}},{"name":"metrics","tagname":"method","owner":"android.text.TextLine","id":"method-metrics","meta":{}},{"name":"obtain","tagname":"method","owner":"android.text.TextLine","id":"method-obtain","meta":{}},{"name":"recycle","tagname":"method","owner":"android.text.TextLine","id":"method-recycle","meta":{}},{"name":"set","tagname":"method","owner":"android.text.TextLine","id":"method-set","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.text.TextLine","short_doc":"Represents a line of styled text, for measuring in visual order and\n for rendering. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.text.TextLine</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/TextLine.html#android-text-TextLine' target='_blank'>TextLine.js</a></div></pre><div class='doc-contents'><p>Represents a line of styled text, for measuring in visual order and\n for rendering.</p>\n\n<p> <p>Get a new instance using obtain(), and when finished with it, return it\n to the pool using recycle().</p>\n\n<p> <p>Call set to prepare the instance for use, then either draw, measure,\n metrics, or caretToLeftRightOf.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-isLineEndSpace' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.TextLine'>android.text.TextLine</span><br/><a href='source/TextLine.html#android-text-TextLine-method-isLineEndSpace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.TextLine-method-isLineEndSpace' class='name expandable'>isLineEndSpace</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-justify' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.TextLine'>android.text.TextLine</span><br/><a href='source/TextLine.html#android-text-TextLine-method-justify' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.TextLine-method-justify' class='name expandable'>justify</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Justify the line to the given width. ...</div><div class='long'><p>Justify the line to the given width.</p>\n</div></div></div><div id='method-measure' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.TextLine'>android.text.TextLine</span><br/><a href='source/TextLine.html#android-text-TextLine-method-measure' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.TextLine-method-measure' class='name expandable'>measure</a>( <span class='pre'>offset, trailing, fmi</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the signed graphical offset from the leading margin. ...</div><div class='long'><p>Returns the signed graphical offset from the leading margin.</p>\n\n<p> Following examples are all for measuring offset=3. LX(e.g. L0, L1, ...) denotes a\n character which has LTR BiDi property. On the other hand, RX(e.g. R0, R1, ...) denotes a\n character which has RTL BiDi property. Assuming all character has 1em width.</p>\n\n<p> Example 1: All LTR chars within LTR context\n   Input Text (logical)  :   L0 L1 L2 L3 L4 L5 L6 L7 L8\n   Input Text (visual)   :   L0 L1 L2 L3 L4 L5 L6 L7 L8\n   Output(trailing=true) :  |--------| (Returns 3em)\n   Output(trailing=false):  |--------| (Returns 3em)</p>\n\n<p> Example 2: All RTL chars within RTL context.\n   Input Text (logical)  :   R0 R1 R2 R3 R4 R5 R6 R7 R8\n   Input Text (visual)   :   R8 R7 R6 R5 R4 R3 R2 R1 R0\n   Output(trailing=true) :                    |--------| (Returns -3em)\n   Output(trailing=false):                    |--------| (Returns -3em)</p>\n\n<p> Example 3: BiDi chars within LTR context.\n   Input Text (logical)  :   L0 L1 L2 R3 R4 R5 L6 L7 L8\n   Input Text (visual)   :   L0 L1 L2 R5 R4 R3 L6 L7 L8\n   Output(trailing=true) :  |-----------------| (Returns 6em)\n   Output(trailing=false):  |--------| (Returns 3em)</p>\n\n<p> Example 4: BiDi chars within RTL context.\n   Input Text (logical)  :   L0 L1 L2 R3 R4 R5 L6 L7 L8\n   Input Text (visual)   :   L6 L7 L8 R5 R4 R3 L0 L1 L2\n   Output(trailing=true) :           |-----------------| (Returns -6em)\n   Output(trailing=false):                    |--------| (Returns -3em)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>offset</span> : Number<div class='sub-desc'><p>the line-relative character offset, between 0 and the line length, inclusive</p>\n</div></li><li><span class='pre'>trailing</span> : Boolean<div class='sub-desc'><p>no effect if the offset is not on the BiDi transition offset. If the offset\n                 is on the BiDi transition offset and true is passed, the offset is regarded\n                 as the edge of the trailing run's edge. If false, the offset is regarded as\n                 the edge of the preceding run's edge. See example above.</p>\n</div></li><li><span class='pre'>fmi</span> : Object {Paint.FontMetricsInt}<div class='sub-desc'><p>receives metrics information about the requested character, can be null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the signed graphical offset from the leading margin to the requested character edge.\n         The positive value means the offset is right from the leading edge. The negative\n         value means the offset is left from the leading edge.</p>\n</div></li></ul></div></div></div><div id='method-measureAllOffsets' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.TextLine'>android.text.TextLine</span><br/><a href='source/TextLine.html#android-text-TextLine-method-measureAllOffsets' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.TextLine-method-measureAllOffsets' class='name expandable'>measureAllOffsets</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>@see measure(int, boolean, FontMetricsInt) ...</div><div class='long'><p>@see <a href=\"#!/api/android.text.TextLine-method-measure\" rel=\"android.text.TextLine-method-measure\" class=\"docClass\">measure</a>(int, boolean, FontMetricsInt)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The measure results for all possible offsets</p>\n</div></li></ul></div></div></div><div id='method-metrics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.TextLine'>android.text.TextLine</span><br/><a href='source/TextLine.html#android-text-TextLine-method-metrics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.TextLine-method-metrics' class='name expandable'>metrics</a>( <span class='pre'>fmi</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns metrics information for the entire line. ...</div><div class='long'><p>Returns metrics information for the entire line.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fmi</span> : Object {Paint.FontMetricsInt}<div class='sub-desc'><p>receives font metrics information, can be null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the signed width of the line</p>\n</div></li></ul></div></div></div><div id='method-obtain' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.TextLine'>android.text.TextLine</span><br/><a href='source/TextLine.html#android-text-TextLine-method-obtain' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.TextLine-method-obtain' class='name expandable'>obtain</a>( <span class='pre'></span> ) : Object {android.text.TextLine}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new TextLine from the shared pool. ...</div><div class='long'><p>Returns a new TextLine from the shared pool.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.text.TextLine}</span><div class='sub-desc'><p>an uninitialized TextLine</p>\n</div></li></ul></div></div></div><div id='method-recycle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.TextLine'>android.text.TextLine</span><br/><a href='source/TextLine.html#android-text-TextLine-method-recycle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.TextLine-method-recycle' class='name expandable'>recycle</a>( <span class='pre'>tl</span> ) : Object {android.text.TextLine}<span class=\"signature\"></span></div><div class='description'><div class='short'>Puts a TextLine back into the shared pool. ...</div><div class='long'><p>Puts a TextLine back into the shared pool. Do not use this TextLine once\n it has been returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tl</span> : Object {TextLine}<div class='sub-desc'><p>the textLine</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.text.TextLine}</span><div class='sub-desc'><p>null, as a convenience from clearing references to the provided\n TextLine</p>\n</div></li></ul></div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.TextLine'>android.text.TextLine</span><br/><a href='source/TextLine.html#android-text-TextLine-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.TextLine-method-set' class='name expandable'>set</a>( <span class='pre'>paint, text, start, limit, dir, directions, hasTabs, tabStops, ellipsisStart, ellipsisEnd</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initializes a TextLine and prepares it for use. ...</div><div class='long'><p>Initializes a TextLine and prepares it for use.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>paint</span> : Object {TextPaint}<div class='sub-desc'><p>the base paint for the line</p>\n</div></li><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>the text, can be Styled</p>\n</div></li><li><span class='pre'>start</span> : Number<div class='sub-desc'><p>the start of the line relative to the text</p>\n</div></li><li><span class='pre'>limit</span> : Number<div class='sub-desc'><p>the limit of the line relative to the text</p>\n</div></li><li><span class='pre'>dir</span> : Number<div class='sub-desc'><p>the paragraph direction of this line</p>\n</div></li><li><span class='pre'>directions</span> : Object {Layout.Directions}<div class='sub-desc'><p>the directions information of this line</p>\n</div></li><li><span class='pre'>hasTabs</span> : Boolean<div class='sub-desc'><p>true if the line might contain tabs</p>\n</div></li><li><span class='pre'>tabStops</span> : Object {Layout.TabStops}<div class='sub-desc'><p>the tabStops. Can be null</p>\n</div></li><li><span class='pre'>ellipsisStart</span> : Number<div class='sub-desc'><p>the start of the ellipsis relative to the line</p>\n</div></li><li><span class='pre'>ellipsisEnd</span> : Number<div class='sub-desc'><p>the end of the ellipsis relative to the line. When there\n                    is no ellipsis, this should be equal to ellipsisStart.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});