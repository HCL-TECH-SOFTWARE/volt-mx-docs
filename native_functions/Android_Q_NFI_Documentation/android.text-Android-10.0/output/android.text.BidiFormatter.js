Ext.data.JsonP.android_text_BidiFormatter({"tagname":"class","name":"android.text.BidiFormatter","autodetected":{},"files":[{"filename":"BidiFormatter.js","href":"BidiFormatter.html#android-text-BidiFormatter"}],"extends":"java.lang.Object","members":[{"name":"getInstance","tagname":"method","owner":"android.text.BidiFormatter","id":"method-getInstance","meta":{}},{"name":"getStereoReset","tagname":"method","owner":"android.text.BidiFormatter","id":"method-getStereoReset","meta":{}},{"name":"isRtl","tagname":"method","owner":"android.text.BidiFormatter","id":"method-isRtl","meta":{}},{"name":"isRtlContext","tagname":"method","owner":"android.text.BidiFormatter","id":"method-isRtlContext","meta":{}},{"name":"unicodeWrap","tagname":"method","owner":"android.text.BidiFormatter","id":"method-unicodeWrap","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.text.BidiFormatter","short_doc":"Utility class for formatting text for display in a potentially opposite-directionality context\n without garbling. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.text.BidiFormatter</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/BidiFormatter.html#android-text-BidiFormatter' target='_blank'>BidiFormatter.js</a></div></pre><div class='doc-contents'><p>Utility class for formatting text for display in a potentially opposite-directionality context\n without garbling. The directionality of the context is set at formatter creation and the\n directionality of the text can be either estimated or passed in when known.</p>\n\n<p> <p>To support versions lower than android.os.Build.VERSION_CODES.JELLY_BEAN_MR2,\n you can use the support library's android.support.v4.text.BidiFormatter class.</p>\n\n<p> <p>These APIs provides the following functionality:\n <p>\n 1. Bidi Wrapping\n When text in one language is mixed into a document in another, opposite-directionality language,\n e.g. when an English business name is embedded in some Hebrew text, both the inserted string\n and the text surrounding it may be displayed incorrectly unless the inserted string is explicitly\n separated from the surrounding text in a \"wrapper\" that:\n <p>\n - Declares its directionality so that the string is displayed correctly. This can be done in\n   Unicode bidi formatting codes by <a href=\"#!/api/android.text.BidiFormatter-method-unicodeWrap\" rel=\"android.text.BidiFormatter-method-unicodeWrap\" class=\"docClass\">unicodeWrap</a> and similar methods.\n <p>\n - Isolates the string's directionality, so it does not unduly affect the surrounding content.\n   Currently, this can only be done using invisible Unicode characters of the same direction as\n   the context (LRM or RLM) in addition to the directionality declaration above, thus \"resetting\"\n   the directionality to that of the context. The \"reset\" may need to be done at both ends of the\n   string. Without \"reset\" after the string, the string will \"stick\" to a number or logically\n   separate opposite-direction text that happens to follow it in-line (even if separated by\n   neutral content like spaces and punctuation). Without \"reset\" before the string, the same can\n   happen there, but only with more opposite-direction text, not a number. One approach is to\n   \"reset\" the direction only after each string, on the theory that if the preceding opposite-\n   direction text is itself bidi-wrapped, the \"reset\" after it will prevent the sticking. (Doing\n   the \"reset\" only before each string definitely does not work because we do not want to require\n   bidi-wrapping numbers, and a bidi-wrapped opposite-direction string could be followed by a\n   number.) Still, the safest policy is to do the \"reset\" on both ends of each string, since RTL\n   message translations often contain untranslated Latin-script brand names and technical terms,\n   and one of these can be followed by a bidi-wrapped inserted value. On the other hand, when one\n   has such a message, it is best to do the \"reset\" manually in the message translation itself,\n   since the message's opposite-direction text could be followed by an inserted number, which we\n   would not bidi-wrap anyway. Thus, \"reset\" only after the string is the current default. In an\n   alternative to \"reset\", recent additions to the HTML, CSS, and Unicode standards allow the\n   isolation to be part of the directionality declaration. This form of isolation is better than\n   \"reset\" because it takes less space, does not require knowing the context directionality, has a\n   gentler effect than \"reset\", and protects both ends of the string. However, we do not yet allow\n   using it because required platforms do not yet support it.\n <p>\n Providing these wrapping services is the basic purpose of the bidi formatter.\n <p>\n 2. Directionality estimation\n How does one know whether a string about to be inserted into surrounding text has the same\n directionality? Well, in many cases, one knows that this must be the case when writing the code\n doing the insertion, e.g. when a localized message is inserted into a localized page. In such\n cases there is no need to involve the bidi formatter at all. In some other cases, it need not be\n the same as the context, but is either constant (e.g. urls are always LTR) or otherwise known.\n In the remaining cases, e.g. when the string is user-entered or comes from a database, the\n language of the string (and thus its directionality) is not known a priori, and must be\n estimated at run-time. The bidi formatter can do this automatically using the default\n first-strong estimation algorithm. It can also be configured to use a custom directionality\n estimation object.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getInstance' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.BidiFormatter'>android.text.BidiFormatter</span><br/><a href='source/BidiFormatter.html#android-text-BidiFormatter-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.BidiFormatter-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'>locale</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Factory for creating an instance of BidiFormatter given the context locale. ...</div><div class='long'><p>Factory for creating an instance of BidiFormatter given the context locale.</p>\n\n<p> This does not create any new objects, and returns already existing static instances.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>locale</span> : Object {Locale}<div class='sub-desc'><p>The context locale.</p>\n</div></li></ul></div></div></div><div id='method-getStereoReset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.BidiFormatter'>android.text.BidiFormatter</span><br/><a href='source/BidiFormatter.html#android-text-BidiFormatter-method-getStereoReset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.BidiFormatter-method-getStereoReset' class='name expandable'>getStereoReset</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether directionality \"reset\" should also be done before a string being\n bidi-wrapped, not just after it.</p>\n</div></li></ul></div></div></div><div id='method-isRtl' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.BidiFormatter'>android.text.BidiFormatter</span><br/><a href='source/BidiFormatter.html#android-text-BidiFormatter-method-isRtl' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.BidiFormatter-method-isRtl' class='name expandable'>isRtl</a>( <span class='pre'>str</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Operates like isRtl(String), but takes a CharSequence instead of a string ...</div><div class='long'><p>Operates like <a href=\"#!/api/android.text.BidiFormatter-method-isRtl\" rel=\"android.text.BidiFormatter-method-isRtl\" class=\"docClass\">isRtl</a>(String), but takes a CharSequence instead of a string</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>str</span> : Object {CharSequence}<div class='sub-desc'><p>CharSequence whose directionality is to be estimated.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if {@code str}'s estimated overall directionality is RTL. Otherwise returns\n          false.</p>\n</div></li></ul></div></div></div><div id='method-isRtlContext' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.BidiFormatter'>android.text.BidiFormatter</span><br/><a href='source/BidiFormatter.html#android-text-BidiFormatter-method-isRtlContext' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.BidiFormatter-method-isRtlContext' class='name expandable'>isRtlContext</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether the context directionality is RTL</p>\n</div></li></ul></div></div></div><div id='method-unicodeWrap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.text.BidiFormatter'>android.text.BidiFormatter</span><br/><a href='source/BidiFormatter.html#android-text-BidiFormatter-method-unicodeWrap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.text.BidiFormatter-method-unicodeWrap' class='name expandable'>unicodeWrap</a>( <span class='pre'>str</span> ) : Object {java.lang.CharSequence}<span class=\"signature\"></span></div><div class='description'><div class='short'>Operates like android.text.TextDirectionHeuristic, boolean), but uses\n the formatter's default direction estimation a...</div><div class='long'><p>Operates like android.text.TextDirectionHeuristic, boolean), but uses\n the formatter's default direction estimation algorithm and assumes {@code isolate} is true.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>str</span> : Object {CharSequence}<div class='sub-desc'><p>The input CharSequence.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.CharSequence}</span><div class='sub-desc'><p>Input CharSequence after applying the above processing.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});