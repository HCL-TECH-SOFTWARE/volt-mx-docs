Ext.data.JsonP.java_util_concurrent_RejectedExecutionHandler({"tagname":"class","name":"java.util.concurrent.RejectedExecutionHandler","autodetected":{},"files":[{"filename":"RejectedExecutionHandler.js","href":"RejectedExecutionHandler.html#java-util-concurrent-RejectedExecutionHandler"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"rejectedExecution","tagname":"method","owner":"java.util.concurrent.RejectedExecutionHandler","id":"method-rejectedExecution","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.RejectedExecutionHandler","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/RejectedExecutionHandler.html#java-util-concurrent-RejectedExecutionHandler' target='_blank'>RejectedExecutionHandler.js</a></div></pre><div class='doc-contents'><p>A handler for tasks that cannot be executed by a <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor\" rel=\"java.util.concurrent.ThreadPoolExecutor\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor</a>.</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-rejectedExecution' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.RejectedExecutionHandler'>java.util.concurrent.RejectedExecutionHandler</span><br/><a href='source/RejectedExecutionHandler.html#java-util-concurrent-RejectedExecutionHandler-method-rejectedExecution' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.RejectedExecutionHandler-method-rejectedExecution' class='name expandable'>rejectedExecution</a>( <span class='pre'>r, executor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Method that may be invoked by a java.util.concurrent.ThreadPoolExecutor when\n execute cannot accept a\n task. ...</div><div class='long'><p>Method that may be invoked by a <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor\" rel=\"java.util.concurrent.ThreadPoolExecutor\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor</a> when\n <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-execute\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-execute\" class=\"docClass\">execute</a> cannot accept a\n task.  This may occur when no more threads or queue slots are\n available because their bounds would be exceeded, or upon\n shutdown of the Executor.</p>\n\n<p> <p>In the absence of other alternatives, the method may throw\n an unchecked <a href=\"#!/api/java.util.concurrent.RejectedExecutionException\" rel=\"java.util.concurrent.RejectedExecutionException\" class=\"docClass\">java.util.concurrent.RejectedExecutionException</a>, which will be\n propagated to the caller of {@code execute}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>r</span> : Object {Runnable}<div class='sub-desc'><p>the runnable task requested to be executed</p>\n</div></li><li><span class='pre'>executor</span> : Object {ThreadPoolExecutor}<div class='sub-desc'><p>the executor attempting to execute this task</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if there is no remedy</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});