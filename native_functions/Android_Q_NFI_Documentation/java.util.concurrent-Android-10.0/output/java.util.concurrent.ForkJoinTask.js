Ext.data.JsonP.java_util_concurrent_ForkJoinTask({"tagname":"class","name":"java.util.concurrent.ForkJoinTask","autodetected":{},"files":[{"filename":"ForkJoinTask.js","href":"ForkJoinTask.html#java-util-concurrent-ForkJoinTask"}],"extends":"java.lang.Object","since":"1.7","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"adapt","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-adapt","meta":{}},{"name":"cancel","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-cancel","meta":{}},{"name":"compareAndSetForkJoinTaskTag","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-compareAndSetForkJoinTaskTag","meta":{}},{"name":"complete","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-complete","meta":{}},{"name":"completeExceptionally","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-completeExceptionally","meta":{}},{"name":"fork","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-fork","meta":{}},{"name":"get","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-get","meta":{}},{"name":"getException","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getException","meta":{}},{"name":"getForkJoinTaskTag","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getForkJoinTaskTag","meta":{}},{"name":"getPool","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getPool","meta":{}},{"name":"getQueuedTaskCount","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getQueuedTaskCount","meta":{}},{"name":"getRawResult","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getRawResult","meta":{}},{"name":"getSurplusQueuedTaskCount","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getSurplusQueuedTaskCount","meta":{}},{"name":"helpQuiesce","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-helpQuiesce","meta":{}},{"name":"inForkJoinPool","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-inForkJoinPool","meta":{}},{"name":"invoke","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-invoke","meta":{}},{"name":"invokeAll","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-invokeAll","meta":{}},{"name":"isCancelled","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-isCancelled","meta":{}},{"name":"isCompletedAbnormally","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-isCompletedAbnormally","meta":{}},{"name":"isCompletedNormally","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-isCompletedNormally","meta":{}},{"name":"isDone","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-isDone","meta":{}},{"name":"join","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-join","meta":{}},{"name":"quietlyComplete","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-quietlyComplete","meta":{}},{"name":"quietlyInvoke","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-quietlyInvoke","meta":{}},{"name":"quietlyJoin","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-quietlyJoin","meta":{}},{"name":"reinitialize","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-reinitialize","meta":{}},{"name":"setForkJoinTaskTag","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-setForkJoinTaskTag","meta":{}},{"name":"tryUnfork","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-tryUnfork","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ForkJoinTask","short_doc":"implements java.util.concurrent.Future\n\n implements java.io.Serializable\n\nAbstract base class for tasks that run with...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.util.concurrent.CountedCompleter","java.util.concurrent.RecursiveAction","java.util.concurrent.RecursiveTask"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.ForkJoinTask</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.util.concurrent.CountedCompleter' rel='java.util.concurrent.CountedCompleter' class='docClass'>java.util.concurrent.CountedCompleter</a></div><div class='dependency'><a href='#!/api/java.util.concurrent.RecursiveAction' rel='java.util.concurrent.RecursiveAction' class='docClass'>java.util.concurrent.RecursiveAction</a></div><div class='dependency'><a href='#!/api/java.util.concurrent.RecursiveTask' rel='java.util.concurrent.RecursiveTask' class='docClass'>java.util.concurrent.RecursiveTask</a></div><h4>Files</h4><div class='dependency'><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask' target='_blank'>ForkJoinTask.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.Future\" rel=\"java.util.concurrent.Future\" class=\"docClass\">java.util.concurrent.Future</a></p>\n\n<p> implements java.io.Serializable</p>\n\n<p>Abstract base class for tasks that run within a <a href=\"#!/api/java.util.concurrent.ForkJoinPool\" rel=\"java.util.concurrent.ForkJoinPool\" class=\"docClass\">java.util.concurrent.ForkJoinPool</a>.\n A {@code ForkJoinTask} is a thread-like entity that is much\n lighter weight than a normal thread.  Huge numbers of tasks and\n subtasks may be hosted by a small number of actual threads in a\n ForkJoinPool, at the price of some usage limitations.</p>\n\n<p> <p>A \"main\" {@code ForkJoinTask} begins execution when it is\n explicitly submitted to a <a href=\"#!/api/java.util.concurrent.ForkJoinPool\" rel=\"java.util.concurrent.ForkJoinPool\" class=\"docClass\">java.util.concurrent.ForkJoinPool</a>, or, if not already\n engaged in a ForkJoin computation, commenced in the java.util.concurrent.ForkJoinPool.commonPool() via <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-fork\" rel=\"java.util.concurrent.ForkJoinTask-method-fork\" class=\"docClass\">fork</a>, <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-invoke\" rel=\"java.util.concurrent.ForkJoinTask-method-invoke\" class=\"docClass\">invoke</a>, or\n related methods.  Once started, it will usually in turn start other\n subtasks.  As indicated by the name of this class, many programs\n using {@code ForkJoinTask} employ only methods <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-fork\" rel=\"java.util.concurrent.ForkJoinTask-method-fork\" class=\"docClass\">fork</a> and\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a>, or derivatives such as invokeAll.  However, this class also\n provides a number of other methods that can come into play in\n advanced usages, as well as extension mechanics that allow support\n of new forms of fork/join processing.</p>\n\n<p> <p>A {@code ForkJoinTask} is a lightweight form of <a href=\"#!/api/java.util.concurrent.Future\" rel=\"java.util.concurrent.Future\" class=\"docClass\">java.util.concurrent.Future</a>.\n The efficiency of {@code ForkJoinTask}s stems from a set of\n restrictions (that are only partially statically enforceable)\n reflecting their main use as computational tasks calculating pure\n functions or operating on purely isolated objects.  The primary\n coordination mechanisms are <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-fork\" rel=\"java.util.concurrent.ForkJoinTask-method-fork\" class=\"docClass\">fork</a>, that arranges\n asynchronous execution, and <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a>, that doesn't proceed\n until the task's result has been computed.  Computations should\n ideally avoid {@code synchronized} methods or blocks, and should\n minimize other blocking synchronization apart from joining other\n tasks or using synchronizers such as Phasers that are advertised to\n cooperate with fork/join scheduling. Subdividable tasks should also\n not perform blocking I/O, and should ideally access variables that\n are completely independent of those accessed by other running\n tasks. These guidelines are loosely enforced by not permitting\n checked exceptions such as {@code IOExceptions} to be\n thrown. However, computations may still encounter unchecked\n exceptions, that are rethrown to callers attempting to join\n them. These exceptions may additionally include <a href=\"#!/api/java.util.concurrent.RejectedExecutionException\" rel=\"java.util.concurrent.RejectedExecutionException\" class=\"docClass\">java.util.concurrent.RejectedExecutionException</a> stemming from internal resource\n exhaustion, such as failure to allocate internal task\n queues. Rethrown exceptions behave in the same way as regular\n exceptions, but, when possible, contain stack traces (as displayed\n for example using {@code ex.printStackTrace()}) of both the thread\n that initiated the computation as well as the thread actually\n encountering the exception; minimally only the latter.</p>\n\n<p> <p>It is possible to define and use ForkJoinTasks that may block,\n but doing do requires three further considerations: (1) Completion\n of few if any <em>other</em> tasks should be dependent on a task\n that blocks on external synchronization or I/O. Event-style async\n tasks that are never joined (for example, those subclassing <a href=\"#!/api/java.util.concurrent.CountedCompleter\" rel=\"java.util.concurrent.CountedCompleter\" class=\"docClass\">java.util.concurrent.CountedCompleter</a>) often fall into this category.  (2) To minimize\n resource impact, tasks should be small; ideally performing only the\n (possibly) blocking action. (3) Unless the <a href=\"#!/api/java.util.concurrent.ForkJoinPool.ManagedBlocker\" rel=\"java.util.concurrent.ForkJoinPool.ManagedBlocker\" class=\"docClass\">java.util.concurrent.ForkJoinPool.ManagedBlocker</a> API is used, or the number of possibly\n blocked tasks is known to be less than the pool's <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-getParallelism\" rel=\"java.util.concurrent.ForkJoinPool-method-getParallelism\" class=\"docClass\">java.util.concurrent.ForkJoinPool.getParallelism</a> level, the pool cannot guarantee that\n enough threads will be available to ensure progress or good\n performance.</p>\n\n<p> <p>The primary method for awaiting completion and extracting\n results of a task is <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a>, but there are several variants:\n The <a href=\"#!/api/java.util.concurrent.Future-method-get\" rel=\"java.util.concurrent.Future-method-get\" class=\"docClass\">java.util.concurrent.Future.get</a> methods support interruptible and/or timed\n waits for completion and report results using {@code Future}\n conventions. Method <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-invoke\" rel=\"java.util.concurrent.ForkJoinTask-method-invoke\" class=\"docClass\">invoke</a> is semantically\n equivalent to {@code fork(); join()} but always attempts to begin\n execution in the current thread. The \"<em>quiet</em>\" forms of\n these methods do not extract results or report exceptions. These\n may be useful when a set of tasks are being executed, and you need\n to delay processing of results or exceptions until all complete.\n Method {@code invokeAll} (available in multiple versions)\n performs the most common form of parallel invocation: forking a set\n of tasks and joining them all.</p>\n\n<p> <p>In the most typical usages, a fork-join pair act like a call\n (fork) and return (join) from a parallel recursive function. As is\n the case with other forms of recursive calls, returns (joins)\n should be performed innermost-first. For example, {@code a.fork();\n b.fork(); b.join(); a.join();} is likely to be substantially more\n efficient than joining {@code a} before {@code b}.</p>\n\n<p> <p>The execution status of tasks may be queried at several levels\n of detail: <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isDone\" rel=\"java.util.concurrent.ForkJoinTask-method-isDone\" class=\"docClass\">isDone</a> is true if a task completed in any way\n (including the case where a task was cancelled without executing);\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isCompletedNormally\" rel=\"java.util.concurrent.ForkJoinTask-method-isCompletedNormally\" class=\"docClass\">isCompletedNormally</a> is true if a task completed without\n cancellation or encountering an exception; <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isCancelled\" rel=\"java.util.concurrent.ForkJoinTask-method-isCancelled\" class=\"docClass\">isCancelled</a> is\n true if the task was cancelled (in which case <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-getException\" rel=\"java.util.concurrent.ForkJoinTask-method-getException\" class=\"docClass\">getException</a>\n returns a <a href=\"#!/api/java.util.concurrent.CancellationException\" rel=\"java.util.concurrent.CancellationException\" class=\"docClass\">java.util.concurrent.CancellationException</a>); and\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isCompletedAbnormally\" rel=\"java.util.concurrent.ForkJoinTask-method-isCompletedAbnormally\" class=\"docClass\">isCompletedAbnormally</a> is true if a task was either\n cancelled or encountered an exception, in which case <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-getException\" rel=\"java.util.concurrent.ForkJoinTask-method-getException\" class=\"docClass\">getException</a> will return either the encountered exception or\n <a href=\"#!/api/java.util.concurrent.CancellationException\" rel=\"java.util.concurrent.CancellationException\" class=\"docClass\">java.util.concurrent.CancellationException</a>.</p>\n\n<p> <p>The ForkJoinTask class is not usually directly subclassed.\n Instead, you subclass one of the abstract classes that support a\n particular style of fork/join processing, typically <a href=\"#!/api/java.util.concurrent.RecursiveAction\" rel=\"java.util.concurrent.RecursiveAction\" class=\"docClass\">java.util.concurrent.RecursiveAction</a> for most computations that do not return results,\n <a href=\"#!/api/java.util.concurrent.RecursiveTask\" rel=\"java.util.concurrent.RecursiveTask\" class=\"docClass\">java.util.concurrent.RecursiveTask</a> for those that do, and <a href=\"#!/api/java.util.concurrent.CountedCompleter\" rel=\"java.util.concurrent.CountedCompleter\" class=\"docClass\">java.util.concurrent.CountedCompleter</a> for those in which completed actions trigger\n other actions.  Normally, a concrete ForkJoinTask subclass declares\n fields comprising its parameters, established in a constructor, and\n then defines a {@code compute} method that somehow uses the control\n methods supplied by this base class.</p>\n\n<p> <p>Method <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a> and its variants are appropriate for use\n only when completion dependencies are acyclic; that is, the\n parallel computation can be described as a directed acyclic graph\n (DAG). Otherwise, executions may encounter a form of deadlock as\n tasks cyclically wait for each other.  However, this framework\n supports other methods and techniques (for example the use of\n <a href=\"#!/api/java.util.concurrent.Phaser\" rel=\"java.util.concurrent.Phaser\" class=\"docClass\">java.util.concurrent.Phaser</a>, <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-helpQuiesce\" rel=\"java.util.concurrent.ForkJoinTask-method-helpQuiesce\" class=\"docClass\">helpQuiesce</a>, and <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-complete\" rel=\"java.util.concurrent.ForkJoinTask-method-complete\" class=\"docClass\">complete</a>) that\n may be of use in constructing custom subclasses for problems that\n are not statically structured as DAGs. To support such usages, a\n ForkJoinTask may be atomically <em>tagged</em> with a {@code short}\n value using <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-setForkJoinTaskTag\" rel=\"java.util.concurrent.ForkJoinTask-method-setForkJoinTaskTag\" class=\"docClass\">setForkJoinTaskTag</a> or <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-compareAndSetForkJoinTaskTag\" rel=\"java.util.concurrent.ForkJoinTask-method-compareAndSetForkJoinTaskTag\" class=\"docClass\">compareAndSetForkJoinTaskTag</a> and checked using <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-getForkJoinTaskTag\" rel=\"java.util.concurrent.ForkJoinTask-method-getForkJoinTaskTag\" class=\"docClass\">getForkJoinTaskTag</a>. The ForkJoinTask implementation does not use\n these {@code protected} methods or tags for any purpose, but they\n may be of use in the construction of specialized subclasses.  For\n example, parallel graph traversals can use the supplied methods to\n avoid revisiting nodes/tasks that have already been processed.\n (Method names for tagging are bulky in part to encourage definition\n of methods that reflect their usage patterns.)</p>\n\n<p> <p>Most base support methods are {@code final}, to prevent\n overriding of implementations that are intrinsically tied to the\n underlying lightweight task scheduling framework.  Developers\n creating new basic styles of fork/join processing should minimally\n implement {@code protected} methods exec, setRawResult, and <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-getRawResult\" rel=\"java.util.concurrent.ForkJoinTask-method-getRawResult\" class=\"docClass\">getRawResult</a>, while also introducing\n an abstract computational method that can be implemented in its\n subclasses, possibly relying on other {@code protected} methods\n provided by this class.</p>\n\n<p> <p>ForkJoinTasks should perform relatively small amounts of\n computation. Large tasks should be split into smaller subtasks,\n usually via recursive decomposition. As a very rough rule of thumb,\n a task should perform more than 100 and less than 10000 basic\n computational steps, and should avoid indefinite looping. If tasks\n are too big, then parallelism cannot improve throughput. If too\n small, then memory and internal task maintenance overhead may\n overwhelm processing.</p>\n\n<p> <p>This class provides {@code adapt} methods for Runnable\n and <a href=\"#!/api/java.util.concurrent.Callable\" rel=\"java.util.concurrent.Callable\" class=\"docClass\">java.util.concurrent.Callable</a>, that may be of use when mixing execution of\n {@code ForkJoinTasks} with other kinds of tasks. When all tasks are\n of this form, consider using a pool constructed in <em>asyncMode</em>.</p>\n\n<p> <p>ForkJoinTasks are {@code Serializable}, which enables them to be\n used in extensions such as remote execution frameworks. It is\n sensible to serialize tasks only before or after, but not during,\n execution. Serialization is not relied on during execution itself.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-adapt' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-adapt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-adapt' class='name expandable'>adapt</a>( <span class='pre'>callable, </span> ) : Object {java.util.concurrent.ForkJoinTask}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code ForkJoinTask} that performs the {@code call}\n method of the given {@code Callable} as its action...</div><div class='long'><p>Returns a new {@code ForkJoinTask} that performs the {@code call}\n method of the given {@code Callable} as its action, and returns\n its result upon <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a>, translating any checked exceptions\n encountered into {@code RuntimeException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callable</span> : Object {java.util.concurrent.Callable}<div class='sub-desc'><p>the callable action</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the callable's result</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinTask}</span><div class='sub-desc'><p>the task</p>\n</div></li></ul></div></div></div><div id='method-cancel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-cancel' class='name expandable'>cancel</a>( <span class='pre'>mayInterruptIfRunning</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to cancel execution of this task. ...</div><div class='long'><p>Attempts to cancel execution of this task. This attempt will\n fail if the task has already completed or could not be\n cancelled for some other reason. If successful, and this task\n has not started when {@code cancel} is called, execution of\n this task is suppressed. After this method returns\n successfully, unless there is an intervening call to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-reinitialize\" rel=\"java.util.concurrent.ForkJoinTask-method-reinitialize\" class=\"docClass\">reinitialize</a>, subsequent calls to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isCancelled\" rel=\"java.util.concurrent.ForkJoinTask-method-isCancelled\" class=\"docClass\">isCancelled</a>,\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isDone\" rel=\"java.util.concurrent.ForkJoinTask-method-isDone\" class=\"docClass\">isDone</a>, and {@code cancel} will return {@code true}\n and calls to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a> and related methods will result in\n {@code CancellationException}.</p>\n\n<p> <p>This method may be overridden in subclasses, but if so, must\n still ensure that these properties hold. In particular, the\n {@code cancel} method itself must not throw exceptions.</p>\n\n<p> <p>This method is designed to be invoked by <em>other</em>\n tasks. To terminate the current task, you can just return or\n throw an unchecked exception from its computation method, or\n invoke <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-completeExceptionally\" rel=\"java.util.concurrent.ForkJoinTask-method-completeExceptionally\" class=\"docClass\">completeExceptionally</a>(Throwable).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mayInterruptIfRunning</span> : Boolean<div class='sub-desc'><p>this value has no effect in the\n default implementation because interrupts are not used to\n control cancellation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this task is now cancelled</p>\n</div></li></ul></div></div></div><div id='method-compareAndSetForkJoinTaskTag' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-compareAndSetForkJoinTaskTag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-compareAndSetForkJoinTaskTag' class='name expandable'>compareAndSetForkJoinTaskTag</a>( <span class='pre'>expect, update</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically conditionally sets the tag value for this task. ...</div><div class='long'><p>Atomically conditionally sets the tag value for this task.\n Among other applications, tags can be used as visit markers\n in tasks operating on graphs, as in methods that check: {@code\n if (task.compareAndSetForkJoinTaskTag((short)0, (short)1))}\n before processing, otherwise exiting because the node has\n already been visited.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expect</span> : Number<div class='sub-desc'><p>the expected tag value</p>\n</div></li><li><span class='pre'>update</span> : Number<div class='sub-desc'><p>the new tag value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful; i.e., the current value was\n equal to {@code expect} and was changed to {@code update}.</p>\n</div></li></ul></div></div></div><div id='method-complete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-complete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-complete' class='name expandable'>complete</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Completes this task, and if not already aborted or cancelled,\n returning the given value as the result of subsequent\n...</div><div class='long'><p>Completes this task, and if not already aborted or cancelled,\n returning the given value as the result of subsequent\n invocations of {@code join} and related operations. This method\n may be used to provide results for asynchronous tasks, or to\n provide alternative handling for tasks that would not otherwise\n complete normally. Its use in other situations is\n discouraged. This method is overridable, but overridden\n versions must invoke {@code super} implementation to maintain\n guarantees.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object {Object}<div class='sub-desc'><p>the result value for this task</p>\n</div></li></ul></div></div></div><div id='method-completeExceptionally' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-completeExceptionally' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-completeExceptionally' class='name expandable'>completeExceptionally</a>( <span class='pre'>ex</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Completes this task abnormally, and if not already aborted or\n cancelled, causes it to throw the given exception upon...</div><div class='long'><p>Completes this task abnormally, and if not already aborted or\n cancelled, causes it to throw the given exception upon\n {@code join} and related operations. This method may be used\n to induce exceptions in asynchronous tasks, or to force\n completion of tasks that would not otherwise complete.  Its use\n in other situations is discouraged.  This method is\n overridable, but overridden versions must invoke {@code super}\n implementation to maintain guarantees.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ex</span> : Object {Throwable}<div class='sub-desc'><p>the exception to throw. If this exception is not a\n {@code RuntimeException} or {@code Error}, the actual exception\n thrown will be a {@code RuntimeException} with cause {@code ex}.</p>\n</div></li></ul></div></div></div><div id='method-fork' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-fork' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-fork' class='name expandable'>fork</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ForkJoinTask}<span class=\"signature\"></span></div><div class='description'><div class='short'>Arranges to asynchronously execute this task in the pool the\n current task is running in, if applicable, or using the...</div><div class='long'><p>Arranges to asynchronously execute this task in the pool the\n current task is running in, if applicable, or using the java.util.concurrent.ForkJoinPool.commonPool() if not <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" rel=\"java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" class=\"docClass\">inForkJoinPool</a>.  While\n it is not necessarily enforced, it is a usage error to fork a\n task more than once unless it has completed and been\n reinitialized.  Subsequent modifications to the state of this\n task or any data it operates on are not necessarily\n consistently observable by any thread other than the one\n executing it unless preceded by a call to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a> or\n related methods, or a call to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isDone\" rel=\"java.util.concurrent.ForkJoinTask-method-isDone\" class=\"docClass\">isDone</a> returning {@code\n true}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinTask}</span><div class='sub-desc'><p>{@code this}, to simplify usage</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-get' class='name expandable'>get</a>( <span class='pre'>timeout, unit</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if ava...</div><div class='long'><p>Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the computed result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CancellationException if the computation was cancelled</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ExecutionException if the computation threw an\n exception</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is not a\n member of a ForkJoinPool and was interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutException if the wait timed out</p>\n</div></li></ul></div></div></div><div id='method-getException' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getException' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getException' class='name expandable'>getException</a>( <span class='pre'></span> ) : Object {java.lang.Throwable}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the exception thrown by the base computation, or a\n {@code CancellationException} if cancelled, or {@code nul...</div><div class='long'><p>Returns the exception thrown by the base computation, or a\n {@code CancellationException} if cancelled, or {@code null} if\n none or if the method has not yet completed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Throwable}</span><div class='sub-desc'><p>the exception, or {@code null} if none</p>\n</div></li></ul></div></div></div><div id='method-getForkJoinTaskTag' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getForkJoinTaskTag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getForkJoinTaskTag' class='name expandable'>getForkJoinTaskTag</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the tag for this task. ...</div><div class='long'><p>Returns the tag for this task.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the tag for this task</p>\n</div></li></ul></div></div></div><div id='method-getPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getPool' class='name expandable'>getPool</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ForkJoinPool}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the pool hosting the current thread, or {@code null}\n if the current thread is executing outside of any ForkJ...</div><div class='long'><p>Returns the pool hosting the current thread, or {@code null}\n if the current thread is executing outside of any ForkJoinPool.</p>\n\n<p> <p>This method returns {@code null} if and only if <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" rel=\"java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" class=\"docClass\">inForkJoinPool</a> returns {@code false}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinPool}</span><div class='sub-desc'><p>the pool, or {@code null} if none</p>\n</div></li></ul></div></div></div><div id='method-getQueuedTaskCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getQueuedTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getQueuedTaskCount' class='name expandable'>getQueuedTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of tasks that have been\n forked by the current worker thread but not yet executed. ...</div><div class='long'><p>Returns an estimate of the number of tasks that have been\n forked by the current worker thread but not yet executed. This\n value may be useful for heuristic decisions about whether to\n fork other tasks.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of tasks</p>\n</div></li></ul></div></div></div><div id='method-getRawResult' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getRawResult' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getRawResult' class='name expandable'>getRawResult</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the result that would be returned by join, even\n if this task completed abnormally, or {@code null} if this t...</div><div class='long'><p>Returns the result that would be returned by <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a>, even\n if this task completed abnormally, or {@code null} if this task\n is not known to have been completed.  This method is designed\n to aid debugging, as well as to support extensions. Its use in\n any other context is discouraged.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the result, or {@code null} if not completed</p>\n</div></li></ul></div></div></div><div id='method-getSurplusQueuedTaskCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getSurplusQueuedTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getSurplusQueuedTaskCount' class='name expandable'>getSurplusQueuedTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of how many more locally queued tasks are\n held by the current worker thread than there are other...</div><div class='long'><p>Returns an estimate of how many more locally queued tasks are\n held by the current worker thread than there are other worker\n threads that might steal them, or zero if this thread is not\n operating in a ForkJoinPool. This value may be useful for\n heuristic decisions about whether to fork other tasks. In many\n usages of ForkJoinTasks, at steady state, each worker should\n aim to maintain a small constant surplus (for example, 3) of\n tasks, and to process computations locally if this threshold is\n exceeded.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the surplus number of tasks, which may be negative</p>\n</div></li></ul></div></div></div><div id='method-helpQuiesce' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-helpQuiesce' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-helpQuiesce' class='name expandable'>helpQuiesce</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly executes tasks until the pool hosting the current task\n {@linkplain java.util.concurrent.ForkJoinPool.isQuie...</div><div class='long'><p>Possibly executes tasks until the pool hosting the current task\n {@linkplain <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-isQuiescent\" rel=\"java.util.concurrent.ForkJoinPool-method-isQuiescent\" class=\"docClass\">java.util.concurrent.ForkJoinPool.isQuiescent</a> is quiescent}.  This\n method may be of use in designs in which many tasks are forked,\n but none are explicitly joined, instead executing them until\n all are processed.</p>\n</div></div></div><div id='method-inForkJoinPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-inForkJoinPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-inForkJoinPool' class='name expandable'>inForkJoinPool</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if the current thread is a java.util.concurrent.ForkJoinWorkerThread executing as a ForkJoinPool...</div><div class='long'><p>Returns {@code true} if the current thread is a <a href=\"#!/api/java.util.concurrent.ForkJoinWorkerThread\" rel=\"java.util.concurrent.ForkJoinWorkerThread\" class=\"docClass\">java.util.concurrent.ForkJoinWorkerThread</a> executing as a ForkJoinPool computation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation,\n or {@code false} otherwise</p>\n</div></li></ul></div></div></div><div id='method-invoke' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-invoke' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-invoke' class='name expandable'>invoke</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Commences performing this task, awaits its completion if\n necessary, and returns its result, or throws an (unchecked)...</div><div class='long'><p>Commences performing this task, awaits its completion if\n necessary, and returns its result, or throws an (unchecked)\n {@code RuntimeException} or {@code Error} if the underlying\n computation did so.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the computed result</p>\n</div></li></ul></div></div></div><div id='method-invokeAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-invokeAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-invokeAll' class='name expandable'>invokeAll</a>( <span class='pre'>tasks, </span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Forks all tasks in the specified collection, returning when\n {@code isDone} holds for each task or an (unchecked) exc...</div><div class='long'><p>Forks all tasks in the specified collection, returning when\n {@code isDone} holds for each task or an (unchecked) exception\n is encountered, in which case the exception is rethrown. If\n more than one task encounters an exception, then this method\n throws any one of these exceptions. If any task encounters an\n exception, others may be cancelled. However, the execution\n status of individual tasks is not guaranteed upon exceptional\n return. The status of each task may be obtained using <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-getException\" rel=\"java.util.concurrent.ForkJoinTask-method-getException\" class=\"docClass\">getException</a>() and related methods to check if they have been\n cancelled, completed normally or exceptionally, or left\n unprocessed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tasks</span> : Object {java.util.Collection}<div class='sub-desc'><p>the collection of tasks</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the values returned from the tasks</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the tasks argument, to simplify usage</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if tasks or any element are null</p>\n</div></li></ul></div></div></div><div id='method-isCancelled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-isCancelled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-isCancelled' class='name expandable'>isCancelled</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isCompletedAbnormally' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-isCompletedAbnormally' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-isCompletedAbnormally' class='name expandable'>isCompletedAbnormally</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this task threw an exception or was cancelled. ...</div><div class='long'><p>Returns {@code true} if this task threw an exception or was cancelled.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this task threw an exception or was cancelled</p>\n</div></li></ul></div></div></div><div id='method-isCompletedNormally' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-isCompletedNormally' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-isCompletedNormally' class='name expandable'>isCompletedNormally</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this task completed without throwing an\n exception and was not cancelled. ...</div><div class='long'><p>Returns {@code true} if this task completed without throwing an\n exception and was not cancelled.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this task completed without throwing an\n exception and was not cancelled</p>\n</div></li></ul></div></div></div><div id='method-isDone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-isDone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-isDone' class='name expandable'>isDone</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-join' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-join' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-join' class='name expandable'>join</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the result of the computation when it is\n done. ...</div><div class='long'><p>Returns the result of the computation when it <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isDone\" rel=\"java.util.concurrent.ForkJoinTask-method-isDone\" class=\"docClass\">is\n done</a>.  This method differs from <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-get\" rel=\"java.util.concurrent.ForkJoinTask-method-get\" class=\"docClass\">get</a>() in that\n abnormal completion results in {@code RuntimeException} or\n {@code Error}, not {@code ExecutionException}, and that\n interrupts of the calling thread do <em>not</em> cause the\n method to abruptly return by throwing {@code\n InterruptedException}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the computed result</p>\n</div></li></ul></div></div></div><div id='method-quietlyComplete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-quietlyComplete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-quietlyComplete' class='name expandable'>quietlyComplete</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Completes this task normally without setting a value. ...</div><div class='long'><p>Completes this task normally without setting a value. The most\n recent value established by setRawResult (or {@code\n null} by default) will be returned as the result of subsequent\n invocations of {@code join} and related operations.</p>\n        <p>Available since: <b>1.8</b></p>\n</div></div></div><div id='method-quietlyInvoke' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-quietlyInvoke' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-quietlyInvoke' class='name expandable'>quietlyInvoke</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Commences performing this task and awaits its completion if\n necessary, without returning its result or throwing its\n...</div><div class='long'><p>Commences performing this task and awaits its completion if\n necessary, without returning its result or throwing its\n exception.</p>\n</div></div></div><div id='method-quietlyJoin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-quietlyJoin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-quietlyJoin' class='name expandable'>quietlyJoin</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Joins this task, without returning its result or throwing its\n exception. ...</div><div class='long'><p>Joins this task, without returning its result or throwing its\n exception. This method may be useful when processing\n collections of tasks when some have been cancelled or otherwise\n known to have aborted.</p>\n</div></div></div><div id='method-reinitialize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-reinitialize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-reinitialize' class='name expandable'>reinitialize</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets the internal bookkeeping state of this task, allowing a\n subsequent {@code fork}. ...</div><div class='long'><p>Resets the internal bookkeeping state of this task, allowing a\n subsequent {@code fork}. This method allows repeated reuse of\n this task, but only if reuse occurs when this task has either\n never been forked, or has been forked, then completed and all\n outstanding joins of this task have also completed. Effects\n under any other usage conditions are not guaranteed.\n This method may be useful when executing\n pre-constructed trees of subtasks in loops.</p>\n\n<p> <p>Upon completion of this method, {@code isDone()} reports\n {@code false}, and {@code getException()} reports {@code\n null}. However, the value returned by {@code getRawResult} is\n unaffected. To clear this value, you can invoke {@code\n setRawResult(null)}.</p>\n</div></div></div><div id='method-setForkJoinTaskTag' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-setForkJoinTaskTag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-setForkJoinTaskTag' class='name expandable'>setForkJoinTaskTag</a>( <span class='pre'>newValue</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the tag value for this task and returns the old value. ...</div><div class='long'><p>Atomically sets the tag value for this task and returns the old value.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newValue</span> : Number<div class='sub-desc'><p>the new tag value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the previous value of the tag</p>\n</div></li></ul></div></div></div><div id='method-tryUnfork' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinTask'>java.util.concurrent.ForkJoinTask</span><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-tryUnfork' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-tryUnfork' class='name expandable'>tryUnfork</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tries to unschedule this task for execution. ...</div><div class='long'><p>Tries to unschedule this task for execution. This method will\n typically (but is not guaranteed to) succeed if this task is\n the most recently forked task by the current thread, and has\n not commenced executing in another thread.  This method may be\n useful when arranging alternative local processing of tasks\n that could have been, but were not, stolen.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if unforked</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});