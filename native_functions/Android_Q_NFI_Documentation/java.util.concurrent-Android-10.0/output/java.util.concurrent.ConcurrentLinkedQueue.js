Ext.data.JsonP.java_util_concurrent_ConcurrentLinkedQueue({"tagname":"class","name":"java.util.concurrent.ConcurrentLinkedQueue","autodetected":{},"files":[{"filename":"ConcurrentLinkedQueue.js","href":"ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue"}],"extends":"java.util.AbstractQueue","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><E> the type of elements held in this queue</E></p>\n"}],"members":[{"name":"add","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-add","meta":{}},{"name":"addAll","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-addAll","meta":{}},{"name":"contains","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-contains","meta":{}},{"name":"isEmpty","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-isEmpty","meta":{}},{"name":"iterator","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-iterator","meta":{}},{"name":"offer","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-offer","meta":{}},{"name":"peek","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-peek","meta":{}},{"name":"poll","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-poll","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-remove","meta":{}},{"name":"size","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-size","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-spliterator","meta":{}},{"name":"toArray","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-toArray","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.ConcurrentLinkedQueue","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ConcurrentLinkedQueue","short_doc":"implements java.util.Queue\n\n implements java.io.Serializable\n\nAn unbounded thread-safe {@linkplain Queue queue} based...","classIcon":"icon-class","superclasses":["java.util.AbstractQueue"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.util.AbstractQueue<div class='subclass '><strong>java.util.concurrent.ConcurrentLinkedQueue</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue' target='_blank'>ConcurrentLinkedQueue.js</a></div></pre><div class='doc-contents'><p>implements java.util.Queue</p>\n\n<p> implements java.io.Serializable</p>\n\n<p>An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.\n This queue orders elements FIFO (first-in-first-out).\n The <em>head</em> of the queue is that element that has been on the\n queue the longest time.\n The <em>tail</em> of the queue is that element that has been on the\n queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.\n A {@code ConcurrentLinkedQueue} is an appropriate choice when\n many threads will share access to a common collection.\n Like most other concurrent collection implementations, this class\n does not permit the use of {@code null} elements.</p>\n\n<p> <p>This implementation employs an efficient <em>non-blocking</em>\n algorithm based on one described in\n <a href=\"http://www.cs.rochester.edu/~scott/papers/1996_PODC_queues.pdf\">\n Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue\n Algorithms</a> by Maged M. Michael and Michael L. Scott.</p>\n\n<p> <p>Iterators are <i>weakly consistent</i>, returning elements\n reflecting the state of the queue at some point at or since the\n creation of the iterator.  They do <em>not</em> throw java.util.ConcurrentModificationException, and may proceed concurrently\n with other operations.  Elements contained in the queue since the creation\n of the iterator will be returned exactly once.</p>\n\n<p> <p>Beware that, unlike in most collections, the {@code size} method\n is <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations {@code addAll},\n {@code removeAll}, {@code retainAll}, {@code containsAll},\n {@code equals}, and {@code toArray} are <em>not</em> guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an {@code addAll} operation might view only some\n of the added elements.</p>\n\n<p> <p>This class and its iterator implement all of the <em>optional</em>\n methods of the Queue and Iterator interfaces.</p>\n\n<p> <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code ConcurrentLinkedQueue}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code ConcurrentLinkedQueue} in another thread.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E> the type of elements held in this queue</E></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-add' class='name expandable'>add</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the tail of this queue. ...</div><div class='long'><p>Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never throw\n IllegalStateException or return {@code false}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by Collection.add)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-addAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-addAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-addAll' class='name expandable'>addAll</a>( <span class='pre'>c</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Appends all of the elements in the specified collection to the end of\n this queue, in the order that they are returne...</div><div class='long'><p>Appends all of the elements in the specified collection to the end of\n this queue, in the order that they are returned by the specified\n collection's iterator.  Attempts to {@code addAll} of a queue to\n itself result in {@code IllegalArgumentException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : Object {java.util.Collection}<div class='sub-desc'><p>the elements to be inserted into this queue</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue changed as a result of the call</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified collection or any\n         of its elements are null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the collection is this queue</p>\n</div></li></ul></div></div></div><div id='method-contains' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-contains' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-contains' class='name expandable'>contains</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this queue contains the specified element. ...</div><div class='long'><p>Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>object to be checked for containment in this queue</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue contains the specified element</p>\n</div></li></ul></div></div></div><div id='method-isEmpty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-isEmpty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-isEmpty' class='name expandable'>isEmpty</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this queue contains no elements. ...</div><div class='long'><p>Returns {@code true} if this queue contains no elements.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue contains no elements</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iterator over the elements in this queue in proper sequence. ...</div><div class='long'><p>Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).</p>\n\n<p> <p>The returned iterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>an iterator over the elements in this queue in proper sequence</p>\n</div></li></ul></div></div></div><div id='method-offer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-offer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-offer' class='name expandable'>offer</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the tail of this queue. ...</div><div class='long'><p>Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never return {@code false}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by Queue.offer)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-peek' class='name expandable'>peek</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-poll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-poll' class='name expandable'>poll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-remove' class='name expandable'>remove</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a single instance of the specified element from this queue,\n if it is present. ...</div><div class='long'><p>Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>element to be removed from this queue, if present</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue changed as a result of the call</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-size' class='name expandable'>size</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of elements in this queue. ...</div><div class='long'><p>Returns the number of elements in this queue.  If this queue\n contains more than {@code Integer.MAX_VALUE} elements, returns\n {@code Integer.MAX_VALUE}.</p>\n\n<p> <p>Beware that, unlike in most collections, this method is\n <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current\n number of elements requires an O(n) traversal.\n Additionally, if elements are added or removed during execution\n of this method, the returned result may be inaccurate.  Thus,\n this method is typically not very useful in concurrent\n applications.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> ) : Object {java.util.Spliterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a Spliterator over the elements in this queue. ...</div><div class='long'><p>Returns a Spliterator over the elements in this queue.</p>\n\n<p> <p>The returned spliterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n\n<p> <p>The {@code Spliterator} reports Spliterator.CONCURRENT,\n Spliterator.ORDERED, and Spliterator.NONNULL.\n@implNote The {@code Spliterator} implements {@code trySplit} to permit limited\n parallelism.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator}</span><div class='sub-desc'><p>a {@code Spliterator} over the elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-toArray' class='name expandable'>toArray</a>( <span class='pre'>a</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned ...</div><div class='long'><p>Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.</p>\n\n<p> <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.</p>\n\n<p> <p>Like the <a href=\"#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-toArray\" rel=\"java.util.concurrent.ConcurrentLinkedQueue-method-toArray\" class=\"docClass\">toArray</a>() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.</p>\n\n<p> <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:</p>\n\n<p> <pre> {@code String[] y = x.toArray(new String[0]);}</pre></p>\n\n<p> Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an array containing all of the elements in this queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified array is null</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentLinkedQueue'>java.util.concurrent.ConcurrentLinkedQueue</span><br/><a href='source/ConcurrentLinkedQueue.html#java-util-concurrent-ConcurrentLinkedQueue-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentLinkedQueue-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});