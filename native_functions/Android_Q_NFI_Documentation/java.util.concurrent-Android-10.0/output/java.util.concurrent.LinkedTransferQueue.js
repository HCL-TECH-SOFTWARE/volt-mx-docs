Ext.data.JsonP.java_util_concurrent_LinkedTransferQueue({"tagname":"class","name":"java.util.concurrent.LinkedTransferQueue","autodetected":{},"files":[{"filename":"LinkedTransferQueue.js","href":"LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue"}],"extends":"java.util.AbstractQueue","since":"1.7","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><E> the type of elements held in this queue</E></p>\n"}],"members":[{"name":"add","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-add","meta":{}},{"name":"contains","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-contains","meta":{}},{"name":"drainTo","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-drainTo","meta":{}},{"name":"getWaitingConsumerCount","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-getWaitingConsumerCount","meta":{}},{"name":"hasWaitingConsumer","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-hasWaitingConsumer","meta":{}},{"name":"isEmpty","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-isEmpty","meta":{}},{"name":"iterator","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-iterator","meta":{}},{"name":"offer","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-offer","meta":{}},{"name":"peek","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-peek","meta":{}},{"name":"poll","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-poll","meta":{}},{"name":"put","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-put","meta":{}},{"name":"remainingCapacity","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-remainingCapacity","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-remove","meta":{}},{"name":"size","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-size","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-spliterator","meta":{}},{"name":"take","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-take","meta":{}},{"name":"toArray","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-toArray","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-toString","meta":{}},{"name":"transfer","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-transfer","meta":{}},{"name":"tryTransfer","tagname":"method","owner":"java.util.concurrent.LinkedTransferQueue","id":"method-tryTransfer","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.LinkedTransferQueue","short_doc":"implements java.util.concurrent.TransferQueue\n\n implements java.io.Serializable\n\nAn unbounded java.util.concurrent.Tr...","classIcon":"icon-class","superclasses":["java.util.AbstractQueue"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.util.AbstractQueue<div class='subclass '><strong>java.util.concurrent.LinkedTransferQueue</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue' target='_blank'>LinkedTransferQueue.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.TransferQueue\" rel=\"java.util.concurrent.TransferQueue\" class=\"docClass\">java.util.concurrent.TransferQueue</a></p>\n\n<p> implements java.io.Serializable</p>\n\n<p>An unbounded <a href=\"#!/api/java.util.concurrent.TransferQueue\" rel=\"java.util.concurrent.TransferQueue\" class=\"docClass\">java.util.concurrent.TransferQueue</a> based on linked nodes.\n This queue orders elements FIFO (first-in-first-out) with respect\n to any given producer.  The <em>head</em> of the queue is that\n element that has been on the queue the longest time for some\n producer.  The <em>tail</em> of the queue is that element that has\n been on the queue the shortest time for some producer.</p>\n\n<p> <p>Beware that, unlike in most collections, the {@code size} method\n is <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current number\n of elements requires a traversal of the elements, and so may report\n inaccurate results if this collection is modified during traversal.\n Additionally, the bulk operations {@code addAll},\n {@code removeAll}, {@code retainAll}, {@code containsAll},\n {@code equals}, and {@code toArray} are <em>not</em> guaranteed\n to be performed atomically. For example, an iterator operating\n concurrently with an {@code addAll} operation might view only some\n of the added elements.</p>\n\n<p> <p>This class and its iterator implement all of the\n <em>optional</em> methods of the Collection and Iterator interfaces.</p>\n\n<p> <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code LinkedTransferQueue}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code LinkedTransferQueue} in another thread.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E> the type of elements held in this queue</E></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-add' class='name expandable'>add</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the tail of this queue. ...</div><div class='long'><p>Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never throw\n IllegalStateException or return {@code false}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by Collection.add)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-contains' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-contains' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-contains' class='name expandable'>contains</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this queue contains the specified element. ...</div><div class='long'><p>Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>object to be checked for containment in this queue</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue contains the specified element</p>\n</div></li></ul></div></div></div><div id='method-drainTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-drainTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-drainTo' class='name expandable'>drainTo</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException     {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-getWaitingConsumerCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-getWaitingConsumerCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-getWaitingConsumerCount' class='name expandable'>getWaitingConsumerCount</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-hasWaitingConsumer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-hasWaitingConsumer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-hasWaitingConsumer' class='name expandable'>hasWaitingConsumer</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isEmpty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-isEmpty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-isEmpty' class='name expandable'>isEmpty</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this queue contains no elements. ...</div><div class='long'><p>Returns {@code true} if this queue contains no elements.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue contains no elements</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iterator over the elements in this queue in proper sequence. ...</div><div class='long'><p>Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).</p>\n\n<p> <p>The returned iterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>an iterator over the elements in this queue in proper sequence</p>\n</div></li></ul></div></div></div><div id='method-offer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-offer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-offer' class='name expandable'>offer</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the tail of this queue. ...</div><div class='long'><p>Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never return {@code false}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by Queue.offer)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-peek' class='name expandable'>peek</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-poll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-poll' class='name expandable'>poll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-put' class='name expandable'>put</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the tail of this queue. ...</div><div class='long'><p>Inserts the specified element at the tail of this queue.\n As the queue is unbounded, this method will never block.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-remainingCapacity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-remainingCapacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-remainingCapacity' class='name expandable'>remainingCapacity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Always returns {@code Integer.MAX_VALUE} because a\n {@code LinkedTransferQueue} is not capacity constrained. ...</div><div class='long'><p>Always returns {@code Integer.MAX_VALUE} because a\n {@code LinkedTransferQueue} is not capacity constrained.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code Integer.MAX_VALUE} (as specified by\n         BlockingQueue.remainingCapacity)</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-remove' class='name expandable'>remove</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a single instance of the specified element from this queue,\n if it is present. ...</div><div class='long'><p>Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>element to be removed from this queue, if present</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue changed as a result of the call</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-size' class='name expandable'>size</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of elements in this queue. ...</div><div class='long'><p>Returns the number of elements in this queue.  If this queue\n contains more than {@code Integer.MAX_VALUE} elements, returns\n {@code Integer.MAX_VALUE}.</p>\n\n<p> <p>Beware that, unlike in most collections, this method is\n <em>NOT</em> a constant-time operation. Because of the\n asynchronous nature of these queues, determining the current\n number of elements requires an O(n) traversal.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> ) : Object {java.util.Spliterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a Spliterator over the elements in this queue. ...</div><div class='long'><p>Returns a Spliterator over the elements in this queue.</p>\n\n<p> <p>The returned spliterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n\n<p> <p>The {@code Spliterator} reports Spliterator.CONCURRENT,\n Spliterator.ORDERED, and Spliterator.NONNULL.\n@implNote The {@code Spliterator} implements {@code trySplit} to permit limited\n parallelism.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator}</span><div class='sub-desc'><p>a {@code Spliterator} over the elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-take' class='name expandable'>take</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-toArray' class='name expandable'>toArray</a>( <span class='pre'>a</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned ...</div><div class='long'><p>Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.</p>\n\n<p> <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.</p>\n\n<p> <p>Like the <a href=\"#!/api/java.util.concurrent.LinkedTransferQueue-method-toArray\" rel=\"java.util.concurrent.LinkedTransferQueue-method-toArray\" class=\"docClass\">toArray</a>() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.</p>\n\n<p> <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:</p>\n\n<p> <pre> {@code String[] y = x.toArray(new String[0]);}</pre></p>\n\n<p> Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an array containing all of the elements in this queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified array is null</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-transfer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-transfer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-transfer' class='name expandable'>transfer</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Transfers the element to a consumer, waiting if necessary to do so. ...</div><div class='long'><p>Transfers the element to a consumer, waiting if necessary to do so.</p>\n\n<p> <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n <a href=\"#!/api/java.util.concurrent.LinkedTransferQueue-method-take\" rel=\"java.util.concurrent.LinkedTransferQueue-method-take\" class=\"docClass\">take</a> or timed poll),\n else inserts the specified element at the tail of this queue\n and waits until the element is received by a consumer.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-tryTransfer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.LinkedTransferQueue'>java.util.concurrent.LinkedTransferQueue</span><br/><a href='source/LinkedTransferQueue.html#java-util-concurrent-LinkedTransferQueue-method-tryTransfer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.LinkedTransferQueue-method-tryTransfer' class='name expandable'>tryTransfer</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Transfers the element to a consumer if it is possible to do so\n before the timeout elapses. ...</div><div class='long'><p>Transfers the element to a consumer if it is possible to do so\n before the timeout elapses.</p>\n\n<p> <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n <a href=\"#!/api/java.util.concurrent.LinkedTransferQueue-method-take\" rel=\"java.util.concurrent.LinkedTransferQueue-method-take\" class=\"docClass\">take</a> or timed poll),\n else inserts the specified element at the tail of this queue\n and waits until the element is received by a consumer,\n returning {@code false} if the specified wait time elapses\n before the element can be transferred.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});