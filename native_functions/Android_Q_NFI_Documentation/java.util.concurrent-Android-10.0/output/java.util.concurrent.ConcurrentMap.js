Ext.data.JsonP.java_util_concurrent_ConcurrentMap({"tagname":"class","name":"java.util.concurrent.ConcurrentMap","autodetected":{},"files":[{"filename":"ConcurrentMap.js","href":"ConcurrentMap.html#java-util-concurrent-ConcurrentMap"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><K> the type of keys maintained by this map</K></p>\n"},{"tagname":"params","doc":"<p><V> the type of mapped values</V></p>\n"}],"members":[{"name":"compute","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-compute","meta":{}},{"name":"computeIfAbsent","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-computeIfAbsent","meta":{}},{"name":"computeIfPresent","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-computeIfPresent","meta":{}},{"name":"forEach","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-forEach","meta":{}},{"name":"getOrDefault","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-getOrDefault","meta":{}},{"name":"merge","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-merge","meta":{}},{"name":"putIfAbsent","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-putIfAbsent","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-remove","meta":{}},{"name":"replace","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-replace","meta":{}},{"name":"replaceAll","tagname":"method","owner":"java.util.concurrent.ConcurrentMap","id":"method-replaceAll","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ConcurrentMap","short_doc":"implements java.util.Map\n\n A java.util.Map providing thread safety and atomicity\n guarantees. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap' target='_blank'>ConcurrentMap.js</a></div></pre><div class='doc-contents'><p>implements java.util.Map</p>\n\n<p> A java.util.Map providing thread safety and atomicity\n guarantees.</p>\n\n<p> <p>To maintain the specified guarantees, default implementations of\n methods including <a href=\"#!/api/java.util.concurrent.ConcurrentMap-method-putIfAbsent\" rel=\"java.util.concurrent.ConcurrentMap-method-putIfAbsent\" class=\"docClass\">putIfAbsent</a> inherited from Map\n must be overridden by implementations of this interface. Similarly,\n implementations of the collections returned by methods keySet, values, and entrySet must override\n methods such as {@code removeIf} when necessary to\n preserve atomicity guarantees.</p>\n\n<p> <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code ConcurrentMap} as a key or value\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that object from\n the {@code ConcurrentMap} in another thread.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><K> the type of keys maintained by this map</K></p>\n</div></li><li><span class='pre'></span> : <div class='sub-desc'><p><V> the type of mapped values</V></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-compute' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-compute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-compute' class='name expandable'>compute</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec The default implementation is equivalent to performing the following\n steps for this {@code m...</div><div class='long'><p>{@inheritDoc}\n@implSpec The default implementation is equivalent to performing the following\n steps for this {@code map}:</p>\n\n<p> <pre> {@code\n for (;;) {\n   V oldValue = map.get(key);\n   V newValue = remappingFunction.apply(key, oldValue);\n   if (newValue != null) {\n     if ((oldValue != null)\n       ? map.replace(key, oldValue, newValue)\n       : map.putIfAbsent(key, newValue) == null)\n       return newValue;\n   } else if (oldValue == null || map.remove(key, oldValue)) {\n     return null;\n   }\n }}</pre>\n When multiple threads attempt updates, map operations and the\n remapping function may be called multiple times.</p>\n\n<p> <p>This implementation assumes that the ConcurrentMap cannot contain null\n values and {@code get()} returning null unambiguously means the key is\n absent. Implementations which support null values <strong>must</strong>\n override this default implementation.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-computeIfAbsent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-computeIfAbsent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-computeIfAbsent' class='name expandable'>computeIfAbsent</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec The default implementation is equivalent to the following steps for this\n {@code map}:\n\n  {@c...</div><div class='long'><p>{@inheritDoc}\n@implSpec The default implementation is equivalent to the following steps for this\n {@code map}:</p>\n\n<p> <pre> {@code\n V oldValue, newValue;\n return ((oldValue = map.get(key)) == null\n         &amp;&amp; (newValue = mappingFunction.apply(key)) != null\n         &amp;&amp; (oldValue = map.putIfAbsent(key, newValue)) == null)\n   ? newValue\n   : oldValue;}</pre></p>\n\n<p> <p>This implementation assumes that the ConcurrentMap cannot contain null\n values and {@code get()} returning null unambiguously means the key is\n absent. Implementations which support null values <strong>must</strong>\n override this default implementation.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-computeIfPresent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-computeIfPresent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-computeIfPresent' class='name expandable'>computeIfPresent</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec The default implementation is equivalent to performing the following\n steps for this {@code m...</div><div class='long'><p>{@inheritDoc}\n@implSpec The default implementation is equivalent to performing the following\n steps for this {@code map}:</p>\n\n<p> <pre> {@code\n for (V oldValue; (oldValue = map.get(key)) != null; ) {\n   V newValue = remappingFunction.apply(key, oldValue);\n   if ((newValue == null)\n       ? map.remove(key, oldValue)\n       : map.replace(key, oldValue, newValue))\n     return newValue;\n }\n return null;}</pre>\n When multiple threads attempt updates, map operations and the\n remapping function may be called multiple times.</p>\n\n<p> <p>This implementation assumes that the ConcurrentMap cannot contain null\n values and {@code get()} returning null unambiguously means the key is\n absent. Implementations which support null values <strong>must</strong>\n override this default implementation.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-forEach' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-forEach' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-forEach' class='name expandable'>forEach</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec The default implementation is equivalent to, for this\n {@code map}:\n  {@code\n for (Map.Entry&...</div><div class='long'><p>{@inheritDoc}\n@implSpec The default implementation is equivalent to, for this\n {@code map}:\n <pre> {@code\n for (Map.Entry&lt;K,V> entry : map.entrySet()) {\n   action.accept(entry.getKey(), entry.getValue());\n }}</pre>\n@implNote The default implementation assumes that\n {@code IllegalStateException} thrown by {@code getKey()} or\n {@code getValue()} indicates that the entry has been removed and cannot\n be processed. Operation continues for subsequent entries.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-getOrDefault' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-getOrDefault' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-getOrDefault' class='name expandable'>getOrDefault</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implNote This implementation assumes that the ConcurrentMap cannot\n contain null values and {@code get...</div><div class='long'><p>{@inheritDoc}\n@implNote This implementation assumes that the ConcurrentMap cannot\n contain null values and {@code get()} returning null unambiguously means\n the key is absent. Implementations which support null values\n <strong>must</strong> override this default implementation.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-merge' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-merge' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-merge' class='name expandable'>merge</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec The default implementation is equivalent to performing the following\n steps for this {@code m...</div><div class='long'><p>{@inheritDoc}\n@implSpec The default implementation is equivalent to performing the following\n steps for this {@code map}:</p>\n\n<p> <pre> {@code\n for (;;) {\n   V oldValue = map.get(key);\n   if (oldValue != null) {\n     V newValue = remappingFunction.apply(oldValue, value);\n     if (newValue != null) {\n       if (map.replace(key, oldValue, newValue))\n         return newValue;\n     } else if (map.remove(key, oldValue)) {\n       return null;\n     }\n   } else if (map.putIfAbsent(key, value) == null) {\n     return value;\n   }\n }}</pre>\n When multiple threads attempt updates, map operations and the\n remapping function may be called multiple times.</p>\n\n<p> <p>This implementation assumes that the ConcurrentMap cannot contain null\n values and {@code get()} returning null unambiguously means the key is\n absent. Implementations which support null values <strong>must</strong>\n override this default implementation.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-putIfAbsent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-putIfAbsent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-putIfAbsent' class='name expandable'>putIfAbsent</a>( <span class='pre'>key, value, value</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>If the specified key is not already associated\n with a value, associates it with the given value. ...</div><div class='long'><p>If the specified key is not already associated\n with a value, associates it with the given value.\n This is equivalent to, for this {@code map}:\n <pre> {@code\n if (!map.containsKey(key))\n   return map.put(key, value);\n else\n   return map.get(key);}</pre></p>\n\n<p> except that the action is performed atomically.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : Object {Object}<div class='sub-desc'><p>key with which the specified value is to be associated</p>\n</div></li><li><span class='pre'>value</span> : Object {Object}<div class='sub-desc'><p>value to be associated with the specified key</p>\n</div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>value to be associated with the specified key</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the previous value associated with the specified key, or\n         {@code null} if there was no mapping for the key.\n         (A {@code null} return can also indicate that the map\n         previously associated {@code null} with the key,\n         if the implementation supports null values.)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the {@code put} operation\n         is not supported by this map</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified key or value\n         prevents it from being stored in this map</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified key or value is null,\n         and this map does not permit null keys or values</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified key\n         or value prevents it from being stored in this map</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-remove' class='name expandable'>remove</a>( <span class='pre'>key, value, value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the entry for a key only if currently mapped to a given value. ...</div><div class='long'><p>Removes the entry for a key only if currently mapped to a given value.\n This is equivalent to, for this {@code map}:\n <pre> {@code\n if (map.containsKey(key)\n     &amp;&amp; Objects.equals(map.get(key), value)) {\n   map.remove(key);\n   return true;\n } else {\n   return false;\n }}</pre></p>\n\n<p> except that the action is performed atomically.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : Object {Object}<div class='sub-desc'><p>key with which the specified value is associated</p>\n</div></li><li><span class='pre'>value</span> : Object {Object}<div class='sub-desc'><p>value expected to be associated with the specified key</p>\n</div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>value expected to be associated with the specified key</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the value was removed</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the {@code remove} operation\n         is not supported by this map</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the key or value is of an inappropriate\n         type for this map\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified key or value is null,\n         and this map does not permit null keys or values\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li></ul></div></div></div><div id='method-replace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-replace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-replace' class='name expandable'>replace</a>( <span class='pre'>key, value, value</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Replaces the entry for a key only if currently mapped to some value. ...</div><div class='long'><p>Replaces the entry for a key only if currently mapped to some value.\n This is equivalent to, for this {@code map}:\n <pre> {@code\n if (map.containsKey(key))\n   return map.put(key, value);\n else\n   return null;}</pre></p>\n\n<p> except that the action is performed atomically.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : Object {Object}<div class='sub-desc'><p>key with which the specified value is associated</p>\n</div></li><li><span class='pre'>value</span> : Object {Object}<div class='sub-desc'><p>value to be associated with the specified key</p>\n</div></li><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>value to be associated with the specified key</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the previous value associated with the specified key, or\n         {@code null} if there was no mapping for the key.\n         (A {@code null} return can also indicate that the map\n         previously associated {@code null} with the key,\n         if the implementation supports null values.)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the {@code put} operation\n         is not supported by this map</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified key or value\n         prevents it from being stored in this map</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified key or value is null,\n         and this map does not permit null keys or values</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified key\n         or value prevents it from being stored in this map</p>\n</div></li></ul></div></div></div><div id='method-replaceAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ConcurrentMap'>java.util.concurrent.ConcurrentMap</span><br/><a href='source/ConcurrentMap.html#java-util-concurrent-ConcurrentMap-method-replaceAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ConcurrentMap-method-replaceAll' class='name expandable'>replaceAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n@implSpec The default implementation is equivalent to, for this {@code map}:\n  {@code\n for (Map.Entry&l...</div><div class='long'><p>{@inheritDoc}\n@implSpec <p>The default implementation is equivalent to, for this {@code map}:\n <pre> {@code\n for (Map.Entry&lt;K,V> entry : map.entrySet()) {\n   K k;\n   V v;\n   do {\n     k = entry.getKey();\n     v = entry.getValue();\n   } while (!map.replace(k, v, function.apply(k, v)));\n }}</pre></p>\n\n<p> The default implementation may retry these steps when multiple\n threads attempt updates including potentially calling the function\n repeatedly for a given key.</p>\n\n<p> <p>This implementation assumes that the ConcurrentMap cannot contain null\n values and {@code get()} returning null unambiguously means the key is\n absent. Implementations which support null values <strong>must</strong>\n override this default implementation.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});