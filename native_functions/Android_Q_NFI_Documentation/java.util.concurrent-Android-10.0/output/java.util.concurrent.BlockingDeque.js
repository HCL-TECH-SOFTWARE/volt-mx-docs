Ext.data.JsonP.java_util_concurrent_BlockingDeque({"tagname":"class","name":"java.util.concurrent.BlockingDeque","autodetected":{},"files":[{"filename":"BlockingDeque.js","href":"BlockingDeque.html#java-util-concurrent-BlockingDeque"}],"since":"1.6","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><E> the type of elements held in this deque</E></p>\n"}],"members":[{"name":"add","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-add","meta":{}},{"name":"addFirst","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-addFirst","meta":{}},{"name":"addLast","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-addLast","meta":{}},{"name":"contains","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-contains","meta":{}},{"name":"element","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-element","meta":{}},{"name":"iterator","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-iterator","meta":{}},{"name":"offer","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-offer","meta":{}},{"name":"offerFirst","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-offerFirst","meta":{}},{"name":"offerLast","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-offerLast","meta":{}},{"name":"peek","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-peek","meta":{}},{"name":"poll","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-poll","meta":{}},{"name":"pollFirst","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-pollFirst","meta":{}},{"name":"pollLast","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-pollLast","meta":{}},{"name":"push","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-push","meta":{}},{"name":"put","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-put","meta":{}},{"name":"putFirst","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-putFirst","meta":{}},{"name":"putLast","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-putLast","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-remove","meta":{}},{"name":"removeFirstOccurrence","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-removeFirstOccurrence","meta":{}},{"name":"removeLastOccurrence","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-removeLastOccurrence","meta":{}},{"name":"size","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-size","meta":{}},{"name":"take","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-take","meta":{}},{"name":"takeFirst","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-takeFirst","meta":{}},{"name":"takeLast","tagname":"method","owner":"java.util.concurrent.BlockingDeque","id":"method-takeLast","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.BlockingDeque","short_doc":"implements java.util.concurrent.BlockingQueue\n\n implements java.util.Deque\n\n A Deque that additionally supports block...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque' target='_blank'>BlockingDeque.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a></p>\n\n<p> implements java.util.Deque</p>\n\n<p> A Deque that additionally supports blocking operations that wait\n for the deque to become non-empty when retrieving an element, and wait for\n space to become available in the deque when storing an element.</p>\n\n<p> <p>{@code BlockingDeque} methods come in four forms, with different ways\n of handling operations that cannot be satisfied immediately, but may be\n satisfied at some point in the future:\n one throws an exception, the second returns a special value (either\n {@code null} or {@code false}, depending on the operation), the third\n blocks the current thread indefinitely until the operation can succeed,\n and the fourth blocks for only a given maximum time limit before giving\n up.  These methods are summarized in the following table:</p>\n\n<p> <table BORDER CELLPADDING=3 CELLSPACING=1>\n <caption>Summary of BlockingDeque methods</caption>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 5> <b>First Element (Head)</b></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Blocks</em></td>\n    <td ALIGN=CENTER><em>Times out</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingDeque-method-addFirst\" rel=\"java.util.concurrent.BlockingDeque-method-addFirst\" class=\"docClass\">addFirst(e)</a></td>\n    <td>offerFirst(e)</td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingDeque-method-putFirst\" rel=\"java.util.concurrent.BlockingDeque-method-putFirst\" class=\"docClass\">putFirst(e)</a></td>\n    <td>long, java.util.concurrent.TimeUnit) offerFirst(e, time, unit)</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>removeFirst()</td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingDeque-method-pollFirst\" rel=\"java.util.concurrent.BlockingDeque-method-pollFirst\" class=\"docClass\">pollFirst()</a></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingDeque-method-takeFirst\" rel=\"java.util.concurrent.BlockingDeque-method-takeFirst\" class=\"docClass\">takeFirst()</a></td>\n    <td>java.util.concurrent.TimeUnit) pollFirst(time, unit)</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>getFirst()</td>\n    <td>peekFirst()</td>\n    <td><em>not applicable</em></td>\n    <td><em>not applicable</em></td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 5> <b>Last Element (Tail)</b></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Blocks</em></td>\n    <td ALIGN=CENTER><em>Times out</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingDeque-method-addLast\" rel=\"java.util.concurrent.BlockingDeque-method-addLast\" class=\"docClass\">addLast(e)</a></td>\n    <td>offerLast(e)</td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingDeque-method-putLast\" rel=\"java.util.concurrent.BlockingDeque-method-putLast\" class=\"docClass\">putLast(e)</a></td>\n    <td>long, java.util.concurrent.TimeUnit) offerLast(e, time, unit)</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td>removeLast()</td>\n    <td>pollLast()</td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingDeque-method-takeLast\" rel=\"java.util.concurrent.BlockingDeque-method-takeLast\" class=\"docClass\">takeLast()</a></td>\n    <td>java.util.concurrent.TimeUnit) pollLast(time, unit)</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>getLast()</td>\n    <td>peekLast()</td>\n    <td><em>not applicable</em></td>\n    <td><em>not applicable</em></td>\n  </tr>\n </table></p>\n\n<p> <p>Like any <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a>, a {@code BlockingDeque} is thread safe,\n does not permit null elements, and may (or may not) be\n capacity-constrained.</p>\n\n<p> <p>A {@code BlockingDeque} implementation may be used directly as a FIFO\n {@code BlockingQueue}. The methods inherited from the\n {@code BlockingQueue} interface are precisely equivalent to\n {@code BlockingDeque} methods as indicated in the following table:</p>\n\n<p> <table BORDER CELLPADDING=3 CELLSPACING=1>\n <caption>Comparison of BlockingQueue and BlockingDeque methods</caption>\n  <tr>\n    <td ALIGN=CENTER> <b>{@code BlockingQueue} Method</b></td>\n    <td ALIGN=CENTER> <b>Equivalent {@code BlockingDeque} Method</b></td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Insert</b></td>\n  </tr>\n  <tr>\n    <td>add(e)</td>\n    <td>addLast(e)</td>\n  </tr>\n  <tr>\n    <td>offer(e)</td>\n    <td>offerLast(e)</td>\n  </tr>\n  <tr>\n    <td>put(e)</td>\n    <td>putLast(e)</td>\n  </tr>\n  <tr>\n    <td>long, java.util.concurrent.TimeUnit) offer(e, time, unit)</td>\n    <td>long, java.util.concurrent.TimeUnit) offerLast(e, time, unit)</td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Remove</b></td>\n  </tr>\n  <tr>\n    <td>remove()</td>\n    <td>removeFirst()</td>\n  </tr>\n  <tr>\n    <td>poll()</td>\n    <td>pollFirst()</td>\n  </tr>\n  <tr>\n    <td>take()</td>\n    <td>takeFirst()</td>\n  </tr>\n  <tr>\n    <td>java.util.concurrent.TimeUnit) poll(time, unit)</td>\n    <td>java.util.concurrent.TimeUnit) pollFirst(time, unit)</td>\n  </tr>\n  <tr>\n    <td ALIGN=CENTER COLSPAN = 2> <b>Examine</b></td>\n  </tr>\n  <tr>\n    <td>element()</td>\n    <td>getFirst()</td>\n  </tr>\n  <tr>\n    <td>peek()</td>\n    <td>peekFirst()</td>\n  </tr>\n </table></p>\n\n<p> <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code BlockingDeque}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code BlockingDeque} in another thread.</p>\n\n<p> <p>This interface is a member of the\n <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/collections/index.html\">\n Java Collections Framework</a>.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E> the type of elements held in this deque</E></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-add' class='name expandable'>add</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) i...</div><div class='long'><p>Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque) if it is possible to do so\n immediately without violating capacity restrictions, returning\n {@code true} upon success and throwing an\n {@code IllegalStateException} if no space is currently available.\n When using a capacity-restricted deque, it is generally preferable to\n use offer.</p>\n\n<p> <p>This method is equivalent to addLast.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this deque</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque</p>\n</div></li></ul></div></div></div><div id='method-addFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-addFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-addFirst' class='name expandable'>addFirst</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating ca...</div><div class='long'><p>Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an {@code IllegalStateException} if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use offerFirst.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-addLast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-addLast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-addLast' class='name expandable'>addLast</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capa...</div><div class='long'><p>Inserts the specified element at the end of this deque if it is\n possible to do so immediately without violating capacity restrictions,\n throwing an {@code IllegalStateException} if no space is currently\n available.  When using a capacity-restricted deque, it is generally\n preferable to use offerLast.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-contains' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-contains' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-contains' class='name expandable'>contains</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this deque contains the specified element. ...</div><div class='long'><p>Returns {@code true} if this deque contains the specified element.\n More formally, returns {@code true} if and only if this deque contains\n at least one element {@code e} such that {@code o.equals(e)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>object to be checked for containment in this deque</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this deque contains the specified element</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         is incompatible with this deque\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li></ul></div></div></div><div id='method-element' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-element' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-element' class='name expandable'>element</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element o...</div><div class='long'><p>Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque).\n This method differs from <a href=\"#!/api/java.util.concurrent.BlockingDeque-method-peek\" rel=\"java.util.concurrent.BlockingDeque-method-peek\" class=\"docClass\">peek</a> only in that it throws an\n exception if this deque is empty.</p>\n\n<p> <p>This method is equivalent to getFirst.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the head of this deque</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchElementException if this deque is empty</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iterator over the elements in this deque in proper sequence. ...</div><div class='long'><p>Returns an iterator over the elements in this deque in proper sequence.\n The elements will be returned in order from first (head) to last (tail).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>an iterator over the elements in this deque in proper sequence</p>\n</div></li></ul></div></div></div><div id='method-offer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-offer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-offer' class='name expandable'>offer</a>( <span class='pre'>e</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), ...</div><div class='long'><p>Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting up to the\n specified wait time if necessary for space to become available.</p>\n\n<p> <p>This method is equivalent to\n offerLast.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the element was added to this deque, else\n         {@code false}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this deque</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque</p>\n</div></li></ul></div></div></div><div id='method-offerFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-offerFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-offerFirst' class='name expandable'>offerFirst</a>( <span class='pre'>e, timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the front of this deque,\n waiting up to the specified wait time if necessary for spa...</div><div class='long'><p>Inserts the specified element at the front of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, or {@code false} if\n         the specified waiting time elapses before space is available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this deque</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque</p>\n</div></li></ul></div></div></div><div id='method-offerLast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-offerLast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-offerLast' class='name expandable'>offerLast</a>( <span class='pre'>e, timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the end of this deque,\n waiting up to the specified wait time if necessary for space...</div><div class='long'><p>Inserts the specified element at the end of this deque,\n waiting up to the specified wait time if necessary for space to\n become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, or {@code false} if\n         the specified waiting time elapses before space is available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this deque</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque</p>\n</div></li></ul></div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-peek' class='name expandable'>peek</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element o...</div><div class='long'><p>Retrieves, but does not remove, the head of the queue represented by\n this deque (in other words, the first element of this deque), or\n returns {@code null} if this deque is empty.</p>\n\n<p> <p>This method is equivalent to peekFirst.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the head of this deque, or {@code null} if this deque is empty</p>\n</div></li></ul></div></div></div><div id='method-poll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-poll' class='name expandable'>poll</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deq...</div><div class='long'><p>Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting up to the\n specified wait time if necessary for an element to become available.</p>\n\n<p> <p>This method is equivalent to\n pollFirst.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the head of this deque, or {@code null} if the\n         specified waiting time elapses before an element is available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-pollFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-pollFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-pollFirst' class='name expandable'>pollFirst</a>( <span class='pre'>timeout, unit</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the first element of this deque, waiting\n up to the specified wait time if necessary for an ele...</div><div class='long'><p>Retrieves and removes the first element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the head of this deque, or {@code null} if the specified\n         waiting time elapses before an element is available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-pollLast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-pollLast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-pollLast' class='name expandable'>pollLast</a>( <span class='pre'>timeout, unit</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the last element of this deque, waiting\n up to the specified wait time if necessary for an elem...</div><div class='long'><p>Retrieves and removes the last element of this deque, waiting\n up to the specified wait time if necessary for an element to\n become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the tail of this deque, or {@code null} if the specified\n         waiting time elapses before an element is available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-push' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-push' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-push' class='name expandable'>push</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is poss...</div><div class='long'><p>Pushes an element onto the stack represented by this deque (in other\n words, at the head of this deque) if it is possible to do so\n immediately without violating capacity restrictions, throwing an\n {@code IllegalStateException} if no space is currently available.</p>\n\n<p> <p>This method is equivalent to addFirst.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-put' class='name expandable'>put</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), ...</div><div class='long'><p>Inserts the specified element into the queue represented by this deque\n (in other words, at the tail of this deque), waiting if necessary for\n space to become available.</p>\n\n<p> <p>This method is equivalent to putLast.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this deque</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque</p>\n</div></li></ul></div></div></div><div id='method-putFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-putFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-putFirst' class='name expandable'>putFirst</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the front of this deque,\n waiting if necessary for space to become available. ...</div><div class='long'><p>Inserts the specified element at the front of this deque,\n waiting if necessary for space to become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this deque</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque</p>\n</div></li></ul></div></div></div><div id='method-putLast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-putLast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-putLast' class='name expandable'>putLast</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the end of this deque,\n waiting if necessary for space to become available. ...</div><div class='long'><p>Inserts the specified element at the end of this deque,\n waiting if necessary for space to become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this deque</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this deque</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-remove' class='name expandable'>remove</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the first occurrence of the specified element from this deque. ...</div><div class='long'><p>Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element {@code e} such that\n {@code o.equals(e)} (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).</p>\n\n<p> <p>This method is equivalent to\n removeFirstOccurrence.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>element to be removed from this deque, if present</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this deque changed as a result of the call</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         is incompatible with this deque\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li></ul></div></div></div><div id='method-removeFirstOccurrence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-removeFirstOccurrence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-removeFirstOccurrence' class='name expandable'>removeFirstOccurrence</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the first occurrence of the specified element from this deque. ...</div><div class='long'><p>Removes the first occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the first element {@code e} such that\n {@code o.equals(e)} (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>element to be removed from this deque, if present</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if an element was removed as a result of this call</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         is incompatible with this deque\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li></ul></div></div></div><div id='method-removeLastOccurrence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-removeLastOccurrence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-removeLastOccurrence' class='name expandable'>removeLastOccurrence</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the last occurrence of the specified element from this deque. ...</div><div class='long'><p>Removes the last occurrence of the specified element from this deque.\n If the deque does not contain the element, it is unchanged.\n More formally, removes the last element {@code e} such that\n {@code o.equals(e)} (if such an element exists).\n Returns {@code true} if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>element to be removed from this deque, if present</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if an element was removed as a result of this call</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         is incompatible with this deque\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-size' class='name expandable'>size</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of elements in this deque. ...</div><div class='long'><p>Returns the number of elements in this deque.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of elements in this deque</p>\n</div></li></ul></div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-take' class='name expandable'>take</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deq...</div><div class='long'><p>Retrieves and removes the head of the queue represented by this deque\n (in other words, the first element of this deque), waiting if\n necessary until an element becomes available.</p>\n\n<p> <p>This method is equivalent to takeFirst.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the head of this deque</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-takeFirst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-takeFirst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-takeFirst' class='name expandable'>takeFirst</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the first element of this deque, waiting\n if necessary until an element becomes available. ...</div><div class='long'><p>Retrieves and removes the first element of this deque, waiting\n if necessary until an element becomes available.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the head of this deque</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-takeLast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingDeque'>java.util.concurrent.BlockingDeque</span><br/><a href='source/BlockingDeque.html#java-util-concurrent-BlockingDeque-method-takeLast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingDeque-method-takeLast' class='name expandable'>takeLast</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the last element of this deque, waiting\n if necessary until an element becomes available. ...</div><div class='long'><p>Retrieves and removes the last element of this deque, waiting\n if necessary until an element becomes available.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the tail of this deque</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});