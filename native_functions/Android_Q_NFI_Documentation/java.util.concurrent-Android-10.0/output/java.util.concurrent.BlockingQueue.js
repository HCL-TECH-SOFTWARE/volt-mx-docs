Ext.data.JsonP.java_util_concurrent_BlockingQueue({"tagname":"class","name":"java.util.concurrent.BlockingQueue","autodetected":{},"files":[{"filename":"BlockingQueue.js","href":"BlockingQueue.html#java-util-concurrent-BlockingQueue"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><E> the type of elements held in this queue</E></p>\n"}],"members":[{"name":"add","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-add","meta":{}},{"name":"contains","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-contains","meta":{}},{"name":"drainTo","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-drainTo","meta":{}},{"name":"offer","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-offer","meta":{}},{"name":"poll","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-poll","meta":{}},{"name":"put","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-put","meta":{}},{"name":"remainingCapacity","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-remainingCapacity","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-remove","meta":{}},{"name":"take","tagname":"method","owner":"java.util.concurrent.BlockingQueue","id":"method-take","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.BlockingQueue","short_doc":"implements java.util.Queue\n\n A java.util.Queue that additionally supports operations\n that wait for the queue to beco...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue' target='_blank'>BlockingQueue.js</a></div></pre><div class='doc-contents'><p>implements java.util.Queue</p>\n\n<p> A java.util.Queue that additionally supports operations\n that wait for the queue to become non-empty when retrieving an\n element, and wait for space to become available in the queue when\n storing an element.</p>\n\n<p> <p>{@code BlockingQueue} methods come in four forms, with different ways\n of handling operations that cannot be satisfied immediately, but may be\n satisfied at some point in the future:\n one throws an exception, the second returns a special value (either\n {@code null} or {@code false}, depending on the operation), the third\n blocks the current thread indefinitely until the operation can succeed,\n and the fourth blocks for only a given maximum time limit before giving\n up.  These methods are summarized in the following table:</p>\n\n<p> <table BORDER CELLPADDING=3 CELLSPACING=1>\n <caption>Summary of BlockingQueue methods</caption>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER><em>Throws exception</em></td>\n    <td ALIGN=CENTER><em>Special value</em></td>\n    <td ALIGN=CENTER><em>Blocks</em></td>\n    <td ALIGN=CENTER><em>Times out</em></td>\n  </tr>\n  <tr>\n    <td><b>Insert</b></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingQueue-method-add\" rel=\"java.util.concurrent.BlockingQueue-method-add\" class=\"docClass\">add(e)</a></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingQueue-method-offer\" rel=\"java.util.concurrent.BlockingQueue-method-offer\" class=\"docClass\">offer(e)</a></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingQueue-method-put\" rel=\"java.util.concurrent.BlockingQueue-method-put\" class=\"docClass\">put(e)</a></td>\n    <td>long, java.util.concurrent.TimeUnit) offer(e, time, unit)</td>\n  </tr>\n  <tr>\n    <td><b>Remove</b></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingQueue-method-remove\" rel=\"java.util.concurrent.BlockingQueue-method-remove\" class=\"docClass\">remove()</a></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingQueue-method-poll\" rel=\"java.util.concurrent.BlockingQueue-method-poll\" class=\"docClass\">poll()</a></td>\n    <td><a href=\"#!/api/java.util.concurrent.BlockingQueue-method-take\" rel=\"java.util.concurrent.BlockingQueue-method-take\" class=\"docClass\">take()</a></td>\n    <td>java.util.concurrent.TimeUnit) poll(time, unit)</td>\n  </tr>\n  <tr>\n    <td><b>Examine</b></td>\n    <td>element()</td>\n    <td>peek()</td>\n    <td><em>not applicable</em></td>\n    <td><em>not applicable</em></td>\n  </tr>\n </table></p>\n\n<p> <p>A {@code BlockingQueue} does not accept {@code null} elements.\n Implementations throw {@code NullPointerException} on attempts\n to {@code add}, {@code put} or {@code offer} a {@code null}.  A\n {@code null} is used as a sentinel value to indicate failure of\n {@code poll} operations.</p>\n\n<p> <p>A {@code BlockingQueue} may be capacity bounded. At any given\n time it may have a {@code remainingCapacity} beyond which no\n additional elements can be {@code put} without blocking.\n A {@code BlockingQueue} without any intrinsic capacity constraints always\n reports a remaining capacity of {@code Integer.MAX_VALUE}.</p>\n\n<p> <p>{@code BlockingQueue} implementations are designed to be used\n primarily for producer-consumer queues, but additionally support\n the java.util.Collection interface.  So, for example, it is\n possible to remove an arbitrary element from a queue using\n {@code remove(x)}. However, such operations are in general\n <em>not</em> performed very efficiently, and are intended for only\n occasional use, such as when a queued message is cancelled.</p>\n\n<p> <p>{@code BlockingQueue} implementations are thread-safe.  All\n queuing methods achieve their effects atomically using internal\n locks or other forms of concurrency control. However, the\n <em>bulk</em> Collection operations {@code addAll},\n {@code containsAll}, {@code retainAll} and {@code removeAll} are\n <em>not</em> necessarily performed atomically unless specified\n otherwise in an implementation. So it is possible, for example, for\n {@code addAll(c)} to fail (throwing an exception) after adding\n only some of the elements in {@code c}.</p>\n\n<p> <p>A {@code BlockingQueue} does <em>not</em> intrinsically support\n any kind of &quot;close&quot; or &quot;shutdown&quot; operation to\n indicate that no more items will be added.  The needs and usage of\n such features tend to be implementation-dependent. For example, a\n common tactic is for producers to insert special\n <em>end-of-stream</em> or <em>poison</em> objects, that are\n interpreted accordingly when taken by consumers.</p>\n\n<p> <p>\n Usage example, based on a typical producer-consumer scenario.\n Note that a {@code BlockingQueue} can safely be used with multiple\n producers and multiple consumers.\n <pre> {@code\n class Producer implements Runnable {\n   private final BlockingQueue queue;\n   Producer(BlockingQueue q) { queue = q; }\n   public void run() {\n     try {\n       while (true) { queue.put(produce()); }\n     } catch (InterruptedException ex) { ... handle ...}\n   }\n   Object produce() { ... }\n }</pre></p>\n\n<p> class Consumer implements Runnable {\n   private final BlockingQueue queue;\n   Consumer(BlockingQueue q) { queue = q; }\n   public void run() {\n     try {\n       while (true) { consume(queue.take()); }\n     } catch (InterruptedException ex) { ... handle ...}\n   }\n   void consume(Object x) { ... }\n }</p>\n\n<p> class Setup {\n   void main() {\n     BlockingQueue q = new SomeQueueImplementation();\n     Producer p = new Producer(q);\n     Consumer c1 = new Consumer(q);\n     Consumer c2 = new Consumer(q);\n     new Thread(p).start();\n     new Thread(c1).start();\n     new Thread(c2).start();\n   }\n }}</p>\n\n<p> <p>Memory consistency effects: As with other concurrent\n collections, actions in a thread prior to placing an object into a\n {@code BlockingQueue}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions subsequent to the access or removal of that element from\n the {@code BlockingQueue} in another thread.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E> the type of elements held in this queue</E></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-add' class='name expandable'>add</a>( <span class='pre'>e</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity rest...</div><div class='long'><p>Inserts the specified element into this queue if it is possible to do\n so immediately without violating capacity restrictions, returning\n {@code true} upon success and throwing an\n {@code IllegalStateException} if no space is currently available.\n When using a capacity-restricted queue, it is generally preferable to\n use offer.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by Collection.add)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the element cannot be added at this\n         time due to capacity restrictions</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this queue</p>\n</div></li></ul></div></div></div><div id='method-contains' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-contains' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-contains' class='name expandable'>contains</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this queue contains the specified element. ...</div><div class='long'><p>Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>object to be checked for containment in this queue</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue contains the specified element</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         is incompatible with this queue\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li></ul></div></div></div><div id='method-drainTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-drainTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-drainTo' class='name expandable'>drainTo</a>( <span class='pre'>c, maxElements</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes at most the given number of available elements from\n this queue and adds them to the given collection. ...</div><div class='long'><p>Removes at most the given number of available elements from\n this queue and adds them to the given collection.  A failure\n encountered while attempting to add elements to\n collection {@code c} may result in elements being in neither,\n either or both collections when the associated exception is\n thrown.  Attempts to drain a queue to itself result in\n {@code IllegalArgumentException}. Further, the behavior of\n this operation is undefined if the specified collection is\n modified while the operation is in progress.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : Object {java.util.Collection}<div class='sub-desc'><p>the collection to transfer elements into</p>\n</div></li><li><span class='pre'>maxElements</span> : Number<div class='sub-desc'><p>the maximum number of elements to transfer</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of elements transferred</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if addition of elements\n         is not supported by the specified collection</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of an element of this queue\n         prevents it from being added to the specified collection</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified collection is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the specified collection is this\n         queue, or some property of an element of this queue prevents\n         it from being added to the specified collection</p>\n</div></li></ul></div></div></div><div id='method-offer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-offer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-offer' class='name expandable'>offer</a>( <span class='pre'>e, timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this queue, waiting up to the\n specified wait time if necessary for space to becom...</div><div class='long'><p>Inserts the specified element into this queue, waiting up to the\n specified wait time if necessary for space to become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, or {@code false} if\n         the specified waiting time elapses before space is available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this queue</p>\n</div></li></ul></div></div></div><div id='method-poll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-poll' class='name expandable'>poll</a>( <span class='pre'>timeout, unit</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to b...</div><div class='long'><p>Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the head of this queue, or {@code null} if the\n         specified waiting time elapses before an element is available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-put' class='name expandable'>put</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this queue, waiting if necessary\n for space to become available. ...</div><div class='long'><p>Inserts the specified element into this queue, waiting if necessary\n for space to become available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this queue</p>\n</div></li></ul></div></div></div><div id='method-remainingCapacity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-remainingCapacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-remainingCapacity' class='name expandable'>remainingCapacity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constrai...</div><div class='long'><p>Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking, or {@code Integer.MAX_VALUE} if there is no intrinsic\n limit.</p>\n\n<p> <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting {@code remainingCapacity}\n because it may be the case that another thread is about to\n insert or remove an element.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the remaining capacity</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-remove' class='name expandable'>remove</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a single instance of the specified element from this queue,\n if it is present. ...</div><div class='long'><p>Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>element to be removed from this queue, if present</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue changed as a result of the call</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         is incompatible with this queue\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null\n (<a href=\"../Collection.html#optional-restrictions\">optional</a>)</p>\n</div></li></ul></div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.BlockingQueue'>java.util.concurrent.BlockingQueue</span><br/><a href='source/BlockingQueue.html#java-util-concurrent-BlockingQueue-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.BlockingQueue-method-take' class='name expandable'>take</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available. ...</div><div class='long'><p>Retrieves and removes the head of this queue, waiting if necessary\n until an element becomes available.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the head of this queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});