Ext.data.JsonP.java_util_concurrent_CompletionStage({"tagname":"class","name":"java.util.concurrent.CompletionStage","autodetected":{},"files":[{"filename":"CompletionStage.js","href":"CompletionStage.html#java-util-concurrent-CompletionStage"}],"author":[{"tagname":"author","name":"Doug Lea","email":null}],"since":"1.8","members":[{"name":"acceptEither","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-acceptEither","meta":{}},{"name":"acceptEitherAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-acceptEitherAsync","meta":{}},{"name":"applyToEither","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-applyToEither","meta":{}},{"name":"applyToEitherAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-applyToEitherAsync","meta":{}},{"name":"exceptionally","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-exceptionally","meta":{}},{"name":"handle","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-handle","meta":{}},{"name":"handleAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-handleAsync","meta":{}},{"name":"runAfterBoth","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-runAfterBoth","meta":{}},{"name":"runAfterBothAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-runAfterBothAsync","meta":{}},{"name":"runAfterEither","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-runAfterEither","meta":{}},{"name":"runAfterEitherAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-runAfterEitherAsync","meta":{}},{"name":"thenAccept","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenAccept","meta":{}},{"name":"thenAcceptAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenAcceptAsync","meta":{}},{"name":"thenAcceptBoth","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenAcceptBoth","meta":{}},{"name":"thenAcceptBothAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenAcceptBothAsync","meta":{}},{"name":"thenApply","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenApply","meta":{}},{"name":"thenApplyAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenApplyAsync","meta":{}},{"name":"thenCombine","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenCombine","meta":{}},{"name":"thenCombineAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenCombineAsync","meta":{}},{"name":"thenCompose","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenCompose","meta":{}},{"name":"thenComposeAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenComposeAsync","meta":{}},{"name":"thenRun","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenRun","meta":{}},{"name":"thenRunAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-thenRunAsync","meta":{}},{"name":"toCompletableFuture","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-toCompletableFuture","meta":{}},{"name":"whenComplete","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-whenComplete","meta":{}},{"name":"whenCompleteAsync","tagname":"method","owner":"java.util.concurrent.CompletionStage","id":"method-whenCompleteAsync","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.CompletionStage","short_doc":"A stage of a possibly asynchronous computation, that performs an\n action or computes a value when another CompletionS...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage' target='_blank'>CompletionStage.js</a></div></pre><div class='doc-contents'><p>A stage of a possibly asynchronous computation, that performs an\n action or computes a value when another CompletionStage completes.\n A stage completes upon termination of its computation, but this may\n in turn trigger other dependent stages.  The functionality defined\n in this interface takes only a few basic forms, which expand out to\n a larger set of methods to capture a range of usage styles:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>The computation performed by a stage may be expressed as a\n Function, Consumer, or Runnable (using methods with names including\n <em>apply</em>, <em>accept</em>, or <em>run</em>, respectively)\n depending on whether it requires arguments and/or produces results.\n For example:\n <pre> {@code\n stage.thenApply(x -> square(x))\n      .thenAccept(x -> System.out.print(x))\n      .thenRun(() -> System.out.println());}</pre></li></p>\n\n<p> An additional form (<em>compose</em>) allows the construction of\n computation pipelines from functions returning completion stages.</p>\n\n<p> <p>Any argument to a stage's computation is the outcome of a\n triggering stage's computation.</p>\n\n<p> <li>One stage's execution may be triggered by completion of a\n single stage, or both of two stages, or either of two stages.\n Dependencies on a single stage are arranged using methods with\n prefix <em>then</em>. Those triggered by completion of\n <em>both</em> of two stages may <em>combine</em> their results or\n effects, using correspondingly named methods. Those triggered by\n <em>either</em> of two stages make no guarantees about which of the\n results or effects are used for the dependent stage's computation.</li></p>\n\n<p> <li>Dependencies among stages control the triggering of\n computations, but do not otherwise guarantee any particular\n ordering. Additionally, execution of a new stage's computations may\n be arranged in any of three ways: default execution, default\n asynchronous execution (using methods with suffix <em>async</em>\n that employ the stage's default asynchronous execution facility),\n or custom (via a supplied <a href=\"#!/api/java.util.concurrent.Executor\" rel=\"java.util.concurrent.Executor\" class=\"docClass\">java.util.concurrent.Executor</a>).  The execution\n properties of default and async modes are specified by\n CompletionStage implementations, not this interface. Methods with\n explicit Executor arguments may have arbitrary execution\n properties, and might not even support concurrent execution, but\n are arranged for processing in a way that accommodates asynchrony.</li></p>\n\n<p> <li>Two method forms (<a href=\"#!/api/java.util.concurrent.CompletionStage-method-handle\" rel=\"java.util.concurrent.CompletionStage-method-handle\" class=\"docClass\">handle</a> and <a href=\"#!/api/java.util.concurrent.CompletionStage-method-whenComplete\" rel=\"java.util.concurrent.CompletionStage-method-whenComplete\" class=\"docClass\">whenComplete</a>) support unconditional computation\n whether the triggering stage completed normally or exceptionally.\n Method <a href=\"#!/api/java.util.concurrent.CompletionStage-method-exceptionally\" rel=\"java.util.concurrent.CompletionStage-method-exceptionally\" class=\"docClass\">exceptionally</a> supports computation\n only when the triggering stage completes exceptionally, computing a\n replacement result, similarly to the java {@code catch} keyword.\n In all other cases, if a stage's computation terminates abruptly\n with an (unchecked) exception or error, then all dependent stages\n requiring its completion complete exceptionally as well, with a\n <a href=\"#!/api/java.util.concurrent.CompletionException\" rel=\"java.util.concurrent.CompletionException\" class=\"docClass\">java.util.concurrent.CompletionException</a> holding the exception as its cause.  If\n a stage is dependent on <em>both</em> of two stages, and both\n complete exceptionally, then the CompletionException may correspond\n to either one of these exceptions.  If a stage is dependent on\n <em>either</em> of two others, and only one of them completes\n exceptionally, no guarantees are made about whether the dependent\n stage completes normally or exceptionally. In the case of method\n {@code whenComplete}, when the supplied action itself encounters an\n exception, then the stage completes exceptionally with this\n exception unless the source stage also completed exceptionally, in\n which case the exceptional completion from the source stage is\n given preference and propagated to the dependent stage.</li></p>\n\n<p> </p>\n\n<p> <p>All methods adhere to the above triggering, execution, and\n exceptional completion specifications (which are not repeated in\n individual method specifications). Additionally, while arguments\n used to pass a completion result (that is, for parameters of type\n {@code T}) for methods accepting them may be null, passing a null\n value for any other parameter will result in a NullPointerException being thrown.</p>\n\n<p> <p>Method form <a href=\"#!/api/java.util.concurrent.CompletionStage-method-handle\" rel=\"java.util.concurrent.CompletionStage-method-handle\" class=\"docClass\">handle</a> is the most general way of\n creating a continuation stage, unconditionally performing a\n computation that is given both the result and exception (if any) of\n the triggering CompletionStage, and computing an arbitrary result.\n Method <a href=\"#!/api/java.util.concurrent.CompletionStage-method-whenComplete\" rel=\"java.util.concurrent.CompletionStage-method-whenComplete\" class=\"docClass\">whenComplete</a> is similar, but preserves\n the result of the triggering stage instead of computing a new one.\n Because a stage's normal result may be {@code null}, both methods\n should have a computation structured thus:</p>\n\n<p> <pre>{@code (result, exception) -> {\n   if (exception == null) {\n     // triggering stage completed normally\n   } else {\n     // triggering stage completed exceptionally\n   }\n }}</pre></p>\n\n<p> <p>This interface does not define methods for initially creating,\n forcibly completing normally or exceptionally, probing completion\n status or results, or awaiting completion of a stage.\n Implementations of CompletionStage may provide means of achieving\n such effects, as appropriate.  Method <a href=\"#!/api/java.util.concurrent.CompletionStage-method-toCompletableFuture\" rel=\"java.util.concurrent.CompletionStage-method-toCompletableFuture\" class=\"docClass\">toCompletableFuture</a>\n enables interoperability among different implementations of this\n interface by providing a common conversion type.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-acceptEither' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-acceptEither' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-acceptEither' class='name expandable'>acceptEither</a>( <span class='pre'>other, action</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed with th...</div><div class='long'><p>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed with the\n corresponding result as argument to the supplied action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>action</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-acceptEitherAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-acceptEitherAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-acceptEitherAsync' class='name expandable'>acceptEitherAsync</a>( <span class='pre'>other, action, executor</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using t...</div><div class='long'><p>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using the\n supplied executor, with the corresponding result as argument to\n the supplied action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>action</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-applyToEither' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-applyToEither' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-applyToEither' class='name expandable'>applyToEither</a>( <span class='pre'>other, fn, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed with th...</div><div class='long'><p>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed with the\n corresponding result as argument to the supplied function.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>fn</span> : Object {java.util.function.Function}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the function's return type</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-applyToEitherAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-applyToEitherAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-applyToEitherAsync' class='name expandable'>applyToEitherAsync</a>( <span class='pre'>other, fn, executor, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using t...</div><div class='long'><p>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, is executed using the\n supplied executor, with the corresponding result as argument to\n the supplied function.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>fn</span> : Object {java.util.function.Function}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the function's return type</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-exceptionally' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-exceptionally' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-exceptionally' class='name expandable'>exceptionally</a>( <span class='pre'>fn</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n exceptionally, is executed with this stage's exception...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n exceptionally, is executed with this stage's exception as the\n argument to the supplied function.  Otherwise, if this stage\n completes normally, then the returned stage also completes\n normally with the same value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object {java.util.function.Function}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage if this CompletionStage completed\n exceptionally</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-handle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-handle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-handle' class='name expandable'>handle</a>( <span class='pre'>fn, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed with thi...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed with this stage's\n result and exception as arguments to the supplied function.</p>\n\n<p> <p>When this stage is complete, the given function is invoked\n with the result (or {@code null} if none) and the exception (or\n {@code null} if none) of this stage as arguments, and the\n function's result is used to complete the returned stage.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object {java.util.function.BiFunction}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the function's return type</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-handleAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-handleAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-handleAsync' class='name expandable'>handleAsync</a>( <span class='pre'>fn, executor, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed using th...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n either normally or exceptionally, is executed using the\n supplied executor, with this stage's result and exception as\n arguments to the supplied function.</p>\n\n<p> <p>When this stage is complete, the given function is invoked\n with the result (or {@code null} if none) and the exception (or\n {@code null} if none) of this stage as arguments, and the\n function's result is used to complete the returned stage.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object {java.util.function.BiFunction}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the function's return type</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-runAfterBoth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-runAfterBoth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-runAfterBoth' class='name expandable'>runAfterBoth</a>( <span class='pre'>other, action</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, executes the given a...</div><div class='long'><p>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, executes the given action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>action</span> : Object {Runnable}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-runAfterBothAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-runAfterBothAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-runAfterBothAsync' class='name expandable'>runAfterBothAsync</a>( <span class='pre'>other, action, executor</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, executes the given a...</div><div class='long'><p>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, executes the given action\n using the supplied executor.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>action</span> : Object {Runnable}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-runAfterEither' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-runAfterEither' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-runAfterEither' class='name expandable'>runAfterEither</a>( <span class='pre'>other, action</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given ...</div><div class='long'><p>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>action</span> : Object {Runnable}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-runAfterEitherAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-runAfterEitherAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-runAfterEitherAsync' class='name expandable'>runAfterEitherAsync</a>( <span class='pre'>other, action, executor</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given ...</div><div class='long'><p>Returns a new CompletionStage that, when either this or the\n other given stage complete normally, executes the given action\n using the supplied executor.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>action</span> : Object {Runnable}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenAccept' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenAccept' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenAccept' class='name expandable'>thenAccept</a>( <span class='pre'>action</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage's result as the ...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage's result as the argument\n to the supplied action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenAcceptAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenAcceptAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenAcceptAsync' class='name expandable'>thenAcceptAsync</a>( <span class='pre'>action, executor</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, wit...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, with this\n stage's result as the argument to the supplied action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {java.util.function.Consumer}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenAcceptBoth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenAcceptBoth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenAcceptBoth' class='name expandable'>thenAcceptBoth</a>( <span class='pre'>other, action, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed with the...</div><div class='long'><p>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed with the two\n results as arguments to the supplied action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>action</span> : Object {java.util.function.BiConsumer}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the type of the other CompletionStage's result</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenAcceptBothAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenAcceptBothAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenAcceptBothAsync' class='name expandable'>thenAcceptBothAsync</a>( <span class='pre'>other, action, executor, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed using th...</div><div class='long'><p>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed using the\n supplied executor, with the two results as arguments to the\n supplied action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>action</span> : Object {java.util.function.BiConsumer}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the type of the other CompletionStage's result</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenApply' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenApply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenApply' class='name expandable'>thenApply</a>( <span class='pre'>fn, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage's result as the ...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n normally, is executed with this stage's result as the argument\n to the supplied function.</p>\n\n<p> <p>This method is analogous to\n Optional.map and\n Stream.map.</p>\n\n<p> <p>See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object {java.util.function.Function}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the function's return type</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenApplyAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenApplyAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenApplyAsync' class='name expandable'>thenApplyAsync</a>( <span class='pre'>fn, executor, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, wit...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n normally, is executed using the supplied Executor, with this\n stage's result as the argument to the supplied function.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object {java.util.function.Function}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the function's return type</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenCombine' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenCombine' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenCombine' class='name expandable'>thenCombine</a>( <span class='pre'>other, fn, , </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed with the...</div><div class='long'><p>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed with the two\n results as arguments to the supplied function.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>fn</span> : Object {java.util.function.BiFunction}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the type of the other CompletionStage's result</U></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><V> the function's return type</V></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenCombineAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenCombineAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenCombineAsync' class='name expandable'>thenCombineAsync</a>( <span class='pre'>other, fn, executor, , </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed using th...</div><div class='long'><p>Returns a new CompletionStage that, when this and the other\n given stage both complete normally, is executed using the\n supplied executor, with the two results as arguments to the\n supplied function.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {java.util.concurrent.CompletionStage}<div class='sub-desc'><p>the other CompletionStage</p>\n</div></li><li><span class='pre'>fn</span> : Object {java.util.function.BiFunction}<div class='sub-desc'><p>the function to use to compute the value of the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the type of the other CompletionStage's result</U></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><V> the function's return type</V></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenCompose' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenCompose' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenCompose' class='name expandable'>thenCompose</a>( <span class='pre'>fn, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that is completed with the same\n value as the CompletionStage returned by the given fun...</div><div class='long'><p>Returns a new CompletionStage that is completed with the same\n value as the CompletionStage returned by the given function.</p>\n\n<p> <p>When this stage completes normally, the given function is\n invoked with this stage's result as the argument, returning\n another CompletionStage.  When that stage completes normally,\n the CompletionStage returned by this method is completed with\n the same value.</p>\n\n<p> <p>To ensure progress, the supplied function must arrange\n eventual completion of its result.</p>\n\n<p> <p>This method is analogous to\n Optional.flatMap and\n Stream.flatMap.</p>\n\n<p> <p>See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object {java.util.function.Function}<div class='sub-desc'><p>the function to use to compute another CompletionStage</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the type of the returned CompletionStage's result</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenComposeAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenComposeAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenComposeAsync' class='name expandable'>thenComposeAsync</a>( <span class='pre'>fn, executor, </span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that is completed with the same\n value as the CompletionStage returned by the given fun...</div><div class='long'><p>Returns a new CompletionStage that is completed with the same\n value as the CompletionStage returned by the given function,\n executed using the supplied Executor.</p>\n\n<p> <p>When this stage completes normally, the given function is\n invoked with this stage's result as the argument, returning\n another CompletionStage.  When that stage completes normally,\n the CompletionStage returned by this method is completed with\n the same value.</p>\n\n<p> <p>To ensure progress, the supplied function must arrange\n eventual completion of its result.</p>\n\n<p> <p>See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Object {java.util.function.Function}<div class='sub-desc'><p>the function to use to compute another CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the type of the returned CompletionStage's result</U></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenRun' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenRun' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenRun' class='name expandable'>thenRun</a>( <span class='pre'>action</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n normally, executes the given action. ...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n normally, executes the given action.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {Runnable}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-thenRunAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-thenRunAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-thenRunAsync' class='name expandable'>thenRunAsync</a>( <span class='pre'>action, executor</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage that, when this stage completes\n normally, executes the given action using the supplied...</div><div class='long'><p>Returns a new CompletionStage that, when this stage completes\n normally, executes the given action using the supplied Executor.</p>\n\n<p> See the <a href=\"#!/api/java.util.concurrent.CompletionStage\" rel=\"java.util.concurrent.CompletionStage\" class=\"docClass\">java.util.concurrent.CompletionStage</a> documentation for rules\n covering exceptional completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {Runnable}<div class='sub-desc'><p>the action to perform before completing the\n returned CompletionStage</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-toCompletableFuture' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-toCompletableFuture' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-toCompletableFuture' class='name expandable'>toCompletableFuture</a>( <span class='pre'></span> ) : Object {java.util.concurrent.CompletableFuture}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a java.util.concurrent.CompletableFuture maintaining the same\n completion properties as this stage. ...</div><div class='long'><p>Returns a <a href=\"#!/api/java.util.concurrent.CompletableFuture\" rel=\"java.util.concurrent.CompletableFuture\" class=\"docClass\">java.util.concurrent.CompletableFuture</a> maintaining the same\n completion properties as this stage. If this stage is already a\n CompletableFuture, this method may return this stage itself.\n Otherwise, invocation of this method may be equivalent in\n effect to {@code thenApply(x -> x)}, but returning an instance\n of type {@code CompletableFuture}. A CompletionStage\n implementation that does not choose to interoperate with others\n may throw {@code UnsupportedOperationException}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletableFuture}</span><div class='sub-desc'><p>the CompletableFuture</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if this implementation\n does not interoperate with CompletableFuture</p>\n</div></li></ul></div></div></div><div id='method-whenComplete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-whenComplete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-whenComplete' class='name expandable'>whenComplete</a>( <span class='pre'>action</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action when t...</div><div class='long'><p>Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action when this stage completes.</p>\n\n<p> <p>When this stage is complete, the given action is invoked\n with the result (or {@code null} if none) and the exception (or\n {@code null} if none) of this stage as arguments.  The returned\n stage is completed when the action returns.</p>\n\n<p> <p>Unlike method <a href=\"#!/api/java.util.concurrent.CompletionStage-method-handle\" rel=\"java.util.concurrent.CompletionStage-method-handle\" class=\"docClass\">handle</a>,\n this method is not designed to translate completion outcomes,\n so the supplied action should not throw an exception. However,\n if it does, the following rules apply: if this stage completed\n normally but the supplied action throws an exception, then the\n returned stage completes exceptionally with the supplied\n action's exception. Or, if this stage completed exceptionally\n and the supplied action throws an exception, then the returned\n stage completes exceptionally with this stage's exception.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {java.util.function.BiConsumer}<div class='sub-desc'><p>the action to perform</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div><div id='method-whenCompleteAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionStage'>java.util.concurrent.CompletionStage</span><br/><a href='source/CompletionStage.html#java-util-concurrent-CompletionStage-method-whenCompleteAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionStage-method-whenCompleteAsync' class='name expandable'>whenCompleteAsync</a>( <span class='pre'>action, executor</span> ) : Object {java.util.concurrent.CompletionStage}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action using ...</div><div class='long'><p>Returns a new CompletionStage with the same result or exception as\n this stage, that executes the given action using the supplied\n Executor when this stage completes.</p>\n\n<p> <p>When this stage is complete, the given action is invoked with the\n result (or {@code null} if none) and the exception (or {@code null}\n if none) of this stage as arguments.  The returned stage is completed\n when the action returns.</p>\n\n<p> <p>Unlike method handleAsync,\n this method is not designed to translate completion outcomes,\n so the supplied action should not throw an exception. However,\n if it does, the following rules apply: If this stage completed\n normally but the supplied action throws an exception, then the\n returned stage completes exceptionally with the supplied\n action's exception. Or, if this stage completed exceptionally\n and the supplied action throws an exception, then the returned\n stage completes exceptionally with this stage's exception.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {java.util.function.BiConsumer}<div class='sub-desc'><p>the action to perform</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor to use for asynchronous execution</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CompletionStage}</span><div class='sub-desc'><p>the new CompletionStage</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});