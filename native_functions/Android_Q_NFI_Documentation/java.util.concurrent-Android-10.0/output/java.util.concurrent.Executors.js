Ext.data.JsonP.java_util_concurrent_Executors({"tagname":"class","name":"java.util.concurrent.Executors","autodetected":{},"files":[{"filename":"Executors.js","href":"Executors.html#java-util-concurrent-Executors"}],"extends":"java.lang.Object","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"callable","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-callable","meta":{}},{"name":"defaultThreadFactory","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-defaultThreadFactory","meta":{}},{"name":"newCachedThreadPool","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-newCachedThreadPool","meta":{}},{"name":"newFixedThreadPool","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-newFixedThreadPool","meta":{}},{"name":"newScheduledThreadPool","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-newScheduledThreadPool","meta":{}},{"name":"newSingleThreadExecutor","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-newSingleThreadExecutor","meta":{}},{"name":"newSingleThreadScheduledExecutor","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-newSingleThreadScheduledExecutor","meta":{}},{"name":"newWorkStealingPool","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-newWorkStealingPool","meta":{}},{"name":"privilegedCallable","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-privilegedCallable","meta":{}},{"name":"privilegedCallableUsingCurrentClassLoader","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-privilegedCallableUsingCurrentClassLoader","meta":{}},{"name":"privilegedThreadFactory","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-privilegedThreadFactory","meta":{}},{"name":"unconfigurableExecutorService","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-unconfigurableExecutorService","meta":{}},{"name":"unconfigurableScheduledExecutorService","tagname":"method","owner":"java.util.concurrent.Executors","id":"method-unconfigurableScheduledExecutorService","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.Executors","short_doc":"Factory and utility methods for java.util.concurrent.Executor, java.util.concurrent.ExecutorService, java.util.concur...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.Executors</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Executors.html#java-util-concurrent-Executors' target='_blank'>Executors.js</a></div></pre><div class='doc-contents'><p>Factory and utility methods for <a href=\"#!/api/java.util.concurrent.Executor\" rel=\"java.util.concurrent.Executor\" class=\"docClass\">java.util.concurrent.Executor</a>, <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a>, <a href=\"#!/api/java.util.concurrent.ScheduledExecutorService\" rel=\"java.util.concurrent.ScheduledExecutorService\" class=\"docClass\">java.util.concurrent.ScheduledExecutorService</a>, <a href=\"#!/api/java.util.concurrent.ThreadFactory\" rel=\"java.util.concurrent.ThreadFactory\" class=\"docClass\">java.util.concurrent.ThreadFactory</a>, and <a href=\"#!/api/java.util.concurrent.Callable\" rel=\"java.util.concurrent.Callable\" class=\"docClass\">java.util.concurrent.Callable</a> classes defined in this\n package. This class supports the following kinds of methods:</p>\n\n<p> <ul>\n   <li>Methods that create and return an <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a>\n       set up with commonly useful configuration settings.\n   <li>Methods that create and return a <a href=\"#!/api/java.util.concurrent.ScheduledExecutorService\" rel=\"java.util.concurrent.ScheduledExecutorService\" class=\"docClass\">java.util.concurrent.ScheduledExecutorService</a>\n       set up with commonly useful configuration settings.\n   <li>Methods that create and return a \"wrapped\" ExecutorService, that\n       disables reconfiguration by making implementation-specific methods\n       inaccessible.\n   <li>Methods that create and return a <a href=\"#!/api/java.util.concurrent.ThreadFactory\" rel=\"java.util.concurrent.ThreadFactory\" class=\"docClass\">java.util.concurrent.ThreadFactory</a>\n       that sets newly created threads to a known state.\n   <li>Methods that create and return a <a href=\"#!/api/java.util.concurrent.Callable\" rel=\"java.util.concurrent.Callable\" class=\"docClass\">java.util.concurrent.Callable</a>\n       out of other closure-like forms, so they can be used\n       in execution methods requiring {@code Callable}.\n </li></li></li></li></li></ul></p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-callable' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-callable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-callable' class='name expandable'>callable</a>( <span class='pre'>action</span> ) : Object {java.util.concurrent.Callable}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a java.util.concurrent.Callable object that, when\n called, runs the given privileged exception action and ret...</div><div class='long'><p>Returns a <a href=\"#!/api/java.util.concurrent.Callable\" rel=\"java.util.concurrent.Callable\" class=\"docClass\">java.util.concurrent.Callable</a> object that, when\n called, runs the given privileged exception action and returns\n its result.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {java.security.PrivilegedExceptionAction}<div class='sub-desc'><p>the privileged exception action to run</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Callable}</span><div class='sub-desc'><p>a callable object</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if action null</p>\n</div></li></ul></div></div></div><div id='method-defaultThreadFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-defaultThreadFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-defaultThreadFactory' class='name expandable'>defaultThreadFactory</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ThreadFactory}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a default thread factory used to create new threads. ...</div><div class='long'><p>Returns a default thread factory used to create new threads.\n This factory creates all new threads used by an Executor in the\n same ThreadGroup. Each new\n thread is created as a non-daemon thread with priority set to\n the smaller of {@code Thread.NORM_PRIORITY} and the maximum\n priority permitted in the thread group.  New threads have names\n accessible via Thread.getName of\n <em>pool-N-thread-M</em>, where <em>N</em> is the sequence\n number of this factory, and <em>M</em> is the sequence number\n of the thread created by this factory.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ThreadFactory}</span><div class='sub-desc'><p>a thread factory</p>\n</div></li></ul></div></div></div><div id='method-newCachedThreadPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-newCachedThreadPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-newCachedThreadPool' class='name expandable'>newCachedThreadPool</a>( <span class='pre'>threadFactory</span> ) : Object {java.util.concurrent.ExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they ar...</div><div class='long'><p>Creates a thread pool that creates new threads as needed, but\n will reuse previously constructed threads when they are\n available, and uses the provided\n ThreadFactory to create new threads when needed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>threadFactory</span> : Object {ThreadFactory}<div class='sub-desc'><p>the factory to use when creating new threads</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ExecutorService}</span><div class='sub-desc'><p>the newly created thread pool</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if threadFactory is null</p>\n</div></li></ul></div></div></div><div id='method-newFixedThreadPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-newFixedThreadPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-newFixedThreadPool' class='name expandable'>newFixedThreadPool</a>( <span class='pre'>nThreads, threadFactory</span> ) : Object {java.util.concurrent.ExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue, using the provid...</div><div class='long'><p>Creates a thread pool that reuses a fixed number of threads\n operating off a shared unbounded queue, using the provided\n ThreadFactory to create new threads when needed.  At any point,\n at most {@code nThreads} threads will be active processing\n tasks.  If additional tasks are submitted when all threads are\n active, they will wait in the queue until a thread is\n available.  If any thread terminates due to a failure during\n execution prior to shutdown, a new one will take its place if\n needed to execute subsequent tasks.  The threads in the pool will\n exist until it is explicitly <a href=\"#!/api/java.util.concurrent.ExecutorService-method-shutdown\" rel=\"java.util.concurrent.ExecutorService-method-shutdown\" class=\"docClass\">shutdown</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nThreads</span> : Number<div class='sub-desc'><p>the number of threads in the pool</p>\n</div></li><li><span class='pre'>threadFactory</span> : Object {ThreadFactory}<div class='sub-desc'><p>the factory to use when creating new threads</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ExecutorService}</span><div class='sub-desc'><p>the newly created thread pool</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if threadFactory is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code nThreads &lt;= 0}</p>\n</div></li></ul></div></div></div><div id='method-newScheduledThreadPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-newScheduledThreadPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-newScheduledThreadPool' class='name expandable'>newScheduledThreadPool</a>( <span class='pre'>corePoolSize, threadFactory</span> ) : Object {java.util.concurrent.ScheduledExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically. ...</div><div class='long'><p>Creates a thread pool that can schedule commands to run after a\n given delay, or to execute periodically.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>corePoolSize</span> : Number<div class='sub-desc'><p>the number of threads to keep in the pool,\n even if they are idle</p>\n</div></li><li><span class='pre'>threadFactory</span> : Object {ThreadFactory}<div class='sub-desc'><p>the factory to use when the executor\n creates a new thread</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ScheduledExecutorService}</span><div class='sub-desc'><p>a newly created scheduled thread pool</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code corePoolSize &lt; 0}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if threadFactory is null</p>\n</div></li></ul></div></div></div><div id='method-newSingleThreadExecutor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-newSingleThreadExecutor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-newSingleThreadExecutor' class='name expandable'>newSingleThreadExecutor</a>( <span class='pre'>threadFactory</span> ) : Object {java.util.concurrent.ExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates an Executor that uses a single worker thread operating\n off an unbounded queue, and uses the provided ThreadF...</div><div class='long'><p>Creates an Executor that uses a single worker thread operating\n off an unbounded queue, and uses the provided ThreadFactory to\n create a new thread when needed. Unlike the otherwise\n equivalent {@code newFixedThreadPool(1, threadFactory)} the\n returned executor is guaranteed not to be reconfigurable to use\n additional threads.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>threadFactory</span> : Object {ThreadFactory}<div class='sub-desc'><p>the factory to use when creating new\n threads</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ExecutorService}</span><div class='sub-desc'><p>the newly created single-threaded Executor</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if threadFactory is null</p>\n</div></li></ul></div></div></div><div id='method-newSingleThreadScheduledExecutor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-newSingleThreadScheduledExecutor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-newSingleThreadScheduledExecutor' class='name expandable'>newSingleThreadScheduledExecutor</a>( <span class='pre'>threadFactory</span> ) : Object {java.util.concurrent.ScheduledExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a single-threaded executor that can schedule commands\n to run after a given delay, or to execute periodically. ...</div><div class='long'><p>Creates a single-threaded executor that can schedule commands\n to run after a given delay, or to execute periodically.  (Note\n however that if this single thread terminates due to a failure\n during execution prior to shutdown, a new one will take its\n place if needed to execute subsequent tasks.)  Tasks are\n guaranteed to execute sequentially, and no more than one task\n will be active at any given time. Unlike the otherwise\n equivalent {@code newScheduledThreadPool(1, threadFactory)}\n the returned executor is guaranteed not to be reconfigurable to\n use additional threads.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>threadFactory</span> : Object {ThreadFactory}<div class='sub-desc'><p>the factory to use when creating new\n threads</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ScheduledExecutorService}</span><div class='sub-desc'><p>a newly created scheduled executor</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if threadFactory is null</p>\n</div></li></ul></div></div></div><div id='method-newWorkStealingPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-newWorkStealingPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-newWorkStealingPool' class='name expandable'>newWorkStealingPool</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a work-stealing thread pool using the number of\n {@linkplain Runtime#availableProcessors available processors...</div><div class='long'><p>Creates a work-stealing thread pool using the number of\n {@linkplain Runtime#availableProcessors available processors}\n as its target parallelism level.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ExecutorService}</span><div class='sub-desc'><p>the newly created thread pool\n@see <a href=\"#!/api/java.util.concurrent.Executors-method-newWorkStealingPool\" rel=\"java.util.concurrent.Executors-method-newWorkStealingPool\" class=\"docClass\">newWorkStealingPool</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-privilegedCallable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-privilegedCallable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-privilegedCallable' class='name expandable'>privilegedCallable</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Legacy security code; do not use. ...</div><div class='long'><p>Legacy security code; do not use.</p>\n</div></div></div><div id='method-privilegedCallableUsingCurrentClassLoader' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-privilegedCallableUsingCurrentClassLoader' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-privilegedCallableUsingCurrentClassLoader' class='name expandable'>privilegedCallableUsingCurrentClassLoader</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Legacy security code; do not use. ...</div><div class='long'><p>Legacy security code; do not use.</p>\n</div></div></div><div id='method-privilegedThreadFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-privilegedThreadFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-privilegedThreadFactory' class='name expandable'>privilegedThreadFactory</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Legacy security code; do not use. ...</div><div class='long'><p>Legacy security code; do not use.</p>\n</div></div></div><div id='method-unconfigurableExecutorService' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-unconfigurableExecutorService' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-unconfigurableExecutorService' class='name expandable'>unconfigurableExecutorService</a>( <span class='pre'>executor</span> ) : Object {java.util.concurrent.ExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object that delegates all defined java.util.concurrent.ExecutorService methods to the given executor, but ...</div><div class='long'><p>Returns an object that delegates all defined <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a> methods to the given executor, but not any\n other methods that might otherwise be accessible using\n casts. This provides a way to safely \"freeze\" configuration and\n disallow tuning of a given concrete implementation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {ExecutorService}<div class='sub-desc'><p>the underlying implementation</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ExecutorService}</span><div class='sub-desc'><p>an {@code ExecutorService} instance</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if executor null</p>\n</div></li></ul></div></div></div><div id='method-unconfigurableScheduledExecutorService' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Executors'>java.util.concurrent.Executors</span><br/><a href='source/Executors.html#java-util-concurrent-Executors-method-unconfigurableScheduledExecutorService' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Executors-method-unconfigurableScheduledExecutorService' class='name expandable'>unconfigurableScheduledExecutorService</a>( <span class='pre'>executor</span> ) : Object {java.util.concurrent.ScheduledExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object that delegates all defined java.util.concurrent.ScheduledExecutorService methods to the given execu...</div><div class='long'><p>Returns an object that delegates all defined <a href=\"#!/api/java.util.concurrent.ScheduledExecutorService\" rel=\"java.util.concurrent.ScheduledExecutorService\" class=\"docClass\">java.util.concurrent.ScheduledExecutorService</a> methods to the given executor, but\n not any other methods that might otherwise be accessible using\n casts. This provides a way to safely \"freeze\" configuration and\n disallow tuning of a given concrete implementation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {ScheduledExecutorService}<div class='sub-desc'><p>the underlying implementation</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ScheduledExecutorService}</span><div class='sub-desc'><p>a {@code ScheduledExecutorService} instance</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if executor null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});