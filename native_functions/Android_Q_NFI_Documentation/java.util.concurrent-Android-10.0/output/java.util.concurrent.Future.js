Ext.data.JsonP.java_util_concurrent_Future({"tagname":"class","name":"java.util.concurrent.Future","autodetected":{},"files":[{"filename":"Future.js","href":"Future.html#java-util-concurrent-Future"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><V> The result type returned by this Future's {@code get} method</V></p>\n"}],"members":[{"name":"cancel","tagname":"method","owner":"java.util.concurrent.Future","id":"method-cancel","meta":{}},{"name":"get","tagname":"method","owner":"java.util.concurrent.Future","id":"method-get","meta":{}},{"name":"isCancelled","tagname":"method","owner":"java.util.concurrent.Future","id":"method-isCancelled","meta":{}},{"name":"isDone","tagname":"method","owner":"java.util.concurrent.Future","id":"method-isDone","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.Future","short_doc":"A {@code Future} represents the result of an asynchronous\n computation. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Future.html#java-util-concurrent-Future' target='_blank'>Future.js</a></div></pre><div class='doc-contents'><p>A {@code Future} represents the result of an asynchronous\n computation.  Methods are provided to check if the computation is\n complete, to wait for its completion, and to retrieve the result of\n the computation.  The result can only be retrieved using method\n {@code get} when the computation has completed, blocking if\n necessary until it is ready.  Cancellation is performed by the\n {@code cancel} method.  Additional methods are provided to\n determine if the task completed normally or was cancelled. Once a\n computation has completed, the computation cannot be cancelled.\n If you would like to use a {@code Future} for the sake\n of cancellability but not provide a usable result, you can\n declare types of the form {@code Future&lt;?>} and\n return {@code null} as a result of the underlying task.</p>\n\n<p> <p>\n <b>Sample Usage</b> (Note that the following classes are all\n made-up.)</p>\n\n<p> <pre> {@code\n interface ArchiveSearcher { String search(String target); }\n class App {\n   ExecutorService executor = ...\n   ArchiveSearcher searcher = ...\n   void showSearch(final String target)\n       throws InterruptedException {\n     Future<String> future\n       = executor.submit(new Callable<String>() {\n         public String call() {\n             return searcher.search(target);\n         }});\n     displayOtherThings(); // do other things while searching\n     try {\n       displayText(future.get()); // use future\n     } catch (ExecutionException ex) { cleanup(); return; }\n   }\n }}</String></String></pre></p>\n\n<p> The <a href=\"#!/api/java.util.concurrent.FutureTask\" rel=\"java.util.concurrent.FutureTask\" class=\"docClass\">java.util.concurrent.FutureTask</a> class is an implementation of {@code Future} that\n implements {@code Runnable}, and so may be executed by an {@code Executor}.\n For example, the above construction with {@code submit} could be replaced by:\n <pre> {@code\n FutureTask<String> future =\n   new FutureTask&lt;>(new Callable<String>() {\n     public String call() {\n       return searcher.search(target);\n   }});\n executor.execute(future);}</String></String></pre></p>\n\n<p> <p>Memory consistency effects: Actions taken by the asynchronous computation\n <a href=\"package-summary.html#MemoryVisibility\"> <i>happen-before</i></a>\n actions following the corresponding {@code Future.get()} in another thread.</p>\n\n<p> @see FutureTask\n @see Executor</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><V> The result type returned by this Future's {@code get} method</V></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cancel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Future'>java.util.concurrent.Future</span><br/><a href='source/Future.html#java-util-concurrent-Future-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Future-method-cancel' class='name expandable'>cancel</a>( <span class='pre'>mayInterruptIfRunning</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to cancel execution of this task. ...</div><div class='long'><p>Attempts to cancel execution of this task.  This attempt will\n fail if the task has already completed, has already been cancelled,\n or could not be cancelled for some other reason. If successful,\n and this task has not started when {@code cancel} is called,\n this task should never run.  If the task has already started,\n then the {@code mayInterruptIfRunning} parameter determines\n whether the thread executing this task should be interrupted in\n an attempt to stop the task.</p>\n\n<p> <p>After this method returns, subsequent calls to <a href=\"#!/api/java.util.concurrent.Future-method-isDone\" rel=\"java.util.concurrent.Future-method-isDone\" class=\"docClass\">isDone</a> will\n always return {@code true}.  Subsequent calls to <a href=\"#!/api/java.util.concurrent.Future-method-isCancelled\" rel=\"java.util.concurrent.Future-method-isCancelled\" class=\"docClass\">isCancelled</a>\n will always return {@code true} if this method returned {@code true}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mayInterruptIfRunning</span> : Boolean<div class='sub-desc'><p>{@code true} if the thread executing this\n task should be interrupted; otherwise, in-progress tasks are allowed\n to complete</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code false} if the task could not be cancelled,\n typically because it has already completed normally;\n {@code true} otherwise</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Future'>java.util.concurrent.Future</span><br/><a href='source/Future.html#java-util-concurrent-Future-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Future-method-get' class='name expandable'>get</a>( <span class='pre'>timeout, unit</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if ava...</div><div class='long'><p>Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the computed result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CancellationException if the computation was cancelled</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ExecutionException if the computation threw an\n exception</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread was interrupted\n while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutException if the wait timed out</p>\n</div></li></ul></div></div></div><div id='method-isCancelled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Future'>java.util.concurrent.Future</span><br/><a href='source/Future.html#java-util-concurrent-Future-method-isCancelled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Future-method-isCancelled' class='name expandable'>isCancelled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this task was cancelled before it completed\n normally. ...</div><div class='long'><p>Returns {@code true} if this task was cancelled before it completed\n normally.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this task was cancelled before it completed</p>\n</div></li></ul></div></div></div><div id='method-isDone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Future'>java.util.concurrent.Future</span><br/><a href='source/Future.html#java-util-concurrent-Future-method-isDone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Future-method-isDone' class='name expandable'>isDone</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this task completed. ...</div><div class='long'><p>Returns {@code true} if this task completed.</p>\n\n<p> Completion may be due to normal termination, an exception, or\n cancellation -- in all of these cases, this method will return\n {@code true}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this task completed</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});