Ext.data.JsonP.java_util_concurrent_Phaser({"tagname":"class","name":"java.util.concurrent.Phaser","autodetected":{},"files":[{"filename":"Phaser.js","href":"Phaser.html#java-util-concurrent-Phaser"}],"extends":"java.lang.Object","since":"1.7","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"arrive","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-arrive","meta":{}},{"name":"arriveAndAwaitAdvance","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-arriveAndAwaitAdvance","meta":{}},{"name":"arriveAndDeregister","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-arriveAndDeregister","meta":{}},{"name":"awaitAdvance","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-awaitAdvance","meta":{}},{"name":"awaitAdvanceInterruptibly","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-awaitAdvanceInterruptibly","meta":{}},{"name":"bulkRegister","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-bulkRegister","meta":{}},{"name":"forceTermination","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-forceTermination","meta":{}},{"name":"getArrivedParties","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-getArrivedParties","meta":{}},{"name":"getParent","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-getParent","meta":{}},{"name":"getPhase","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-getPhase","meta":{}},{"name":"getRegisteredParties","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-getRegisteredParties","meta":{}},{"name":"getRoot","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-getRoot","meta":{}},{"name":"getUnarrivedParties","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-getUnarrivedParties","meta":{}},{"name":"isTerminated","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-isTerminated","meta":{}},{"name":"register","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-register","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.Phaser","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.Phaser","short_doc":"A reusable synchronization barrier, similar in functionality to\n CyclicBarrier and\n CountDownLatch\n but supporting mo...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.Phaser</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Phaser.html#java-util-concurrent-Phaser' target='_blank'>Phaser.js</a></div></pre><div class='doc-contents'><p>A reusable synchronization barrier, similar in functionality to\n <a href=\"#!/api/java.util.concurrent.CyclicBarrier\" rel=\"java.util.concurrent.CyclicBarrier\" class=\"docClass\">CyclicBarrier</a> and\n <a href=\"#!/api/java.util.concurrent.CountDownLatch\" rel=\"java.util.concurrent.CountDownLatch\" class=\"docClass\">CountDownLatch</a>\n but supporting more flexible usage.</p>\n\n<p> <p><b>Registration.</b> Unlike the case for other barriers, the\n number of parties <em>registered</em> to synchronize on a phaser\n may vary over time.  Tasks may be registered at any time (using\n methods <a href=\"#!/api/java.util.concurrent.Phaser-method-register\" rel=\"java.util.concurrent.Phaser-method-register\" class=\"docClass\">register</a>, <a href=\"#!/api/java.util.concurrent.Phaser-method-bulkRegister\" rel=\"java.util.concurrent.Phaser-method-bulkRegister\" class=\"docClass\">bulkRegister</a>, or forms of\n constructors establishing initial numbers of parties), and\n optionally deregistered upon any arrival (using <a href=\"#!/api/java.util.concurrent.Phaser-method-arriveAndDeregister\" rel=\"java.util.concurrent.Phaser-method-arriveAndDeregister\" class=\"docClass\">arriveAndDeregister</a>).  As is the case with most basic\n synchronization constructs, registration and deregistration affect\n only internal counts; they do not establish any further internal\n bookkeeping, so tasks cannot query whether they are registered.\n (However, you can introduce such bookkeeping by subclassing this\n class.)</p>\n\n<p> <p><b>Synchronization.</b> Like a {@code CyclicBarrier}, a {@code\n Phaser} may be repeatedly awaited.  Method <a href=\"#!/api/java.util.concurrent.Phaser-method-arriveAndAwaitAdvance\" rel=\"java.util.concurrent.Phaser-method-arriveAndAwaitAdvance\" class=\"docClass\">arriveAndAwaitAdvance</a> has effect analogous to <a href=\"#!/api/java.util.concurrent.CyclicBarrier-method-await\" rel=\"java.util.concurrent.CyclicBarrier-method-await\" class=\"docClass\">CyclicBarrier.await</a>. Each\n generation of a phaser has an associated phase number. The phase\n number starts at zero, and advances when all parties arrive at the\n phaser, wrapping around to zero after reaching {@code\n Integer.MAX_VALUE}. The use of phase numbers enables independent\n control of actions upon arrival at a phaser and upon awaiting\n others, via two kinds of methods that may be invoked by any\n registered party:</p>\n\n<p> <ul></ul></p>\n\n<p>   <li><b>Arrival.</b> Methods <a href=\"#!/api/java.util.concurrent.Phaser-method-arrive\" rel=\"java.util.concurrent.Phaser-method-arrive\" class=\"docClass\">arrive</a> and\n       <a href=\"#!/api/java.util.concurrent.Phaser-method-arriveAndDeregister\" rel=\"java.util.concurrent.Phaser-method-arriveAndDeregister\" class=\"docClass\">arriveAndDeregister</a> record arrival.  These methods\n       do not block, but return an associated <em>arrival phase\n       number</em>; that is, the phase number of the phaser to which\n       the arrival applied. When the final party for a given phase\n       arrives, an optional action is performed and the phase\n       advances.  These actions are performed by the party\n       triggering a phase advance, and are arranged by overriding\n       method int), which also controls\n       termination. Overriding this method is similar to, but more\n       flexible than, providing a barrier action to a {@code\n       CyclicBarrier}.</li></p>\n\n<p>   <li><b>Waiting.</b> Method <a href=\"#!/api/java.util.concurrent.Phaser-method-awaitAdvance\" rel=\"java.util.concurrent.Phaser-method-awaitAdvance\" class=\"docClass\">awaitAdvance</a> requires an\n       argument indicating an arrival phase number, and returns when\n       the phaser advances to (or is already at) a different phase.\n       Unlike similar constructions using {@code CyclicBarrier},\n       method {@code awaitAdvance} continues to wait even if the\n       waiting thread is interrupted. Interruptible and timeout\n       versions are also available, but exceptions encountered while\n       tasks wait interruptibly or with timeout do not change the\n       state of the phaser. If necessary, you can perform any\n       associated recovery within handlers of those exceptions,\n       often after invoking {@code forceTermination}.  Phasers may\n       also be used by tasks executing in a <a href=\"#!/api/java.util.concurrent.ForkJoinPool\" rel=\"java.util.concurrent.ForkJoinPool\" class=\"docClass\">java.util.concurrent.ForkJoinPool</a>.\n       Progress is ensured if the pool's parallelismLevel can\n       accommodate the maximum number of simultaneously blocked\n       parties.</li></p>\n\n<p> </p>\n\n<p> <p><b>Termination.</b> A phaser may enter a <em>termination</em>\n state, that may be checked using method <a href=\"#!/api/java.util.concurrent.Phaser-method-isTerminated\" rel=\"java.util.concurrent.Phaser-method-isTerminated\" class=\"docClass\">isTerminated</a>. Upon\n termination, all synchronization methods immediately return without\n waiting for advance, as indicated by a negative return value.\n Similarly, attempts to register upon termination have no effect.\n Termination is triggered when an invocation of {@code onAdvance}\n returns {@code true}. The default implementation returns {@code\n true} if a deregistration has caused the number of registered\n parties to become zero.  As illustrated below, when phasers control\n actions with a fixed number of iterations, it is often convenient\n to override this method to cause termination when the current phase\n number reaches a threshold. Method <a href=\"#!/api/java.util.concurrent.Phaser-method-forceTermination\" rel=\"java.util.concurrent.Phaser-method-forceTermination\" class=\"docClass\">forceTermination</a> is\n also available to abruptly release waiting threads and allow them\n to terminate.</p>\n\n<p> <p><b>Tiering.</b> Phasers may be <em>tiered</em> (i.e.,\n constructed in tree structures) to reduce contention. Phasers with\n large numbers of parties that would otherwise experience heavy\n synchronization contention costs may instead be set up so that\n groups of sub-phasers share a common parent.  This may greatly\n increase throughput even though it incurs greater per-operation\n overhead.</p>\n\n<p> <p>In a tree of tiered phasers, registration and deregistration of\n child phasers with their parent are managed automatically.\n Whenever the number of registered parties of a child phaser becomes\n non-zero (as established in the Phaser(Phaser,int)\n constructor, <a href=\"#!/api/java.util.concurrent.Phaser-method-register\" rel=\"java.util.concurrent.Phaser-method-register\" class=\"docClass\">register</a>, or <a href=\"#!/api/java.util.concurrent.Phaser-method-bulkRegister\" rel=\"java.util.concurrent.Phaser-method-bulkRegister\" class=\"docClass\">bulkRegister</a>), the\n child phaser is registered with its parent.  Whenever the number of\n registered parties becomes zero as the result of an invocation of\n <a href=\"#!/api/java.util.concurrent.Phaser-method-arriveAndDeregister\" rel=\"java.util.concurrent.Phaser-method-arriveAndDeregister\" class=\"docClass\">arriveAndDeregister</a>, the child phaser is deregistered\n from its parent.</p>\n\n<p> <p><b>Monitoring.</b> While synchronization methods may be invoked\n only by registered parties, the current state of a phaser may be\n monitored by any caller.  At any given moment there are <a href=\"#!/api/java.util.concurrent.Phaser-method-getRegisteredParties\" rel=\"java.util.concurrent.Phaser-method-getRegisteredParties\" class=\"docClass\">getRegisteredParties</a> parties in total, of which <a href=\"#!/api/java.util.concurrent.Phaser-method-getArrivedParties\" rel=\"java.util.concurrent.Phaser-method-getArrivedParties\" class=\"docClass\">getArrivedParties</a> have arrived at the current phase (<a href=\"#!/api/java.util.concurrent.Phaser-method-getPhase\" rel=\"java.util.concurrent.Phaser-method-getPhase\" class=\"docClass\">getPhase</a>).  When the remaining (<a href=\"#!/api/java.util.concurrent.Phaser-method-getUnarrivedParties\" rel=\"java.util.concurrent.Phaser-method-getUnarrivedParties\" class=\"docClass\">getUnarrivedParties</a>)\n parties arrive, the phase advances.  The values returned by these\n methods may reflect transient states and so are not in general\n useful for synchronization control.  Method <a href=\"#!/api/java.util.concurrent.Phaser-method-toString\" rel=\"java.util.concurrent.Phaser-method-toString\" class=\"docClass\">toString</a>\n returns snapshots of these state queries in a form convenient for\n informal monitoring.</p>\n\n<p> <p><b>Sample usages:</b></p>\n\n<p> <p>A {@code Phaser} may be used instead of a {@code CountDownLatch}\n to control a one-shot action serving a variable number of parties.\n The typical idiom is for the method setting this up to first\n register, then start the actions, then deregister, as in:</p>\n\n<p> <pre> {@code\n void runTasks(List<Runnable> tasks) {\n   final Phaser phaser = new Phaser(1); // \"1\" to register self\n   // create and start threads\n   for (final Runnable task : tasks) {\n     phaser.register();\n     new Thread() {\n       public void run() {\n         phaser.arriveAndAwaitAdvance(); // await all creation\n         task.run();\n       }\n     }.start();\n   }</Runnable></pre></p>\n\n<p>   // allow threads to start and deregister self\n   phaser.arriveAndDeregister();\n }}</p>\n\n<p> <p>One way to cause a set of threads to repeatedly perform actions\n for a given number of iterations is to override {@code onAdvance}:</p>\n\n<p> <pre> {@code\n void startTasks(List<Runnable> tasks, final int iterations) {\n   final Phaser phaser = new Phaser() {\n     protected boolean onAdvance(int phase, int registeredParties) {\n       return phase >= iterations || registeredParties == 0;\n     }\n   };\n   phaser.register();\n   for (final Runnable task : tasks) {\n     phaser.register();\n     new Thread() {\n       public void run() {\n         do {\n           task.run();\n           phaser.arriveAndAwaitAdvance();\n         } while (!phaser.isTerminated());\n       }\n     }.start();\n   }\n   phaser.arriveAndDeregister(); // deregister self, don't wait\n }}</Runnable></pre></p>\n\n<p> If the main task must later await termination, it\n may re-register and then execute a similar loop:\n <pre> {@code\n   // ...\n   phaser.register();\n   while (!phaser.isTerminated())\n     phaser.arriveAndAwaitAdvance();}</pre></p>\n\n<p> <p>Related constructions may be used to await particular phase numbers\n in contexts where you are sure that the phase will never wrap around\n {@code Integer.MAX_VALUE}. For example:</p>\n\n<p> <pre> {@code\n void awaitPhase(Phaser phaser, int phase) {\n   int p = phaser.register(); // assumes caller not already registered\n   while (p &lt; phase) {\n     if (phaser.isTerminated())\n       // ... deal with unexpected termination\n     else\n       p = phaser.arriveAndAwaitAdvance();\n   }\n   phaser.arriveAndDeregister();\n }}</pre></p>\n\n<p> <p>To create a set of {@code n} tasks using a tree of phasers, you\n could use code of the following form, assuming a Task class with a\n constructor accepting a {@code Phaser} that it registers with upon\n construction. After invocation of {@code build(new Task[n], 0, n,\n new Phaser())}, these tasks could then be started, for example by\n submitting to a pool:</p>\n\n<p> <pre> {@code\n void build(Task[] tasks, int lo, int hi, Phaser ph) {\n   if (hi - lo > TASKS_PER_PHASER) {\n     for (int i = lo; i &lt; hi; i += TASKS_PER_PHASER) {\n       int j = Math.min(i + TASKS_PER_PHASER, hi);\n       build(tasks, i, j, new Phaser(ph));\n     }\n   } else {\n     for (int i = lo; i &lt; hi; ++i)\n       tasks[i] = new Task(ph);\n       // assumes new Task(ph) performs ph.register()\n   }\n }}</pre></p>\n\n<p> The best value of {@code TASKS_PER_PHASER} depends mainly on\n expected synchronization rates. A value as low as four may\n be appropriate for extremely small per-phase task bodies (thus\n high rates), or up to hundreds for extremely large ones.</p>\n\n<p> <p><b>Implementation notes</b>: This implementation restricts the\n maximum number of parties to 65535. Attempts to register additional\n parties result in {@code IllegalStateException}. However, you can and\n should create tiered phasers to accommodate arbitrarily large sets\n of participants.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-arrive' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-arrive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-arrive' class='name expandable'>arrive</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Arrives at this phaser, without waiting for others to arrive. ...</div><div class='long'><p>Arrives at this phaser, without waiting for others to arrive.</p>\n\n<p> <p>It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an {@code\n IllegalStateException} only upon some subsequent operation on\n this phaser, if ever.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arrival phase number, or a negative value if terminated</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if not terminated and the number\n of unarrived parties would become negative</p>\n</div></li></ul></div></div></div><div id='method-arriveAndAwaitAdvance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-arriveAndAwaitAdvance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-arriveAndAwaitAdvance' class='name expandable'>arriveAndAwaitAdvance</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Arrives at this phaser and awaits others. ...</div><div class='long'><p>Arrives at this phaser and awaits others. Equivalent in effect\n to {@code awaitAdvance(arrive())}.  If you need to await with\n interruption or timeout, you can arrange this with an analogous\n construction using one of the other forms of the {@code\n awaitAdvance} method.  If instead you need to deregister upon\n arrival, use {@code awaitAdvance(arriveAndDeregister())}.</p>\n\n<p> <p>It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an {@code\n IllegalStateException} only upon some subsequent operation on\n this phaser, if ever.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arrival phase number, or the (negative)\n {@linkplain <a href=\"#!/api/java.util.concurrent.Phaser-method-getPhase\" rel=\"java.util.concurrent.Phaser-method-getPhase\" class=\"docClass\">getPhase</a>() current phase} if terminated</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if not terminated and the number\n of unarrived parties would become negative</p>\n</div></li></ul></div></div></div><div id='method-arriveAndDeregister' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-arriveAndDeregister' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-arriveAndDeregister' class='name expandable'>arriveAndDeregister</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Arrives at this phaser and deregisters from it without waiting\n for others to arrive. ...</div><div class='long'><p>Arrives at this phaser and deregisters from it without waiting\n for others to arrive. Deregistration reduces the number of\n parties required to advance in future phases.  If this phaser\n has a parent, and deregistration causes this phaser to have\n zero parties, this phaser is also deregistered from its parent.</p>\n\n<p> <p>It is a usage error for an unregistered party to invoke this\n method.  However, this error may result in an {@code\n IllegalStateException} only upon some subsequent operation on\n this phaser, if ever.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arrival phase number, or a negative value if terminated</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if not terminated and the number\n of registered or unarrived parties would become negative</p>\n</div></li></ul></div></div></div><div id='method-awaitAdvance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-awaitAdvance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-awaitAdvance' class='name expandable'>awaitAdvance</a>( <span class='pre'>phase</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Awaits the phase of this phaser to advance from the given phase\n value, returning immediately if the current phase is...</div><div class='long'><p>Awaits the phase of this phaser to advance from the given phase\n value, returning immediately if the current phase is not equal\n to the given phase value or this phaser is terminated.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>phase</span> : Number<div class='sub-desc'><p>an arrival phase number, or negative value if\n terminated; this argument is normally the value returned by a\n previous call to {@code arrive} or {@code arriveAndDeregister}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the next arrival phase number, or the argument if it is\n negative, or the (negative) {@linkplain <a href=\"#!/api/java.util.concurrent.Phaser-method-getPhase\" rel=\"java.util.concurrent.Phaser-method-getPhase\" class=\"docClass\">getPhase</a>() current phase}\n if terminated</p>\n</div></li></ul></div></div></div><div id='method-awaitAdvanceInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-awaitAdvanceInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-awaitAdvanceInterruptibly' class='name expandable'>awaitAdvanceInterruptibly</a>( <span class='pre'>phase, timeout, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Awaits the phase of this phaser to advance from the given phase\n value or the given timeout to elapse, throwing {@cod...</div><div class='long'><p>Awaits the phase of this phaser to advance from the given phase\n value or the given timeout to elapse, throwing {@code\n InterruptedException} if interrupted while waiting, or\n returning immediately if the current phase is not equal to the\n given phase value or this phaser is terminated.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>phase</span> : Number<div class='sub-desc'><p>an arrival phase number, or negative value if\n terminated; this argument is normally the value returned by a\n previous call to {@code arrive} or {@code arriveAndDeregister}.</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the next arrival phase number, or the argument if it is\n negative, or the (negative) {@linkplain <a href=\"#!/api/java.util.concurrent.Phaser-method-getPhase\" rel=\"java.util.concurrent.Phaser-method-getPhase\" class=\"docClass\">getPhase</a>() current phase}\n if terminated</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if thread interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutException if timed out while waiting</p>\n</div></li></ul></div></div></div><div id='method-bulkRegister' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-bulkRegister' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-bulkRegister' class='name expandable'>bulkRegister</a>( <span class='pre'>parties</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds the given number of new unarrived parties to this phaser. ...</div><div class='long'><p>Adds the given number of new unarrived parties to this phaser.\n If an ongoing invocation of onAdvance is in progress,\n this method may await its completion before returning.  If this\n phaser has a parent, and the given number of parties is greater\n than zero, and this phaser previously had no registered\n parties, this child phaser is also registered with its parent.\n If this phaser is terminated, the attempt to register has no\n effect, and a negative value is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parties</span> : Number<div class='sub-desc'><p>the number of additional parties required to\n advance to the next phase</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arrival phase number to which this registration\n applied.  If this value is negative, then this phaser has\n terminated, in which case registration has no effect.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if attempting to register more\n than the maximum supported number of parties</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code parties &lt; 0}</p>\n</div></li></ul></div></div></div><div id='method-forceTermination' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-forceTermination' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-forceTermination' class='name expandable'>forceTermination</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Forces this phaser to enter termination state. ...</div><div class='long'><p>Forces this phaser to enter termination state.  Counts of\n registered parties are unaffected.  If this phaser is a member\n of a tiered set of phasers, then all of the phasers in the set\n are terminated.  If this phaser is already terminated, this\n method has no effect.  This method may be useful for\n coordinating recovery after one or more tasks encounter\n unexpected exceptions.</p>\n</div></div></div><div id='method-getArrivedParties' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-getArrivedParties' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-getArrivedParties' class='name expandable'>getArrivedParties</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of registered parties that have arrived at\n the current phase of this phaser. ...</div><div class='long'><p>Returns the number of registered parties that have arrived at\n the current phase of this phaser. If this phaser has terminated,\n the returned value is meaningless and arbitrary.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of arrived parties</p>\n</div></li></ul></div></div></div><div id='method-getParent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-getParent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-getParent' class='name expandable'>getParent</a>( <span class='pre'></span> ) : Object {java.util.concurrent.Phaser}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the parent of this phaser, or {@code null} if none. ...</div><div class='long'><p>Returns the parent of this phaser, or {@code null} if none.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Phaser}</span><div class='sub-desc'><p>the parent of this phaser, or {@code null} if none</p>\n</div></li></ul></div></div></div><div id='method-getPhase' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-getPhase' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-getPhase' class='name expandable'>getPhase</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current phase number. ...</div><div class='long'><p>Returns the current phase number. The maximum phase number is\n {@code Integer.MAX_VALUE}, after which it restarts at\n zero. Upon termination, the phase number is negative,\n in which case the prevailing phase prior to termination\n may be obtained via {@code getPhase() + Integer.MIN_VALUE}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the phase number, or a negative value if terminated</p>\n</div></li></ul></div></div></div><div id='method-getRegisteredParties' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-getRegisteredParties' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-getRegisteredParties' class='name expandable'>getRegisteredParties</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of parties registered at this phaser. ...</div><div class='long'><p>Returns the number of parties registered at this phaser.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of parties</p>\n</div></li></ul></div></div></div><div id='method-getRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-getRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-getRoot' class='name expandable'>getRoot</a>( <span class='pre'></span> ) : Object {java.util.concurrent.Phaser}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the root ancestor of this phaser, which is the same as\n this phaser if it has no parent. ...</div><div class='long'><p>Returns the root ancestor of this phaser, which is the same as\n this phaser if it has no parent.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Phaser}</span><div class='sub-desc'><p>the root ancestor of this phaser</p>\n</div></li></ul></div></div></div><div id='method-getUnarrivedParties' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-getUnarrivedParties' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-getUnarrivedParties' class='name expandable'>getUnarrivedParties</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of registered parties that have not yet\n arrived at the current phase of this phaser. ...</div><div class='long'><p>Returns the number of registered parties that have not yet\n arrived at the current phase of this phaser. If this phaser has\n terminated, the returned value is meaningless and arbitrary.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of unarrived parties</p>\n</div></li></ul></div></div></div><div id='method-isTerminated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-isTerminated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-isTerminated' class='name expandable'>isTerminated</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this phaser has been terminated. ...</div><div class='long'><p>Returns {@code true} if this phaser has been terminated.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this phaser has been terminated</p>\n</div></li></ul></div></div></div><div id='method-register' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-register' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-register' class='name expandable'>register</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds a new unarrived party to this phaser. ...</div><div class='long'><p>Adds a new unarrived party to this phaser.  If an ongoing\n invocation of onAdvance is in progress, this method\n may await its completion before returning.  If this phaser has\n a parent, and this phaser previously had no registered parties,\n this child phaser is also registered with its parent. If\n this phaser is terminated, the attempt to register has\n no effect, and a negative value is returned.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arrival phase number to which this registration\n applied.  If this value is negative, then this phaser has\n terminated, in which case registration has no effect.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if attempting to register more\n than the maximum supported number of parties</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Phaser'>java.util.concurrent.Phaser</span><br/><a href='source/Phaser.html#java-util-concurrent-Phaser-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Phaser-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this phaser, as well as its\n state. ...</div><div class='long'><p>Returns a string identifying this phaser, as well as its\n state.  The state, in brackets, includes the String {@code\n \"phase = \"} followed by the phase number, {@code \"parties = \"}\n followed by the number of registered parties, and {@code\n \"arrived = \"} followed by the number of arrived parties.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this phaser, as well as its state</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});