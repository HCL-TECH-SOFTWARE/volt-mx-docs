Ext.data.JsonP.java_util_concurrent_Exchanger({"tagname":"class","name":"java.util.concurrent.Exchanger","autodetected":{},"files":[{"filename":"Exchanger.js","href":"Exchanger.html#java-util-concurrent-Exchanger"}],"extends":"java.lang.Object","since":"1.5","author":[{"tagname":"author","name":"Doug Lea and Bill Scherer and Michael Scott","email":null}],"params":[{"tagname":"params","doc":"<p><V> The type of objects that may be exchanged</V></p>\n"}],"members":[{"name":"exchange","tagname":"method","owner":"java.util.concurrent.Exchanger","id":"method-exchange","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.Exchanger","short_doc":"A synchronization point at which threads can pair and swap elements\n within pairs. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.Exchanger</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Exchanger.html#java-util-concurrent-Exchanger' target='_blank'>Exchanger.js</a></div></pre><div class='doc-contents'><p>A synchronization point at which threads can pair and swap elements\n within pairs.  Each thread presents some object on entry to the\n <a href=\"#!/api/java.util.concurrent.Exchanger-method-exchange\" rel=\"java.util.concurrent.Exchanger-method-exchange\" class=\"docClass\">exchange</a> method, matches with a partner thread,\n and receives its partner's object on return.  An Exchanger may be\n viewed as a bidirectional form of a <a href=\"#!/api/java.util.concurrent.SynchronousQueue\" rel=\"java.util.concurrent.SynchronousQueue\" class=\"docClass\">java.util.concurrent.SynchronousQueue</a>.\n Exchangers may be useful in applications such as genetic algorithms\n and pipeline designs.</p>\n\n<p> <p><b>Sample Usage:</b>\n Here are the highlights of a class that uses an {@code Exchanger}\n to swap buffers between threads so that the thread filling the\n buffer gets a freshly emptied one when it needs it, handing off the\n filled one to the thread emptying the buffer.\n <pre> {@code\n class FillAndEmpty {\n   Exchanger<DataBuffer> exchanger = new Exchanger&lt;>();\n   DataBuffer initialEmptyBuffer = ... a made-up type\n   DataBuffer initialFullBuffer = ...</DataBuffer></pre></p>\n\n<p>   class FillingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer = initialEmptyBuffer;\n       try {\n         while (currentBuffer != null) {\n           addToBuffer(currentBuffer);\n           if (currentBuffer.isFull())\n             currentBuffer = exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ... }\n     }\n   }</p>\n\n<p>   class EmptyingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer = initialFullBuffer;\n       try {\n         while (currentBuffer != null) {\n           takeFromBuffer(currentBuffer);\n           if (currentBuffer.isEmpty())\n             currentBuffer = exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ...}\n     }\n   }</p>\n\n<p>   void start() {\n     new Thread(new FillingLoop()).start();\n     new Thread(new EmptyingLoop()).start();\n   }\n }}</p>\n\n<p> <p>Memory consistency effects: For each pair of threads that\n successfully exchange objects via an {@code Exchanger}, actions\n prior to the {@code exchange()} in each thread\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n those subsequent to a return from the corresponding {@code exchange()}\n in the other thread.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><V> The type of objects that may be exchanged</V></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-exchange' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.Exchanger'>java.util.concurrent.Exchanger</span><br/><a href='source/Exchanger.html#java-util-concurrent-Exchanger-method-exchange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.Exchanger-method-exchange' class='name expandable'>exchange</a>( <span class='pre'>x, timeout, unit</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits for another thread to arrive at this exchange point (unless\n the current thread is {@linkplain Thread#interrupt...</div><div class='long'><p>Waits for another thread to arrive at this exchange point (unless\n the current thread is {@linkplain Thread#interrupt interrupted} or\n the specified waiting time elapses), and then transfers the given\n object to it, receiving its object in return.</p>\n\n<p> <p>If another thread is already waiting at the exchange point then\n it is resumed for thread scheduling purposes and receives the object\n passed in by the current thread.  The current thread returns immediately,\n receiving the object passed to the exchange by that other thread.</p>\n\n<p> <p>If no other thread is already waiting at the exchange then the\n current thread is disabled for thread scheduling purposes and lies\n dormant until one of three things happens:\n <ul>\n <li>Some other thread enters the exchange; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>The specified waiting time elapses.\n </li></li></li></ul>\n <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n for the exchange,\n </li></li></ul>\n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.</p>\n\n<p> <p>If the specified waiting time elapses then <a href=\"#!/api/java.util.concurrent.TimeoutException\" rel=\"java.util.concurrent.TimeoutException\" class=\"docClass\">java.util.concurrent.TimeoutException</a> is thrown.  If the time is less than or equal\n to zero, the method will not wait at all.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Object {Object}<div class='sub-desc'><p>the object to exchange</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the {@code timeout} argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the object provided by the other thread</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread was\n         interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutException if the specified waiting time elapses\n         before another thread enters the exchange</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});