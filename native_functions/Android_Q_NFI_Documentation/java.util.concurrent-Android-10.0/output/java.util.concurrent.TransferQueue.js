Ext.data.JsonP.java_util_concurrent_TransferQueue({"tagname":"class","name":"java.util.concurrent.TransferQueue","autodetected":{},"files":[{"filename":"TransferQueue.js","href":"TransferQueue.html#java-util-concurrent-TransferQueue"}],"since":"1.7","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><E> the type of elements held in this queue</E></p>\n"}],"members":[{"name":"getWaitingConsumerCount","tagname":"method","owner":"java.util.concurrent.TransferQueue","id":"method-getWaitingConsumerCount","meta":{}},{"name":"hasWaitingConsumer","tagname":"method","owner":"java.util.concurrent.TransferQueue","id":"method-hasWaitingConsumer","meta":{}},{"name":"transfer","tagname":"method","owner":"java.util.concurrent.TransferQueue","id":"method-transfer","meta":{}},{"name":"tryTransfer","tagname":"method","owner":"java.util.concurrent.TransferQueue","id":"method-tryTransfer","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.TransferQueue","short_doc":"implements java.util.concurrent.BlockingQueue\n\n A java.util.concurrent.BlockingQueue in which producers may wait for ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/TransferQueue.html#java-util-concurrent-TransferQueue' target='_blank'>TransferQueue.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a></p>\n\n<p> A <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a> in which producers may wait for consumers\n to receive elements.  A {@code TransferQueue} may be useful for\n example in message passing applications in which producers\n sometimes (using method <a href=\"#!/api/java.util.concurrent.TransferQueue-method-transfer\" rel=\"java.util.concurrent.TransferQueue-method-transfer\" class=\"docClass\">transfer</a>) await receipt of\n elements by consumers invoking {@code take} or {@code poll}, while\n at other times enqueue elements (via method {@code put}) without\n waiting for receipt.\n {@linkplain <a href=\"#!/api/java.util.concurrent.TransferQueue-method-tryTransfer\" rel=\"java.util.concurrent.TransferQueue-method-tryTransfer\" class=\"docClass\">tryTransfer</a>(Object) Non-blocking} and\n {@linkplain <a href=\"#!/api/java.util.concurrent.TransferQueue-method-tryTransfer\" rel=\"java.util.concurrent.TransferQueue-method-tryTransfer\" class=\"docClass\">tryTransfer</a>(Object,long,TimeUnit) time-out} versions of\n {@code tryTransfer} are also available.\n A {@code TransferQueue} may also be queried, via <a href=\"#!/api/java.util.concurrent.TransferQueue-method-hasWaitingConsumer\" rel=\"java.util.concurrent.TransferQueue-method-hasWaitingConsumer\" class=\"docClass\">hasWaitingConsumer</a>, whether there are any threads waiting for\n items, which is a converse analogy to a {@code peek} operation.</p>\n\n<p> <p>Like other blocking queues, a {@code TransferQueue} may be\n capacity bounded.  If so, an attempted transfer operation may\n initially block waiting for available space, and/or subsequently\n block waiting for reception by a consumer.  Note that in a queue\n with zero capacity, such as <a href=\"#!/api/java.util.concurrent.SynchronousQueue\" rel=\"java.util.concurrent.SynchronousQueue\" class=\"docClass\">java.util.concurrent.SynchronousQueue</a>, {@code put}\n and {@code transfer} are effectively synonymous.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E> the type of elements held in this queue</E></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getWaitingConsumerCount' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.TransferQueue'>java.util.concurrent.TransferQueue</span><br/><a href='source/TransferQueue.html#java-util-concurrent-TransferQueue-method-getWaitingConsumerCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.TransferQueue-method-getWaitingConsumerCount' class='name expandable'>getWaitingConsumerCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of consumers waiting to\n receive elements via take or timed\n poll. ...</div><div class='long'><p>Returns an estimate of the number of consumers waiting to\n receive elements via take or timed\n poll.  The return value is an\n approximation of a momentary state of affairs, that may be\n inaccurate if consumers have completed or given up waiting.\n The value may be useful for monitoring and heuristics, but\n not for synchronization control.  Implementations of this\n method are likely to be noticeably slower than those for\n <a href=\"#!/api/java.util.concurrent.TransferQueue-method-hasWaitingConsumer\" rel=\"java.util.concurrent.TransferQueue-method-hasWaitingConsumer\" class=\"docClass\">hasWaitingConsumer</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of consumers waiting to receive elements</p>\n</div></li></ul></div></div></div><div id='method-hasWaitingConsumer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.TransferQueue'>java.util.concurrent.TransferQueue</span><br/><a href='source/TransferQueue.html#java-util-concurrent-TransferQueue-method-hasWaitingConsumer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.TransferQueue-method-hasWaitingConsumer' class='name expandable'>hasWaitingConsumer</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if there is at least one consumer waiting\n to receive an element via take or\n timed poll. ...</div><div class='long'><p>Returns {@code true} if there is at least one consumer waiting\n to receive an element via take or\n timed poll.\n The return value represents a momentary state of affairs.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there is at least one waiting consumer</p>\n</div></li></ul></div></div></div><div id='method-transfer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.TransferQueue'>java.util.concurrent.TransferQueue</span><br/><a href='source/TransferQueue.html#java-util-concurrent-TransferQueue-method-transfer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.TransferQueue-method-transfer' class='name expandable'>transfer</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Transfers the element to a consumer, waiting if necessary to do so. ...</div><div class='long'><p>Transfers the element to a consumer, waiting if necessary to do so.</p>\n\n<p> <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n take or timed poll),\n else waits until the element is received by a consumer.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to transfer</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting,\n         in which case the element is not left enqueued</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this queue</p>\n</div></li></ul></div></div></div><div id='method-tryTransfer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.TransferQueue'>java.util.concurrent.TransferQueue</span><br/><a href='source/TransferQueue.html#java-util-concurrent-TransferQueue-method-tryTransfer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.TransferQueue-method-tryTransfer' class='name expandable'>tryTransfer</a>( <span class='pre'>e, timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Transfers the element to a consumer if it is possible to do so\n before the timeout elapses. ...</div><div class='long'><p>Transfers the element to a consumer if it is possible to do so\n before the timeout elapses.</p>\n\n<p> <p>More precisely, transfers the specified element immediately\n if there exists a consumer already waiting to receive it (in\n take or timed poll),\n else waits until the element is received by a consumer,\n returning {@code false} if the specified wait time elapses\n before the element can be transferred.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to transfer</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful, or {@code false} if\n         the specified waiting time elapses before completion,\n         in which case the element is not left enqueued</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting,\n         in which case the element is not left enqueued</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the class of the specified element\n         prevents it from being added to this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if some property of the specified\n         element prevents it from being added to this queue</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});