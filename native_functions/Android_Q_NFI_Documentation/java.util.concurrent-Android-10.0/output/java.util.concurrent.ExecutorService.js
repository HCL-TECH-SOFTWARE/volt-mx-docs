Ext.data.JsonP.java_util_concurrent_ExecutorService({"tagname":"class","name":"java.util.concurrent.ExecutorService","autodetected":{},"files":[{"filename":"ExecutorService.js","href":"ExecutorService.html#java-util-concurrent-ExecutorService"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"awaitTermination","tagname":"method","owner":"java.util.concurrent.ExecutorService","id":"method-awaitTermination","meta":{}},{"name":"invokeAll","tagname":"method","owner":"java.util.concurrent.ExecutorService","id":"method-invokeAll","meta":{}},{"name":"invokeAny","tagname":"method","owner":"java.util.concurrent.ExecutorService","id":"method-invokeAny","meta":{}},{"name":"isShutdown","tagname":"method","owner":"java.util.concurrent.ExecutorService","id":"method-isShutdown","meta":{}},{"name":"isTerminated","tagname":"method","owner":"java.util.concurrent.ExecutorService","id":"method-isTerminated","meta":{}},{"name":"shutdown","tagname":"method","owner":"java.util.concurrent.ExecutorService","id":"method-shutdown","meta":{}},{"name":"shutdownNow","tagname":"method","owner":"java.util.concurrent.ExecutorService","id":"method-shutdownNow","meta":{}},{"name":"submit","tagname":"method","owner":"java.util.concurrent.ExecutorService","id":"method-submit","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ExecutorService","short_doc":"implements java.util.concurrent.Executor\n\n An java.util.concurrent.Executor that provides methods to manage terminati...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService' target='_blank'>ExecutorService.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.Executor\" rel=\"java.util.concurrent.Executor\" class=\"docClass\">java.util.concurrent.Executor</a></p>\n\n<p> An <a href=\"#!/api/java.util.concurrent.Executor\" rel=\"java.util.concurrent.Executor\" class=\"docClass\">java.util.concurrent.Executor</a> that provides methods to manage termination and\n methods that can produce a <a href=\"#!/api/java.util.concurrent.Future\" rel=\"java.util.concurrent.Future\" class=\"docClass\">java.util.concurrent.Future</a> for tracking progress of\n one or more asynchronous tasks.</p>\n\n<p> <p>An {@code ExecutorService} can be shut down, which will cause\n it to reject new tasks.  Two different methods are provided for\n shutting down an {@code ExecutorService}. The <a href=\"#!/api/java.util.concurrent.ExecutorService-method-shutdown\" rel=\"java.util.concurrent.ExecutorService-method-shutdown\" class=\"docClass\">shutdown</a>\n method will allow previously submitted tasks to execute before\n terminating, while the <a href=\"#!/api/java.util.concurrent.ExecutorService-method-shutdownNow\" rel=\"java.util.concurrent.ExecutorService-method-shutdownNow\" class=\"docClass\">shutdownNow</a> method prevents waiting\n tasks from starting and attempts to stop currently executing tasks.\n Upon termination, an executor has no tasks actively executing, no\n tasks awaiting execution, and no new tasks can be submitted.  An\n unused {@code ExecutorService} should be shut down to allow\n reclamation of its resources.</p>\n\n<p> <p>Method {@code submit} extends base method java.util.concurrent.Executor.execute(Runnable) by creating and returning a <a href=\"#!/api/java.util.concurrent.Future\" rel=\"java.util.concurrent.Future\" class=\"docClass\">java.util.concurrent.Future</a>\n that can be used to cancel execution and/or wait for completion.\n Methods {@code invokeAny} and {@code invokeAll} perform the most\n commonly useful forms of bulk execution, executing a collection of\n tasks and then waiting for at least one, or all, to\n complete. (Class <a href=\"#!/api/java.util.concurrent.ExecutorCompletionService\" rel=\"java.util.concurrent.ExecutorCompletionService\" class=\"docClass\">java.util.concurrent.ExecutorCompletionService</a> can be used to\n write customized variants of these methods.)</p>\n\n<p> <p>The <a href=\"#!/api/java.util.concurrent.Executors\" rel=\"java.util.concurrent.Executors\" class=\"docClass\">java.util.concurrent.Executors</a> class provides factory methods for the\n executor services provided in this package.</p>\n\n<p> <h3>Usage Examples</h3></p>\n\n<p> Here is a sketch of a network service in which threads in a thread\n pool service incoming requests. It uses the preconfigured <a href=\"#!/api/java.util.concurrent.Executors-method-newFixedThreadPool\" rel=\"java.util.concurrent.Executors-method-newFixedThreadPool\" class=\"docClass\">java.util.concurrent.Executors.newFixedThreadPool</a> factory method:</p>\n\n<p> <pre> {@code\n class NetworkService implements Runnable {\n   private final ServerSocket serverSocket;\n   private final ExecutorService pool;</pre></p>\n\n<p>   public NetworkService(int port, int poolSize)\n       throws IOException {\n     serverSocket = new ServerSocket(port);\n     pool = Executors.newFixedThreadPool(poolSize);\n   }</p>\n\n<p>   public void run() { // run the service\n     try {\n       for (;;) {\n         pool.execute(new Handler(serverSocket.accept()));\n       }\n     } catch (IOException ex) {\n       pool.shutdown();\n     }\n   }\n }</p>\n\n<p> class Handler implements Runnable {\n   private final Socket socket;\n   Handler(Socket socket) { this.socket = socket; }\n   public void run() {\n     // read and service request on socket\n   }\n }}</p>\n\n<p> The following method shuts down an {@code ExecutorService} in two phases,\n first by calling {@code shutdown} to reject incoming tasks, and then\n calling {@code shutdownNow}, if necessary, to cancel any lingering tasks:</p>\n\n<p> <pre> {@code\n void shutdownAndAwaitTermination(ExecutorService pool) {\n   pool.shutdown(); // Disable new tasks from being submitted\n   try {\n     // Wait a while for existing tasks to terminate\n     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {\n       pool.shutdownNow(); // Cancel currently executing tasks\n       // Wait a while for tasks to respond to being cancelled\n       if (!pool.awaitTermination(60, TimeUnit.SECONDS))\n           System.err.println(\"Pool did not terminate\");\n     }\n   } catch (InterruptedException ie) {\n     // (Re-)Cancel if current thread also interrupted\n     pool.shutdownNow();\n     // Preserve interrupt status\n     Thread.currentThread().interrupt();\n   }\n }}</pre></p>\n\n<p> <p>Memory consistency effects: Actions in a thread prior to the\n submission of a {@code Runnable} or {@code Callable} task to an\n {@code ExecutorService}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n any actions taken by that task, which in turn <i>happen-before</i> the\n result is retrieved via {@code Future.get()}.</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-awaitTermination' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorService'>java.util.concurrent.ExecutorService</span><br/><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService-method-awaitTermination' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorService-method-awaitTermination' class='name expandable'>awaitTermination</a>( <span class='pre'>timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Blocks until all tasks have completed execution after a shutdown\n request, or the timeout occurs, or the current thre...</div><div class='long'><p>Blocks until all tasks have completed execution after a shutdown\n request, or the timeout occurs, or the current thread is\n interrupted, whichever happens first.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this executor terminated and\n         {@code false} if the timeout elapsed before termination</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-invokeAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorService'>java.util.concurrent.ExecutorService</span><br/><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService-method-invokeAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorService-method-invokeAll' class='name expandable'>invokeAll</a>( <span class='pre'>tasks, timeout, unit, </span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Executes the given tasks, returning a list of Futures holding\n their status and results\n when all complete or the tim...</div><div class='long'><p>Executes the given tasks, returning a list of Futures holding\n their status and results\n when all complete or the timeout expires, whichever happens first.\n <a href=\"#!/api/java.util.concurrent.Future-method-isDone\" rel=\"java.util.concurrent.Future-method-isDone\" class=\"docClass\">java.util.concurrent.Future.isDone</a> is {@code true} for each\n element of the returned list.\n Upon return, tasks that have not completed are cancelled.\n Note that a <em>completed</em> task could have\n terminated either normally or by throwing an exception.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tasks</span> : Object {java.util.Collection}<div class='sub-desc'><p>the collection of tasks</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the values returned from the tasks</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a list of Futures representing the tasks, in the same\n         sequential order as produced by the iterator for the\n         given task list. If the operation did not time out,\n         each task will have completed. If it did time out, some\n         of these tasks will not have completed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting, in\n         which case unfinished tasks are cancelled</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if tasks, any of its elements, or\n         unit are {@code null}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if any task cannot be scheduled\n         for execution</p>\n</div></li></ul></div></div></div><div id='method-invokeAny' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorService'>java.util.concurrent.ExecutorService</span><br/><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService-method-invokeAny' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorService-method-invokeAny' class='name expandable'>invokeAny</a>( <span class='pre'>tasks, timeout, unit, </span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an ex...</div><div class='long'><p>Executes the given tasks, returning the result\n of one that has completed successfully (i.e., without throwing\n an exception), if any do before the given timeout elapses.\n Upon normal or exceptional return, tasks that have not\n completed are cancelled.\n The results of this method are undefined if the given\n collection is modified while this operation is in progress.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tasks</span> : Object {java.util.Collection}<div class='sub-desc'><p>the collection of tasks</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the values returned from the tasks</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the result returned by one of the tasks</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if tasks, or unit, or any element\n         task subject to execution is {@code null}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutException if the given timeout elapses before\n         any task successfully completes</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ExecutionException if no task successfully completes</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if tasks cannot be scheduled\n         for execution</p>\n</div></li></ul></div></div></div><div id='method-isShutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorService'>java.util.concurrent.ExecutorService</span><br/><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService-method-isShutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorService-method-isShutdown' class='name expandable'>isShutdown</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this executor has been shut down. ...</div><div class='long'><p>Returns {@code true} if this executor has been shut down.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this executor has been shut down</p>\n</div></li></ul></div></div></div><div id='method-isTerminated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorService'>java.util.concurrent.ExecutorService</span><br/><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService-method-isTerminated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorService-method-isTerminated' class='name expandable'>isTerminated</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if all tasks have completed following shut down. ...</div><div class='long'><p>Returns {@code true} if all tasks have completed following shut down.\n Note that {@code isTerminated} is never {@code true} unless\n either {@code shutdown} or {@code shutdownNow} was called first.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if all tasks have completed following shut down</p>\n</div></li></ul></div></div></div><div id='method-shutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorService'>java.util.concurrent.ExecutorService</span><br/><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService-method-shutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorService-method-shutdown' class='name expandable'>shutdown</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted. ...</div><div class='long'><p>Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.</p>\n\n<p> <p>This method does not wait for previously submitted tasks to\n complete execution.  Use <a href=\"#!/api/java.util.concurrent.ExecutorService-method-awaitTermination\" rel=\"java.util.concurrent.ExecutorService-method-awaitTermination\" class=\"docClass\">awaitTermination</a>\n to do that.</p>\n</div></div></div><div id='method-shutdownNow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorService'>java.util.concurrent.ExecutorService</span><br/><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService-method-shutdownNow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorService-method-shutdownNow' class='name expandable'>shutdownNow</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the task...</div><div class='long'><p>Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution.</p>\n\n<p> <p>This method does not wait for actively executing tasks to\n terminate.  Use <a href=\"#!/api/java.util.concurrent.ExecutorService-method-awaitTermination\" rel=\"java.util.concurrent.ExecutorService-method-awaitTermination\" class=\"docClass\">awaitTermination</a> to\n do that.</p>\n\n<p> <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  For example, typical\n implementations will cancel via Thread.interrupt, so any\n task that fails to respond to interrupts may never terminate.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>list of tasks that never commenced execution</p>\n</div></li></ul></div></div></div><div id='method-submit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorService'>java.util.concurrent.ExecutorService</span><br/><a href='source/ExecutorService.html#java-util-concurrent-ExecutorService-method-submit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorService-method-submit' class='name expandable'>submit</a>( <span class='pre'>task</span> ) : Object {java.util.concurrent.Future}<span class=\"signature\"></span></div><div class='description'><div class='short'>Submits a Runnable task for execution and returns a Future\n representing that task. ...</div><div class='long'><p>Submits a Runnable task for execution and returns a Future\n representing that task. The Future's {@code get} method will\n return {@code null} upon <em>successful</em> completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>task</span> : Object {Runnable}<div class='sub-desc'><p>the task to submit</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Future}</span><div class='sub-desc'><p>a Future representing pending completion of the task</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if the task cannot be\n         scheduled for execution</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the task is null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});