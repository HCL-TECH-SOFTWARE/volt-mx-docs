Ext.data.JsonP.java_util_concurrent_ThreadLocalRandom({"tagname":"class","name":"java.util.concurrent.ThreadLocalRandom","autodetected":{},"files":[{"filename":"ThreadLocalRandom.js","href":"ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom"}],"extends":"java.util.Random","since":"1.7","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"current","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-current","meta":{}},{"name":"doubles","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-doubles","meta":{}},{"name":"ints","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-ints","meta":{}},{"name":"longs","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-longs","meta":{}},{"name":"nextBoolean","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-nextBoolean","meta":{}},{"name":"nextDouble","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-nextDouble","meta":{}},{"name":"nextFloat","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-nextFloat","meta":{}},{"name":"nextGaussian","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-nextGaussian","meta":{}},{"name":"nextInt","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-nextInt","meta":{}},{"name":"nextLong","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-nextLong","meta":{}},{"name":"setSeed","tagname":"method","owner":"java.util.concurrent.ThreadLocalRandom","id":"method-setSeed","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ThreadLocalRandom","short_doc":"A random number generator isolated to the current thread. ...","classIcon":"icon-class","superclasses":["java.util.Random"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.util.Random<div class='subclass '><strong>java.util.concurrent.ThreadLocalRandom</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom' target='_blank'>ThreadLocalRandom.js</a></div></pre><div class='doc-contents'><p>A random number generator isolated to the current thread.  Like the\n global java.util.Random generator used by the java.lang.Math class, a {@code ThreadLocalRandom} is initialized\n with an internally generated seed that may not otherwise be\n modified. When applicable, use of {@code ThreadLocalRandom} rather\n than shared {@code Random} objects in concurrent programs will\n typically encounter much less overhead and contention.  Use of\n {@code ThreadLocalRandom} is particularly appropriate when multiple\n tasks (for example, each a <a href=\"#!/api/java.util.concurrent.ForkJoinTask\" rel=\"java.util.concurrent.ForkJoinTask\" class=\"docClass\">java.util.concurrent.ForkJoinTask</a>) use random numbers\n in parallel in thread pools.</p>\n\n<p> <p>Usages of this class should typically be of the form:\n {@code ThreadLocalRandom.current().nextX(...)} (where\n {@code X} is {@code Int}, {@code Long}, etc).\n When all usages are of this form, it is never possible to\n accidently share a {@code ThreadLocalRandom} across multiple threads.</p>\n\n<p> <p>This class also provides additional commonly used bounded random\n generation methods.</p>\n\n<p> <p>Instances of {@code ThreadLocalRandom} are not cryptographically\n secure.  Consider instead using java.security.SecureRandom\n in security-sensitive applications. Additionally,\n default-constructed instances do not use a cryptographically random\n seed unless the {@linkplain System#getProperty system property}\n {@code java.util.secureRandomSeed} is set to {@code true}.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-current' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-current' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-current' class='name expandable'>current</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ThreadLocalRandom}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current thread's {@code ThreadLocalRandom}. ...</div><div class='long'><p>Returns the current thread's {@code ThreadLocalRandom}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ThreadLocalRandom}</span><div class='sub-desc'><p>the current thread's {@code ThreadLocalRandom}</p>\n</div></li></ul></div></div></div><div id='method-doubles' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-doubles' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-doubles' class='name expandable'>doubles</a>( <span class='pre'>randomNumberOrigin, randomNumberBound, randomNumberBound</span> ) : Object {java.util.stream.DoubleStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an effectively unlimited stream of pseudorandom {@code\n double} values, each conforming to the given origin (...</div><div class='long'><p>Returns an effectively unlimited stream of pseudorandom {@code\n double} values, each conforming to the given origin (inclusive) and bound\n (exclusive).</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>randomNumberOrigin</span> : Number<div class='sub-desc'><p>the origin (inclusive) of each random value</p>\n</div></li><li><span class='pre'>randomNumberBound</span> : Number<div class='sub-desc'><p>the bound (exclusive) of each random value</p>\n</div></li><li><span class='pre'>randomNumberBound</span> : Object<div class='sub-desc'><p>the bound (exclusive) of each random value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.DoubleStream}</span><div class='sub-desc'><p>a stream of pseudorandom {@code double} values,\n         each with the given origin (inclusive) and bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code randomNumberOrigin}\n         is greater than or equal to {@code randomNumberBound}</p>\n</div></li></ul></div></div></div><div id='method-ints' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-ints' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-ints' class='name expandable'>ints</a>( <span class='pre'>randomNumberOrigin, randomNumberBound, randomNumberBound</span> ) : Object {java.util.stream.IntStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an effectively unlimited stream of pseudorandom {@code\n int} values, each conforming to the given origin (inc...</div><div class='long'><p>Returns an effectively unlimited stream of pseudorandom {@code\n int} values, each conforming to the given origin (inclusive) and bound\n (exclusive).</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>randomNumberOrigin</span> : Number<div class='sub-desc'><p>the origin (inclusive) of each random value</p>\n</div></li><li><span class='pre'>randomNumberBound</span> : Number<div class='sub-desc'><p>the bound (exclusive) of each random value</p>\n</div></li><li><span class='pre'>randomNumberBound</span> : Object<div class='sub-desc'><p>the bound (exclusive) of each random value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.IntStream}</span><div class='sub-desc'><p>a stream of pseudorandom {@code int} values,\n         each with the given origin (inclusive) and bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code randomNumberOrigin}\n         is greater than or equal to {@code randomNumberBound}</p>\n</div></li></ul></div></div></div><div id='method-longs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-longs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-longs' class='name expandable'>longs</a>( <span class='pre'>randomNumberOrigin, randomNumberBound, randomNumberBound</span> ) : Object {java.util.stream.LongStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an effectively unlimited stream of pseudorandom {@code\n long} values, each conforming to the given origin (in...</div><div class='long'><p>Returns an effectively unlimited stream of pseudorandom {@code\n long} values, each conforming to the given origin (inclusive) and bound\n (exclusive).</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>randomNumberOrigin</span> : Number<div class='sub-desc'><p>the origin (inclusive) of each random value</p>\n</div></li><li><span class='pre'>randomNumberBound</span> : Number<div class='sub-desc'><p>the bound (exclusive) of each random value</p>\n</div></li><li><span class='pre'>randomNumberBound</span> : Object<div class='sub-desc'><p>the bound (exclusive) of each random value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.LongStream}</span><div class='sub-desc'><p>a stream of pseudorandom {@code long} values,\n         each with the given origin (inclusive) and bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code randomNumberOrigin}\n         is greater than or equal to {@code randomNumberBound}</p>\n</div></li></ul></div></div></div><div id='method-nextBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-nextBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-nextBoolean' class='name expandable'>nextBoolean</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a pseudorandom {@code boolean} value. ...</div><div class='long'><p>Returns a pseudorandom {@code boolean} value.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>a pseudorandom {@code boolean} value</p>\n</div></li></ul></div></div></div><div id='method-nextDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-nextDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-nextDouble' class='name expandable'>nextDouble</a>( <span class='pre'>origin, bound</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a pseudorandom {@code double} value between the specified\n origin (inclusive) and bound (exclusive). ...</div><div class='long'><p>Returns a pseudorandom {@code double} value between the specified\n origin (inclusive) and bound (exclusive).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>origin</span> : Number<div class='sub-desc'><p>the least value returned</p>\n</div></li><li><span class='pre'>bound</span> : Number<div class='sub-desc'><p>the upper bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a pseudorandom {@code double} value between the origin\n         (inclusive) and the bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code origin} is greater than\n         or equal to {@code bound}</p>\n</div></li></ul></div></div></div><div id='method-nextFloat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-nextFloat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-nextFloat' class='name expandable'>nextFloat</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a pseudorandom {@code float} value between zero\n (inclusive) and one (exclusive). ...</div><div class='long'><p>Returns a pseudorandom {@code float} value between zero\n (inclusive) and one (exclusive).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a pseudorandom {@code float} value between zero\n         (inclusive) and one (exclusive)</p>\n</div></li></ul></div></div></div><div id='method-nextGaussian' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-nextGaussian' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-nextGaussian' class='name expandable'>nextGaussian</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-nextInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-nextInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-nextInt' class='name expandable'>nextInt</a>( <span class='pre'>origin, bound</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a pseudorandom {@code int} value between the specified\n origin (inclusive) and the specified bound (exclusive). ...</div><div class='long'><p>Returns a pseudorandom {@code int} value between the specified\n origin (inclusive) and the specified bound (exclusive).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>origin</span> : Number<div class='sub-desc'><p>the least value returned</p>\n</div></li><li><span class='pre'>bound</span> : Number<div class='sub-desc'><p>the upper bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a pseudorandom {@code int} value between the origin\n         (inclusive) and the bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code origin} is greater than\n         or equal to {@code bound}</p>\n</div></li></ul></div></div></div><div id='method-nextLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-nextLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-nextLong' class='name expandable'>nextLong</a>( <span class='pre'>origin, bound</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a pseudorandom {@code long} value between the specified\n origin (inclusive) and the specified bound (exclusive). ...</div><div class='long'><p>Returns a pseudorandom {@code long} value between the specified\n origin (inclusive) and the specified bound (exclusive).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>origin</span> : Number<div class='sub-desc'><p>the least value returned</p>\n</div></li><li><span class='pre'>bound</span> : Number<div class='sub-desc'><p>the upper bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a pseudorandom {@code long} value between the origin\n         (inclusive) and the bound (exclusive)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code origin} is greater than\n         or equal to {@code bound}</p>\n</div></li></ul></div></div></div><div id='method-setSeed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadLocalRandom'>java.util.concurrent.ThreadLocalRandom</span><br/><a href='source/ThreadLocalRandom.html#java-util-concurrent-ThreadLocalRandom-method-setSeed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadLocalRandom-method-setSeed' class='name expandable'>setSeed</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Throws {@code UnsupportedOperationException}. ...</div><div class='long'><p>Throws {@code UnsupportedOperationException}.  Setting seeds in\n this generator is not supported.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException always</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});