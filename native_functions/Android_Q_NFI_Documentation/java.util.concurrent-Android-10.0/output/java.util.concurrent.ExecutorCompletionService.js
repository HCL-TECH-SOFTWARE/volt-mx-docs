Ext.data.JsonP.java_util_concurrent_ExecutorCompletionService({"tagname":"class","name":"java.util.concurrent.ExecutorCompletionService","autodetected":{},"files":[{"filename":"ExecutorCompletionService.js","href":"ExecutorCompletionService.html#java-util-concurrent-ExecutorCompletionService"}],"extends":"java.lang.Object","members":[{"name":"poll","tagname":"method","owner":"java.util.concurrent.ExecutorCompletionService","id":"method-poll","meta":{}},{"name":"submit","tagname":"method","owner":"java.util.concurrent.ExecutorCompletionService","id":"method-submit","meta":{}},{"name":"take","tagname":"method","owner":"java.util.concurrent.ExecutorCompletionService","id":"method-take","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ExecutorCompletionService","short_doc":"implements java.util.concurrent.CompletionService\n\nA java.util.concurrent.CompletionService that uses a supplied java...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.ExecutorCompletionService</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ExecutorCompletionService.html#java-util-concurrent-ExecutorCompletionService' target='_blank'>ExecutorCompletionService.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.CompletionService\" rel=\"java.util.concurrent.CompletionService\" class=\"docClass\">java.util.concurrent.CompletionService</a></p>\n\n<p>A <a href=\"#!/api/java.util.concurrent.CompletionService\" rel=\"java.util.concurrent.CompletionService\" class=\"docClass\">java.util.concurrent.CompletionService</a> that uses a supplied <a href=\"#!/api/java.util.concurrent.Executor\" rel=\"java.util.concurrent.Executor\" class=\"docClass\">java.util.concurrent.Executor</a>\n to execute tasks.  This class arranges that submitted tasks are,\n upon completion, placed on a queue accessible using {@code take}.\n The class is lightweight enough to be suitable for transient use\n when processing groups of tasks.</p>\n\n<p> <p></p>\n\n<p> <b>Usage Examples.</b></p>\n\n<p> Suppose you have a set of solvers for a certain problem, each\n returning a value of some type {@code Result}, and would like to\n run them concurrently, processing the results of each of them that\n return a non-null value, in some method {@code use(Result r)}. You\n could write this as:</p>\n\n<p> <pre> {@code\n void solve(Executor e,\n            Collection&lt;Callable<Result>> solvers)\n     throws InterruptedException, ExecutionException {\n   CompletionService<Result> ecs\n       = new ExecutorCompletionService<Result>(e);\n   for (Callable<Result> s : solvers)\n     ecs.submit(s);\n   int n = solvers.size();\n   for (int i = 0; i &lt; n; ++i) {\n     Result r = ecs.take().get();\n     if (r != null)\n       use(r);\n   }\n }}</Result></Result></Result></Result></pre></p>\n\n<p> Suppose instead that you would like to use the first non-null result\n of the set of tasks, ignoring any that encounter exceptions,\n and cancelling all other tasks when the first one is ready:</p>\n\n<p> <pre> {@code\n void solve(Executor e,\n            Collection&lt;Callable<Result>> solvers)\n     throws InterruptedException {\n   CompletionService<Result> ecs\n       = new ExecutorCompletionService<Result>(e);\n   int n = solvers.size();\n   List&lt;Future<Result>> futures = new ArrayList&lt;>(n);\n   Result result = null;\n   try {\n     for (Callable<Result> s : solvers)\n       futures.add(ecs.submit(s));\n     for (int i = 0; i &lt; n; ++i) {\n       try {\n         Result r = ecs.take().get();\n         if (r != null) {\n           result = r;\n           break;\n         }\n       } catch (ExecutionException ignore) {}\n     }\n   }\n   finally {\n     for (Future<Result> f : futures)\n       f.cancel(true);\n   }</Result></Result></Result></Result></Result></Result></pre></p>\n\n<p>   if (result != null)\n     use(result);\n }}</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-poll' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorCompletionService'>java.util.concurrent.ExecutorCompletionService</span><br/><a href='source/ExecutorCompletionService.html#java-util-concurrent-ExecutorCompletionService-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorCompletionService-method-poll' class='name expandable'>poll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-submit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorCompletionService'>java.util.concurrent.ExecutorCompletionService</span><br/><a href='source/ExecutorCompletionService.html#java-util-concurrent-ExecutorCompletionService-method-submit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorCompletionService-method-submit' class='name expandable'>submit</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ExecutorCompletionService'>java.util.concurrent.ExecutorCompletionService</span><br/><a href='source/ExecutorCompletionService.html#java-util-concurrent-ExecutorCompletionService-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ExecutorCompletionService-method-take' class='name expandable'>take</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});