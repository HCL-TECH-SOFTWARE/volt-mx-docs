Ext.data.JsonP.java_util_concurrent_ScheduledThreadPoolExecutor({"tagname":"class","name":"java.util.concurrent.ScheduledThreadPoolExecutor","autodetected":{},"files":[{"filename":"ScheduledThreadPoolExecutor.js","href":"ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor"}],"extends":"java.util.concurrent.ThreadPoolExecutor","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"allowCoreThreadTimeOut","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-allowCoreThreadTimeOut","meta":{}},{"name":"allowsCoreThreadTimeOut","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-allowsCoreThreadTimeOut","meta":{}},{"name":"awaitTermination","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-awaitTermination","meta":{}},{"name":"execute","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-execute","meta":{}},{"name":"getActiveCount","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getActiveCount","meta":{}},{"name":"getCompletedTaskCount","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getCompletedTaskCount","meta":{}},{"name":"getContinueExistingPeriodicTasksAfterShutdownPolicy","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-getContinueExistingPeriodicTasksAfterShutdownPolicy","meta":{}},{"name":"getCorePoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getCorePoolSize","meta":{}},{"name":"getExecuteExistingDelayedTasksAfterShutdownPolicy","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-getExecuteExistingDelayedTasksAfterShutdownPolicy","meta":{}},{"name":"getKeepAliveTime","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getKeepAliveTime","meta":{}},{"name":"getLargestPoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getLargestPoolSize","meta":{}},{"name":"getMaximumPoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getMaximumPoolSize","meta":{}},{"name":"getPoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getPoolSize","meta":{}},{"name":"getQueue","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-getQueue","meta":{}},{"name":"getRejectedExecutionHandler","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getRejectedExecutionHandler","meta":{}},{"name":"getRemoveOnCancelPolicy","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-getRemoveOnCancelPolicy","meta":{}},{"name":"getTaskCount","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getTaskCount","meta":{}},{"name":"getThreadFactory","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getThreadFactory","meta":{}},{"name":"invokeAll","tagname":"method","owner":"java.util.concurrent.AbstractExecutorService","id":"method-invokeAll","meta":{}},{"name":"invokeAny","tagname":"method","owner":"java.util.concurrent.AbstractExecutorService","id":"method-invokeAny","meta":{}},{"name":"isShutdown","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-isShutdown","meta":{}},{"name":"isTerminated","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-isTerminated","meta":{}},{"name":"isTerminating","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-isTerminating","meta":{}},{"name":"prestartAllCoreThreads","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-prestartAllCoreThreads","meta":{}},{"name":"prestartCoreThread","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-prestartCoreThread","meta":{}},{"name":"purge","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-purge","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-remove","meta":{}},{"name":"schedule","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-schedule","meta":{}},{"name":"scheduleAtFixedRate","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-scheduleAtFixedRate","meta":{}},{"name":"scheduleWithFixedDelay","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-scheduleWithFixedDelay","meta":{}},{"name":"setContinueExistingPeriodicTasksAfterShutdownPolicy","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-setContinueExistingPeriodicTasksAfterShutdownPolicy","meta":{}},{"name":"setCorePoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setCorePoolSize","meta":{}},{"name":"setExecuteExistingDelayedTasksAfterShutdownPolicy","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-setExecuteExistingDelayedTasksAfterShutdownPolicy","meta":{}},{"name":"setKeepAliveTime","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setKeepAliveTime","meta":{}},{"name":"setMaximumPoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setMaximumPoolSize","meta":{}},{"name":"setRejectedExecutionHandler","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setRejectedExecutionHandler","meta":{}},{"name":"setRemoveOnCancelPolicy","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-setRemoveOnCancelPolicy","meta":{}},{"name":"setThreadFactory","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setThreadFactory","meta":{}},{"name":"shutdown","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-shutdown","meta":{}},{"name":"shutdownNow","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-shutdownNow","meta":{}},{"name":"submit","tagname":"method","owner":"java.util.concurrent.ScheduledThreadPoolExecutor","id":"method-submit","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ScheduledThreadPoolExecutor","short_doc":"implements java.util.concurrent.ScheduledExecutorService\n\nA java.util.concurrent.ThreadPoolExecutor that can addition...","classIcon":"icon-class","superclasses":["java.lang.Object","java.util.concurrent.AbstractExecutorService","java.util.concurrent.ThreadPoolExecutor"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='docClass'>java.util.concurrent.AbstractExecutorService</a><div class='subclass '><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='docClass'>java.util.concurrent.ThreadPoolExecutor</a><div class='subclass '><strong>java.util.concurrent.ScheduledThreadPoolExecutor</strong></div></div></div></div><h4>Files</h4><div class='dependency'><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor' target='_blank'>ScheduledThreadPoolExecutor.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.ScheduledExecutorService\" rel=\"java.util.concurrent.ScheduledExecutorService\" class=\"docClass\">java.util.concurrent.ScheduledExecutorService</a></p>\n\n<p>A <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor\" rel=\"java.util.concurrent.ThreadPoolExecutor\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor</a> that can additionally schedule\n commands to run after a given delay, or to execute periodically.\n This class is preferable to java.util.Timer when multiple\n worker threads are needed, or when the additional flexibility or\n capabilities of <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor\" rel=\"java.util.concurrent.ThreadPoolExecutor\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor</a> (which this class\n extends) are required.</p>\n\n<p> <p>Delayed tasks execute no sooner than they are enabled, but\n without any real-time guarantees about when, after they are\n enabled, they will commence. Tasks scheduled for exactly the same\n execution time are enabled in first-in-first-out (FIFO) order of\n submission.</p>\n\n<p> <p>When a submitted task is cancelled before it is run, execution\n is suppressed.  By default, such a cancelled task is not\n automatically removed from the work queue until its delay elapses.\n While this enables further inspection and monitoring, it may also\n cause unbounded retention of cancelled tasks.</p>\n\n<p> <p>Successive executions of a periodic task scheduled via\n <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-scheduleAtFixedRate\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-scheduleAtFixedRate\" class=\"docClass\">scheduleAtFixedRate</a> or\n <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-scheduleWithFixedDelay\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-scheduleWithFixedDelay\" class=\"docClass\">scheduleWithFixedDelay</a>\n do not overlap. While different executions may be performed by\n different threads, the effects of prior executions\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n those of subsequent ones.</p>\n\n<p> <p>While this class inherits from <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor\" rel=\"java.util.concurrent.ThreadPoolExecutor\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor</a>, a few\n of the inherited tuning methods are not useful for it. In\n particular, because it acts as a fixed-sized pool using\n {@code corePoolSize} threads and an unbounded queue, adjustments\n to {@code maximumPoolSize} have no useful effect. Additionally, it\n is almost never a good idea to set {@code corePoolSize} to zero or\n use {@code allowCoreThreadTimeOut} because this may leave the pool\n without threads to handle tasks once they become eligible to run.</p>\n\n<p> <p><b>Extension notes:</b> This class overrides the\n execute and\n submit\n methods to generate internal <a href=\"#!/api/java.util.concurrent.ScheduledFuture\" rel=\"java.util.concurrent.ScheduledFuture\" class=\"docClass\">java.util.concurrent.ScheduledFuture</a> objects to\n control per-task delays and scheduling.  To preserve\n functionality, any further overrides of these methods in\n subclasses must invoke superclass versions, which effectively\n disables additional task customization.  However, this class\n provides alternative protected extension method\n {@code decorateTask} (one version each for {@code Runnable} and\n {@code Callable}) that can be used to customize the concrete task\n types used to execute commands entered via {@code execute},\n {@code submit}, {@code schedule}, {@code scheduleAtFixedRate},\n and {@code scheduleWithFixedDelay}.  By default, a\n {@code ScheduledThreadPoolExecutor} uses a task type extending\n <a href=\"#!/api/java.util.concurrent.FutureTask\" rel=\"java.util.concurrent.FutureTask\" class=\"docClass\">java.util.concurrent.FutureTask</a>. However, this may be modified or replaced using\n subclasses of the form:</p>\n\n<p> <pre> {@code\n public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {</pre></p>\n\n<p>   static class CustomTask<V> implements RunnableScheduledFuture<V> { ... }</V></V></p>\n\n<p>   protected <V> RunnableScheduledFuture<V> decorateTask(\n                Runnable r, RunnableScheduledFuture<V> task) {\n       return new CustomTask<V>(r, task);\n   }</V></V></V></V></p>\n\n<p>   protected <V> RunnableScheduledFuture<V> decorateTask(\n                Callable<V> c, RunnableScheduledFuture<V> task) {\n       return new CustomTask<V>(c, task);\n   }\n   // ... add constructors, etc.\n }}</V></V></V></V></V></p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-allowCoreThreadTimeOut' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-allowCoreThreadTimeOut' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowCoreThreadTimeOut' class='name expandable'>allowCoreThreadTimeOut</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the policy governing whether core threads may time out and\n terminate if no tasks arrive within the keep-alive t...</div><div class='long'><p>Sets the policy governing whether core threads may time out and\n terminate if no tasks arrive within the keep-alive time, being\n replaced if needed when new tasks arrive. When false, core\n threads are never terminated due to lack of incoming\n tasks. When true, the same keep-alive policy applying to\n non-core threads applies also to core threads. To avoid\n continual thread replacement, the keep-alive time must be\n greater than zero when setting {@code true}. This method\n should in general be called before the pool is actively used.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Boolean<div class='sub-desc'><p>{@code true} if should time out, else {@code false}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if value is {@code true}\n         and the current keep-alive time is not greater than zero</p>\n</div></li></ul></div></div></div><div id='method-allowsCoreThreadTimeOut' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-allowsCoreThreadTimeOut' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut' class='name expandable'>allowsCoreThreadTimeOut</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this pool allows core threads to time out and\n terminate if no tasks arrive within the keepAlive time...</div><div class='long'><p>Returns true if this pool allows core threads to time out and\n terminate if no tasks arrive within the keepAlive time, being\n replaced if needed when new tasks arrive. When true, the same\n keep-alive policy applying to non-core threads applies also to\n core threads. When false (the default), core threads are never\n terminated due to lack of incoming tasks.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if core threads are allowed to time out,\n         else {@code false}</p>\n</div></li></ul></div></div></div><div id='method-awaitTermination' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-awaitTermination' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-awaitTermination' class='name expandable'>awaitTermination</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-execute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-execute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-execute' class='name expandable'>execute</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Executes {@code command} with zero required delay. ...</div><div class='long'><p>Executes {@code command} with zero required delay.\n This has effect equivalent to\n schedule(command, 0, anyUnit).\n Note that inspections of the queue and of the list returned by\n {@code shutdownNow} will access the zero-delayed\n <a href=\"#!/api/java.util.concurrent.ScheduledFuture\" rel=\"java.util.concurrent.ScheduledFuture\" class=\"docClass\">java.util.concurrent.ScheduledFuture</a>, not the {@code command} itself.</p>\n\n<p> <p>A consequence of the use of {@code ScheduledFuture} objects is\n that afterExecute is always\n called with a null second {@code Throwable} argument, even if the\n {@code command} terminated abruptly.  Instead, the {@code Throwable}\n thrown by such a task can be obtained via <a href=\"#!/api/java.util.concurrent.Future-method-get\" rel=\"java.util.concurrent.Future-method-get\" class=\"docClass\">java.util.concurrent.Future.get</a>.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException at discretion of\n         {@code RejectedExecutionHandler}, if the task\n         cannot be accepted for execution because the\n         executor has been shut down</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-execute\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-execute\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor.execute</a></p></div></div></div><div id='method-getActiveCount' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getActiveCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getActiveCount' class='name expandable'>getActiveCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the approximate number of threads that are actively\n executing tasks. ...</div><div class='long'><p>Returns the approximate number of threads that are actively\n executing tasks.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of threads</p>\n</div></li></ul></div></div></div><div id='method-getCompletedTaskCount' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getCompletedTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCompletedTaskCount' class='name expandable'>getCompletedTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the approximate total number of tasks that have\n completed execution. ...</div><div class='long'><p>Returns the approximate total number of tasks that have\n completed execution. Because the states of tasks and threads\n may change dynamically during computation, the returned value\n is only an approximation, but one that does not ever decrease\n across successive calls.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of tasks</p>\n</div></li></ul></div></div></div><div id='method-getContinueExistingPeriodicTasksAfterShutdownPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-getContinueExistingPeriodicTasksAfterShutdownPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-getContinueExistingPeriodicTasksAfterShutdownPolicy' class='name expandable'>getContinueExistingPeriodicTasksAfterShutdownPolicy</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the policy on whether to continue executing existing\n periodic tasks even when this executor has been {@code shu...</div><div class='long'><p>Gets the policy on whether to continue executing existing\n periodic tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow} or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code false}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if will continue after shutdown\n@see <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-setContinueExistingPeriodicTasksAfterShutdownPolicy\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-setContinueExistingPeriodicTasksAfterShutdownPolicy\" class=\"docClass\">setContinueExistingPeriodicTasksAfterShutdownPolicy</a></p>\n</div></li></ul></div></div></div><div id='method-getCorePoolSize' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getCorePoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize' class='name expandable'>getCorePoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the core number of threads. ...</div><div class='long'><p>Returns the core number of threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the core number of threads\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setCorePoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setCorePoolSize\" class=\"docClass\">setCorePoolSize</a></p>\n</div></li></ul></div></div></div><div id='method-getExecuteExistingDelayedTasksAfterShutdownPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-getExecuteExistingDelayedTasksAfterShutdownPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-getExecuteExistingDelayedTasksAfterShutdownPolicy' class='name expandable'>getExecuteExistingDelayedTasksAfterShutdownPolicy</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the policy on whether to execute existing delayed\n tasks even when this executor has been {@code shutdown}. ...</div><div class='long'><p>Gets the policy on whether to execute existing delayed\n tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow}, or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code true}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if will execute after shutdown\n@see <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-setExecuteExistingDelayedTasksAfterShutdownPolicy\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-setExecuteExistingDelayedTasksAfterShutdownPolicy\" class=\"docClass\">setExecuteExistingDelayedTasksAfterShutdownPolicy</a></p>\n</div></li></ul></div></div></div><div id='method-getKeepAliveTime' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getKeepAliveTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getKeepAliveTime' class='name expandable'>getKeepAliveTime</a>( <span class='pre'>unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated. ...</div><div class='long'><p>Returns the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated.\n Threads that wait this amount of time without processing a\n task will be terminated if there are more than the core\n number of threads currently in the pool, or if this pool\n {@linkplain <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut\" class=\"docClass\">allowsCoreThreadTimeOut</a>() allows core thread timeout}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the desired time unit of the result</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the time limit\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setKeepAliveTime\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setKeepAliveTime\" class=\"docClass\">setKeepAliveTime</a>(long, TimeUnit)</p>\n</div></li></ul></div></div></div><div id='method-getLargestPoolSize' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getLargestPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getLargestPoolSize' class='name expandable'>getLargestPoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the largest number of threads that have ever\n simultaneously been in the pool. ...</div><div class='long'><p>Returns the largest number of threads that have ever\n simultaneously been in the pool.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of threads</p>\n</div></li></ul></div></div></div><div id='method-getMaximumPoolSize' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getMaximumPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getMaximumPoolSize' class='name expandable'>getMaximumPoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the maximum allowed number of threads. ...</div><div class='long'><p>Returns the maximum allowed number of threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the maximum allowed number of threads\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setMaximumPoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setMaximumPoolSize\" class=\"docClass\">setMaximumPoolSize</a></p>\n</div></li></ul></div></div></div><div id='method-getPoolSize' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getPoolSize' class='name expandable'>getPoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current number of threads in the pool. ...</div><div class='long'><p>Returns the current number of threads in the pool.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of threads</p>\n</div></li></ul></div></div></div><div id='method-getQueue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-getQueue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-getQueue' class='name expandable'>getQueue</a>( <span class='pre'></span> ) : Object {java.util.concurrent.BlockingQueue}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the task queue used by this executor. ...</div><div class='long'><p>Returns the task queue used by this executor.  Access to the\n task queue is intended primarily for debugging and monitoring.\n This queue may be in active use.  Retrieving the task queue\n does not prevent queued tasks from executing.</p>\n\n<p> <p>Each element of this queue is a <a href=\"#!/api/java.util.concurrent.ScheduledFuture\" rel=\"java.util.concurrent.ScheduledFuture\" class=\"docClass\">java.util.concurrent.ScheduledFuture</a>.\n For tasks submitted via one of the {@code schedule} methods, the\n element will be identical to the returned {@code ScheduledFuture}.\n For tasks submitted using <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-execute\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-execute\" class=\"docClass\">execute</a>, the element\n will be a zero-delay {@code ScheduledFuture}.</p>\n\n<p> <p>Iteration over this queue is <em>not</em> guaranteed to traverse\n tasks in the order in which they will execute.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.BlockingQueue}</span><div class='sub-desc'><p>the task queue</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getQueue\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getQueue\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor.getQueue</a></p></div></div></div><div id='method-getRejectedExecutionHandler' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getRejectedExecutionHandler' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getRejectedExecutionHandler' class='name expandable'>getRejectedExecutionHandler</a>( <span class='pre'></span> ) : Object {java.util.concurrent.RejectedExecutionHandler}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current handler for unexecutable tasks. ...</div><div class='long'><p>Returns the current handler for unexecutable tasks.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.RejectedExecutionHandler}</span><div class='sub-desc'><p>the current handler\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setRejectedExecutionHandler\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setRejectedExecutionHandler\" class=\"docClass\">setRejectedExecutionHandler</a>(RejectedExecutionHandler)</p>\n</div></li></ul></div></div></div><div id='method-getRemoveOnCancelPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-getRemoveOnCancelPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-getRemoveOnCancelPolicy' class='name expandable'>getRemoveOnCancelPolicy</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation. ...</div><div class='long'><p>Gets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation.  This value is\n by default {@code false}.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if cancelled tasks are immediately removed\n         from the queue\n@see <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-setRemoveOnCancelPolicy\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-setRemoveOnCancelPolicy\" class=\"docClass\">setRemoveOnCancelPolicy</a></p>\n</div></li></ul></div></div></div><div id='method-getTaskCount' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getTaskCount' class='name expandable'>getTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the approximate total number of tasks that have ever been\n scheduled for execution. ...</div><div class='long'><p>Returns the approximate total number of tasks that have ever been\n scheduled for execution. Because the states of tasks and\n threads may change dynamically during computation, the returned\n value is only an approximation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of tasks</p>\n</div></li></ul></div></div></div><div id='method-getThreadFactory' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getThreadFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getThreadFactory' class='name expandable'>getThreadFactory</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ThreadFactory}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the thread factory used to create new threads. ...</div><div class='long'><p>Returns the thread factory used to create new threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ThreadFactory}</span><div class='sub-desc'><p>the current thread factory\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setThreadFactory\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setThreadFactory\" class=\"docClass\">setThreadFactory</a>(ThreadFactory)</p>\n</div></li></ul></div></div></div><div id='method-invokeAll' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='defined-in docClass'>java.util.concurrent.AbstractExecutorService</a><br/><a href='source/AbstractExecutorService.html#java-util-concurrent-AbstractExecutorService-method-invokeAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.AbstractExecutorService-method-invokeAll' class='name expandable'>invokeAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-invokeAny' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='defined-in docClass'>java.util.concurrent.AbstractExecutorService</a><br/><a href='source/AbstractExecutorService.html#java-util-concurrent-AbstractExecutorService-method-invokeAny' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.AbstractExecutorService-method-invokeAny' class='name expandable'>invokeAny</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isShutdown' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-isShutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-isShutdown' class='name expandable'>isShutdown</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isTerminated' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-isTerminated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-isTerminated' class='name expandable'>isTerminated</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isTerminating' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-isTerminating' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-isTerminating' class='name expandable'>isTerminating</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this executor is in the process of terminating\n after shutdown or shutdownNow but has not\n completely...</div><div class='long'><p>Returns true if this executor is in the process of terminating\n after <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdown\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-shutdown\" class=\"docClass\">shutdown</a> or <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdownNow\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-shutdownNow\" class=\"docClass\">shutdownNow</a> but has not\n completely terminated.  This method may be useful for\n debugging. A return of {@code true} reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, causing this executor not\n to properly terminate.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if terminating but not yet terminated</p>\n</div></li></ul></div></div></div><div id='method-prestartAllCoreThreads' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-prestartAllCoreThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-prestartAllCoreThreads' class='name expandable'>prestartAllCoreThreads</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts all core threads, causing them to idly wait for work. ...</div><div class='long'><p>Starts all core threads, causing them to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of threads started</p>\n</div></li></ul></div></div></div><div id='method-prestartCoreThread' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-prestartCoreThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-prestartCoreThread' class='name expandable'>prestartCoreThread</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts a core thread, causing it to idly wait for work. ...</div><div class='long'><p>Starts a core thread, causing it to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed. This method will return {@code false}\n if all core threads have already been started.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if a thread was started</p>\n</div></li></ul></div></div></div><div id='method-purge' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-purge' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-purge' class='name expandable'>purge</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tries to remove from the work queue all java.util.concurrent.Future\n tasks that have been cancelled. ...</div><div class='long'><p>Tries to remove from the work queue all <a href=\"#!/api/java.util.concurrent.Future\" rel=\"java.util.concurrent.Future\" class=\"docClass\">java.util.concurrent.Future</a>\n tasks that have been cancelled. This method can be useful as a\n storage reclamation operation, that has no other impact on\n functionality. Cancelled tasks are never executed, but may\n accumulate in work queues until worker threads can actively\n remove them. Invoking this method instead tries to remove them now.\n However, this method may fail to remove tasks in\n the presence of interference by other threads.</p>\n</div></div></div><div id='method-remove' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-remove' class='name expandable'>remove</a>( <span class='pre'>task</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes this task from the executor's internal queue if it is\n present, thus causing it not to be run if it has not a...</div><div class='long'><p>Removes this task from the executor's internal queue if it is\n present, thus causing it not to be run if it has not already\n started.</p>\n\n<p> <p>This method may be useful as one part of a cancellation\n scheme.  It may fail to remove tasks that have been converted\n into other forms before being placed on the internal queue.\n For example, a task entered using {@code submit} might be\n converted into a form that maintains {@code Future} status.\n However, in such cases, method <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-purge\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-purge\" class=\"docClass\">purge</a> may be used to\n remove those Futures that have been cancelled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>task</span> : Object {Runnable}<div class='sub-desc'><p>the task to remove</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the task was removed</p>\n</div></li></ul></div></div></div><div id='method-schedule' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-schedule' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-schedule' class='name expandable'>schedule</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException       {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-scheduleAtFixedRate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-scheduleAtFixedRate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-scheduleAtFixedRate' class='name expandable'>scheduleAtFixedRate</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException       {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException   {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-scheduleWithFixedDelay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-scheduleWithFixedDelay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-scheduleWithFixedDelay' class='name expandable'>scheduleWithFixedDelay</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException       {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException   {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-setContinueExistingPeriodicTasksAfterShutdownPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-setContinueExistingPeriodicTasksAfterShutdownPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-setContinueExistingPeriodicTasksAfterShutdownPolicy' class='name expandable'>setContinueExistingPeriodicTasksAfterShutdownPolicy</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the policy on whether to continue executing existing\n periodic tasks even when this executor has been {@code shu...</div><div class='long'><p>Sets the policy on whether to continue executing existing\n periodic tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow} or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code false}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Boolean<div class='sub-desc'><p>if {@code true}, continue after shutdown, else don't\n@see <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-getContinueExistingPeriodicTasksAfterShutdownPolicy\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-getContinueExistingPeriodicTasksAfterShutdownPolicy\" class=\"docClass\">getContinueExistingPeriodicTasksAfterShutdownPolicy</a></p>\n</div></li></ul></div></div></div><div id='method-setCorePoolSize' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setCorePoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setCorePoolSize' class='name expandable'>setCorePoolSize</a>( <span class='pre'>corePoolSize</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the core number of threads. ...</div><div class='long'><p>Sets the core number of threads.  This overrides any value set\n in the constructor.  If the new value is smaller than the\n current value, excess existing threads will be terminated when\n they next become idle.  If larger, new threads will, if needed,\n be started to execute any queued tasks.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>corePoolSize</span> : Number<div class='sub-desc'><p>the new core size</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code corePoolSize &lt; 0}\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" class=\"docClass\">getCorePoolSize</a></p>\n</div></li></ul></div></div></div><div id='method-setExecuteExistingDelayedTasksAfterShutdownPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-setExecuteExistingDelayedTasksAfterShutdownPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-setExecuteExistingDelayedTasksAfterShutdownPolicy' class='name expandable'>setExecuteExistingDelayedTasksAfterShutdownPolicy</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the policy on whether to execute existing delayed\n tasks even when this executor has been {@code shutdown}. ...</div><div class='long'><p>Sets the policy on whether to execute existing delayed\n tasks even when this executor has been {@code shutdown}.\n In this case, these tasks will only terminate upon\n {@code shutdownNow}, or after setting the policy to\n {@code false} when already shutdown.\n This value is by default {@code true}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Boolean<div class='sub-desc'><p>if {@code true}, execute after shutdown, else don't\n@see <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-getExecuteExistingDelayedTasksAfterShutdownPolicy\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-getExecuteExistingDelayedTasksAfterShutdownPolicy\" class=\"docClass\">getExecuteExistingDelayedTasksAfterShutdownPolicy</a></p>\n</div></li></ul></div></div></div><div id='method-setKeepAliveTime' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setKeepAliveTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setKeepAliveTime' class='name expandable'>setKeepAliveTime</a>( <span class='pre'>time, unit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated. ...</div><div class='long'><p>Sets the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated.\n Threads that wait this amount of time without processing a\n task will be terminated if there are more than the core\n number of threads currently in the pool, or if this pool\n {@linkplain <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut\" class=\"docClass\">allowsCoreThreadTimeOut</a>() allows core thread timeout}.\n This overrides any value set in the constructor.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>time</span> : Number<div class='sub-desc'><p>the time to wait.  A time value of zero will cause\n        excess threads to terminate immediately after executing tasks.</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the {@code time} argument</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code time} less than zero or\n         if {@code time} is zero and {@code allowsCoreThreadTimeOut}\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getKeepAliveTime\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getKeepAliveTime\" class=\"docClass\">getKeepAliveTime</a>(TimeUnit)</p>\n</div></li></ul></div></div></div><div id='method-setMaximumPoolSize' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setMaximumPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setMaximumPoolSize' class='name expandable'>setMaximumPoolSize</a>( <span class='pre'>maximumPoolSize</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the maximum allowed number of threads. ...</div><div class='long'><p>Sets the maximum allowed number of threads. This overrides any\n value set in the constructor. If the new value is smaller than\n the current value, excess existing threads will be\n terminated when they next become idle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>maximumPoolSize</span> : Number<div class='sub-desc'><p>the new maximum</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the new maximum is\n         less than or equal to zero, or\n         less than the {@linkplain <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" class=\"docClass\">getCorePoolSize</a> core pool size}\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getMaximumPoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getMaximumPoolSize\" class=\"docClass\">getMaximumPoolSize</a></p>\n</div></li></ul></div></div></div><div id='method-setRejectedExecutionHandler' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setRejectedExecutionHandler' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setRejectedExecutionHandler' class='name expandable'>setRejectedExecutionHandler</a>( <span class='pre'>handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets a new handler for unexecutable tasks. ...</div><div class='long'><p>Sets a new handler for unexecutable tasks.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>handler</span> : Object {RejectedExecutionHandler}<div class='sub-desc'><p>the new handler</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if handler is null\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getRejectedExecutionHandler\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getRejectedExecutionHandler\" class=\"docClass\">getRejectedExecutionHandler</a></p>\n</div></li></ul></div></div></div><div id='method-setRemoveOnCancelPolicy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-setRemoveOnCancelPolicy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-setRemoveOnCancelPolicy' class='name expandable'>setRemoveOnCancelPolicy</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation. ...</div><div class='long'><p>Sets the policy on whether cancelled tasks should be immediately\n removed from the work queue at time of cancellation.  This value is\n by default {@code false}.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Boolean<div class='sub-desc'><p>if {@code true}, remove on cancellation, else don't\n@see <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-getRemoveOnCancelPolicy\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-getRemoveOnCancelPolicy\" class=\"docClass\">getRemoveOnCancelPolicy</a></p>\n</div></li></ul></div></div></div><div id='method-setThreadFactory' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setThreadFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setThreadFactory' class='name expandable'>setThreadFactory</a>( <span class='pre'>threadFactory</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the thread factory used to create new threads. ...</div><div class='long'><p>Sets the thread factory used to create new threads.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>threadFactory</span> : Object {ThreadFactory}<div class='sub-desc'><p>the new thread factory</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if threadFactory is null\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getThreadFactory\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getThreadFactory\" class=\"docClass\">getThreadFactory</a></p>\n</div></li></ul></div></div></div><div id='method-shutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-shutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-shutdown' class='name expandable'>shutdown</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted. ...</div><div class='long'><p>Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.</p>\n\n<p> <p>This method does not wait for previously submitted tasks to\n complete execution.  Use <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-awaitTermination\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-awaitTermination\" class=\"docClass\">awaitTermination</a>\n to do that.</p>\n\n<p> <p>If the {@code ExecuteExistingDelayedTasksAfterShutdownPolicy}\n has been set {@code false}, existing delayed tasks whose delays\n have not yet elapsed are cancelled.  And unless the {@code\n ContinueExistingPeriodicTasksAfterShutdownPolicy} has been set\n {@code true}, future executions of existing periodic tasks will\n be cancelled.</p>\n<p>Overrides: <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdown\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-shutdown\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor.shutdown</a></p></div></div></div><div id='method-shutdownNow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-shutdownNow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-shutdownNow' class='name expandable'>shutdownNow</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the task...</div><div class='long'><p>Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution. These tasks are drained (removed)\n from the task queue upon return from this method.</p>\n\n<p> <p>This method does not wait for actively executing tasks to\n terminate.  Use <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-awaitTermination\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-awaitTermination\" class=\"docClass\">awaitTermination</a> to\n do that.</p>\n\n<p> <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n interrupts tasks via Thread.interrupt; any task that\n fails to respond to interrupts may never terminate.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>list of tasks that never commenced execution.\n         Each element of this list is a ScheduledFuture.\n         For tasks submitted via one of the {@code schedule}\n         methods, the element will be identical to the returned\n         {@code ScheduledFuture}.  For tasks submitted using\n         <a href=\"#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-execute\" rel=\"java.util.concurrent.ScheduledThreadPoolExecutor-method-execute\" class=\"docClass\">execute</a>, the element will be a\n         zero-delay {@code ScheduledFuture}.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdownNow\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-shutdownNow\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor.shutdownNow</a></p></div></div></div><div id='method-submit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledThreadPoolExecutor'>java.util.concurrent.ScheduledThreadPoolExecutor</span><br/><a href='source/ScheduledThreadPoolExecutor.html#java-util-concurrent-ScheduledThreadPoolExecutor-method-submit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor-method-submit' class='name expandable'>submit</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException       {@inheritDoc}</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.concurrent.AbstractExecutorService-method-submit\" rel=\"java.util.concurrent.AbstractExecutorService-method-submit\" class=\"docClass\">java.util.concurrent.AbstractExecutorService.submit</a></p></div></div></div><div id='method-toString' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ThreadPoolExecutor' rel='java.util.concurrent.ThreadPoolExecutor' class='defined-in docClass'>java.util.concurrent.ThreadPoolExecutor</a><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this pool, as well as its state,\n including indications of run state and estimated worke...</div><div class='long'><p>Returns a string identifying this pool, as well as its state,\n including indications of run state and estimated worker and\n task counts.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this pool, as well as its state</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});