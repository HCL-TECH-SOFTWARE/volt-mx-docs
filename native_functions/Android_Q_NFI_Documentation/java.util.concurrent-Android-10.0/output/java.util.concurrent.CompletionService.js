Ext.data.JsonP.java_util_concurrent_CompletionService({"tagname":"class","name":"java.util.concurrent.CompletionService","autodetected":{},"files":[{"filename":"CompletionService.js","href":"CompletionService.html#java-util-concurrent-CompletionService"}],"members":[{"name":"poll","tagname":"method","owner":"java.util.concurrent.CompletionService","id":"method-poll","meta":{}},{"name":"submit","tagname":"method","owner":"java.util.concurrent.CompletionService","id":"method-submit","meta":{}},{"name":"take","tagname":"method","owner":"java.util.concurrent.CompletionService","id":"method-take","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.CompletionService","short_doc":"A service that decouples the production of new asynchronous tasks\n from the consumption of the results of completed t...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/CompletionService.html#java-util-concurrent-CompletionService' target='_blank'>CompletionService.js</a></div></pre><div class='doc-contents'><p>A service that decouples the production of new asynchronous tasks\n from the consumption of the results of completed tasks.  Producers\n {@code submit} tasks for execution. Consumers {@code take}\n completed tasks and process their results in the order they\n complete.  A {@code CompletionService} can for example be used to\n manage asynchronous I/O, in which tasks that perform reads are\n submitted in one part of a program or system, and then acted upon\n in a different part of the program when the reads complete,\n possibly in a different order than they were requested.</p>\n\n<p> <p>Typically, a {@code CompletionService} relies on a separate\n <a href=\"#!/api/java.util.concurrent.Executor\" rel=\"java.util.concurrent.Executor\" class=\"docClass\">java.util.concurrent.Executor</a> to actually execute the tasks, in which case the\n {@code CompletionService} only manages an internal completion\n queue. The <a href=\"#!/api/java.util.concurrent.ExecutorCompletionService\" rel=\"java.util.concurrent.ExecutorCompletionService\" class=\"docClass\">java.util.concurrent.ExecutorCompletionService</a> class provides an\n implementation of this approach.</p>\n\n<p> <p>Memory consistency effects: Actions in a thread prior to\n submitting a task to a {@code CompletionService}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions taken by that task, which in turn <i>happen-before</i>\n actions following a successful return from the corresponding {@code take()}.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-poll' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionService'>java.util.concurrent.CompletionService</span><br/><a href='source/CompletionService.html#java-util-concurrent-CompletionService-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionService-method-poll' class='name expandable'>poll</a>( <span class='pre'>timeout, unit</span> ) : Object {java.util.concurrent.Future}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the Future representing the next\n completed task, waiting if necessary up to the specified wait...</div><div class='long'><p>Retrieves and removes the Future representing the next\n completed task, waiting if necessary up to the specified wait\n time if none are yet present.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how long to wait before giving up, in units of\n        {@code unit}</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the\n        {@code timeout} parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Future}</span><div class='sub-desc'><p>the Future representing the next completed task or\n         {@code null} if the specified waiting time elapses\n         before one is present</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-submit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionService'>java.util.concurrent.CompletionService</span><br/><a href='source/CompletionService.html#java-util-concurrent-CompletionService-method-submit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionService-method-submit' class='name expandable'>submit</a>( <span class='pre'>task, result</span> ) : Object {java.util.concurrent.Future}<span class=\"signature\"></span></div><div class='description'><div class='short'>Submits a Runnable task for execution and returns a Future\n representing that task. ...</div><div class='long'><p>Submits a Runnable task for execution and returns a Future\n representing that task.  Upon completion, this task may be\n taken or polled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>task</span> : Object {Runnable}<div class='sub-desc'><p>the task to submit</p>\n</div></li><li><span class='pre'>result</span> : Object {Object}<div class='sub-desc'><p>the result to return upon successful completion</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Future}</span><div class='sub-desc'><p>a Future representing pending completion of the task,\n         and whose {@code get()} method will return the given\n         result value upon completion</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if the task cannot be\n         scheduled for execution</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the task is null</p>\n</div></li></ul></div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CompletionService'>java.util.concurrent.CompletionService</span><br/><a href='source/CompletionService.html#java-util-concurrent-CompletionService-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CompletionService-method-take' class='name expandable'>take</a>( <span class='pre'></span> ) : Object {java.util.concurrent.Future}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the Future representing the next\n completed task, waiting if none are yet present. ...</div><div class='long'><p>Retrieves and removes the Future representing the next\n completed task, waiting if none are yet present.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Future}</span><div class='sub-desc'><p>the Future representing the next completed task</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});