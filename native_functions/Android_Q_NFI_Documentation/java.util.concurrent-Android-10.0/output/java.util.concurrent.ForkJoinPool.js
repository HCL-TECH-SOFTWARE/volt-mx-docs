Ext.data.JsonP.java_util_concurrent_ForkJoinPool({"tagname":"class","name":"java.util.concurrent.ForkJoinPool","autodetected":{},"files":[{"filename":"ForkJoinPool.js","href":"ForkJoinPool.html#java-util-concurrent-ForkJoinPool"}],"extends":"java.util.concurrent.AbstractExecutorService","since":"1.7","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"defaultForkJoinWorkerThreadFactory","tagname":"property","owner":"java.util.concurrent.ForkJoinPool","id":"property-defaultForkJoinWorkerThreadFactory","meta":{}},{"name":"awaitQuiescence","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-awaitQuiescence","meta":{}},{"name":"awaitTermination","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-awaitTermination","meta":{}},{"name":"commonPool","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-commonPool","meta":{}},{"name":"execute","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-execute","meta":{}},{"name":"getActiveThreadCount","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getActiveThreadCount","meta":{}},{"name":"getAsyncMode","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getAsyncMode","meta":{}},{"name":"getCommonPoolParallelism","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getCommonPoolParallelism","meta":{}},{"name":"getFactory","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getFactory","meta":{}},{"name":"getParallelism","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getParallelism","meta":{}},{"name":"getPoolSize","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getPoolSize","meta":{}},{"name":"getQueuedSubmissionCount","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getQueuedSubmissionCount","meta":{}},{"name":"getQueuedTaskCount","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getQueuedTaskCount","meta":{}},{"name":"getRunningThreadCount","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getRunningThreadCount","meta":{}},{"name":"getStealCount","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getStealCount","meta":{}},{"name":"getUncaughtExceptionHandler","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-getUncaughtExceptionHandler","meta":{}},{"name":"hasQueuedSubmissions","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-hasQueuedSubmissions","meta":{}},{"name":"invoke","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-invoke","meta":{}},{"name":"invokeAll","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-invokeAll","meta":{}},{"name":"invokeAny","tagname":"method","owner":"java.util.concurrent.AbstractExecutorService","id":"method-invokeAny","meta":{}},{"name":"isQuiescent","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-isQuiescent","meta":{}},{"name":"isShutdown","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-isShutdown","meta":{}},{"name":"isTerminated","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-isTerminated","meta":{}},{"name":"isTerminating","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-isTerminating","meta":{}},{"name":"managedBlock","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-managedBlock","meta":{}},{"name":"shutdown","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-shutdown","meta":{}},{"name":"shutdownNow","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-shutdownNow","meta":{}},{"name":"submit","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-submit","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.ForkJoinPool","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ForkJoinPool","short_doc":"An java.util.concurrent.ExecutorService for running java.util.concurrent.ForkJoinTasks. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.util.concurrent.AbstractExecutorService"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='docClass'>java.util.concurrent.AbstractExecutorService</a><div class='subclass '><strong>java.util.concurrent.ForkJoinPool</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool' target='_blank'>ForkJoinPool.js</a></div></pre><div class='doc-contents'><p>An <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a> for running <a href=\"#!/api/java.util.concurrent.ForkJoinTask\" rel=\"java.util.concurrent.ForkJoinTask\" class=\"docClass\">java.util.concurrent.ForkJoinTask</a>s.\n A {@code ForkJoinPool} provides the entry point for submissions\n from non-{@code ForkJoinTask} clients, as well as management and\n monitoring operations.</p>\n\n<p> <p>A {@code ForkJoinPool} differs from other kinds of <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a> mainly by virtue of employing\n <em>work-stealing</em>: all threads in the pool attempt to find and\n execute tasks submitted to the pool and/or created by other active\n tasks (eventually blocking waiting for work if none exist). This\n enables efficient processing when most tasks spawn other subtasks\n (as do most {@code ForkJoinTask}s), as well as when many small\n tasks are submitted to the pool from external clients.  Especially\n when setting <em>asyncMode</em> to true in constructors, {@code\n ForkJoinPool}s may also be appropriate for use with event-style\n tasks that are never joined.</p>\n\n<p> <p>A static <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-commonPool\" rel=\"java.util.concurrent.ForkJoinPool-method-commonPool\" class=\"docClass\">commonPool</a>() is available and appropriate for\n most applications. The common pool is used by any ForkJoinTask that\n is not explicitly submitted to a specified pool. Using the common\n pool normally reduces resource usage (its threads are slowly\n reclaimed during periods of non-use, and reinstated upon subsequent\n use).</p>\n\n<p> <p>For applications that require separate or custom pools, a {@code\n ForkJoinPool} may be constructed with a given target parallelism\n level; by default, equal to the number of available processors.\n The pool attempts to maintain enough active (or available) threads\n by dynamically adding, suspending, or resuming internal worker\n threads, even if some tasks are stalled waiting to join others.\n However, no such adjustments are guaranteed in the face of blocked\n I/O or other unmanaged synchronization. The nested <a href=\"#!/api/java.util.concurrent.ForkJoinPool.ManagedBlocker\" rel=\"java.util.concurrent.ForkJoinPool.ManagedBlocker\" class=\"docClass\">java.util.concurrent.ForkJoinPool.ManagedBlocker</a> interface enables extension of the kinds of\n synchronization accommodated.</p>\n\n<p> <p>In addition to execution and lifecycle control methods, this\n class provides status check methods (for example\n <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-getStealCount\" rel=\"java.util.concurrent.ForkJoinPool-method-getStealCount\" class=\"docClass\">getStealCount</a>) that are intended to aid in developing,\n tuning, and monitoring fork/join applications. Also, method\n <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-toString\" rel=\"java.util.concurrent.ForkJoinPool-method-toString\" class=\"docClass\">toString</a> returns indications of pool state in a\n convenient form for informal monitoring.</p>\n\n<p> <p>As is the case with other ExecutorServices, there are three\n main task execution methods summarized in the following table.\n These are designed to be used primarily by clients not already\n engaged in fork/join computations in the current pool.  The main\n forms of these methods accept instances of {@code ForkJoinTask},\n but overloaded forms also allow mixed execution of plain {@code\n Runnable}- or {@code Callable}- based activities as well.  However,\n tasks that are already executing in a pool should normally instead\n use the within-computation forms listed in the table unless using\n async event-style tasks that are not usually joined, in which case\n there is little difference among choice of methods.</p>\n\n<p> <table BORDER CELLPADDING=3 CELLSPACING=1>\n <caption>Summary of task execution methods</caption>\n  <tr>\n    <td></td>\n    <td ALIGN=CENTER> <b>Call from non-fork/join clients</b></td>\n    <td ALIGN=CENTER> <b>Call from within fork/join computations</b></td>\n  </tr>\n  <tr>\n    <td> <b>Arrange async execution</b></td>\n    <td> <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-execute\" rel=\"java.util.concurrent.ForkJoinPool-method-execute\" class=\"docClass\">execute</a>(ForkJoinTask)</td>\n    <td> <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-fork\" rel=\"java.util.concurrent.ForkJoinTask-method-fork\" class=\"docClass\">java.util.concurrent.ForkJoinTask.fork</a></td>\n  </tr>\n  <tr>\n    <td> <b>Await and obtain result</b></td>\n    <td> <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-invoke\" rel=\"java.util.concurrent.ForkJoinPool-method-invoke\" class=\"docClass\">invoke</a>(ForkJoinTask)</td>\n    <td> <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-invoke\" rel=\"java.util.concurrent.ForkJoinTask-method-invoke\" class=\"docClass\">java.util.concurrent.ForkJoinTask.invoke</a></td>\n  </tr>\n  <tr>\n    <td> <b>Arrange exec and obtain Future</b></td>\n    <td> <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-submit\" rel=\"java.util.concurrent.ForkJoinPool-method-submit\" class=\"docClass\">submit</a>(ForkJoinTask)</td>\n    <td> <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-fork\" rel=\"java.util.concurrent.ForkJoinTask-method-fork\" class=\"docClass\">java.util.concurrent.ForkJoinTask.fork</a> (ForkJoinTasks <em>are</em> Futures)</td>\n  </tr>\n </table></p>\n\n<p> <p>The common pool is by default constructed with default\n parameters, but these may be controlled by setting three\n {@linkplain System#getProperty system properties}:\n <ul>\n <li>{@code java.util.concurrent.ForkJoinPool.common.parallelism}\n - the parallelism level, a non-negative integer\n <li>{@code java.util.concurrent.ForkJoinPool.common.threadFactory}\n - the class name of a <a href=\"#!/api/java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory\" rel=\"java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory\" class=\"docClass\">java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory</a>\n <li>{@code java.util.concurrent.ForkJoinPool.common.exceptionHandler}\n - the class name of a UncaughtExceptionHandler\n <li>{@code java.util.concurrent.ForkJoinPool.common.maximumSpares}\n - the maximum number of allowed extra threads to maintain target\n parallelism (default 256).\n </li></li></li></li></ul>\n If a SecurityManager is present and no factory is\n specified, then the default pool uses a factory supplying\n threads that have no Permissions enabled.\n The system class loader is used to load these classes.\n Upon any error in establishing these settings, default parameters\n are used. It is possible to disable or limit the use of threads in\n the common pool by setting the parallelism property to zero, and/or\n using a factory that may return {@code null}. However doing so may\n cause unjoined tasks to never be executed.</p>\n\n<p> <p><b>Implementation notes</b>: This implementation restricts the\n maximum number of running threads to 32767. Attempts to create\n pools with greater than the maximum number result in\n {@code IllegalArgumentException}.</p>\n\n<p> <p>This implementation rejects submitted tasks (that is, by throwing\n <a href=\"#!/api/java.util.concurrent.RejectedExecutionException\" rel=\"java.util.concurrent.RejectedExecutionException\" class=\"docClass\">java.util.concurrent.RejectedExecutionException</a>) only when the pool is shut down\n or internal resources have been exhausted.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-defaultForkJoinWorkerThreadFactory' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-property-defaultForkJoinWorkerThreadFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-property-defaultForkJoinWorkerThreadFactory' class='name expandable'>defaultForkJoinWorkerThreadFactory</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new ForkJoinWorkerThread. ...</div><div class='long'><p>Creates a new ForkJoinWorkerThread. This factory is used unless\noverridden in ForkJoinPool constructors.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-awaitQuiescence' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-awaitQuiescence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-awaitQuiescence' class='name expandable'>awaitQuiescence</a>( <span class='pre'>timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>If called by a ForkJoinTask operating in this pool, equivalent\n in effect to java.util.concurrent.ForkJoinTask.helpQu...</div><div class='long'><p>If called by a ForkJoinTask operating in this pool, equivalent\n in effect to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-helpQuiesce\" rel=\"java.util.concurrent.ForkJoinTask-method-helpQuiesce\" class=\"docClass\">java.util.concurrent.ForkJoinTask.helpQuiesce</a>. Otherwise,\n waits and/or attempts to assist performing tasks until this\n pool <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-isQuiescent\" rel=\"java.util.concurrent.ForkJoinPool-method-isQuiescent\" class=\"docClass\">isQuiescent</a> or the indicated timeout elapses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if quiescent; {@code false} if the\n timeout elapsed.</p>\n</div></li></ul></div></div></div><div id='method-awaitTermination' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-awaitTermination' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-awaitTermination' class='name expandable'>awaitTermination</a>( <span class='pre'>timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Blocks until all tasks have completed execution after a\n shutdown request, or the timeout occurs, or the current thre...</div><div class='long'><p>Blocks until all tasks have completed execution after a\n shutdown request, or the timeout occurs, or the current thread\n is interrupted, whichever happens first. Because the <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-commonPool\" rel=\"java.util.concurrent.ForkJoinPool-method-commonPool\" class=\"docClass\">commonPool</a>() never terminates until program shutdown, when\n applied to the common pool, this method is equivalent to java.util.concurrent.TimeUnit) but always returns {@code false}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this executor terminated and\n         {@code false} if the timeout elapsed before termination</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-commonPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-commonPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-commonPool' class='name expandable'>commonPool</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ForkJoinPool}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the common pool instance. ...</div><div class='long'><p>Returns the common pool instance. This pool is statically\n constructed; its run state is unaffected by attempts to <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-shutdown\" rel=\"java.util.concurrent.ForkJoinPool-method-shutdown\" class=\"docClass\">shutdown</a> or <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-shutdownNow\" rel=\"java.util.concurrent.ForkJoinPool-method-shutdownNow\" class=\"docClass\">shutdownNow</a>. However this pool and any\n ongoing processing are automatically terminated upon program\n System.exit.  Any program that relies on asynchronous\n task processing to complete before program termination should\n invoke {@code commonPool().}<a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-awaitQuiescence\" rel=\"java.util.concurrent.ForkJoinPool-method-awaitQuiescence\" class=\"docClass\">awaitQuiescence</a>,\n before exit.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinPool}</span><div class='sub-desc'><p>the common pool instance</p>\n</div></li></ul></div></div></div><div id='method-execute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-execute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-execute' class='name expandable'>execute</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the task is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if the task cannot be\n         scheduled for execution</p>\n</div></li></ul></div></div></div><div id='method-getActiveThreadCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getActiveThreadCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getActiveThreadCount' class='name expandable'>getActiveThreadCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of threads that are currently\n stealing or executing tasks. ...</div><div class='long'><p>Returns an estimate of the number of threads that are currently\n stealing or executing tasks. This method may overestimate the\n number of active threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of active threads</p>\n</div></li></ul></div></div></div><div id='method-getAsyncMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getAsyncMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getAsyncMode' class='name expandable'>getAsyncMode</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this pool uses local first-in-first-out\n scheduling mode for forked tasks that are never joined. ...</div><div class='long'><p>Returns {@code true} if this pool uses local first-in-first-out\n scheduling mode for forked tasks that are never joined.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this pool uses async mode</p>\n</div></li></ul></div></div></div><div id='method-getCommonPoolParallelism' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getCommonPoolParallelism' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getCommonPoolParallelism' class='name expandable'>getCommonPoolParallelism</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the targeted parallelism level of the common pool. ...</div><div class='long'><p>Returns the targeted parallelism level of the common pool.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the targeted parallelism level of the common pool</p>\n</div></li></ul></div></div></div><div id='method-getFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getFactory' class='name expandable'>getFactory</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the factory used for constructing new workers. ...</div><div class='long'><p>Returns the factory used for constructing new workers.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory}</span><div class='sub-desc'><p>the factory used for constructing new workers</p>\n</div></li></ul></div></div></div><div id='method-getParallelism' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getParallelism' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getParallelism' class='name expandable'>getParallelism</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the targeted parallelism level of this pool. ...</div><div class='long'><p>Returns the targeted parallelism level of this pool.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the targeted parallelism level of this pool</p>\n</div></li></ul></div></div></div><div id='method-getPoolSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getPoolSize' class='name expandable'>getPoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of worker threads that have started but not\n yet terminated. ...</div><div class='long'><p>Returns the number of worker threads that have started but not\n yet terminated.  The result returned by this method may differ\n from <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-getParallelism\" rel=\"java.util.concurrent.ForkJoinPool-method-getParallelism\" class=\"docClass\">getParallelism</a> when threads are created to\n maintain parallelism when others are cooperatively blocked.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of worker threads</p>\n</div></li></ul></div></div></div><div id='method-getQueuedSubmissionCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getQueuedSubmissionCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getQueuedSubmissionCount' class='name expandable'>getQueuedSubmissionCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of tasks submitted to this\n pool that have not yet begun executing. ...</div><div class='long'><p>Returns an estimate of the number of tasks submitted to this\n pool that have not yet begun executing.  This method may take\n time proportional to the number of submissions.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of queued submissions</p>\n</div></li></ul></div></div></div><div id='method-getQueuedTaskCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getQueuedTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getQueuedTaskCount' class='name expandable'>getQueuedTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the total number of tasks currently held\n in queues by worker threads (but not including tasks...</div><div class='long'><p>Returns an estimate of the total number of tasks currently held\n in queues by worker threads (but not including tasks submitted\n to the pool that have not begun executing). This value is only\n an approximation, obtained by iterating across all threads in\n the pool. This method may be useful for tuning task\n granularities.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of queued tasks</p>\n</div></li></ul></div></div></div><div id='method-getRunningThreadCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getRunningThreadCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getRunningThreadCount' class='name expandable'>getRunningThreadCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of worker threads that are\n not blocked waiting to join tasks or for other managed\n...</div><div class='long'><p>Returns an estimate of the number of worker threads that are\n not blocked waiting to join tasks or for other managed\n synchronization. This method may overestimate the\n number of running threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of worker threads</p>\n</div></li></ul></div></div></div><div id='method-getStealCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getStealCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getStealCount' class='name expandable'>getStealCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the total number of tasks stolen from\n one thread's work queue by another. ...</div><div class='long'><p>Returns an estimate of the total number of tasks stolen from\n one thread's work queue by another. The reported value\n underestimates the actual total number of steals when the pool\n is not quiescent. This value may be useful for monitoring and\n tuning fork/join programs: in general, steal counts should be\n high enough to keep threads busy, but low enough to avoid\n overhead and contention across threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of steals</p>\n</div></li></ul></div></div></div><div id='method-getUncaughtExceptionHandler' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-getUncaughtExceptionHandler' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-getUncaughtExceptionHandler' class='name expandable'>getUncaughtExceptionHandler</a>( <span class='pre'></span> ) : Object {java.lang.Thread.UncaughtExceptionHandler}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the handler for internal worker threads that terminate\n due to unrecoverable errors encountered while executi...</div><div class='long'><p>Returns the handler for internal worker threads that terminate\n due to unrecoverable errors encountered while executing tasks.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Thread.UncaughtExceptionHandler}</span><div class='sub-desc'><p>the handler, or {@code null} if none</p>\n</div></li></ul></div></div></div><div id='method-hasQueuedSubmissions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-hasQueuedSubmissions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-hasQueuedSubmissions' class='name expandable'>hasQueuedSubmissions</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if there are any tasks submitted to this\n pool that have not yet begun executing. ...</div><div class='long'><p>Returns {@code true} if there are any tasks submitted to this\n pool that have not yet begun executing.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there are any queued submissions</p>\n</div></li></ul></div></div></div><div id='method-invoke' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-invoke' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-invoke' class='name expandable'>invoke</a>( <span class='pre'>task, </span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs the given task, returning its result upon completion. ...</div><div class='long'><p>Performs the given task, returning its result upon completion.\n If the computation encounters an unchecked Exception or Error,\n it is rethrown as the outcome of this invocation.  Rethrown\n exceptions behave in the same way as regular exceptions, but,\n when possible, contain stack traces (as displayed for example\n using {@code ex.printStackTrace()}) of both the current thread\n as well as the thread actually encountering the exception;\n minimally only the latter.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>task</span> : Object {java.util.concurrent.ForkJoinTask}<div class='sub-desc'><p>the task</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the task's result</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the task's result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the task is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if the task cannot be\n         scheduled for execution</p>\n</div></li></ul></div></div></div><div id='method-invokeAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-invokeAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-invokeAll' class='name expandable'>invokeAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException       {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException {@inheritDoc}</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.concurrent.AbstractExecutorService-method-invokeAll\" rel=\"java.util.concurrent.AbstractExecutorService-method-invokeAll\" class=\"docClass\">java.util.concurrent.AbstractExecutorService.invokeAll</a></p></div></div></div><div id='method-invokeAny' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='defined-in docClass'>java.util.concurrent.AbstractExecutorService</a><br/><a href='source/AbstractExecutorService.html#java-util-concurrent-AbstractExecutorService-method-invokeAny' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.AbstractExecutorService-method-invokeAny' class='name expandable'>invokeAny</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isQuiescent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-isQuiescent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-isQuiescent' class='name expandable'>isQuiescent</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if all worker threads are currently idle. ...</div><div class='long'><p>Returns {@code true} if all worker threads are currently idle.\n An idle worker is one that cannot obtain a task to execute\n because none are available to steal from other threads, and\n there are no pending submissions to the pool. This method is\n conservative; it might not return {@code true} immediately upon\n idleness of all threads, but will eventually become true if\n threads remain inactive.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if all threads are currently idle</p>\n</div></li></ul></div></div></div><div id='method-isShutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-isShutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-isShutdown' class='name expandable'>isShutdown</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this pool has been shut down. ...</div><div class='long'><p>Returns {@code true} if this pool has been shut down.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this pool has been shut down</p>\n</div></li></ul></div></div></div><div id='method-isTerminated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-isTerminated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-isTerminated' class='name expandable'>isTerminated</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if all tasks have completed following shut down. ...</div><div class='long'><p>Returns {@code true} if all tasks have completed following shut down.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if all tasks have completed following shut down</p>\n</div></li></ul></div></div></div><div id='method-isTerminating' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-isTerminating' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-isTerminating' class='name expandable'>isTerminating</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if the process of termination has\n commenced but not yet completed. ...</div><div class='long'><p>Returns {@code true} if the process of termination has\n commenced but not yet completed.  This method may be useful for\n debugging. A return of {@code true} reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, or are waiting for I/O,\n causing this executor not to properly terminate. (See the\n advisory notes for class <a href=\"#!/api/java.util.concurrent.ForkJoinTask\" rel=\"java.util.concurrent.ForkJoinTask\" class=\"docClass\">java.util.concurrent.ForkJoinTask</a> stating that\n tasks should not normally entail blocking operations.  But if\n they do, they must abort them on interrupt.)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if terminating but not yet terminated</p>\n</div></li></ul></div></div></div><div id='method-managedBlock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-managedBlock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-managedBlock' class='name expandable'>managedBlock</a>( <span class='pre'>blocker</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Runs the given possibly blocking task. ...</div><div class='long'><p>Runs the given possibly blocking task.  When {@linkplain\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" rel=\"java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" class=\"docClass\">java.util.concurrent.ForkJoinTask.inForkJoinPool</a>() running in a ForkJoinPool}, this\n method possibly arranges for a spare thread to be activated if\n necessary to ensure sufficient parallelism while the current\n thread is blocked in <a href=\"#!/api/java.util.concurrent.ForkJoinPool.ManagedBlocker-method-block\" rel=\"java.util.concurrent.ForkJoinPool.ManagedBlocker-method-block\" class=\"docClass\">blocker.block()</a>.</p>\n\n<p> <p>This method repeatedly calls {@code blocker.isReleasable()} and\n {@code blocker.block()} until either method returns {@code true}.\n Every call to {@code blocker.block()} is preceded by a call to\n {@code blocker.isReleasable()} that returned {@code false}.</p>\n\n<p> <p>If not running in a ForkJoinPool, this method is\n behaviorally equivalent to\n <pre> {@code\n while (!blocker.isReleasable())\n   if (blocker.block())\n     break;}</pre></p>\n\n<p> If running in a ForkJoinPool, the pool may first be expanded to\n ensure sufficient parallelism available during the call to\n {@code blocker.block()}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>blocker</span> : Object {ForkJoinPool.ManagedBlocker}<div class='sub-desc'><p>the blocker task</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if {@code blocker.block()} did so</p>\n</div></li></ul></div></div></div><div id='method-shutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-shutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-shutdown' class='name expandable'>shutdown</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly initiates an orderly shutdown in which previously\n submitted tasks are executed, but no new tasks will be\n a...</div><div class='long'><p>Possibly initiates an orderly shutdown in which previously\n submitted tasks are executed, but no new tasks will be\n accepted. Invocation has no effect on execution state if this\n is the <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-commonPool\" rel=\"java.util.concurrent.ForkJoinPool-method-commonPool\" class=\"docClass\">commonPool</a>(), and no additional effect if\n already shut down.  Tasks that are in the process of being\n submitted concurrently during the course of this method may or\n may not be rejected.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if a security manager exists and\n         the caller is not permitted to modify threads\n         because it does not hold java.lang.RuntimePermission{@code (\"modifyThread\")}</p>\n</div></li></ul></div></div></div><div id='method-shutdownNow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-shutdownNow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-shutdownNow' class='name expandable'>shutdownNow</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly attempts to cancel and/or stop all tasks, and reject\n all subsequently submitted tasks. ...</div><div class='long'><p>Possibly attempts to cancel and/or stop all tasks, and reject\n all subsequently submitted tasks.  Invocation has no effect on\n execution state if this is the <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-commonPool\" rel=\"java.util.concurrent.ForkJoinPool-method-commonPool\" class=\"docClass\">commonPool</a>(), and no\n additional effect if already shut down. Otherwise, tasks that\n are in the process of being submitted or executed concurrently\n during the course of this method may or may not be\n rejected. This method cancels both existing and unexecuted\n tasks, in order to permit termination in the presence of task\n dependencies. So the method always returns an empty list\n (unlike the case for some other Executors).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>an empty list</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if a security manager exists and\n         the caller is not permitted to modify threads\n         because it does not hold java.lang.RuntimePermission{@code (\"modifyThread\")}</p>\n</div></li></ul></div></div></div><div id='method-submit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-submit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-submit' class='name expandable'>submit</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the task is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if the task cannot be\n         scheduled for execution</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.concurrent.AbstractExecutorService-method-submit\" rel=\"java.util.concurrent.AbstractExecutorService-method-submit\" class=\"docClass\">java.util.concurrent.AbstractExecutorService.submit</a></p></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool'>java.util.concurrent.ForkJoinPool</span><br/><a href='source/ForkJoinPool.html#java-util-concurrent-ForkJoinPool-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this pool, as well as its state,\n including indications of run state, parallelism level,...</div><div class='long'><p>Returns a string identifying this pool, as well as its state,\n including indications of run state, parallelism level, and\n worker and task counts.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this pool, as well as its state</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});