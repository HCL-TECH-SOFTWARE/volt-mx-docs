Ext.data.JsonP.java_util_concurrent_ForkJoinWorkerThread({"tagname":"class","name":"java.util.concurrent.ForkJoinWorkerThread","autodetected":{},"files":[{"filename":"ForkJoinWorkerThread.js","href":"ForkJoinWorkerThread.html#java-util-concurrent-ForkJoinWorkerThread"}],"extends":"java.lang.Thread","since":"1.7","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"getPool","tagname":"method","owner":"java.util.concurrent.ForkJoinWorkerThread","id":"method-getPool","meta":{}},{"name":"getPoolIndex","tagname":"method","owner":"java.util.concurrent.ForkJoinWorkerThread","id":"method-getPoolIndex","meta":{}},{"name":"run","tagname":"method","owner":"java.util.concurrent.ForkJoinWorkerThread","id":"method-run","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ForkJoinWorkerThread","short_doc":"A thread managed by a java.util.concurrent.ForkJoinPool, which executes\n java.util.concurrent.ForkJoinTasks. ...","classIcon":"icon-class","superclasses":["java.lang.Thread"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Thread<div class='subclass '><strong>java.util.concurrent.ForkJoinWorkerThread</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ForkJoinWorkerThread.html#java-util-concurrent-ForkJoinWorkerThread' target='_blank'>ForkJoinWorkerThread.js</a></div></pre><div class='doc-contents'><p>A thread managed by a <a href=\"#!/api/java.util.concurrent.ForkJoinPool\" rel=\"java.util.concurrent.ForkJoinPool\" class=\"docClass\">java.util.concurrent.ForkJoinPool</a>, which executes\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask\" rel=\"java.util.concurrent.ForkJoinTask\" class=\"docClass\">java.util.concurrent.ForkJoinTask</a>s.\n This class is subclassable solely for the sake of adding\n functionality -- there are no overridable methods dealing with\n scheduling or execution.  However, you can override initialization\n and termination methods surrounding the main task processing loop.\n If you do create such a subclass, you will also need to supply a\n custom <a href=\"#!/api/java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory\" rel=\"java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory\" class=\"docClass\">java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory</a> to\n {@linkplain java.util.concurrent.ForkJoinPool#java.util.concurrent.ForkJoinPool use it} in a {@code ForkJoinPool}.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getPool' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinWorkerThread'>java.util.concurrent.ForkJoinWorkerThread</span><br/><a href='source/ForkJoinWorkerThread.html#java-util-concurrent-ForkJoinWorkerThread-method-getPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinWorkerThread-method-getPool' class='name expandable'>getPool</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ForkJoinPool}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the pool hosting this thread. ...</div><div class='long'><p>Returns the pool hosting this thread.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinPool}</span><div class='sub-desc'><p>the pool</p>\n</div></li></ul></div></div></div><div id='method-getPoolIndex' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinWorkerThread'>java.util.concurrent.ForkJoinWorkerThread</span><br/><a href='source/ForkJoinWorkerThread.html#java-util-concurrent-ForkJoinWorkerThread-method-getPoolIndex' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinWorkerThread-method-getPoolIndex' class='name expandable'>getPoolIndex</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the unique index number of this thread in its pool. ...</div><div class='long'><p>Returns the unique index number of this thread in its pool.\n The returned value ranges from zero to the maximum number of\n threads (minus one) that may exist in the pool, and does not\n change during the lifetime of the thread.  This method may be\n useful for applications that track status or collect results\n per-worker-thread rather than per-task.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the index number</p>\n</div></li></ul></div></div></div><div id='method-run' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinWorkerThread'>java.util.concurrent.ForkJoinWorkerThread</span><br/><a href='source/ForkJoinWorkerThread.html#java-util-concurrent-ForkJoinWorkerThread-method-run' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinWorkerThread-method-run' class='name expandable'>run</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is required to be public, but should never be\n called explicitly. ...</div><div class='long'><p>This method is required to be public, but should never be\n called explicitly. It performs the main run loop to execute\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask\" rel=\"java.util.concurrent.ForkJoinTask\" class=\"docClass\">java.util.concurrent.ForkJoinTask</a>s.</p>\n</div></div></div></div></div></div></div>","meta":{}});