Ext.data.JsonP.java_util_concurrent_TimeoutException({"tagname":"class","name":"java.util.concurrent.TimeoutException","autodetected":{},"files":[{"filename":"TimeoutException.js","href":"TimeoutException.html#java-util-concurrent-TimeoutException"}],"extends":"java.lang.Exception","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.TimeoutException","short_doc":"Exception thrown when a blocking operation times out. ...","classIcon":"icon-class","superclasses":["java.lang.Exception"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Exception<div class='subclass '><strong>java.util.concurrent.TimeoutException</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/TimeoutException.html#java-util-concurrent-TimeoutException' target='_blank'>TimeoutException.js</a></div></pre><div class='doc-contents'><p>Exception thrown when a blocking operation times out.  Blocking\n operations for which a timeout is specified need a means to\n indicate that the timeout has occurred. For many such operations it\n is possible to return a value that indicates timeout; when that is\n not possible or desirable then {@code TimeoutException} should be\n declared and thrown.</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'></div></div>","meta":{}});