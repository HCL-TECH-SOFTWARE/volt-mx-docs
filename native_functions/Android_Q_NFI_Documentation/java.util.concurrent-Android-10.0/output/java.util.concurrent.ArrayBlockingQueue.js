Ext.data.JsonP.java_util_concurrent_ArrayBlockingQueue({"tagname":"class","name":"java.util.concurrent.ArrayBlockingQueue","autodetected":{},"files":[{"filename":"ArrayBlockingQueue.js","href":"ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue"}],"extends":"java.util.AbstractQueue","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><E> the type of elements held in this queue</E></p>\n"}],"members":[{"name":"add","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-add","meta":{}},{"name":"clear","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-clear","meta":{}},{"name":"contains","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-contains","meta":{}},{"name":"drainTo","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-drainTo","meta":{}},{"name":"iterator","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-iterator","meta":{}},{"name":"offer","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-offer","meta":{}},{"name":"peek","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-peek","meta":{}},{"name":"poll","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-poll","meta":{}},{"name":"put","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-put","meta":{}},{"name":"remainingCapacity","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-remainingCapacity","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-remove","meta":{}},{"name":"size","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-size","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-spliterator","meta":{}},{"name":"take","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-take","meta":{}},{"name":"toArray","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-toArray","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.ArrayBlockingQueue","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ArrayBlockingQueue","short_doc":"implements java.util.concurrent.BlockingQueue\n\n implements java.io.Serializable\n\nA bounded {@linkplain java.util.conc...","classIcon":"icon-class","superclasses":["java.util.AbstractQueue"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.util.AbstractQueue<div class='subclass '><strong>java.util.concurrent.ArrayBlockingQueue</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue' target='_blank'>ArrayBlockingQueue.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a></p>\n\n<p> implements java.io.Serializable</p>\n\n<p>A bounded {@linkplain <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a> blocking queue} backed by an\n array.  This queue orders elements FIFO (first-in-first-out).  The\n <em>head</em> of the queue is that element that has been on the\n queue the longest time.  The <em>tail</em> of the queue is that\n element that has been on the queue the shortest time. New elements\n are inserted at the tail of the queue, and the queue retrieval\n operations obtain elements at the head of the queue.</p>\n\n<p> <p>This is a classic &quot;bounded buffer&quot;, in which a\n fixed-sized array holds elements inserted by producers and\n extracted by consumers.  Once created, the capacity cannot be\n changed.  Attempts to {@code put} an element into a full queue\n will result in the operation blocking; attempts to {@code take} an\n element from an empty queue will similarly block.</p>\n\n<p> <p>This class supports an optional fairness policy for ordering\n waiting producer and consumer threads.  By default, this ordering\n is not guaranteed. However, a queue constructed with fairness set\n to {@code true} grants threads access in FIFO order. Fairness\n generally decreases throughput but reduces variability and avoids\n starvation.</p>\n\n<p> <p>This class and its iterator implement all of the\n <em>optional</em> methods of the Collection and Iterator interfaces.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E> the type of elements held in this queue</E></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-add' class='name expandable'>add</a>( <span class='pre'>e</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the...</div><div class='long'><p>Inserts the specified element at the tail of this queue if it is\n possible to do so immediately without exceeding the queue's capacity,\n returning {@code true} upon success and throwing an\n {@code IllegalStateException} if this queue is full.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by Collection.add)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this queue is full</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-clear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-clear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-clear' class='name expandable'>clear</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically removes all of the elements from this queue. ...</div><div class='long'><p>Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.</p>\n</div></div></div><div id='method-contains' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-contains' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-contains' class='name expandable'>contains</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this queue contains the specified element. ...</div><div class='long'><p>Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>object to be checked for containment in this queue</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue contains the specified element</p>\n</div></li></ul></div></div></div><div id='method-drainTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-drainTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-drainTo' class='name expandable'>drainTo</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException            {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException          {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException      {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iterator over the elements in this queue in proper sequence. ...</div><div class='long'><p>Returns an iterator over the elements in this queue in proper sequence.\n The elements will be returned in order from first (head) to last (tail).</p>\n\n<p> <p>The returned iterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>an iterator over the elements in this queue in proper sequence</p>\n</div></li></ul></div></div></div><div id='method-offer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-offer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-offer' class='name expandable'>offer</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the tail of this queue, waiting\n up to the specified wait time for space to become a...</div><div class='long'><p>Inserts the specified element at the tail of this queue, waiting\n up to the specified wait time for space to become available if\n the queue is full.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-peek' class='name expandable'>peek</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-poll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-poll' class='name expandable'>poll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-put' class='name expandable'>put</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element at the tail of this queue, waiting\n for space to become available if the queue is full. ...</div><div class='long'><p>Inserts the specified element at the tail of this queue, waiting\n for space to become available if the queue is full.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-remainingCapacity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-remainingCapacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-remainingCapacity' class='name expandable'>remainingCapacity</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constrai...</div><div class='long'><p>Returns the number of additional elements that this queue can ideally\n (in the absence of memory or resource constraints) accept without\n blocking. This is always equal to the initial capacity of this queue\n less the current {@code size} of this queue.</p>\n\n<p> <p>Note that you <em>cannot</em> always tell if an attempt to insert\n an element will succeed by inspecting {@code remainingCapacity}\n because it may be the case that another thread is about to\n insert or remove an element.</p>\n</div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-remove' class='name expandable'>remove</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a single instance of the specified element from this queue,\n if it is present. ...</div><div class='long'><p>Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.\n Returns {@code true} if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).</p>\n\n<p> <p>Removal of interior elements in circular array based queues\n is an intrinsically slow and disruptive operation, so should\n be undertaken only in exceptional circumstances, ideally\n only when the queue is known not to be accessible by other\n threads.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>element to be removed from this queue, if present</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue changed as a result of the call</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-size' class='name expandable'>size</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of elements in this queue. ...</div><div class='long'><p>Returns the number of elements in this queue.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> ) : Object {java.util.Spliterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a Spliterator over the elements in this queue. ...</div><div class='long'><p>Returns a Spliterator over the elements in this queue.</p>\n\n<p> <p>The returned spliterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n\n<p> <p>The {@code Spliterator} reports Spliterator.CONCURRENT,\n Spliterator.ORDERED, and Spliterator.NONNULL.\n@implNote The {@code Spliterator} implements {@code trySplit} to permit limited\n parallelism.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator}</span><div class='sub-desc'><p>a {@code Spliterator} over the elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-take' class='name expandable'>take</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-toArray' class='name expandable'>toArray</a>( <span class='pre'>a</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned ...</div><div class='long'><p>Returns an array containing all of the elements in this queue, in\n proper sequence; the runtime type of the returned array is that of\n the specified array.  If the queue fits in the specified array, it\n is returned therein.  Otherwise, a new array is allocated with the\n runtime type of the specified array and the size of this queue.</p>\n\n<p> <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.</p>\n\n<p> <p>Like the <a href=\"#!/api/java.util.concurrent.ArrayBlockingQueue-method-toArray\" rel=\"java.util.concurrent.ArrayBlockingQueue-method-toArray\" class=\"docClass\">toArray</a>() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.</p>\n\n<p> <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:</p>\n\n<p> <pre> {@code String[] y = x.toArray(new String[0]);}</pre></p>\n\n<p> Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an array containing all of the elements in this queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified array is null</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ArrayBlockingQueue'>java.util.concurrent.ArrayBlockingQueue</span><br/><a href='source/ArrayBlockingQueue.html#java-util-concurrent-ArrayBlockingQueue-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ArrayBlockingQueue-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});