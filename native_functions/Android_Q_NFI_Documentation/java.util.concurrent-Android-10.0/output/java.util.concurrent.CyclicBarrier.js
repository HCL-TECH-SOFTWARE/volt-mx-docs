Ext.data.JsonP.java_util_concurrent_CyclicBarrier({"tagname":"class","name":"java.util.concurrent.CyclicBarrier","autodetected":{},"files":[{"filename":"CyclicBarrier.js","href":"CyclicBarrier.html#java-util-concurrent-CyclicBarrier"}],"extends":"java.lang.Object","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"await","tagname":"method","owner":"java.util.concurrent.CyclicBarrier","id":"method-await","meta":{}},{"name":"getNumberWaiting","tagname":"method","owner":"java.util.concurrent.CyclicBarrier","id":"method-getNumberWaiting","meta":{}},{"name":"getParties","tagname":"method","owner":"java.util.concurrent.CyclicBarrier","id":"method-getParties","meta":{}},{"name":"isBroken","tagname":"method","owner":"java.util.concurrent.CyclicBarrier","id":"method-isBroken","meta":{}},{"name":"reset","tagname":"method","owner":"java.util.concurrent.CyclicBarrier","id":"method-reset","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.CyclicBarrier","short_doc":"A synchronization aid that allows a set of threads to all wait for\n each other to reach a common barrier point. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.CyclicBarrier</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/CyclicBarrier.html#java-util-concurrent-CyclicBarrier' target='_blank'>CyclicBarrier.js</a></div></pre><div class='doc-contents'><p>A synchronization aid that allows a set of threads to all wait for\n each other to reach a common barrier point.  CyclicBarriers are\n useful in programs involving a fixed sized party of threads that\n must occasionally wait for each other. The barrier is called\n <em>cyclic</em> because it can be re-used after the waiting threads\n are released.</p>\n\n<p> <p>A {@code CyclicBarrier} supports an optional Runnable command\n that is run once per barrier point, after the last thread in the party\n arrives, but before any threads are released.\n This <em>barrier action</em> is useful\n for updating shared-state before any of the parties continue.</p>\n\n<p> <p><b>Sample usage:</b> Here is an example of using a barrier in a\n parallel decomposition design:</p>\n\n<p> <pre> {@code\n class Solver {\n   final int N;\n   final float[][] data;\n   final CyclicBarrier barrier;</pre></p>\n\n<p>   class Worker implements Runnable {\n     int myRow;\n     Worker(int row) { myRow = row; }\n     public void run() {\n       while (!done()) {\n         processRow(myRow);</p>\n\n<pre><code>     try {\n       barrier.await();\n     } catch (InterruptedException ex) {\n       return;\n     } catch (BrokenBarrierException ex) {\n       return;\n     }\n   }\n }\n</code></pre>\n\n<p>   }</p>\n\n<p>   public Solver(float[][] matrix) {\n     data = matrix;\n     N = matrix.length;\n     Runnable barrierAction =\n       new Runnable() { public void run() { mergeRows(...); }};\n     barrier = new CyclicBarrier(N, barrierAction);</p>\n\n<pre><code> List&lt;Thread&gt; threads = new ArrayList&lt;&gt;(N);\n for (int i = 0; i &lt; N; i++) {\n   Thread thread = new Thread(new Worker(i));\n   threads.add(thread);\n   thread.start();\n }\n\n // wait until done\n for (Thread thread : threads)\n   thread.join();\n</code></pre>\n\n<p>   }\n }}</p>\n\n<p> Here, each worker thread processes a row of the matrix then waits at the\n barrier until all rows have been processed. When all rows are processed\n the supplied Runnable barrier action is executed and merges the\n rows. If the merger\n determines that a solution has been found then {@code done()} will return\n {@code true} and each worker will terminate.</p>\n\n<p> <p>If the barrier action does not rely on the parties being suspended when\n it is executed, then any of the threads in the party could execute that\n action when it is released. To facilitate this, each invocation of\n <a href=\"#!/api/java.util.concurrent.CyclicBarrier-method-await\" rel=\"java.util.concurrent.CyclicBarrier-method-await\" class=\"docClass\">await</a> returns the arrival index of that thread at the barrier.\n You can then choose which thread should execute the barrier action, for\n example:\n <pre> {@code\n if (barrier.await() == 0) {\n   // log the completion of this iteration\n }}</pre></p>\n\n<p> <p>The {@code CyclicBarrier} uses an all-or-none breakage model\n for failed synchronization attempts: If a thread leaves a barrier\n point prematurely because of interruption, failure, or timeout, all\n other threads waiting at that barrier point will also leave\n abnormally via <a href=\"#!/api/java.util.concurrent.BrokenBarrierException\" rel=\"java.util.concurrent.BrokenBarrierException\" class=\"docClass\">java.util.concurrent.BrokenBarrierException</a> (or\n InterruptedException if they too were interrupted at about\n the same time).</p>\n\n<p> <p>Memory consistency effects: Actions in a thread prior to calling\n {@code await()}\n <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n actions that are part of the barrier action, which in turn\n <i>happen-before</i> actions following a successful return from the\n corresponding {@code await()} in other threads.</p>\n\n<p> @see CountDownLatch</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-await' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CyclicBarrier'>java.util.concurrent.CyclicBarrier</span><br/><a href='source/CyclicBarrier.html#java-util-concurrent-CyclicBarrier-method-await' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CyclicBarrier-method-await' class='name expandable'>await</a>( <span class='pre'>timeout, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits until all {@linkplain getParties parties} have invoked\n {@code await} on this barrier, or the specified waiting...</div><div class='long'><p>Waits until all {@linkplain <a href=\"#!/api/java.util.concurrent.CyclicBarrier-method-getParties\" rel=\"java.util.concurrent.CyclicBarrier-method-getParties\" class=\"docClass\">getParties</a> parties} have invoked\n {@code await} on this barrier, or the specified waiting time elapses.</p>\n\n<p> <p>If the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n <ul>\n <li>The last thread arrives; or\n <li>The specified timeout elapses; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts}\n one of the other waiting threads; or\n <li>Some other thread times out while waiting for barrier; or\n <li>Some other thread invokes <a href=\"#!/api/java.util.concurrent.CyclicBarrier-method-reset\" rel=\"java.util.concurrent.CyclicBarrier-method-reset\" class=\"docClass\">reset</a> on this barrier.\n </li></li></li></li></li></li></ul></p>\n\n<p> <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n </li></li></ul>\n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.</p>\n\n<p> <p>If the specified waiting time elapses then <a href=\"#!/api/java.util.concurrent.TimeoutException\" rel=\"java.util.concurrent.TimeoutException\" class=\"docClass\">java.util.concurrent.TimeoutException</a>\n is thrown. If the time is less than or equal to zero, the\n method will not wait at all.</p>\n\n<p> <p>If the barrier is <a href=\"#!/api/java.util.concurrent.CyclicBarrier-method-reset\" rel=\"java.util.concurrent.CyclicBarrier-method-reset\" class=\"docClass\">reset</a> while any thread is waiting,\n or if the barrier {@linkplain <a href=\"#!/api/java.util.concurrent.CyclicBarrier-method-isBroken\" rel=\"java.util.concurrent.CyclicBarrier-method-isBroken\" class=\"docClass\">isBroken</a> is broken} when\n {@code await} is invoked, or while any thread is waiting, then\n <a href=\"#!/api/java.util.concurrent.BrokenBarrierException\" rel=\"java.util.concurrent.BrokenBarrierException\" class=\"docClass\">java.util.concurrent.BrokenBarrierException</a> is thrown.</p>\n\n<p> <p>If any thread is {@linkplain Thread#interrupt interrupted} while\n waiting, then all other waiting threads will throw <a href=\"#!/api/java.util.concurrent.BrokenBarrierException\" rel=\"java.util.concurrent.BrokenBarrierException\" class=\"docClass\">java.util.concurrent.BrokenBarrierException</a> and the barrier is placed in the broken\n state.</p>\n\n<p> <p>If the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the time to wait for the barrier</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arrival index of the current thread, where index\n         {@code getParties() - 1} indicates the first\n         to arrive and zero indicates the last to arrive</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread was interrupted\n         while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutException if the specified timeout elapses.\n         In this case the barrier will be broken.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>BrokenBarrierException if <em>another</em> thread was\n         interrupted or timed out while the current thread was\n         waiting, or the barrier was reset, or the barrier was broken\n         when {@code await} was called, or the barrier action (if\n         present) failed due to an exception</p>\n</div></li></ul></div></div></div><div id='method-getNumberWaiting' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CyclicBarrier'>java.util.concurrent.CyclicBarrier</span><br/><a href='source/CyclicBarrier.html#java-util-concurrent-CyclicBarrier-method-getNumberWaiting' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CyclicBarrier-method-getNumberWaiting' class='name expandable'>getNumberWaiting</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of parties currently waiting at the barrier. ...</div><div class='long'><p>Returns the number of parties currently waiting at the barrier.\n This method is primarily useful for debugging and assertions.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of parties currently blocked in <a href=\"#!/api/java.util.concurrent.CyclicBarrier-method-await\" rel=\"java.util.concurrent.CyclicBarrier-method-await\" class=\"docClass\">await</a></p>\n</div></li></ul></div></div></div><div id='method-getParties' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CyclicBarrier'>java.util.concurrent.CyclicBarrier</span><br/><a href='source/CyclicBarrier.html#java-util-concurrent-CyclicBarrier-method-getParties' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CyclicBarrier-method-getParties' class='name expandable'>getParties</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of parties required to trip this barrier. ...</div><div class='long'><p>Returns the number of parties required to trip this barrier.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of parties required to trip this barrier</p>\n</div></li></ul></div></div></div><div id='method-isBroken' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CyclicBarrier'>java.util.concurrent.CyclicBarrier</span><br/><a href='source/CyclicBarrier.html#java-util-concurrent-CyclicBarrier-method-isBroken' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CyclicBarrier-method-isBroken' class='name expandable'>isBroken</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries if this barrier is in a broken state. ...</div><div class='long'><p>Queries if this barrier is in a broken state.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if one or more parties broke out of this\n         barrier due to interruption or timeout since\n         construction or the last reset, or a barrier action\n         failed due to an exception; {@code false} otherwise.</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CyclicBarrier'>java.util.concurrent.CyclicBarrier</span><br/><a href='source/CyclicBarrier.html#java-util-concurrent-CyclicBarrier-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CyclicBarrier-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets the barrier to its initial state. ...</div><div class='long'><p>Resets the barrier to its initial state.  If any parties are\n currently waiting at the barrier, they will return with a\n <a href=\"#!/api/java.util.concurrent.BrokenBarrierException\" rel=\"java.util.concurrent.BrokenBarrierException\" class=\"docClass\">java.util.concurrent.BrokenBarrierException</a>. Note that resets <em>after</em>\n a breakage has occurred for other reasons can be complicated to\n carry out; threads need to re-synchronize in some other way,\n and choose one to perform the reset.  It may be preferable to\n instead create a new barrier for subsequent use.</p>\n</div></div></div></div></div></div></div>","meta":{}});