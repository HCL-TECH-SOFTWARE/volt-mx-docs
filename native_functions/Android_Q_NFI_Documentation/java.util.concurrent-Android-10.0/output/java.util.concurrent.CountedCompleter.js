Ext.data.JsonP.java_util_concurrent_CountedCompleter({"tagname":"class","name":"java.util.concurrent.CountedCompleter","autodetected":{},"files":[{"filename":"CountedCompleter.js","href":"CountedCompleter.html#java-util-concurrent-CountedCompleter"}],"extends":"java.util.concurrent.ForkJoinTask","since":"1.8","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"adapt","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-adapt","meta":{}},{"name":"addToPendingCount","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-addToPendingCount","meta":{}},{"name":"cancel","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-cancel","meta":{}},{"name":"compareAndSetForkJoinTaskTag","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-compareAndSetForkJoinTaskTag","meta":{}},{"name":"compareAndSetPendingCount","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-compareAndSetPendingCount","meta":{}},{"name":"complete","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-complete","meta":{}},{"name":"completeExceptionally","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-completeExceptionally","meta":{}},{"name":"compute","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-compute","meta":{}},{"name":"decrementPendingCountUnlessZero","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-decrementPendingCountUnlessZero","meta":{}},{"name":"firstComplete","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-firstComplete","meta":{}},{"name":"fork","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-fork","meta":{}},{"name":"get","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-get","meta":{}},{"name":"getCompleter","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-getCompleter","meta":{}},{"name":"getException","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getException","meta":{}},{"name":"getForkJoinTaskTag","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getForkJoinTaskTag","meta":{}},{"name":"getPendingCount","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-getPendingCount","meta":{}},{"name":"getPool","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getPool","meta":{}},{"name":"getQueuedTaskCount","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getQueuedTaskCount","meta":{}},{"name":"getRawResult","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-getRawResult","meta":{}},{"name":"getRoot","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-getRoot","meta":{}},{"name":"getSurplusQueuedTaskCount","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-getSurplusQueuedTaskCount","meta":{}},{"name":"helpComplete","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-helpComplete","meta":{}},{"name":"helpQuiesce","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-helpQuiesce","meta":{}},{"name":"inForkJoinPool","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-inForkJoinPool","meta":{}},{"name":"invoke","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-invoke","meta":{}},{"name":"invokeAll","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-invokeAll","meta":{}},{"name":"isCancelled","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-isCancelled","meta":{}},{"name":"isCompletedAbnormally","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-isCompletedAbnormally","meta":{}},{"name":"isCompletedNormally","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-isCompletedNormally","meta":{}},{"name":"isDone","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-isDone","meta":{}},{"name":"join","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-join","meta":{}},{"name":"nextComplete","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-nextComplete","meta":{}},{"name":"onCompletion","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-onCompletion","meta":{}},{"name":"onExceptionalCompletion","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-onExceptionalCompletion","meta":{}},{"name":"propagateCompletion","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-propagateCompletion","meta":{}},{"name":"quietlyComplete","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-quietlyComplete","meta":{}},{"name":"quietlyCompleteRoot","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-quietlyCompleteRoot","meta":{}},{"name":"quietlyInvoke","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-quietlyInvoke","meta":{}},{"name":"quietlyJoin","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-quietlyJoin","meta":{}},{"name":"reinitialize","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-reinitialize","meta":{}},{"name":"setForkJoinTaskTag","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-setForkJoinTaskTag","meta":{}},{"name":"setPendingCount","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-setPendingCount","meta":{}},{"name":"tryComplete","tagname":"method","owner":"java.util.concurrent.CountedCompleter","id":"method-tryComplete","meta":{}},{"name":"tryUnfork","tagname":"method","owner":"java.util.concurrent.ForkJoinTask","id":"method-tryUnfork","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.CountedCompleter","short_doc":"A java.util.concurrent.ForkJoinTask with a completion action performed when\n triggered and there are no remaining pen...","classIcon":"icon-class","superclasses":["java.lang.Object","java.util.concurrent.ForkJoinTask"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='docClass'>java.util.concurrent.ForkJoinTask</a><div class='subclass '><strong>java.util.concurrent.CountedCompleter</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter' target='_blank'>CountedCompleter.js</a></div></pre><div class='doc-contents'><p>A <a href=\"#!/api/java.util.concurrent.ForkJoinTask\" rel=\"java.util.concurrent.ForkJoinTask\" class=\"docClass\">java.util.concurrent.ForkJoinTask</a> with a completion action performed when\n triggered and there are no remaining pending actions.\n CountedCompleters are in general more robust in the\n presence of subtask stalls and blockage than are other forms of\n ForkJoinTasks, but are less intuitive to program.  Uses of\n CountedCompleter are similar to those of other completion based\n components (such as java.nio.channels.CompletionHandler)\n except that multiple <em>pending</em> completions may be necessary\n to trigger the completion action <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-onCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-onCompletion\" class=\"docClass\">onCompletion</a>(CountedCompleter),\n not just one.\n Unless initialized otherwise, the {@linkplain <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-getPendingCount\" rel=\"java.util.concurrent.CountedCompleter-method-getPendingCount\" class=\"docClass\">getPendingCount</a> pending\n count} starts at zero, but may be (atomically) changed using\n methods <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-setPendingCount\" rel=\"java.util.concurrent.CountedCompleter-method-setPendingCount\" class=\"docClass\">setPendingCount</a>, <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-addToPendingCount\" rel=\"java.util.concurrent.CountedCompleter-method-addToPendingCount\" class=\"docClass\">addToPendingCount</a>, and\n <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-compareAndSetPendingCount\" rel=\"java.util.concurrent.CountedCompleter-method-compareAndSetPendingCount\" class=\"docClass\">compareAndSetPendingCount</a>. Upon invocation of <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-tryComplete\" rel=\"java.util.concurrent.CountedCompleter-method-tryComplete\" class=\"docClass\">tryComplete</a>, if the pending action count is nonzero, it is\n decremented; otherwise, the completion action is performed, and if\n this completer itself has a completer, the process is continued\n with its completer.  As is the case with related synchronization\n components such as <a href=\"#!/api/java.util.concurrent.Phaser\" rel=\"java.util.concurrent.Phaser\" class=\"docClass\">Phaser</a> and\n <a href=\"#!/api/java.util.concurrent.Semaphore\" rel=\"java.util.concurrent.Semaphore\" class=\"docClass\">Semaphore</a>, these methods\n affect only internal counts; they do not establish any further\n internal bookkeeping. In particular, the identities of pending\n tasks are not maintained. As illustrated below, you can create\n subclasses that do record some or all pending tasks or their\n results when needed.  As illustrated below, utility methods\n supporting customization of completion traversals are also\n provided. However, because CountedCompleters provide only basic\n synchronization mechanisms, it may be useful to create further\n abstract subclasses that maintain linkages, fields, and additional\n support methods appropriate for a set of related usages.</p>\n\n<p> <p>A concrete CountedCompleter class must define method <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-compute\" rel=\"java.util.concurrent.CountedCompleter-method-compute\" class=\"docClass\">compute</a>, that should in most cases (as illustrated below), invoke\n {@code tryComplete()} once before returning. The class may also\n optionally override method <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-onCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-onCompletion\" class=\"docClass\">onCompletion</a>(CountedCompleter)\n to perform an action upon normal completion, and method\n java.util.concurrent.CountedCompleter) to\n perform an action upon any exception.</p>\n\n<p> <p>CountedCompleters most often do not bear results, in which case\n they are normally declared as {@code CountedCompleter<Void>}, and\n will always return {@code null} as a result value.  In other cases,\n you should override method <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-getRawResult\" rel=\"java.util.concurrent.CountedCompleter-method-getRawResult\" class=\"docClass\">getRawResult</a> to provide a\n result from {@code join(), invoke()}, and related methods.  In\n general, this method should return the value of a field (or a\n function of one or more fields) of the CountedCompleter object that\n holds the result upon completion. Method setRawResult by\n default plays no role in CountedCompleters.  It is possible, but\n rarely applicable, to override this method to maintain other\n objects or fields holding result data.</Void></p>\n\n<p> <p>A CountedCompleter that does not itself have a completer (i.e.,\n one for which <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-getCompleter\" rel=\"java.util.concurrent.CountedCompleter-method-getCompleter\" class=\"docClass\">getCompleter</a> returns {@code null}) can be\n used as a regular ForkJoinTask with this added functionality.\n However, any completer that in turn has another completer serves\n only as an internal helper for other computations, so its own task\n status (as reported in methods such as <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isDone\" rel=\"java.util.concurrent.ForkJoinTask-method-isDone\" class=\"docClass\">java.util.concurrent.ForkJoinTask.isDone</a>)\n is arbitrary; this status changes only upon explicit invocations of\n <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-complete\" rel=\"java.util.concurrent.CountedCompleter-method-complete\" class=\"docClass\">complete</a>, <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-cancel\" rel=\"java.util.concurrent.ForkJoinTask-method-cancel\" class=\"docClass\">java.util.concurrent.ForkJoinTask.cancel</a>,\n java.util.concurrent.ForkJoinTask.completeExceptionally(Throwable) or upon\n exceptional completion of method {@code compute}. Upon any\n exceptional completion, the exception may be relayed to a task's\n completer (and its completer, and so on), if one exists and it has\n not otherwise already completed. Similarly, cancelling an internal\n CountedCompleter has only a local effect on that completer, so is\n not often useful.</p>\n\n<p> <p><b>Sample Usages.</b></p>\n\n<p> <p><b>Parallel recursive decomposition.</b> CountedCompleters may\n be arranged in trees similar to those often used with <a href=\"#!/api/java.util.concurrent.RecursiveAction\" rel=\"java.util.concurrent.RecursiveAction\" class=\"docClass\">java.util.concurrent.RecursiveAction</a>s, although the constructions involved in setting\n them up typically vary. Here, the completer of each task is its\n parent in the computation tree. Even though they entail a bit more\n bookkeeping, CountedCompleters may be better choices when applying\n a possibly time-consuming operation (that cannot be further\n subdivided) to each element of an array or collection; especially\n when the operation takes a significantly different amount of time\n to complete for some elements than others, either because of\n intrinsic variation (for example I/O) or auxiliary effects such as\n garbage collection.  Because CountedCompleters provide their own\n continuations, other threads need not block waiting to perform\n them.</p>\n\n<p> <p>For example, here is an initial version of a class that uses\n divide-by-two recursive decomposition to divide work into single\n pieces (leaf tasks). Even when work is split into individual calls,\n tree-based techniques are usually preferable to directly forking\n leaf tasks, because they reduce inter-thread communication and\n improve load balancing. In the recursive case, the second of each\n pair of subtasks to finish triggers completion of its parent\n (because no result combination is performed, the default no-op\n implementation of method {@code onCompletion} is not overridden).\n A static utility method sets up the base task and invokes it\n (here, implicitly using the java.util.concurrent.ForkJoinPool.commonPool()).</p>\n\n<p> <pre> {@code\n class MyOperation<E> { void apply(E e) { ... }  }</E></pre></p>\n\n<p> class ForEach<E> extends CountedCompleter<Void> {</Void></E></p>\n\n<p>   public static <E> void forEach(E[] array, MyOperation<E> op) {\n     new ForEach<E>(null, array, op, 0, array.length).invoke();\n   }</E></E></E></p>\n\n<p>   final E[] array; final MyOperation<E> op; final int lo, hi;\n   ForEach(CountedCompleter&lt;?> p, E[] array, MyOperation<E> op, int lo, int hi) {\n     super(p);\n     this.array = array; this.op = op; this.lo = lo; this.hi = hi;\n   }</E></E></p>\n\n<p>   public void compute() { // version 1\n     if (hi - lo >= 2) {\n       int mid = (lo + hi) >>> 1;\n       setPendingCount(2); // must set pending count before fork\n       new ForEach(this, array, op, mid, hi).fork(); // right child\n       new ForEach(this, array, op, lo, mid).fork(); // left child\n     }\n     else if (hi > lo)\n       op.apply(array[lo]);\n     tryComplete();\n   }\n }}</p>\n\n<p> This design can be improved by noticing that in the recursive case,\n the task has nothing to do after forking its right task, so can\n directly invoke its left task before returning. (This is an analog\n of tail recursion removal.)  Also, because the task returns upon\n executing its left task (rather than falling through to invoke\n {@code tryComplete}) the pending count is set to one:</p>\n\n<p> <pre> {@code\n class ForEach<E> ... {\n   ...\n   public void compute() { // version 2\n     if (hi - lo >= 2) {\n       int mid = (lo + hi) >>> 1;\n       setPendingCount(1); // only one pending\n       new ForEach(this, array, op, mid, hi).fork(); // right child\n       new ForEach(this, array, op, lo, mid).compute(); // direct invoke\n     }\n     else {\n       if (hi > lo)\n         op.apply(array[lo]);\n       tryComplete();\n     }\n   }\n }}</E></pre></p>\n\n<p> As a further optimization, notice that the left task need not even exist.\n Instead of creating a new one, we can iterate using the original task,\n and add a pending count for each fork.  Additionally, because no task\n in this tree implements an <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-onCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-onCompletion\" class=\"docClass\">onCompletion</a>(CountedCompleter) method,\n {@code tryComplete()} can be replaced with <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-propagateCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-propagateCompletion\" class=\"docClass\">propagateCompletion</a>.</p>\n\n<p> <pre> {@code\n class ForEach<E> ... {\n   ...\n   public void compute() { // version 3\n     int l = lo, h = hi;\n     while (h - l >= 2) {\n       int mid = (l + h) >>> 1;\n       addToPendingCount(1);\n       new ForEach(this, array, op, mid, h).fork(); // right child\n       h = mid;\n     }\n     if (h > l)\n       op.apply(array[l]);\n     propagateCompletion();\n   }\n }}</E></pre></p>\n\n<p> Additional optimizations of such classes might entail precomputing\n pending counts so that they can be established in constructors,\n specializing classes for leaf steps, subdividing by say, four,\n instead of two per iteration, and using an adaptive threshold\n instead of always subdividing down to single elements.</p>\n\n<p> <p><b>Searching.</b> A tree of CountedCompleters can search for a\n value or property in different parts of a data structure, and\n report a result in an AtomicReference as\n soon as one is found. The others can poll the result to avoid\n unnecessary work. (You could additionally {@linkplain <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-cancel\" rel=\"java.util.concurrent.CountedCompleter-method-cancel\" class=\"docClass\">cancel</a>\n cancel} other tasks, but it is usually simpler and more efficient\n to just let them notice that the result is set and if so skip\n further processing.)  Illustrating again with an array using full\n partitioning (again, in practice, leaf tasks will almost always\n process more than one element):</p>\n\n<p> <pre> {@code\n class Searcher<E> extends CountedCompleter<E> {\n   final E[] array; final AtomicReference<E> result; final int lo, hi;\n   Searcher(CountedCompleter&lt;?> p, E[] array, AtomicReference<E> result, int lo, int hi) {\n     super(p);\n     this.array = array; this.result = result; this.lo = lo; this.hi = hi;\n   }\n   public E getRawResult() { return result.get(); }\n   public void compute() { // similar to ForEach version 3\n     int l = lo, h = hi;\n     while (result.get() == null &amp;&amp; h >= l) {\n       if (h - l >= 2) {\n         int mid = (l + h) >>> 1;\n         addToPendingCount(1);\n         new Searcher(this, array, result, mid, h).fork();\n         h = mid;\n       }\n       else {\n         E x = array[l];\n         if (matches(x) &amp;&amp; result.compareAndSet(null, x))\n           quietlyCompleteRoot(); // root task is now joinable\n         break;\n       }\n     }\n     tryComplete(); // normally complete whether or not found\n   }\n   boolean matches(E e) { ... } // return true if found</E></E></E></E></pre></p>\n\n<p>   public static <E> E search(E[] array) {\n       return new Searcher<E>(null, array, new AtomicReference<E>(), 0, array.length).invoke();\n   }\n }}</E></E></E></p>\n\n<p> In this example, as well as others in which tasks have no other\n effects except to {@code compareAndSet} a common result, the\n trailing unconditional invocation of {@code tryComplete} could be\n made conditional ({@code if (result.get() == null) tryComplete();})\n because no further bookkeeping is required to manage completions\n once the root task completes.</p>\n\n<p> <p><b>Recording subtasks.</b> CountedCompleter tasks that combine\n results of multiple subtasks usually need to access these results\n in method <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-onCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-onCompletion\" class=\"docClass\">onCompletion</a>(CountedCompleter). As illustrated in the following\n class (that performs a simplified form of map-reduce where mappings\n and reductions are all of type {@code E}), one way to do this in\n divide and conquer designs is to have each subtask record its\n sibling, so that it can be accessed in method {@code onCompletion}.\n This technique applies to reductions in which the order of\n combining left and right results does not matter; ordered\n reductions require explicit left/right designations.  Variants of\n other streamlinings seen in the above examples may also apply.</p>\n\n<p> <pre> {@code\n class MyMapper<E> { E apply(E v) {  ...  } }\n class MyReducer<E> { E apply(E x, E y) {  ...  } }\n class MapReducer<E> extends CountedCompleter<E> {\n   final E[] array; final MyMapper<E> mapper;\n   final MyReducer<E> reducer; final int lo, hi;\n   MapReducer<E> sibling;\n   E result;\n   MapReducer(CountedCompleter&lt;?> p, E[] array, MyMapper<E> mapper,\n              MyReducer<E> reducer, int lo, int hi) {\n     super(p);\n     this.array = array; this.mapper = mapper;\n     this.reducer = reducer; this.lo = lo; this.hi = hi;\n   }\n   public void compute() {\n     if (hi - lo >= 2) {\n       int mid = (lo + hi) >>> 1;\n       MapReducer<E> left = new MapReducer(this, array, mapper, reducer, lo, mid);\n       MapReducer<E> right = new MapReducer(this, array, mapper, reducer, mid, hi);\n       left.sibling = right;\n       right.sibling = left;\n       setPendingCount(1); // only right is pending\n       right.fork();\n       left.compute();     // directly execute left\n     }\n     else {\n       if (hi > lo)\n           result = mapper.apply(array[lo]);\n       tryComplete();\n     }\n   }\n   public void onCompletion(CountedCompleter&lt;?> caller) {\n     if (caller != this) {\n       MapReducer<E> child = (MapReducer<E>)caller;\n       MapReducer<E> sib = child.sibling;\n       if (sib == null || sib.result == null)\n         result = child.result;\n       else\n         result = reducer.apply(child.result, sib.result);\n     }\n   }\n   public E getRawResult() { return result; }</E></E></E></E></E></E></E></E></E></E></E></E></E></E></pre></p>\n\n<p>   public static <E> E mapReduce(E[] array, MyMapper<E> mapper, MyReducer<E> reducer) {\n     return new MapReducer<E>(null, array, mapper, reducer,\n                              0, array.length).invoke();\n   }\n }}</E></E></E></E></p>\n\n<p> Here, method {@code onCompletion} takes a form common to many\n completion designs that combine results. This callback-style method\n is triggered once per task, in either of the two different contexts\n in which the pending count is, or becomes, zero: (1) by a task\n itself, if its pending count is zero upon invocation of {@code\n tryComplete}, or (2) by any of its subtasks when they complete and\n decrement the pending count to zero. The {@code caller} argument\n distinguishes cases.  Most often, when the caller is {@code this},\n no action is necessary. Otherwise the caller argument can be used\n (usually via a cast) to supply a value (and/or links to other\n values) to be combined.  Assuming proper use of pending counts, the\n actions inside {@code onCompletion} occur (once) upon completion of\n a task and its subtasks. No additional synchronization is required\n within this method to ensure thread safety of accesses to fields of\n this task or other completed tasks.</p>\n\n<p> <p><b>Completion Traversals</b>. If using {@code onCompletion} to\n process completions is inapplicable or inconvenient, you can use\n methods <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-firstComplete\" rel=\"java.util.concurrent.CountedCompleter-method-firstComplete\" class=\"docClass\">firstComplete</a> and <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-nextComplete\" rel=\"java.util.concurrent.CountedCompleter-method-nextComplete\" class=\"docClass\">nextComplete</a> to create\n custom traversals.  For example, to define a MapReducer that only\n splits out right-hand tasks in the form of the third ForEach\n example, the completions must cooperatively reduce along\n unexhausted subtask links, which can be done as follows:</p>\n\n<p> <pre> {@code\n class MapReducer<E> extends CountedCompleter<E> { // version 2\n   final E[] array; final MyMapper<E> mapper;\n   final MyReducer<E> reducer; final int lo, hi;\n   MapReducer<E> forks, next; // record subtask forks in list\n   E result;\n   MapReducer(CountedCompleter&lt;?> p, E[] array, MyMapper<E> mapper,\n              MyReducer<E> reducer, int lo, int hi, MapReducer<E> next) {\n     super(p);\n     this.array = array; this.mapper = mapper;\n     this.reducer = reducer; this.lo = lo; this.hi = hi;\n     this.next = next;\n   }\n   public void compute() {\n     int l = lo, h = hi;\n     while (h - l >= 2) {\n       int mid = (l + h) >>> 1;\n       addToPendingCount(1);\n       (forks = new MapReducer(this, array, mapper, reducer, mid, h, forks)).fork();\n       h = mid;\n     }\n     if (h > l)\n       result = mapper.apply(array[l]);\n     // process completions by reducing along and advancing subtask links\n     for (CountedCompleter&lt;?> c = firstComplete(); c != null; c = c.nextComplete()) {\n       for (MapReducer t = (MapReducer)c, s = t.forks; s != null; s = t.forks = s.next)\n         t.result = reducer.apply(t.result, s.result);\n     }\n   }\n   public E getRawResult() { return result; }</E></E></E></E></E></E></E></E></pre></p>\n\n<p>   public static <E> E mapReduce(E[] array, MyMapper<E> mapper, MyReducer<E> reducer) {\n     return new MapReducer<E>(null, array, mapper, reducer,\n                              0, array.length, null).invoke();\n   }\n }}</E></E></E></E></p>\n\n<p> <p><b>Triggers.</b> Some CountedCompleters are themselves never\n forked, but instead serve as bits of plumbing in other designs;\n including those in which the completion of one or more async tasks\n triggers another async task. For example:</p>\n\n<p> <pre> {@code\n class HeaderBuilder extends CountedCompleter&lt;...> { ... }\n class BodyBuilder extends CountedCompleter&lt;...> { ... }\n class PacketSender extends CountedCompleter&lt;...> {\n   PacketSender(...) { super(null, 1); ... } // trigger on second completion\n   public void compute() { } // never called\n   public void onCompletion(CountedCompleter&lt;?> caller) { sendPacket(); }\n }\n // sample use:\n PacketSender p = new PacketSender();\n new HeaderBuilder(p, ...).fork();\n new BodyBuilder(p, ...).fork();}</pre></p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-adapt' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-adapt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-adapt' class='name expandable'>adapt</a>( <span class='pre'>callable, </span> ) : Object {java.util.concurrent.ForkJoinTask}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new {@code ForkJoinTask} that performs the {@code call}\n method of the given {@code Callable} as its action...</div><div class='long'><p>Returns a new {@code ForkJoinTask} that performs the {@code call}\n method of the given {@code Callable} as its action, and returns\n its result upon <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a>, translating any checked exceptions\n encountered into {@code RuntimeException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callable</span> : Object {java.util.concurrent.Callable}<div class='sub-desc'><p>the callable action</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the callable's result</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinTask}</span><div class='sub-desc'><p>the task</p>\n</div></li></ul></div></div></div><div id='method-addToPendingCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-addToPendingCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-addToPendingCount' class='name expandable'>addToPendingCount</a>( <span class='pre'>delta</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds (atomically) the given value to the pending count. ...</div><div class='long'><p>Adds (atomically) the given value to the pending count.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>delta</span> : Number<div class='sub-desc'><p>the value to add</p>\n</div></li></ul></div></div></div><div id='method-cancel' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-cancel' class='name expandable'>cancel</a>( <span class='pre'>mayInterruptIfRunning</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to cancel execution of this task. ...</div><div class='long'><p>Attempts to cancel execution of this task. This attempt will\n fail if the task has already completed or could not be\n cancelled for some other reason. If successful, and this task\n has not started when {@code cancel} is called, execution of\n this task is suppressed. After this method returns\n successfully, unless there is an intervening call to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-reinitialize\" rel=\"java.util.concurrent.ForkJoinTask-method-reinitialize\" class=\"docClass\">reinitialize</a>, subsequent calls to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isCancelled\" rel=\"java.util.concurrent.ForkJoinTask-method-isCancelled\" class=\"docClass\">isCancelled</a>,\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isDone\" rel=\"java.util.concurrent.ForkJoinTask-method-isDone\" class=\"docClass\">isDone</a>, and {@code cancel} will return {@code true}\n and calls to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a> and related methods will result in\n {@code CancellationException}.</p>\n\n<p> <p>This method may be overridden in subclasses, but if so, must\n still ensure that these properties hold. In particular, the\n {@code cancel} method itself must not throw exceptions.</p>\n\n<p> <p>This method is designed to be invoked by <em>other</em>\n tasks. To terminate the current task, you can just return or\n throw an unchecked exception from its computation method, or\n invoke <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-completeExceptionally\" rel=\"java.util.concurrent.ForkJoinTask-method-completeExceptionally\" class=\"docClass\">completeExceptionally</a>(Throwable).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mayInterruptIfRunning</span> : Boolean<div class='sub-desc'><p>this value has no effect in the\n default implementation because interrupts are not used to\n control cancellation.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this task is now cancelled</p>\n</div></li></ul></div></div></div><div id='method-compareAndSetForkJoinTaskTag' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-compareAndSetForkJoinTaskTag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-compareAndSetForkJoinTaskTag' class='name expandable'>compareAndSetForkJoinTaskTag</a>( <span class='pre'>expect, update</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically conditionally sets the tag value for this task. ...</div><div class='long'><p>Atomically conditionally sets the tag value for this task.\n Among other applications, tags can be used as visit markers\n in tasks operating on graphs, as in methods that check: {@code\n if (task.compareAndSetForkJoinTaskTag((short)0, (short)1))}\n before processing, otherwise exiting because the node has\n already been visited.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expect</span> : Number<div class='sub-desc'><p>the expected tag value</p>\n</div></li><li><span class='pre'>update</span> : Number<div class='sub-desc'><p>the new tag value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful; i.e., the current value was\n equal to {@code expect} and was changed to {@code update}.</p>\n</div></li></ul></div></div></div><div id='method-compareAndSetPendingCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-compareAndSetPendingCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-compareAndSetPendingCount' class='name expandable'>compareAndSetPendingCount</a>( <span class='pre'>expected, count</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets (atomically) the pending count to the given count only if\n it currently holds the given expected value. ...</div><div class='long'><p>Sets (atomically) the pending count to the given count only if\n it currently holds the given expected value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expected</span> : Number<div class='sub-desc'><p>the expected value</p>\n</div></li><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>the new value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful</p>\n</div></li></ul></div></div></div><div id='method-complete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-complete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-complete' class='name expandable'>complete</a>( <span class='pre'>rawResult</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Regardless of pending count, invokes\n onCompletion(CountedCompleter), marks this task as\n complete and further trigge...</div><div class='long'><p>Regardless of pending count, invokes\n <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-onCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-onCompletion\" class=\"docClass\">onCompletion</a>(CountedCompleter), marks this task as\n complete and further triggers <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-tryComplete\" rel=\"java.util.concurrent.CountedCompleter-method-tryComplete\" class=\"docClass\">tryComplete</a> on this\n task's completer, if one exists.  The given rawResult is\n used as an argument to setRawResult before invoking\n <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-onCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-onCompletion\" class=\"docClass\">onCompletion</a>(CountedCompleter) or marking this task\n as complete; its value is meaningful only for classes\n overriding {@code setRawResult}.  This method does not modify\n the pending count.</p>\n\n<p> <p>This method may be useful when forcing completion as soon as\n any one (versus all) of several subtask results are obtained.\n However, in the common (and recommended) case in which {@code\n setRawResult} is not overridden, this effect can be obtained\n more simply using <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-quietlyCompleteRoot\" rel=\"java.util.concurrent.CountedCompleter-method-quietlyCompleteRoot\" class=\"docClass\">quietlyCompleteRoot</a>().</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rawResult</span> : Object {Object}<div class='sub-desc'><p>the raw result</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-complete\" rel=\"java.util.concurrent.ForkJoinTask-method-complete\" class=\"docClass\">java.util.concurrent.ForkJoinTask.complete</a></p></div></div></div><div id='method-completeExceptionally' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-completeExceptionally' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-completeExceptionally' class='name expandable'>completeExceptionally</a>( <span class='pre'>ex</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Completes this task abnormally, and if not already aborted or\n cancelled, causes it to throw the given exception upon...</div><div class='long'><p>Completes this task abnormally, and if not already aborted or\n cancelled, causes it to throw the given exception upon\n {@code join} and related operations. This method may be used\n to induce exceptions in asynchronous tasks, or to force\n completion of tasks that would not otherwise complete.  Its use\n in other situations is discouraged.  This method is\n overridable, but overridden versions must invoke {@code super}\n implementation to maintain guarantees.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ex</span> : Object {Throwable}<div class='sub-desc'><p>the exception to throw. If this exception is not a\n {@code RuntimeException} or {@code Error}, the actual exception\n thrown will be a {@code RuntimeException} with cause {@code ex}.</p>\n</div></li></ul></div></div></div><div id='method-compute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-compute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-compute' class='name expandable'>compute</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The main computation performed by this task. ...</div><div class='long'><p>The main computation performed by this task.</p>\n</div></div></div><div id='method-decrementPendingCountUnlessZero' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-decrementPendingCountUnlessZero' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-decrementPendingCountUnlessZero' class='name expandable'>decrementPendingCountUnlessZero</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>If the pending count is nonzero, (atomically) decrements it. ...</div><div class='long'><p>If the pending count is nonzero, (atomically) decrements it.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the initial (undecremented) pending count holding on entry\n to this method</p>\n</div></li></ul></div></div></div><div id='method-firstComplete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-firstComplete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-firstComplete' class='name expandable'>firstComplete</a>( <span class='pre'></span> ) : Object {java.util.concurrent.CountedCompleter}<span class=\"signature\"></span></div><div class='description'><div class='short'>If this task's pending count is zero, returns this task;\n otherwise decrements its pending count and returns {@code n...</div><div class='long'><p>If this task's pending count is zero, returns this task;\n otherwise decrements its pending count and returns {@code null}.\n This method is designed to be used with <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-nextComplete\" rel=\"java.util.concurrent.CountedCompleter-method-nextComplete\" class=\"docClass\">nextComplete</a> in\n completion traversal loops.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CountedCompleter}</span><div class='sub-desc'><p>this task, if pending count was zero, else {@code null}</p>\n</div></li></ul></div></div></div><div id='method-fork' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-fork' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-fork' class='name expandable'>fork</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ForkJoinTask}<span class=\"signature\"></span></div><div class='description'><div class='short'>Arranges to asynchronously execute this task in the pool the\n current task is running in, if applicable, or using the...</div><div class='long'><p>Arranges to asynchronously execute this task in the pool the\n current task is running in, if applicable, or using the java.util.concurrent.ForkJoinPool.commonPool() if not <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" rel=\"java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" class=\"docClass\">inForkJoinPool</a>.  While\n it is not necessarily enforced, it is a usage error to fork a\n task more than once unless it has completed and been\n reinitialized.  Subsequent modifications to the state of this\n task or any data it operates on are not necessarily\n consistently observable by any thread other than the one\n executing it unless preceded by a call to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-join\" rel=\"java.util.concurrent.ForkJoinTask-method-join\" class=\"docClass\">join</a> or\n related methods, or a call to <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isDone\" rel=\"java.util.concurrent.ForkJoinTask-method-isDone\" class=\"docClass\">isDone</a> returning {@code\n true}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinTask}</span><div class='sub-desc'><p>{@code this}, to simplify usage</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-get' class='name expandable'>get</a>( <span class='pre'>timeout, unit</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if ava...</div><div class='long'><p>Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result, if available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the computed result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CancellationException if the computation was cancelled</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ExecutionException if the computation threw an\n exception</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is not a\n member of a ForkJoinPool and was interrupted while waiting</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutException if the wait timed out</p>\n</div></li></ul></div></div></div><div id='method-getCompleter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-getCompleter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-getCompleter' class='name expandable'>getCompleter</a>( <span class='pre'></span> ) : Object {java.util.concurrent.CountedCompleter}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the completer established in this task's constructor,\n or {@code null} if none. ...</div><div class='long'><p>Returns the completer established in this task's constructor,\n or {@code null} if none.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CountedCompleter}</span><div class='sub-desc'><p>the completer</p>\n</div></li></ul></div></div></div><div id='method-getException' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getException' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getException' class='name expandable'>getException</a>( <span class='pre'></span> ) : Object {java.lang.Throwable}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the exception thrown by the base computation, or a\n {@code CancellationException} if cancelled, or {@code nul...</div><div class='long'><p>Returns the exception thrown by the base computation, or a\n {@code CancellationException} if cancelled, or {@code null} if\n none or if the method has not yet completed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Throwable}</span><div class='sub-desc'><p>the exception, or {@code null} if none</p>\n</div></li></ul></div></div></div><div id='method-getForkJoinTaskTag' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getForkJoinTaskTag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getForkJoinTaskTag' class='name expandable'>getForkJoinTaskTag</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the tag for this task. ...</div><div class='long'><p>Returns the tag for this task.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the tag for this task</p>\n</div></li></ul></div></div></div><div id='method-getPendingCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-getPendingCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-getPendingCount' class='name expandable'>getPendingCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current pending count. ...</div><div class='long'><p>Returns the current pending count.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current pending count</p>\n</div></li></ul></div></div></div><div id='method-getPool' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getPool' class='name expandable'>getPool</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ForkJoinPool}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the pool hosting the current thread, or {@code null}\n if the current thread is executing outside of any ForkJ...</div><div class='long'><p>Returns the pool hosting the current thread, or {@code null}\n if the current thread is executing outside of any ForkJoinPool.</p>\n\n<p> <p>This method returns {@code null} if and only if <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" rel=\"java.util.concurrent.ForkJoinTask-method-inForkJoinPool\" class=\"docClass\">inForkJoinPool</a> returns {@code false}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ForkJoinPool}</span><div class='sub-desc'><p>the pool, or {@code null} if none</p>\n</div></li></ul></div></div></div><div id='method-getQueuedTaskCount' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getQueuedTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getQueuedTaskCount' class='name expandable'>getQueuedTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of tasks that have been\n forked by the current worker thread but not yet executed. ...</div><div class='long'><p>Returns an estimate of the number of tasks that have been\n forked by the current worker thread but not yet executed. This\n value may be useful for heuristic decisions about whether to\n fork other tasks.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of tasks</p>\n</div></li></ul></div></div></div><div id='method-getRawResult' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-getRawResult' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-getRawResult' class='name expandable'>getRawResult</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the result of the computation. ...</div><div class='long'><p>Returns the result of the computation.  By default,\n returns {@code null}, which is appropriate for {@code Void}\n actions, but in other cases should be overridden, almost\n always to return a field or function of a field that\n holds the result upon completion.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the result of the computation</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-getRawResult\" rel=\"java.util.concurrent.ForkJoinTask-method-getRawResult\" class=\"docClass\">java.util.concurrent.ForkJoinTask.getRawResult</a></p></div></div></div><div id='method-getRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-getRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-getRoot' class='name expandable'>getRoot</a>( <span class='pre'></span> ) : Object {java.util.concurrent.CountedCompleter}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the root of the current computation; i.e., this\n task if it has no completer, else its completer's root. ...</div><div class='long'><p>Returns the root of the current computation; i.e., this\n task if it has no completer, else its completer's root.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CountedCompleter}</span><div class='sub-desc'><p>the root of the current computation</p>\n</div></li></ul></div></div></div><div id='method-getSurplusQueuedTaskCount' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-getSurplusQueuedTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-getSurplusQueuedTaskCount' class='name expandable'>getSurplusQueuedTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of how many more locally queued tasks are\n held by the current worker thread than there are other...</div><div class='long'><p>Returns an estimate of how many more locally queued tasks are\n held by the current worker thread than there are other worker\n threads that might steal them, or zero if this thread is not\n operating in a ForkJoinPool. This value may be useful for\n heuristic decisions about whether to fork other tasks. In many\n usages of ForkJoinTasks, at steady state, each worker should\n aim to maintain a small constant surplus (for example, 3) of\n tasks, and to process computations locally if this threshold is\n exceeded.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the surplus number of tasks, which may be negative</p>\n</div></li></ul></div></div></div><div id='method-helpComplete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-helpComplete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-helpComplete' class='name expandable'>helpComplete</a>( <span class='pre'>maxTasks</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>If this task has not completed, attempts to process at most the\n given number of other unprocessed tasks for which th...</div><div class='long'><p>If this task has not completed, attempts to process at most the\n given number of other unprocessed tasks for which this task is\n on the completion path, if any are known to exist.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>maxTasks</span> : Number<div class='sub-desc'><p>the maximum number of tasks to process.  If\n                 less than or equal to zero, then no tasks are\n                 processed.</p>\n</div></li></ul></div></div></div><div id='method-helpQuiesce' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-helpQuiesce' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-helpQuiesce' class='name expandable'>helpQuiesce</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly executes tasks until the pool hosting the current task\n {@linkplain java.util.concurrent.ForkJoinPool.isQuie...</div><div class='long'><p>Possibly executes tasks until the pool hosting the current task\n {@linkplain <a href=\"#!/api/java.util.concurrent.ForkJoinPool-method-isQuiescent\" rel=\"java.util.concurrent.ForkJoinPool-method-isQuiescent\" class=\"docClass\">java.util.concurrent.ForkJoinPool.isQuiescent</a> is quiescent}.  This\n method may be of use in designs in which many tasks are forked,\n but none are explicitly joined, instead executing them until\n all are processed.</p>\n</div></div></div><div id='method-inForkJoinPool' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-inForkJoinPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-inForkJoinPool' class='name expandable'>inForkJoinPool</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if the current thread is a java.util.concurrent.ForkJoinWorkerThread executing as a ForkJoinPool...</div><div class='long'><p>Returns {@code true} if the current thread is a <a href=\"#!/api/java.util.concurrent.ForkJoinWorkerThread\" rel=\"java.util.concurrent.ForkJoinWorkerThread\" class=\"docClass\">java.util.concurrent.ForkJoinWorkerThread</a> executing as a ForkJoinPool computation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation,\n or {@code false} otherwise</p>\n</div></li></ul></div></div></div><div id='method-invoke' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-invoke' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-invoke' class='name expandable'>invoke</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Commences performing this task, awaits its completion if\n necessary, and returns its result, or throws an (unchecked)...</div><div class='long'><p>Commences performing this task, awaits its completion if\n necessary, and returns its result, or throws an (unchecked)\n {@code RuntimeException} or {@code Error} if the underlying\n computation did so.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the computed result</p>\n</div></li></ul></div></div></div><div id='method-invokeAll' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-invokeAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-invokeAll' class='name expandable'>invokeAll</a>( <span class='pre'>tasks, </span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Forks all tasks in the specified collection, returning when\n {@code isDone} holds for each task or an (unchecked) exc...</div><div class='long'><p>Forks all tasks in the specified collection, returning when\n {@code isDone} holds for each task or an (unchecked) exception\n is encountered, in which case the exception is rethrown. If\n more than one task encounters an exception, then this method\n throws any one of these exceptions. If any task encounters an\n exception, others may be cancelled. However, the execution\n status of individual tasks is not guaranteed upon exceptional\n return. The status of each task may be obtained using <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-getException\" rel=\"java.util.concurrent.ForkJoinTask-method-getException\" class=\"docClass\">getException</a>() and related methods to check if they have been\n cancelled, completed normally or exceptionally, or left\n unprocessed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tasks</span> : Object {java.util.Collection}<div class='sub-desc'><p>the collection of tasks</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><T> the type of the values returned from the tasks</T></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the tasks argument, to simplify usage</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if tasks or any element are null</p>\n</div></li></ul></div></div></div><div id='method-isCancelled' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-isCancelled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-isCancelled' class='name expandable'>isCancelled</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isCompletedAbnormally' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-isCompletedAbnormally' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-isCompletedAbnormally' class='name expandable'>isCompletedAbnormally</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this task threw an exception or was cancelled. ...</div><div class='long'><p>Returns {@code true} if this task threw an exception or was cancelled.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this task threw an exception or was cancelled</p>\n</div></li></ul></div></div></div><div id='method-isCompletedNormally' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-isCompletedNormally' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-isCompletedNormally' class='name expandable'>isCompletedNormally</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this task completed without throwing an\n exception and was not cancelled. ...</div><div class='long'><p>Returns {@code true} if this task completed without throwing an\n exception and was not cancelled.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this task completed without throwing an\n exception and was not cancelled</p>\n</div></li></ul></div></div></div><div id='method-isDone' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-isDone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-isDone' class='name expandable'>isDone</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-join' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-join' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-join' class='name expandable'>join</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the result of the computation when it is\n done. ...</div><div class='long'><p>Returns the result of the computation when it <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isDone\" rel=\"java.util.concurrent.ForkJoinTask-method-isDone\" class=\"docClass\">is\n done</a>.  This method differs from <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-get\" rel=\"java.util.concurrent.ForkJoinTask-method-get\" class=\"docClass\">get</a>() in that\n abnormal completion results in {@code RuntimeException} or\n {@code Error}, not {@code ExecutionException}, and that\n interrupts of the calling thread do <em>not</em> cause the\n method to abruptly return by throwing {@code\n InterruptedException}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the computed result</p>\n</div></li></ul></div></div></div><div id='method-nextComplete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-nextComplete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-nextComplete' class='name expandable'>nextComplete</a>( <span class='pre'></span> ) : Object {java.util.concurrent.CountedCompleter}<span class=\"signature\"></span></div><div class='description'><div class='short'>If this task does not have a completer, invokes java.util.concurrent.ForkJoinTask.quietlyComplete and returns {@code ...</div><div class='long'><p>If this task does not have a completer, invokes <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-quietlyComplete\" rel=\"java.util.concurrent.ForkJoinTask-method-quietlyComplete\" class=\"docClass\">java.util.concurrent.ForkJoinTask.quietlyComplete</a> and returns {@code null}.  Or, if\n the completer's pending count is non-zero, decrements that\n pending count and returns {@code null}.  Otherwise, returns the\n completer.  This method can be used as part of a completion\n traversal loop for homogeneous task hierarchies:</p>\n\n<p> <pre> {@code\n for (CountedCompleter&lt;?> c = firstComplete();\n      c != null;\n      c = c.nextComplete()) {\n   // ... process c ...\n }}</pre></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.CountedCompleter}</span><div class='sub-desc'><p>the completer, or {@code null} if none</p>\n</div></li></ul></div></div></div><div id='method-onCompletion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-onCompletion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-onCompletion' class='name expandable'>onCompletion</a>( <span class='pre'>caller</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs an action when method tryComplete is invoked\n and the pending count is zero, or when the unconditional\n meth...</div><div class='long'><p>Performs an action when method <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-tryComplete\" rel=\"java.util.concurrent.CountedCompleter-method-tryComplete\" class=\"docClass\">tryComplete</a> is invoked\n and the pending count is zero, or when the unconditional\n method <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-complete\" rel=\"java.util.concurrent.CountedCompleter-method-complete\" class=\"docClass\">complete</a> is invoked.  By default, this method\n does nothing. You can distinguish cases by checking the\n identity of the given caller argument. If not equal to {@code\n this}, then it is typically a subtask that may contain results\n (and/or links to other results) to combine.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>caller</span> : Object {java.util.concurrent.CountedCompleter}<div class='sub-desc'><p>the task invoking this method (which may\n be this task itself)</p>\n</div></li></ul></div></div></div><div id='method-onExceptionalCompletion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-onExceptionalCompletion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-onExceptionalCompletion' class='name expandable'>onExceptionalCompletion</a>( <span class='pre'>ex, caller</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs an action when method completeExceptionally(Throwable) is invoked or method compute throws an exception, and...</div><div class='long'><p>Performs an action when method <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-completeExceptionally\" rel=\"java.util.concurrent.CountedCompleter-method-completeExceptionally\" class=\"docClass\">completeExceptionally</a>(Throwable) is invoked or method <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-compute\" rel=\"java.util.concurrent.CountedCompleter-method-compute\" class=\"docClass\">compute</a> throws an exception, and this task has not already\n otherwise completed normally. On entry to this method, this task\n <a href=\"#!/api/java.util.concurrent.ForkJoinTask-method-isCompletedAbnormally\" rel=\"java.util.concurrent.ForkJoinTask-method-isCompletedAbnormally\" class=\"docClass\">java.util.concurrent.ForkJoinTask.isCompletedAbnormally</a>.  The return value\n of this method controls further propagation: If {@code true}\n and this task has a completer that has not completed, then that\n completer is also completed exceptionally, with the same\n exception as this completer.  The default implementation of\n this method does nothing except return {@code true}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ex</span> : Object {Throwable}<div class='sub-desc'><p>the exception</p>\n</div></li><li><span class='pre'>caller</span> : Object {java.util.concurrent.CountedCompleter}<div class='sub-desc'><p>the task invoking this method (which may\n be this task itself)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this exception should be propagated to this\n task's completer, if one exists</p>\n</div></li></ul></div></div></div><div id='method-propagateCompletion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-propagateCompletion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-propagateCompletion' class='name expandable'>propagateCompletion</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent to tryComplete but does not invoke onCompletion(CountedCompleter) along the completion path:\n If the pendi...</div><div class='long'><p>Equivalent to <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-tryComplete\" rel=\"java.util.concurrent.CountedCompleter-method-tryComplete\" class=\"docClass\">tryComplete</a> but does not invoke <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-onCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-onCompletion\" class=\"docClass\">onCompletion</a>(CountedCompleter) along the completion path:\n If the pending count is nonzero, decrements the count;\n otherwise, similarly tries to complete this task's completer, if\n one exists, else marks this task as complete. This method may be\n useful in cases where {@code onCompletion} should not, or need\n not, be invoked for each completer in a computation.</p>\n</div></div></div><div id='method-quietlyComplete' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-quietlyComplete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-quietlyComplete' class='name expandable'>quietlyComplete</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Completes this task normally without setting a value. ...</div><div class='long'><p>Completes this task normally without setting a value. The most\n recent value established by setRawResult (or {@code\n null} by default) will be returned as the result of subsequent\n invocations of {@code join} and related operations.</p>\n        <p>Available since: <b>1.8</b></p>\n</div></div></div><div id='method-quietlyCompleteRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-quietlyCompleteRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-quietlyCompleteRoot' class='name expandable'>quietlyCompleteRoot</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent to {@code getRoot().quietlyComplete()}. ...</div><div class='long'><p>Equivalent to {@code getRoot().quietlyComplete()}.</p>\n</div></div></div><div id='method-quietlyInvoke' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-quietlyInvoke' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-quietlyInvoke' class='name expandable'>quietlyInvoke</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Commences performing this task and awaits its completion if\n necessary, without returning its result or throwing its\n...</div><div class='long'><p>Commences performing this task and awaits its completion if\n necessary, without returning its result or throwing its\n exception.</p>\n</div></div></div><div id='method-quietlyJoin' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-quietlyJoin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-quietlyJoin' class='name expandable'>quietlyJoin</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Joins this task, without returning its result or throwing its\n exception. ...</div><div class='long'><p>Joins this task, without returning its result or throwing its\n exception. This method may be useful when processing\n collections of tasks when some have been cancelled or otherwise\n known to have aborted.</p>\n</div></div></div><div id='method-reinitialize' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-reinitialize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-reinitialize' class='name expandable'>reinitialize</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets the internal bookkeeping state of this task, allowing a\n subsequent {@code fork}. ...</div><div class='long'><p>Resets the internal bookkeeping state of this task, allowing a\n subsequent {@code fork}. This method allows repeated reuse of\n this task, but only if reuse occurs when this task has either\n never been forked, or has been forked, then completed and all\n outstanding joins of this task have also completed. Effects\n under any other usage conditions are not guaranteed.\n This method may be useful when executing\n pre-constructed trees of subtasks in loops.</p>\n\n<p> <p>Upon completion of this method, {@code isDone()} reports\n {@code false}, and {@code getException()} reports {@code\n null}. However, the value returned by {@code getRawResult} is\n unaffected. To clear this value, you can invoke {@code\n setRawResult(null)}.</p>\n</div></div></div><div id='method-setForkJoinTaskTag' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-setForkJoinTaskTag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-setForkJoinTaskTag' class='name expandable'>setForkJoinTaskTag</a>( <span class='pre'>newValue</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the tag value for this task and returns the old value. ...</div><div class='long'><p>Atomically sets the tag value for this task and returns the old value.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newValue</span> : Number<div class='sub-desc'><p>the new tag value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the previous value of the tag</p>\n</div></li></ul></div></div></div><div id='method-setPendingCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-setPendingCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-setPendingCount' class='name expandable'>setPendingCount</a>( <span class='pre'>count</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the pending count to the given value. ...</div><div class='long'><p>Sets the pending count to the given value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>count</span> : Number<div class='sub-desc'><p>the count</p>\n</div></li></ul></div></div></div><div id='method-tryComplete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.CountedCompleter'>java.util.concurrent.CountedCompleter</span><br/><a href='source/CountedCompleter.html#java-util-concurrent-CountedCompleter-method-tryComplete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.CountedCompleter-method-tryComplete' class='name expandable'>tryComplete</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>If the pending count is nonzero, decrements the count;\n otherwise invokes onCompletion(CountedCompleter)\n and then si...</div><div class='long'><p>If the pending count is nonzero, decrements the count;\n otherwise invokes <a href=\"#!/api/java.util.concurrent.CountedCompleter-method-onCompletion\" rel=\"java.util.concurrent.CountedCompleter-method-onCompletion\" class=\"docClass\">onCompletion</a>(CountedCompleter)\n and then similarly tries to complete this task's completer,\n if one exists, else marks this task as complete.</p>\n</div></div></div><div id='method-tryUnfork' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.ForkJoinTask' rel='java.util.concurrent.ForkJoinTask' class='defined-in docClass'>java.util.concurrent.ForkJoinTask</a><br/><a href='source/ForkJoinTask.html#java-util-concurrent-ForkJoinTask-method-tryUnfork' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinTask-method-tryUnfork' class='name expandable'>tryUnfork</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tries to unschedule this task for execution. ...</div><div class='long'><p>Tries to unschedule this task for execution. This method will\n typically (but is not guaranteed to) succeed if this task is\n the most recently forked task by the current thread, and has\n not commenced executing in another thread.  This method may be\n useful when arranging alternative local processing of tasks\n that could have been, but were not, stolen.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if unforked</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});