Ext.data.JsonP.java_util_concurrent_DelayQueue({"tagname":"class","name":"java.util.concurrent.DelayQueue","autodetected":{},"files":[{"filename":"DelayQueue.js","href":"DelayQueue.html#java-util-concurrent-DelayQueue"}],"extends":"java.util.AbstractQueue","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><E> the type of elements held in this queue</E></p>\n"}],"members":[{"name":"add","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-add","meta":{}},{"name":"clear","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-clear","meta":{}},{"name":"drainTo","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-drainTo","meta":{}},{"name":"iterator","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-iterator","meta":{}},{"name":"offer","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-offer","meta":{}},{"name":"peek","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-peek","meta":{}},{"name":"poll","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-poll","meta":{}},{"name":"put","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-put","meta":{}},{"name":"remainingCapacity","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-remainingCapacity","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-remove","meta":{}},{"name":"size","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-size","meta":{}},{"name":"take","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-take","meta":{}},{"name":"toArray","tagname":"method","owner":"java.util.concurrent.DelayQueue","id":"method-toArray","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.DelayQueue","short_doc":"implements java.util.concurrent.BlockingQueue\n\nAn unbounded {@linkplain java.util.concurrent.BlockingQueue blocking q...","classIcon":"icon-class","superclasses":["java.util.AbstractQueue"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.util.AbstractQueue<div class='subclass '><strong>java.util.concurrent.DelayQueue</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue' target='_blank'>DelayQueue.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a></p>\n\n<p>An unbounded {@linkplain <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a> blocking queue} of\n {@code Delayed} elements, in which an element can only be taken\n when its delay has expired.  The <em>head</em> of the queue is that\n {@code Delayed} element whose delay expired furthest in the\n past.  If no delay has expired there is no head and {@code poll}\n will return {@code null}. Expiration occurs when an element's\n {@code getDelay(TimeUnit.NANOSECONDS)} method returns a value less\n than or equal to zero.  Even though unexpired elements cannot be\n removed using {@code take} or {@code poll}, they are otherwise\n treated as normal elements. For example, the {@code size} method\n returns the count of both expired and unexpired elements.\n This queue does not permit null elements.</p>\n\n<p> <p>This class and its iterator implement all of the\n <em>optional</em> methods of the Collection and Iterator interfaces.  The Iterator provided in method <a href=\"#!/api/java.util.concurrent.DelayQueue-method-iterator\" rel=\"java.util.concurrent.DelayQueue-method-iterator\" class=\"docClass\">iterator</a>() is <em>not</em> guaranteed to traverse the elements of\n the DelayQueue in any particular order.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E> the type of elements held in this queue</E></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-add' class='name expandable'>add</a>( <span class='pre'>e</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this delay queue. ...</div><div class='long'><p>Inserts the specified element into this delay queue.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Delayed}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by Collection.add)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-clear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-clear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-clear' class='name expandable'>clear</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically removes all of the elements from this delay queue. ...</div><div class='long'><p>Atomically removes all of the elements from this delay queue.\n The queue will be empty after this call returns.\n Elements with an unexpired delay are not waited for; they are\n simply discarded from the queue.</p>\n</div></div></div><div id='method-drainTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-drainTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-drainTo' class='name expandable'>drainTo</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException            {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException          {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException      {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iterator over all the elements (both expired and\n unexpired) in this queue. ...</div><div class='long'><p>Returns an iterator over all the elements (both expired and\n unexpired) in this queue. The iterator does not return the\n elements in any particular order.</p>\n\n<p> <p>The returned iterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>an iterator over the elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-offer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-offer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-offer' class='name expandable'>offer</a>( <span class='pre'>e, timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this delay queue. ...</div><div class='long'><p>Inserts the specified element into this delay queue. As the queue is\n unbounded this method will never block.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Delayed}<div class='sub-desc'><p>the element to add</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>This parameter is ignored as the method never blocks</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>This parameter is ignored as the method never blocks</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-peek' class='name expandable'>peek</a>( <span class='pre'></span> ) : Object {java.util.concurrent.Delayed}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves, but does not remove, the head of this queue, or\n returns {@code null} if this queue is empty. ...</div><div class='long'><p>Retrieves, but does not remove, the head of this queue, or\n returns {@code null} if this queue is empty.  Unlike\n {@code poll}, if no expired elements are available in the queue,\n this method returns the element that will expire next,\n if one exists.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Delayed}</span><div class='sub-desc'><p>the head of this queue, or {@code null} if this\n         queue is empty</p>\n</div></li></ul></div></div></div><div id='method-poll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-poll' class='name expandable'>poll</a>( <span class='pre'></span> ) : Object {java.util.concurrent.Delayed}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is availab...</div><div class='long'><p>Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is available on this queue,\n or the specified wait time expires.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Delayed}</span><div class='sub-desc'><p>the head of this queue, or {@code null} if the\n         specified waiting time elapses before an element with\n         an expired delay becomes available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-put' class='name expandable'>put</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this delay queue. ...</div><div class='long'><p>Inserts the specified element into this delay queue. As the queue is\n unbounded this method will never block.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Delayed}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-remainingCapacity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-remainingCapacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-remainingCapacity' class='name expandable'>remainingCapacity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Always returns {@code Integer.MAX_VALUE} because\n a {@code DelayQueue} is not capacity constrained. ...</div><div class='long'><p>Always returns {@code Integer.MAX_VALUE} because\n a {@code DelayQueue} is not capacity constrained.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code Integer.MAX_VALUE}</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-remove' class='name expandable'>remove</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a single instance of the specified element from this\n queue, if it is present, whether or not it has expired. ...</div><div class='long'><p>Removes a single instance of the specified element from this\n queue, if it is present, whether or not it has expired.</p>\n</div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-size' class='name expandable'>size</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-take' class='name expandable'>take</a>( <span class='pre'></span> ) : Object {java.util.concurrent.Delayed}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is availab...</div><div class='long'><p>Retrieves and removes the head of this queue, waiting if necessary\n until an element with an expired delay is available on this queue.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.Delayed}</span><div class='sub-desc'><p>the head of this queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.DelayQueue'>java.util.concurrent.DelayQueue</span><br/><a href='source/DelayQueue.html#java-util-concurrent-DelayQueue-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.DelayQueue-method-toArray' class='name expandable'>toArray</a>( <span class='pre'>a</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the...</div><div class='long'><p>Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.</p>\n\n<p> <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.</p>\n\n<p> <p>Like the <a href=\"#!/api/java.util.concurrent.DelayQueue-method-toArray\" rel=\"java.util.concurrent.DelayQueue-method-toArray\" class=\"docClass\">toArray</a>() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.</p>\n\n<p> <p>The following code can be used to dump a delay queue into a newly\n allocated array of {@code Delayed}:</p>\n\n<p> <pre> {@code Delayed[] a = q.toArray(new Delayed[0]);}</pre></p>\n\n<p> Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an array containing all of the elements in this queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified array is null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});