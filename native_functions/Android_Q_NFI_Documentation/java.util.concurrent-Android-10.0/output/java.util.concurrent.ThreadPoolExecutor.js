Ext.data.JsonP.java_util_concurrent_ThreadPoolExecutor({"tagname":"class","name":"java.util.concurrent.ThreadPoolExecutor","autodetected":{},"files":[{"filename":"ThreadPoolExecutor.js","href":"ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor"}],"extends":"java.util.concurrent.AbstractExecutorService","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"allowCoreThreadTimeOut","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-allowCoreThreadTimeOut","meta":{}},{"name":"allowsCoreThreadTimeOut","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-allowsCoreThreadTimeOut","meta":{}},{"name":"awaitTermination","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-awaitTermination","meta":{}},{"name":"execute","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-execute","meta":{}},{"name":"getActiveCount","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getActiveCount","meta":{}},{"name":"getCompletedTaskCount","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getCompletedTaskCount","meta":{}},{"name":"getCorePoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getCorePoolSize","meta":{}},{"name":"getKeepAliveTime","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getKeepAliveTime","meta":{}},{"name":"getLargestPoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getLargestPoolSize","meta":{}},{"name":"getMaximumPoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getMaximumPoolSize","meta":{}},{"name":"getPoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getPoolSize","meta":{}},{"name":"getQueue","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getQueue","meta":{}},{"name":"getRejectedExecutionHandler","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getRejectedExecutionHandler","meta":{}},{"name":"getTaskCount","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getTaskCount","meta":{}},{"name":"getThreadFactory","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-getThreadFactory","meta":{}},{"name":"invokeAll","tagname":"method","owner":"java.util.concurrent.AbstractExecutorService","id":"method-invokeAll","meta":{}},{"name":"invokeAny","tagname":"method","owner":"java.util.concurrent.AbstractExecutorService","id":"method-invokeAny","meta":{}},{"name":"isShutdown","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-isShutdown","meta":{}},{"name":"isTerminated","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-isTerminated","meta":{}},{"name":"isTerminating","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-isTerminating","meta":{}},{"name":"prestartAllCoreThreads","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-prestartAllCoreThreads","meta":{}},{"name":"prestartCoreThread","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-prestartCoreThread","meta":{}},{"name":"purge","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-purge","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-remove","meta":{}},{"name":"setCorePoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setCorePoolSize","meta":{}},{"name":"setKeepAliveTime","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setKeepAliveTime","meta":{}},{"name":"setMaximumPoolSize","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setMaximumPoolSize","meta":{}},{"name":"setRejectedExecutionHandler","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setRejectedExecutionHandler","meta":{}},{"name":"setThreadFactory","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-setThreadFactory","meta":{}},{"name":"shutdown","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-shutdown","meta":{}},{"name":"shutdownNow","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-shutdownNow","meta":{}},{"name":"submit","tagname":"method","owner":"java.util.concurrent.AbstractExecutorService","id":"method-submit","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.ThreadPoolExecutor","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ThreadPoolExecutor","short_doc":"An java.util.concurrent.ExecutorService that executes each submitted task using\n one of possibly several pooled threa...","classIcon":"icon-class","superclasses":["java.lang.Object","java.util.concurrent.AbstractExecutorService"],"subclasses":["java.util.concurrent.ScheduledThreadPoolExecutor"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='docClass'>java.util.concurrent.AbstractExecutorService</a><div class='subclass '><strong>java.util.concurrent.ThreadPoolExecutor</strong></div></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.util.concurrent.ScheduledThreadPoolExecutor' rel='java.util.concurrent.ScheduledThreadPoolExecutor' class='docClass'>java.util.concurrent.ScheduledThreadPoolExecutor</a></div><h4>Files</h4><div class='dependency'><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor' target='_blank'>ThreadPoolExecutor.js</a></div></pre><div class='doc-contents'><p>An <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a> that executes each submitted task using\n one of possibly several pooled threads, normally configured\n using <a href=\"#!/api/java.util.concurrent.Executors\" rel=\"java.util.concurrent.Executors\" class=\"docClass\">java.util.concurrent.Executors</a> factory methods.</p>\n\n<p> <p>Thread pools address two different problems: they usually\n provide improved performance when executing large numbers of\n asynchronous tasks, due to reduced per-task invocation overhead,\n and they provide a means of bounding and managing the resources,\n including threads, consumed when executing a collection of tasks.\n Each {@code ThreadPoolExecutor} also maintains some basic\n statistics, such as the number of completed tasks.</p>\n\n<p> <p>To be useful across a wide range of contexts, this class\n provides many adjustable parameters and extensibility\n hooks. However, programmers are urged to use the more convenient\n <a href=\"#!/api/java.util.concurrent.Executors\" rel=\"java.util.concurrent.Executors\" class=\"docClass\">java.util.concurrent.Executors</a> factory methods <a href=\"#!/api/java.util.concurrent.Executors-method-newCachedThreadPool\" rel=\"java.util.concurrent.Executors-method-newCachedThreadPool\" class=\"docClass\">java.util.concurrent.Executors.newCachedThreadPool</a> (unbounded thread pool, with\n automatic thread reclamation), <a href=\"#!/api/java.util.concurrent.Executors-method-newFixedThreadPool\" rel=\"java.util.concurrent.Executors-method-newFixedThreadPool\" class=\"docClass\">java.util.concurrent.Executors.newFixedThreadPool</a>\n (fixed size thread pool) and <a href=\"#!/api/java.util.concurrent.Executors-method-newSingleThreadExecutor\" rel=\"java.util.concurrent.Executors-method-newSingleThreadExecutor\" class=\"docClass\">java.util.concurrent.Executors.newSingleThreadExecutor</a> (single background thread), that\n preconfigure settings for the most common usage\n scenarios. Otherwise, use the following guide when manually\n configuring and tuning this class:</p>\n\n<p> <dl></dl></p>\n\n<p> <dt>Core and maximum pool sizes</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n A {@code ThreadPoolExecutor} will automatically adjust the\n pool size (see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getPoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getPoolSize\" class=\"docClass\">getPoolSize</a>)\n according to the bounds set by\n corePoolSize (see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" class=\"docClass\">getCorePoolSize</a>) and\n maximumPoolSize (see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getMaximumPoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getMaximumPoolSize\" class=\"docClass\">getMaximumPoolSize</a>).</dd></p>\n\n<p> When a new task is submitted in method <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-execute\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-execute\" class=\"docClass\">execute</a>(Runnable),\n and fewer than corePoolSize threads are running, a new thread is\n created to handle the request, even if other worker threads are\n idle.  If there are more than corePoolSize but less than\n maximumPoolSize threads running, a new thread will be created only\n if the queue is full.  By setting corePoolSize and maximumPoolSize\n the same, you create a fixed-size thread pool. By setting\n maximumPoolSize to an essentially unbounded value such as {@code\n Integer.MAX_VALUE}, you allow the pool to accommodate an arbitrary\n number of concurrent tasks. Most typically, core and maximum pool\n sizes are set only upon construction, but they may also be changed\n dynamically using <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setCorePoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setCorePoolSize\" class=\"docClass\">setCorePoolSize</a> and <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setMaximumPoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setMaximumPoolSize\" class=\"docClass\">setMaximumPoolSize</a>. </p>\n\n<p> <dt>On-demand construction</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n By default, even core threads are initially created and\n started only when new tasks arrive, but this can be overridden\n dynamically using method <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-prestartCoreThread\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-prestartCoreThread\" class=\"docClass\">prestartCoreThread</a> or <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-prestartAllCoreThreads\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-prestartAllCoreThreads\" class=\"docClass\">prestartAllCoreThreads</a>.  You probably want to prestart threads if\n you construct the pool with a non-empty queue. </dd></p>\n\n<p> <dt>Creating new threads</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n New threads are created using a <a href=\"#!/api/java.util.concurrent.ThreadFactory\" rel=\"java.util.concurrent.ThreadFactory\" class=\"docClass\">java.util.concurrent.ThreadFactory</a>.  If not\n otherwise specified, a <a href=\"#!/api/java.util.concurrent.Executors-method-defaultThreadFactory\" rel=\"java.util.concurrent.Executors-method-defaultThreadFactory\" class=\"docClass\">java.util.concurrent.Executors.defaultThreadFactory</a> is\n used, that creates threads to all be in the same ThreadGroup and with the same {@code NORM_PRIORITY} priority and\n non-daemon status. By supplying a different ThreadFactory, you can\n alter the thread's name, thread group, priority, daemon status,\n etc. If a {@code ThreadFactory} fails to create a thread when asked\n by returning null from {@code newThread}, the executor will\n continue, but might not be able to execute any tasks. Threads\n should possess the \"modifyThread\" {@code RuntimePermission}. If\n worker threads or other threads using the pool do not possess this\n permission, service may be degraded: configuration changes may not\n take effect in a timely manner, and a shutdown pool may remain in a\n state in which termination is possible but not completed.</dd></p>\n\n<p> <dt>Keep-alive times</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n If the pool currently has more than corePoolSize threads,\n excess threads will be terminated if they have been idle for more\n than the keepAliveTime (see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getKeepAliveTime\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getKeepAliveTime\" class=\"docClass\">getKeepAliveTime</a>(TimeUnit)).\n This provides a means of reducing resource consumption when the\n pool is not being actively used. If the pool becomes more active\n later, new threads will be constructed. This parameter can also be\n changed dynamically using method java.util.concurrent.TimeUnit).  Using a value of {@code Long.MAX_VALUE} <a href=\"#!/api/java.util.concurrent.TimeUnit-property-NANOSECONDS\" rel=\"java.util.concurrent.TimeUnit-property-NANOSECONDS\" class=\"docClass\">java.util.concurrent.TimeUnit.NANOSECONDS</a> effectively disables idle threads from ever\n terminating prior to shut down. By default, the keep-alive policy\n applies only when there are more than corePoolSize threads, but\n method <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowCoreThreadTimeOut\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-allowCoreThreadTimeOut\" class=\"docClass\">allowCoreThreadTimeOut</a>(boolean) can be used to\n apply this time-out policy to core threads as well, so long as the\n keepAliveTime value is non-zero. </dd></p>\n\n<p> <dt>Queuing</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n Any <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a> may be used to transfer and hold\n submitted tasks.  The use of this queue interacts with pool sizing:</dd></p>\n\n<p> <ul></ul></p>\n\n<p> <li>If fewer than corePoolSize threads are running, the Executor\n always prefers adding a new thread\n rather than queuing.</li></p>\n\n<p> <li>If corePoolSize or more threads are running, the Executor\n always prefers queuing a request rather than adding a new\n thread.</li></p>\n\n<p> <li>If a request cannot be queued, a new thread is created unless\n this would exceed maximumPoolSize, in which case, the task will be\n rejected.</li></p>\n\n<p> </p>\n\n<p> There are three general strategies for queuing:\n <ol></ol></p>\n\n<p> <li><em> Direct handoffs.</em> A good default choice for a work\n queue is a <a href=\"#!/api/java.util.concurrent.SynchronousQueue\" rel=\"java.util.concurrent.SynchronousQueue\" class=\"docClass\">java.util.concurrent.SynchronousQueue</a> that hands off tasks to threads\n without otherwise holding them. Here, an attempt to queue a task\n will fail if no threads are immediately available to run it, so a\n new thread will be constructed. This policy avoids lockups when\n handling sets of requests that might have internal dependencies.\n Direct handoffs generally require unbounded maximumPoolSizes to\n avoid rejection of new submitted tasks. This in turn admits the\n possibility of unbounded thread growth when commands continue to\n arrive on average faster than they can be processed.</li></p>\n\n<p> <li><em> Unbounded queues.</em> Using an unbounded queue (for\n example a <a href=\"#!/api/java.util.concurrent.LinkedBlockingQueue\" rel=\"java.util.concurrent.LinkedBlockingQueue\" class=\"docClass\">java.util.concurrent.LinkedBlockingQueue</a> without a predefined\n capacity) will cause new tasks to wait in the queue when all\n corePoolSize threads are busy. Thus, no more than corePoolSize\n threads will ever be created. (And the value of the maximumPoolSize\n therefore doesn't have any effect.)  This may be appropriate when\n each task is completely independent of others, so tasks cannot\n affect each others execution; for example, in a web page server.\n While this style of queuing can be useful in smoothing out\n transient bursts of requests, it admits the possibility of\n unbounded work queue growth when commands continue to arrive on\n average faster than they can be processed.</li></p>\n\n<p> <li><em>Bounded queues.</em> A bounded queue (for example, an\n <a href=\"#!/api/java.util.concurrent.ArrayBlockingQueue\" rel=\"java.util.concurrent.ArrayBlockingQueue\" class=\"docClass\">java.util.concurrent.ArrayBlockingQueue</a>) helps prevent resource exhaustion when\n used with finite maximumPoolSizes, but can be more difficult to\n tune and control.  Queue sizes and maximum pool sizes may be traded\n off for each other: Using large queues and small pools minimizes\n CPU usage, OS resources, and context-switching overhead, but can\n lead to artificially low throughput.  If tasks frequently block (for\n example if they are I/O bound), a system may be able to schedule\n time for more threads than you otherwise allow. Use of small queues\n generally requires larger pool sizes, which keeps CPUs busier but\n may encounter unacceptable scheduling overhead, which also\n decreases throughput.</li></p>\n\n<p> </p>\n\n<p> </p>\n\n<p> <dt>Rejected tasks</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n New tasks submitted in method <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-execute\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-execute\" class=\"docClass\">execute</a>(Runnable) will be\n <em>rejected</em> when the Executor has been shut down, and also when\n the Executor uses finite bounds for both maximum threads and work queue\n capacity, and is saturated.  In either case, the {@code execute} method\n invokes the ThreadPoolExecutor)\n method of its <a href=\"#!/api/java.util.concurrent.RejectedExecutionHandler\" rel=\"java.util.concurrent.RejectedExecutionHandler\" class=\"docClass\">java.util.concurrent.RejectedExecutionHandler</a>.  Four predefined handler\n policies are provided:</dd></p>\n\n<p> <ol></ol></p>\n\n<p> <li>In the default <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor.AbortPolicy\" rel=\"java.util.concurrent.ThreadPoolExecutor.AbortPolicy\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor.AbortPolicy</a>, the\n handler throws a runtime <a href=\"#!/api/java.util.concurrent.RejectedExecutionException\" rel=\"java.util.concurrent.RejectedExecutionException\" class=\"docClass\">java.util.concurrent.RejectedExecutionException</a> upon\n rejection.</li></p>\n\n<p> <li>In <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy\" rel=\"java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy</a>, the thread\n that invokes {@code execute} itself runs the task. This provides a\n simple feedback control mechanism that will slow down the rate that\n new tasks are submitted.</li></p>\n\n<p> <li>In <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor.DiscardPolicy\" rel=\"java.util.concurrent.ThreadPoolExecutor.DiscardPolicy\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor.DiscardPolicy</a>, a task that\n cannot be executed is simply dropped.</li></p>\n\n<p> <li>In <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy\" rel=\"java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy\" class=\"docClass\">java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy</a>, if the\n executor is not shut down, the task at the head of the work queue\n is dropped, and then execution is retried (which can fail again,\n causing this to be repeated.)</li></p>\n\n<p> </p>\n\n<p> It is possible to define and use other kinds of <a href=\"#!/api/java.util.concurrent.RejectedExecutionHandler\" rel=\"java.util.concurrent.RejectedExecutionHandler\" class=\"docClass\">java.util.concurrent.RejectedExecutionHandler</a> classes. Doing so requires some care\n especially when policies are designed to work only under particular\n capacity or queuing policies. </p>\n\n<p> <dt>Hook methods</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n This class provides {@code protected} overridable\n Runnable) and\n Throwable) methods that are called\n before and after execution of each task.  These can be used to\n manipulate the execution environment; for example, reinitializing\n ThreadLocals, gathering statistics, or adding log entries.\n Additionally, method terminated can be overridden to perform\n any special processing that needs to be done once the Executor has\n fully terminated.</dd></p>\n\n<p> <p>If hook, callback, or BlockingQueue methods throw exceptions,\n internal worker threads may in turn fail, abruptly terminate, and\n possibly be replaced.</p>\n\n<p> <dt>Queue maintenance</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n Method <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getQueue\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getQueue\" class=\"docClass\">getQueue</a>() allows access to the work queue\n for purposes of monitoring and debugging.  Use of this method for\n any other purpose is strongly discouraged.  Two supplied methods,\n <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-remove\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-remove\" class=\"docClass\">remove</a>(Runnable) and <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-purge\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-purge\" class=\"docClass\">purge</a> are available to\n assist in storage reclamation when large numbers of queued tasks\n become cancelled.</dd></p>\n\n<p> <dt>Finalization</dt></p>\n\n<p> <dd style=\"font-family:'DejaVu Sans', Arial, Helvetica, sans-serif\">\n A pool that is no longer referenced in a program <em>AND</em>\n has no remaining threads will be {@code shutdown} automatically. If\n you would like to ensure that unreferenced pools are reclaimed even\n if users forget to call <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdown\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-shutdown\" class=\"docClass\">shutdown</a>, then you must arrange\n that unused threads eventually die, by setting appropriate\n keep-alive times, using a lower bound of zero core threads and/or\n setting <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowCoreThreadTimeOut\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-allowCoreThreadTimeOut\" class=\"docClass\">allowCoreThreadTimeOut</a>(boolean).  </dd></p>\n\n<p> </p>\n\n<p> <p><b>Extension example</b>. Most extensions of this class\n override one or more of the protected hook methods. For example,\n here is a subclass that adds a simple pause/resume feature:</p>\n\n<p> <pre> {@code\n class PausableThreadPoolExecutor extends ThreadPoolExecutor {\n   private boolean isPaused;\n   private ReentrantLock pauseLock = new ReentrantLock();\n   private Condition unpaused = pauseLock.newCondition();</pre></p>\n\n<p>   public PausableThreadPoolExecutor(...) { super(...); }</p>\n\n<p>   protected void beforeExecute(Thread t, Runnable r) {\n     super.beforeExecute(t, r);\n     pauseLock.lock();\n     try {\n       while (isPaused) unpaused.await();\n     } catch (InterruptedException ie) {\n       t.interrupt();\n     } finally {\n       pauseLock.unlock();\n     }\n   }</p>\n\n<p>   public void pause() {\n     pauseLock.lock();\n     try {\n       isPaused = true;\n     } finally {\n       pauseLock.unlock();\n     }\n   }</p>\n\n<p>   public void resume() {\n     pauseLock.lock();\n     try {\n       isPaused = false;\n       unpaused.signalAll();\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n }}</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-allowCoreThreadTimeOut' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-allowCoreThreadTimeOut' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowCoreThreadTimeOut' class='name expandable'>allowCoreThreadTimeOut</a>( <span class='pre'>value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the policy governing whether core threads may time out and\n terminate if no tasks arrive within the keep-alive t...</div><div class='long'><p>Sets the policy governing whether core threads may time out and\n terminate if no tasks arrive within the keep-alive time, being\n replaced if needed when new tasks arrive. When false, core\n threads are never terminated due to lack of incoming\n tasks. When true, the same keep-alive policy applying to\n non-core threads applies also to core threads. To avoid\n continual thread replacement, the keep-alive time must be\n greater than zero when setting {@code true}. This method\n should in general be called before the pool is actively used.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Boolean<div class='sub-desc'><p>{@code true} if should time out, else {@code false}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if value is {@code true}\n         and the current keep-alive time is not greater than zero</p>\n</div></li></ul></div></div></div><div id='method-allowsCoreThreadTimeOut' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-allowsCoreThreadTimeOut' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut' class='name expandable'>allowsCoreThreadTimeOut</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this pool allows core threads to time out and\n terminate if no tasks arrive within the keepAlive time...</div><div class='long'><p>Returns true if this pool allows core threads to time out and\n terminate if no tasks arrive within the keepAlive time, being\n replaced if needed when new tasks arrive. When true, the same\n keep-alive policy applying to non-core threads applies also to\n core threads. When false (the default), core threads are never\n terminated due to lack of incoming tasks.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if core threads are allowed to time out,\n         else {@code false}</p>\n</div></li></ul></div></div></div><div id='method-awaitTermination' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-awaitTermination' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-awaitTermination' class='name expandable'>awaitTermination</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-execute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-execute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-execute' class='name expandable'>execute</a>( <span class='pre'>command</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Executes the given task sometime in the future. ...</div><div class='long'><p>Executes the given task sometime in the future.  The task\n may execute in a new thread or in an existing pooled thread.</p>\n\n<p> If the task cannot be submitted for execution, either because this\n executor has been shutdown or because its capacity has been reached,\n the task is handled by the current {@code RejectedExecutionHandler}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>command</span> : Object {Runnable}<div class='sub-desc'><p>the task to execute</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException at discretion of\n         {@code RejectedExecutionHandler}, if the task\n         cannot be accepted for execution</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code command} is null</p>\n</div></li></ul></div></div></div><div id='method-getActiveCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getActiveCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getActiveCount' class='name expandable'>getActiveCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the approximate number of threads that are actively\n executing tasks. ...</div><div class='long'><p>Returns the approximate number of threads that are actively\n executing tasks.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of threads</p>\n</div></li></ul></div></div></div><div id='method-getCompletedTaskCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getCompletedTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCompletedTaskCount' class='name expandable'>getCompletedTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the approximate total number of tasks that have\n completed execution. ...</div><div class='long'><p>Returns the approximate total number of tasks that have\n completed execution. Because the states of tasks and threads\n may change dynamically during computation, the returned value\n is only an approximation, but one that does not ever decrease\n across successive calls.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of tasks</p>\n</div></li></ul></div></div></div><div id='method-getCorePoolSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getCorePoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize' class='name expandable'>getCorePoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the core number of threads. ...</div><div class='long'><p>Returns the core number of threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the core number of threads\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setCorePoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setCorePoolSize\" class=\"docClass\">setCorePoolSize</a></p>\n</div></li></ul></div></div></div><div id='method-getKeepAliveTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getKeepAliveTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getKeepAliveTime' class='name expandable'>getKeepAliveTime</a>( <span class='pre'>unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated. ...</div><div class='long'><p>Returns the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated.\n Threads that wait this amount of time without processing a\n task will be terminated if there are more than the core\n number of threads currently in the pool, or if this pool\n {@linkplain <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut\" class=\"docClass\">allowsCoreThreadTimeOut</a>() allows core thread timeout}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the desired time unit of the result</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the time limit\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setKeepAliveTime\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setKeepAliveTime\" class=\"docClass\">setKeepAliveTime</a>(long, TimeUnit)</p>\n</div></li></ul></div></div></div><div id='method-getLargestPoolSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getLargestPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getLargestPoolSize' class='name expandable'>getLargestPoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the largest number of threads that have ever\n simultaneously been in the pool. ...</div><div class='long'><p>Returns the largest number of threads that have ever\n simultaneously been in the pool.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of threads</p>\n</div></li></ul></div></div></div><div id='method-getMaximumPoolSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getMaximumPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getMaximumPoolSize' class='name expandable'>getMaximumPoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the maximum allowed number of threads. ...</div><div class='long'><p>Returns the maximum allowed number of threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the maximum allowed number of threads\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setMaximumPoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setMaximumPoolSize\" class=\"docClass\">setMaximumPoolSize</a></p>\n</div></li></ul></div></div></div><div id='method-getPoolSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getPoolSize' class='name expandable'>getPoolSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current number of threads in the pool. ...</div><div class='long'><p>Returns the current number of threads in the pool.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of threads</p>\n</div></li></ul></div></div></div><div id='method-getQueue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getQueue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getQueue' class='name expandable'>getQueue</a>( <span class='pre'></span> ) : Object {java.util.concurrent.BlockingQueue}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the task queue used by this executor. ...</div><div class='long'><p>Returns the task queue used by this executor. Access to the\n task queue is intended primarily for debugging and monitoring.\n This queue may be in active use.  Retrieving the task queue\n does not prevent queued tasks from executing.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.BlockingQueue}</span><div class='sub-desc'><p>the task queue</p>\n</div></li></ul></div></div></div><div id='method-getRejectedExecutionHandler' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getRejectedExecutionHandler' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getRejectedExecutionHandler' class='name expandable'>getRejectedExecutionHandler</a>( <span class='pre'></span> ) : Object {java.util.concurrent.RejectedExecutionHandler}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current handler for unexecutable tasks. ...</div><div class='long'><p>Returns the current handler for unexecutable tasks.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.RejectedExecutionHandler}</span><div class='sub-desc'><p>the current handler\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setRejectedExecutionHandler\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setRejectedExecutionHandler\" class=\"docClass\">setRejectedExecutionHandler</a>(RejectedExecutionHandler)</p>\n</div></li></ul></div></div></div><div id='method-getTaskCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getTaskCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getTaskCount' class='name expandable'>getTaskCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the approximate total number of tasks that have ever been\n scheduled for execution. ...</div><div class='long'><p>Returns the approximate total number of tasks that have ever been\n scheduled for execution. Because the states of tasks and\n threads may change dynamically during computation, the returned\n value is only an approximation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of tasks</p>\n</div></li></ul></div></div></div><div id='method-getThreadFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-getThreadFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-getThreadFactory' class='name expandable'>getThreadFactory</a>( <span class='pre'></span> ) : Object {java.util.concurrent.ThreadFactory}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the thread factory used to create new threads. ...</div><div class='long'><p>Returns the thread factory used to create new threads.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ThreadFactory}</span><div class='sub-desc'><p>the current thread factory\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-setThreadFactory\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-setThreadFactory\" class=\"docClass\">setThreadFactory</a>(ThreadFactory)</p>\n</div></li></ul></div></div></div><div id='method-invokeAll' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='defined-in docClass'>java.util.concurrent.AbstractExecutorService</a><br/><a href='source/AbstractExecutorService.html#java-util-concurrent-AbstractExecutorService-method-invokeAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.AbstractExecutorService-method-invokeAll' class='name expandable'>invokeAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-invokeAny' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='defined-in docClass'>java.util.concurrent.AbstractExecutorService</a><br/><a href='source/AbstractExecutorService.html#java-util-concurrent-AbstractExecutorService-method-invokeAny' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.AbstractExecutorService-method-invokeAny' class='name expandable'>invokeAny</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isShutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-isShutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-isShutdown' class='name expandable'>isShutdown</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isTerminated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-isTerminated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-isTerminated' class='name expandable'>isTerminated</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isTerminating' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-isTerminating' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-isTerminating' class='name expandable'>isTerminating</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this executor is in the process of terminating\n after shutdown or shutdownNow but has not\n completely...</div><div class='long'><p>Returns true if this executor is in the process of terminating\n after <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdown\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-shutdown\" class=\"docClass\">shutdown</a> or <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdownNow\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-shutdownNow\" class=\"docClass\">shutdownNow</a> but has not\n completely terminated.  This method may be useful for\n debugging. A return of {@code true} reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, causing this executor not\n to properly terminate.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if terminating but not yet terminated</p>\n</div></li></ul></div></div></div><div id='method-prestartAllCoreThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-prestartAllCoreThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-prestartAllCoreThreads' class='name expandable'>prestartAllCoreThreads</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts all core threads, causing them to idly wait for work. ...</div><div class='long'><p>Starts all core threads, causing them to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of threads started</p>\n</div></li></ul></div></div></div><div id='method-prestartCoreThread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-prestartCoreThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-prestartCoreThread' class='name expandable'>prestartCoreThread</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts a core thread, causing it to idly wait for work. ...</div><div class='long'><p>Starts a core thread, causing it to idly wait for work. This\n overrides the default policy of starting core threads only when\n new tasks are executed. This method will return {@code false}\n if all core threads have already been started.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if a thread was started</p>\n</div></li></ul></div></div></div><div id='method-purge' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-purge' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-purge' class='name expandable'>purge</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tries to remove from the work queue all java.util.concurrent.Future\n tasks that have been cancelled. ...</div><div class='long'><p>Tries to remove from the work queue all <a href=\"#!/api/java.util.concurrent.Future\" rel=\"java.util.concurrent.Future\" class=\"docClass\">java.util.concurrent.Future</a>\n tasks that have been cancelled. This method can be useful as a\n storage reclamation operation, that has no other impact on\n functionality. Cancelled tasks are never executed, but may\n accumulate in work queues until worker threads can actively\n remove them. Invoking this method instead tries to remove them now.\n However, this method may fail to remove tasks in\n the presence of interference by other threads.</p>\n</div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-remove' class='name expandable'>remove</a>( <span class='pre'>task</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes this task from the executor's internal queue if it is\n present, thus causing it not to be run if it has not a...</div><div class='long'><p>Removes this task from the executor's internal queue if it is\n present, thus causing it not to be run if it has not already\n started.</p>\n\n<p> <p>This method may be useful as one part of a cancellation\n scheme.  It may fail to remove tasks that have been converted\n into other forms before being placed on the internal queue.\n For example, a task entered using {@code submit} might be\n converted into a form that maintains {@code Future} status.\n However, in such cases, method <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-purge\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-purge\" class=\"docClass\">purge</a> may be used to\n remove those Futures that have been cancelled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>task</span> : Object {Runnable}<div class='sub-desc'><p>the task to remove</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the task was removed</p>\n</div></li></ul></div></div></div><div id='method-setCorePoolSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setCorePoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setCorePoolSize' class='name expandable'>setCorePoolSize</a>( <span class='pre'>corePoolSize</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the core number of threads. ...</div><div class='long'><p>Sets the core number of threads.  This overrides any value set\n in the constructor.  If the new value is smaller than the\n current value, excess existing threads will be terminated when\n they next become idle.  If larger, new threads will, if needed,\n be started to execute any queued tasks.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>corePoolSize</span> : Number<div class='sub-desc'><p>the new core size</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code corePoolSize &lt; 0}\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" class=\"docClass\">getCorePoolSize</a></p>\n</div></li></ul></div></div></div><div id='method-setKeepAliveTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setKeepAliveTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setKeepAliveTime' class='name expandable'>setKeepAliveTime</a>( <span class='pre'>time, unit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated. ...</div><div class='long'><p>Sets the thread keep-alive time, which is the amount of time\n that threads may remain idle before being terminated.\n Threads that wait this amount of time without processing a\n task will be terminated if there are more than the core\n number of threads currently in the pool, or if this pool\n {@linkplain <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-allowsCoreThreadTimeOut\" class=\"docClass\">allowsCoreThreadTimeOut</a>() allows core thread timeout}.\n This overrides any value set in the constructor.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>time</span> : Number<div class='sub-desc'><p>the time to wait.  A time value of zero will cause\n        excess threads to terminate immediately after executing tasks.</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the {@code time} argument</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code time} less than zero or\n         if {@code time} is zero and {@code allowsCoreThreadTimeOut}\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getKeepAliveTime\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getKeepAliveTime\" class=\"docClass\">getKeepAliveTime</a>(TimeUnit)</p>\n</div></li></ul></div></div></div><div id='method-setMaximumPoolSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setMaximumPoolSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setMaximumPoolSize' class='name expandable'>setMaximumPoolSize</a>( <span class='pre'>maximumPoolSize</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the maximum allowed number of threads. ...</div><div class='long'><p>Sets the maximum allowed number of threads. This overrides any\n value set in the constructor. If the new value is smaller than\n the current value, excess existing threads will be\n terminated when they next become idle.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>maximumPoolSize</span> : Number<div class='sub-desc'><p>the new maximum</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the new maximum is\n         less than or equal to zero, or\n         less than the {@linkplain <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getCorePoolSize\" class=\"docClass\">getCorePoolSize</a> core pool size}\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getMaximumPoolSize\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getMaximumPoolSize\" class=\"docClass\">getMaximumPoolSize</a></p>\n</div></li></ul></div></div></div><div id='method-setRejectedExecutionHandler' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setRejectedExecutionHandler' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setRejectedExecutionHandler' class='name expandable'>setRejectedExecutionHandler</a>( <span class='pre'>handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets a new handler for unexecutable tasks. ...</div><div class='long'><p>Sets a new handler for unexecutable tasks.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>handler</span> : Object {RejectedExecutionHandler}<div class='sub-desc'><p>the new handler</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if handler is null\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getRejectedExecutionHandler\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getRejectedExecutionHandler\" class=\"docClass\">getRejectedExecutionHandler</a></p>\n</div></li></ul></div></div></div><div id='method-setThreadFactory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-setThreadFactory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-setThreadFactory' class='name expandable'>setThreadFactory</a>( <span class='pre'>threadFactory</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the thread factory used to create new threads. ...</div><div class='long'><p>Sets the thread factory used to create new threads.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>threadFactory</span> : Object {ThreadFactory}<div class='sub-desc'><p>the new thread factory</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if threadFactory is null\n@see <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-getThreadFactory\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-getThreadFactory\" class=\"docClass\">getThreadFactory</a></p>\n</div></li></ul></div></div></div><div id='method-shutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-shutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdown' class='name expandable'>shutdown</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted. ...</div><div class='long'><p>Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.</p>\n\n<p> <p>This method does not wait for previously submitted tasks to\n complete execution.  Use <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-awaitTermination\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-awaitTermination\" class=\"docClass\">awaitTermination</a>\n to do that.</p>\n</div></div></div><div id='method-shutdownNow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-shutdownNow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-shutdownNow' class='name expandable'>shutdownNow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the task...</div><div class='long'><p>Attempts to stop all actively executing tasks, halts the\n processing of waiting tasks, and returns a list of the tasks\n that were awaiting execution. These tasks are drained (removed)\n from the task queue upon return from this method.</p>\n\n<p> <p>This method does not wait for actively executing tasks to\n terminate.  Use <a href=\"#!/api/java.util.concurrent.ThreadPoolExecutor-method-awaitTermination\" rel=\"java.util.concurrent.ThreadPoolExecutor-method-awaitTermination\" class=\"docClass\">awaitTermination</a> to\n do that.</p>\n\n<p> <p>There are no guarantees beyond best-effort attempts to stop\n processing actively executing tasks.  This implementation\n interrupts tasks via Thread.interrupt; any task that\n fails to respond to interrupts may never terminate.</p>\n</div></div></div><div id='method-submit' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.concurrent.AbstractExecutorService' rel='java.util.concurrent.AbstractExecutorService' class='defined-in docClass'>java.util.concurrent.AbstractExecutorService</a><br/><a href='source/AbstractExecutorService.html#java-util-concurrent-AbstractExecutorService-method-submit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.AbstractExecutorService-method-submit' class='name expandable'>submit</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException       {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadPoolExecutor'>java.util.concurrent.ThreadPoolExecutor</span><br/><a href='source/ThreadPoolExecutor.html#java-util-concurrent-ThreadPoolExecutor-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadPoolExecutor-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this pool, as well as its state,\n including indications of run state and estimated worke...</div><div class='long'><p>Returns a string identifying this pool, as well as its state,\n including indications of run state and estimated worker and\n task counts.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this pool, as well as its state</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});