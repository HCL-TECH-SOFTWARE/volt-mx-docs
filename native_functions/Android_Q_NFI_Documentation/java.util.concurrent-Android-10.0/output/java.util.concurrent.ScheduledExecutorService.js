Ext.data.JsonP.java_util_concurrent_ScheduledExecutorService({"tagname":"class","name":"java.util.concurrent.ScheduledExecutorService","autodetected":{},"files":[{"filename":"ScheduledExecutorService.js","href":"ScheduledExecutorService.html#java-util-concurrent-ScheduledExecutorService"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"schedule","tagname":"method","owner":"java.util.concurrent.ScheduledExecutorService","id":"method-schedule","meta":{}},{"name":"scheduleAtFixedRate","tagname":"method","owner":"java.util.concurrent.ScheduledExecutorService","id":"method-scheduleAtFixedRate","meta":{}},{"name":"scheduleWithFixedDelay","tagname":"method","owner":"java.util.concurrent.ScheduledExecutorService","id":"method-scheduleWithFixedDelay","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ScheduledExecutorService","short_doc":"implements java.util.concurrent.ExecutorService\n\n An java.util.concurrent.ExecutorService that can schedule commands ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ScheduledExecutorService.html#java-util-concurrent-ScheduledExecutorService' target='_blank'>ScheduledExecutorService.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a></p>\n\n<p> An <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a> that can schedule commands to run after a given\n delay, or to execute periodically.</p>\n\n<p> <p>The {@code schedule} methods create tasks with various delays\n and return a task object that can be used to cancel or check\n execution. The {@code scheduleAtFixedRate} and\n {@code scheduleWithFixedDelay} methods create and execute tasks\n that run periodically until cancelled.</p>\n\n<p> <p>Commands submitted using the java.util.concurrent.Executor.execute(Runnable)\n and <a href=\"#!/api/java.util.concurrent.ExecutorService\" rel=\"java.util.concurrent.ExecutorService\" class=\"docClass\">java.util.concurrent.ExecutorService</a> {@code submit} methods are scheduled\n with a requested delay of zero. Zero and negative delays (but not\n periods) are also allowed in {@code schedule} methods, and are\n treated as requests for immediate execution.</p>\n\n<p> <p>All {@code schedule} methods accept <em>relative</em> delays and\n periods as arguments, not absolute times or dates. It is a simple\n matter to transform an absolute time represented as a java.util.Date to the required form. For example, to schedule at\n a certain future {@code date}, you can use: {@code schedule(task,\n date.getTime() - System.currentTimeMillis(),\n TimeUnit.MILLISECONDS)}. Beware however that expiration of a\n relative delay need not coincide with the current {@code Date} at\n which the task is enabled due to network time synchronization\n protocols, clock drift, or other factors.</p>\n\n<p> <p>The <a href=\"#!/api/java.util.concurrent.Executors\" rel=\"java.util.concurrent.Executors\" class=\"docClass\">java.util.concurrent.Executors</a> class provides convenient factory methods for\n the ScheduledExecutorService implementations provided in this package.</p>\n\n<p> <h3>Usage Example</h3></p>\n\n<p> Here is a class with a method that sets up a ScheduledExecutorService\n to beep every ten seconds for an hour:</p>\n\n<p> <pre> {@code\n import static <a href=\"#!/api/java.util.concurrent.TimeUnit\" rel=\"java.util.concurrent.TimeUnit\" class=\"docClass\">java.util.concurrent.TimeUnit</a>.*;\n class BeeperControl {\n   private final ScheduledExecutorService scheduler =\n     Executors.newScheduledThreadPool(1);</pre></p>\n\n<p>   public void beepForAnHour() {\n     final Runnable beeper = new Runnable() {\n       public void run() { System.out.println(\"beep\"); }\n     };\n     final ScheduledFuture&lt;?> beeperHandle =\n       scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);\n     scheduler.schedule(new Runnable() {\n       public void run() { beeperHandle.cancel(true); }\n     }, 60 * 60, SECONDS);\n   }\n }}</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-schedule' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledExecutorService'>java.util.concurrent.ScheduledExecutorService</span><br/><a href='source/ScheduledExecutorService.html#java-util-concurrent-ScheduledExecutorService-method-schedule' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledExecutorService-method-schedule' class='name expandable'>schedule</a>( <span class='pre'>callable, delay, unit, </span> ) : Object {java.util.concurrent.ScheduledFuture}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates and executes a ScheduledFuture that becomes enabled after the\n given delay. ...</div><div class='long'><p>Creates and executes a ScheduledFuture that becomes enabled after the\n given delay.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callable</span> : Object {java.util.concurrent.Callable}<div class='sub-desc'><p>the function to execute</p>\n</div></li><li><span class='pre'>delay</span> : Number<div class='sub-desc'><p>the time from now to delay execution</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the delay parameter</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><V> the type of the callable's result</V></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ScheduledFuture}</span><div class='sub-desc'><p>a ScheduledFuture that can be used to extract result or cancel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if the task cannot be\n         scheduled for execution</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if callable is null</p>\n</div></li></ul></div></div></div><div id='method-scheduleAtFixedRate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledExecutorService'>java.util.concurrent.ScheduledExecutorService</span><br/><a href='source/ScheduledExecutorService.html#java-util-concurrent-ScheduledExecutorService-method-scheduleAtFixedRate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledExecutorService-method-scheduleAtFixedRate' class='name expandable'>scheduleAtFixedRate</a>( <span class='pre'>command, initialDelay, period, unit</span> ) : Object {java.util.concurrent.ScheduledFuture}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently wi...</div><div class='long'><p>Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the given\n period; that is, executions will commence after\n {@code initialDelay}, then {@code initialDelay + period}, then\n {@code initialDelay + 2 * period}, and so on.</p>\n\n<p> <p>The sequence of task executions continues indefinitely until\n one of the following exceptional completions occur:\n <ul>\n <li>The task is {@linkplain <a href=\"#!/api/java.util.concurrent.Future-method-cancel\" rel=\"java.util.concurrent.Future-method-cancel\" class=\"docClass\">java.util.concurrent.Future.cancel</a> explicitly cancelled}\n via the returned future.\n <li>The executor terminates, also resulting in task cancellation.\n <li>An execution of the task throws an exception.  In this case\n calling get on the returned future will\n throw <a href=\"#!/api/java.util.concurrent.ExecutionException\" rel=\"java.util.concurrent.ExecutionException\" class=\"docClass\">java.util.concurrent.ExecutionException</a>.\n </li></li></li></ul>\n Subsequent executions are suppressed.  Subsequent calls to\n <a href=\"#!/api/java.util.concurrent.Future-method-isDone\" rel=\"java.util.concurrent.Future-method-isDone\" class=\"docClass\">isDone()</a> on the returned future will\n return {@code true}.</p>\n\n<p> <p>If any execution of this task takes longer than its period, then\n subsequent executions may start late, but will not concurrently\n execute.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>command</span> : Object {Runnable}<div class='sub-desc'><p>the task to execute</p>\n</div></li><li><span class='pre'>initialDelay</span> : Number<div class='sub-desc'><p>the time to delay first execution</p>\n</div></li><li><span class='pre'>period</span> : Number<div class='sub-desc'><p>the period between successive executions</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the initialDelay and period parameters</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ScheduledFuture}</span><div class='sub-desc'><p>a ScheduledFuture representing pending completion of\n         the series of repeated tasks.  The future's get() method will never return normally,\n         and will throw an exception upon task cancellation or\n         abnormal termination of a task execution.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if the task cannot be\n         scheduled for execution</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if command is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if period less than or equal to zero</p>\n</div></li></ul></div></div></div><div id='method-scheduleWithFixedDelay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ScheduledExecutorService'>java.util.concurrent.ScheduledExecutorService</span><br/><a href='source/ScheduledExecutorService.html#java-util-concurrent-ScheduledExecutorService-method-scheduleWithFixedDelay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ScheduledExecutorService-method-scheduleWithFixedDelay' class='name expandable'>scheduleWithFixedDelay</a>( <span class='pre'>command, initialDelay, delay, unit</span> ) : Object {java.util.concurrent.ScheduledFuture}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently wi...</div><div class='long'><p>Creates and executes a periodic action that becomes enabled first\n after the given initial delay, and subsequently with the\n given delay between the termination of one execution and the\n commencement of the next.</p>\n\n<p> <p>The sequence of task executions continues indefinitely until\n one of the following exceptional completions occur:\n <ul>\n <li>The task is {@linkplain <a href=\"#!/api/java.util.concurrent.Future-method-cancel\" rel=\"java.util.concurrent.Future-method-cancel\" class=\"docClass\">java.util.concurrent.Future.cancel</a> explicitly cancelled}\n via the returned future.\n <li>The executor terminates, also resulting in task cancellation.\n <li>An execution of the task throws an exception.  In this case\n calling get on the returned future will\n throw <a href=\"#!/api/java.util.concurrent.ExecutionException\" rel=\"java.util.concurrent.ExecutionException\" class=\"docClass\">java.util.concurrent.ExecutionException</a>.\n </li></li></li></ul>\n Subsequent executions are suppressed.  Subsequent calls to\n <a href=\"#!/api/java.util.concurrent.Future-method-isDone\" rel=\"java.util.concurrent.Future-method-isDone\" class=\"docClass\">isDone()</a> on the returned future will\n return {@code true}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>command</span> : Object {Runnable}<div class='sub-desc'><p>the task to execute</p>\n</div></li><li><span class='pre'>initialDelay</span> : Number<div class='sub-desc'><p>the time to delay first execution</p>\n</div></li><li><span class='pre'>delay</span> : Number<div class='sub-desc'><p>the delay between the termination of one\n execution and the commencement of the next</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the initialDelay and delay parameters</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ScheduledFuture}</span><div class='sub-desc'><p>a ScheduledFuture representing pending completion of\n         the series of repeated tasks.  The future's get() method will never return normally,\n         and will throw an exception upon task cancellation or\n         abnormal termination of a task execution.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RejectedExecutionException if the task cannot be\n         scheduled for execution</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if command is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if delay less than or equal to zero</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});