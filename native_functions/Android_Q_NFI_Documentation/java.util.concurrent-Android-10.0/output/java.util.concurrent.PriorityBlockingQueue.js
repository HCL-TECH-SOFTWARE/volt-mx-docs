Ext.data.JsonP.java_util_concurrent_PriorityBlockingQueue({"tagname":"class","name":"java.util.concurrent.PriorityBlockingQueue","autodetected":{},"files":[{"filename":"PriorityBlockingQueue.js","href":"PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue"}],"extends":"java.util.AbstractQueue","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><E> the type of elements held in this queue</E></p>\n"}],"members":[{"name":"add","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-add","meta":{}},{"name":"clear","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-clear","meta":{}},{"name":"comparator","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-comparator","meta":{}},{"name":"contains","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-contains","meta":{}},{"name":"drainTo","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-drainTo","meta":{}},{"name":"iterator","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-iterator","meta":{}},{"name":"offer","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-offer","meta":{}},{"name":"peek","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-peek","meta":{}},{"name":"poll","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-poll","meta":{}},{"name":"put","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-put","meta":{}},{"name":"remainingCapacity","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-remainingCapacity","meta":{}},{"name":"remove","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-remove","meta":{}},{"name":"size","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-size","meta":{}},{"name":"spliterator","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-spliterator","meta":{}},{"name":"take","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-take","meta":{}},{"name":"toArray","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-toArray","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.PriorityBlockingQueue","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.PriorityBlockingQueue","short_doc":"implements java.util.concurrent.BlockingQueue\n\n implements java.io.Serializable\n\nAn unbounded {@linkplain java.util.c...","classIcon":"icon-class","superclasses":["java.util.AbstractQueue"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.util.AbstractQueue<div class='subclass '><strong>java.util.concurrent.PriorityBlockingQueue</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue' target='_blank'>PriorityBlockingQueue.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a></p>\n\n<p> implements java.io.Serializable</p>\n\n<p>An unbounded {@linkplain <a href=\"#!/api/java.util.concurrent.BlockingQueue\" rel=\"java.util.concurrent.BlockingQueue\" class=\"docClass\">java.util.concurrent.BlockingQueue</a> blocking queue} that uses\n the same ordering rules as class PriorityQueue and supplies\n blocking retrieval operations.  While this queue is logically\n unbounded, attempted additions may fail due to resource exhaustion\n (causing {@code OutOfMemoryError}). This class does not permit\n {@code null} elements.  A priority queue relying on {@linkplain\n Comparable natural ordering} also does not permit insertion of\n non-comparable objects (doing so results in\n {@code ClassCastException}).</p>\n\n<p> <p>This class and its iterator implement all of the\n <em>optional</em> methods of the Collection and Iterator interfaces.  The Iterator provided in method <a href=\"#!/api/java.util.concurrent.PriorityBlockingQueue-method-iterator\" rel=\"java.util.concurrent.PriorityBlockingQueue-method-iterator\" class=\"docClass\">iterator</a>() is <em>not</em> guaranteed to traverse the elements of\n the PriorityBlockingQueue in any particular order. If you need\n ordered traversal, consider using\n {@code Arrays.sort(pq.toArray())}.  Also, method {@code drainTo}\n can be used to <em>remove</em> some or all elements in priority\n order and place them in another collection.</p>\n\n<p> <p>Operations on this class make no guarantees about the ordering\n of elements with equal priority. If you need to enforce an\n ordering, you can define custom classes or comparators that use a\n secondary key to break ties in primary priority values.  For\n example, here is a class that applies first-in-first-out\n tie-breaking to comparable elements. To use it, you would insert a\n {@code new FIFOEntry(anEntry)} instead of a plain entry object.</p>\n\n<p> <pre> {@code\n class FIFOEntry<E extends Comparable<? super E>>\n     implements Comparable&lt;FIFOEntry<E>> {\n   static final AtomicLong seq = new AtomicLong(0);\n   final long seqNum;\n   final E entry;\n   public FIFOEntry(E entry) {\n     seqNum = seq.getAndIncrement();\n     this.entry = entry;\n   }\n   public E getEntry() { return entry; }\n   public int compareTo(FIFOEntry<E> other) {\n     int res = entry.compareTo(other.entry);\n     if (res == 0 &amp;&amp; other.entry != this.entry)\n       res = (seqNum &lt; other.seqNum ? -1 : 1);\n     return res;\n   }\n }}</E></E></E></pre></p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><E> the type of elements held in this queue</E></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-add' class='name expandable'>add</a>( <span class='pre'>e</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this priority queue. ...</div><div class='long'><p>Inserts the specified element into this priority queue.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by Collection.add)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the specified element cannot be compared\n         with elements currently in the priority queue according to the\n         priority queue's ordering</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-clear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-clear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-clear' class='name expandable'>clear</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically removes all of the elements from this queue. ...</div><div class='long'><p>Atomically removes all of the elements from this queue.\n The queue will be empty after this call returns.</p>\n</div></div></div><div id='method-comparator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-comparator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-comparator' class='name expandable'>comparator</a>( <span class='pre'></span> ) : Object {java.util.Comparator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the comparator used to order the elements in this queue,\n or {@code null} if this queue uses the {@linkplain ...</div><div class='long'><p>Returns the comparator used to order the elements in this queue,\n or {@code null} if this queue uses the {@linkplain Comparable\n natural ordering} of its elements.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Comparator}</span><div class='sub-desc'><p>the comparator used to order the elements in this queue,\n         or {@code null} if this queue uses the natural\n         ordering of its elements</p>\n</div></li></ul></div></div></div><div id='method-contains' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-contains' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-contains' class='name expandable'>contains</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this queue contains the specified element. ...</div><div class='long'><p>Returns {@code true} if this queue contains the specified element.\n More formally, returns {@code true} if and only if this queue contains\n at least one element {@code e} such that {@code o.equals(e)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>object to be checked for containment in this queue</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue contains the specified element</p>\n</div></li></ul></div></div></div><div id='method-drainTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-drainTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-drainTo' class='name expandable'>drainTo</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException            {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException          {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException      {@inheritDoc}</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iterator over the elements in this queue. ...</div><div class='long'><p>Returns an iterator over the elements in this queue. The\n iterator does not return the elements in any particular order.</p>\n\n<p> <p>The returned iterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>an iterator over the elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-offer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-offer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-offer' class='name expandable'>offer</a>( <span class='pre'>e, timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this priority queue. ...</div><div class='long'><p>Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never block or\n return {@code false}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>This parameter is ignored as the method never blocks</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>This parameter is ignored as the method never blocks</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} (as specified by\n  BlockingQueue.offer)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the specified element cannot be compared\n         with elements currently in the priority queue according to the\n         priority queue's ordering</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-peek' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-peek' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-peek' class='name expandable'>peek</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-poll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-poll' class='name expandable'>poll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-put' class='name expandable'>put</a>( <span class='pre'>e</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Inserts the specified element into this priority queue. ...</div><div class='long'><p>Inserts the specified element into this priority queue.\n As the queue is unbounded, this method will never block.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>e</span> : Object {Object}<div class='sub-desc'><p>the element to add</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the specified element cannot be compared\n         with elements currently in the priority queue according to the\n         priority queue's ordering</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified element is null</p>\n</div></li></ul></div></div></div><div id='method-remainingCapacity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-remainingCapacity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-remainingCapacity' class='name expandable'>remainingCapacity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Always returns {@code Integer.MAX_VALUE} because\n a {@code PriorityBlockingQueue} is not capacity constrained. ...</div><div class='long'><p>Always returns {@code Integer.MAX_VALUE} because\n a {@code PriorityBlockingQueue} is not capacity constrained.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code Integer.MAX_VALUE} always</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-remove' class='name expandable'>remove</a>( <span class='pre'>o</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a single instance of the specified element from this queue,\n if it is present. ...</div><div class='long'><p>Removes a single instance of the specified element from this queue,\n if it is present.  More formally, removes an element {@code e} such\n that {@code o.equals(e)}, if this queue contains one or more such\n elements.  Returns {@code true} if and only if this queue contained\n the specified element (or equivalently, if this queue changed as a\n result of the call).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>element to be removed from this queue, if present</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this queue changed as a result of the call</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-size' class='name expandable'>size</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-spliterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-spliterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-spliterator' class='name expandable'>spliterator</a>( <span class='pre'></span> ) : Object {java.util.Spliterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a Spliterator over the elements in this queue. ...</div><div class='long'><p>Returns a Spliterator over the elements in this queue.</p>\n\n<p> <p>The returned spliterator is\n <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.</p>\n\n<p> <p>The {@code Spliterator} reports Spliterator.SIZED and\n Spliterator.NONNULL.\n@implNote The {@code Spliterator} additionally reports Spliterator.SUBSIZED.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Spliterator}</span><div class='sub-desc'><p>a {@code Spliterator} over the elements in this queue</p>\n</div></li></ul></div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-take' class='name expandable'>take</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-toArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-toArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-toArray' class='name expandable'>toArray</a>( <span class='pre'>a</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the...</div><div class='long'><p>Returns an array containing all of the elements in this queue; the\n runtime type of the returned array is that of the specified array.\n The returned array elements are in no particular order.\n If the queue fits in the specified array, it is returned therein.\n Otherwise, a new array is allocated with the runtime type of the\n specified array and the size of this queue.</p>\n\n<p> <p>If this queue fits in the specified array with room to spare\n (i.e., the array has more elements than this queue), the element in\n the array immediately following the end of the queue is set to\n {@code null}.</p>\n\n<p> <p>Like the <a href=\"#!/api/java.util.concurrent.PriorityBlockingQueue-method-toArray\" rel=\"java.util.concurrent.PriorityBlockingQueue-method-toArray\" class=\"docClass\">toArray</a>() method, this method acts as bridge between\n array-based and collection-based APIs.  Further, this method allows\n precise control over the runtime type of the output array, and may,\n under certain circumstances, be used to save allocation costs.</p>\n\n<p> <p>Suppose {@code x} is a queue known to contain only strings.\n The following code can be used to dump the queue into a newly\n allocated array of {@code String}:</p>\n\n<p> <pre> {@code String[] y = x.toArray(new String[0]);}</pre></p>\n\n<p> Note that {@code toArray(new Object[0])} is identical in function to\n {@code toArray()}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>the array into which the elements of the queue are to\n          be stored, if it is big enough; otherwise, a new array of the\n          same runtime type is allocated for this purpose</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an array containing all of the elements in this queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArrayStoreException if the runtime type of the specified array\n         is not a supertype of the runtime type of every element in\n         this queue</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified array is null</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.PriorityBlockingQueue'>java.util.concurrent.PriorityBlockingQueue</span><br/><a href='source/PriorityBlockingQueue.html#java-util-concurrent-PriorityBlockingQueue-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.PriorityBlockingQueue-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});