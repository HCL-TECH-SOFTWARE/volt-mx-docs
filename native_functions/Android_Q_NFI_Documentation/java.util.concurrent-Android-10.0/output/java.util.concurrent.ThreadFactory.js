Ext.data.JsonP.java_util_concurrent_ThreadFactory({"tagname":"class","name":"java.util.concurrent.ThreadFactory","autodetected":{},"files":[{"filename":"ThreadFactory.js","href":"ThreadFactory.html#java-util-concurrent-ThreadFactory"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"newThread","tagname":"method","owner":"java.util.concurrent.ThreadFactory","id":"method-newThread","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ThreadFactory","short_doc":"An object that creates new threads on demand. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ThreadFactory.html#java-util-concurrent-ThreadFactory' target='_blank'>ThreadFactory.js</a></div></pre><div class='doc-contents'><p>An object that creates new threads on demand.  Using thread factories\n removes hardwiring of calls to new Thread,\n enabling applications to use special thread subclasses, priorities, etc.</p>\n\n<p> <p>\n The simplest implementation of this interface is just:\n <pre> {@code\n class SimpleThreadFactory implements ThreadFactory {\n   public Thread newThread(Runnable r) {\n     return new Thread(r);\n   }\n }}</pre></p>\n\n<p> The <a href=\"#!/api/java.util.concurrent.Executors-method-defaultThreadFactory\" rel=\"java.util.concurrent.Executors-method-defaultThreadFactory\" class=\"docClass\">java.util.concurrent.Executors.defaultThreadFactory</a> method provides a more\n useful simple implementation, that sets the created thread context\n to known values before returning it.</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-newThread' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ThreadFactory'>java.util.concurrent.ThreadFactory</span><br/><a href='source/ThreadFactory.html#java-util-concurrent-ThreadFactory-method-newThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ThreadFactory-method-newThread' class='name expandable'>newThread</a>( <span class='pre'>r</span> ) : Object {java.lang.Thread}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a new {@code Thread}. ...</div><div class='long'><p>Constructs a new {@code Thread}.  Implementations may also initialize\n priority, name, daemon status, {@code ThreadGroup}, etc.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>r</span> : Object {Runnable}<div class='sub-desc'><p>a runnable to be executed by new thread instance</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Thread}</span><div class='sub-desc'><p>constructed thread, or {@code null} if the request to\n         create a thread is rejected</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});