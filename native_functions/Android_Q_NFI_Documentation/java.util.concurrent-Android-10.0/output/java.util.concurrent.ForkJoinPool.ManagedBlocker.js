Ext.data.JsonP.java_util_concurrent_ForkJoinPool_ManagedBlocker({"tagname":"class","name":"java.util.concurrent.ForkJoinPool.ManagedBlocker","autodetected":{},"files":[{"filename":"ManagedBlocker.js","href":"ManagedBlocker.html#java-util-concurrent-ForkJoinPool-ManagedBlocker"}],"members":[{"name":"block","tagname":"method","owner":"java.util.concurrent.ForkJoinPool.ManagedBlocker","id":"method-block","meta":{}},{"name":"isReleasable","tagname":"method","owner":"java.util.concurrent.ForkJoinPool.ManagedBlocker","id":"method-isReleasable","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.ForkJoinPool.ManagedBlocker","short_doc":"Interface for extending managed parallelism for tasks running\n in java.util.concurrent.ForkJoinPools. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/ManagedBlocker.html#java-util-concurrent-ForkJoinPool-ManagedBlocker' target='_blank'>ManagedBlocker.js</a></div></pre><div class='doc-contents'><p>Interface for extending managed parallelism for tasks running\n in <a href=\"#!/api/java.util.concurrent.ForkJoinPool\" rel=\"java.util.concurrent.ForkJoinPool\" class=\"docClass\">java.util.concurrent.ForkJoinPool</a>s.</p>\n\n<p> <p>A {@code ManagedBlocker} provides two methods.  Method\n <a href=\"#!/api/java.util.concurrent.ForkJoinPool.ManagedBlocker-method-isReleasable\" rel=\"java.util.concurrent.ForkJoinPool.ManagedBlocker-method-isReleasable\" class=\"docClass\">isReleasable</a> must return {@code true} if blocking is\n not necessary. Method <a href=\"#!/api/java.util.concurrent.ForkJoinPool.ManagedBlocker-method-block\" rel=\"java.util.concurrent.ForkJoinPool.ManagedBlocker-method-block\" class=\"docClass\">block</a> blocks the current thread\n if necessary (perhaps internally invoking {@code isReleasable}\n before actually blocking). These actions are performed by any\n thread invoking java.util.concurrent.ForkJoinPool.managedBlock(ManagedBlocker).\n The unusual methods in this API accommodate synchronizers that\n may, but don't usually, block for long periods. Similarly, they\n allow more efficient internal handling of cases in which\n additional workers may be, but usually are not, needed to\n ensure sufficient parallelism.  Toward this end,\n implementations of method {@code isReleasable} must be amenable\n to repeated invocation.</p>\n\n<p> <p>For example, here is a ManagedBlocker based on a\n ReentrantLock:\n <pre> {@code\n class ManagedLocker implements ManagedBlocker {\n   final ReentrantLock lock;\n   boolean hasLock = false;\n   ManagedLocker(ReentrantLock lock) { this.lock = lock; }\n   public boolean block() {\n     if (!hasLock)\n       lock.lock();\n     return true;\n   }\n   public boolean isReleasable() {\n     return hasLock || (hasLock = lock.tryLock());\n   }\n }}</pre></p>\n\n<p> <p>Here is a class that possibly blocks waiting for an\n item on a given queue:\n <pre> {@code\n class QueueTaker<E> implements ManagedBlocker {\n   final BlockingQueue<E> queue;\n   volatile E item = null;\n   QueueTaker(BlockingQueue<E> q) { this.queue = q; }\n   public boolean block() throws InterruptedException {\n     if (item == null)\n       item = queue.take();\n     return true;\n   }\n   public boolean isReleasable() {\n     return item != null || (item = queue.poll()) != null;\n   }\n   public E getItem() { // call after pool.managedBlock completes\n     return item;\n   }\n }}</E></E></E></pre></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-block' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool.ManagedBlocker'>java.util.concurrent.ForkJoinPool.ManagedBlocker</span><br/><a href='source/ManagedBlocker.html#java-util-concurrent-ForkJoinPool-ManagedBlocker-method-block' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool.ManagedBlocker-method-block' class='name expandable'>block</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Possibly blocks the current thread, for example waiting for\n a lock or condition. ...</div><div class='long'><p>Possibly blocks the current thread, for example waiting for\n a lock or condition.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if no additional blocking is necessary\n (i.e., if isReleasable would return true)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if interrupted while waiting\n (the method is not required to do so, but is allowed to)</p>\n</div></li></ul></div></div></div><div id='method-isReleasable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.ForkJoinPool.ManagedBlocker'>java.util.concurrent.ForkJoinPool.ManagedBlocker</span><br/><a href='source/ManagedBlocker.html#java-util-concurrent-ForkJoinPool-ManagedBlocker-method-isReleasable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.ForkJoinPool.ManagedBlocker-method-isReleasable' class='name expandable'>isReleasable</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if blocking is unnecessary. ...</div><div class='long'><p>Returns {@code true} if blocking is unnecessary.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if blocking is unnecessary</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});