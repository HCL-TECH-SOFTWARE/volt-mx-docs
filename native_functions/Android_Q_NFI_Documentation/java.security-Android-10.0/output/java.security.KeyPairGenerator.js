Ext.data.JsonP.java_security_KeyPairGenerator({"tagname":"class","name":"java.security.KeyPairGenerator","autodetected":{},"files":[{"filename":"KeyPairGenerator.js","href":"KeyPairGenerator.html#java-security-KeyPairGenerator"}],"extends":"java.security.KeyPairGeneratorSpi","author":[{"tagname":"author","name":"Benjamin Renaud","email":null}],"members":[{"name":"genKeyPair","tagname":"method","owner":"java.security.KeyPairGenerator","id":"method-genKeyPair","meta":{}},{"name":"generateKeyPair","tagname":"method","owner":"java.security.KeyPairGenerator","id":"method-generateKeyPair","meta":{}},{"name":"getAlgorithm","tagname":"method","owner":"java.security.KeyPairGenerator","id":"method-getAlgorithm","meta":{}},{"name":"getInstance","tagname":"method","owner":"java.security.KeyPairGenerator","id":"method-getInstance","meta":{}},{"name":"getProvider","tagname":"method","owner":"java.security.KeyPairGenerator","id":"method-getProvider","meta":{}},{"name":"initialize","tagname":"method","owner":"java.security.KeyPairGenerator","id":"method-initialize","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.security.KeyPairGenerator","short_doc":"The KeyPairGenerator class is used to generate pairs of\n public and private keys. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.security.KeyPairGeneratorSpi"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.security.KeyPairGeneratorSpi' rel='java.security.KeyPairGeneratorSpi' class='docClass'>java.security.KeyPairGeneratorSpi</a><div class='subclass '><strong>java.security.KeyPairGenerator</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/KeyPairGenerator.html#java-security-KeyPairGenerator' target='_blank'>KeyPairGenerator.js</a></div></pre><div class='doc-contents'><p>The KeyPairGenerator class is used to generate pairs of\n public and private keys. Key pair generators are constructed using the\n {@code getInstance} factory methods (static methods that\n return instances of a given class).</p>\n\n<p> <p>A Key pair generator for a particular algorithm creates a public/private\n key pair that can be used with this algorithm. It also associates\n algorithm-specific parameters with each of the generated keys.</p>\n\n<p> <p>There are two ways to generate a key pair: in an algorithm-independent\n manner, and in an algorithm-specific manner.\n The only difference between the two is the initialization of the object:</p>\n\n<p> <ul>\n <li><b>Algorithm-Independent Initialization</b>\n <p>All key pair generators share the concepts of a keysize and a\n source of randomness. The keysize is interpreted differently for different\n algorithms (e.g., in the case of the <i>DSA</i> algorithm, the keysize\n corresponds to the length of the modulus).\n There is an\n java.security.SecureRandom) initialize\n method in this KeyPairGenerator class that takes these two universally\n shared types of arguments. There is also one that takes just a\n {@code keysize} argument, and uses the {@code SecureRandom}\n implementation of the highest-priority installed provider as the source\n of randomness. (If none of the installed providers supply an implementation\n of {@code SecureRandom}, a system-provided source of randomness is\n used.)</p>\n\n<p> <p>Since no other parameters are specified when you call the above\n algorithm-independent {@code initialize} methods, it is up to the\n provider what to do about the algorithm-specific parameters (if any) to be\n associated with each of the keys.</p>\n\n<p> <p>If the algorithm is the <i>DSA</i> algorithm, and the keysize (modulus\n size) is 512, 768, or 1024, then the <i>Sun</i> provider uses a set of\n precomputed values for the {@code p}, {@code q}, and\n {@code g} parameters. If the modulus size is not one of the above\n values, the <i>Sun</i> provider creates a new set of parameters. Other\n providers might have precomputed parameter sets for more than just the\n three modulus sizes mentioned above. Still others might not have a list of\n precomputed parameters at all and instead always create new parameter sets.</p>\n\n<p> <li><b>Algorithm-Specific Initialization</b>\n <p>For situations where a set of algorithm-specific parameters already\n exists (e.g., so-called <i>community parameters</i> in DSA), there are two\n initialize methods that have an {@code AlgorithmParameterSpec}\n argument. One also has a {@code SecureRandom} argument, while the\n the other uses the {@code SecureRandom}\n implementation of the highest-priority installed provider as the source\n of randomness. (If none of the installed providers supply an implementation\n of {@code SecureRandom}, a system-provided source of randomness is\n used.)\n </p></li></p></p></p></li></ul></p>\n\n<p> <p>In case the client does not explicitly initialize the KeyPairGenerator\n (via a call to an {@code initialize} method), each provider must\n supply (and document) a default initialization.\n For example, the <i>Sun</i> provider uses a default modulus size (keysize)\n of 1024 bits.</p>\n\n<p> <p>Note that this class is abstract and extends from\n {@code KeyPairGeneratorSpi} for historical reasons.\n Application developers should only take notice of the methods defined in\n this {@code KeyPairGenerator} class; all the methods in\n the superclass are intended for cryptographic service providers who wish to\n supply their own implementations of key pair generators.</p>\n\n<p> <p> Android provides the following <code>KeyPairGenerator</code> algorithms:\n <table>\n   <thead>\n     <tr>\n       <th>Algorithm</th>\n       <th>Supported API Levels</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td>DH</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>DSA</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>EC</td>\n       <td>11+</td>\n     </tr>\n     <tr>\n       <td>RSA</td>\n       <td>1+</td>\n     </tr>\n   </tbody>\n </table></p>\n\n<p> These algorithms are described in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator\">\n KeyPairGenerator section</a> of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.</p>\n\n<p> @see java.security.spec.AlgorithmParameterSpec</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-genKeyPair' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyPairGenerator'>java.security.KeyPairGenerator</span><br/><a href='source/KeyPairGenerator.html#java-security-KeyPairGenerator-method-genKeyPair' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyPairGenerator-method-genKeyPair' class='name expandable'>genKeyPair</a>( <span class='pre'></span> ) : Object {java.security.KeyPair}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a key pair. ...</div><div class='long'><p>Generates a key pair.</p>\n\n<p> <p>If this KeyPairGenerator has not been initialized explicitly,\n provider-specific defaults will be used for the size and other\n (algorithm-specific) values of the generated keys.</p>\n\n<p> <p>This will generate a new key pair every time it is called.</p>\n\n<p> <p>This method is functionally equivalent to\n generateKeyPair.</p>\n        <p>Available since: <b>1.2</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.KeyPair}</span><div class='sub-desc'><p>the generated key pair</p>\n</div></li></ul></div></div></div><div id='method-generateKeyPair' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyPairGenerator'>java.security.KeyPairGenerator</span><br/><a href='source/KeyPairGenerator.html#java-security-KeyPairGenerator-method-generateKeyPair' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyPairGenerator-method-generateKeyPair' class='name expandable'>generateKeyPair</a>( <span class='pre'></span> ) : Object {java.security.KeyPair}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a key pair. ...</div><div class='long'><p>Generates a key pair.</p>\n\n<p> <p>If this KeyPairGenerator has not been initialized explicitly,\n provider-specific defaults will be used for the size and other\n (algorithm-specific) values of the generated keys.</p>\n\n<p> <p>This will generate a new key pair every time it is called.</p>\n\n<p> <p>This method is functionally equivalent to\n genKeyPair.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.KeyPair}</span><div class='sub-desc'><p>the generated key pair</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.security.KeyPairGeneratorSpi-method-generateKeyPair\" rel=\"java.security.KeyPairGeneratorSpi-method-generateKeyPair\" class=\"docClass\">java.security.KeyPairGeneratorSpi.generateKeyPair</a></p></div></div></div><div id='method-getAlgorithm' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyPairGenerator'>java.security.KeyPairGenerator</span><br/><a href='source/KeyPairGenerator.html#java-security-KeyPairGenerator-method-getAlgorithm' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyPairGenerator-method-getAlgorithm' class='name expandable'>getAlgorithm</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the standard name of the algorithm for this key pair generator. ...</div><div class='long'><p>Returns the standard name of the algorithm for this key pair generator.\n See the KeyPairGenerator section in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator\">\n Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n for information about standard algorithm names.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the standard string name of the algorithm.</p>\n</div></li></ul></div></div></div><div id='method-getInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyPairGenerator'>java.security.KeyPairGenerator</span><br/><a href='source/KeyPairGenerator.html#java-security-KeyPairGenerator-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyPairGenerator-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'>algorithm, provider</span> ) : Object {java.security.KeyPairGenerator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm. ...</div><div class='long'><p>Returns a KeyPairGenerator object that generates public/private\n key pairs for the specified algorithm.</p>\n\n<p> <p> A new KeyPairGenerator object encapsulating the\n KeyPairGeneratorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>algorithm</span> : String<div class='sub-desc'><p>the standard string name of the algorithm.\n See the KeyPairGenerator section in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator\">\n Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n for information about standard algorithm names.</p>\n</div></li><li><span class='pre'>provider</span> : Object {Provider}<div class='sub-desc'><p>the provider.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.KeyPairGenerator}</span><div class='sub-desc'><p>the new KeyPairGenerator object.\n@exception NoSuchAlgorithmException if a KeyPairGeneratorSpi\n          implementation for the specified algorithm is not available\n          from the specified Provider object.\n@exception IllegalArgumentException if the specified provider is null.\n@see Provider</p>\n</div></li></ul></div></div></div><div id='method-getProvider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyPairGenerator'>java.security.KeyPairGenerator</span><br/><a href='source/KeyPairGenerator.html#java-security-KeyPairGenerator-method-getProvider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyPairGenerator-method-getProvider' class='name expandable'>getProvider</a>( <span class='pre'></span> ) : Object {java.security.Provider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the provider of this key pair generator object. ...</div><div class='long'><p>Returns the provider of this key pair generator object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.Provider}</span><div class='sub-desc'><p>the provider of this key pair generator object</p>\n</div></li></ul></div></div></div><div id='method-initialize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyPairGenerator'>java.security.KeyPairGenerator</span><br/><a href='source/KeyPairGenerator.html#java-security-KeyPairGenerator-method-initialize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyPairGenerator-method-initialize' class='name expandable'>initialize</a>( <span class='pre'>params, random</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initializes the key pair generator with the given parameter\n set and source of randomness. ...</div><div class='long'><p>Initializes the key pair generator with the given parameter\n set and source of randomness.</p>\n\n<p> <p>This concrete method has been added to this previously-defined\n abstract class.\n This method calls the KeyPairGeneratorSpi java.security.spec.AlgorithmParameterSpec,\n java.security.SecureRandom) initialize method,\n passing it {@code params} and {@code random}.\n That {@code initialize}\n method always throws an\n UnsupportedOperationException if it is not overridden by the provider.</p>\n        <p>Available since: <b>1.2</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {AlgorithmParameterSpec}<div class='sub-desc'><p>the parameter set used to generate the keys.</p>\n</div></li><li><span class='pre'>random</span> : Object {SecureRandom}<div class='sub-desc'><p>the source of randomness.\n@exception InvalidAlgorithmParameterException if the given parameters\n are inappropriate for this key pair generator.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.security.KeyPairGeneratorSpi-method-initialize\" rel=\"java.security.KeyPairGeneratorSpi-method-initialize\" class=\"docClass\">java.security.KeyPairGeneratorSpi.initialize</a></p></div></div></div></div></div></div></div>","meta":{}});