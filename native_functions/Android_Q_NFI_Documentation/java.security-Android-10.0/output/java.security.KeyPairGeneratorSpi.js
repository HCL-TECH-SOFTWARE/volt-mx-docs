Ext.data.JsonP.java_security_KeyPairGeneratorSpi({"tagname":"class","name":"java.security.KeyPairGeneratorSpi","autodetected":{},"files":[{"filename":"KeyPairGeneratorSpi.js","href":"KeyPairGeneratorSpi.html#java-security-KeyPairGeneratorSpi"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Benjamin Renaud","email":null}],"members":[{"name":"generateKeyPair","tagname":"method","owner":"java.security.KeyPairGeneratorSpi","id":"method-generateKeyPair","meta":{}},{"name":"initialize","tagname":"method","owner":"java.security.KeyPairGeneratorSpi","id":"method-initialize","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.security.KeyPairGeneratorSpi","short_doc":"This class defines the Service Provider Interface (SPI)\n for the {@code KeyPairGenerator} class, which is used to gen...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.security.KeyPairGenerator"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.security.KeyPairGeneratorSpi</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.security.KeyPairGenerator' rel='java.security.KeyPairGenerator' class='docClass'>java.security.KeyPairGenerator</a></div><h4>Files</h4><div class='dependency'><a href='source/KeyPairGeneratorSpi.html#java-security-KeyPairGeneratorSpi' target='_blank'>KeyPairGeneratorSpi.js</a></div></pre><div class='doc-contents'><p><p> This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n for the {@code KeyPairGenerator} class, which is used to generate\n pairs of public and private keys.</p>\n\n<p> <p> All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a key pair generator for a particular algorithm.</p>\n\n<p> <p> In case the client does not explicitly initialize the KeyPairGenerator\n (via a call to an {@code initialize} method), each provider must\n supply (and document) a default initialization.\n For example, the <i>Sun</i> provider uses a default modulus size (keysize)\n of 1024 bits.</p>\n\n<p> @see KeyPairGenerator\n @see java.security.spec.AlgorithmParameterSpec</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-generateKeyPair' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyPairGeneratorSpi'>java.security.KeyPairGeneratorSpi</span><br/><a href='source/KeyPairGeneratorSpi.html#java-security-KeyPairGeneratorSpi-method-generateKeyPair' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyPairGeneratorSpi-method-generateKeyPair' class='name expandable'>generateKeyPair</a>( <span class='pre'></span> ) : Object {java.security.KeyPair}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a key pair. ...</div><div class='long'><p>Generates a key pair. Unless an initialization method is called\n using a KeyPairGenerator interface, algorithm-specific defaults\n will be used. This will generate a new key pair every time it\n is called.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.KeyPair}</span><div class='sub-desc'><p>the newly generated {@code KeyPair}</p>\n</div></li></ul></div></div></div><div id='method-initialize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyPairGeneratorSpi'>java.security.KeyPairGeneratorSpi</span><br/><a href='source/KeyPairGeneratorSpi.html#java-security-KeyPairGeneratorSpi-method-initialize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyPairGeneratorSpi-method-initialize' class='name expandable'>initialize</a>( <span class='pre'>params, random</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initializes the key pair generator using the specified parameter\n set and user-provided source of randomness. ...</div><div class='long'><p>Initializes the key pair generator using the specified parameter\n set and user-provided source of randomness.</p>\n\n<p> <p>This concrete method has been added to this previously-defined\n abstract class. (For backwards compatibility, it cannot be abstract.)\n It may be overridden by a provider to initialize the key pair\n generator. Such an override\n is expected to throw an InvalidAlgorithmParameterException if\n a parameter is inappropriate for this key pair generator.\n If this method is not overridden, it always throws an\n UnsupportedOperationException.</p>\n        <p>Available since: <b>1.2</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {AlgorithmParameterSpec}<div class='sub-desc'><p>the parameter set used to generate the keys.</p>\n</div></li><li><span class='pre'>random</span> : Object {SecureRandom}<div class='sub-desc'><p>the source of randomness for this generator.\n@exception InvalidAlgorithmParameterException if the given parameters\n are inappropriate for this key pair generator.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});