Ext.data.JsonP.java_security_KeyStore({"tagname":"class","name":"java.security.KeyStore","autodetected":{},"files":[{"filename":"KeyStore.js","href":"KeyStore.html#java-security-KeyStore"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Jan Luehe","email":null}],"since":"1.2","members":[{"name":"aliases","tagname":"method","owner":"java.security.KeyStore","id":"method-aliases","meta":{}},{"name":"containsAlias","tagname":"method","owner":"java.security.KeyStore","id":"method-containsAlias","meta":{}},{"name":"deleteEntry","tagname":"method","owner":"java.security.KeyStore","id":"method-deleteEntry","meta":{}},{"name":"entryInstanceOf","tagname":"method","owner":"java.security.KeyStore","id":"method-entryInstanceOf","meta":{}},{"name":"getCertificate","tagname":"method","owner":"java.security.KeyStore","id":"method-getCertificate","meta":{}},{"name":"getCertificateAlias","tagname":"method","owner":"java.security.KeyStore","id":"method-getCertificateAlias","meta":{}},{"name":"getCertificateChain","tagname":"method","owner":"java.security.KeyStore","id":"method-getCertificateChain","meta":{}},{"name":"getCreationDate","tagname":"method","owner":"java.security.KeyStore","id":"method-getCreationDate","meta":{}},{"name":"getDefaultType","tagname":"method","owner":"java.security.KeyStore","id":"method-getDefaultType","meta":{}},{"name":"getEntry","tagname":"method","owner":"java.security.KeyStore","id":"method-getEntry","meta":{}},{"name":"getInstance","tagname":"method","owner":"java.security.KeyStore","id":"method-getInstance","meta":{}},{"name":"getKey","tagname":"method","owner":"java.security.KeyStore","id":"method-getKey","meta":{}},{"name":"getProvider","tagname":"method","owner":"java.security.KeyStore","id":"method-getProvider","meta":{}},{"name":"getType","tagname":"method","owner":"java.security.KeyStore","id":"method-getType","meta":{}},{"name":"isCertificateEntry","tagname":"method","owner":"java.security.KeyStore","id":"method-isCertificateEntry","meta":{}},{"name":"isKeyEntry","tagname":"method","owner":"java.security.KeyStore","id":"method-isKeyEntry","meta":{}},{"name":"load","tagname":"method","owner":"java.security.KeyStore","id":"method-load","meta":{}},{"name":"setCertificateEntry","tagname":"method","owner":"java.security.KeyStore","id":"method-setCertificateEntry","meta":{}},{"name":"setEntry","tagname":"method","owner":"java.security.KeyStore","id":"method-setEntry","meta":{}},{"name":"setKeyEntry","tagname":"method","owner":"java.security.KeyStore","id":"method-setKeyEntry","meta":{}},{"name":"size","tagname":"method","owner":"java.security.KeyStore","id":"method-size","meta":{}},{"name":"store","tagname":"method","owner":"java.security.KeyStore","id":"method-store","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.security.KeyStore","short_doc":"This class represents a storage facility for cryptographic\n keys and certificates. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.security.KeyStore</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/KeyStore.html#java-security-KeyStore' target='_blank'>KeyStore.js</a></div></pre><div class='doc-contents'><p>This class represents a storage facility for cryptographic\n keys and certificates.</p>\n\n<p> <p> A {@code KeyStore} manages different types of entries.\n Each type of entry implements the {@code KeyStore.Entry} interface.\n Three basic {@code KeyStore.Entry} implementations are provided:</p>\n\n<p> <ul>\n <li><b>KeyStore.PrivateKeyEntry</b>\n <p> This type of entry holds a cryptographic {@code PrivateKey},\n which is optionally stored in a protected format to prevent\n unauthorized access.  It is also accompanied by a certificate chain\n for the corresponding public key.</p>\n\n<p> <p> Private keys and certificate chains are used by a given entity for\n self-authentication. Applications for this authentication include software\n distribution organizations which sign JAR files as part of releasing\n and/or licensing software.</p>\n\n<p> <li><b>KeyStore.SecretKeyEntry</b>\n <p> This type of entry holds a cryptographic {@code SecretKey},\n which is optionally stored in a protected format to prevent\n unauthorized access.</p>\n\n<p> <li><b>KeyStore.TrustedCertificateEntry</b>\n <p> This type of entry contains a single public key {@code Certificate}\n belonging to another party. It is called a <i>trusted certificate</i>\n because the keystore owner trusts that the public key in the certificate\n indeed belongs to the identity identified by the <i>subject</i> (owner)\n of the certificate.</p>\n\n<p> <p>This type of entry can be used to authenticate other parties.\n </p></p></li></p></li></p></p></li></ul></p>\n\n<p> <p> Each entry in a keystore is identified by an \"alias\" string. In the\n case of private keys and their associated certificate chains, these strings\n distinguish among the different ways in which the entity may authenticate\n itself. For example, the entity may authenticate itself using different\n certificate authorities, or using different public key algorithms.</p>\n\n<p> <p> Whether aliases are case sensitive is implementation dependent. In order\n to avoid problems, it is recommended not to use aliases in a KeyStore that\n only differ in case.</p>\n\n<p> <p> Whether keystores are persistent, and the mechanisms used by the\n keystore if it is persistent, are not specified here. This allows\n use of a variety of techniques for protecting sensitive (e.g., private or\n secret) keys. Smart cards or other integrated cryptographic engines\n (SafeKeyper) are one option, and simpler mechanisms such as files may also\n be used (in a variety of formats).</p>\n\n<p> <p> Typical ways to request a KeyStore object include\n relying on the default type and providing a specific keystore type.</p>\n\n<p> <ul>\n <li>To rely on the default type:</li></ul></p>\n\n<pre>    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n </pre>\n\n\n<p> The system will return a keystore implementation for the default type.</p>\n\n<p> <li>To provide a specific keystore type:</li></p>\n\n<pre>      KeyStore ks = KeyStore.getInstance(\"JKS\");\n </pre>\n\n\n<p> The system will return the most preferred implementation of the\n specified keystore type available in the environment. <p>\n </p>\n\n<p> <p> Before a keystore can be accessed, it must be\n char[]) loaded.</p>\n\n<pre>    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    // get user password and file input stream\n    char[] password = getPassword();\n\n    try (FileInputStream fis = new FileInputStream(\"keyStoreName\")) {\n        ks.load(fis, password);\n    }\n </pre>\n\n\n<p> To create an empty keystore using the above {@code load} method,\n pass {@code null} as the {@code InputStream} argument.</p>\n\n<p> <p> Once the keystore has been loaded, it is possible\n to read existing entries from the keystore, or to write new entries\n into the keystore:</p>\n\n<pre>    KeyStore.ProtectionParameter protParam =\n        new KeyStore.PasswordProtection(password);\n\n    // get my private key\n    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)\n        ks.getEntry(\"privateKeyAlias\", protParam);\n    PrivateKey myPrivateKey = pkEntry.getPrivateKey();\n\n    // save my secret key\n    javax.crypto.SecretKey mySecretKey;\n    KeyStore.SecretKeyEntry skEntry =\n        new KeyStore.SecretKeyEntry(mySecretKey);\n    ks.setEntry(\"secretKeyAlias\", skEntry, protParam);\n\n    // store away the keystore\n    try (FileOutputStream fos = new FileOutputStream(\"newKeyStoreName\")) {\n        ks.store(fos, password);\n    }\n </pre>\n\n\n<p> Note that although the same password may be used to\n load the keystore, to protect the private key entry,\n to protect the secret key entry, and to store the keystore\n (as is shown in the sample code above),\n different passwords or other protection parameters\n may also be used.</p>\n\n<p> <p> Android provides the following <code>KeyStore</code> types:\n <table>\n   <thead>\n     <tr>\n       <th>Algorithm</th>\n       <th>Supported API Levels</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td>AndroidCAStore</td>\n       <td>14+</td>\n     </tr>\n     <tr>\n       <td>AndroidKeyStore</td>\n       <td>18+</td>\n     </tr>\n     <tr class=\"deprecated\">\n       <td>BCPKCS12</td>\n       <td>1-8</td>\n     </tr>\n     <tr>\n       <td>BKS</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>BouncyCastle</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PKCS12</td>\n       <td>1+</td>\n     </tr>\n     <tr class=\"deprecated\">\n       <td>PKCS12-DEF</td>\n       <td>1-8</td>\n     </tr>\n   </tbody>\n </table></p>\n\n<p> These types are described in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore\">\n KeyStore section</a> of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.</p>\n\n<p> @see <a href=\"#!/api/java.security.PrivateKey\" rel=\"java.security.PrivateKey\" class=\"docClass\">java.security.PrivateKey</a>\n @see javax.crypto.SecretKey\n @see java.security.cert.Certificate</p>\n        <p>Available since: <b>1.2</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-aliases' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-aliases' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-aliases' class='name expandable'>aliases</a>( <span class='pre'></span> ) : Object {java.util.Enumeration}<span class=\"signature\"></span></div><div class='description'><div class='short'>Lists all the alias names of this keystore. ...</div><div class='long'><p>Lists all the alias names of this keystore.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Enumeration}</span><div class='sub-desc'><p>enumeration of the alias names\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-containsAlias' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-containsAlias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-containsAlias' class='name expandable'>containsAlias</a>( <span class='pre'>alias</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the given alias exists in this keystore. ...</div><div class='long'><p>Checks if the given alias exists in this keystore.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the alias exists, false otherwise\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-deleteEntry' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-deleteEntry' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-deleteEntry' class='name expandable'>deleteEntry</a>( <span class='pre'>alias</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes the entry identified by the given alias from this keystore. ...</div><div class='long'><p>Deletes the entry identified by the given alias from this keystore.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name\n@exception KeyStoreException if the keystore has not been initialized,\n or if the entry cannot be removed.</p>\n</div></li></ul></div></div></div><div id='method-entryInstanceOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-entryInstanceOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-entryInstanceOf' class='name expandable'>entryInstanceOf</a>( <span class='pre'>alias, entryClass</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Determines if the keystore {@code Entry} for the specified\n {@code alias} is an instance or subclass of the specified...</div><div class='long'><p>Determines if the keystore {@code Entry} for the specified\n {@code alias} is an instance or subclass of the specified\n {@code entryClass}.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name</p>\n</div></li><li><span class='pre'>entryClass</span> : Object {java.lang.Class}<div class='sub-desc'><p>the entry class</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the keystore {@code Entry} for the specified\n          {@code alias} is an instance or subclass of the\n          specified {@code entryClass}, false otherwise\n@exception NullPointerException if\n          {@code alias} or {@code entryClass}\n          is {@code null}\n@exception KeyStoreException if the keystore has not been\n          initialized (loaded)</p>\n</div></li></ul></div></div></div><div id='method-getCertificate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getCertificate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getCertificate' class='name expandable'>getCertificate</a>( <span class='pre'>alias</span> ) : Object {java.security.cert.Certificate}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the certificate associated with the given alias. ...</div><div class='long'><p>Returns the certificate associated with the given alias.</p>\n\n<p> <p> If the given alias name identifies an entry\n created by a call to {@code setCertificateEntry},\n or created by a call to {@code setEntry} with a\n {@code TrustedCertificateEntry},\n then the trusted certificate contained in that entry is returned.</p>\n\n<p> <p> If the given alias name identifies an entry\n created by a call to {@code setKeyEntry},\n or created by a call to {@code setEntry} with a\n {@code PrivateKeyEntry},\n then the first element of the certificate chain in that entry\n is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.cert.Certificate}</span><div class='sub-desc'><p>the certificate, or null if the given alias does not exist or\n does not contain a certificate.\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-getCertificateAlias' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getCertificateAlias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getCertificateAlias' class='name expandable'>getCertificateAlias</a>( <span class='pre'>cert</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the (alias) name of the first keystore entry whose certificate\n matches the given certificate. ...</div><div class='long'><p>Returns the (alias) name of the first keystore entry whose certificate\n matches the given certificate.</p>\n\n<p> <p> This method attempts to match the given certificate with each\n keystore entry. If the entry being considered was\n created by a call to {@code setCertificateEntry},\n or created by a call to {@code setEntry} with a\n {@code TrustedCertificateEntry},\n then the given certificate is compared to that entry's certificate.</p>\n\n<p> <p> If the entry being considered was\n created by a call to {@code setKeyEntry},\n or created by a call to {@code setEntry} with a\n {@code PrivateKeyEntry},\n then the given certificate is compared to the first\n element of that entry's certificate chain.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cert</span> : Object {Certificate}<div class='sub-desc'><p>the certificate to match with.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the alias name of the first entry with a matching certificate,\n or null if no such entry exists in this keystore.\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-getCertificateChain' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getCertificateChain' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getCertificateChain' class='name expandable'>getCertificateChain</a>( <span class='pre'>alias</span> ) : Object {java.security.cert.Certificate}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the certificate chain associated with the given alias. ...</div><div class='long'><p>Returns the certificate chain associated with the given alias.\n The certificate chain must have been associated with the alias\n by a call to {@code setKeyEntry},\n or by a call to {@code setEntry} with a\n {@code PrivateKeyEntry}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.cert.Certificate}</span><div class='sub-desc'><p>the certificate chain (ordered with the user's certificate first\n followed by zero or more certificate authorities), or null if the given alias\n does not exist or does not contain a certificate chain\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-getCreationDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getCreationDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getCreationDate' class='name expandable'>getCreationDate</a>( <span class='pre'>alias</span> ) : Object {java.util.Date}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the creation date of the entry identified by the given alias. ...</div><div class='long'><p>Returns the creation date of the entry identified by the given alias.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Date}</span><div class='sub-desc'><p>the creation date of this entry, or null if the given alias does\n not exist\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-getDefaultType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getDefaultType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getDefaultType' class='name expandable'>getDefaultType</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the default keystore type as specified by the\n {@code keystore.type} security property, or the string\n {@lite...</div><div class='long'><p>Returns the default keystore type as specified by the\n {@code keystore.type} security property, or the string\n {@literal \"jks\"} (acronym for {@literal \"Java keystore\"})\n if no such property exists.</p>\n\n<p> <p>The default keystore type can be used by applications that do not\n want to use a hard-coded keystore type when calling one of the\n {@code getInstance} methods, and want to provide a default keystore\n type in case a user does not specify its own.</p>\n\n<p> <p>The default keystore type can be changed by setting the value of the\n {@code keystore.type} security property to the desired keystore type.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the default keystore type as specified by the\n {@code keystore.type} security property, or the string {@literal \"jks\"}\n if no such property exists.\n@see <a href=\"#!/api/java.security.Security\" rel=\"java.security.Security\" class=\"docClass\">java.security.Security</a> security properties</p>\n</div></li></ul></div></div></div><div id='method-getEntry' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getEntry' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getEntry' class='name expandable'>getEntry</a>( <span class='pre'>alias, protParam</span> ) : Object {java.security.KeyStore.Entry}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets a keystore {@code Entry} for the specified alias\n with the specified protection parameter. ...</div><div class='long'><p>Gets a keystore {@code Entry} for the specified alias\n with the specified protection parameter.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>get the keystore {@code Entry} for this alias</p>\n</div></li><li><span class='pre'>protParam</span> : Object {KeyStore.ProtectionParameter}<div class='sub-desc'><p>the {@code ProtectionParameter}\n          used to protect the {@code Entry},\n          which may be {@code null}</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.KeyStore.Entry}</span><div class='sub-desc'><p>the keystore {@code Entry} for the specified alias,\n          or {@code null} if there is no such entry\n@exception NullPointerException if\n          {@code alias} is {@code null}\n@exception NoSuchAlgorithmException if the algorithm for recovering the\n          entry cannot be found\n@exception UnrecoverableEntryException if the specified\n          {@code protParam} were insufficient or invalid\n@exception UnrecoverableKeyException if the entry is a\n          {@code PrivateKeyEntry} or {@code SecretKeyEntry}\n          and the specified {@code protParam} does not contain\n          the information needed to recover the key (e.g. wrong password)\n@exception KeyStoreException if the keystore has not been initialized\n          (loaded).\n@see <a href=\"#!/api/java.security.KeyStore-method-setEntry\" rel=\"java.security.KeyStore-method-setEntry\" class=\"docClass\">setEntry</a>(String, KeyStore.Entry, KeyStore.ProtectionParameter)</p>\n</div></li></ul></div></div></div><div id='method-getInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'>type, provider</span> ) : Object {java.security.KeyStore}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a keystore object of the specified type. ...</div><div class='long'><p>Returns a keystore object of the specified type.</p>\n\n<p> <p> A new KeyStore object encapsulating the\n KeyStoreSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : String<div class='sub-desc'><p>the type of keystore.\n See the KeyStore section in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore\">\n Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n for information about standard keystore types.</p>\n</div></li><li><span class='pre'>provider</span> : Object {Provider}<div class='sub-desc'><p>the provider.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.KeyStore}</span><div class='sub-desc'><p>a keystore object of the specified type.\n@exception KeyStoreException if KeyStoreSpi\n          implementation for the specified type is not available\n          from the specified Provider object.\n@exception IllegalArgumentException if the specified provider is null.\n@see Provider</p>\n</div></li></ul></div></div></div><div id='method-getKey' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getKey' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getKey' class='name expandable'>getKey</a>( <span class='pre'>alias, password</span> ) : Object {java.security.Key}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the key associated with the given alias, using the given\n password to recover it. ...</div><div class='long'><p>Returns the key associated with the given alias, using the given\n password to recover it.  The key must have been associated with\n the alias by a call to {@code setKeyEntry},\n or by a call to {@code setEntry} with a\n {@code PrivateKeyEntry} or {@code SecretKeyEntry}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name</p>\n</div></li><li><span class='pre'>password</span> : Object {char[]}<div class='sub-desc'><p>the password for recovering the key</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.Key}</span><div class='sub-desc'><p>the requested key, or null if the given alias does not exist\n or does not identify a key-related entry.\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).\n@exception NoSuchAlgorithmException if the algorithm for recovering the\n key cannot be found\n@exception UnrecoverableKeyException if the key cannot be recovered\n (e.g., the given password is wrong).</p>\n</div></li></ul></div></div></div><div id='method-getProvider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getProvider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getProvider' class='name expandable'>getProvider</a>( <span class='pre'></span> ) : Object {java.security.Provider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the provider of this keystore. ...</div><div class='long'><p>Returns the provider of this keystore.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.Provider}</span><div class='sub-desc'><p>the provider of this keystore.</p>\n</div></li></ul></div></div></div><div id='method-getType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-getType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-getType' class='name expandable'>getType</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the type of this keystore. ...</div><div class='long'><p>Returns the type of this keystore.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the type of this keystore.</p>\n</div></li></ul></div></div></div><div id='method-isCertificateEntry' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-isCertificateEntry' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-isCertificateEntry' class='name expandable'>isCertificateEntry</a>( <span class='pre'>alias</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the entry identified by the given alias\n was created by a call to {@code setCertificateEntry},\n or cr...</div><div class='long'><p>Returns true if the entry identified by the given alias\n was created by a call to {@code setCertificateEntry},\n or created by a call to {@code setEntry} with a\n {@code TrustedCertificateEntry}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias for the keystore entry to be checked</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the entry identified by the given alias contains a\n trusted certificate, false otherwise.\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-isKeyEntry' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-isKeyEntry' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-isKeyEntry' class='name expandable'>isKeyEntry</a>( <span class='pre'>alias</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the entry identified by the given alias\n was created by a call to {@code setKeyEntry},\n or created by...</div><div class='long'><p>Returns true if the entry identified by the given alias\n was created by a call to {@code setKeyEntry},\n or created by a call to {@code setEntry} with a\n {@code PrivateKeyEntry} or a {@code SecretKeyEntry}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias for the keystore entry to be checked</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the entry identified by the given alias is a\n key-related entry, false otherwise.\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-load' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-load' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-load' class='name expandable'>load</a>( <span class='pre'>param</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Loads this keystore using the given {@code LoadStoreParameter}. ...</div><div class='long'><p>Loads this keystore using the given {@code LoadStoreParameter}.</p>\n\n<p> <p> Note that if this KeyStore has already been loaded, it is\n reinitialized and loaded again from the given parameter.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>param</span> : Object {KeyStore.LoadStoreParameter}<div class='sub-desc'><p>the {@code LoadStoreParameter}\n          that specifies how to load the keystore,\n          which may be {@code null}\n@exception IllegalArgumentException if the given\n          {@code LoadStoreParameter}\n          input is not recognized\n@exception IOException if there is an I/O or format problem with the\n          keystore data. If the error is due to an incorrect\n         {@code ProtectionParameter} (e.g. wrong password)\n         the cause of the\n         {@code IOException} should be an\n         {@code UnrecoverableKeyException}\n@exception NoSuchAlgorithmException if the algorithm used to check\n          the integrity of the keystore cannot be found\n@exception CertificateException if any of the certificates in the\n          keystore could not be loaded</p>\n</div></li></ul></div></div></div><div id='method-setCertificateEntry' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-setCertificateEntry' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-setCertificateEntry' class='name expandable'>setCertificateEntry</a>( <span class='pre'>alias, cert</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Assigns the given trusted certificate to the given alias. ...</div><div class='long'><p>Assigns the given trusted certificate to the given alias.</p>\n\n<p> <p> If the given alias identifies an existing entry\n created by a call to {@code setCertificateEntry},\n or created by a call to {@code setEntry} with a\n {@code TrustedCertificateEntry},\n the trusted certificate in the existing entry\n is overridden by the given certificate.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name</p>\n</div></li><li><span class='pre'>cert</span> : Object {Certificate}<div class='sub-desc'><p>the certificate\n@exception KeyStoreException if the keystore has not been initialized,\n or the given alias already exists and does not identify an\n entry containing a trusted certificate,\n or this operation fails for some other reason.</p>\n</div></li></ul></div></div></div><div id='method-setEntry' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-setEntry' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-setEntry' class='name expandable'>setEntry</a>( <span class='pre'>alias, entry, protParam</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Saves a keystore {@code Entry} under the specified alias. ...</div><div class='long'><p>Saves a keystore {@code Entry} under the specified alias.\n The protection parameter is used to protect the\n {@code Entry}.</p>\n\n<p> <p> If an entry already exists for the specified alias,\n it is overridden.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>save the keystore {@code Entry} under this alias</p>\n</div></li><li><span class='pre'>entry</span> : Object {KeyStore.Entry}<div class='sub-desc'><p>the {@code Entry} to save</p>\n</div></li><li><span class='pre'>protParam</span> : Object {KeyStore.ProtectionParameter}<div class='sub-desc'><p>the {@code ProtectionParameter}\n          used to protect the {@code Entry},\n          which may be {@code null}\n@exception NullPointerException if\n          {@code alias} or {@code entry}\n          is {@code null}\n@exception KeyStoreException if the keystore has not been initialized\n          (loaded), or if this operation fails for some other reason\n@see <a href=\"#!/api/java.security.KeyStore-method-getEntry\" rel=\"java.security.KeyStore-method-getEntry\" class=\"docClass\">getEntry</a>(String, KeyStore.ProtectionParameter)</p>\n</div></li></ul></div></div></div><div id='method-setKeyEntry' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-setKeyEntry' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-setKeyEntry' class='name expandable'>setKeyEntry</a>( <span class='pre'>alias, key, chain</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Assigns the given key (that has already been protected) to the given\n alias. ...</div><div class='long'><p>Assigns the given key (that has already been protected) to the given\n alias.</p>\n\n<p> <p>If the protected key is of type\n {@code <a href=\"#!/api/java.security.PrivateKey\" rel=\"java.security.PrivateKey\" class=\"docClass\">java.security.PrivateKey</a>}, it must be accompanied by a\n certificate chain certifying the corresponding public key. If the\n underlying keystore implementation is of type {@code jks},\n {@code key} must be encoded as an\n {@code EncryptedPrivateKeyInfo} as defined in the PKCS #8 standard.</p>\n\n<p> <p>If the given alias already exists, the keystore information\n associated with it is overridden by the given key (and possibly\n certificate chain).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'><p>the alias name</p>\n</div></li><li><span class='pre'>key</span> : Object {byte[]}<div class='sub-desc'><p>the key (in protected format) to be associated with the alias</p>\n</div></li><li><span class='pre'>chain</span> : Object {java.security.cert.Certificate[]}<div class='sub-desc'><p>the certificate chain for the corresponding public\n          key (only useful if the protected key is of type\n          {@code <a href=\"#!/api/java.security.PrivateKey\" rel=\"java.security.PrivateKey\" class=\"docClass\">java.security.PrivateKey</a>}).\n@exception KeyStoreException if the keystore has not been initialized\n (loaded), or if this operation fails for some other reason.</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-size' class='name expandable'>size</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the number of entries in this keystore. ...</div><div class='long'><p>Retrieves the number of entries in this keystore.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of entries in this keystore\n@exception KeyStoreException if the keystore has not been initialized\n (loaded).</p>\n</div></li></ul></div></div></div><div id='method-store' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.KeyStore'>java.security.KeyStore</span><br/><a href='source/KeyStore.html#java-security-KeyStore-method-store' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.KeyStore-method-store' class='name expandable'>store</a>( <span class='pre'>param</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stores this keystore using the given {@code LoadStoreParameter}. ...</div><div class='long'><p>Stores this keystore using the given {@code LoadStoreParameter}.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>param</span> : Object {KeyStore.LoadStoreParameter}<div class='sub-desc'><p>the {@code LoadStoreParameter}\n          that specifies how to store the keystore,\n          which may be {@code null}\n@exception IllegalArgumentException if the given\n          {@code LoadStoreParameter}\n          input is not recognized\n@exception KeyStoreException if the keystore has not been initialized\n          (loaded)\n@exception IOException if there was an I/O problem with data\n@exception NoSuchAlgorithmException if the appropriate data integrity\n          algorithm could not be found\n@exception CertificateException if any of the certificates included in\n          the keystore data could not be stored</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});