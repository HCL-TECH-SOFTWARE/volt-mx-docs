Ext.data.JsonP.java_security_SignedObject({"tagname":"class","name":"java.security.SignedObject","autodetected":{},"files":[{"filename":"SignedObject.js","href":"SignedObject.html#java-security-SignedObject"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Li Gong","email":null}],"members":[{"name":"getAlgorithm","tagname":"method","owner":"java.security.SignedObject","id":"method-getAlgorithm","meta":{}},{"name":"getObject","tagname":"method","owner":"java.security.SignedObject","id":"method-getObject","meta":{}},{"name":"getSignature","tagname":"method","owner":"java.security.SignedObject","id":"method-getSignature","meta":{}},{"name":"verify","tagname":"method","owner":"java.security.SignedObject","id":"method-verify","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.security.SignedObject","short_doc":"implements java.io.Serializable\n\n SignedObject is a class for the purpose of creating authentic\n runtime objects whos...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.security.SignedObject</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/SignedObject.html#java-security-SignedObject' target='_blank'>SignedObject.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p><p> SignedObject is a class for the purpose of creating authentic\n runtime objects whose integrity cannot be compromised without being\n detected.</p>\n\n<p> <p> More specifically, a SignedObject contains another Serializable\n object, the (to-be-)signed object and its signature.</p>\n\n<p> <p> The signed object is a \"deep copy\" (in serialized form) of an\n original object.  Once the copy is made, further manipulation of\n the original object has no side effect on the copy.</p>\n\n<p> <p> The underlying signing algorithm is designated by the Signature\n object passed to the constructor and the {@code verify} method.\n A typical usage for signing is the following:</p>\n\n<p> <pre>{@code\n Signature signingEngine = Signature.getInstance(algorithm,\n                                                 provider);\n SignedObject so = new SignedObject(myobject, signingKey,\n                                    signingEngine);\n }</pre></p>\n\n<p> <p> A typical usage for verification is the following (having\n received SignedObject {@code so}):</p>\n\n<p> <pre>{@code\n Signature verificationEngine =\n     Signature.getInstance(algorithm, provider);\n if (so.verify(publickey, verificationEngine))\n     try {\n         Object myobj = so.getObject();\n     } catch (java.lang.ClassNotFoundException e) {};\n }</pre></p>\n\n<p> <p> Several points are worth noting.  First, there is no need to\n initialize the signing or verification engine, as it will be\n re-initialized inside the constructor and the {@code verify}\n method. Secondly, for verification to succeed, the specified\n public key must be the public key corresponding to the private key\n used to generate the SignedObject.</p>\n\n<p> <p> More importantly, for flexibility reasons, the\n constructor and {@code verify} method allow for\n customized signature engines, which can implement signature\n algorithms that are not installed formally as part of a crypto\n provider.  However, it is crucial that the programmer writing the\n verifier code be aware what {@code Signature} engine is being\n used, as its own implementation of the {@code verify} method\n is invoked to verify a signature.  In other words, a malicious\n {@code Signature} may choose to always return true on\n verification in an attempt to bypass a security check.</p>\n\n<p> <p> The signature algorithm can be, among others, the NIST standard\n DSA, using DSA and SHA-1.  The algorithm is specified using the\n same convention as that for signatures. The DSA algorithm using the\n SHA-1 message digest algorithm can be specified, for example, as\n \"SHA/DSA\" or \"SHA-1/DSA\" (they are equivalent).  In the case of\n RSA, there are multiple choices for the message digest algorithm,\n so the signing algorithm could be specified as, for example,\n \"MD2/RSA\", \"MD5/RSA\" or \"SHA-1/RSA\".  The algorithm name must be\n specified, as there is no default.</p>\n\n<p> <p> The name of the Cryptography Package Provider is designated\n also by the Signature parameter to the constructor and the\n {@code verify} method.  If the provider is not\n specified, the default provider is used.  Each installation can\n be configured to use a particular provider as default.</p>\n\n<p> <p> Potential applications of SignedObject include:\n <ul>\n <li> It can be used\n internally to any Java runtime as an unforgeable authorization\n token -- one that can be passed around without the fear that the\n token can be maliciously modified without being detected.\n <li> It\n can be used to sign and serialize data/object for storage outside\n the Java runtime (e.g., storing critical access control data on\n disk).\n <li> Nested SignedObjects can be used to construct a logical\n sequence of signatures, resembling a chain of authorization and\n delegation.\n </li></li></li></ul></p>\n\n<p> @see Signature</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getAlgorithm' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.SignedObject'>java.security.SignedObject</span><br/><a href='source/SignedObject.html#java-security-SignedObject-method-getAlgorithm' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.SignedObject-method-getAlgorithm' class='name expandable'>getAlgorithm</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the name of the signature algorithm. ...</div><div class='long'><p>Retrieves the name of the signature algorithm.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the signature algorithm name.</p>\n</div></li></ul></div></div></div><div id='method-getObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.SignedObject'>java.security.SignedObject</span><br/><a href='source/SignedObject.html#java-security-SignedObject-method-getObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.SignedObject-method-getObject' class='name expandable'>getObject</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the encapsulated object. ...</div><div class='long'><p>Retrieves the encapsulated object.\n The encapsulated object is de-serialized before it is returned.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the encapsulated object.\n@exception IOException if an error occurs during de-serialization\n@exception ClassNotFoundException if an error occurs during\n de-serialization</p>\n</div></li></ul></div></div></div><div id='method-getSignature' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.SignedObject'>java.security.SignedObject</span><br/><a href='source/SignedObject.html#java-security-SignedObject-method-getSignature' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.SignedObject-method-getSignature' class='name expandable'>getSignature</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the signature on the signed object, in the form of a\n byte array. ...</div><div class='long'><p>Retrieves the signature on the signed object, in the form of a\n byte array.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the signature. Returns a new array each time this\n method is called.</p>\n</div></li></ul></div></div></div><div id='method-verify' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.SignedObject'>java.security.SignedObject</span><br/><a href='source/SignedObject.html#java-security-SignedObject-method-verify' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.SignedObject-method-verify' class='name expandable'>verify</a>( <span class='pre'>verificationKey, verificationEngine</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Verifies that the signature in this SignedObject is the valid\n signature for the object stored inside, with the given...</div><div class='long'><p>Verifies that the signature in this SignedObject is the valid\n signature for the object stored inside, with the given\n verification key, using the designated verification engine.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>verificationKey</span> : Object {PublicKey}<div class='sub-desc'><p>the public key for verification.</p>\n</div></li><li><span class='pre'>verificationEngine</span> : Object {Signature}<div class='sub-desc'><p>the signature verification engine.\n@exception SignatureException if signature verification failed.\n@exception InvalidKeyException if the verification key is invalid.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the signature\n is valid, {@code false} otherwise</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});