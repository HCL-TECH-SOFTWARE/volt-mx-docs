Ext.data.JsonP.android_webkit_PluginData({"tagname":"class","name":"android.webkit.PluginData","autodetected":{},"files":[{"filename":"PluginData.js","href":"PluginData.html#android-webkit-PluginData"}],"extends":"java.lang.Object","hide":true,"deprecated":{"text":"<p>This class was intended to be used by Gears. Since Gears was\n deprecated, so is this class.</p>\n"},"members":[],"alternateClassNames":[],"aliases":{},"id":"class-android.webkit.PluginData","short_doc":"This class encapsulates the content generated by a plugin. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.webkit.PluginData</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/PluginData.html#android-webkit-PluginData' target='_blank'>PluginData.js</a></div></pre><div class='doc-contents'><p>This class encapsulates the content generated by a plugin.  The\n data itself is meant to be loaded into webkit via the\n PluginContentLoader class, which needs to be able to construct an\n HTTP response. For this, it needs a stream with the response body,\n the length of the body, the response headers, and the response\n status code. The PluginData class is the container for all these\n parts.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This class has been <strong>deprecated</strong> </p>\n        <p>This class was intended to be used by Gears. Since Gears was\n deprecated, so is this class.</p>\n\n        </div>\n</div><div class='members'></div></div>","meta":{"deprecated":{"text":"<p>This class was intended to be used by Gears. Since Gears was\n deprecated, so is this class.</p>\n"}}});