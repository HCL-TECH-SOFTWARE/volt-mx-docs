Ext.data.JsonP.android_webkit_MimeTypeMap({"tagname":"class","name":"android.webkit.MimeTypeMap","autodetected":{},"files":[{"filename":"MimeTypeMap.js","href":"MimeTypeMap.html#android-webkit-MimeTypeMap"}],"extends":"java.lang.Object","members":[{"name":"getExtensionFromMimeType","tagname":"method","owner":"android.webkit.MimeTypeMap","id":"method-getExtensionFromMimeType","meta":{}},{"name":"getFileExtensionFromUrl","tagname":"method","owner":"android.webkit.MimeTypeMap","id":"method-getFileExtensionFromUrl","meta":{}},{"name":"getMimeTypeFromExtension","tagname":"method","owner":"android.webkit.MimeTypeMap","id":"method-getMimeTypeFromExtension","meta":{}},{"name":"getSingleton","tagname":"method","owner":"android.webkit.MimeTypeMap","id":"method-getSingleton","meta":{}},{"name":"hasExtension","tagname":"method","owner":"android.webkit.MimeTypeMap","id":"method-hasExtension","meta":{}},{"name":"hasMimeType","tagname":"method","owner":"android.webkit.MimeTypeMap","id":"method-hasMimeType","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.webkit.MimeTypeMap","short_doc":"Two-way map that maps MIME-types to file extensions and vice versa. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.webkit.MimeTypeMap</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/MimeTypeMap.html#android-webkit-MimeTypeMap' target='_blank'>MimeTypeMap.js</a></div></pre><div class='doc-contents'><p>Two-way map that maps MIME-types to file extensions and vice versa.</p>\n\n<p> <p>See also java.net.URLConnection.guessContentTypeFromName\n and java.net.URLConnection.guessContentTypeFromStream. This\n class and {@code URLConnection} share the same MIME-type database.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getExtensionFromMimeType' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.MimeTypeMap'>android.webkit.MimeTypeMap</span><br/><a href='source/MimeTypeMap.html#android-webkit-MimeTypeMap-method-getExtensionFromMimeType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.MimeTypeMap-method-getExtensionFromMimeType' class='name expandable'>getExtensionFromMimeType</a>( <span class='pre'>mimeType</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the registered extension for the given MIME type. ...</div><div class='long'><p>Return the registered extension for the given MIME type. Note that some\n MIME types map to multiple extensions. This call will return the most\n common extension for the given MIME type.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mimeType</span> : String<div class='sub-desc'><p>A MIME type (i.e. text/plain)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The extension for the given MIME type or {@code null} if there is none.</p>\n</div></li></ul></div></div></div><div id='method-getFileExtensionFromUrl' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.MimeTypeMap'>android.webkit.MimeTypeMap</span><br/><a href='source/MimeTypeMap.html#android-webkit-MimeTypeMap-method-getFileExtensionFromUrl' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.MimeTypeMap-method-getFileExtensionFromUrl' class='name expandable'>getFileExtensionFromUrl</a>( <span class='pre'>url</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the file extension or an empty string if there is no\n extension. ...</div><div class='long'><p>Returns the file extension or an empty string if there is no\n extension. This method is a convenience method for obtaining the\n extension of a url and has undefined results for other Strings.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>url</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The file extension of the given url.</p>\n</div></li></ul></div></div></div><div id='method-getMimeTypeFromExtension' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.MimeTypeMap'>android.webkit.MimeTypeMap</span><br/><a href='source/MimeTypeMap.html#android-webkit-MimeTypeMap-method-getMimeTypeFromExtension' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.MimeTypeMap-method-getMimeTypeFromExtension' class='name expandable'>getMimeTypeFromExtension</a>( <span class='pre'>extension</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the MIME type for the given extension. ...</div><div class='long'><p>Return the MIME type for the given extension.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>extension</span> : String<div class='sub-desc'><p>A file extension without the leading '.'</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The MIME type for the given extension or {@code null} if there is none.</p>\n</div></li></ul></div></div></div><div id='method-getSingleton' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.MimeTypeMap'>android.webkit.MimeTypeMap</span><br/><a href='source/MimeTypeMap.html#android-webkit-MimeTypeMap-method-getSingleton' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.MimeTypeMap-method-getSingleton' class='name expandable'>getSingleton</a>( <span class='pre'></span> ) : Object {android.webkit.MimeTypeMap}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the singleton instance of MimeTypeMap. ...</div><div class='long'><p>Get the singleton instance of MimeTypeMap.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.webkit.MimeTypeMap}</span><div class='sub-desc'><p>The singleton instance of the MIME-type map.</p>\n</div></li></ul></div></div></div><div id='method-hasExtension' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.MimeTypeMap'>android.webkit.MimeTypeMap</span><br/><a href='source/MimeTypeMap.html#android-webkit-MimeTypeMap-method-hasExtension' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.MimeTypeMap-method-hasExtension' class='name expandable'>hasExtension</a>( <span class='pre'>extension</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return {@code true} if the given extension has a registered MIME type. ...</div><div class='long'><p>Return {@code true} if the given extension has a registered MIME type.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>extension</span> : String<div class='sub-desc'><p>A file extension without the leading '.'</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there is an extension entry in the map.</p>\n</div></li></ul></div></div></div><div id='method-hasMimeType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.MimeTypeMap'>android.webkit.MimeTypeMap</span><br/><a href='source/MimeTypeMap.html#android-webkit-MimeTypeMap-method-hasMimeType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.MimeTypeMap-method-hasMimeType' class='name expandable'>hasMimeType</a>( <span class='pre'>mimeType</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return {@code true} if the given MIME type has an entry in the map. ...</div><div class='long'><p>Return {@code true} if the given MIME type has an entry in the map.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mimeType</span> : String<div class='sub-desc'><p>A MIME type (i.e. text/plain)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there is a mimeType entry in the map.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});