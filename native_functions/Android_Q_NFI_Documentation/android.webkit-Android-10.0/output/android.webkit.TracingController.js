Ext.data.JsonP.android_webkit_TracingController({"tagname":"class","name":"android.webkit.TracingController","autodetected":{},"files":[{"filename":"TracingController.js","href":"TracingController.html#android-webkit-TracingController"}],"extends":"java.lang.Object","members":[{"name":"getInstance","tagname":"method","owner":"android.webkit.TracingController","id":"method-getInstance","meta":{}},{"name":"isTracing","tagname":"method","owner":"android.webkit.TracingController","id":"method-isTracing","meta":{}},{"name":"start","tagname":"method","owner":"android.webkit.TracingController","id":"method-start","meta":{}},{"name":"stop","tagname":"method","owner":"android.webkit.TracingController","id":"method-stop","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.webkit.TracingController","short_doc":"Manages tracing of WebViews. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.webkit.TracingController</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/TracingController.html#android-webkit-TracingController' target='_blank'>TracingController.js</a></div></pre><div class='doc-contents'><p>Manages tracing of WebViews. In particular provides functionality for the app\n to enable/disable tracing of parts of code and to collect tracing data.\n This is useful for profiling performance issues, debugging and memory usage\n analysis in production and real life scenarios.\n <p>\n The resulting trace data is sent back as a byte sequence in json format. This\n file can be loaded in \"chrome://tracing\" for further analysis.\n <p>\n Example usage:\n <pre class=\"prettyprint\">\n TracingController tracingController = TracingController.getInstance();\n tracingController.start(new TracingConfig.Builder()\n                  .addCategories(TracingConfig.CATEGORIES_WEB_DEVELOPER).build());\n ...\n tracingController.stop(new FileOutputStream(\"trace.json\"),\n                        Executors.newSingleThreadExecutor());\n </pre></p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getInstance' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.TracingController'>android.webkit.TracingController</span><br/><a href='source/TracingController.html#android-webkit-TracingController-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.TracingController-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'></span> ) : Object {android.webkit.TracingController}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the default TracingController instance. ...</div><div class='long'><p>Returns the default TracingController instance. At present there is\n only one TracingController instance for all WebView instances,\n however this restriction may be relaxed in a future Android release.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.webkit.TracingController}</span><div class='sub-desc'><p>The default TracingController instance.</p>\n</div></li></ul></div></div></div><div id='method-isTracing' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.TracingController'>android.webkit.TracingController</span><br/><a href='source/TracingController.html#android-webkit-TracingController-method-isTracing' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.TracingController-method-isTracing' class='name expandable'>isTracing</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the WebView framework is tracing. ...</div><div class='long'><p>Returns whether the WebView framework is tracing.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if tracing is enabled.</p>\n</div></li></ul></div></div></div><div id='method-start' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.TracingController'>android.webkit.TracingController</span><br/><a href='source/TracingController.html#android-webkit-TracingController-method-start' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.TracingController-method-start' class='name expandable'>start</a>( <span class='pre'>tracingConfig</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts tracing all webviews. ...</div><div class='long'><p>Starts tracing all webviews. Depending on the trace mode in traceConfig\n specifies how the trace events are recorded.</p>\n\n<p> For tracing modes <a href=\"#!/api/android.webkit.TracingConfig-property-RECORD_UNTIL_FULL\" rel=\"android.webkit.TracingConfig-property-RECORD_UNTIL_FULL\" class=\"docClass\">android.webkit.TracingConfig.RECORD_UNTIL_FULL</a> and\n <a href=\"#!/api/android.webkit.TracingConfig-property-RECORD_CONTINUOUSLY\" rel=\"android.webkit.TracingConfig-property-RECORD_CONTINUOUSLY\" class=\"docClass\">android.webkit.TracingConfig.RECORD_CONTINUOUSLY</a> the events are recorded\n using an internal buffer and flushed to the outputStream when\n Executor) is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tracingConfig</span> : Object {TracingConfig}<div class='sub-desc'><p>Configuration options to use for tracing.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException If the system is already tracing.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the configuration is invalid (e.g.\n         invalid category pattern or invalid tracing mode).</p>\n</div></li></ul></div></div></div><div id='method-stop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.TracingController'>android.webkit.TracingController</span><br/><a href='source/TracingController.html#android-webkit-TracingController-method-stop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.TracingController-method-stop' class='name expandable'>stop</a>( <span class='pre'>outputStream, executor</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Stops tracing and flushes tracing data to the specified outputStream. ...</div><div class='long'><p>Stops tracing and flushes tracing data to the specified outputStream.</p>\n\n<p> The data is sent to the specified output stream in json format typically\n in chunks by invoking java.io.OutputStream.write(byte[]). On completion\n the java.io.OutputStream.close() method is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>outputStream</span> : Object {OutputStream}<div class='sub-desc'><p>The output stream the tracing data will be sent to. If null\n                     the tracing data will be discarded.</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>The java.util.concurrent.Executor on which the\n        outputStream java.io.OutputStream.write(byte[]) and\n        java.io.OutputStream.close() methods will be invoked.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>False if the WebView framework was not tracing at the time of the call,\n         true otherwise.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});