Ext.data.JsonP.android_webkit_WebMessagePort({"tagname":"class","name":"android.webkit.WebMessagePort","autodetected":{},"files":[{"filename":"WebMessagePort.js","href":"WebMessagePort.html#android-webkit-WebMessagePort"}],"extends":"java.lang.Object","members":[{"name":"close","tagname":"method","owner":"android.webkit.WebMessagePort","id":"method-close","meta":{}},{"name":"postMessage","tagname":"method","owner":"android.webkit.WebMessagePort","id":"method-postMessage","meta":{}},{"name":"setWebMessageCallback","tagname":"method","owner":"android.webkit.WebMessagePort","id":"method-setWebMessageCallback","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.webkit.WebMessagePort","short_doc":"The Java representation of the\n \n HTML5 message ports. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.webkit.WebMessagePort</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/WebMessagePort.html#android-webkit-WebMessagePort' target='_blank'>WebMessagePort.js</a></div></pre><div class='doc-contents'><p><p>The Java representation of the\n <a href=\"https://html.spec.whatwg.org/multipage/comms.html#messageport\">\n HTML5 message ports.</a></p>\n\n<p> <p>A Message port represents one endpoint of a Message Channel. In Android\n webview, there is no separate Message Channel object. When a message channel\n is created, both ports are tangled to each other and started, and then\n returned in a MessagePort array, see android.webkit.WebView.createWebMessageChannel\n for creating a message channel.</p>\n\n<p> <p>When a message port is first created or received via transfer, it does not\n have a WebMessageCallback to receive web messages. The messages are queued until\n a WebMessageCallback is set.</p>\n\n<p> <p>A message port should be closed when it is not used by the embedder application\n anymore. A closed port cannot be transferred or cannot be reopened to send\n messages. Close can be called multiple times.</p>\n\n<p> <p>When a port is transferred to JS, it cannot be used to send or receive messages\n at the Java side anymore. Different from HTML5 Spec, a port cannot be transferred\n if one of these has ever happened: i. a message callback was set, ii. a message was\n posted on it. A transferred port cannot be closed by the application, since\n the ownership is also transferred.</p>\n\n<p> <p>It is possible to transfer both ports of a channel to JS, for example for\n communication between subframes.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.WebMessagePort'>android.webkit.WebMessagePort</span><br/><a href='source/WebMessagePort.html#android-webkit-WebMessagePort-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.WebMessagePort-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Close the message port and free any resources associated with it. ...</div><div class='long'><p>Close the message port and free any resources associated with it.</p>\n</div></div></div><div id='method-postMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.WebMessagePort'>android.webkit.WebMessagePort</span><br/><a href='source/WebMessagePort.html#android-webkit-WebMessagePort-method-postMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.WebMessagePort-method-postMessage' class='name expandable'>postMessage</a>( <span class='pre'>message</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Post a WebMessage to the entangled port. ...</div><div class='long'><p>Post a WebMessage to the entangled port.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>message</span> : Object {WebMessage}<div class='sub-desc'><p>the message from Java to JS.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException If message port is already transferred or closed.</p>\n</div></li></ul></div></div></div><div id='method-setWebMessageCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.webkit.WebMessagePort'>android.webkit.WebMessagePort</span><br/><a href='source/WebMessagePort.html#android-webkit-WebMessagePort-method-setWebMessageCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.webkit.WebMessagePort-method-setWebMessageCallback' class='name expandable'>setWebMessageCallback</a>( <span class='pre'>callback, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets a callback to receive message events on the handler that is provided\n by the application. ...</div><div class='long'><p>Sets a callback to receive message events on the handler that is provided\n by the application.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callback</span> : Object {WebMessagePort.WebMessageCallback}<div class='sub-desc'><p>the message callback.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>the handler to receive the message messages.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});