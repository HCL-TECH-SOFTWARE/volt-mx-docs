Ext.data.JsonP.javax_obex_Authenticator({"tagname":"class","name":"javax.obex.Authenticator","autodetected":{},"files":[{"filename":"Authenticator.js","href":"Authenticator.html#javax-obex-Authenticator"}],"hide":true,"members":[{"name":"onAuthenticationChallenge","tagname":"method","owner":"javax.obex.Authenticator","id":"method-onAuthenticationChallenge","meta":{}},{"name":"onAuthenticationResponse","tagname":"method","owner":"javax.obex.Authenticator","id":"method-onAuthenticationResponse","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-javax.obex.Authenticator","short_doc":"This interface provides a way to respond to authentication challenge and\n authentication response headers. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Authenticator.html#javax-obex-Authenticator' target='_blank'>Authenticator.js</a></div></pre><div class='doc-contents'><p>This interface provides a way to respond to authentication challenge and\n authentication response headers. When a client or server receives an\n authentication challenge or authentication response header, the\n <code>onAuthenticationChallenge()</code> or\n <code>onAuthenticationResponse()</code> will be called, respectively, by the\n implementation.\n <P>\n For more information on how the authentication procedure works in OBEX,\n please review the IrOBEX specification at <A\n HREF=\"http://www.irda.org\">http://www.irda.org</A>.\n <P>\n <STRONG>Authentication Challenges</STRONG>\n <P>\n When a client or server receives an authentication challenge header, the\n <code>onAuthenticationChallenge()</code> method will be invoked by the OBEX\n API implementation. The application will then return the user name (if\n needed) and password via a <code>PasswordAuthentication</code> object. The\n password in this object is not sent in the authentication response. Instead,\n the 16-byte challenge received in the authentication challenge is combined\n with the password returned from the <code>onAuthenticationChallenge()</code>\n method and passed through the MD5 hash algorithm. The resulting value is sent\n in the authentication response along with the user name if it was provided.\n <P>\n <STRONG>Authentication Responses</STRONG>\n <P>\n When a client or server receives an authentication response header, the\n <code>onAuthenticationResponse()</code> method is invoked by the API\n implementation with the user name received in the authentication response\n header. (The user name will be <code>null</code> if no user name was provided\n in the authentication response header.) The application must determine the\n correct password. This value should be returned from the\n <code>onAuthenticationResponse()</code> method. If the authentication request\n should fail without the implementation checking the password,\n <code>null</code> should be returned by the application. (This is needed for\n reasons like not recognizing the user name, etc.) If the returned value is\n not <code>null</code>, the OBEX API implementation will combine the password\n returned from the <code>onAuthenticationResponse()</code> method and\n challenge sent via the authentication challenge, apply the MD5 hash\n algorithm, and compare the result to the response hash received in the\n authentication response header. If the values are not equal, an\n <code>IOException</code> will be thrown if the client requested\n authentication. If the server requested authentication, the\n <code>onAuthenticationFailure()</code> method will be called on the\n <code>ServerRequestHandler</code> that failed authentication. The connection\n is <B>not</B> closed if authentication failed.</P></P></P></P></P></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onAuthenticationChallenge' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.obex.Authenticator'>javax.obex.Authenticator</span><br/><a href='source/Authenticator.html#javax-obex-Authenticator-method-onAuthenticationChallenge' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.obex.Authenticator-method-onAuthenticationChallenge' class='name expandable'>onAuthenticationChallenge</a>( <span class='pre'>description, isUserIdRequired, isFullAccess</span> ) : Object {javax.obex.PasswordAuthentication}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a client or a server receives an authentication challenge\n header. ...</div><div class='long'><p>Called when a client or a server receives an authentication challenge\n header. It should respond to the challenge with a\n <code>PasswordAuthentication</code> that contains the correct user name\n and password for the challenge.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>description</span> : String<div class='sub-desc'><p>the description of which user name and password should\n        be used; if no description is provided in the authentication\n        challenge or the description is encoded in an encoding scheme that\n        is not supported, an empty string will be provided</p>\n</div></li><li><span class='pre'>isUserIdRequired</span> : Boolean<div class='sub-desc'><p><code>true</code> if the user ID is required;\n        <code>false</code> if the user ID is not required</p>\n</div></li><li><span class='pre'>isFullAccess</span> : Boolean<div class='sub-desc'><p><code>true</code> if full access to the server will\n        be granted; <code>false</code> if read only access will be granted</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.obex.PasswordAuthentication}</span><div class='sub-desc'><p>a <code>PasswordAuthentication</code> object containing the user\n         name and password used for authentication</p>\n</div></li></ul></div></div></div><div id='method-onAuthenticationResponse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.obex.Authenticator'>javax.obex.Authenticator</span><br/><a href='source/Authenticator.html#javax-obex-Authenticator-method-onAuthenticationResponse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.obex.Authenticator-method-onAuthenticationResponse' class='name expandable'>onAuthenticationResponse</a>( <span class='pre'>userName</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a client or server receives an authentication response\n header. ...</div><div class='long'><p>Called when a client or server receives an authentication response\n header. This method will provide the user name and expect the correct\n password to be returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>userName</span> : Object {byte[]}<div class='sub-desc'><p>the user name provided in the authentication response; may\n        be <code>null</code></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the correct password for the user name provided; if\n         <code>null</code> is returned then the authentication request\n         failed</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});