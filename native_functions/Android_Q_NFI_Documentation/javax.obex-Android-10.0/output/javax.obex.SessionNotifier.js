Ext.data.JsonP.javax_obex_SessionNotifier({"tagname":"class","name":"javax.obex.SessionNotifier","autodetected":{},"files":[{"filename":"SessionNotifier.js","href":"SessionNotifier.html#javax-obex-SessionNotifier"}],"hide":true,"members":[{"name":"acceptAndOpen","tagname":"method","owner":"javax.obex.SessionNotifier","id":"method-acceptAndOpen","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-javax.obex.SessionNotifier","short_doc":"The SessionNotifier interface defines a connection notifier for\n server-side OBEX connections. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/SessionNotifier.html#javax-obex-SessionNotifier' target='_blank'>SessionNotifier.js</a></div></pre><div class='doc-contents'><p>The <code>SessionNotifier</code> interface defines a connection notifier for\n server-side OBEX connections. When a <code>SessionNotifier</code> is created\n and calls <code>acceptAndOpen()</code>, it will begin listening for clients\n to create a connection at the transport layer. When the transport layer\n connection is received, the <code>acceptAndOpen()</code> method will return a\n <code>javax.microedition.io.Connection</code> that is the connection to the\n client. The <code>acceptAndOpen()</code> method also takes a\n <code>ServerRequestHandler</code> argument that will process the requests\n from the client that connects to the server.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-acceptAndOpen' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.obex.SessionNotifier'>javax.obex.SessionNotifier</span><br/><a href='source/SessionNotifier.html#javax-obex-SessionNotifier-method-acceptAndOpen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.obex.SessionNotifier-method-acceptAndOpen' class='name expandable'>acceptAndOpen</a>( <span class='pre'>handler, auth</span> ) : Object {javax.obex.ObexSession}<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits for a transport layer connection to be established and specifies\n the handler to handle the requests from the c...</div><div class='long'><p>Waits for a transport layer connection to be established and specifies\n the handler to handle the requests from the client and the\n <code>Authenticator</code> to use to respond to authentication challenge\n and authentication response headers.\n <P>\n <H4>Additional Note for OBEX over Bluetooth</H4> If this method is called\n on a <code>SessionNotifier</code> object that does not have a\n <code>ServiceRecord</code> in the SDDB, the <code>ServiceRecord</code>\n for this object will be added to the SDDB. This method requests the BCC\n to put the local device in connectable mode so that it will respond to\n connection attempts by clients.\n <P>\n The following checks are done to verify that the service record provided\n is valid. If any of these checks fail, then a\n <code>ServiceRegistrationException</code> is thrown.\n <UL>\n <LI>ServiceClassIDList and ProtocolDescriptorList, the mandatory service\n attributes for a <code>btgoep</code> service record, must be present in\n the <code>ServiceRecord</code> associated with this notifier.\n <LI>L2CAP, RFCOMM and OBEX must all be in the ProtocolDescriptorList\n <LI>The <code>ServiceRecord</code> associated with this notifier must not\n have changed the RFCOMM server channel number\n </LI></LI></LI></UL>\n <P>\n This method will not ensure that <code>ServiceRecord</code> associated\n with this notifier is a completely valid service record. It is the\n responsibility of the application to ensure that the service record\n follows all of the applicable syntactic and semantic rules for service\n record correctness.</P></P></P></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>handler</span> : Object {ServerRequestHandler}<div class='sub-desc'><p>the request handler that will respond to OBEX requests</p>\n</div></li><li><span class='pre'>auth</span> : Object {Authenticator}<div class='sub-desc'><p>the <code>Authenticator</code> to use with this connection;\n        if <code>null</code> then no <code>Authenticator</code> will be\n        used</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.obex.ObexSession}</span><div class='sub-desc'><p>the connection to the client</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an error occurs in the transport layer</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if <code>handler</code> is <code>null</code></p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});