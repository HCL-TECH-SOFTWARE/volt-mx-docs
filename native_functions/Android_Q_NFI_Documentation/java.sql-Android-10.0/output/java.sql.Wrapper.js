Ext.data.JsonP.java_sql_Wrapper({"tagname":"class","name":"java.sql.Wrapper","autodetected":{},"files":[{"filename":"Wrapper.js","href":"Wrapper.html#java-sql-Wrapper"}],"since":"1.6","members":[{"name":"isWrapperFor","tagname":"method","owner":"java.sql.Wrapper","id":"method-isWrapperFor","meta":{}},{"name":"unwrap","tagname":"method","owner":"java.sql.Wrapper","id":"method-unwrap","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.sql.Wrapper","short_doc":"Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance\n in question...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Wrapper.html#java-sql-Wrapper' target='_blank'>Wrapper.js</a></div></pre><div class='doc-contents'><p>Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance\n in question is in fact a proxy class.\n <p>\n The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond\n the traditional JDBC API that are specific to a data source. Developers may wish to gain access to\n these resources that are wrapped (the delegates) as  proxy class instances representing the\n the actual resources. This interface describes a standard mechanism to access\n these wrapped resources\n represented by their proxy, to permit direct access to the resource delegates.</p>\n        <p>Available since: <b>1.6</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-isWrapperFor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.sql.Wrapper'>java.sql.Wrapper</span><br/><a href='source/Wrapper.html#java-sql-Wrapper-method-isWrapperFor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.sql.Wrapper-method-isWrapperFor' class='name expandable'>isWrapperFor</a>( <span class='pre'>iface</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this either implements the interface argument or is directly or indirectly a wrapper\n for an object t...</div><div class='long'><p>Returns true if this either implements the interface argument or is directly or indirectly a wrapper\n for an object that does. Returns false otherwise. If this implements the interface then return true,\n else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped\n object. If this does not implement the interface and is not a wrapper, return false.\n This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that\n callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method\n returns true then calling <code>unwrap</code> with the same argument should succeed.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>iface</span> : Object {java.lang.Class}<div class='sub-desc'><p>a Class defining an interface.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this implements the interface or directly or indirectly wraps an object that does.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p><a href=\"#!/api/java.sql.SQLException\" rel=\"java.sql.SQLException\" class=\"docClass\">java.sql.SQLException</a>  if an error occurs while determining whether this is a wrapper\n for an object with the given interface.</p>\n</div></li></ul></div></div></div><div id='method-unwrap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.sql.Wrapper'>java.sql.Wrapper</span><br/><a href='source/Wrapper.html#java-sql-Wrapper-method-unwrap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.sql.Wrapper-method-unwrap' class='name expandable'>unwrap</a>( <span class='pre'>iface</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object that implements the given interface to allow access to\n non-standard methods, or standard methods n...</div><div class='long'><p>Returns an object that implements the given interface to allow access to\n non-standard methods, or standard methods not exposed by the proxy.</p>\n\n<p> If the receiver implements the interface then the result is the receiver\n or a proxy for the receiver. If the receiver is a wrapper\n and the wrapped object implements the interface then the result is the\n wrapped object or a proxy for the wrapped object. Otherwise return the\n the result of calling <code>unwrap</code> recursively on the wrapped object\n or a proxy for that result. If the receiver is not a\n wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>iface</span> : Object {java.lang.Class}<div class='sub-desc'><p>A Class defining an interface that the result must implement.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>an object that implements the interface. May be a proxy for the actual implementing object.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p><a href=\"#!/api/java.sql.SQLException\" rel=\"java.sql.SQLException\" class=\"docClass\">java.sql.SQLException</a> If no object found that implements the interface</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});