Ext.data.JsonP.android_media_audiofx_Visualizer_OnDataCaptureListener({"tagname":"class","name":"android.media.audiofx.Visualizer.OnDataCaptureListener","autodetected":{},"files":[{"filename":"OnDataCaptureListener.js","href":"OnDataCaptureListener.html#android-media-audiofx-Visualizer-OnDataCaptureListener"}],"members":[{"name":"onFftDataCapture","tagname":"method","owner":"android.media.audiofx.Visualizer.OnDataCaptureListener","id":"method-onFftDataCapture","meta":{}},{"name":"onWaveFormDataCapture","tagname":"method","owner":"android.media.audiofx.Visualizer.OnDataCaptureListener","id":"method-onWaveFormDataCapture","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.audiofx.Visualizer.OnDataCaptureListener","short_doc":"The OnDataCaptureListener interface defines methods called by the Visualizer to periodically\n update the audio visual...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/OnDataCaptureListener.html#android-media-audiofx-Visualizer-OnDataCaptureListener' target='_blank'>OnDataCaptureListener.js</a></div></pre><div class='doc-contents'><p>The OnDataCaptureListener interface defines methods called by the Visualizer to periodically\n update the audio visualization capture.\n The client application can implement this interface and register the listener with the\n int, boolean, boolean) method.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onFftDataCapture' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.audiofx.Visualizer.OnDataCaptureListener'>android.media.audiofx.Visualizer.OnDataCaptureListener</span><br/><a href='source/OnDataCaptureListener.html#android-media-audiofx-Visualizer-OnDataCaptureListener-method-onFftDataCapture' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.audiofx.Visualizer.OnDataCaptureListener-method-onFftDataCapture' class='name expandable'>onFftDataCapture</a>( <span class='pre'>visualizer, fft, samplingRate</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Method called when a new frequency capture is available. ...</div><div class='long'><p>Method called when a new frequency capture is available.\n <p>Data in the fft buffer is valid only within the scope of the callback.\n Applications which need access to the fft data after returning from the callback\n should make a copy of the data instead of holding a reference.\n <p>For the explanation of the fft data array layout, and the example\n code for processing it, please see the documentation for getFft(byte[]) method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>visualizer</span> : Object {Visualizer}<div class='sub-desc'><p>Visualizer object on which the listener is registered.</p>\n</div></li><li><span class='pre'>fft</span> : Object {byte[]}<div class='sub-desc'><p>array of bytes containing the frequency representation.</p>\n</div></li><li><span class='pre'>samplingRate</span> : Number<div class='sub-desc'><p>sampling rate of the visualized audio.</p>\n</div></li></ul></div></div></div><div id='method-onWaveFormDataCapture' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.audiofx.Visualizer.OnDataCaptureListener'>android.media.audiofx.Visualizer.OnDataCaptureListener</span><br/><a href='source/OnDataCaptureListener.html#android-media-audiofx-Visualizer-OnDataCaptureListener-method-onWaveFormDataCapture' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.audiofx.Visualizer.OnDataCaptureListener-method-onWaveFormDataCapture' class='name expandable'>onWaveFormDataCapture</a>( <span class='pre'>visualizer, waveform, samplingRate</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Method called when a new waveform capture is available. ...</div><div class='long'><p>Method called when a new waveform capture is available.\n <p>Data in the waveform buffer is valid only within the scope of the callback.\n Applications which need access to the waveform data after returning from the callback\n should make a copy of the data instead of holding a reference.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>visualizer</span> : Object {Visualizer}<div class='sub-desc'><p>Visualizer object on which the listener is registered.</p>\n</div></li><li><span class='pre'>waveform</span> : Object {byte[]}<div class='sub-desc'><p>array of bytes containing the waveform representation.</p>\n</div></li><li><span class='pre'>samplingRate</span> : Number<div class='sub-desc'><p>sampling rate of the visualized audio.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});