Ext.data.JsonP.android_util_apk_VerityBuilder({"tagname":"class","name":"android.util.apk.VerityBuilder","autodetected":{},"files":[{"filename":"VerityBuilder.js","href":"VerityBuilder.html#android-util-apk-VerityBuilder"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"generateApkVerityTree","tagname":"method","owner":"android.util.apk.VerityBuilder","id":"method-generateApkVerityTree","meta":{}},{"name":"generateFsVerityTree","tagname":"method","owner":"android.util.apk.VerityBuilder","id":"method-generateFsVerityTree","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.util.apk.VerityBuilder","short_doc":"VerityBuilder builds the verity Merkle tree and other metadata. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.util.apk.VerityBuilder</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/VerityBuilder.html#android-util-apk-VerityBuilder' target='_blank'>VerityBuilder.js</a></div></pre><div class='doc-contents'><p>VerityBuilder builds the verity Merkle tree and other metadata.  The generated tree format can\n be stored on disk for fs-verity setup and used by kernel.  The builder support standard\n fs-verity, and Android specific apk-verity that requires additional kernel patches.</p>\n\n<p> <p>Unlike a regular Merkle tree of fs-verity, the apk-verity tree does not cover the file content\n fully, and has to skip APK Signing Block with some special treatment for the \"Central Directory\n offset\" field of ZIP End of Central Directory.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-generateApkVerityTree' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.apk.VerityBuilder'>android.util.apk.VerityBuilder</span><br/><a href='source/VerityBuilder.html#android-util-apk-VerityBuilder-method-generateApkVerityTree' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.apk.VerityBuilder-method-generateApkVerityTree' class='name expandable'>generateApkVerityTree</a>( <span class='pre'></span> ) : Object {android.util.apk.VerityBuilder.VerityResult}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates the 4k, SHA-256 based Merkle tree for the given APK and stores in the ByteBuffer created by the android.uti...</div><div class='long'><p>Generates the 4k, SHA-256 based Merkle tree for the given APK and stores in the ByteBuffer created by the <a href=\"#!/api/android.util.apk.ByteBufferFactory\" rel=\"android.util.apk.ByteBufferFactory\" class=\"docClass\">android.util.apk.ByteBufferFactory</a>.  The Merkle tree does not cover Signing\n Block specificed in {@code signatureInfo}.  The output is suitable to be used as the on-disk\n format for fs-verity to use (with elide and patch extensions).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.util.apk.VerityBuilder.VerityResult}</span><div class='sub-desc'><p>VerityResult containing a buffer with the generated Merkle tree stored at the\n         front, the tree size, and the calculated root hash.</p>\n</div></li></ul></div></div></div><div id='method-generateFsVerityTree' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.util.apk.VerityBuilder'>android.util.apk.VerityBuilder</span><br/><a href='source/VerityBuilder.html#android-util-apk-VerityBuilder-method-generateFsVerityTree' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.util.apk.VerityBuilder-method-generateFsVerityTree' class='name expandable'>generateFsVerityTree</a>( <span class='pre'></span> ) : Object {android.util.apk.VerityBuilder.VerityResult}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates the 4k, SHA-256 based Merkle tree for the given APK and stores in the ByteBuffer created by the android.uti...</div><div class='long'><p>Generates the 4k, SHA-256 based Merkle tree for the given APK and stores in the ByteBuffer created by the <a href=\"#!/api/android.util.apk.ByteBufferFactory\" rel=\"android.util.apk.ByteBufferFactory\" class=\"docClass\">android.util.apk.ByteBufferFactory</a>.  The output is suitable to be used as\n the on-disk format for fs-verity to use.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.util.apk.VerityBuilder.VerityResult}</span><div class='sub-desc'><p>VerityResult containing a buffer with the generated Merkle tree stored at the\n         front, the tree size, and the calculated root hash.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});