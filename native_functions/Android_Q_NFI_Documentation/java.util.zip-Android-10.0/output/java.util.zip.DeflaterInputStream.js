Ext.data.JsonP.java_util_zip_DeflaterInputStream({"tagname":"class","name":"java.util.zip.DeflaterInputStream","autodetected":{},"files":[{"filename":"DeflaterInputStream.js","href":"DeflaterInputStream.html#java-util-zip-DeflaterInputStream"}],"extends":"java.io.FilterInputStream","since":"1.6","author":[{"tagname":"author","name":"David R Tribble (david@tribble.com)","email":null}],"members":[{"name":"available","tagname":"method","owner":"java.util.zip.DeflaterInputStream","id":"method-available","meta":{}},{"name":"close","tagname":"method","owner":"java.util.zip.DeflaterInputStream","id":"method-close","meta":{}},{"name":"mark","tagname":"method","owner":"java.util.zip.DeflaterInputStream","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.util.zip.DeflaterInputStream","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.util.zip.DeflaterInputStream","id":"method-read","meta":{}},{"name":"reset","tagname":"method","owner":"java.util.zip.DeflaterInputStream","id":"method-reset","meta":{}},{"name":"skip","tagname":"method","owner":"java.util.zip.DeflaterInputStream","id":"method-skip","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.zip.DeflaterInputStream","short_doc":"Implements an input stream filter for compressing data in the \"deflate\"\n compression format. ...","classIcon":"icon-class","superclasses":["java.io.FilterInputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.io.FilterInputStream<div class='subclass '><strong>java.util.zip.DeflaterInputStream</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/DeflaterInputStream.html#java-util-zip-DeflaterInputStream' target='_blank'>DeflaterInputStream.js</a></div></pre><div class='doc-contents'><p>Implements an input stream filter for compressing data in the \"deflate\"\n compression format.</p>\n\n<p> @see DeflaterOutputStream\n @see InflaterOutputStream\n @see InflaterInputStream</p>\n        <p>Available since: <b>1.6</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-available' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.DeflaterInputStream'>java.util.zip.DeflaterInputStream</span><br/><a href='source/DeflaterInputStream.html#java-util-zip-DeflaterInputStream-method-available' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.DeflaterInputStream-method-available' class='name expandable'>available</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns 0 after EOF has been reached, otherwise always return 1. ...</div><div class='long'><p>Returns 0 after EOF has been reached, otherwise always return 1.\n <p>\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>zero after the end of the underlying input stream has been\n reached, otherwise always returns 1</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs or if this stream is\n already closed</p>\n</div></li></ul></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.DeflaterInputStream'>java.util.zip.DeflaterInputStream</span><br/><a href='source/DeflaterInputStream.html#java-util-zip-DeflaterInputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.DeflaterInputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this input stream and its underlying input stream, discarding\n any pending uncompressed data. ...</div><div class='long'><p>Closes this input stream and its underlying input stream, discarding\n any pending uncompressed data.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-mark' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.DeflaterInputStream'>java.util.zip.DeflaterInputStream</span><br/><a href='source/DeflaterInputStream.html#java-util-zip-DeflaterInputStream-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.DeflaterInputStream-method-mark' class='name expandable'>mark</a>( <span class='pre'>limit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This operation is not supported. ...</div><div class='long'><p><i>This operation is not supported</i>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>limit</span> : Number<div class='sub-desc'><p>maximum bytes that can be read before invalidating the position marker</p>\n</div></li></ul></div></div></div><div id='method-markSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.DeflaterInputStream'>java.util.zip.DeflaterInputStream</span><br/><a href='source/DeflaterInputStream.html#java-util-zip-DeflaterInputStream-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.DeflaterInputStream-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Always returns {@code false} because this input stream does not support\n the mark() and reset() methods. ...</div><div class='long'><p>Always returns {@code false} because this input stream does not support\n the <a href=\"#!/api/java.util.zip.DeflaterInputStream-method-mark\" rel=\"java.util.zip.DeflaterInputStream-method-mark\" class=\"docClass\">mark()</a> and <a href=\"#!/api/java.util.zip.DeflaterInputStream-method-reset\" rel=\"java.util.zip.DeflaterInputStream-method-reset\" class=\"docClass\">reset()</a> methods.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>false, always</p>\n</div></li></ul></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.DeflaterInputStream'>java.util.zip.DeflaterInputStream</span><br/><a href='source/DeflaterInputStream.html#java-util-zip-DeflaterInputStream-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.DeflaterInputStream-method-read' class='name expandable'>read</a>( <span class='pre'>b, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads compressed data into a byte array. ...</div><div class='long'><p>Reads compressed data into a byte array.\n This method will block until some input can be read and compressed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>buffer into which the data is read</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>starting offset of the data within {@code b}</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>maximum number of compressed bytes to read into {@code b}</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes read, or -1 if the end of the\n uncompressed input stream is reached</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException  if {@code len > b.length - off}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs or if this input stream is\n already closed</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.DeflaterInputStream'>java.util.zip.DeflaterInputStream</span><br/><a href='source/DeflaterInputStream.html#java-util-zip-DeflaterInputStream-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.DeflaterInputStream-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This operation is not supported. ...</div><div class='long'><p><i>This operation is not supported</i>.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException always thrown</p>\n</div></li></ul></div></div></div><div id='method-skip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.DeflaterInputStream'>java.util.zip.DeflaterInputStream</span><br/><a href='source/DeflaterInputStream.html#java-util-zip-DeflaterInputStream-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.DeflaterInputStream-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips over and discards data from the input stream. ...</div><div class='long'><p>Skips over and discards data from the input stream.\n This method may block until the specified number of bytes are read and\n skipped. <em>Note:</em> While {@code n} is given as a {@code long},\n the maximum number of bytes which can be skipped is\n {@code Integer.MAX_VALUE}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>number of bytes to be skipped</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes skipped</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs or if this stream is\n already closed</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});