Ext.data.JsonP.java_util_zip_InflaterOutputStream({"tagname":"class","name":"java.util.zip.InflaterOutputStream","autodetected":{},"files":[{"filename":"InflaterOutputStream.js","href":"InflaterOutputStream.html#java-util-zip-InflaterOutputStream"}],"extends":"java.io.FilterOutputStream","since":"1.6","author":[{"tagname":"author","name":"David R Tribble (david@tribble.com)","email":null}],"members":[{"name":"close","tagname":"method","owner":"java.util.zip.InflaterOutputStream","id":"method-close","meta":{}},{"name":"finish","tagname":"method","owner":"java.util.zip.InflaterOutputStream","id":"method-finish","meta":{}},{"name":"flush","tagname":"method","owner":"java.util.zip.InflaterOutputStream","id":"method-flush","meta":{}},{"name":"write","tagname":"method","owner":"java.util.zip.InflaterOutputStream","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.zip.InflaterOutputStream","short_doc":"Implements an output stream filter for uncompressing data stored in the\n \"deflate\" compression format. ...","classIcon":"icon-class","superclasses":["java.io.FilterOutputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.io.FilterOutputStream<div class='subclass '><strong>java.util.zip.InflaterOutputStream</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/InflaterOutputStream.html#java-util-zip-InflaterOutputStream' target='_blank'>InflaterOutputStream.js</a></div></pre><div class='doc-contents'><p>Implements an output stream filter for uncompressing data stored in the\n \"deflate\" compression format.</p>\n\n<p> @see InflaterInputStream\n @see DeflaterInputStream\n @see DeflaterOutputStream</p>\n        <p>Available since: <b>1.6</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.InflaterOutputStream'>java.util.zip.InflaterOutputStream</span><br/><a href='source/InflaterOutputStream.html#java-util-zip-InflaterOutputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.InflaterOutputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes any remaining uncompressed data to the output stream and closes\n the underlying output stream. ...</div><div class='long'><p>Writes any remaining uncompressed data to the output stream and closes\n the underlying output stream.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-finish' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.InflaterOutputStream'>java.util.zip.InflaterOutputStream</span><br/><a href='source/InflaterOutputStream.html#java-util-zip-InflaterOutputStream-method-finish' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.InflaterOutputStream-method-finish' class='name expandable'>finish</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Finishes writing uncompressed data to the output stream without closing\n the underlying stream. ...</div><div class='long'><p>Finishes writing uncompressed data to the output stream without closing\n the underlying stream.  Use this method when applying multiple filters in\n succession to the same output stream.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs or this stream is already\n closed</p>\n</div></li></ul></div></div></div><div id='method-flush' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.InflaterOutputStream'>java.util.zip.InflaterOutputStream</span><br/><a href='source/InflaterOutputStream.html#java-util-zip-InflaterOutputStream-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.InflaterOutputStream-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Flushes this output stream, forcing any pending buffered output bytes to be\n written. ...</div><div class='long'><p>Flushes this output stream, forcing any pending buffered output bytes to be\n written.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs or this stream is already\n closed</p>\n</div></li></ul></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.zip.InflaterOutputStream'>java.util.zip.InflaterOutputStream</span><br/><a href='source/InflaterOutputStream.html#java-util-zip-InflaterOutputStream-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.zip.InflaterOutputStream-method-write' class='name expandable'>write</a>( <span class='pre'>b, off, len</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes an array of bytes to the uncompressed output stream. ...</div><div class='long'><p>Writes an array of bytes to the uncompressed output stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>buffer containing compressed data to decompress and write to\n the output stream</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>starting offset of the compressed data within {@code b}</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>number of bytes to decompress from {@code b}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException if {@code off &lt; 0}, or if\n {@code len &lt; 0}, or if {@code len > b.length - off}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs or this stream is already\n closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code b} is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ZipException if a compression (ZIP) format error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});