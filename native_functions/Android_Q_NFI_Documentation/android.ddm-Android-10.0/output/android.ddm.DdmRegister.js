Ext.data.JsonP.android_ddm_DdmRegister({"tagname":"class","name":"android.ddm.DdmRegister","autodetected":{},"files":[{"filename":"DdmRegister.js","href":"DdmRegister.html#android-ddm-DdmRegister"}],"extends":"java.lang.Object","members":[{"name":"registerHandlers","tagname":"method","owner":"android.ddm.DdmRegister","id":"method-registerHandlers","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.ddm.DdmRegister","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.ddm.DdmRegister</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/DdmRegister.html#android-ddm-DdmRegister' target='_blank'>DdmRegister.js</a></div></pre><div class='doc-contents'><p>Just a place to stick handler registrations, instead of scattering\n them around.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-registerHandlers' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.ddm.DdmRegister'>android.ddm.DdmRegister</span><br/><a href='source/DdmRegister.html#android-ddm-DdmRegister-method-registerHandlers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.ddm.DdmRegister-method-registerHandlers' class='name expandable'>registerHandlers</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register handlers for all known chunk types. ...</div><div class='long'><p>Register handlers for all known chunk types.</p>\n\n<p> If you write a handler, add a registration call here.</p>\n\n<p> Note that this is invoked by the application (usually through a\n static initializer in the main class), not the VM.  It's done this\n way so that the handlers can use Android classes with native calls\n that aren't registered until after the VM is initialized (e.g.\n logging).  It also allows debugging of DDM handler initialization.</p>\n\n<p> The chunk dispatcher will pause until we call registrationComplete(),\n so that we don't have a race that causes us to drop packets before\n we finish here.</p>\n</div></div></div></div></div></div></div>","meta":{}});