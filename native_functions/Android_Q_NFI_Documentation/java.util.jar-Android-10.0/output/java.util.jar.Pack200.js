Ext.data.JsonP.java_util_jar_Pack200({"tagname":"class","name":"java.util.jar.Pack200","autodetected":{},"files":[{"filename":"Pack200.js","href":"Pack200.html#java-util-jar-Pack200"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"John Rose","email":null},{"tagname":"author","name":"Kumar Srinivasan","email":null}],"since":"1.5","members":[{"name":"newPacker","tagname":"method","owner":"java.util.jar.Pack200","id":"method-newPacker","meta":{}},{"name":"newUnpacker","tagname":"method","owner":"java.util.jar.Pack200","id":"method-newUnpacker","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.jar.Pack200","short_doc":"Transforms a JAR file to or from a packed stream in Pack200 format. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.jar.Pack200</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Pack200.html#java-util-jar-Pack200' target='_blank'>Pack200.js</a></div></pre><div class='doc-contents'><p>Transforms a JAR file to or from a packed stream in Pack200 format.\n Please refer to Network Transfer Format JSR 200 Specification at\n <a href=http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html>http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html</a>\n <p>\n Typically the packer engine is used by application developers\n to deploy or host JAR files on a website.\n The unpacker  engine is used by deployment applications to\n transform the byte-stream back to JAR format.\n <p>\n Here is an example using  packer and unpacker:\n <pre>{@code\n    import <a href=\"#!/api/java.util.jar.Pack200\" rel=\"java.util.jar.Pack200\" class=\"docClass\">java.util.jar.Pack200</a>;\n    import <a href=\"#!/api/java.util.jar.Pack200\" rel=\"java.util.jar.Pack200\" class=\"docClass\">java.util.jar.Pack200</a>.*;\n    ...\n    // Create the Packer object\n    Packer packer = Pack200.newPacker();</pre></p>\n\n<pre><code>// Initialize the state by setting the desired properties\nMap p = packer.properties();\n// take more time choosing codings for better compression\np.put(Packer.EFFORT, \"7\");  // default is \"5\"\n// use largest-possible archive segments (&gt;10% better compression).\np.put(Packer.SEGMENT_LIMIT, \"-1\");\n// reorder files for better compression.\np.put(Packer.KEEP_FILE_ORDER, Packer.FALSE);\n// smear modification times to a single value.\np.put(Packer.MODIFICATION_TIME, Packer.LATEST);\n// ignore all JAR deflation requests,\n// transmitting a single request to use \"store\" mode.\np.put(Packer.DEFLATE_HINT, Packer.FALSE);\n// discard debug attributes\np.put(Packer.CODE_ATTRIBUTE_PFX+\"LineNumberTable\", Packer.STRIP);\n// throw an error if an attribute is unrecognized\np.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR);\n// pass one class file uncompressed:\np.put(Packer.PASS_FILE_PFX+0, \"mutants/Rogue.class\");\ntry {\n    JarFile jarFile = new JarFile(\"/tmp/testref.jar\");\n    FileOutputStream fos = new FileOutputStream(\"/tmp/test.pack\");\n    // Call the packer\n    packer.pack(jarFile, fos);\n    jarFile.close();\n    fos.close();\n\n    File f = new File(\"/tmp/test.pack\");\n    FileOutputStream fostream = new FileOutputStream(\"/tmp/test.jar\");\n    JarOutputStream jostream = new JarOutputStream(fostream);\n    Unpacker unpacker = Pack200.newUnpacker();\n    // Call the unpacker\n    unpacker.unpack(f, jostream);\n    // Must explicitly close the output.\n    jostream.close();\n} catch (IOException ioe) {\n    ioe.printStackTrace();\n}\n</code></pre>\n\n<p> }\n <p>\n A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers.\n The deployment applications can use \"Accept-Encoding=pack200-gzip\". This\n indicates to the server that the client application desires a version of\n the file encoded with Pack200 and further compressed with gzip. Please\n refer to  <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/deployment/deployment-guide/pack200.html\">Java Deployment Guide</a> for more details and\n techniques.\n <p>\n Unless otherwise noted, passing a <tt>null</tt> argument to a constructor or\n method in this class will cause a NullPointerException to be thrown.</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-newPacker' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.jar.Pack200'>java.util.jar.Pack200</span><br/><a href='source/Pack200.html#java-util-jar-Pack200-method-newPacker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.jar.Pack200-method-newPacker' class='name expandable'>newPacker</a>( <span class='pre'></span> ) : Object {java.util.jar.Pack200.Packer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtain new instance of a class that implements Packer. ...</div><div class='long'><p>Obtain new instance of a class that implements Packer.\n <ul>\n <li><p>If the system property <tt><a href=\"#!/api/java.util.jar.Pack200.Packer\" rel=\"java.util.jar.Pack200.Packer\" class=\"docClass\">java.util.jar.Pack200.Packer</a></tt>\n is defined, then the value is taken to be the fully-qualified name\n of a concrete implementation class, which must implement Packer.\n This class is loaded and instantiated.  If this process fails\n then an unspecified error is thrown.</p></li></ul></p>\n\n<p> <li><p>If an implementation has not been specified with the system\n property, then the system-default implementation class is instantiated,\n and the result is returned.</p></li>\n </p>\n\n<p> <p>Note:  The returned object is not guaranteed to operate\n correctly if multiple threads use it at the same time.\n A multi-threaded application should either allocate multiple\n packer engines, or else serialize use of one engine with a lock.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.jar.Pack200.Packer}</span><div class='sub-desc'><p>A newly allocated Packer engine.</p>\n</div></li></ul></div></div></div><div id='method-newUnpacker' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.jar.Pack200'>java.util.jar.Pack200</span><br/><a href='source/Pack200.html#java-util-jar-Pack200-method-newUnpacker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.jar.Pack200-method-newUnpacker' class='name expandable'>newUnpacker</a>( <span class='pre'></span> ) : Object {java.util.jar.Pack200.Unpacker}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtain new instance of a class that implements Unpacker. ...</div><div class='long'><p>Obtain new instance of a class that implements Unpacker.\n <ul>\n <li><p>If the system property <tt><a href=\"#!/api/java.util.jar.Pack200.Unpacker\" rel=\"java.util.jar.Pack200.Unpacker\" class=\"docClass\">java.util.jar.Pack200.Unpacker</a></tt>\n is defined, then the value is taken to be the fully-qualified\n name of a concrete implementation class, which must implement Unpacker.\n The class is loaded and instantiated.  If this process fails\n then an unspecified error is thrown.</p></li></ul></p>\n\n<p> <li><p>If an implementation has not been specified with the\n system property, then the system-default implementation class\n is instantiated, and the result is returned.</p></li>\n </p>\n\n<p> <p>Note:  The returned object is not guaranteed to operate\n correctly if multiple threads use it at the same time.\n A multi-threaded application should either allocate multiple\n unpacker engines, or else serialize use of one engine with a lock.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.jar.Pack200.Unpacker}</span><div class='sub-desc'><p>A newly allocated Unpacker engine.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});