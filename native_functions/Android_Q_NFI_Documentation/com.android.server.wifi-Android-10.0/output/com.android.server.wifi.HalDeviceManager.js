Ext.data.JsonP.com_android_server_wifi_HalDeviceManager({"tagname":"class","name":"com.android.server.wifi.HalDeviceManager","autodetected":{},"files":[{"filename":"HalDeviceManager.js","href":"HalDeviceManager.html#com-android-server-wifi-HalDeviceManager"}],"extends":"java.lang.Object","members":[{"name":"START_HAL_RETRY_TIMES","tagname":"property","owner":"com.android.server.wifi.HalDeviceManager","id":"property-START_HAL_RETRY_TIMES","meta":{}},{"name":"createApIface","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-createApIface","meta":{}},{"name":"createNanIface","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-createNanIface","meta":{}},{"name":"createP2pIface","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-createP2pIface","meta":{}},{"name":"createStaIface","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-createStaIface","meta":{}},{"name":"dump","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-dump","meta":{}},{"name":"getChip","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-getChip","meta":{}},{"name":"getName","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-getName","meta":{}},{"name":"getSupportedIfaceTypes","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-getSupportedIfaceTypes","meta":{}},{"name":"initialize","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-initialize","meta":{}},{"name":"isReady","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-isReady","meta":{}},{"name":"isStarted","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-isStarted","meta":{}},{"name":"isSupported","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-isSupported","meta":{}},{"name":"registerDestroyedListener","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-registerDestroyedListener","meta":{}},{"name":"registerInterfaceAvailableForRequestListener","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-registerInterfaceAvailableForRequestListener","meta":{}},{"name":"registerRttControllerLifecycleCallback","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-registerRttControllerLifecycleCallback","meta":{}},{"name":"registerStatusListener","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-registerStatusListener","meta":{}},{"name":"removeIface","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-removeIface","meta":{}},{"name":"start","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-start","meta":{}},{"name":"stop","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-stop","meta":{}},{"name":"unregisterInterfaceAvailableForRequestListener","tagname":"method","owner":"com.android.server.wifi.HalDeviceManager","id":"method-unregisterInterfaceAvailableForRequestListener","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.server.wifi.HalDeviceManager","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.server.wifi.HalDeviceManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager' target='_blank'>HalDeviceManager.js</a></div></pre><div class='doc-contents'><p>Handles device management through the HAL (HIDL) interface.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-START_HAL_RETRY_TIMES' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-property-START_HAL_RETRY_TIMES' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-property-START_HAL_RETRY_TIMES' class='name expandable'>START_HAL_RETRY_TIMES</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-createApIface' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-createApIface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-createApIface' class='name expandable'>createApIface</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create AP interface if possible (see createStaIface doc). ...</div><div class='long'><p>Create AP interface if possible (see createStaIface doc).</p>\n</div></div></div><div id='method-createNanIface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-createNanIface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-createNanIface' class='name expandable'>createNanIface</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create NAN interface if possible (see createStaIface doc). ...</div><div class='long'><p>Create NAN interface if possible (see createStaIface doc).</p>\n</div></div></div><div id='method-createP2pIface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-createP2pIface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-createP2pIface' class='name expandable'>createP2pIface</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create P2P interface if possible (see createStaIface doc). ...</div><div class='long'><p>Create P2P interface if possible (see createStaIface doc).</p>\n</div></div></div><div id='method-createStaIface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-createStaIface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-createStaIface' class='name expandable'>createStaIface</a>( <span class='pre'>lowPrioritySta, destroyedListener, handler</span> ) : Object {IWifiStaIface}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a STA interface if possible. ...</div><div class='long'><p>Create a STA interface if possible. Changes chip mode and removes conflicting interfaces if\n needed and permitted by priority.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lowPrioritySta</span> : Boolean<div class='sub-desc'><p>Indicates whether the requested STA is a low priority STA. The priority\n                       and preemption rules for low priority STA are:\n                       - Do not destroy any interface for it (even another low priority STA)\n                       - Destroy it for any other request</p>\n</div></li><li><span class='pre'>destroyedListener</span> : Object {HalDeviceManager.InterfaceDestroyedListener}<div class='sub-desc'><p>Optional (nullable) listener to call when the allocated interface\n                          is removed. Will only be registered and used if an interface is\n                          created successfully.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>Handler on which to dispatch listener. Null implies the listener will be\n                invoked synchronously from the context of the client which triggered the\n                iface destruction.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {IWifiStaIface}</span><div class='sub-desc'><p>A newly created interface - or null if the interface could not be created.</p>\n</div></li></ul></div></div></div><div id='method-dump' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-dump' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-dump' class='name expandable'>dump</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Dump the internal state of the class. ...</div><div class='long'><p>Dump the internal state of the class.</p>\n</div></div></div><div id='method-getChip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-getChip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-getChip' class='name expandable'>getChip</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the IWifiChip corresponding to the specified interface (or null on error). ...</div><div class='long'><p>Returns the IWifiChip corresponding to the specified interface (or null on error).</p>\n\n<p> Note: clients must not perform chip mode changes or interface management (create/delete)\n operations on IWifiChip directly. However, they can use the IWifiChip interface to perform\n other functions - e.g. calling the debug/trace methods.</p>\n</div></div></div><div id='method-getName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-getName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-getName' class='name expandable'>getName</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the name of the input interface or null on error. ...</div><div class='long'><p>Return the name of the input interface or null on error.</p>\n</div></div></div><div id='method-getSupportedIfaceTypes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-getSupportedIfaceTypes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-getSupportedIfaceTypes' class='name expandable'>getSupportedIfaceTypes</a>( <span class='pre'></span> ) : Object {java.util.Set}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the set of supported interface types for the specified Wi-Fi chip. ...</div><div class='long'><p>Return the set of supported interface types for the specified Wi-Fi chip.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Set}</span><div class='sub-desc'><p>A set of IfaceTypes constants  (possibly empty, e.g. on error).</p>\n</div></li></ul></div></div></div><div id='method-initialize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-initialize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-initialize' class='name expandable'>initialize</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Actually starts the HalDeviceManager: separate from constructor since may want to phase\n at a later time. ...</div><div class='long'><p>Actually starts the HalDeviceManager: separate from constructor since may want to phase\n at a later time.</p>\n\n<p> TODO: if decide that no need for separating construction from initialization (e.g. both are\n done at injector) then move to constructor.</p>\n</div></div></div><div id='method-isReady' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-isReady' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-isReady' class='name expandable'>isReady</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current status of the HalDeviceManager: whether or not it is ready to execute\n commands. ...</div><div class='long'><p>Returns the current status of the HalDeviceManager: whether or not it is ready to execute\n commands. A return of 'false' indicates that the HAL service (IWifi) is not available. Use\n the registerStatusListener() to listener for status changes.</p>\n</div></div></div><div id='method-isStarted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-isStarted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-isStarted' class='name expandable'>isStarted</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current status of Wi-Fi: started (true) or stopped (false). ...</div><div class='long'><p>Returns the current status of Wi-Fi: started (true) or stopped (false).</p>\n\n<p> Note: direct call to HIDL.</p>\n</div></div></div><div id='method-isSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-isSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-isSupported' class='name expandable'>isSupported</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the vendor HAL is supported on this device or not. ...</div><div class='long'><p>Returns whether the vendor HAL is supported on this device or not.</p>\n</div></div></div><div id='method-registerDestroyedListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-registerDestroyedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-registerDestroyedListener' class='name expandable'>registerDestroyedListener</a>( <span class='pre'>destroyedListener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register an InterfaceDestroyedListener to the specified iface - returns true on success\n and false on failure. ...</div><div class='long'><p>Register an InterfaceDestroyedListener to the specified iface - returns true on success\n and false on failure. This listener is in addition to the one registered when the interface\n was created - allowing non-creators to monitor interface status.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>destroyedListener</span> : Object {IWifiIface}<div class='sub-desc'><p>Listener to call when the allocated interface is removed.\n                          Will only be registered and used if an interface is created\n                          successfully.</p>\n</div></li><li><span class='pre'>handler</span> : Object {HalDeviceManager.InterfaceDestroyedListener}<div class='sub-desc'><p>Handler on which to dispatch listener. Null implies the listener will be\n                invoked synchronously from the context of the client which triggered the\n                iface destruction.</p>\n</div></li></ul></div></div></div><div id='method-registerInterfaceAvailableForRequestListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-registerInterfaceAvailableForRequestListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-registerInterfaceAvailableForRequestListener' class='name expandable'>registerInterfaceAvailableForRequestListener</a>( <span class='pre'>ifaceType, listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a listener to be called when an interface of the specified type could be requested. ...</div><div class='long'><p>Register a listener to be called when an interface of the specified type could be requested.\n No guarantees are provided (some other entity could request it first). The listener is\n active from registration until unregistration - using\n unregisterInterfaceAvailableForRequestListener().</p>\n\n<p> Only a single instance of a listener will be registered (even if the specified looper is\n different).</p>\n\n<p> Note that if it is possible to create the specified interface type at registration time\n then the callback will be triggered immediately.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ifaceType</span> : Number<div class='sub-desc'><p>The interface type (IfaceType) to be monitored.</p>\n</div></li><li><span class='pre'>listener</span> : Object {HalDeviceManager.InterfaceAvailableForRequestListener}<div class='sub-desc'><p>Listener to call when an interface of the requested\n                 type could be created</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>Handler on which to dispatch listener. Null implies the listener will be\n                invoked synchronously from the context of the client which triggered the\n                mode change.</p>\n</div></li></ul></div></div></div><div id='method-registerRttControllerLifecycleCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-registerRttControllerLifecycleCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-registerRttControllerLifecycleCallback' class='name expandable'>registerRttControllerLifecycleCallback</a>( <span class='pre'>callback, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback object for RTT life-cycle events. ...</div><div class='long'><p>Register a callback object for RTT life-cycle events. The callback object registration\n indicates that an RTT controller should be created whenever possible. The callback object\n will be called with a new RTT controller whenever it is created (or at registration time\n if an RTT controller already exists). The callback object will also be triggered whenever\n an existing RTT controller is destroyed (the previous copies must be discarded by the\n recipient).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callback</span> : Object {HalDeviceManager.InterfaceRttControllerLifecycleCallback}<div class='sub-desc'><p>InterfaceRttControllerLifecycleCallback object.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>Handler on which to dispatch callback</p>\n</div></li></ul></div></div></div><div id='method-registerStatusListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-registerStatusListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-registerStatusListener' class='name expandable'>registerStatusListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a ManagerStatusListener to get information about the status of the manager. ...</div><div class='long'><p>Register a ManagerStatusListener to get information about the status of the manager. Use the\n isReady() and isStarted() methods to check status immediately after registration and when\n triggered.</p>\n\n<p> It is safe to re-register the same callback object - duplicates are detected and only a\n single copy kept.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {HalDeviceManager.ManagerStatusListener}<div class='sub-desc'><p>ManagerStatusListener listener object.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>Handler on which to dispatch listener. Null implies the listener will be\n                invoked synchronously from the context of the client which triggered the\n                state change.</p>\n</div></li></ul></div></div></div><div id='method-removeIface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-removeIface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-removeIface' class='name expandable'>removeIface</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes (releases/destroys) the given interface. ...</div><div class='long'><p>Removes (releases/destroys) the given interface. Will trigger any registered\n InterfaceDestroyedListeners and possibly some InterfaceAvailableForRequestListeners if we\n can potentially create some other interfaces as a result of removing this interface.</p>\n</div></div></div><div id='method-start' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-start' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-start' class='name expandable'>start</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to start Wi-Fi (using HIDL). ...</div><div class='long'><p>Attempts to start Wi-Fi (using HIDL). Returns the success (true) or failure (false) or\n the start operation. Will also dispatch any registered ManagerStatusCallback.onStart() on\n success.</p>\n\n<p> Note: direct call to HIDL.</p>\n</div></div></div><div id='method-stop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-stop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-stop' class='name expandable'>stop</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stops Wi-Fi. ...</div><div class='long'><p>Stops Wi-Fi. Will also dispatch any registeredManagerStatusCallback.onStop().</p>\n\n<p> Note: direct call to HIDL - failure is not-expected.</p>\n</div></div></div><div id='method-unregisterInterfaceAvailableForRequestListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.wifi.HalDeviceManager'>com.android.server.wifi.HalDeviceManager</span><br/><a href='source/HalDeviceManager.html#com-android-server-wifi-HalDeviceManager-method-unregisterInterfaceAvailableForRequestListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.wifi.HalDeviceManager-method-unregisterInterfaceAvailableForRequestListener' class='name expandable'>unregisterInterfaceAvailableForRequestListener</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Unregisters a listener registered with registerInterfaceAvailableForRequestListener(). ...</div><div class='long'><p>Unregisters a listener registered with registerInterfaceAvailableForRequestListener().</p>\n</div></div></div></div></div></div></div>","meta":{}});