Ext.data.JsonP.com_android_settingslib_location_SettingsInjector({"tagname":"class","name":"com.android.settingslib.location.SettingsInjector","autodetected":{},"files":[{"filename":"SettingsInjector.js","href":"SettingsInjector.html#com-android-settingslib-location-SettingsInjector"}],"extends":"java.lang.Object","members":[{"name":"getInjectedSettings","tagname":"method","owner":"com.android.settingslib.location.SettingsInjector","id":"method-getInjectedSettings","meta":{}},{"name":"reloadStatusMessages","tagname":"method","owner":"com.android.settingslib.location.SettingsInjector","id":"method-reloadStatusMessages","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.settingslib.location.SettingsInjector","short_doc":"Adds the preferences specified by the com.android.settingslib.location.InjectedSetting objects to a preference group. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.settingslib.location.SettingsInjector</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/SettingsInjector.html#com-android-settingslib-location-SettingsInjector' target='_blank'>SettingsInjector.js</a></div></pre><div class='doc-contents'><p>Adds the preferences specified by the <a href=\"#!/api/com.android.settingslib.location.InjectedSetting\" rel=\"com.android.settingslib.location.InjectedSetting\" class=\"docClass\">com.android.settingslib.location.InjectedSetting</a> objects to a preference group.</p>\n\n<p> Duplicates some code from android.content.pm.RegisteredServicesCache. We do not use that\n class directly because it is not a good match for our use case: we do not need the caching, and\n so do not want the additional resource hit at app install/upgrade time; and we would have to\n suppress the tie-breaking between multiple services reporting settings with the same name.\n Code-sharing would require extracting String, android.util.AttributeSet) into an interface, which didn't seem worth it.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getInjectedSettings' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.settingslib.location.SettingsInjector'>com.android.settingslib.location.SettingsInjector</span><br/><a href='source/SettingsInjector.html#com-android-settingslib-location-SettingsInjector-method-getInjectedSettings' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.settingslib.location.SettingsInjector-method-getInjectedSettings' class='name expandable'>getInjectedSettings</a>( <span class='pre'>profileId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets a list of preferences that other apps have injected. ...</div><div class='long'><p>Gets a list of preferences that other apps have injected.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>profileId</span> : Object {Context}<div class='sub-desc'><p>Identifier of the user/profile to obtain the injected settings for or\n                  UserHandle.USER_CURRENT for all profiles associated with current user.</p>\n</div></li></ul></div></div></div><div id='method-reloadStatusMessages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.settingslib.location.SettingsInjector'>com.android.settingslib.location.SettingsInjector</span><br/><a href='source/SettingsInjector.html#com-android-settingslib-location-SettingsInjector-method-reloadStatusMessages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.settingslib.location.SettingsInjector-method-reloadStatusMessages' class='name expandable'>reloadStatusMessages</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reloads the status messages for all the preference items. ...</div><div class='long'><p>Reloads the status messages for all the preference items.</p>\n</div></div></div></div></div></div></div>","meta":{}});