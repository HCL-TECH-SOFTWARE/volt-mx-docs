Ext.data.JsonP.com_android_server_pm_dex_DexoptUtils({"tagname":"class","name":"com.android.server.pm.dex.DexoptUtils","autodetected":{},"files":[{"filename":"DexoptUtils.js","href":"DexoptUtils.html#com-android-server-pm-dex-DexoptUtils"}],"extends":"java.lang.Object","members":[{"name":"getClassLoaderContext","tagname":"method","owner":"com.android.server.pm.dex.DexoptUtils","id":"method-getClassLoaderContext","meta":{}},{"name":"getClassLoaderContexts","tagname":"method","owner":"com.android.server.pm.dex.DexoptUtils","id":"method-getClassLoaderContexts","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.server.pm.dex.DexoptUtils","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.server.pm.dex.DexoptUtils</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/DexoptUtils.html#com-android-server-pm-dex-DexoptUtils' target='_blank'>DexoptUtils.js</a></div></pre><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getClassLoaderContext' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.pm.dex.DexoptUtils'>com.android.server.pm.dex.DexoptUtils</span><br/><a href='source/DexoptUtils.html#com-android-server-pm-dex-DexoptUtils-method-getClassLoaderContext' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.pm.dex.DexoptUtils-method-getClassLoaderContext' class='name expandable'>getClassLoaderContext</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates the class loader context for the given shared library. ...</div><div class='long'><p>Creates the class loader context for the given shared library.</p>\n</div></div></div><div id='method-getClassLoaderContexts' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.pm.dex.DexoptUtils'>com.android.server.pm.dex.DexoptUtils</span><br/><a href='source/DexoptUtils.html#com-android-server-pm-dex-DexoptUtils-method-getClassLoaderContexts' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.pm.dex.DexoptUtils-method-getClassLoaderContexts' class='name expandable'>getClassLoaderContexts</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates the class loader context dependencies for each of the application code paths. ...</div><div class='long'><p>Creates the class loader context dependencies for each of the application code paths.\n The returned array contains the class loader contexts that needs to be passed to dexopt in\n order to ensure correct optimizations. \"Code\" paths with no actual code, as specified by\n {@param pathsWithCode}, are ignored and will have null as their context in the returned array\n (configuration splits are an example of paths without code).</p>\n\n<p> A class loader context describes how the class loader chain should be built by dex2oat\n in order to ensure that classes are resolved during compilation as they would be resolved\n at runtime. The context will be encoded in the compiled code. If at runtime the dex file is\n loaded in a different context (with a different set of class loaders or a different\n classpath), the compiled code will be rejected.</p>\n\n<p> Note that the class loader context only includes dependencies and not the code path itself.\n The contexts are created based on the application split dependency list and\n the provided shared libraries.</p>\n\n<p> All the code paths encoded in the context will be relative to the base directory. This\n enables stage compilation where compiler artifacts may be moved around.</p>\n\n<p> The result is indexed as follows:\n   - index 0 contains the context for the base apk\n   - index 1 to n contain the context for the splits in the order determined by\n     {@code info.getSplitCodePaths()}</p>\n\n<p> IMPORTANT: keep this logic in sync with the loading code in android.app.LoadedApk\n and pay attention to the way the classpath is created for the non isolated mode in:\n android.app.ActivityThread, boolean, ApplicationInfo, List, List).</p>\n</div></div></div></div></div></div></div>","meta":{}});