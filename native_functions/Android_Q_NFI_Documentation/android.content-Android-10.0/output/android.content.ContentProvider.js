Ext.data.JsonP.android_content_ContentProvider({"tagname":"class","name":"android.content.ContentProvider","autodetected":{},"files":[{"filename":"ContentProvider.js","href":"ContentProvider.html#android-content-ContentProvider"}],"extends":"java.lang.Object","members":[{"name":"applyBatch","tagname":"method","owner":"android.content.ContentProvider","id":"method-applyBatch","meta":{}},{"name":"attachInfo","tagname":"method","owner":"android.content.ContentProvider","id":"method-attachInfo","meta":{}},{"name":"bulkInsert","tagname":"method","owner":"android.content.ContentProvider","id":"method-bulkInsert","meta":{}},{"name":"call","tagname":"method","owner":"android.content.ContentProvider","id":"method-call","meta":{}},{"name":"canonicalize","tagname":"method","owner":"android.content.ContentProvider","id":"method-canonicalize","meta":{}},{"name":"clearCallingIdentity","tagname":"method","owner":"android.content.ContentProvider","id":"method-clearCallingIdentity","meta":{}},{"name":"delete","tagname":"method","owner":"android.content.ContentProvider","id":"method-delete","meta":{}},{"name":"dump","tagname":"method","owner":"android.content.ContentProvider","id":"method-dump","meta":{}},{"name":"getCallingPackage","tagname":"method","owner":"android.content.ContentProvider","id":"method-getCallingPackage","meta":{}},{"name":"getCallingPackageUnchecked","tagname":"method","owner":"android.content.ContentProvider","id":"method-getCallingPackageUnchecked","meta":{}},{"name":"getContext","tagname":"method","owner":"android.content.ContentProvider","id":"method-getContext","meta":{}},{"name":"getPathPermissions","tagname":"method","owner":"android.content.ContentProvider","id":"method-getPathPermissions","meta":{}},{"name":"getReadPermission","tagname":"method","owner":"android.content.ContentProvider","id":"method-getReadPermission","meta":{}},{"name":"getStreamTypes","tagname":"method","owner":"android.content.ContentProvider","id":"method-getStreamTypes","meta":{}},{"name":"getType","tagname":"method","owner":"android.content.ContentProvider","id":"method-getType","meta":{}},{"name":"getWritePermission","tagname":"method","owner":"android.content.ContentProvider","id":"method-getWritePermission","meta":{}},{"name":"insert","tagname":"method","owner":"android.content.ContentProvider","id":"method-insert","meta":{}},{"name":"onCallingPackageChanged","tagname":"method","owner":"android.content.ContentProvider","id":"method-onCallingPackageChanged","meta":{}},{"name":"onConfigurationChanged","tagname":"method","owner":"android.content.ContentProvider","id":"method-onConfigurationChanged","meta":{}},{"name":"onCreate","tagname":"method","owner":"android.content.ContentProvider","id":"method-onCreate","meta":{}},{"name":"onLowMemory","tagname":"method","owner":"android.content.ContentProvider","id":"method-onLowMemory","meta":{}},{"name":"onTrimMemory","tagname":"method","owner":"android.content.ContentProvider","id":"method-onTrimMemory","meta":{}},{"name":"openAssetFile","tagname":"method","owner":"android.content.ContentProvider","id":"method-openAssetFile","meta":{}},{"name":"openFile","tagname":"method","owner":"android.content.ContentProvider","id":"method-openFile","meta":{}},{"name":"openPipeHelper","tagname":"method","owner":"android.content.ContentProvider","id":"method-openPipeHelper","meta":{}},{"name":"openTypedAssetFile","tagname":"method","owner":"android.content.ContentProvider","id":"method-openTypedAssetFile","meta":{}},{"name":"query","tagname":"method","owner":"android.content.ContentProvider","id":"method-query","meta":{}},{"name":"refresh","tagname":"method","owner":"android.content.ContentProvider","id":"method-refresh","meta":{}},{"name":"restoreCallingIdentity","tagname":"method","owner":"android.content.ContentProvider","id":"method-restoreCallingIdentity","meta":{}},{"name":"shutdown","tagname":"method","owner":"android.content.ContentProvider","id":"method-shutdown","meta":{}},{"name":"uncanonicalize","tagname":"method","owner":"android.content.ContentProvider","id":"method-uncanonicalize","meta":{}},{"name":"update","tagname":"method","owner":"android.content.ContentProvider","id":"method-update","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.content.ContentProvider","short_doc":"implements android.content.ContentInterface\n\n implements android.content.ComponentCallbacks2\n\nContent providers are o...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["android.content.SearchRecentSuggestionsProvider"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.content.ContentProvider</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/android.content.SearchRecentSuggestionsProvider' rel='android.content.SearchRecentSuggestionsProvider' class='docClass'>android.content.SearchRecentSuggestionsProvider</a></div><h4>Files</h4><div class='dependency'><a href='source/ContentProvider.html#android-content-ContentProvider' target='_blank'>ContentProvider.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/android.content.ContentInterface\" rel=\"android.content.ContentInterface\" class=\"docClass\">android.content.ContentInterface</a></p>\n\n<p> implements <a href=\"#!/api/android.content.ComponentCallbacks2\" rel=\"android.content.ComponentCallbacks2\" class=\"docClass\">android.content.ComponentCallbacks2</a></p>\n\n<p>Content providers are one of the primary building blocks of Android applications, providing\n content to applications. They encapsulate data and provide it to applications through the single\n <a href=\"#!/api/android.content.ContentResolver\" rel=\"android.content.ContentResolver\" class=\"docClass\">android.content.ContentResolver</a> interface. A content provider is only required if you need to share\n data between multiple applications. For example, the contacts data is used by multiple\n applications and must be stored in a content provider. If you don't need to share data amongst\n multiple applications you can use a database directly via\n android.database.sqlite.SQLiteDatabase.</p>\n\n<p> <p>When a request is made via\n a <a href=\"#!/api/android.content.ContentResolver\" rel=\"android.content.ContentResolver\" class=\"docClass\">android.content.ContentResolver</a> the system inspects the authority of the given URI and passes the\n request to the content provider registered with the authority. The content provider can interpret\n the rest of the URI however it wants. The <a href=\"#!/api/android.content.UriMatcher\" rel=\"android.content.UriMatcher\" class=\"docClass\">android.content.UriMatcher</a> class is helpful for parsing\n URIs.</p></p>\n\n<p> <p>The primary methods that need to be implemented are:\n <ul>\n   <li><a href=\"#!/api/android.content.ContentProvider-method-onCreate\" rel=\"android.content.ContentProvider-method-onCreate\" class=\"docClass\">onCreate</a> which is called to initialize the provider</li>\n   <li><a href=\"#!/api/android.content.ContentProvider-method-query\" rel=\"android.content.ContentProvider-method-query\" class=\"docClass\">query</a> which returns data to the caller</li>\n   <li><a href=\"#!/api/android.content.ContentProvider-method-insert\" rel=\"android.content.ContentProvider-method-insert\" class=\"docClass\">insert</a> which inserts new data into the content provider</li>\n   <li><a href=\"#!/api/android.content.ContentProvider-method-update\" rel=\"android.content.ContentProvider-method-update\" class=\"docClass\">update</a> which updates existing data in the content provider</li>\n   <li><a href=\"#!/api/android.content.ContentProvider-method-delete\" rel=\"android.content.ContentProvider-method-delete\" class=\"docClass\">delete</a> which deletes data from the content provider</li>\n   <li><a href=\"#!/api/android.content.ContentProvider-method-getType\" rel=\"android.content.ContentProvider-method-getType\" class=\"docClass\">getType</a> which returns the MIME type of data in the content provider</li>\n </ul></p></p>\n\n<p> <p class=\"caution\">Data access methods (such as <a href=\"#!/api/android.content.ContentProvider-method-insert\" rel=\"android.content.ContentProvider-method-insert\" class=\"docClass\">insert</a> and\n <a href=\"#!/api/android.content.ContentProvider-method-update\" rel=\"android.content.ContentProvider-method-update\" class=\"docClass\">update</a>) may be called from many threads at once, and must be thread-safe.\n Other methods (such as <a href=\"#!/api/android.content.ContentProvider-method-onCreate\" rel=\"android.content.ContentProvider-method-onCreate\" class=\"docClass\">onCreate</a>) are only called from the application\n main thread, and must avoid performing lengthy operations.  See the method\n descriptions for their expected thread behavior.</p></p>\n\n<p> <p>Requests to <a href=\"#!/api/android.content.ContentResolver\" rel=\"android.content.ContentResolver\" class=\"docClass\">android.content.ContentResolver</a> are automatically forwarded to the appropriate\n ContentProvider instance, so subclasses don't have to worry about the details of\n cross-process calls.</p></p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about using content providers, read the\n <a href=\"{@docRoot}guide/topics/providers/content-providers.html\">Content Providers</a>\n developer guide.</p>\n </div></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-applyBatch' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-applyBatch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-applyBatch' class='name expandable'>applyBatch</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-attachInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-attachInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-attachInfo' class='name expandable'>attachInfo</a>( <span class='pre'>context, info</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>After being instantiated, this is called to tell the content provider\n about itself. ...</div><div class='long'><p>After being instantiated, this is called to tell the content provider\n about itself.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>The context this provider is running in</p>\n</div></li><li><span class='pre'>info</span> : Object {ProviderInfo}<div class='sub-desc'><p>Registered information about this content provider</p>\n</div></li></ul></div></div></div><div id='method-bulkInsert' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-bulkInsert' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-bulkInsert' class='name expandable'>bulkInsert</a>( <span class='pre'>uri, values</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Override this to handle requests to insert a set of new rows, or the\n default implementation will iterate over the va...</div><div class='long'><p>Override this to handle requests to insert a set of new rows, or the\n default implementation will iterate over the values and call\n <a href=\"#!/api/android.content.ContentProvider-method-insert\" rel=\"android.content.ContentProvider-method-insert\" class=\"docClass\">insert</a> on each of them.\n As a courtesy, call ,android.database.ContentObserver) notifyChange()\n after inserting.\n This method can be called from multiple threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The content:// URI of the insertion request.</p>\n</div></li><li><span class='pre'>values</span> : Object {android.content.ContentValues[]}<div class='sub-desc'><p>An array of sets of column_name/value pairs to add to the database.\n    This must not be {@code null}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of values that were inserted.</p>\n</div></li></ul></div></div></div><div id='method-call' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-call' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-call' class='name expandable'>call</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-canonicalize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-canonicalize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-canonicalize' class='name expandable'>canonicalize</a>( <span class='pre'>url</span> ) : Object {android.net.Uri}<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to support canonicalization of URIs that refer to your\n content provider. ...</div><div class='long'><p>Implement this to support canonicalization of URIs that refer to your\n content provider.  A canonical URI is one that can be transported across\n devices, backup/restore, and other contexts, and still be able to refer\n to the same data item.  Typically this is implemented by adding query\n params to the URI allowing the content provider to verify that an incoming\n canonical URI references the same data as it was originally intended for and,\n if it doesn't, to find that data (if it exists) in the current environment.</p>\n\n<p> <p>For example, if the content provider holds people and a normal URI in it\n is created with a row index into that people database, the cananical representation\n may have an additional query param at the end which specifies the name of the\n person it is intended for.  Later calls into the provider with that URI will look\n up the row of that URI's base index and, if it doesn't match or its entry's\n name doesn't match the name in the query param, perform a query on its database\n to find the correct row to operate on.</p></p>\n\n<p> <p>If you implement support for canonical URIs, <b>all</b> incoming calls with\n URIs (including this one) must perform this verification and recovery of any\n canonical URIs they receive.  In addition, you must also implement\n <a href=\"#!/api/android.content.ContentProvider-method-uncanonicalize\" rel=\"android.content.ContentProvider-method-uncanonicalize\" class=\"docClass\">uncanonicalize</a> to strip the canonicalization of any of these URIs.</p></p>\n\n<p> <p>The default implementation of this method returns null, indicating that\n canonical URIs are not supported.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>url</span> : Object {Uri}<div class='sub-desc'><p>The Uri to canonicalize.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.Uri}</span><div class='sub-desc'><p>Return the canonical representation of <var>url</var>, or null if\n canonicalization of that Uri is not supported.</p>\n</div></li></ul></div></div></div><div id='method-clearCallingIdentity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-clearCallingIdentity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-clearCallingIdentity' class='name expandable'>clearCallingIdentity</a>( <span class='pre'></span> ) : Object {android.content.ContentProvider.CallingIdentity}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reset the identity of the incoming IPC on the current thread. ...</div><div class='long'><p>Reset the identity of the incoming IPC on the current thread.\n <p>\n Internally this calls Binder.clearCallingIdentity() and also\n clears any value stored in <a href=\"#!/api/android.content.ContentProvider-method-getCallingPackage\" rel=\"android.content.ContentProvider-method-getCallingPackage\" class=\"docClass\">getCallingPackage</a>().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.ContentProvider.CallingIdentity}</span><div class='sub-desc'><p>Returns an opaque token that can be used to restore the original\n         calling identity by passing it to\n         <a href=\"#!/api/android.content.ContentProvider-method-restoreCallingIdentity\" rel=\"android.content.ContentProvider-method-restoreCallingIdentity\" class=\"docClass\">restoreCallingIdentity</a>.</p>\n</div></li></ul></div></div></div><div id='method-delete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-delete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-delete' class='name expandable'>delete</a>( <span class='pre'>uri, selection</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to handle requests to delete one or more rows. ...</div><div class='long'><p>Implement this to handle requests to delete one or more rows.\n The implementation should apply the selection clause when performing\n deletion, allowing the operation to affect multiple rows in a directory.\n As a courtesy, call ,android.database.ContentObserver) notifyChange()\n after deleting.\n This method can be called from multiple threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n\n<p> <p>The implementation is responsible for parsing out a row ID at the end\n of the URI, if a specific row is being deleted. That is, the client would\n pass in <code>content://contacts/people/22</code> and the implementation is\n responsible for parsing the record number (22) when creating a SQL statement.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The full URI to query, including a row ID (if a specific record is requested).</p>\n</div></li><li><span class='pre'>selection</span> : String<div class='sub-desc'><p>An optional restriction to apply to rows when deleting.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of rows affected.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SQLException</p>\n</div></li></ul></div></div></div><div id='method-dump' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-dump' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-dump' class='name expandable'>dump</a>( <span class='pre'>fd, writer, args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Print the Provider's state into the given stream. ...</div><div class='long'><p>Print the Provider's state into the given stream.  This gets invoked if\n you run \"adb shell dumpsys activity provider &lt;provider_component_name&gt;\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fd</span> : Object {FileDescriptor}<div class='sub-desc'><p>The raw file descriptor that the dump is being sent to.</p>\n</div></li><li><span class='pre'>writer</span> : Object {PrintWriter}<div class='sub-desc'><p>The PrintWriter to which you should dump your state.  This will be\n closed for you after you return.</p>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.String[]}<div class='sub-desc'><p>additional arguments to the dump request.</p>\n</div></li></ul></div></div></div><div id='method-getCallingPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-getCallingPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-getCallingPackage' class='name expandable'>getCallingPackage</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the package name of the caller that initiated the request being\n processed on the current thread. ...</div><div class='long'><p>Return the package name of the caller that initiated the request being\n processed on the current thread. The returned package will have been\n verified to belong to the calling UID. Returns {@code null} if not\n currently processing a request.\n <p>\n This will always return {@code null} when processing\n <a href=\"#!/api/android.content.ContentProvider-method-getType\" rel=\"android.content.ContentProvider-method-getType\" class=\"docClass\">getType</a>(Uri) or String) requests.\n@see Binder#getCallingUid()\n@see Context#grantUriPermission(String, Uri, int)</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the calling package doesn't belong to the\n             calling UID.</p>\n</div></li></ul></div></div></div><div id='method-getCallingPackageUnchecked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-getCallingPackageUnchecked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-getCallingPackageUnchecked' class='name expandable'>getCallingPackageUnchecked</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@hide} ...</div><div class='long'><p>{@hide}</p>\n</div></div></div><div id='method-getContext' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-getContext' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-getContext' class='name expandable'>getContext</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the Context this provider is running in. ...</div><div class='long'><p>Retrieves the Context this provider is running in.  Only available once\n <a href=\"#!/api/android.content.ContentProvider-method-onCreate\" rel=\"android.content.ContentProvider-method-onCreate\" class=\"docClass\">onCreate</a> has been called -- this will return {@code null} in the\n constructor.</p>\n</div></div></div><div id='method-getPathPermissions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-getPathPermissions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-getPathPermissions' class='name expandable'>getPathPermissions</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the path-based permissions required for read and/or write access to\n this content provider. ...</div><div class='long'><p>Return the path-based permissions required for read and/or write access to\n this content provider.  This method can be called from multiple\n threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n</div></div></div><div id='method-getReadPermission' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-getReadPermission' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-getReadPermission' class='name expandable'>getReadPermission</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the name of the permission required for read-only access to\n this content provider. ...</div><div class='long'><p>Return the name of the permission required for read-only access to\n this content provider.  This method can be called from multiple\n threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n</div></div></div><div id='method-getStreamTypes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-getStreamTypes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-getStreamTypes' class='name expandable'>getStreamTypes</a>( <span class='pre'>uri, mimeTypeFilter</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a client to determine the types of data streams that this\n content provider supports for the given URI. ...</div><div class='long'><p>Called by a client to determine the types of data streams that this\n content provider supports for the given URI.  The default implementation\n returns {@code null}, meaning no types.  If your content provider stores data\n of a particular type, return that MIME type if it matches the given\n mimeTypeFilter.  If it can perform type conversions, return an array\n of all supported MIME types that match mimeTypeFilter.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The data in the content provider being queried.</p>\n</div></li><li><span class='pre'>mimeTypeFilter</span> : String<div class='sub-desc'><p>The type of data the client desires.  May be\n a pattern, such as <em>&#47;</em> to retrieve all possible data types.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>Returns {@code null} if there are no possible data streams for the\n given mimeTypeFilter.  Otherwise returns an array of all available\n concrete MIME types.\n@see <a href=\"#!/api/android.content.ContentProvider-method-getType\" rel=\"android.content.ContentProvider-method-getType\" class=\"docClass\">getType</a>(Uri)\n@see <a href=\"#!/api/android.content.ContentProvider-method-openTypedAssetFile\" rel=\"android.content.ContentProvider-method-openTypedAssetFile\" class=\"docClass\">openTypedAssetFile</a>(Uri, String, Bundle)\n@see ClipDescription#compareMimeTypes(String, String)</p>\n</div></li></ul></div></div></div><div id='method-getType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-getType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-getType' class='name expandable'>getType</a>( <span class='pre'>uri</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to handle requests for the MIME type of the data at the\n given URI. ...</div><div class='long'><p>Implement this to handle requests for the MIME type of the data at the\n given URI.  The returned MIME type should start with\n <code>vnd.android.cursor.item</code> for a single record,\n or <code>vnd.android.cursor.dir/</code> for multiple items.\n This method can be called from multiple threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n\n<p> <p>Note that there are no permissions needed for an application to\n access this information; if your content provider requires read and/or\n write permissions, or is not exported, all applications can still call\n this method regardless of their access permissions.  This allows them\n to retrieve the MIME type for a URI when dispatching intents.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>the URI to query.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a MIME type string, or {@code null} if there is no type.</p>\n</div></li></ul></div></div></div><div id='method-getWritePermission' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-getWritePermission' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-getWritePermission' class='name expandable'>getWritePermission</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the name of the permission required for read/write access to\n this content provider. ...</div><div class='long'><p>Return the name of the permission required for read/write access to\n this content provider.  This method can be called from multiple\n threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n</div></div></div><div id='method-insert' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-insert' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-insert' class='name expandable'>insert</a>( <span class='pre'>uri, values</span> ) : Object {android.net.Uri}<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to handle requests to insert a new row. ...</div><div class='long'><p>Implement this to handle requests to insert a new row.\n As a courtesy, call ,android.database.ContentObserver) notifyChange()\n after inserting.\n This method can be called from multiple threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The content:// URI of the insertion request. This must not be {@code null}.</p>\n</div></li><li><span class='pre'>values</span> : Object {ContentValues}<div class='sub-desc'><p>A set of column_name/value pairs to add to the database.\n     This must not be {@code null}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.Uri}</span><div class='sub-desc'><p>The URI for the newly inserted item.</p>\n</div></li></ul></div></div></div><div id='method-onCallingPackageChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-onCallingPackageChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-onCallingPackageChanged' class='name expandable'>onCallingPackageChanged</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@hide} ...</div><div class='long'><p>{@hide}</p>\n</div></div></div><div id='method-onConfigurationChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-onConfigurationChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-onConfigurationChanged' class='name expandable'>onConfigurationChanged</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n This method is always called on the application main thread, and must\n not perform lengthy operations. ...</div><div class='long'><p>{@inheritDoc}\n This method is always called on the application main thread, and must\n not perform lengthy operations.</p>\n\n<p> <p>The default content provider implementation does nothing.\n Override this method to take appropriate action.\n (Content providers do not usually care about things like screen\n orientation, but may want to know about locale changes.)</p>\n</div></div></div><div id='method-onCreate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-onCreate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-onCreate' class='name expandable'>onCreate</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to initialize your content provider on startup. ...</div><div class='long'><p>Implement this to initialize your content provider on startup.\n This method is called for all registered content providers on the\n application main thread at application launch time.  It must not perform\n lengthy operations, or application startup will be delayed.</p>\n\n<p> <p>You should defer nontrivial initialization (such as opening,\n upgrading, and scanning databases) until the content provider is used\n (via <a href=\"#!/api/android.content.ContentProvider-method-query\" rel=\"android.content.ContentProvider-method-query\" class=\"docClass\">query</a>, <a href=\"#!/api/android.content.ContentProvider-method-insert\" rel=\"android.content.ContentProvider-method-insert\" class=\"docClass\">insert</a>, etc).  Deferred initialization\n keeps application startup fast, avoids unnecessary work if the provider\n turns out not to be needed, and stops database errors (such as a full\n disk) from halting application launch.</p>\n\n<p> <p>If you use SQLite, android.database.sqlite.SQLiteOpenHelper\n is a helpful utility class that makes it easy to manage databases,\n and will automatically defer opening until first use.  If you do use\n SQLiteOpenHelper, make sure to avoid calling\n android.database.sqlite.SQLiteOpenHelper.getReadableDatabase or\n android.database.sqlite.SQLiteOpenHelper.getWritableDatabase\n from this method.  (Instead, override\n android.database.sqlite.SQLiteOpenHelper.onOpen to initialize the\n database when it is first opened.)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the provider was successfully loaded, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-onLowMemory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-onLowMemory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-onLowMemory' class='name expandable'>onLowMemory</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@inheritDoc}\n This method is always called on the application main thread, and must\n not perform lengthy operations. ...</div><div class='long'><p>{@inheritDoc}\n This method is always called on the application main thread, and must\n not perform lengthy operations.</p>\n\n<p> <p>The default content provider implementation does nothing.\n Subclasses may override this method to take appropriate action.</p>\n</div></div></div><div id='method-onTrimMemory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-onTrimMemory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-onTrimMemory' class='name expandable'>onTrimMemory</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-openAssetFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-openAssetFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-openAssetFile' class='name expandable'>openAssetFile</a>( <span class='pre'>uri, mode, signal</span> ) : Object {android.content.res.AssetFileDescriptor}<span class=\"signature\"></span></div><div class='description'><div class='short'>This is like openFile, but can be implemented by providers\n that need to be able to return sub-sections of files, oft...</div><div class='long'><p>This is like <a href=\"#!/api/android.content.ContentProvider-method-openFile\" rel=\"android.content.ContentProvider-method-openFile\" class=\"docClass\">openFile</a>, but can be implemented by providers\n that need to be able to return sub-sections of files, often assets\n inside of their .apk.\n This method can be called from multiple threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n\n<p> <p>If you implement this, your clients must be able to deal with such\n file slices, either directly with\n <a href=\"#!/api/android.content.ContentResolver-method-openAssetFileDescriptor\" rel=\"android.content.ContentResolver-method-openAssetFileDescriptor\" class=\"docClass\">android.content.ContentResolver.openAssetFileDescriptor</a>, or by using the higher-level\n <a href=\"#!/api/android.content.ContentResolver-method-openInputStream\" rel=\"android.content.ContentResolver-method-openInputStream\" class=\"docClass\">android.content.ContentResolver.openInputStream</a>\n or <a href=\"#!/api/android.content.ContentResolver-method-openOutputStream\" rel=\"android.content.ContentResolver-method-openOutputStream\" class=\"docClass\">android.content.ContentResolver.openOutputStream</a>\n methods.\n <p>\n The returned AssetFileDescriptor can be a pipe or socket pair to enable\n streaming of data.</p>\n\n<p> <p class=\"note\">If you are implementing this to return a full file, you\n should create the AssetFileDescriptor with\n AssetFileDescriptor.UNKNOWN_LENGTH to be compatible with\n applications that cannot handle sub-sections of files.</p></p>\n\n<p> <p class=\"note\">For use in Intents, you will want to implement <a href=\"#!/api/android.content.ContentProvider-method-getType\" rel=\"android.content.ContentProvider-method-getType\" class=\"docClass\">getType</a>\n to return the appropriate MIME type for the data returned here with\n the same URI.  This will allow intent resolution to automatically determine the data MIME\n type and select the appropriate matching targets as part of its operation.</p></p>\n\n<p> <p class=\"note\">For better interoperability with other applications, it is recommended\n that for any URIs that can be opened, you also support queries on them\n containing at least the columns specified by android.provider.OpenableColumns.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The URI whose file is to be opened.</p>\n</div></li><li><span class='pre'>mode</span> : String<div class='sub-desc'><p>Access mode for the file.  May be \"r\" for read-only access,\n \"w\" for write-only access (erasing whatever data is currently in\n the file), \"wa\" for write-only access to append to any existing data,\n \"rw\" for read and write access on any existing data, and \"rwt\" for read\n and write access that truncates any existing file.</p>\n</div></li><li><span class='pre'>signal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or\n            {@code null} if none. For example, if you are downloading a\n            file from the network to service a \"rw\" mode request, you\n            should periodically call\n            CancellationSignal.throwIfCanceled() to check whether\n            the client has canceled the request and abort the download.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.res.AssetFileDescriptor}</span><div class='sub-desc'><p>Returns a new AssetFileDescriptor which you can use to access\n the file.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>FileNotFoundException Throws FileNotFoundException if there is\n no file associated with the given URI or the mode is invalid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException Throws SecurityException if the caller does\n not have permission to access the file.\n@see <a href=\"#!/api/android.content.ContentProvider-method-openFile\" rel=\"android.content.ContentProvider-method-openFile\" class=\"docClass\">openFile</a>(Uri, String)\n@see #openFileHelper(Uri, String)\n@see <a href=\"#!/api/android.content.ContentProvider-method-getType\" rel=\"android.content.ContentProvider-method-getType\" class=\"docClass\">getType</a>(android.net.Uri)</p>\n</div></li></ul></div></div></div><div id='method-openFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-openFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-openFile' class='name expandable'>openFile</a>( <span class='pre'>uri, mode, signal</span> ) : Object {android.os.ParcelFileDescriptor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Override this to handle requests to open a file blob. ...</div><div class='long'><p>Override this to handle requests to open a file blob.\n The default implementation always throws FileNotFoundException.\n This method can be called from multiple threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n\n<p> <p>This method returns a ParcelFileDescriptor, which is returned directly\n to the caller.  This way large data (such as images and documents) can be\n returned without copying the content.</p>\n\n<p> <p>The returned ParcelFileDescriptor is owned by the caller, so it is\n their responsibility to close it when done.  That is, the implementation\n of this method should create a new ParcelFileDescriptor for each call.\n <p>\n If opened with the exclusive \"r\" or \"w\" modes, the returned\n ParcelFileDescriptor can be a pipe or socket pair to enable streaming\n of data. Opening with the \"rw\" or \"rwt\" modes implies a file on disk that\n supports seeking.\n <p>\n If you need to detect when the returned ParcelFileDescriptor has been\n closed, or if the remote process has crashed or encountered some other\n error, you can use int,\n android.os.Handler, android.os.ParcelFileDescriptor.OnCloseListener),\n ParcelFileDescriptor.createReliablePipe(), or\n ParcelFileDescriptor.createReliableSocketPair().</p>\n\n<p> <p class=\"note\">For use in Intents, you will want to implement <a href=\"#!/api/android.content.ContentProvider-method-getType\" rel=\"android.content.ContentProvider-method-getType\" class=\"docClass\">getType</a>\n to return the appropriate MIME type for the data returned here with\n the same URI.  This will allow intent resolution to automatically determine the data MIME\n type and select the appropriate matching targets as part of its operation.</p></p>\n\n<p> <p class=\"note\">For better interoperability with other applications, it is recommended\n that for any URIs that can be opened, you also support queries on them\n containing at least the columns specified by android.provider.OpenableColumns.\n You may also want to support other common columns if you have additional meta-data\n to supply, such as android.provider.MediaStore.MediaColumns.DATE_ADDED\n in android.provider.MediaStore.MediaColumns.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The URI whose file is to be opened.</p>\n</div></li><li><span class='pre'>mode</span> : String<div class='sub-desc'><p>Access mode for the file. May be \"r\" for read-only access,\n            \"w\" for write-only access, \"rw\" for read and write access, or\n            \"rwt\" for read and write access that truncates any existing\n            file.</p>\n</div></li><li><span class='pre'>signal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or\n            {@code null} if none. For example, if you are downloading a\n            file from the network to service a \"rw\" mode request, you\n            should periodically call\n            CancellationSignal.throwIfCanceled() to check whether\n            the client has canceled the request and abort the download.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.ParcelFileDescriptor}</span><div class='sub-desc'><p>Returns a new ParcelFileDescriptor which you can use to access\n the file.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>FileNotFoundException Throws FileNotFoundException if there is\n no file associated with the given URI or the mode is invalid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException Throws SecurityException if the caller does\n not have permission to access the file.\n@see <a href=\"#!/api/android.content.ContentProvider-method-openAssetFile\" rel=\"android.content.ContentProvider-method-openAssetFile\" class=\"docClass\">openAssetFile</a>(Uri, String)\n@see #openFileHelper(Uri, String)\n@see <a href=\"#!/api/android.content.ContentProvider-method-getType\" rel=\"android.content.ContentProvider-method-getType\" class=\"docClass\">getType</a>(android.net.Uri)\n@see ParcelFileDescriptor#parseMode(String)</p>\n</div></li></ul></div></div></div><div id='method-openPipeHelper' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-openPipeHelper' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-openPipeHelper' class='name expandable'>openPipeHelper</a>( <span class='pre'>uri, mimeType, opts, args, func</span> ) : Object {android.os.ParcelFileDescriptor}<span class=\"signature\"></span></div><div class='description'><div class='short'>A helper function for implementing openTypedAssetFile, for\n creating a data pipe and background thread allowing you t...</div><div class='long'><p>A helper function for implementing <a href=\"#!/api/android.content.ContentProvider-method-openTypedAssetFile\" rel=\"android.content.ContentProvider-method-openTypedAssetFile\" class=\"docClass\">openTypedAssetFile</a>, for\n creating a data pipe and background thread allowing you to stream\n generated data back to the client.  This function returns a new\n ParcelFileDescriptor that should be returned to the caller (the caller\n is responsible for closing it).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The URI whose data is to be written.</p>\n</div></li><li><span class='pre'>mimeType</span> : String<div class='sub-desc'><p>The desired type of data to be written.</p>\n</div></li><li><span class='pre'>opts</span> : Object {Bundle}<div class='sub-desc'><p>Options supplied by caller.</p>\n</div></li><li><span class='pre'>args</span> : Object {Object}<div class='sub-desc'><p>Your own custom arguments.</p>\n</div></li><li><span class='pre'>func</span> : Object {android.content.ContentProvider.PipeDataWriter}<div class='sub-desc'><p>Interface implementing the function that will actually\n stream the data.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.ParcelFileDescriptor}</span><div class='sub-desc'><p>Returns a new ParcelFileDescriptor holding the read side of\n the pipe.  This should be returned to the caller for reading; the caller\n is responsible for closing it when done.</p>\n</div></li></ul></div></div></div><div id='method-openTypedAssetFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-openTypedAssetFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-openTypedAssetFile' class='name expandable'>openTypedAssetFile</a>( <span class='pre'>uri, mimeTypeFilter, opts, signal</span> ) : Object {android.content.res.AssetFileDescriptor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by a client to open a read-only stream containing data of a\n particular MIME type. ...</div><div class='long'><p>Called by a client to open a read-only stream containing data of a\n particular MIME type.  This is like String),\n except the file can only be read-only and the content provider may\n perform data conversions to generate data of the desired type.</p>\n\n<p> <p>The default implementation compares the given mimeType against the\n result of <a href=\"#!/api/android.content.ContentProvider-method-getType\" rel=\"android.content.ContentProvider-method-getType\" class=\"docClass\">getType</a>(Uri) and, if they match, simply calls\n String).</p>\n\n<p> <p>See <a href=\"#!/api/android.content.ClipData\" rel=\"android.content.ClipData\" class=\"docClass\">android.content.ClipData</a> for examples of the use and implementation\n of this method.\n <p>\n The returned AssetFileDescriptor can be a pipe or socket pair to enable\n streaming of data.</p>\n\n<p> <p class=\"note\">For better interoperability with other applications, it is recommended\n that for any URIs that can be opened, you also support queries on them\n containing at least the columns specified by android.provider.OpenableColumns.\n You may also want to support other common columns if you have additional meta-data\n to supply, such as android.provider.MediaStore.MediaColumns.DATE_ADDED\n in android.provider.MediaStore.MediaColumns.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The data in the content provider being queried.</p>\n</div></li><li><span class='pre'>mimeTypeFilter</span> : String<div class='sub-desc'><p>The type of data the client desires.  May be\n a pattern, such as <em>&#47;</em>, if the caller does not have specific type\n requirements; in this case the content provider will pick its best\n type matching the pattern.</p>\n</div></li><li><span class='pre'>opts</span> : Object {Bundle}<div class='sub-desc'><p>Additional options from the client.  The definitions of\n these are specific to the content provider being called.</p>\n</div></li><li><span class='pre'>signal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or\n            {@code null} if none. For example, if you are downloading a\n            file from the network to service a \"rw\" mode request, you\n            should periodically call\n            CancellationSignal.throwIfCanceled() to check whether\n            the client has canceled the request and abort the download.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.res.AssetFileDescriptor}</span><div class='sub-desc'><p>Returns a new AssetFileDescriptor from which the client can\n read data of the desired type.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>FileNotFoundException Throws FileNotFoundException if there is\n no file associated with the given URI or the mode is invalid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException Throws SecurityException if the caller does\n not have permission to access the data.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException Throws IllegalArgumentException if the\n content provider does not support the requested MIME type.\n@see <a href=\"#!/api/android.content.ContentProvider-method-getStreamTypes\" rel=\"android.content.ContentProvider-method-getStreamTypes\" class=\"docClass\">getStreamTypes</a>(Uri, String)\n@see <a href=\"#!/api/android.content.ContentProvider-method-openAssetFile\" rel=\"android.content.ContentProvider-method-openAssetFile\" class=\"docClass\">openAssetFile</a>(Uri, String)\n@see ClipDescription#compareMimeTypes(String, String)</p>\n</div></li></ul></div></div></div><div id='method-query' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-query' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-query' class='name expandable'>query</a>( <span class='pre'>uri, projection, queryArgs, cancellationSignal</span> ) : Object {android.database.Cursor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to handle query requests where the arguments are packed into a Bundle. ...</div><div class='long'><p>Implement this to handle query requests where the arguments are packed into a Bundle.\n Arguments may include traditional SQL style query arguments. When present these\n should be handled  according to the contract established in\n String[], String, String[], String, CancellationSignal).</p>\n\n<p> <p>Traditional SQL arguments can be found in the bundle using the following keys:\n <li><a href=\"#!/api/android.content.ContentResolver-property-QUERY_ARG_SQL_SELECTION\" rel=\"android.content.ContentResolver-property-QUERY_ARG_SQL_SELECTION\" class=\"docClass\">android.content.ContentResolver.QUERY_ARG_SQL_SELECTION</a>\n <li><a href=\"#!/api/android.content.ContentResolver-property-QUERY_ARG_SQL_SELECTION_ARGS\" rel=\"android.content.ContentResolver-property-QUERY_ARG_SQL_SELECTION_ARGS\" class=\"docClass\">android.content.ContentResolver.QUERY_ARG_SQL_SELECTION_ARGS</a>\n <li><a href=\"#!/api/android.content.ContentResolver-property-QUERY_ARG_SQL_SORT_ORDER\" rel=\"android.content.ContentResolver-property-QUERY_ARG_SQL_SORT_ORDER\" class=\"docClass\">android.content.ContentResolver.QUERY_ARG_SQL_SORT_ORDER</a></li></li></li></p>\n\n<p> <p>This method can be called from multiple threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n\n<p> <p>\n Example client call:<p>\n <pre>// Request 20 records starting at row index 30.\n       Bundle queryArgs = new Bundle();\n       queryArgs.putInt(ContentResolver.QUERY_ARG_OFFSET, 30);\n       queryArgs.putInt(ContentResolver.QUERY_ARG_LIMIT, 20);</pre></p>\n\n<pre><code>   Cursor cursor = getContentResolver().query(\n            contentUri,    // Content Uri is specific to individual content providers.\n            projection,    // String[] describing which columns to return.\n            queryArgs,     // Query arguments.\n            null);         // Cancellation signal.&lt;/pre&gt;\n</code></pre>\n\n<p> Example implementation:<p></p>\n\n<pre>\n        int recordsetSize = 0x1000;  // Actual value is implementation specific.\n        queryArgs = queryArgs != null ? queryArgs : Bundle.EMPTY;  // ensure queryArgs is non-null\n\n        int offset = queryArgs.getInt(ContentResolver.QUERY_ARG_OFFSET, 0);\n        int limit = queryArgs.getInt(ContentResolver.QUERY_ARG_LIMIT, Integer.MIN_VALUE);\n\n        MatrixCursor c = new MatrixCursor(PROJECTION, limit);\n\n        // Calculate the number of items to include in the cursor.\n        int numItems = MathUtils.constrain(recordsetSize - offset, 0, limit);\n\n        // Build the paged result set....\n        for (int i = offset; i < offset + numItems; i++) {\n            // populate row from your data.\n        }\n\n        Bundle extras = new Bundle();\n        c.setExtras(extras);\n\n        // Any QUERY_ARG_* key may be included if honored.\n        // In an actual implementation, include only keys that are both present in queryArgs\n        // and reflected in the Cursor output. For example, if QUERY_ARG_OFFSET were included\n        // in queryArgs, but was ignored because it contained an invalid value (like –273),\n        // then QUERY_ARG_OFFSET should be omitted.\n        extras.putStringArray(ContentResolver.EXTRA_HONORED_ARGS, new String[] {\n            ContentResolver.QUERY_ARG_OFFSET,\n            ContentResolver.QUERY_ARG_LIMIT\n        });\n\n        extras.putInt(ContentResolver.EXTRA_TOTAL_COUNT, recordsetSize);\n\n        cursor.setNotificationUri(getContext().getContentResolver(), uri);\n\n        return cursor;</pre>\n\n\n<p> <p>\n See String[], String, String[], String, CancellationSignal)\n for implementation details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The URI to query. This will be the full URI sent by the client.</p>\n</div></li><li><span class='pre'>projection</span> : Object {java.lang.String[]}<div class='sub-desc'><p>The list of columns to put into the cursor.\n            If {@code null} provide a default set of columns.</p>\n</div></li><li><span class='pre'>queryArgs</span> : Object {Bundle}<div class='sub-desc'><p>A Bundle containing all additional information necessary for the query.\n            Values in the Bundle may include SQL style arguments.</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress,\n            or {@code null}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.database.Cursor}</span><div class='sub-desc'><p>a Cursor or {@code null}.</p>\n</div></li></ul></div></div></div><div id='method-refresh' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-refresh' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-refresh' class='name expandable'>refresh</a>( <span class='pre'>uri, args, cancellationSignal</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to support refresh of content identified by {@code uri}. ...</div><div class='long'><p>Implement this to support refresh of content identified by {@code uri}. By default, this\n method returns false; providers who wish to implement this should return true to signal the\n client that the provider has tried refreshing with its own implementation.\n <p>\n This allows clients to request an explicit refresh of content identified by {@code uri}.\n <p>\n Client code should only invoke this method when there is a strong indication (such as a user\n initiated pull to refresh gesture) that the content is stale.\n <p>\n Remember to send android.database.ContentObserver)\n notifications when content changes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The Uri identifying the data to refresh.</p>\n</div></li><li><span class='pre'>args</span> : Object {Bundle}<div class='sub-desc'><p>Additional options from the client. The definitions of these are specific to the\n            content provider being called.</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>A signal to cancel the operation in progress, or {@code null} if\n            none. For example, if you called refresh on a particular uri, you should call\n            CancellationSignal.throwIfCanceled() to check whether the client has\n            canceled the refresh request.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the provider actually tried refreshing.</p>\n</div></li></ul></div></div></div><div id='method-restoreCallingIdentity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-restoreCallingIdentity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-restoreCallingIdentity' class='name expandable'>restoreCallingIdentity</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Restore the identity of the incoming IPC on the current thread back to a\n previously identity that was returned by cl...</div><div class='long'><p>Restore the identity of the incoming IPC on the current thread back to a\n previously identity that was returned by <a href=\"#!/api/android.content.ContentProvider-method-clearCallingIdentity\" rel=\"android.content.ContentProvider-method-clearCallingIdentity\" class=\"docClass\">clearCallingIdentity</a>.\n <p>\n Internally this calls Binder.restoreCallingIdentity(long) and\n also restores any value stored in <a href=\"#!/api/android.content.ContentProvider-method-getCallingPackage\" rel=\"android.content.ContentProvider-method-getCallingPackage\" class=\"docClass\">getCallingPackage</a>().</p>\n</div></div></div><div id='method-shutdown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-shutdown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-shutdown' class='name expandable'>shutdown</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to shut down the ContentProvider instance. ...</div><div class='long'><p>Implement this to shut down the ContentProvider instance. You can then\n invoke this method in unit tests.</p>\n\n<p> <p>\n Android normally handles ContentProvider startup and shutdown\n automatically. You do not need to start up or shut down a\n ContentProvider. When you invoke a test method on a ContentProvider,\n however, a ContentProvider instance is started and keeps running after\n the test finishes, even if a succeeding test instantiates another\n ContentProvider. A conflict develops because the two instances are\n usually running against the same underlying data source (for example, an\n sqlite database).\n </p>\n <p>\n Implementing shutDown() avoids this conflict by providing a way to\n terminate the ContentProvider. This method can also prevent memory leaks\n from multiple instantiations of the ContentProvider, and it can ensure\n unit test isolation by allowing you to completely clean up the test\n fixture before moving on to the next test.\n </p></p>\n</div></div></div><div id='method-uncanonicalize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-uncanonicalize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-uncanonicalize' class='name expandable'>uncanonicalize</a>( <span class='pre'>url</span> ) : Object {android.net.Uri}<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove canonicalization from canonical URIs previously returned by\n canonicalize. ...</div><div class='long'><p>Remove canonicalization from canonical URIs previously returned by\n <a href=\"#!/api/android.content.ContentProvider-method-canonicalize\" rel=\"android.content.ContentProvider-method-canonicalize\" class=\"docClass\">canonicalize</a>.  For example, if your implementation is to add\n a query param to canonicalize a URI, this method can simply trip any\n query params on the URI.  The default implementation always returns the\n same <var>url</var> that was passed in.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>url</span> : Object {Uri}<div class='sub-desc'><p>The Uri to remove any canonicalization from.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.Uri}</span><div class='sub-desc'><p>Return the non-canonical representation of <var>url</var>, return\n the <var>url</var> as-is if there is nothing to do, or return null if\n the data identified by the canonical representation can not be found in\n the current environment.</p>\n</div></li></ul></div></div></div><div id='method-update' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ContentProvider'>android.content.ContentProvider</span><br/><a href='source/ContentProvider.html#android-content-ContentProvider-method-update' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ContentProvider-method-update' class='name expandable'>update</a>( <span class='pre'>uri, values, selection</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Implement this to handle requests to update one or more rows. ...</div><div class='long'><p>Implement this to handle requests to update one or more rows.\n The implementation should update all rows matching the selection\n to set the columns according to the provided values map.\n As a courtesy, call ,android.database.ContentObserver) notifyChange()\n after updating.\n This method can be called from multiple threads, as described in\n <a href=\"{@docRoot}guide/topics/fundamentals/processes-and-threads.html#Threads\">Processes\n and Threads</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The URI to query. This can potentially have a record ID if this\n is an update request for a specific record.</p>\n</div></li><li><span class='pre'>values</span> : Object {ContentValues}<div class='sub-desc'><p>A set of column_name/value pairs to update in the database.\n     This must not be {@code null}.</p>\n</div></li><li><span class='pre'>selection</span> : String<div class='sub-desc'><p>An optional filter to match rows to update.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of rows affected.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});