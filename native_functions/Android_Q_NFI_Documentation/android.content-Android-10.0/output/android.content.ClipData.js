Ext.data.JsonP.android_content_ClipData({"tagname":"class","name":"android.content.ClipData","autodetected":{},"files":[{"filename":"ClipData.js","href":"ClipData.html#android-content-ClipData"}],"extends":"java.lang.Object","members":[{"name":"CREATOR","tagname":"property","owner":"android.content.ClipData","id":"property-CREATOR","meta":{}},{"name":"addItem","tagname":"method","owner":"android.content.ClipData","id":"method-addItem","meta":{}},{"name":"describeContents","tagname":"method","owner":"android.content.ClipData","id":"method-describeContents","meta":{}},{"name":"getDescription","tagname":"method","owner":"android.content.ClipData","id":"method-getDescription","meta":{}},{"name":"getItemAt","tagname":"method","owner":"android.content.ClipData","id":"method-getItemAt","meta":{}},{"name":"getItemCount","tagname":"method","owner":"android.content.ClipData","id":"method-getItemCount","meta":{}},{"name":"newHtmlText","tagname":"method","owner":"android.content.ClipData","id":"method-newHtmlText","meta":{}},{"name":"newIntent","tagname":"method","owner":"android.content.ClipData","id":"method-newIntent","meta":{}},{"name":"newPlainText","tagname":"method","owner":"android.content.ClipData","id":"method-newPlainText","meta":{}},{"name":"newRawUri","tagname":"method","owner":"android.content.ClipData","id":"method-newRawUri","meta":{}},{"name":"newUri","tagname":"method","owner":"android.content.ClipData","id":"method-newUri","meta":{}},{"name":"prepareToEnterProcess","tagname":"method","owner":"android.content.ClipData","id":"method-prepareToEnterProcess","meta":{}},{"name":"toString","tagname":"method","owner":"android.content.ClipData","id":"method-toString","meta":{}},{"name":"writeToParcel","tagname":"method","owner":"android.content.ClipData","id":"method-writeToParcel","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.content.ClipData","short_doc":"implements android.os.Parcelable\n\nRepresentation of a clipped data on the clipboard. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.content.ClipData</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ClipData.html#android-content-ClipData' target='_blank'>ClipData.js</a></div></pre><div class='doc-contents'><p>implements android.os.Parcelable</p>\n\n<p>Representation of a clipped data on the clipboard.</p>\n\n<p> <p>ClipData is a complex type containing one or more Item instances,\n each of which can hold one or more representations of an item of data.\n For display to the user, it also has a label.</p></p>\n\n<p> <p>A ClipData contains a <a href=\"#!/api/android.content.ClipDescription\" rel=\"android.content.ClipDescription\" class=\"docClass\">android.content.ClipDescription</a>, which describes\n important meta-data about the clip.  In particular, its\n getDescription().getMimeType(int)\n must return correct MIME type(s) describing the data in the clip.  For help\n in correctly constructing a clip with the correct MIME type, use\n CharSequence),\n CharSequence, Uri), and\n android.content.Intent).</p>\n\n<p> <p>Each Item instance can be one of three main classes of data: a simple\n CharSequence of text, a single Intent object, or a Uri.  See <a href=\"#!/api/android.content.ClipData.Item\" rel=\"android.content.ClipData.Item\" class=\"docClass\">android.content.ClipData.Item</a>\n for more details.</p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about using the clipboard framework, read the\n <a href=\"{@docRoot}guide/topics/clipboard/copy-paste.html\">Copy and Paste</a>\n developer guide.</p>\n </div></p>\n\n<p> <a name=\"ImplementingPaste\"></a>\n <h3>Implementing Paste or Drop</h3></p>\n\n<p> <p>To implement a paste or drop of a ClipData object into an application,\n the application must correctly interpret the data for its use.  If the <a href=\"#!/api/android.content.ClipData.Item\" rel=\"android.content.ClipData.Item\" class=\"docClass\">android.content.ClipData.Item</a>\n it contains is simple text or an Intent, there is little to be done: text\n can only be interpreted as text, and an Intent will typically be used for\n creating shortcuts (such as placing icons on the home screen) or other\n actions.</p>\n\n<p> <p>If all you want is the textual representation of the clipped data, you\n can use the convenience method <a href=\"#!/api/android.content.ClipData.Item-method-coerceToText\" rel=\"android.content.ClipData.Item-method-coerceToText\" class=\"docClass\">android.content.ClipData.Item.coerceToText</a>.\n In this case there is generally no need to worry about the MIME types\n reported by getDescription().getMimeType(int),\n since any clip item can always be converted to a string.</p>\n\n<p> <p>More complicated exchanges will be done through URIs, in particular\n \"content:\" URIs.  A content URI allows the recipient of a ClipData item\n to interact closely with the ContentProvider holding the data in order to\n negotiate the transfer of that data.  The clip must also be filled in with\n the available MIME types; CharSequence, Uri)\n will take care of correctly doing this.</p>\n\n<p> <p>For example, here is the paste function of a simple NotePad application.\n When retrieving the data from the clipboard, it can do either two things:\n if the clipboard contains a URI reference to an existing note, it copies\n the entire structure of the note into a new note; otherwise, it simply\n coerces the clip into text and uses that as the new note's contents.</p>\n\n<p> {@sample development/samples/NotePad/src/com/example/android/notepad/NoteEditor.java\n      paste}</p>\n\n<p> <p>In many cases an application can paste various types of streams of data.  For\n example, an e-mail application may want to allow the user to paste an image\n or other binary data as an attachment.  This is accomplished through the\n ContentResolver String) and\n String, android.os.Bundle)\n methods.  These allow a client to discover the type(s) of data that a particular\n content URI can make available as a stream and retrieve the stream of data.</p>\n\n<p> <p>For example, the implementation of <a href=\"#!/api/android.content.ClipData.Item-method-coerceToText\" rel=\"android.content.ClipData.Item-method-coerceToText\" class=\"docClass\">android.content.ClipData.Item.coerceToText</a>\n itself uses this to try to retrieve a URI clip as a stream of text:</p>\n\n<p> {@sample frameworks/base/core/java/android/content/ClipData.java coerceToText}</p>\n\n<p> <a name=\"ImplementingCopy\"></a>\n <h3>Implementing Copy or Drag</h3></p>\n\n<p> <p>To be the source of a clip, the application must construct a ClipData\n object that any recipient can interpret best for their context.  If the clip\n is to contain a simple text, Intent, or URI, this is easy: an <a href=\"#!/api/android.content.ClipData.Item\" rel=\"android.content.ClipData.Item\" class=\"docClass\">android.content.ClipData.Item</a>\n containing the appropriate data type can be constructed and used.</p>\n\n<p> <p>More complicated data types require the implementation of support in\n a ContentProvider for describing and generating the data for the recipient.\n A common scenario is one where an application places on the clipboard the\n content: URI of an object that the user has copied, with the data at that\n URI consisting of a complicated structure that only other applications with\n direct knowledge of the structure can use.</p>\n\n<p> <p>For applications that do not have intrinsic knowledge of the data structure,\n the content provider holding it can make the data available as an arbitrary\n number of types of data streams.  This is done by implementing the\n ContentProvider String) and\n String, android.os.Bundle)\n methods.</p>\n\n<p> <p>Going back to our simple NotePad application, this is the implementation\n it may have to convert a single note URI (consisting of a title and the note\n text) into a stream of plain text data.</p>\n\n<p> {@sample development/samples/NotePad/src/com/example/android/notepad/NotePadProvider.java\n      stream}</p>\n\n<p> <p>The copy operation in our NotePad application is now just a simple matter\n of making a clip containing the URI of the note being copied:</p>\n\n<p> {@sample development/samples/NotePad/src/com/example/android/notepad/NotesList.java\n      copy}</p>\n\n<p> <p>Note if a paste operation needs this clip as text (for example to paste\n into an editor), then android.content.ClipData.Item.coerceToText(Context) will ask the content\n provider for the clip URI as text and successfully paste the entire note.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-CREATOR' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-property-CREATOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-property-CREATOR' class='name expandable'>CREATOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addItem' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-addItem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-addItem' class='name expandable'>addItem</a>( <span class='pre'>resolver, item</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a new Item to the overall ClipData container. ...</div><div class='long'><p>Add a new Item to the overall ClipData container.\n <p> Unlike <a href=\"#!/api/android.content.ClipData-method-addItem\" rel=\"android.content.ClipData-method-addItem\" class=\"docClass\">addItem</a>(Item), this method will update the list of available MIME types\n in the <a href=\"#!/api/android.content.ClipDescription\" rel=\"android.content.ClipDescription\" class=\"docClass\">android.content.ClipDescription</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>resolver</span> : Object {ContentResolver}<div class='sub-desc'><p>ContentResolver used to get information about the URI possibly contained in\n the item.</p>\n</div></li><li><span class='pre'>item</span> : Object {ClipData.Item}<div class='sub-desc'><p>Item to be added.</p>\n</div></li></ul></div></div></div><div id='method-describeContents' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-describeContents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-describeContents' class='name expandable'>describeContents</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getDescription' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-getDescription' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-getDescription' class='name expandable'>getDescription</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the android.content.ClipDescription associated with this data, describing\n what it contains. ...</div><div class='long'><p>Return the <a href=\"#!/api/android.content.ClipDescription\" rel=\"android.content.ClipDescription\" class=\"docClass\">android.content.ClipDescription</a> associated with this data, describing\n what it contains.</p>\n</div></div></div><div id='method-getItemAt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-getItemAt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-getItemAt' class='name expandable'>getItemAt</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a single item inside of the clip data. ...</div><div class='long'><p>Return a single item inside of the clip data.  The index can range\n from 0 to <a href=\"#!/api/android.content.ClipData-method-getItemCount\" rel=\"android.content.ClipData-method-getItemCount\" class=\"docClass\">getItemCount</a>()-1.</p>\n</div></div></div><div id='method-getItemCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-getItemCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-getItemCount' class='name expandable'>getItemCount</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the number of items in the clip data. ...</div><div class='long'><p>Return the number of items in the clip data.</p>\n</div></div></div><div id='method-newHtmlText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-newHtmlText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-newHtmlText' class='name expandable'>newHtmlText</a>( <span class='pre'>label, text, htmlText</span> ) : Object {android.content.ClipData}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new ClipData holding data of the type\n android.content.ClipDescription.MIMETYPE_TEXT_HTML. ...</div><div class='long'><p>Create a new ClipData holding data of the type\n <a href=\"#!/api/android.content.ClipDescription-property-MIMETYPE_TEXT_HTML\" rel=\"android.content.ClipDescription-property-MIMETYPE_TEXT_HTML\" class=\"docClass\">android.content.ClipDescription.MIMETYPE_TEXT_HTML</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>label</span> : Object {CharSequence}<div class='sub-desc'><p>User-visible label for the clip data.</p>\n</div></li><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>The text of clip as plain text, for receivers that don't\n handle HTML.  This is required.</p>\n</div></li><li><span class='pre'>htmlText</span> : String<div class='sub-desc'><p>The actual HTML text in the clip.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.ClipData}</span><div class='sub-desc'><p>Returns a new ClipData containing the specified data.</p>\n</div></li></ul></div></div></div><div id='method-newIntent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-newIntent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-newIntent' class='name expandable'>newIntent</a>( <span class='pre'>label, intent</span> ) : Object {android.content.ClipData}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new ClipData holding an Intent with MIME type\n android.content.ClipDescription.MIMETYPE_TEXT_INTENT. ...</div><div class='long'><p>Create a new ClipData holding an Intent with MIME type\n <a href=\"#!/api/android.content.ClipDescription-property-MIMETYPE_TEXT_INTENT\" rel=\"android.content.ClipDescription-property-MIMETYPE_TEXT_INTENT\" class=\"docClass\">android.content.ClipDescription.MIMETYPE_TEXT_INTENT</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>label</span> : Object {CharSequence}<div class='sub-desc'><p>User-visible label for the clip data.</p>\n</div></li><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>The actual Intent in the clip.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.ClipData}</span><div class='sub-desc'><p>Returns a new ClipData containing the specified data.</p>\n</div></li></ul></div></div></div><div id='method-newPlainText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-newPlainText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-newPlainText' class='name expandable'>newPlainText</a>( <span class='pre'>label, text</span> ) : Object {android.content.ClipData}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new ClipData holding data of the type\n android.content.ClipDescription.MIMETYPE_TEXT_PLAIN. ...</div><div class='long'><p>Create a new ClipData holding data of the type\n <a href=\"#!/api/android.content.ClipDescription-property-MIMETYPE_TEXT_PLAIN\" rel=\"android.content.ClipDescription-property-MIMETYPE_TEXT_PLAIN\" class=\"docClass\">android.content.ClipDescription.MIMETYPE_TEXT_PLAIN</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>label</span> : Object {CharSequence}<div class='sub-desc'><p>User-visible label for the clip data.</p>\n</div></li><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>The actual text in the clip.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.ClipData}</span><div class='sub-desc'><p>Returns a new ClipData containing the specified data.</p>\n</div></li></ul></div></div></div><div id='method-newRawUri' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-newRawUri' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-newRawUri' class='name expandable'>newRawUri</a>( <span class='pre'>label, uri</span> ) : Object {android.content.ClipData}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new ClipData holding an URI with MIME type\n android.content.ClipDescription.MIMETYPE_TEXT_URILIST. ...</div><div class='long'><p>Create a new ClipData holding an URI with MIME type\n <a href=\"#!/api/android.content.ClipDescription-property-MIMETYPE_TEXT_URILIST\" rel=\"android.content.ClipDescription-property-MIMETYPE_TEXT_URILIST\" class=\"docClass\">android.content.ClipDescription.MIMETYPE_TEXT_URILIST</a>.\n Unlike CharSequence, Uri), nothing\n is inferred about the URI -- if it is a content: URI holding a bitmap,\n the reported type will still be uri-list.  Use this with care!</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>label</span> : Object {CharSequence}<div class='sub-desc'><p>User-visible label for the clip data.</p>\n</div></li><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The URI in the clip.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.ClipData}</span><div class='sub-desc'><p>Returns a new ClipData containing the specified data.</p>\n</div></li></ul></div></div></div><div id='method-newUri' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-newUri' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-newUri' class='name expandable'>newUri</a>( <span class='pre'>resolver, label, uri</span> ) : Object {android.content.ClipData}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new ClipData holding a URI. ...</div><div class='long'><p>Create a new ClipData holding a URI.  If the URI is a content: URI,\n this will query the content provider for the MIME type of its data and\n use that as the MIME type.  Otherwise, it will use the MIME type\n <a href=\"#!/api/android.content.ClipDescription-property-MIMETYPE_TEXT_URILIST\" rel=\"android.content.ClipDescription-property-MIMETYPE_TEXT_URILIST\" class=\"docClass\">android.content.ClipDescription.MIMETYPE_TEXT_URILIST</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>resolver</span> : Object {ContentResolver}<div class='sub-desc'><p>ContentResolver used to get information about the URI.</p>\n</div></li><li><span class='pre'>label</span> : Object {CharSequence}<div class='sub-desc'><p>User-visible label for the clip data.</p>\n</div></li><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>The URI in the clip.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.content.ClipData}</span><div class='sub-desc'><p>Returns a new ClipData containing the specified data.</p>\n</div></li></ul></div></div></div><div id='method-prepareToEnterProcess' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-prepareToEnterProcess' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-prepareToEnterProcess' class='name expandable'>prepareToEnterProcess</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>{@hide} ...</div><div class='long'><p>{@hide}</p>\n</div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-writeToParcel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.content.ClipData'>android.content.ClipData</span><br/><a href='source/ClipData.html#android-content-ClipData-method-writeToParcel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.content.ClipData-method-writeToParcel' class='name expandable'>writeToParcel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});