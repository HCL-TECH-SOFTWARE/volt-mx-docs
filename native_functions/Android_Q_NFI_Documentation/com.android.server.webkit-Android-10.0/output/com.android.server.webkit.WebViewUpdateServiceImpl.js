Ext.data.JsonP.com_android_server_webkit_WebViewUpdateServiceImpl({"tagname":"class","name":"com.android.server.webkit.WebViewUpdateServiceImpl","autodetected":{},"files":[{"filename":"WebViewUpdateServiceImpl.js","href":"WebViewUpdateServiceImpl.html#com-android-server-webkit-WebViewUpdateServiceImpl"}],"extends":"java.lang.Object","hide":true,"members":[],"alternateClassNames":[],"aliases":{},"id":"class-com.android.server.webkit.WebViewUpdateServiceImpl","short_doc":"Implementation of the WebViewUpdateService. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.server.webkit.WebViewUpdateServiceImpl</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/WebViewUpdateServiceImpl.html#com-android-server-webkit-WebViewUpdateServiceImpl' target='_blank'>WebViewUpdateServiceImpl.js</a></div></pre><div class='doc-contents'><p>Implementation of the WebViewUpdateService.\n This class doesn't depend on the android system like the actual Service does and can be used\n directly by tests (as long as they implement a SystemInterface).</p>\n\n<p> This class keeps track of and prepares the current WebView implementation, and needs to keep\n track of a couple of different things such as what package is used as WebView implementation.</p>\n\n<p> The public methods in this class are accessed from WebViewUpdateService either on the UI thread\n or on one of multiple Binder threads. The WebView preparation code shares state between threads\n meaning that code that chooses a new WebView implementation or checks which implementation is\n being used needs to hold a lock.</p>\n\n<p> The WebViewUpdateService can be accessed in a couple of different ways.\n 1. It is started from the SystemServer at boot - at that point we just initiate some state such\n as the WebView preparation class.\n 2. The SystemServer calls WebViewUpdateService.prepareWebViewInSystemServer. This happens at boot\n and the WebViewUpdateService should not have been accessed before this call. In this call we\n migrate away from the old fallback logic if necessary and then choose WebView implementation for\n the first time.\n 3. The update service listens for Intents related to package installs and removals. These intents\n are received and processed on the UI thread. Each intent can result in changing WebView\n implementation.\n 4. The update service can be reached through Binder calls which are handled on specific binder\n threads. These calls can be made from any process. Generally they are used for changing WebView\n implementation (from Settings), getting information about the current WebView implementation (for\n loading WebView into an app process), or notifying the service about Relro creation being\n completed.</p>\n</div><div class='members'></div></div>","meta":{}});