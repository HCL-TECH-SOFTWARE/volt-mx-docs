Ext.data.JsonP.java_security_interfaces_DSAKeyPairGenerator({"tagname":"class","name":"java.security.interfaces.DSAKeyPairGenerator","autodetected":{},"files":[{"filename":"DSAKeyPairGenerator.js","href":"DSAKeyPairGenerator.html#java-security-interfaces-DSAKeyPairGenerator"}],"members":[{"name":"initialize","tagname":"method","owner":"java.security.interfaces.DSAKeyPairGenerator","id":"method-initialize","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.security.interfaces.DSAKeyPairGenerator","short_doc":"An interface to an object capable of generating DSA key pairs. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/DSAKeyPairGenerator.html#java-security-interfaces-DSAKeyPairGenerator' target='_blank'>DSAKeyPairGenerator.js</a></div></pre><div class='doc-contents'><p>An interface to an object capable of generating DSA key pairs.</p>\n\n<p> <p>The {@code initialize} methods may each be called any number\n of times. If no {@code initialize} method is called on a\n DSAKeyPairGenerator, the default is to generate 1024-bit keys, using\n precomputed p, q and g parameters and an instance of SecureRandom as\n the random bit source.</p>\n\n<p> <p>Users wishing to indicate DSA-specific parameters, and to generate a key\n pair suitable for use with the DSA algorithm typically</p>\n\n<p> <ol></ol></p>\n\n<p> <li>Get a key pair generator for the DSA algorithm by calling the\n KeyPairGenerator {@code getInstance} method with \"DSA\"\n as its argument.</li></p>\n\n<p> <li>Initialize the generator by casting the result to a DSAKeyPairGenerator\n and calling one of the\n {@code initialize} methods from this DSAKeyPairGenerator interface.</li></p>\n\n<p> <li>Generate a key pair by calling the {@code generateKeyPair}\n method from the KeyPairGenerator class.</li></p>\n\n<p> </p>\n\n<p> <p>Note: it is not always necessary to do do algorithm-specific\n initialization for a DSA key pair generator. That is, it is not always\n necessary to call an {@code initialize} method in this interface.\n Algorithm-independent initialization using the {@code initialize} method\n in the KeyPairGenerator\n interface is all that is needed when you accept defaults for algorithm-specific\n parameters.</p>\n\n<p> <p>Note: Some earlier implementations of this interface may not support\n larger sizes of DSA parameters such as 2048 and 3072-bit.</p>\n\n<p> @see java.security.KeyPairGenerator</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-initialize' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.interfaces.DSAKeyPairGenerator'>java.security.interfaces.DSAKeyPairGenerator</span><br/><a href='source/DSAKeyPairGenerator.html#java-security-interfaces-DSAKeyPairGenerator-method-initialize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.interfaces.DSAKeyPairGenerator-method-initialize' class='name expandable'>initialize</a>( <span class='pre'>modlen, random, genParams</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initializes the key pair generator for a given modulus length\n (instead of parameters), and an optional SecureRandom ...</div><div class='long'><p>Initializes the key pair generator for a given modulus length\n (instead of parameters), and an optional SecureRandom bit source.\n If a SecureRandom bit source is needed but not supplied, i.e.\n null, a default SecureRandom instance will be used.</p>\n\n<p> <p>If {@code genParams} is true, this method generates new\n p, q and g parameters. If it is false, the method uses precomputed\n parameters for the modulus length requested. If there are no\n precomputed parameters for that modulus length, an exception will be\n thrown. It is guaranteed that there will always be\n default parameters for modulus lengths of 512 and 1024 bits.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>modlen</span> : Number<div class='sub-desc'><p>the modulus length in bits. Valid values are any\n multiple of 64 between 512 and 1024, inclusive, 2048, and 3072.</p>\n</div></li><li><span class='pre'>random</span> : Boolean<div class='sub-desc'><p>the random bit source to use to generate key bits;\n can be null.</p>\n</div></li><li><span class='pre'>genParams</span> : Object {SecureRandom}<div class='sub-desc'><p>whether or not to generate new parameters for\n the modulus length requested.\n@exception InvalidParameterException if {@code modlen} is\n invalid, or unsupported, or if {@code genParams} is false and there\n are no precomputed parameters for the requested modulus length.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});