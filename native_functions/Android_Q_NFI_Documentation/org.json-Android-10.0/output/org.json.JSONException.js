Ext.data.JsonP.org_json_JSONException({"tagname":"class","name":"org.json.JSONException","autodetected":{},"files":[{"filename":"JSONException.js","href":"JSONException.html#org-json-JSONException"}],"extends":"java.lang.Exception","members":[],"alternateClassNames":[],"aliases":{},"id":"class-org.json.JSONException","short_doc":"Thrown to indicate a problem with the JSON API. ...","classIcon":"icon-class","superclasses":["java.lang.Exception"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Exception<div class='subclass '><strong>org.json.JSONException</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/JSONException.html#org-json-JSONException' target='_blank'>JSONException.js</a></div></pre><div class='doc-contents'><p>Thrown to indicate a problem with the JSON API. Such problems include:\n <ul>\n   <li>Attempts to parse or construct malformed documents\n   <li>Use of null as a name\n   <li>Use of numeric types not available to JSON, such as NaNs or infinities.\n   <li>Lookups using an out of range index or nonexistent name\n   <li>Type mismatches on lookups\n </li></li></li></li></li></ul></p>\n\n<p> <p>Although this is a checked exception, it is rarely recoverable. Most\n callers should simply wrap this exception in an unchecked exception and\n rethrow:\n <pre>  public JSONArray toJSONObject() {\n     try {\n         JSONObject result = new JSONObject();\n         ...\n     } catch (JSONException e) {\n         throw new RuntimeException(e);\n     }\n }</pre></p>\n</div><div class='members'></div></div>","meta":{}});