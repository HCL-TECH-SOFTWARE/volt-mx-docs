Ext.data.JsonP.android_hardware_display_DisplayManager({"tagname":"class","name":"android.hardware.display.DisplayManager","autodetected":{},"files":[{"filename":"DisplayManager.js","href":"DisplayManager.html#android-hardware-display-DisplayManager"}],"extends":"java.lang.Object","members":[{"name":"DISPLAY_CATEGORY_PRESENTATION","tagname":"property","owner":"android.hardware.display.DisplayManager","id":"property-DISPLAY_CATEGORY_PRESENTATION","meta":{}},{"name":"VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR","tagname":"property","owner":"android.hardware.display.DisplayManager","id":"property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR","meta":{}},{"name":"VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY","tagname":"property","owner":"android.hardware.display.DisplayManager","id":"property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY","meta":{}},{"name":"VIRTUAL_DISPLAY_FLAG_PRESENTATION","tagname":"property","owner":"android.hardware.display.DisplayManager","id":"property-VIRTUAL_DISPLAY_FLAG_PRESENTATION","meta":{}},{"name":"VIRTUAL_DISPLAY_FLAG_PUBLIC","tagname":"property","owner":"android.hardware.display.DisplayManager","id":"property-VIRTUAL_DISPLAY_FLAG_PUBLIC","meta":{}},{"name":"VIRTUAL_DISPLAY_FLAG_SECURE","tagname":"property","owner":"android.hardware.display.DisplayManager","id":"property-VIRTUAL_DISPLAY_FLAG_SECURE","meta":{}},{"name":"getDisplay","tagname":"method","owner":"android.hardware.display.DisplayManager","id":"method-getDisplay","meta":{}},{"name":"getDisplays","tagname":"method","owner":"android.hardware.display.DisplayManager","id":"method-getDisplays","meta":{}},{"name":"registerDisplayListener","tagname":"method","owner":"android.hardware.display.DisplayManager","id":"method-registerDisplayListener","meta":{}},{"name":"unregisterDisplayListener","tagname":"method","owner":"android.hardware.display.DisplayManager","id":"method-unregisterDisplayListener","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.hardware.display.DisplayManager","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.hardware.display.DisplayManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/DisplayManager.html#android-hardware-display-DisplayManager' target='_blank'>DisplayManager.js</a></div></pre><div class='doc-contents'><p>Manages the properties of attached displays.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DISPLAY_CATEGORY_PRESENTATION' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION' class='name expandable'>DISPLAY_CATEGORY_PRESENTATION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Display category: Presentation displays. ...</div><div class='long'><p>Display category: Presentation displays.</p>\n\n<p>\nThis category can be used to identify secondary displays that are suitable for\nuse as presentation displays such as HDMI or Wireless displays.  Applications\nmay automatically project their content to presentation displays to provide\nricher second screen experiences.\n</p>\n\n\n<p>@see android.app.Presentation\n@see Display#FLAG_PRESENTATION\n@see <a href=\"#!/api/android.hardware.display.DisplayManager-method-getDisplays\" rel=\"android.hardware.display.DisplayManager-method-getDisplays\" class=\"docClass\">getDisplays</a>(String)</p>\n<p>Defaults to: <code>&quot;android.hardware.display.category.PRESENTATION&quot;</code></p></div></div></div><div id='property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR' class='name expandable'>VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Virtual display flag: Allows content to be mirrored on private displays when no content is\nbeing shown. ...</div><div class='long'><p>Virtual display flag: Allows content to be mirrored on private displays when no content is\nbeing shown.</p>\n\n<p>\nThis flag is mutually exclusive with <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY</a>.\nIf both flags are specified then the own-content only behavior will be applied.\n</p>\n\n\n\n\n<p>\nThe behavior of this flag is implied whenever <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PUBLIC\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PUBLIC\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_PUBLIC</a> is set\nand <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY</a> has not been set.   This flag is only\nrequired to override the default behavior when creating a private display.\n</p>\n\n\n\n\n<p>\nCreating an auto-mirroing virtual display requires the CAPTURE_VIDEO_OUTPUT\nor CAPTURE_SECURE_VIDEO_OUTPUT permission.\nThese permissions are reserved for use by system components and are not available to\nthird-party applications.\n\nAlternatively, an appropriate MediaProjection may be used to create an\nauto-mirroring virtual display.\n</p>\n\n\n<p>@see #createVirtualDisplay</p>\n<p>Defaults to: <code>&quot;16&quot;</code></p></div></div></div><div id='property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY' class='name expandable'>VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Virtual display flag: Only show this display's own content; do not mirror\nthe content of another display. ...</div><div class='long'><p>Virtual display flag: Only show this display's own content; do not mirror\nthe content of another display.</p>\n\n<p>\nThis flag is used in conjunction with <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PUBLIC\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PUBLIC\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_PUBLIC</a>.\nOrdinarily public virtual displays will automatically mirror the content of the\ndefault display if they have no windows of their own.  When this flag is\nspecified, the virtual display will only ever show its own content and\nwill be blanked instead if it has no windows.\n</p>\n\n\n\n\n<p>\nThis flag is mutually exclusive with <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</a>.  If both\nflags are specified then the own-content only behavior will be applied.\n</p>\n\n\n\n\n<p>\nThis behavior of this flag is implied whenever neither <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PUBLIC\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PUBLIC\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_PUBLIC</a>\nnor <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</a> have been set.  This flag is only required to\noverride the default behavior when creating a public display.\n</p>\n\n\n<p>@see #createVirtualDisplay</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-VIRTUAL_DISPLAY_FLAG_PRESENTATION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PRESENTATION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PRESENTATION' class='name expandable'>VIRTUAL_DISPLAY_FLAG_PRESENTATION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Virtual display flag: Create a presentation display. ...</div><div class='long'><p>Virtual display flag: Create a presentation display.</p>\n\n<h3>Presentation virtual displays</h3>\n\n\n<p>\nWhen this flag is set, the virtual display is registered as a presentation\ndisplay in the <a href=\"#!/api/android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION\" rel=\"android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION\" class=\"docClass\">presentation display category</a>.\nApplications may automatically project their content to presentation displays\nto provide richer second screen experiences.\n</p>\n\n\n\n\n<h3>Non-presentation virtual displays</h3>\n\n\n<p>\nWhen this flag is not set, the virtual display is not registered as a presentation\ndisplay.  Applications can still project their content on the display but they\nwill typically not do so automatically.  This option is appropriate for\nmore special-purpose displays.\n</p>\n\n\n<p>@see android.app.Presentation\n@see #createVirtualDisplay\n@see <a href=\"#!/api/android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION\" rel=\"android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION\" class=\"docClass\">DISPLAY_CATEGORY_PRESENTATION</a>\n@see Display#FLAG_PRESENTATION</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-VIRTUAL_DISPLAY_FLAG_PUBLIC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PUBLIC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_PUBLIC' class='name expandable'>VIRTUAL_DISPLAY_FLAG_PUBLIC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Virtual display flag: Create a public display. ...</div><div class='long'><p>Virtual display flag: Create a public display.</p>\n\n<h3>Public virtual displays</h3>\n\n\n<p>\nWhen this flag is set, the virtual display is public.\n</p>\n\n\n<p>\nA public virtual display behaves just like most any other display that is connected\nto the system such as an HDMI or Wireless display.  Applications can open\nwindows on the display and the system may mirror the contents of other displays\nonto it.\n</p>\n\n\n<p>\nCreating a public virtual display that isn't restricted to own-content only implicitly\ncreates an auto-mirroring display. See <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</a> for\nrestrictions on who is allowed to create an auto-mirroring display.\n</p>\n\n\n\n\n<h3>Private virtual displays</h3>\n\n\n<p>\nWhen this flag is not set, the virtual display is private as defined by the\nDisplay.FLAG_PRIVATE display flag.\n</p>\n\n\n\n\n<p>\nA private virtual display belongs to the application that created it.  Only the a owner of a\nprivate virtual display and the apps that are already on that display are allowed to place\nwindows upon it.  The private virtual display also does not participate in display mirroring:\nit will neither receive mirrored content from another display nor allow its own content to be\nmirrored elsewhere.  More precisely, the only processes that are allowed to enumerate or\ninteract with the private display are those that have the same UID as the application that\noriginally created the private virtual display or as the activities that are already on that\ndisplay.\n</p>\n\n\n<p>@see #createVirtualDisplay\n@see <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY</a>\n@see <a href=\"#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR\" rel=\"android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR\" class=\"docClass\">VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR</a></p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-VIRTUAL_DISPLAY_FLAG_SECURE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-property-VIRTUAL_DISPLAY_FLAG_SECURE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-property-VIRTUAL_DISPLAY_FLAG_SECURE' class='name expandable'>VIRTUAL_DISPLAY_FLAG_SECURE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Virtual display flag: Create a secure display. ...</div><div class='long'><p>Virtual display flag: Create a secure display.</p>\n\n<h3>Secure virtual displays</h3>\n\n\n<p>\nWhen this flag is set, the virtual display is considered secure as defined\nby the Display.FLAG_SECURE display flag.  The caller promises to take\nreasonable measures, such as over-the-air encryption, to prevent the contents\nof the display from being intercepted or recorded on a persistent medium.\n</p>\n\n\n<p>\nCreating a secure virtual display requires the CAPTURE_SECURE_VIDEO_OUTPUT permission.\nThis permission is reserved for use by system components and is not available to\nthird-party applications.\n</p>\n\n\n\n\n<h3>Non-secure virtual displays</h3>\n\n\n<p>\nWhen this flag is not set, the virtual display is considered unsecure.\nThe content of secure windows will be blanked if shown on this display.\n</p>\n\n\n<p>@see Display#FLAG_SECURE\n@see #createVirtualDisplay</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getDisplay' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-method-getDisplay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-method-getDisplay' class='name expandable'>getDisplay</a>( <span class='pre'>displayId</span> ) : Object {android.view.Display}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets information about a logical display. ...</div><div class='long'><p>Gets information about a logical display.</p>\n\n<p> The display metrics may be adjusted to provide compatibility\n for legacy applications.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>displayId</span> : Number<div class='sub-desc'><p>The logical display id.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.Display}</span><div class='sub-desc'><p>The display object, or null if there is no valid display with the given id.</p>\n</div></li></ul></div></div></div><div id='method-getDisplays' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-method-getDisplays' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-method-getDisplays' class='name expandable'>getDisplays</a>( <span class='pre'>category</span> ) : Object {android.view.Display}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets all currently valid logical displays of the specified category. ...</div><div class='long'><p>Gets all currently valid logical displays of the specified category.\n <p>\n When there are multiple displays in a category the returned displays are sorted\n of preference.  For example, if the requested category is\n <a href=\"#!/api/android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION\" rel=\"android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION\" class=\"docClass\">DISPLAY_CATEGORY_PRESENTATION</a> and there are multiple presentation displays\n then the displays are sorted so that the first display in the returned array\n is the most preferred presentation display.  The application may simply\n use the first display or allow the user to choose.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>category</span> : String<div class='sub-desc'><p>The requested display category or null to return all displays.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.Display}</span><div class='sub-desc'><p>An array containing all displays sorted by order of preference.\n@see <a href=\"#!/api/android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION\" rel=\"android.hardware.display.DisplayManager-property-DISPLAY_CATEGORY_PRESENTATION\" class=\"docClass\">DISPLAY_CATEGORY_PRESENTATION</a></p>\n</div></li></ul></div></div></div><div id='method-registerDisplayListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-method-registerDisplayListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-method-registerDisplayListener' class='name expandable'>registerDisplayListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers an display listener to receive notifications about when\n displays are added, removed or changed. ...</div><div class='long'><p>Registers an display listener to receive notifications about when\n displays are added, removed or changed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {DisplayManager.DisplayListener}<div class='sub-desc'><p>The listener to register.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>The handler on which the listener should be invoked, or null\n if the listener should be invoked on the calling thread's looper.\n@see <a href=\"#!/api/android.hardware.display.DisplayManager-method-unregisterDisplayListener\" rel=\"android.hardware.display.DisplayManager-method-unregisterDisplayListener\" class=\"docClass\">unregisterDisplayListener</a></p>\n</div></li></ul></div></div></div><div id='method-unregisterDisplayListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.display.DisplayManager'>android.hardware.display.DisplayManager</span><br/><a href='source/DisplayManager.html#android-hardware-display-DisplayManager-method-unregisterDisplayListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.display.DisplayManager-method-unregisterDisplayListener' class='name expandable'>unregisterDisplayListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Unregisters a display listener. ...</div><div class='long'><p>Unregisters a display listener.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {DisplayManager.DisplayListener}<div class='sub-desc'><p>The listener to unregister.\n@see <a href=\"#!/api/android.hardware.display.DisplayManager-method-registerDisplayListener\" rel=\"android.hardware.display.DisplayManager-method-registerDisplayListener\" class=\"docClass\">registerDisplayListener</a></p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});