Ext.data.JsonP.android_hardware_radio_RadioTuner({"tagname":"class","name":"android.hardware.radio.RadioTuner","autodetected":{},"files":[{"filename":"RadioTuner.js","href":"RadioTuner.html#android-hardware-radio-RadioTuner"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"DIRECTION_DOWN","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-DIRECTION_DOWN","meta":{}},{"name":"DIRECTION_UP","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-DIRECTION_UP","meta":{}},{"name":"ERROR_BACKGROUND_SCAN_FAILED","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-ERROR_BACKGROUND_SCAN_FAILED","meta":{"deprecated":{"text":"<p>See onError callback.</p>\n"}}},{"name":"ERROR_BACKGROUND_SCAN_UNAVAILABLE","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-ERROR_BACKGROUND_SCAN_UNAVAILABLE","meta":{"deprecated":{"text":"<p>See onError callback.</p>\n"}}},{"name":"ERROR_CANCELLED","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-ERROR_CANCELLED","meta":{"deprecated":{"text":"<p>See onError callback.</p>\n"}}},{"name":"ERROR_CONFIG","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-ERROR_CONFIG","meta":{"deprecated":{"text":"<p>See onError callback.</p>\n"}}},{"name":"ERROR_HARDWARE_FAILURE","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-ERROR_HARDWARE_FAILURE","meta":{"deprecated":{"text":"<p>See onError callback.</p>\n"}}},{"name":"ERROR_SCAN_TIMEOUT","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-ERROR_SCAN_TIMEOUT","meta":{"deprecated":{"text":"<p>See onError callback.</p>\n"}}},{"name":"ERROR_SERVER_DIED","tagname":"property","owner":"android.hardware.radio.RadioTuner","id":"property-ERROR_SERVER_DIED","meta":{"deprecated":{"text":"<p>See onError callback.</p>\n"}}},{"name":"cancel","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-cancel","meta":{}},{"name":"cancelAnnouncement","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-cancelAnnouncement","meta":{}},{"name":"close","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-close","meta":{}},{"name":"getConfiguration","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-getConfiguration","meta":{"deprecated":{"text":"<p>Only applicable for HAL 1.x.</p>\n"}}},{"name":"getDynamicProgramList","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-getDynamicProgramList","meta":{}},{"name":"getMute","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-getMute","meta":{}},{"name":"getParameters","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-getParameters","meta":{}},{"name":"getProgramInformation","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-getProgramInformation","meta":{"deprecated":{"text":"<p>Use onProgramInfoChanged callback instead.</p>\n"}}},{"name":"getProgramList","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-getProgramList","meta":{"deprecated":{"text":"<p>Use getDynamicProgramList instead.</p>\n"}}},{"name":"hasControl","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-hasControl","meta":{}},{"name":"isAnalogForced","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-isAnalogForced","meta":{"deprecated":{"text":"<p>Use isConfigFlagSet(int) instead.</p>\n"}}},{"name":"isAntennaConnected","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-isAntennaConnected","meta":{"deprecated":{"text":"<p>Use onAntennaState callback instead</p>\n"}}},{"name":"isConfigFlagSet","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-isConfigFlagSet","meta":{}},{"name":"isConfigFlagSupported","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-isConfigFlagSupported","meta":{}},{"name":"scan","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-scan","meta":{}},{"name":"setAnalogForced","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-setAnalogForced","meta":{"deprecated":{"text":"<p>Use boolean) instead.</p>\n"}}},{"name":"setConfigFlag","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-setConfigFlag","meta":{}},{"name":"setConfiguration","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-setConfiguration","meta":{"deprecated":{"text":"<p>Only applicable for HAL 1.x.</p>\n"}}},{"name":"setMute","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-setMute","meta":{}},{"name":"setParameters","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-setParameters","meta":{}},{"name":"startBackgroundScan","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-startBackgroundScan","meta":{}},{"name":"step","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-step","meta":{}},{"name":"tune","tagname":"method","owner":"android.hardware.radio.RadioTuner","id":"method-tune","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.hardware.radio.RadioTuner","short_doc":"RadioTuner interface provides methods to control a radio tuner on the device: selecting and\n configuring the active b...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.hardware.radio.RadioTuner</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner' target='_blank'>RadioTuner.js</a></div></pre><div class='doc-contents'><p>RadioTuner interface provides methods to control a radio tuner on the device: selecting and\n configuring the active band, muting/unmuting, scanning and tuning, etc...</p>\n\n<p> Obtain a RadioTuner interface by calling RadioManager.BandConfig, boolean, android.hardware.radio.RadioTuner.Callback, Handler).</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DIRECTION_DOWN' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-DIRECTION_DOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-DIRECTION_DOWN' class='name expandable'>DIRECTION_DOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Scanning directions DOWN for boolean), boolean) ...</div><div class='long'><p>Scanning directions DOWN for boolean), boolean)</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-DIRECTION_UP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-DIRECTION_UP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-DIRECTION_UP' class='name expandable'>DIRECTION_UP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Scanning direction UP for boolean), boolean) ...</div><div class='long'><p>Scanning direction UP for boolean), boolean)</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-ERROR_BACKGROUND_SCAN_FAILED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-ERROR_BACKGROUND_SCAN_FAILED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-ERROR_BACKGROUND_SCAN_FAILED' class='name expandable'>ERROR_BACKGROUND_SCAN_FAILED</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Background scan failed due to other error, ie. ...</div><div class='long'><p>Background scan failed due to other error, ie. HW failure.</p>\n<p>Defaults to: <code>&quot;6&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>See onError callback.</p>\n\n        </div>\n</div></div></div><div id='property-ERROR_BACKGROUND_SCAN_UNAVAILABLE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-ERROR_BACKGROUND_SCAN_UNAVAILABLE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-ERROR_BACKGROUND_SCAN_UNAVAILABLE' class='name expandable'>ERROR_BACKGROUND_SCAN_UNAVAILABLE</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Background scan was interrupted due to hardware becoming temporarily unavailable. ...</div><div class='long'><p>Background scan was interrupted due to hardware becoming temporarily unavailable.</p>\n<p>Defaults to: <code>&quot;5&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>See onError callback.</p>\n\n        </div>\n</div></div></div><div id='property-ERROR_CANCELLED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-ERROR_CANCELLED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-ERROR_CANCELLED' class='name expandable'>ERROR_CANCELLED</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>A pending seek or tune operation was cancelled ...</div><div class='long'><p>A pending seek or tune operation was cancelled</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>See onError callback.</p>\n\n        </div>\n</div></div></div><div id='property-ERROR_CONFIG' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-ERROR_CONFIG' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-ERROR_CONFIG' class='name expandable'>ERROR_CONFIG</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>The requested configuration could not be applied ...</div><div class='long'><p>The requested configuration could not be applied</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>See onError callback.</p>\n\n        </div>\n</div></div></div><div id='property-ERROR_HARDWARE_FAILURE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-ERROR_HARDWARE_FAILURE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-ERROR_HARDWARE_FAILURE' class='name expandable'>ERROR_HARDWARE_FAILURE</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Indicates a failure of radio IC or driver. ...</div><div class='long'><p>Indicates a failure of radio IC or driver.\n The application must close and re open the tuner</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>See onError callback.</p>\n\n        </div>\n</div></div></div><div id='property-ERROR_SCAN_TIMEOUT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-ERROR_SCAN_TIMEOUT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-ERROR_SCAN_TIMEOUT' class='name expandable'>ERROR_SCAN_TIMEOUT</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>A pending seek or tune operation timed out ...</div><div class='long'><p>A pending seek or tune operation timed out</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>See onError callback.</p>\n\n        </div>\n</div></div></div><div id='property-ERROR_SERVER_DIED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-property-ERROR_SERVER_DIED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-property-ERROR_SERVER_DIED' class='name expandable'>ERROR_SERVER_DIED</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Indicates a failure of the radio service. ...</div><div class='long'><p>Indicates a failure of the radio service.\n The application must close and re open the tuner</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>See onError callback.</p>\n\n        </div>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cancel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-cancel' class='name expandable'>cancel</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancel a pending scan or tune operation. ...</div><div class='long'><p>Cancel a pending scan or tune operation.\n If an operation is pending, <a href=\"#!/api/android.hardware.radio.RadioTuner.Callback\" rel=\"android.hardware.radio.RadioTuner.Callback\" class=\"docClass\">android.hardware.radio.RadioTuner.Callback</a> onError() will be called with\n <a href=\"#!/api/android.hardware.radio.RadioTuner-property-ERROR_CANCELLED\" rel=\"android.hardware.radio.RadioTuner-property-ERROR_CANCELLED\" class=\"docClass\">ERROR_CANCELLED</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><ul>\n  <li>RadioManager.STATUS_OK in case of success, </li>\n  <li>RadioManager.STATUS_ERROR in case of unspecified error, </li>\n  <li>RadioManager.STATUS_NO_INIT if the native service cannot be reached, </li>\n  <li>RadioManager.STATUS_BAD_VALUE if parameters are invalid, </li>\n  <li>RadioManager.STATUS_INVALID_OPERATION if the call is out of sequence, </li>\n  <li>RadioManager.STATUS_DEAD_OBJECT if the binder transaction to the native\n  service fails, </li>\n </ul>\n\n</div></li></ul></div></div></div><div id='method-cancelAnnouncement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-cancelAnnouncement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-cancelAnnouncement' class='name expandable'>cancelAnnouncement</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancels traffic or emergency announcement. ...</div><div class='long'><p>Cancels traffic or emergency announcement.</p>\n\n<p> If there was no announcement to cancel, no action is taken.</p>\n\n<p> There is a race condition between calling cancelAnnouncement and the actual announcement\n being finished, so onTrafficAnnouncement / onEmergencyAnnouncement callback should be\n tracked with proper locking.</p>\n</div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Close the tuner interface. ...</div><div class='long'><p>Close the tuner interface. The <a href=\"#!/api/android.hardware.radio.RadioTuner.Callback\" rel=\"android.hardware.radio.RadioTuner.Callback\" class=\"docClass\">android.hardware.radio.RadioTuner.Callback</a> callback will not be called\n anymore and associated resources will be released.\n Must be called when the tuner is not needed to make hardware resources available to others.</p>\n</div></div></div><div id='method-getConfiguration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-getConfiguration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-getConfiguration' class='name expandable'>getConfiguration</a>( <span class='pre'>config</span> ) : Number<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Get current configuration. ...</div><div class='long'><p>Get current configuration.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Only applicable for HAL 1.x.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object {android.hardware.radio.RadioManager.BandConfig[]}<div class='sub-desc'><p>a BandConfig array of lengh 1 where the configuration is returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><ul>\n  <li>RadioManager.STATUS_OK in case of success, </li>\n  <li>RadioManager.STATUS_ERROR in case of unspecified error, </li>\n  <li>RadioManager.STATUS_NO_INIT if the native service cannot be reached, </li>\n  <li>RadioManager.STATUS_BAD_VALUE if parameters are invalid, </li>\n  <li>RadioManager.STATUS_INVALID_OPERATION if the call is out of sequence, </li>\n  <li>RadioManager.STATUS_DEAD_OBJECT if the binder transaction to the native\n  service fails, </li>\n </ul>\n\n</div></li></ul></div></div></div><div id='method-getDynamicProgramList' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-getDynamicProgramList' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-getDynamicProgramList' class='name expandable'>getDynamicProgramList</a>( <span class='pre'>filter</span> ) : Object {android.hardware.radio.ProgramList}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the dynamic list of discovered radio stations. ...</div><div class='long'><p>Get the dynamic list of discovered radio stations.</p>\n\n<p> The list object is updated asynchronously; to get the updates register\n with android.hardware.radio.ProgramList.addListCallback.</p>\n\n<p> When the returned object is no longer used, it must be closed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>filter</span> : Object {ProgramList.Filter}<div class='sub-desc'><p>filter for the list, or null to get the full list.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.hardware.radio.ProgramList}</span><div class='sub-desc'><p>the dynamic program list object, close it after use\n         or {@code null} if program list is not supported by the tuner</p>\n</div></li></ul></div></div></div><div id='method-getMute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-getMute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-getMute' class='name expandable'>getMute</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Get mute state. ...</div><div class='long'><p>Get mute state.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the radio tuner audio source is muted or a problem occured\n retrieving the mute state, {@code false} otherwise.</p>\n</div></li></ul></div></div></div><div id='method-getParameters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-getParameters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-getParameters' class='name expandable'>getParameters</a>( <span class='pre'>keys</span> ) : Object {java.util.Map}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generic method for retrieving vendor-specific parameter values. ...</div><div class='long'><p>Generic method for retrieving vendor-specific parameter values.\n The framework does not interpret the parameters, they are passed\n in an opaque manner between a vendor application and HAL.</p>\n\n<p> Framework does not cache set/get requests, so it's possible for\n getParameter to return a different value than previous setParameter call.</p>\n\n<p> The syntax and semantics of keys are up to the vendor (as long as prefix\n rules are obeyed). For instance, vendors may include some form of\n wildcard support. In such case, result vector may be of different size\n than requested keys vector. However, wildcards are not recognized by\n framework and they are passed as-is to the HAL implementation.</p>\n\n<p> Unknown keys must be ignored and not placed into results vector.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keys</span> : Object {java.util.List}<div class='sub-desc'><p>Parameter keys to fetch.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Map}</span><div class='sub-desc'><p>Vendor-specific key-value pairs.</p>\n</div></li></ul></div></div></div><div id='method-getProgramInformation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-getProgramInformation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-getProgramInformation' class='name expandable'>getProgramInformation</a>( <span class='pre'>info</span> ) : Number<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Get current station information. ...</div><div class='long'><p>Get current station information.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use onProgramInfoChanged callback instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>info</span> : Object {android.hardware.radio.RadioManager.ProgramInfo[]}<div class='sub-desc'><p>a ProgramInfo array of lengh 1 where the information is returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><ul>\n  <li>RadioManager.STATUS_OK in case of success, </li>\n  <li>RadioManager.STATUS_ERROR in case of unspecified error, </li>\n  <li>RadioManager.STATUS_NO_INIT if the native service cannot be reached, </li>\n  <li>RadioManager.STATUS_BAD_VALUE if parameters are invalid, </li>\n  <li>RadioManager.STATUS_INVALID_OPERATION if the call is out of sequence, </li>\n  <li>RadioManager.STATUS_DEAD_OBJECT if the binder transaction to the native\n  service fails, </li>\n </ul>\n\n</div></li></ul></div></div></div><div id='method-getProgramList' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-getProgramList' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-getProgramList' class='name expandable'>getProgramList</a>( <span class='pre'>vendorFilter</span> ) : Object {java.util.List}<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Get the list of discovered radio stations. ...</div><div class='long'><p>Get the list of discovered radio stations.</p>\n\n<p> To get the full list, set filter to null or empty map.\n Keys must be prefixed with unique vendor Java-style namespace,\n eg. 'com.somecompany.parameter1'.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use getDynamicProgramList instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>vendorFilter</span> : Object {java.util.Map}<div class='sub-desc'><p>vendor-specific selector for radio stations.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a list of radio stations.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the scan is in progress or has not been started,\n         startBackgroundScan() call may fix it.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the vendorFilter argument is not valid.</p>\n</div></li></ul></div></div></div><div id='method-hasControl' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-hasControl' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-hasControl' class='name expandable'>hasControl</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates if this client actually controls the tuner. ...</div><div class='long'><p>Indicates if this client actually controls the tuner.\n Control is always granted after\n android.hardware.radio.RadioManager.BandConfig, boolean, android.hardware.radio.RadioTuner.Callback, Handler)\n returns a non null tuner interface.\n Control is lost when another client opens an interface on the same tuner.\n When this happens, android.hardware.radio.RadioTuner.Callback.onControlChanged(boolean) is received.\n The client can either wait for control to be returned (which is indicated by the same\n callback) or close and reopen the tuner interface.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this interface controls the tuner,\n {@code false} otherwise or if a problem occured retrieving the state.</p>\n</div></li></ul></div></div></div><div id='method-isAnalogForced' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-isAnalogForced' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-isAnalogForced' class='name expandable'>isAnalogForced</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Checks, if the analog playback is forced, see setAnalogForced. ...</div><div class='long'><p>Checks, if the analog playback is forced, see setAnalogForced.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use isConfigFlagSet(int) instead.</p>\n\n        </div>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if analog is forced, {@code false} otherwise.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the switch is not supported at current\n         configuration.</p>\n</div></li></ul></div></div></div><div id='method-isAntennaConnected' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-isAntennaConnected' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-isAntennaConnected' class='name expandable'>isAntennaConnected</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Get current antenna connection state for current configuration. ...</div><div class='long'><p>Get current antenna connection state for current configuration.\n Only valid if a configuration has been applied.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use onAntennaState callback instead</p>\n\n        </div>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the antenna is connected, {@code false} otherwise.</p>\n</div></li></ul></div></div></div><div id='method-isConfigFlagSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-isConfigFlagSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-isConfigFlagSet' class='name expandable'>isConfigFlagSet</a>( <span class='pre'>flag</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Fetches the current setting of a given config flag. ...</div><div class='long'><p>Fetches the current setting of a given config flag.</p>\n\n<p> The success/failure result is consistent with isConfigFlagSupported.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flag</span> : Number<div class='sub-desc'><p>Flag to fetch.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>The current value of the flag.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the flag is not applicable right now.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the flag is not supported at all.</p>\n</div></li></ul></div></div></div><div id='method-isConfigFlagSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-isConfigFlagSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-isConfigFlagSupported' class='name expandable'>isConfigFlagSupported</a>( <span class='pre'>flag</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks, if a given config flag is supported ...</div><div class='long'><p>Checks, if a given config flag is supported</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flag</span> : Number<div class='sub-desc'><p>Flag to check.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True, if the flag is supported.</p>\n</div></li></ul></div></div></div><div id='method-scan' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-scan' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-scan' class='name expandable'>scan</a>( <span class='pre'>direction, skipSubChannel</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Scan up or down to next valid station. ...</div><div class='long'><p>Scan up or down to next valid station.\n The operation is asynchronous and <a href=\"#!/api/android.hardware.radio.RadioTuner.Callback\" rel=\"android.hardware.radio.RadioTuner.Callback\" class=\"docClass\">android.hardware.radio.RadioTuner.Callback</a>\n onProgramInfoChanged() will be called when scan completes or\n onError() when cancelled or timeout.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p><a href=\"#!/api/android.hardware.radio.RadioTuner-property-DIRECTION_UP\" rel=\"android.hardware.radio.RadioTuner-property-DIRECTION_UP\" class=\"docClass\">DIRECTION_UP</a> or <a href=\"#!/api/android.hardware.radio.RadioTuner-property-DIRECTION_DOWN\" rel=\"android.hardware.radio.RadioTuner-property-DIRECTION_DOWN\" class=\"docClass\">DIRECTION_DOWN</a>.</p>\n</div></li><li><span class='pre'>skipSubChannel</span> : Boolean<div class='sub-desc'><p>indicates to skip sub channels when the configuration currently\n selected supports sub channel (e.g HD Radio). N/A otherwise.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><ul>\n  <li>RadioManager.STATUS_OK in case of success, </li>\n  <li>RadioManager.STATUS_ERROR in case of unspecified error, </li>\n  <li>RadioManager.STATUS_NO_INIT if the native service cannot be reached, </li>\n  <li>RadioManager.STATUS_BAD_VALUE if parameters are invalid, </li>\n  <li>RadioManager.STATUS_INVALID_OPERATION if the call is out of sequence, </li>\n  <li>RadioManager.STATUS_DEAD_OBJECT if the binder transaction to the native\n  service fails, </li>\n </ul>\n\n</div></li></ul></div></div></div><div id='method-setAnalogForced' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-setAnalogForced' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-setAnalogForced' class='name expandable'>setAnalogForced</a>( <span class='pre'>isForced</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Forces the analog playback for the supporting radio technology. ...</div><div class='long'><p>Forces the analog playback for the supporting radio technology.</p>\n\n<p> User may disable digital playback for FM HD Radio or hybrid FM/DAB with\n this option. This is purely user choice, ie. does not reflect digital-\n analog handover managed from the HAL implementation side.</p>\n\n<p> Some radio technologies may not support this, ie. DAB.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use boolean) instead.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>isForced</span> : Boolean<div class='sub-desc'><p>{@code true} to force analog, {@code false} for a default behaviour.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the switch is not supported at current\n         configuration.</p>\n</div></li></ul></div></div></div><div id='method-setConfigFlag' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-setConfigFlag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-setConfigFlag' class='name expandable'>setConfigFlag</a>( <span class='pre'>flag, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the config flag. ...</div><div class='long'><p>Sets the config flag.</p>\n\n<p> The success/failure result is consistent with isConfigFlagSupported.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flag</span> : Number<div class='sub-desc'><p>Flag to set.</p>\n</div></li><li><span class='pre'>value</span> : Boolean<div class='sub-desc'><p>The new value of a given flag.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the flag is not applicable right now.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if the flag is not supported at all.</p>\n</div></li></ul></div></div></div><div id='method-setConfiguration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-setConfiguration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-setConfiguration' class='name expandable'>setConfiguration</a>( <span class='pre'>config</span> ) : Number<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Set the active band configuration for this module. ...</div><div class='long'><p>Set the active band configuration for this module.\n Must be a valid configuration obtained via buildConfig() from a valid BandDescriptor listed\n in the ModuleProperties of the module with the specified ID.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Only applicable for HAL 1.x.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object {RadioManager.BandConfig}<div class='sub-desc'><p>The desired band configuration (FmBandConfig or AmBandConfig).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><ul>\n  <li>RadioManager.STATUS_OK in case of success, </li>\n  <li>RadioManager.STATUS_ERROR in case of unspecified error, </li>\n  <li>RadioManager.STATUS_NO_INIT if the native service cannot be reached, </li>\n  <li>RadioManager.STATUS_BAD_VALUE if parameters are invalid, </li>\n  <li>RadioManager.STATUS_INVALID_OPERATION if the call is out of sequence, </li>\n  <li>RadioManager.STATUS_DEAD_OBJECT if the binder transaction to the native\n  service fails, </li>\n </ul>\n\n</div></li></ul></div></div></div><div id='method-setMute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-setMute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-setMute' class='name expandable'>setMute</a>( <span class='pre'>mute</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Set mute state. ...</div><div class='long'><p>Set mute state. When muted, the radio tuner audio source is not available for playback on\n any audio device. when unmuted, the radio tuner audio source is output as a media source\n and renderd over the audio device selected for media use case.\n The radio tuner audio source is muted by default when the tuner is first attached.\n Only effective if the tuner is attached with audio enabled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mute</span> : Boolean<div class='sub-desc'><p>the requested mute state.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><ul>\n  <li>RadioManager.STATUS_OK in case of success, </li>\n  <li>RadioManager.STATUS_ERROR in case of unspecified error, </li>\n  <li>RadioManager.STATUS_NO_INIT if the native service cannot be reached, </li>\n  <li>RadioManager.STATUS_INVALID_OPERATION if the call is out of sequence, </li>\n  <li>RadioManager.STATUS_DEAD_OBJECT if the binder transaction to the native\n  service fails, </li>\n </ul>\n\n</div></li></ul></div></div></div><div id='method-setParameters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-setParameters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-setParameters' class='name expandable'>setParameters</a>( <span class='pre'>parameters</span> ) : Object {java.util.Map}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generic method for setting vendor-specific parameter values. ...</div><div class='long'><p>Generic method for setting vendor-specific parameter values.\n The framework does not interpret the parameters, they are passed\n in an opaque manner between a vendor application and HAL.</p>\n\n<p> Framework does not make any assumptions on the keys or values, other than\n ones stated in VendorKeyValue documentation (a requirement of key\n prefixes).\n See VendorKeyValue at hardware/interfaces/broadcastradio/2.0/types.hal.</p>\n\n<p> For each pair in the result map, the key will be one of the keys\n contained in the input (possibly with wildcards expanded), and the value\n will be a vendor-specific result status (such as \"OK\" or an error code).\n The implementation may choose to return an empty map, or only return\n a status for a subset of the provided inputs, at its discretion.</p>\n\n<p> Application and HAL must not use keys with unknown prefix. In particular,\n it must not place a key-value pair in results vector for unknown key from\n parameters vector - instead, an unknown key should simply be ignored.\n In other words, results vector may contain a subset of parameter keys\n (however, the framework doesn't enforce a strict subset - the only\n formal requirement is vendor domain prefix for keys).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parameters</span> : Object {java.util.Map}<div class='sub-desc'><p>Vendor-specific key-value pairs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Map}</span><div class='sub-desc'><p>Operation completion status for parameters being set.</p>\n</div></li></ul></div></div></div><div id='method-startBackgroundScan' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-startBackgroundScan' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-startBackgroundScan' class='name expandable'>startBackgroundScan</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Initiates a background scan to update internally cached program list. ...</div><div class='long'><p>Initiates a background scan to update internally cached program list.</p>\n\n<p> It may not be necessary to initiate the scan explicitly - the scan MAY be performed on boot.</p>\n\n<p> The operation is asynchronous and <a href=\"#!/api/android.hardware.radio.RadioTuner.Callback\" rel=\"android.hardware.radio.RadioTuner.Callback\" class=\"docClass\">android.hardware.radio.RadioTuner.Callback</a> backgroundScanComplete or onError will\n be called if the return value of this call was {@code true}. As result of this call\n programListChanged may be triggered (if the scanned list differs).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the scan was properly scheduled, {@code false} if the scan feature\n is unavailable; ie. temporarily due to ongoing foreground playback in single-tuner device\n or permanently if the feature is not supported\n (see ModuleProperties#isBackgroundScanningSupported()).</p>\n</div></li></ul></div></div></div><div id='method-step' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-step' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-step' class='name expandable'>step</a>( <span class='pre'>direction, skipSubChannel</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Step up or down by one channel spacing. ...</div><div class='long'><p>Step up or down by one channel spacing.\n The operation is asynchronous and <a href=\"#!/api/android.hardware.radio.RadioTuner.Callback\" rel=\"android.hardware.radio.RadioTuner.Callback\" class=\"docClass\">android.hardware.radio.RadioTuner.Callback</a>\n onProgramInfoChanged() will be called when step completes or\n onError() when cancelled or timeout.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p><a href=\"#!/api/android.hardware.radio.RadioTuner-property-DIRECTION_UP\" rel=\"android.hardware.radio.RadioTuner-property-DIRECTION_UP\" class=\"docClass\">DIRECTION_UP</a> or <a href=\"#!/api/android.hardware.radio.RadioTuner-property-DIRECTION_DOWN\" rel=\"android.hardware.radio.RadioTuner-property-DIRECTION_DOWN\" class=\"docClass\">DIRECTION_DOWN</a>.</p>\n</div></li><li><span class='pre'>skipSubChannel</span> : Boolean<div class='sub-desc'><p>indicates to skip sub channels when the configuration currently\n selected supports sub channel (e.g HD Radio). N/A otherwise.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><ul>\n  <li>RadioManager.STATUS_OK in case of success, </li>\n  <li>RadioManager.STATUS_ERROR in case of unspecified error, </li>\n  <li>RadioManager.STATUS_NO_INIT if the native service cannot be reached, </li>\n  <li>RadioManager.STATUS_BAD_VALUE if parameters are invalid, </li>\n  <li>RadioManager.STATUS_INVALID_OPERATION if the call is out of sequence, </li>\n  <li>RadioManager.STATUS_DEAD_OBJECT if the binder transaction to the native\n  service fails, </li>\n </ul>\n\n</div></li></ul></div></div></div><div id='method-tune' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.radio.RadioTuner'>android.hardware.radio.RadioTuner</span><br/><a href='source/RadioTuner.html#android-hardware-radio-RadioTuner-method-tune' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.radio.RadioTuner-method-tune' class='name expandable'>tune</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tune to a program. ...</div><div class='long'><p>Tune to a program.</p>\n\n<p> The operation is asynchronous and <a href=\"#!/api/android.hardware.radio.RadioTuner.Callback\" rel=\"android.hardware.radio.RadioTuner.Callback\" class=\"docClass\">android.hardware.radio.RadioTuner.Callback</a> onProgramInfoChanged() will be called\n when tune completes or onError() when cancelled or on timeout.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the provided selector is invalid</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});