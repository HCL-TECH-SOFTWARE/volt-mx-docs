Ext.data.JsonP.com_android_internal_view_animation_HasNativeInterpolator({"tagname":"class","name":"com.android.internal.view.animation.HasNativeInterpolator","autodetected":{},"files":[{"filename":"HasNativeInterpolator.js","href":"HasNativeInterpolator.html#com-android-internal-view-animation-HasNativeInterpolator"}],"hide":true,"members":[],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.view.animation.HasNativeInterpolator","short_doc":"implements java.lang.annotation.Annotation\n\n This is a class annotation that signals that it is safe to create\n a nat...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/HasNativeInterpolator.html#com-android-internal-view-animation-HasNativeInterpolator' target='_blank'>HasNativeInterpolator.js</a></div></pre><div class='doc-contents'><p>implements java.lang.annotation.Annotation</p>\n\n<p> This is a class annotation that signals that it is safe to create\n a native interpolator counterpart via <a href=\"#!/api/com.android.internal.view.animation.NativeInterpolatorFactory\" rel=\"com.android.internal.view.animation.NativeInterpolatorFactory\" class=\"docClass\">com.android.internal.view.animation.NativeInterpolatorFactory</a></p>\n\n<p> The idea here is to prevent subclasses of interpolators from being treated as a\n NativeInterpolatorFactory, and instead have them fall back to the LUT &amp; LERP\n method like a custom interpolator.</p>\n</div><div class='members'></div></div>","meta":{}});