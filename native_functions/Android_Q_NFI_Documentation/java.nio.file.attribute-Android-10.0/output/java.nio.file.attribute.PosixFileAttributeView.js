Ext.data.JsonP.java_nio_file_attribute_PosixFileAttributeView({"tagname":"class","name":"java.nio.file.attribute.PosixFileAttributeView","autodetected":{},"files":[{"filename":"PosixFileAttributeView.js","href":"PosixFileAttributeView.html#java-nio-file-attribute-PosixFileAttributeView"}],"since":"1.7","members":[{"name":"name","tagname":"method","owner":"java.nio.file.attribute.PosixFileAttributeView","id":"method-name","meta":{}},{"name":"readAttributes","tagname":"method","owner":"java.nio.file.attribute.PosixFileAttributeView","id":"method-readAttributes","meta":{}},{"name":"setGroup","tagname":"method","owner":"java.nio.file.attribute.PosixFileAttributeView","id":"method-setGroup","meta":{}},{"name":"setPermissions","tagname":"method","owner":"java.nio.file.attribute.PosixFileAttributeView","id":"method-setPermissions","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.attribute.PosixFileAttributeView","short_doc":"implements java.nio.file.attribute.BasicFileAttributeView\n\n implements java.nio.file.attribute.FileOwnerAttributeView...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/PosixFileAttributeView.html#java-nio-file-attribute-PosixFileAttributeView' target='_blank'>PosixFileAttributeView.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.file.attribute.BasicFileAttributeView\" rel=\"java.nio.file.attribute.BasicFileAttributeView\" class=\"docClass\">java.nio.file.attribute.BasicFileAttributeView</a></p>\n\n<p> implements <a href=\"#!/api/java.nio.file.attribute.FileOwnerAttributeView\" rel=\"java.nio.file.attribute.FileOwnerAttributeView\" class=\"docClass\">java.nio.file.attribute.FileOwnerAttributeView</a></p>\n\n<p> A file attribute view that provides a view of the file attributes commonly\n associated with files on file systems used by operating systems that implement\n the Portable Operating System Interface (POSIX) family of standards.</p>\n\n<p> <p> Operating systems that implement the <a href=\"http://www.opengroup.org\">\n POSIX</a> family of standards commonly use file systems that have a\n file <em>owner</em>, <em>group-owner</em>, and related <em>access\n permissions</em>. This file attribute view provides read and write access\n to these attributes.</p>\n\n<p> <p> The readAttributes method is used to read the\n file's attributes. The file owner is\n represented by a <a href=\"#!/api/java.nio.file.attribute.UserPrincipal\" rel=\"java.nio.file.attribute.UserPrincipal\" class=\"docClass\">java.nio.file.attribute.UserPrincipal</a> that is the identity of the file owner\n for the purposes of access control. The group-owner, represented by a <a href=\"#!/api/java.nio.file.attribute.GroupPrincipal\" rel=\"java.nio.file.attribute.GroupPrincipal\" class=\"docClass\">java.nio.file.attribute.GroupPrincipal</a>, is the identity of the\n group owner, where a group is an identity created for administrative purposes\n so as to determine the access rights for the members of the group.</p>\n\n<p> <p> The permissions attribute is a\n set of access permissions. This file attribute view provides access to the nine\n permission defined by the <a href=\"#!/api/java.nio.file.attribute.PosixFilePermission\" rel=\"java.nio.file.attribute.PosixFilePermission\" class=\"docClass\">java.nio.file.attribute.PosixFilePermission</a> class.\n These nine permission bits determine the <em>read</em>, <em>write</em>, and\n <em>execute</em> access for the file owner, group, and others (others\n meaning identities other than the owner and members of the group). Some\n operating systems and file systems may provide additional permission bits\n but access to these other bits is not defined by this class in this release.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we need to print out the owner and access permissions of a file:</p>\n\n<pre>     Path file = ...\n     PosixFileAttributes attrs = Files.getFileAttributeView(file, PosixFileAttributeView.class)\n         .readAttributes();\n     System.out.format(\"%s %s%n\",\n         attrs.owner().getName(),\n         PosixFilePermissions.toString(attrs.permissions()));\n </pre>\n\n\n<p> <h2> Dynamic Access </h2>\n <p> Where dynamic access to file attributes is required, the attributes\n supported by this attribute view are as defined by <a href=\"#!/api/java.nio.file.attribute.BasicFileAttributeView\" rel=\"java.nio.file.attribute.BasicFileAttributeView\" class=\"docClass\">java.nio.file.attribute.BasicFileAttributeView</a> and <a href=\"#!/api/java.nio.file.attribute.FileOwnerAttributeView\" rel=\"java.nio.file.attribute.FileOwnerAttributeView\" class=\"docClass\">java.nio.file.attribute.FileOwnerAttributeView</a>, and in addition,\n the following attributes are supported:\n <blockquote>\n <table border=\"1\" cellpadding=\"8\" summary=\"Supported attributes\">\n   <tr>\n     <th> Name </th>\n     <th> Type </th>\n   </tr>\n  <tr>\n     <td> \"permissions\" </td>\n     <td> Set&lt;<a href=\"#!/api/java.nio.file.attribute.PosixFilePermission\" rel=\"java.nio.file.attribute.PosixFilePermission\" class=\"docClass\">java.nio.file.attribute.PosixFilePermission</a>&gt; </td>\n   </tr>\n   <tr>\n     <td> \"group\" </td>\n     <td> <a href=\"#!/api/java.nio.file.attribute.GroupPrincipal\" rel=\"java.nio.file.attribute.GroupPrincipal\" class=\"docClass\">java.nio.file.attribute.GroupPrincipal</a> </td>\n   </tr>\n </table>\n </blockquote></p>\n\n<p> <p> The getAttribute method may be used to read\n any of these attributes, or any of the attributes defined by <a href=\"#!/api/java.nio.file.attribute.BasicFileAttributeView\" rel=\"java.nio.file.attribute.BasicFileAttributeView\" class=\"docClass\">java.nio.file.attribute.BasicFileAttributeView</a> as if by invoking the <a href=\"#!/api/java.nio.file.attribute.PosixFileAttributeView-method-readAttributes\" rel=\"java.nio.file.attribute.PosixFileAttributeView-method-readAttributes\" class=\"docClass\">readAttributes()</a> method.</p>\n\n<p> <p> The setAttribute method may be used to update\n the file's last modified time, last access time or create time attributes as\n defined by <a href=\"#!/api/java.nio.file.attribute.BasicFileAttributeView\" rel=\"java.nio.file.attribute.BasicFileAttributeView\" class=\"docClass\">java.nio.file.attribute.BasicFileAttributeView</a>. It may also be used to update\n the permissions, owner, or group-owner as if by invoking the <a href=\"#!/api/java.nio.file.attribute.PosixFileAttributeView-method-setPermissions\" rel=\"java.nio.file.attribute.PosixFileAttributeView-method-setPermissions\" class=\"docClass\">setPermissions</a>, setOwner, and <a href=\"#!/api/java.nio.file.attribute.PosixFileAttributeView-method-setGroup\" rel=\"java.nio.file.attribute.PosixFileAttributeView-method-setGroup\" class=\"docClass\">setGroup</a> methods respectively.</p>\n\n<p> <h2> Setting Initial Permissions </h2>\n <p> Implementations supporting this attribute view may also support setting\n the initial permissions when creating a file or directory. The\n initial permissions are provided to the createFile\n or createDirectory methods as a <a href=\"#!/api/java.nio.file.attribute.FileAttribute\" rel=\"java.nio.file.attribute.FileAttribute\" class=\"docClass\">java.nio.file.attribute.FileAttribute</a> with <a href=\"#!/api/java.nio.file.attribute.FileAttribute-method-name\" rel=\"java.nio.file.attribute.FileAttribute-method-name\" class=\"docClass\">name</a> {@code \"posix:permissions\"}\n and a <a href=\"#!/api/java.nio.file.attribute.FileAttribute-method-value\" rel=\"java.nio.file.attribute.FileAttribute-method-value\" class=\"docClass\">value</a> that is the set of permissions. The\n following example uses the <a href=\"#!/api/java.nio.file.attribute.PosixFilePermissions-method-asFileAttribute\" rel=\"java.nio.file.attribute.PosixFilePermissions-method-asFileAttribute\" class=\"docClass\">asFileAttribute</a> method to construct a {@code FileAttribute} when creating a\n file:</p>\n\n<pre>     Path path = ...\n     Set&lt;PosixFilePermission&gt; perms =\n         EnumSet.of(OWNER_READ, OWNER_WRITE, OWNER_EXECUTE, GROUP_READ);\n     Files.createFile(path, PosixFilePermissions.asFileAttribute(perms));\n </pre>\n\n\n<p> <p> When the access permissions are set at file creation time then the actual\n value of the permissions may differ that the value of the attribute object.\n The reasons for this are implementation specific. On UNIX systems, for\n example, a process has a <em>umask</em> that impacts the permission bits\n of newly created files. Where an implementation supports the setting of\n the access permissions, and the underlying file system supports access\n permissions, then it is required that the value of the actual access\n permissions will be equal or less than the value of the attribute\n provided to the createFile or createDirectory methods. In other words, the file may\n be more secure than requested.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-name' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.PosixFileAttributeView'>java.nio.file.attribute.PosixFileAttributeView</span><br/><a href='source/PosixFileAttributeView.html#java-nio-file-attribute-PosixFileAttributeView-method-name' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.PosixFileAttributeView-method-name' class='name expandable'>name</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name of the attribute view. ...</div><div class='long'><p>Returns the name of the attribute view. Attribute views of this type\n have the name {@code \"posix\"}.</p>\n</div></div></div><div id='method-readAttributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.PosixFileAttributeView'>java.nio.file.attribute.PosixFileAttributeView</span><br/><a href='source/PosixFileAttributeView.html#java-nio-file-attribute-PosixFileAttributeView-method-readAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.PosixFileAttributeView-method-readAttributes' class='name expandable'>readAttributes</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException                {@inheritDoc}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager is\n          installed, and it denies RuntimePermission<tt>(\"accessUserInformation\")</tt>\n          or its checkRead method\n          denies read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-setGroup' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.PosixFileAttributeView'>java.nio.file.attribute.PosixFileAttributeView</span><br/><a href='source/PosixFileAttributeView.html#java-nio-file-attribute-PosixFileAttributeView-method-setGroup' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.PosixFileAttributeView-method-setGroup' class='name expandable'>setGroup</a>( <span class='pre'>group</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates the file group-owner. ...</div><div class='long'><p>Updates the file group-owner.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>group</span> : Object {GroupPrincipal}<div class='sub-desc'><p>the new file group-owner</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, it denies RuntimePermission<tt>(\"accessUserInformation\")</tt>\n          or its checkWrite\n          method denies write access to the file.</p>\n</div></li></ul></div></div></div><div id='method-setPermissions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.PosixFileAttributeView'>java.nio.file.attribute.PosixFileAttributeView</span><br/><a href='source/PosixFileAttributeView.html#java-nio-file-attribute-PosixFileAttributeView-method-setPermissions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.PosixFileAttributeView-method-setPermissions' class='name expandable'>setPermissions</a>( <span class='pre'>perms</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates the file permissions. ...</div><div class='long'><p>Updates the file permissions.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>perms</span> : Object {java.util.Set}<div class='sub-desc'><p>the new set of permissions</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException\n          if the sets contains elements that are not of type {@code\n          PosixFilePermission}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager is\n          installed, and it denies RuntimePermission<tt>(\"accessUserInformation\")</tt>\n          or its checkWrite\n          method denies write access to the file.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});