Ext.data.JsonP.java_nio_file_attribute_UserDefinedFileAttributeView({"tagname":"class","name":"java.nio.file.attribute.UserDefinedFileAttributeView","autodetected":{},"files":[{"filename":"UserDefinedFileAttributeView.js","href":"UserDefinedFileAttributeView.html#java-nio-file-attribute-UserDefinedFileAttributeView"}],"since":"1.7","members":[{"name":"delete","tagname":"method","owner":"java.nio.file.attribute.UserDefinedFileAttributeView","id":"method-delete","meta":{}},{"name":"list","tagname":"method","owner":"java.nio.file.attribute.UserDefinedFileAttributeView","id":"method-list","meta":{}},{"name":"name","tagname":"method","owner":"java.nio.file.attribute.UserDefinedFileAttributeView","id":"method-name","meta":{}},{"name":"read","tagname":"method","owner":"java.nio.file.attribute.UserDefinedFileAttributeView","id":"method-read","meta":{}},{"name":"size","tagname":"method","owner":"java.nio.file.attribute.UserDefinedFileAttributeView","id":"method-size","meta":{}},{"name":"write","tagname":"method","owner":"java.nio.file.attribute.UserDefinedFileAttributeView","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.attribute.UserDefinedFileAttributeView","short_doc":"implements java.nio.file.attribute.FileAttributeView\n\n A file attribute view that provides a view of a file's user-de...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/UserDefinedFileAttributeView.html#java-nio-file-attribute-UserDefinedFileAttributeView' target='_blank'>UserDefinedFileAttributeView.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.file.attribute.FileAttributeView\" rel=\"java.nio.file.attribute.FileAttributeView\" class=\"docClass\">java.nio.file.attribute.FileAttributeView</a></p>\n\n<p> A file attribute view that provides a view of a file's user-defined\n attributes, sometimes known as <em>extended attributes</em>. User-defined\n file attributes are used to store metadata with a file that is not meaningful\n to the file system. It is primarily intended for file system implementations\n that support such a capability directly but may be emulated. The details of\n such emulation are highly implementation specific and therefore not specified.</p>\n\n<p> <p> This {@code FileAttributeView} provides a view of a file's user-defined\n attributes as a set of name/value pairs, where the attribute name is\n represented by a {@code String}. An implementation may require to encode and\n decode from the platform or file system representation when accessing the\n attribute. The value has opaque content. This attribute view defines the\n <a href=\"#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-read\" rel=\"java.nio.file.attribute.UserDefinedFileAttributeView-method-read\" class=\"docClass\">read</a> and <a href=\"#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-write\" rel=\"java.nio.file.attribute.UserDefinedFileAttributeView-method-write\" class=\"docClass\">write</a> methods to read the value into\n or write from a ByteBuffer. This {@code FileAttributeView} is not\n intended for use where the size of an attribute value is larger than Integer.MAX_VALUE.</p>\n\n<p> <p> User-defined attributes may be used in some implementations to store\n security related attributes so consequently, in the case of the default\n provider at least, all methods that access user-defined attributes require the\n {@code RuntimePermission(\"accessUserDefinedAttributes\")} permission when a\n security manager is installed.</p>\n\n<p> <p> The supportsFileAttributeView method may be used to test if a specific FileStore supports the storage of user-defined\n attributes.</p>\n\n<p> <p> Where dynamic access to file attributes is required, the getAttribute method may be used to read\n the attribute value. The attribute value is returned as a byte array (byte[]).\n The setAttribute method may be used\n to write the value of a user-defined attribute from a buffer (as if by\n invoking the <a href=\"#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-write\" rel=\"java.nio.file.attribute.UserDefinedFileAttributeView-method-write\" class=\"docClass\">write</a> method), or byte array (byte[]).</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-delete' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.UserDefinedFileAttributeView'>java.nio.file.attribute.UserDefinedFileAttributeView</span><br/><a href='source/UserDefinedFileAttributeView.html#java-nio-file-attribute-UserDefinedFileAttributeView-method-delete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-delete' class='name expandable'>delete</a>( <span class='pre'>name</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes a user-defined attribute. ...</div><div class='long'><p>Deletes a user-defined attribute.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The attribute name</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs or the attribute does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager is\n          installed, and it denies RuntimePermission<tt>(\"accessUserDefinedAttributes\")</tt>\n          or its checkWrite\n          method denies write access to the file.</p>\n</div></li></ul></div></div></div><div id='method-list' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.UserDefinedFileAttributeView'>java.nio.file.attribute.UserDefinedFileAttributeView</span><br/><a href='source/UserDefinedFileAttributeView.html#java-nio-file-attribute-UserDefinedFileAttributeView-method-list' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-list' class='name expandable'>list</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a list containing the names of the user-defined attributes. ...</div><div class='long'><p>Returns a list containing the names of the user-defined attributes.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>An unmodifiable list containing the names of the file's\n          user-defined</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager is\n          installed, and it denies RuntimePermission<tt>(\"accessUserDefinedAttributes\")</tt>\n          or its checkRead method\n          denies read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-name' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.UserDefinedFileAttributeView'>java.nio.file.attribute.UserDefinedFileAttributeView</span><br/><a href='source/UserDefinedFileAttributeView.html#java-nio-file-attribute-UserDefinedFileAttributeView-method-name' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-name' class='name expandable'>name</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name of this attribute view. ...</div><div class='long'><p>Returns the name of this attribute view. Attribute views of this type\n have the name {@code \"user\"}.</p>\n</div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.UserDefinedFileAttributeView'>java.nio.file.attribute.UserDefinedFileAttributeView</span><br/><a href='source/UserDefinedFileAttributeView.html#java-nio-file-attribute-UserDefinedFileAttributeView-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-read' class='name expandable'>read</a>( <span class='pre'>name, dst</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Read the value of a user-defined attribute into a buffer. ...</div><div class='long'><p>Read the value of a user-defined attribute into a buffer.</p>\n\n<p> <p> This method reads the value of the attribute into the given buffer\n as a sequence of bytes, failing if the number of bytes remaining in\n the buffer is insufficient to read the complete attribute value. The\n number of bytes transferred into the buffer is {@code n}, where {@code n}\n is the size of the attribute value. The first byte in the sequence is at\n index {@code p} and the last byte is at index {@code p + n - 1}, where\n {@code p} is the buffer's position. Upon return the buffer's position\n will be equal to {@code p + n}; its limit will not have changed.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want to read a file's MIME type that is stored as a user-defined\n attribute with the name \"{@code user.mimetype}\".</p>\n\n<pre>    UserDefinedFileAttributeView view =\n        Files.getFileAttributeView(path, UserDefinedFileAttributeView.class);\n    String name = \"user.mimetype\";\n    ByteBuffer buf = ByteBuffer.allocate(view.size(name));\n    view.read(name, buf);\n    buf.flip();\n    String value = Charset.defaultCharset().decode(buf).toString();\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The attribute name</p>\n</div></li><li><span class='pre'>dst</span> : Object {ByteBuffer}<div class='sub-desc'><p>The destination buffer</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes read, possibly zero</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the destination buffer is read-only</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs or there is insufficient space in the\n          destination buffer for the attribute value</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager is\n          installed, and it denies RuntimePermission<tt>(\"accessUserDefinedAttributes\")</tt>\n          or its checkRead method\n          denies read access to the file.\n@see <a href=\"#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-size\" rel=\"java.nio.file.attribute.UserDefinedFileAttributeView-method-size\" class=\"docClass\">size</a></p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.UserDefinedFileAttributeView'>java.nio.file.attribute.UserDefinedFileAttributeView</span><br/><a href='source/UserDefinedFileAttributeView.html#java-nio-file-attribute-UserDefinedFileAttributeView-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-size' class='name expandable'>size</a>( <span class='pre'>name</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the size of the value of a user-defined attribute. ...</div><div class='long'><p>Returns the size of the value of a user-defined attribute.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The attribute name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The size of the attribute value, in bytes.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException\n          If the size of the attribute is larger than Integer.MAX_VALUE</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager is\n          installed, and it denies RuntimePermission<tt>(\"accessUserDefinedAttributes\")</tt>\n          or its checkRead method\n          denies read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.attribute.UserDefinedFileAttributeView'>java.nio.file.attribute.UserDefinedFileAttributeView</span><br/><a href='source/UserDefinedFileAttributeView.html#java-nio-file-attribute-UserDefinedFileAttributeView-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.attribute.UserDefinedFileAttributeView-method-write' class='name expandable'>write</a>( <span class='pre'>name, src</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes the value of a user-defined attribute from a buffer. ...</div><div class='long'><p>Writes the value of a user-defined attribute from a buffer.</p>\n\n<p> <p> This method writes the value of the attribute from a given buffer as\n a sequence of bytes. The size of the value to transfer is {@code r},\n where {@code r} is the number of bytes remaining in the buffer, that is\n {@code src.remaining()}. The sequence of bytes is transferred from the\n buffer starting at index {@code p}, where {@code p} is the buffer's\n position. Upon return, the buffer's position will be equal to {@code\n p + n}, where {@code n} is the number of bytes transferred; its limit\n will not have changed.</p>\n\n<p> <p> If an attribute of the given name already exists then its value is\n replaced. If the attribute does not exist then it is created. If it\n implementation specific if a test to check for the existence of the\n attribute and the creation of attribute are atomic with respect to other\n file system activities.</p>\n\n<p> <p> Where there is insufficient space to store the attribute, or the\n attribute name or value exceed an implementation specific maximum size\n then an {@code IOException} is thrown.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want to write a file's MIME type as a user-defined attribute:</p>\n\n<pre>    UserDefinedFileAttributeView view =\n        FIles.getFileAttributeView(path, UserDefinedFileAttributeView.class);\n    view.write(\"user.mimetype\", Charset.defaultCharset().encode(\"text/html\"));\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The attribute name</p>\n</div></li><li><span class='pre'>src</span> : Object {ByteBuffer}<div class='sub-desc'><p>The buffer containing the attribute value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes written, possibly zero</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager is\n          installed, and it denies RuntimePermission<tt>(\"accessUserDefinedAttributes\")</tt>\n          or its checkWrite\n          method denies write access to the file.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});