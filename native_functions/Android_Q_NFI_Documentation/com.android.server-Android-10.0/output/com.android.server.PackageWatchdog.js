Ext.data.JsonP.com_android_server_PackageWatchdog({"tagname":"class","name":"com.android.server.PackageWatchdog","autodetected":{},"files":[{"filename":"PackageWatchdog.js","href":"PackageWatchdog.html#com-android-server-PackageWatchdog"}],"extends":"java.lang.Object","members":[{"name":"getInstance","tagname":"method","owner":"com.android.server.PackageWatchdog","id":"method-getInstance","meta":{}},{"name":"getPackages","tagname":"method","owner":"com.android.server.PackageWatchdog","id":"method-getPackages","meta":{}},{"name":"onPackageFailure","tagname":"method","owner":"com.android.server.PackageWatchdog","id":"method-onPackageFailure","meta":{}},{"name":"onPackagesReady","tagname":"method","owner":"com.android.server.PackageWatchdog","id":"method-onPackagesReady","meta":{}},{"name":"registerHealthObserver","tagname":"method","owner":"com.android.server.PackageWatchdog","id":"method-registerHealthObserver","meta":{}},{"name":"startObservingHealth","tagname":"method","owner":"com.android.server.PackageWatchdog","id":"method-startObservingHealth","meta":{}},{"name":"unregisterHealthObserver","tagname":"method","owner":"com.android.server.PackageWatchdog","id":"method-unregisterHealthObserver","meta":{}},{"name":"writeNow","tagname":"method","owner":"com.android.server.PackageWatchdog","id":"method-writeNow","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.server.PackageWatchdog","short_doc":"Monitors the health of packages on the system and notifies interested observers when packages\n fail. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.server.PackageWatchdog</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog' target='_blank'>PackageWatchdog.js</a></div></pre><div class='doc-contents'><p>Monitors the health of packages on the system and notifies interested observers when packages\n fail. On failure, the registered observer with the least user impacting mitigation will\n be notified.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getInstance' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.PackageWatchdog'>com.android.server.PackageWatchdog</span><br/><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.PackageWatchdog-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates or gets singleton instance of PackageWatchdog. ...</div><div class='long'><p>Creates or gets singleton instance of PackageWatchdog.</p>\n</div></div></div><div id='method-getPackages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.PackageWatchdog'>com.android.server.PackageWatchdog</span><br/><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog-method-getPackages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.PackageWatchdog-method-getPackages' class='name expandable'>getPackages</a>( <span class='pre'></span> ) : Object {java.util.Set}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns packages observed by {@code observer} ...</div><div class='long'><p>Returns packages observed by {@code observer}</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Set}</span><div class='sub-desc'><p>an empty set if {@code observer} has some packages observerd from a previous boot\n but has not registered itself in the current boot to receive notifications. Returns null\n if there are no active packages monitored from any boot.</p>\n</div></li></ul></div></div></div><div id='method-onPackageFailure' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.PackageWatchdog'>com.android.server.PackageWatchdog</span><br/><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog-method-onPackageFailure' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.PackageWatchdog-method-onPackageFailure' class='name expandable'>onPackageFailure</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a process fails either due to a crash or ANR. ...</div><div class='long'><p>Called when a process fails either due to a crash or ANR.</p>\n\n<p> <p>For each package contained in the process, one registered observer with the least user\n impact will be notified for mitigation.</p>\n\n<p> <p>This method could be called frequently if there is a severe problem on the device.</p>\n</div></div></div><div id='method-onPackagesReady' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.PackageWatchdog'>com.android.server.PackageWatchdog</span><br/><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog-method-onPackagesReady' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.PackageWatchdog-method-onPackagesReady' class='name expandable'>onPackagesReady</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called during boot to notify when packages are ready on the device so we can start\n binding. ...</div><div class='long'><p>Called during boot to notify when packages are ready on the device so we can start\n binding.</p>\n</div></div></div><div id='method-registerHealthObserver' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.PackageWatchdog'>com.android.server.PackageWatchdog</span><br/><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog-method-registerHealthObserver' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.PackageWatchdog-method-registerHealthObserver' class='name expandable'>registerHealthObserver</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers {@code observer} to listen for package failures\n\n Observers are expected to call this on boot. ...</div><div class='long'><p>Registers {@code observer} to listen for package failures</p>\n\n<p> <p>Observers are expected to call this on boot. It does not specify any packages but\n it will resume observing any packages requested from a previous boot.</p>\n</div></div></div><div id='method-startObservingHealth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.PackageWatchdog'>com.android.server.PackageWatchdog</span><br/><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog-method-startObservingHealth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.PackageWatchdog-method-startObservingHealth' class='name expandable'>startObservingHealth</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts observing the health of the {@code packages} for {@code observer} and notifies\n {@code observer} of any packag...</div><div class='long'><p>Starts observing the health of the {@code packages} for {@code observer} and notifies\n {@code observer} of any package failures within the monitoring duration.</p>\n\n<p> <p>If monitoring a package supporting explicit health check, at the end of the monitoring\n duration if onHealthCheckPassed was never called,\n <a href=\"#!/api/com.android.server.PackageWatchdog.PackageHealthObserver-method-execute\" rel=\"com.android.server.PackageWatchdog.PackageHealthObserver-method-execute\" class=\"docClass\">com.android.server.PackageWatchdog.PackageHealthObserver.execute</a> will be called as if the package failed.</p>\n\n<p> <p>If {@code observer} is already monitoring a package in {@code packageNames},\n the monitoring window of that package will be reset to {@code durationMs} and the health\n check state will be reset to a default depending on if the package is contained in\n mPackagesWithExplicitHealthCheckEnabled.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if {@code packageNames} is empty\n or {@code durationMs} is less than 1</p>\n</div></li></ul></div></div></div><div id='method-unregisterHealthObserver' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.PackageWatchdog'>com.android.server.PackageWatchdog</span><br/><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog-method-unregisterHealthObserver' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.PackageWatchdog-method-unregisterHealthObserver' class='name expandable'>unregisterHealthObserver</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Unregisters {@code observer} from listening to package failure. ...</div><div class='long'><p>Unregisters {@code observer} from listening to package failure.\n Additionally, this stops observing any packages that may have previously been observed\n even from a previous boot.</p>\n</div></div></div><div id='method-writeNow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.PackageWatchdog'>com.android.server.PackageWatchdog</span><br/><a href='source/PackageWatchdog.html#com-android-server-PackageWatchdog-method-writeNow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.PackageWatchdog-method-writeNow' class='name expandable'>writeNow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes the package information to file during shutdown. ...</div><div class='long'><p>Writes the package information to file during shutdown.</p>\n</div></div></div></div></div></div></div>","meta":{}});