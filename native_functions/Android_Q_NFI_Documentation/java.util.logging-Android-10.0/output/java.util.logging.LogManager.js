Ext.data.JsonP.java_util_logging_LogManager({"tagname":"class","name":"java.util.logging.LogManager","autodetected":{},"files":[{"filename":"LogManager.js","href":"LogManager.html#java-util-logging-LogManager"}],"extends":"java.lang.Object","since":"1.4","members":[{"name":"LOGGING_MXBEAN_NAME","tagname":"property","owner":"java.util.logging.LogManager","id":"property-LOGGING_MXBEAN_NAME","meta":{}},{"name":"addLogger","tagname":"method","owner":"java.util.logging.LogManager","id":"method-addLogger","meta":{}},{"name":"addPropertyChangeListener","tagname":"method","owner":"java.util.logging.LogManager","id":"method-addPropertyChangeListener","meta":{"deprecated":{"text":"<p>The dependency on {@code PropertyChangeListener} creates a\n             significant impediment to future modularization of the Java\n             platform. This method will be removed in a future release.\n             The global {@code LogManager} can detect changes to the\n             logging configuration by overridding the <a href=\"#!/api/java.util.logging.LogManager-method-readConfiguration\" rel=\"java.util.logging.LogManager-method-readConfiguration\" class=\"docClass\">readConfiguration</a> method.</p>\n"}}},{"name":"checkAccess","tagname":"method","owner":"java.util.logging.LogManager","id":"method-checkAccess","meta":{}},{"name":"getLogManager","tagname":"method","owner":"java.util.logging.LogManager","id":"method-getLogManager","meta":{}},{"name":"getLogger","tagname":"method","owner":"java.util.logging.LogManager","id":"method-getLogger","meta":{}},{"name":"getLoggerNames","tagname":"method","owner":"java.util.logging.LogManager","id":"method-getLoggerNames","meta":{}},{"name":"getLoggingMXBean","tagname":"method","owner":"java.util.logging.LogManager","id":"method-getLoggingMXBean","meta":{}},{"name":"getProperty","tagname":"method","owner":"java.util.logging.LogManager","id":"method-getProperty","meta":{}},{"name":"readConfiguration","tagname":"method","owner":"java.util.logging.LogManager","id":"method-readConfiguration","meta":{}},{"name":"removePropertyChangeListener","tagname":"method","owner":"java.util.logging.LogManager","id":"method-removePropertyChangeListener","meta":{"deprecated":{"text":"<p>The dependency on {@code PropertyChangeListener} creates a\n             significant impediment to future modularization of the Java\n             platform. This method will be removed in a future release.\n             The global {@code LogManager} can detect changes to the\n             logging configuration by overridding the <a href=\"#!/api/java.util.logging.LogManager-method-readConfiguration\" rel=\"java.util.logging.LogManager-method-readConfiguration\" class=\"docClass\">readConfiguration</a> method.</p>\n"}}},{"name":"reset","tagname":"method","owner":"java.util.logging.LogManager","id":"method-reset","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.logging.LogManager","short_doc":"There is a single global LogManager object that is used to\n maintain a set of shared state about Loggers and log serv...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.logging.LogManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/LogManager.html#java-util-logging-LogManager' target='_blank'>LogManager.js</a></div></pre><div class='doc-contents'><p>There is a single global LogManager object that is used to\n maintain a set of shared state about Loggers and log services.\n <p>\n This LogManager object:\n <ul>\n <li> Manages a hierarchical namespace of Logger objects.  All\n      named Loggers are stored in this namespace.\n <li> Manages a set of logging control properties.  These are\n      simple key-value pairs that can be used by Handlers and\n      other logging objects to configure themselves.\n </li></li></ul>\n <p>\n The global LogManager object can be retrieved using LogManager.getLogManager().\n The LogManager object is created during class initialization and\n cannot subsequently be changed.\n <p>\n At startup the LogManager class is located using the\n java.util.logging.manager system property.\n <p>\n The LogManager defines two optional system properties that allow control over\n the initial configuration:\n <ul>\n <li>\"java.util.logging.config.class\"\n <li>\"java.util.logging.config.file\"\n </li></li></ul>\n These two properties may be specified on the command line to the \"java\"\n command, or as system property definitions passed to JNI_CreateJavaVM.\n <p>\n If the \"java.util.logging.config.class\" property is set, then the\n property value is treated as a class name.  The given class will be\n loaded, an object will be instantiated, and that object's constructor\n is responsible for reading in the initial configuration.  (That object\n may use other system properties to control its configuration.)  The\n alternate configuration class can use <tt>readConfiguration(InputStream)</tt>\n to define properties in the LogManager.\n <p>\n If \"java.util.logging.config.class\" property is <b>not</b> set,\n then the \"java.util.logging.config.file\" system property can be used\n to specify a properties file (in java.util.Properties format). The\n initial logging configuration will be read from this file.\n <p>\n If neither of these properties is defined then the LogManager uses its\n default configuration. The default configuration is typically loaded from the\n properties file \"{@code lib/logging.properties}\" in the Java installation\n directory.\n <p>\n The properties for loggers and Handlers will have names starting\n with the dot-separated name for the handler or logger.\n <p>\n The global logging properties may include:\n <ul>\n <li>A property \"handlers\".  This defines a whitespace or comma separated\n list of class names for handler classes to load and register as\n handlers on the root Logger (the Logger named \"\").  Each class\n name must be for a Handler class which has a default constructor.\n Note that these Handlers may be created lazily, when they are\n first used.</li></ul></p>\n\n<p> <li>A property \"&lt;logger&gt;.handlers\". This defines a whitespace or\n comma separated list of class names for handlers classes to\n load and register as handlers to the specified logger. Each class\n name must be for a Handler class which has a default constructor.\n Note that these Handlers may be created lazily, when they are\n first used.</li></p>\n\n<p> <li>A property \"&lt;logger&gt;.useParentHandlers\". This defines a boolean\n value. By default every logger calls its parent in addition to\n handling the logging message itself, this often result in messages\n being handled by the root logger as well. When setting this property\n to false a Handler needs to be configured for this logger otherwise\n no logging messages are delivered.</li></p>\n\n<p> <li>A property \"config\".  This property is intended to allow\n arbitrary configuration code to be run.  The property defines a\n whitespace or comma separated list of class names.  A new instance will be\n created for each named class.  The default constructor of each class\n may execute arbitrary code to update the logging configuration, such as\n setting logger levels, adding handlers, adding filters, etc.\n \n <p>\n Note that all classes loaded during LogManager configuration are\n first searched on the system class path before any user class path.\n That includes the LogManager class, any config classes, and any\n handler classes.\n <p>\n Loggers are organized into a naming hierarchy based on their\n dot separated names.  Thus \"a.b.c\" is a child of \"a.b\", but\n \"a.b1\" and a.b2\" are peers.\n <p>\n All properties whose names end with \".level\" are assumed to define\n log levels for Loggers.  Thus \"foo.level\" defines a log level for\n the logger called \"foo\" and (recursively) for any of its children\n in the naming hierarchy.  Log Levels are applied in the order they\n are defined in the properties file.  Thus level settings for child\n nodes in the tree should come after settings for their parents.\n The property name \".level\" can be used to set the level for the\n root of the tree.\n <p>\n All methods on the LogManager object are multi-thread safe.</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-LOGGING_MXBEAN_NAME' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-property-LOGGING_MXBEAN_NAME' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-property-LOGGING_MXBEAN_NAME' class='name expandable'>LOGGING_MXBEAN_NAME</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>String representation of the {@code ObjectName} for the management interface\nfor the logging facility. ...</div><div class='long'><p>String representation of the {@code ObjectName} for the management interface\nfor the logging facility.</p>\n\n<p>@see <a href=\"#!/api/java.util.logging.LoggingMXBean\" rel=\"java.util.logging.LoggingMXBean\" class=\"docClass\">java.util.logging.LoggingMXBean</a></p>\n<p>Defaults to: <code>&quot;java.util.logging:type=Logging&quot;</code></p>        <p>Available since: <b>1.5</b></p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addLogger' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-addLogger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-addLogger' class='name expandable'>addLogger</a>( <span class='pre'>logger</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a named logger. ...</div><div class='long'><p>Add a named logger.  This does nothing and returns false if a logger\n with the same name is already registered.\n <p>\n The Logger factory methods call this method to register each\n newly created Logger.\n <p>\n The application should retain its own reference to the Logger\n object to avoid it being garbage collected.  The LogManager\n may only retain a weak reference.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>logger</span> : Object {Logger}<div class='sub-desc'><p>the new logger.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the argument logger was registered successfully,\n          false if a logger of that name already exists.\n@exception NullPointerException if the logger name is null.</p>\n</div></li></ul></div></div></div><div id='method-addPropertyChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-addPropertyChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-addPropertyChangeListener' class='name expandable'>addPropertyChangeListener</a>( <span class='pre'>l</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Adds an event listener to be invoked when the logging\n properties are re-read. ...</div><div class='long'><p>Adds an event listener to be invoked when the logging\n properties are re-read. Adding multiple instances of\n the same event Listener results in multiple entries\n in the property event listener table.</p>\n\n<p> <p><b>WARNING:</b> This method is omitted from this class in all subset\n Profiles of Java SE that do not include the {@code java.beans} package.\n </p></p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>The dependency on {@code PropertyChangeListener} creates a\n             significant impediment to future modularization of the Java\n             platform. This method will be removed in a future release.\n             The global {@code LogManager} can detect changes to the\n             logging configuration by overridding the <a href=\"#!/api/java.util.logging.LogManager-method-readConfiguration\" rel=\"java.util.logging.LogManager-method-readConfiguration\" class=\"docClass\">readConfiguration</a> method.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>l</span> : Object {PropertyChangeListener}<div class='sub-desc'><p>event listener\n@exception SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\").\n@exception NullPointerException if the PropertyChangeListener is null.</p>\n</div></li></ul></div></div></div><div id='method-checkAccess' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-checkAccess' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-checkAccess' class='name expandable'>checkAccess</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Check that the current context is trusted to modify the logging\n configuration. ...</div><div class='long'><p>Check that the current context is trusted to modify the logging\n configuration.  This requires LoggingPermission(\"control\").\n <p>\n If the check fails we throw a SecurityException, otherwise\n we return normally.\n@exception SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\").</p>\n</div></div></div><div id='method-getLogManager' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-getLogManager' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-getLogManager' class='name expandable'>getLogManager</a>( <span class='pre'></span> ) : Object {java.util.logging.LogManager}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the global LogManager object. ...</div><div class='long'><p>Returns the global LogManager object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.logging.LogManager}</span><div class='sub-desc'><p>the global LogManager object</p>\n</div></li></ul></div></div></div><div id='method-getLogger' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-getLogger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-getLogger' class='name expandable'>getLogger</a>( <span class='pre'>name</span> ) : Object {java.util.logging.Logger}<span class=\"signature\"></span></div><div class='description'><div class='short'>Method to find a named logger. ...</div><div class='long'><p>Method to find a named logger.\n <p>\n Note that since untrusted code may create loggers with\n arbitrary names this method should not be relied on to\n find Loggers for security sensitive logging.\n It is also important to note that the Logger associated with the\n String {@code name} may be garbage collected at any time if there\n is no strong reference to the Logger. The caller of this method\n must check the return value for null in order to properly handle\n the case where the Logger has been garbage collected.\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>name of the logger</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.logging.Logger}</span><div class='sub-desc'><p>matching logger or null if none is found</p>\n</div></li></ul></div></div></div><div id='method-getLoggerNames' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-getLoggerNames' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-getLoggerNames' class='name expandable'>getLoggerNames</a>( <span class='pre'></span> ) : Object {java.util.Enumeration}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get an enumeration of known logger names. ...</div><div class='long'><p>Get an enumeration of known logger names.\n <p>\n Note:  Loggers may be added dynamically as new classes are loaded.\n This method only reports on the loggers that are currently registered.\n It is also important to note that this method only returns the name\n of a Logger, not a strong reference to the Logger itself.\n The returned String does nothing to prevent the Logger from being\n garbage collected. In particular, if the returned name is passed\n to {@code LogManager.getLogger()}, then the caller must check the\n return value from {@code LogManager.getLogger()} for null to properly\n handle the case where the Logger has been garbage collected in the\n time since its name was returned by this method.\n <p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Enumeration}</span><div class='sub-desc'><p>enumeration of logger name strings</p>\n</div></li></ul></div></div></div><div id='method-getLoggingMXBean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-getLoggingMXBean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-getLoggingMXBean' class='name expandable'>getLoggingMXBean</a>( <span class='pre'></span> ) : Object {java.util.logging.LoggingMXBean}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns LoggingMXBean for managing loggers. ...</div><div class='long'><p>Returns <tt>LoggingMXBean</tt> for managing loggers.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.logging.LoggingMXBean}</span><div class='sub-desc'><p>a LoggingMXBean object.</p>\n</div></li></ul></div></div></div><div id='method-getProperty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-getProperty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-getProperty' class='name expandable'>getProperty</a>( <span class='pre'>name</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the value of a logging property. ...</div><div class='long'><p>Get the value of a logging property.\n The method returns null if the property is not found.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>property name</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>property value</p>\n</div></li></ul></div></div></div><div id='method-readConfiguration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-readConfiguration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-readConfiguration' class='name expandable'>readConfiguration</a>( <span class='pre'>ins</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reinitialize the logging properties and reread the logging configuration\n from the given stream, which should be in j...</div><div class='long'><p>Reinitialize the logging properties and reread the logging configuration\n from the given stream, which should be in java.util.Properties format.\n A PropertyChangeEvent will be fired after the properties are read.\n <p>\n Any log level definitions in the new configuration file will be\n applied using Logger.setLevel(), if the target Logger exists.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ins</span> : Object {InputStream}<div class='sub-desc'><p>stream to read properties from\n@exception SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\").\n@exception IOException if there are problems reading from the stream.</p>\n</div></li></ul></div></div></div><div id='method-removePropertyChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-removePropertyChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-removePropertyChangeListener' class='name expandable'>removePropertyChangeListener</a>( <span class='pre'>l</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Removes an event listener for property change events. ...</div><div class='long'><p>Removes an event listener for property change events.\n If the same listener instance has been added to the listener table\n through multiple invocations of <CODE>addPropertyChangeListener</CODE>,\n then an equivalent number of\n <CODE>removePropertyChangeListener</CODE> invocations are required to remove\n all instances of that listener from the listener table.\n <P>\n Returns silently if the given listener is not found.</P></p>\n\n<p> <p><b>WARNING:</b> This method is omitted from this class in all subset\n Profiles of Java SE that do not include the {@code java.beans} package.\n </p></p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>The dependency on {@code PropertyChangeListener} creates a\n             significant impediment to future modularization of the Java\n             platform. This method will be removed in a future release.\n             The global {@code LogManager} can detect changes to the\n             logging configuration by overridding the <a href=\"#!/api/java.util.logging.LogManager-method-readConfiguration\" rel=\"java.util.logging.LogManager-method-readConfiguration\" class=\"docClass\">readConfiguration</a> method.</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>l</span> : Object {PropertyChangeListener}<div class='sub-desc'><p>event listener (can be null)\n@exception SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\").</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.LogManager'>java.util.logging.LogManager</span><br/><a href='source/LogManager.html#java-util-logging-LogManager-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.LogManager-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reset the logging configuration. ...</div><div class='long'><p>Reset the logging configuration.\n <p>\n For all named loggers, the reset operation removes and closes\n all Handlers and (except for the root logger) sets the level\n to null.  The root logger's level is set to Level.INFO.\n@exception SecurityException  if a security manager exists and if\n             the caller does not have LoggingPermission(\"control\").</p>\n</div></div></div></div></div></div></div>","meta":{}});