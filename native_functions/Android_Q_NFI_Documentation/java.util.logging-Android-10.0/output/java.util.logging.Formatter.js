Ext.data.JsonP.java_util_logging_Formatter({"tagname":"class","name":"java.util.logging.Formatter","autodetected":{},"files":[{"filename":"Formatter.js","href":"Formatter.html#java-util-logging-Formatter"}],"extends":"java.lang.Object","since":"1.4","members":[{"name":"format","tagname":"method","owner":"java.util.logging.Formatter","id":"method-format","meta":{}},{"name":"formatMessage","tagname":"method","owner":"java.util.logging.Formatter","id":"method-formatMessage","meta":{}},{"name":"getHead","tagname":"method","owner":"java.util.logging.Formatter","id":"method-getHead","meta":{}},{"name":"getTail","tagname":"method","owner":"java.util.logging.Formatter","id":"method-getTail","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.logging.Formatter","short_doc":"A Formatter provides support for formatting LogRecords. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.util.logging.SimpleFormatter","java.util.logging.XMLFormatter"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.logging.Formatter</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.util.logging.SimpleFormatter' rel='java.util.logging.SimpleFormatter' class='docClass'>java.util.logging.SimpleFormatter</a></div><div class='dependency'><a href='#!/api/java.util.logging.XMLFormatter' rel='java.util.logging.XMLFormatter' class='docClass'>java.util.logging.XMLFormatter</a></div><h4>Files</h4><div class='dependency'><a href='source/Formatter.html#java-util-logging-Formatter' target='_blank'>Formatter.js</a></div></pre><div class='doc-contents'><p>A Formatter provides support for formatting LogRecords.\n <p>\n Typically each logging Handler will have a Formatter associated\n with it.  The Formatter takes a LogRecord and converts it to\n a string.\n <p>\n Some formatters (such as the XMLFormatter) need to wrap head\n and tail strings around a set of formatted records. The getHeader\n and getTail methods can be used to obtain these strings.</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-format' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.Formatter'>java.util.logging.Formatter</span><br/><a href='source/Formatter.html#java-util-logging-Formatter-method-format' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.Formatter-method-format' class='name expandable'>format</a>( <span class='pre'>record</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Format the given log record and return the formatted string. ...</div><div class='long'><p>Format the given log record and return the formatted string.\n <p>\n The resulting formatted String will normally include a\n localized and formatted version of the LogRecord's message field.\n It is recommended to use the <a href=\"#!/api/java.util.logging.Formatter-method-formatMessage\" rel=\"java.util.logging.Formatter-method-formatMessage\" class=\"docClass\">formatMessage</a>\n convenience method to localize and format the message field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>record</span> : Object {LogRecord}<div class='sub-desc'><p>the log record to be formatted.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the formatted log record</p>\n</div></li></ul></div></div></div><div id='method-formatMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.Formatter'>java.util.logging.Formatter</span><br/><a href='source/Formatter.html#java-util-logging-Formatter-method-formatMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.Formatter-method-formatMessage' class='name expandable'>formatMessage</a>( <span class='pre'>record</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Localize and format the message string from a log record. ...</div><div class='long'><p>Localize and format the message string from a log record.  This\n method is provided as a convenience for Formatter subclasses to\n use when they are performing formatting.\n <p>\n The message string is first localized to a format string using\n the record's ResourceBundle.  (If there is no ResourceBundle,\n or if the message key is not found, then the key is used as the\n format string.)  The format String uses java.text style\n formatting.\n <ul>\n <li>If there are no parameters, no formatter is used.\n <li>Otherwise, if the string contains \"{0\" then\n     java.text.MessageFormat  is used to format the string.\n <li>Otherwise no formatting is performed.\n </li></li></li></ul>\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>record</span> : Object {LogRecord}<div class='sub-desc'><p>the log record containing the raw message</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a localized and formatted message</p>\n</div></li></ul></div></div></div><div id='method-getHead' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.Formatter'>java.util.logging.Formatter</span><br/><a href='source/Formatter.html#java-util-logging-Formatter-method-getHead' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.Formatter-method-getHead' class='name expandable'>getHead</a>( <span class='pre'>h</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the header string for a set of formatted records. ...</div><div class='long'><p>Return the header string for a set of formatted records.\n <p>\n This base class returns an empty string, but this may be\n overridden by subclasses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>h</span> : Object {Handler}<div class='sub-desc'><p>The target handler (can be null)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>header string</p>\n</div></li></ul></div></div></div><div id='method-getTail' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.Formatter'>java.util.logging.Formatter</span><br/><a href='source/Formatter.html#java-util-logging-Formatter-method-getTail' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.Formatter-method-getTail' class='name expandable'>getTail</a>( <span class='pre'>h</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the tail string for a set of formatted records. ...</div><div class='long'><p>Return the tail string for a set of formatted records.\n <p>\n This base class returns an empty string, but this may be\n overridden by subclasses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>h</span> : Object {Handler}<div class='sub-desc'><p>The target handler (can be null)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>tail string</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});