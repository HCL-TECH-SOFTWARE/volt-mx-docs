Ext.data.JsonP.java_util_logging_SimpleFormatter({"tagname":"class","name":"java.util.logging.SimpleFormatter","autodetected":{},"files":[{"filename":"SimpleFormatter.js","href":"SimpleFormatter.html#java-util-logging-SimpleFormatter"}],"extends":"java.util.logging.Formatter","since":"1.4","members":[{"name":"format","tagname":"method","owner":"java.util.logging.SimpleFormatter","id":"method-format","meta":{}},{"name":"formatMessage","tagname":"method","owner":"java.util.logging.Formatter","id":"method-formatMessage","meta":{}},{"name":"getHead","tagname":"method","owner":"java.util.logging.Formatter","id":"method-getHead","meta":{}},{"name":"getTail","tagname":"method","owner":"java.util.logging.Formatter","id":"method-getTail","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.logging.SimpleFormatter","short_doc":"Print a brief summary of the {@code LogRecord} in a human readable\n format. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.util.logging.Formatter"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.util.logging.Formatter' rel='java.util.logging.Formatter' class='docClass'>java.util.logging.Formatter</a><div class='subclass '><strong>java.util.logging.SimpleFormatter</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/SimpleFormatter.html#java-util-logging-SimpleFormatter' target='_blank'>SimpleFormatter.js</a></div></pre><div class='doc-contents'><p>Print a brief summary of the {@code LogRecord} in a human readable\n format.  The summary will typically be 1 or 2 lines.</p>\n\n<p> <p>\n <a name=\"formatting\">\n <b>Configuration:</b></a>\n The {@code SimpleFormatter} is initialized with the\n <a href=\"../Formatter.html#syntax\">format string</a>\n specified in the {@code <a href=\"#!/api/java.util.logging.SimpleFormatter-method-format\" rel=\"java.util.logging.SimpleFormatter-method-format\" class=\"docClass\">java.util.logging.SimpleFormatter.format</a>}\n property to {@linkplain <a href=\"#!/api/java.util.logging.SimpleFormatter-method-format\" rel=\"java.util.logging.SimpleFormatter-method-format\" class=\"docClass\">format</a> format} the log messages.\n This property can be defined\n in the {@linkplain <a href=\"#!/api/java.util.logging.LogManager-method-getProperty\" rel=\"java.util.logging.LogManager-method-getProperty\" class=\"docClass\">java.util.logging.LogManager.getProperty</a> logging properties}\n configuration file\n or as a system property.  If this property is set in both\n the logging properties and system properties,\n the format string specified in the system property will be used.\n If this property is not defined or the given format string\n is {@linkplain java.util.IllegalFormatException illegal},\n the default format is implementation-specific.</p>\n\n<p> @see java.util.Formatter</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-format' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.logging.SimpleFormatter'>java.util.logging.SimpleFormatter</span><br/><a href='source/SimpleFormatter.html#java-util-logging-SimpleFormatter-method-format' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.SimpleFormatter-method-format' class='name expandable'>format</a>( <span class='pre'>record</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Format the given LogRecord. ...</div><div class='long'><p>Format the given LogRecord.\n <p>\n The formatting can be customized by specifying the\n <a href=\"../Formatter.html#syntax\">format string</a>\n in the <a href=\"#formatting\">\n {@code java.util.logging.SimpleFormatter.format}</a> property.\n The given {@code LogRecord} will be formatted as if by calling:</p>\n\n<pre>    String.format(format, date, source, logger, level, message, thrown);\n </pre>\n\n\n<p> where the arguments are:<br>\n <ol>\n <li>{@code format} - the java.util.Formatter format string specified in the\n     {@code <a href=\"#!/api/java.util.logging.SimpleFormatter-method-format\" rel=\"java.util.logging.SimpleFormatter-method-format\" class=\"docClass\">java.util.logging.SimpleFormatter.format</a>} property\n     or the default format.</li>\n <li>{@code date} - a Date object representing\n     {@linkplain <a href=\"#!/api/java.util.logging.LogRecord-method-getMillis\" rel=\"java.util.logging.LogRecord-method-getMillis\" class=\"docClass\">java.util.logging.LogRecord.getMillis</a> event time} of the log record.</li>\n <li>{@code source} - a string representing the caller, if available;\n     otherwise, the logger's name.</li>\n <li>{@code logger} - the logger's name.</li>\n <li>{@code level} - the {@linkplain <a href=\"#!/api/java.util.logging.Level-method-getLocalizedName\" rel=\"java.util.logging.Level-method-getLocalizedName\" class=\"docClass\">java.util.logging.Level.getLocalizedName</a>\n     log level}.</li>\n <li>{@code message} - the formatted log message\n     returned from the java.util.logging.Formatter.formatMessage(LogRecord)\n     method.  It uses java.text\n     formatting and does not use the {@code java.util.Formatter\n     format} argument.</li>\n <li>{@code thrown} - a string representing\n     the {@linkplain <a href=\"#!/api/java.util.logging.LogRecord-method-getThrown\" rel=\"java.util.logging.LogRecord-method-getThrown\" class=\"docClass\">java.util.logging.LogRecord.getThrown</a> throwable}\n     associated with the log record and its backtrace\n     beginning with a newline character, if any;\n     otherwise, an empty string.</li>\n </ol></p>\n\n<p> <p>Some example formats:<br>\n <ul>\n <li> {@code <a href=\"#!/api/java.util.logging.SimpleFormatter-method-format\" rel=\"java.util.logging.SimpleFormatter-method-format\" class=\"docClass\">java.util.logging.SimpleFormatter.format</a>=\"%4$s: %5$s [%1$tc]%n\"}\n     <p>This prints 1 line with the log level ({@code 4$}),\n     the log message ({@code 5$}) and the timestamp ({@code 1$}) in\n     a square bracket.</p>\n\n<pre>     WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]\n     </pre>\n\n\n<p> <li> {@code <a href=\"#!/api/java.util.logging.SimpleFormatter-method-format\" rel=\"java.util.logging.SimpleFormatter-method-format\" class=\"docClass\">java.util.logging.SimpleFormatter.format</a>=\"%1$tc %2$s%n%4$s: %5$s%6$s%n\"}\n     <p>This prints 2 lines where the first line includes\n     the timestamp ({@code 1$}) and the source ({@code 2$});\n     the second line includes the log level ({@code 4$}) and\n     the log message ({@code 5$}) followed with the throwable\n     and its backtrace ({@code 6$}), if any:</p>\n\n<pre>     Tue Mar 22 13:11:31 PDT 2011 MyClass fatal\n     SEVERE: several message with an exception\n     java.lang.IllegalArgumentException: invalid argument\n             at MyClass.mash(MyClass.java:9)\n             at MyClass.crunch(MyClass.java:6)\n             at MyClass.main(MyClass.java:3)\n     </pre>\n\n\n<p> <li> {@code <a href=\"#!/api/java.util.logging.SimpleFormatter-method-format\" rel=\"java.util.logging.SimpleFormatter-method-format\" class=\"docClass\">java.util.logging.SimpleFormatter.format</a>=\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n\"}\n      <p>This prints 2 lines similar to the example above\n         with a different date/time formatting and does not print\n         the throwable and its backtrace:</p>\n\n<pre>     Mar 22, 2011 1:11:31 PM MyClass fatal\n     SEVERE: several message with an exception\n     </pre>\n\n\n<p> </p></li></p></li></p></li></ul>\n <p>This method can also be overridden in a subclass.\n It is recommended to use the <a href=\"#!/api/java.util.logging.Formatter-method-formatMessage\" rel=\"java.util.logging.Formatter-method-formatMessage\" class=\"docClass\">java.util.logging.Formatter.formatMessage</a>\n convenience method to localize and format the message field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>record</span> : Object {LogRecord}<div class='sub-desc'><p>the log record to be formatted.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a formatted log record</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.util.logging.Formatter-method-format\" rel=\"java.util.logging.Formatter-method-format\" class=\"docClass\">java.util.logging.Formatter.format</a></p></div></div></div><div id='method-formatMessage' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.logging.Formatter' rel='java.util.logging.Formatter' class='defined-in docClass'>java.util.logging.Formatter</a><br/><a href='source/Formatter.html#java-util-logging-Formatter-method-formatMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.Formatter-method-formatMessage' class='name expandable'>formatMessage</a>( <span class='pre'>record</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Localize and format the message string from a log record. ...</div><div class='long'><p>Localize and format the message string from a log record.  This\n method is provided as a convenience for Formatter subclasses to\n use when they are performing formatting.\n <p>\n The message string is first localized to a format string using\n the record's ResourceBundle.  (If there is no ResourceBundle,\n or if the message key is not found, then the key is used as the\n format string.)  The format String uses java.text style\n formatting.\n <ul>\n <li>If there are no parameters, no formatter is used.\n <li>Otherwise, if the string contains \"{0\" then\n     java.text.MessageFormat  is used to format the string.\n <li>Otherwise no formatting is performed.\n </li></li></li></ul>\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>record</span> : Object {LogRecord}<div class='sub-desc'><p>the log record containing the raw message</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a localized and formatted message</p>\n</div></li></ul></div></div></div><div id='method-getHead' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.logging.Formatter' rel='java.util.logging.Formatter' class='defined-in docClass'>java.util.logging.Formatter</a><br/><a href='source/Formatter.html#java-util-logging-Formatter-method-getHead' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.Formatter-method-getHead' class='name expandable'>getHead</a>( <span class='pre'>h</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the header string for a set of formatted records. ...</div><div class='long'><p>Return the header string for a set of formatted records.\n <p>\n This base class returns an empty string, but this may be\n overridden by subclasses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>h</span> : Object {Handler}<div class='sub-desc'><p>The target handler (can be null)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>header string</p>\n</div></li></ul></div></div></div><div id='method-getTail' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.util.logging.Formatter' rel='java.util.logging.Formatter' class='defined-in docClass'>java.util.logging.Formatter</a><br/><a href='source/Formatter.html#java-util-logging-Formatter-method-getTail' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.logging.Formatter-method-getTail' class='name expandable'>getTail</a>( <span class='pre'>h</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the tail string for a set of formatted records. ...</div><div class='long'><p>Return the tail string for a set of formatted records.\n <p>\n This base class returns an empty string, but this may be\n overridden by subclasses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>h</span> : Object {Handler}<div class='sub-desc'><p>The target handler (can be null)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>tail string</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});