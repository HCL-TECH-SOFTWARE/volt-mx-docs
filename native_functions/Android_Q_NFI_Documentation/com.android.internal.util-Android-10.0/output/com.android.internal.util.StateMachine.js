Ext.data.JsonP.com_android_internal_util_StateMachine({"tagname":"class","name":"com.android.internal.util.StateMachine","autodetected":{},"files":[{"filename":"StateMachine.js","href":"StateMachine.html#com-android-internal-util-StateMachine"}],"extends":"java.lang.Object","members":[{"name":"HANDLED","tagname":"property","owner":"com.android.internal.util.StateMachine","id":"property-HANDLED","meta":{}},{"name":"NOT_HANDLED","tagname":"property","owner":"com.android.internal.util.StateMachine","id":"property-NOT_HANDLED","meta":{}},{"name":"addLogRec","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-addLogRec","meta":{}},{"name":"addState","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-addState","meta":{}},{"name":"copyLogRecs","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-copyLogRecs","meta":{}},{"name":"deferMessage","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-deferMessage","meta":{}},{"name":"dump","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-dump","meta":{}},{"name":"getCurrentMessage","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-getCurrentMessage","meta":{}},{"name":"getCurrentState","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-getCurrentState","meta":{}},{"name":"getHandler","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-getHandler","meta":{}},{"name":"getLogRec","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-getLogRec","meta":{}},{"name":"getLogRecCount","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-getLogRecCount","meta":{}},{"name":"getLogRecMaxSize","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-getLogRecMaxSize","meta":{}},{"name":"getLogRecSize","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-getLogRecSize","meta":{}},{"name":"getName","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-getName","meta":{}},{"name":"isDbg","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-isDbg","meta":{}},{"name":"obtainMessage","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-obtainMessage","meta":{}},{"name":"quit","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-quit","meta":{}},{"name":"quitNow","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-quitNow","meta":{}},{"name":"removeState","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-removeState","meta":{}},{"name":"sendMessage","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-sendMessage","meta":{}},{"name":"sendMessageDelayed","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-sendMessageDelayed","meta":{}},{"name":"setDbg","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-setDbg","meta":{}},{"name":"setInitialState","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-setInitialState","meta":{}},{"name":"setLogOnlyTransitions","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-setLogOnlyTransitions","meta":{}},{"name":"setLogRecSize","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-setLogRecSize","meta":{}},{"name":"start","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-start","meta":{}},{"name":"toString","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-toString","meta":{}},{"name":"transitionTo","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-transitionTo","meta":{}},{"name":"transitionToHaltingState","tagname":"method","owner":"com.android.internal.util.StateMachine","id":"method-transitionToHaltingState","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.util.StateMachine","short_doc":"{@hide}\n\n The state machine defined here is a hierarchical state machine which processes messages\n and can have state...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.util.StateMachine</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/StateMachine.html#com-android-internal-util-StateMachine' target='_blank'>StateMachine.js</a></div></pre><div class='doc-contents'><p>{@hide}</p>\n\n<p> <p>The state machine defined here is a hierarchical state machine which processes messages\n and can have states arranged hierarchically.</p></p>\n\n<p> <p>A state is a <code>State</code> object and must implement\n <code>processMessage</code> and optionally <code>enter/exit/getName</code>.\n The enter/exit methods are equivalent to the construction and destruction\n in Object Oriented programming and are used to perform initialization and\n cleanup of the state respectively. The <code>getName</code> method returns the\n name of the state; the default implementation returns the class name. It may be\n desirable to have <code>getName</code> return the the state instance name instead,\n in particular if a particular state class has multiple instances.</p></p>\n\n<p> <p>When a state machine is created, <code>addState</code> is used to build the\n hierarchy and <code>setInitialState</code> is used to identify which of these\n is the initial state. After construction the programmer calls <code>start</code>\n which initializes and starts the state machine. The first action the StateMachine\n is to the invoke <code>enter</code> for all of the initial state's hierarchy,\n starting at its eldest parent. The calls to enter will be done in the context\n of the StateMachine's Handler, not in the context of the call to start, and they\n will be invoked before any messages are processed. For example, given the simple\n state machine below, mP1.enter will be invoked and then mS1.enter. Finally,\n messages sent to the state machine will be processed by the current state;\n in our simple state machine below that would initially be mS1.processMessage.</p></p>\n\n<pre>        mP1\n       /   \\\n      mS2   mS1 ----&gt; initial state\n</pre>\n\n\n<p> <p>After the state machine is created and started, messages are sent to a state\n machine using <code>sendMessage</code> and the messages are created using\n <code>obtainMessage</code>. When the state machine receives a message the\n current state's <code>processMessage</code> is invoked. In the above example\n mS1.processMessage will be invoked first. The state may use <code>transitionTo</code>\n to change the current state to a new state.</p></p>\n\n<p> <p>Each state in the state machine may have a zero or one parent states. If\n a child state is unable to handle a message it may have the message processed\n by its parent by returning false or NOT_HANDLED. If a message is not handled by\n a child state or any of its ancestors, <code>unhandledMessage</code> will be invoked\n to give one last chance for the state machine to process the message.</p></p>\n\n<p> <p>When all processing is completed a state machine may choose to call\n <code>transitionToHaltingState</code>. When the current <code>processingMessage</code>\n returns the state machine will transfer to an internal <code>HaltingState</code>\n and invoke <code>halting</code>. Any message subsequently received by the state\n machine will cause <code>haltedProcessMessage</code> to be invoked.</p></p>\n\n<p> <p>If it is desirable to completely stop the state machine call <code>quit</code> or\n <code>quitNow</code>. These will call <code>exit</code> of the current state and its parents,\n call <code>onQuitting</code> and then exit Thread/Loopers.</p></p>\n\n<p> <p>In addition to <code>processMessage</code> each <code>State</code> has\n an <code>enter</code> method and <code>exit</code> method which may be overridden.</p></p>\n\n<p> <p>Since the states are arranged in a hierarchy transitioning to a new state\n causes current states to be exited and new states to be entered. To determine\n the list of states to be entered/exited the common parent closest to\n the current state is found. We then exit from the current state and its\n parent's up to but not including the common parent state and then enter all\n of the new states below the common parent down to the destination state.\n If there is no common parent all states are exited and then the new states\n are entered.</p></p>\n\n<p> <p>Two other methods that states can use are <code>deferMessage</code> and\n <code>sendMessageAtFrontOfQueue</code>. The <code>sendMessageAtFrontOfQueue</code> sends\n a message but places it on the front of the queue rather than the back. The\n <code>deferMessage</code> causes the message to be saved on a list until a\n transition is made to a new state. At which time all of the deferred messages\n will be put on the front of the state machine queue with the oldest message\n at the front. These will then be processed by the new current state before\n any other messages that are on the queue or might be added later. Both of\n these are protected and may only be invoked from within a state machine.</p></p>\n\n<p> <p>To illustrate some of these properties we'll use state machine with an 8\n state hierarchy:</p></p>\n\n<pre>          mP0\n         /   \\\n        mP1   mS0\n       /   \\\n      mS2   mS1\n     /  \\    \\\n    mS3  mS4  mS5  ---&gt; initial state\n</pre>\n\n\n<p> <p>After starting mS5 the list of active states is mP0, mP1, mS1 and mS5.\n So the order of calling processMessage when a message is received is mS5,\n mS1, mP1, mP0 assuming each processMessage indicates it can't handle this\n message by returning false or NOT_HANDLED.</p></p>\n\n<p> <p>Now assume mS5.processMessage receives a message it can handle, and during\n the handling determines the machine should change states. It could call\n transitionTo(mS4) and return true or HANDLED. Immediately after returning from\n processMessage the state machine runtime will find the common parent,\n which is mP1. It will then call mS5.exit, mS1.exit, mS2.enter and then\n mS4.enter. The new list of active states is mP0, mP1, mS2 and mS4. So\n when the next message is received mS4.processMessage will be invoked.</p></p>\n\n<p> <p>Now for some concrete examples, here is the canonical HelloWorld as a state machine.\n It responds with \"Hello World\" being printed to the log for every message.</p></p>\n\n<pre>class HelloWorld extends StateMachine {\n    HelloWorld(String name) {\n        super(name);\n        addState(mState1);\n        setInitialState(mState1);\n    }\n\n    public static HelloWorld makeHelloWorld() {\n        HelloWorld hw = new HelloWorld(\"hw\");\n        hw.start();\n        return hw;\n    }\n\n    class State1 extends State {\n        &#64;Override public boolean processMessage(Message message) {\n            log(\"Hello World\");\n            return HANDLED;\n        }\n    }\n    State1 mState1 = new State1();\n}\n\nvoid testHelloWorld() {\n    HelloWorld hw = makeHelloWorld();\n    hw.sendMessage(hw.obtainMessage());\n}\n</pre>\n\n\n<p> <p>A more interesting state machine is one with four states\n with two independent parent states.</p></p>\n\n<pre>        mP1      mP2\n       /   \\\n      mS2   mS1\n</pre>\n\n\n<p> <p>Here is a description of this state machine using pseudo code.</p></p>\n\n<pre>state mP1 {\n     enter { log(\"mP1.enter\"); }\n     exit { log(\"mP1.exit\");  }\n     on msg {\n         CMD_2 {\n             send(CMD_3);\n             defer(msg);\n             transitionTo(mS2);\n             return HANDLED;\n         }\n         return NOT_HANDLED;\n     }\n}\n\nINITIAL\nstate mS1 parent mP1 {\n     enter { log(\"mS1.enter\"); }\n     exit  { log(\"mS1.exit\");  }\n     on msg {\n         CMD_1 {\n             transitionTo(mS1);\n             return HANDLED;\n         }\n         return NOT_HANDLED;\n     }\n}\n\nstate mS2 parent mP1 {\n     enter { log(\"mS2.enter\"); }\n     exit  { log(\"mS2.exit\");  }\n     on msg {\n         CMD_2 {\n             send(CMD_4);\n             return HANDLED;\n         }\n         CMD_3 {\n             defer(msg);\n             transitionTo(mP2);\n             return HANDLED;\n         }\n         return NOT_HANDLED;\n     }\n}\n\nstate mP2 {\n     enter {\n         log(\"mP2.enter\");\n         send(CMD_5);\n     }\n     exit { log(\"mP2.exit\"); }\n     on msg {\n         CMD_3, CMD_4 { return HANDLED; }\n         CMD_5 {\n             transitionTo(HaltingState);\n             return HANDLED;\n         }\n         return NOT_HANDLED;\n     }\n}\n</pre>\n\n\n<p> <p>The implementation is below and also in StateMachineTest:</p></p>\n\n<pre>class Hsm1 extends StateMachine {\n    public static final int CMD_1 = 1;\n    public static final int CMD_2 = 2;\n    public static final int CMD_3 = 3;\n    public static final int CMD_4 = 4;\n    public static final int CMD_5 = 5;\n\n    public static Hsm1 makeHsm1() {\n        log(\"makeHsm1 E\");\n        Hsm1 sm = new Hsm1(\"hsm1\");\n        sm.start();\n        log(\"makeHsm1 X\");\n        return sm;\n    }\n\n    Hsm1(String name) {\n        super(name);\n        log(\"ctor E\");\n\n        // Add states, use indentation to show hierarchy\n        addState(mP1);\n            addState(mS1, mP1);\n            addState(mS2, mP1);\n        addState(mP2);\n\n        // Set the initial state\n        setInitialState(mS1);\n        log(\"ctor X\");\n    }\n\n    class P1 extends State {\n        &#64;Override public void enter() {\n            log(\"mP1.enter\");\n        }\n        &#64;Override public boolean processMessage(Message message) {\n            boolean retVal;\n            log(\"mP1.processMessage what=\" + message.what);\n            switch(message.what) {\n            case CMD_2:\n                // CMD_2 will arrive in mS2 before CMD_3\n                sendMessage(obtainMessage(CMD_3));\n                deferMessage(message);\n                transitionTo(mS2);\n                retVal = HANDLED;\n                break;\n            default:\n                // Any message we don't understand in this state invokes unhandledMessage\n                retVal = NOT_HANDLED;\n                break;\n            }\n            return retVal;\n        }\n        &#64;Override public void exit() {\n            log(\"mP1.exit\");\n        }\n    }\n\n    class S1 extends State {\n        &#64;Override public void enter() {\n            log(\"mS1.enter\");\n        }\n        &#64;Override public boolean processMessage(Message message) {\n            log(\"S1.processMessage what=\" + message.what);\n            if (message.what == CMD_1) {\n                // Transition to ourself to show that enter/exit is called\n                transitionTo(mS1);\n                return HANDLED;\n            } else {\n                // Let parent process all other messages\n                return NOT_HANDLED;\n            }\n        }\n        &#64;Override public void exit() {\n            log(\"mS1.exit\");\n        }\n    }\n\n    class S2 extends State {\n        &#64;Override public void enter() {\n            log(\"mS2.enter\");\n        }\n        &#64;Override public boolean processMessage(Message message) {\n            boolean retVal;\n            log(\"mS2.processMessage what=\" + message.what);\n            switch(message.what) {\n            case(CMD_2):\n                sendMessage(obtainMessage(CMD_4));\n                retVal = HANDLED;\n                break;\n            case(CMD_3):\n                deferMessage(message);\n                transitionTo(mP2);\n                retVal = HANDLED;\n                break;\n            default:\n                retVal = NOT_HANDLED;\n                break;\n            }\n            return retVal;\n        }\n        &#64;Override public void exit() {\n            log(\"mS2.exit\");\n        }\n    }\n\n    class P2 extends State {\n        &#64;Override public void enter() {\n            log(\"mP2.enter\");\n            sendMessage(obtainMessage(CMD_5));\n        }\n        &#64;Override public boolean processMessage(Message message) {\n            log(\"P2.processMessage what=\" + message.what);\n            switch(message.what) {\n            case(CMD_3):\n                break;\n            case(CMD_4):\n                break;\n            case(CMD_5):\n                transitionToHaltingState();\n                break;\n            }\n            return HANDLED;\n        }\n        &#64;Override public void exit() {\n            log(\"mP2.exit\");\n        }\n    }\n\n    &#64;Override\n    void onHalting() {\n        log(\"halting\");\n        synchronized (this) {\n            this.notifyAll();\n        }\n    }\n\n    P1 mP1 = new P1();\n    S1 mS1 = new S1();\n    S2 mS2 = new S2();\n    P2 mP2 = new P2();\n}\n</pre>\n\n\n<p> <p>If this is executed by sending two messages CMD_1 and CMD_2\n (Note the synchronize is only needed because we use hsm.wait())</p></p>\n\n<pre>Hsm1 hsm = makeHsm1();\nsynchronize(hsm) {\n     hsm.sendMessage(obtainMessage(hsm.CMD_1));\n     hsm.sendMessage(obtainMessage(hsm.CMD_2));\n     try {\n          // wait for the messages to be handled\n          hsm.wait();\n     } catch (InterruptedException e) {\n          loge(\"exception while waiting \" + e.getMessage());\n     }\n}\n</pre>\n\n\n<p> <p>The output is:</p></p>\n\n<pre>D/hsm1    ( 1999): makeHsm1 E\nD/hsm1    ( 1999): ctor E\nD/hsm1    ( 1999): ctor X\nD/hsm1    ( 1999): mP1.enter\nD/hsm1    ( 1999): mS1.enter\nD/hsm1    ( 1999): makeHsm1 X\nD/hsm1    ( 1999): mS1.processMessage what=1\nD/hsm1    ( 1999): mS1.exit\nD/hsm1    ( 1999): mS1.enter\nD/hsm1    ( 1999): mS1.processMessage what=2\nD/hsm1    ( 1999): mP1.processMessage what=2\nD/hsm1    ( 1999): mS1.exit\nD/hsm1    ( 1999): mS2.enter\nD/hsm1    ( 1999): mS2.processMessage what=2\nD/hsm1    ( 1999): mS2.processMessage what=3\nD/hsm1    ( 1999): mS2.exit\nD/hsm1    ( 1999): mP1.exit\nD/hsm1    ( 1999): mP2.enter\nD/hsm1    ( 1999): mP2.processMessage what=3\nD/hsm1    ( 1999): mP2.processMessage what=4\nD/hsm1    ( 1999): mP2.processMessage what=5\nD/hsm1    ( 1999): mP2.exit\nD/hsm1    ( 1999): halting\n</pre>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-HANDLED' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-property-HANDLED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-property-HANDLED' class='name expandable'>HANDLED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience constant that maybe returned by processMessage\nto indicate the the message was processed and is not to be...</div><div class='long'><p>Convenience constant that maybe returned by processMessage\nto indicate the the message was processed and is not to be\nprocessed by parent states</p>\n<p>Defaults to: <code>&quot;true&quot;</code></p></div></div></div><div id='property-NOT_HANDLED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-property-NOT_HANDLED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-property-NOT_HANDLED' class='name expandable'>NOT_HANDLED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience constant that maybe returned by processMessage\nto indicate the the message was NOT processed and is to be...</div><div class='long'><p>Convenience constant that maybe returned by processMessage\nto indicate the the message was NOT processed and is to be\nprocessed by parent states</p>\n<p>Defaults to: <code>&quot;false&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addLogRec' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-addLogRec' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-addLogRec' class='name expandable'>addLogRec</a>( <span class='pre'>string</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add the string to LogRecords. ...</div><div class='long'><p>Add the string to LogRecords.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>string</span> : String<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-addState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-addState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-addState' class='name expandable'>addState</a>( <span class='pre'>state</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a new state to the state machine, parent will be null ...</div><div class='long'><p>Add a new state to the state machine, parent will be null</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {State}<div class='sub-desc'><p>to add</p>\n</div></li></ul></div></div></div><div id='method-copyLogRecs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-copyLogRecs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-copyLogRecs' class='name expandable'>copyLogRecs</a>( <span class='pre'></span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>a copy of LogRecs as a collection</p>\n</div></li></ul></div></div></div><div id='method-deferMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-deferMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-deferMessage' class='name expandable'>deferMessage</a>( <span class='pre'>msg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Defer this message until next state transition. ...</div><div class='long'><p>Defer this message until next state transition.\n Upon transitioning all deferred messages will be\n placed on the queue and reprocessed in the original\n order. (i.e. The next state the oldest messages will\n be processed first)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>msg</span> : Object {Message}<div class='sub-desc'><p>is deferred until the next transition.</p>\n</div></li></ul></div></div></div><div id='method-dump' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-dump' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-dump' class='name expandable'>dump</a>( <span class='pre'>fd, pw, args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Dump the current state. ...</div><div class='long'><p>Dump the current state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fd</span> : Object {FileDescriptor}<div class='sub-desc'>\n</div></li><li><span class='pre'>pw</span> : Object {PrintWriter}<div class='sub-desc'>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.String[]}<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getCurrentMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-getCurrentMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-getCurrentMessage' class='name expandable'>getCurrentMessage</a>( <span class='pre'></span> ) : Object {android.os.Message}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.Message}</span><div class='sub-desc'><p>current message</p>\n</div></li></ul></div></div></div><div id='method-getCurrentState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-getCurrentState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-getCurrentState' class='name expandable'>getCurrentState</a>( <span class='pre'></span> ) : Object {com.android.internal.util.IState}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.util.IState}</span><div class='sub-desc'><p>current state</p>\n</div></li></ul></div></div></div><div id='method-getHandler' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-getHandler' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-getHandler' class='name expandable'>getHandler</a>( <span class='pre'></span> ) : Object {android.os.Handler}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.Handler}</span><div class='sub-desc'><p>Handler, maybe null if state machine has quit.</p>\n</div></li></ul></div></div></div><div id='method-getLogRec' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-getLogRec' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-getLogRec' class='name expandable'>getLogRec</a>( <span class='pre'></span> ) : Object {com.android.internal.util.StateMachine.LogRec}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.util.StateMachine.LogRec}</span><div class='sub-desc'><p>a log record, or null if index is out of range</p>\n</div></li></ul></div></div></div><div id='method-getLogRecCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-getLogRecCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-getLogRecCount' class='name expandable'>getLogRecCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the total number of records processed</p>\n</div></li></ul></div></div></div><div id='method-getLogRecMaxSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-getLogRecMaxSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-getLogRecMaxSize' class='name expandable'>getLogRecMaxSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of log records we can store</p>\n</div></li></ul></div></div></div><div id='method-getLogRecSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-getLogRecSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-getLogRecSize' class='name expandable'>getLogRecSize</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of log records currently readable</p>\n</div></li></ul></div></div></div><div id='method-getName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-getName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-getName' class='name expandable'>getName</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the name</p>\n</div></li></ul></div></div></div><div id='method-isDbg' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-isDbg' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-isDbg' class='name expandable'>isDbg</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>if debugging is enabled</p>\n</div></li></ul></div></div></div><div id='method-obtainMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-obtainMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-obtainMessage' class='name expandable'>obtainMessage</a>( <span class='pre'>what, arg1, arg2, obj</span> ) : Object {android.os.Message}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get a message and set Message.target state machine handler,\n what, arg1, arg2 and obj\n\n Note: The handler can be null...</div><div class='long'><p>Get a message and set Message.target state machine handler,\n what, arg1, arg2 and obj</p>\n\n<p> Note: The handler can be null if the state machine has quit,\n which means target will be null and may cause a AndroidRuntimeException\n in MessageQueue#enqueMessage if sent directly or if sent using\n StateMachine#sendMessage the message will just be ignored.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>what</span> : Number<div class='sub-desc'><p>is assigned to Message.what</p>\n</div></li><li><span class='pre'>arg1</span> : Number<div class='sub-desc'><p>is assigned to Message.arg1</p>\n</div></li><li><span class='pre'>arg2</span> : Number<div class='sub-desc'><p>is assigned to Message.arg2</p>\n</div></li><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>is assigned to Message.obj</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.Message}</span><div class='sub-desc'><p>A Message object from the global pool</p>\n</div></li></ul></div></div></div><div id='method-quit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-quit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-quit' class='name expandable'>quit</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Quit the state machine after all currently queued up messages are processed. ...</div><div class='long'><p>Quit the state machine after all currently queued up messages are processed.</p>\n</div></div></div><div id='method-quitNow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-quitNow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-quitNow' class='name expandable'>quitNow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Quit the state machine immediately all currently queued messages will be discarded. ...</div><div class='long'><p>Quit the state machine immediately all currently queued messages will be discarded.</p>\n</div></div></div><div id='method-removeState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-removeState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-removeState' class='name expandable'>removeState</a>( <span class='pre'>state</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a state from the state machine, unless it is currently active or if it has children. ...</div><div class='long'><p>Removes a state from the state machine, unless it is currently active or if it has children.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {State}<div class='sub-desc'><p>state to remove</p>\n</div></li></ul></div></div></div><div id='method-sendMessage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-sendMessage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-sendMessage' class='name expandable'>sendMessage</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Enqueue a message to this state machine. ...</div><div class='long'><p>Enqueue a message to this state machine.</p>\n\n<p> Message is ignored if state machine has quit.</p>\n</div></div></div><div id='method-sendMessageDelayed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-sendMessageDelayed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-sendMessageDelayed' class='name expandable'>sendMessageDelayed</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Enqueue a message to this state machine after a delay. ...</div><div class='long'><p>Enqueue a message to this state machine after a delay.</p>\n\n<p> Message is ignored if state machine has quit.</p>\n</div></div></div><div id='method-setDbg' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-setDbg' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-setDbg' class='name expandable'>setDbg</a>( <span class='pre'>dbg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set debug enable/disabled. ...</div><div class='long'><p>Set debug enable/disabled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dbg</span> : Boolean<div class='sub-desc'><p>is true to enable debugging.</p>\n</div></li></ul></div></div></div><div id='method-setInitialState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-setInitialState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-setInitialState' class='name expandable'>setInitialState</a>( <span class='pre'>initialState</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the initial state. ...</div><div class='long'><p>Set the initial state. This must be invoked before\n and messages are sent to the state machine.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>initialState</span> : Object {State}<div class='sub-desc'><p>is the state which will receive the first message.</p>\n</div></li></ul></div></div></div><div id='method-setLogOnlyTransitions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-setLogOnlyTransitions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-setLogOnlyTransitions' class='name expandable'>setLogOnlyTransitions</a>( <span class='pre'>enable</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set to log only messages that cause a state transition ...</div><div class='long'><p>Set to log only messages that cause a state transition</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>enable</span> : Boolean<div class='sub-desc'><p>{@code true} to enable, {@code false} to disable</p>\n</div></li></ul></div></div></div><div id='method-setLogRecSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-setLogRecSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-setLogRecSize' class='name expandable'>setLogRecSize</a>( <span class='pre'>maxSize</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set number of log records to maintain and clears all current records. ...</div><div class='long'><p>Set number of log records to maintain and clears all current records.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>maxSize</span> : Number<div class='sub-desc'><p>number of messages to maintain at anyone time.</p>\n</div></li></ul></div></div></div><div id='method-start' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-start' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-start' class='name expandable'>start</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Start the state machine. ...</div><div class='long'><p>Start the state machine.</p>\n</div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-transitionTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-transitionTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-transitionTo' class='name expandable'>transitionTo</a>( <span class='pre'>destState</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>transition to destination state. ...</div><div class='long'><p>transition to destination state. Upon returning\n from processMessage the current state's exit will\n be executed and upon the next message arriving\n destState.enter will be invoked.</p>\n\n<p> this function can also be called inside the enter function of the\n previous transition target, but the behavior is undefined when it is\n called mid-way through a previous transition (for example, calling this\n in the enter() routine of a intermediate node when the current transition\n target is one of the nodes descendants).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>destState</span> : Object {IState}<div class='sub-desc'><p>will be the state that receives the next message.</p>\n</div></li></ul></div></div></div><div id='method-transitionToHaltingState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.StateMachine'>com.android.internal.util.StateMachine</span><br/><a href='source/StateMachine.html#com-android-internal-util-StateMachine-method-transitionToHaltingState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.StateMachine-method-transitionToHaltingState' class='name expandable'>transitionToHaltingState</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>transition to halt state. ...</div><div class='long'><p>transition to halt state. Upon returning\n from processMessage we will exit all current\n states, execute the onHalting() method and then\n for all subsequent messages haltedProcessMessage\n will be called.</p>\n</div></div></div></div></div></div></div>","meta":{}});