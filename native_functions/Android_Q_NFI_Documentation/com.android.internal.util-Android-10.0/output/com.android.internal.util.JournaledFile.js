Ext.data.JsonP.com_android_internal_util_JournaledFile({"tagname":"class","name":"com.android.internal.util.JournaledFile","autodetected":{},"files":[{"filename":"JournaledFile.js","href":"JournaledFile.html#com-android-internal-util-JournaledFile"}],"extends":"java.lang.Object","deprecated":{"text":"<p>Use {@code AtomicFile} instead.  It would\n be nice to update all existing uses of this to switch to AtomicFile, but since\n their on-file semantics are slightly different that would run the risk of losing\n data if at the point of the platform upgrade to the new code it would need to\n roll back to the backup file.  This can be solved...  but is it worth it and\n all of the testing needed to make sure it is correct?</p>\n"},"members":[{"name":"chooseForRead","tagname":"method","owner":"com.android.internal.util.JournaledFile","id":"method-chooseForRead","meta":{}},{"name":"chooseForWrite","tagname":"method","owner":"com.android.internal.util.JournaledFile","id":"method-chooseForWrite","meta":{}},{"name":"commit","tagname":"method","owner":"com.android.internal.util.JournaledFile","id":"method-commit","meta":{}},{"name":"rollback","tagname":"method","owner":"com.android.internal.util.JournaledFile","id":"method-rollback","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.util.JournaledFile","short_doc":" ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.util.JournaledFile</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/JournaledFile.html#com-android-internal-util-JournaledFile' target='_blank'>JournaledFile.js</a></div></pre><div class='doc-contents'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This class has been <strong>deprecated</strong> </p>\n        <p>Use {@code AtomicFile} instead.  It would\n be nice to update all existing uses of this to switch to AtomicFile, but since\n their on-file semantics are slightly different that would run the risk of losing\n data if at the point of the platform upgrade to the new code it would need to\n roll back to the backup file.  This can be solved...  but is it worth it and\n all of the testing needed to make sure it is correct?</p>\n\n        </div>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-chooseForRead' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.JournaledFile'>com.android.internal.util.JournaledFile</span><br/><a href='source/JournaledFile.html#com-android-internal-util-JournaledFile-method-chooseForRead' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.JournaledFile-method-chooseForRead' class='name expandable'>chooseForRead</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the file for you to read. ...</div><div class='long'><p>Returns the file for you to read.\n@more Prefers the real file.  If it doesn't exist, uses the temp one, and then copies\n it to the real one.  If there is both a real file and a temp one, assumes that the\n temp one isn't fully written and deletes it.</p>\n</div></div></div><div id='method-chooseForWrite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.JournaledFile'>com.android.internal.util.JournaledFile</span><br/><a href='source/JournaledFile.html#com-android-internal-util-JournaledFile-method-chooseForWrite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.JournaledFile-method-chooseForWrite' class='name expandable'>chooseForWrite</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a file for you to write. ...</div><div class='long'><p>Returns a file for you to write.\n@more If a write is already happening, throws.  In other words, you must provide your\n own locking.\n <p>\n Call <a href=\"#!/api/com.android.internal.util.JournaledFile-method-commit\" rel=\"com.android.internal.util.JournaledFile-method-commit\" class=\"docClass\">commit</a> to commit the changes, or <a href=\"#!/api/com.android.internal.util.JournaledFile-method-rollback\" rel=\"com.android.internal.util.JournaledFile-method-rollback\" class=\"docClass\">rollback</a> to forget the changes.</p>\n</div></div></div><div id='method-commit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.JournaledFile'>com.android.internal.util.JournaledFile</span><br/><a href='source/JournaledFile.html#com-android-internal-util-JournaledFile-method-commit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.JournaledFile-method-commit' class='name expandable'>commit</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Commit changes. ...</div><div class='long'><p>Commit changes.</p>\n</div></div></div><div id='method-rollback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.JournaledFile'>com.android.internal.util.JournaledFile</span><br/><a href='source/JournaledFile.html#com-android-internal-util-JournaledFile-method-rollback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.JournaledFile-method-rollback' class='name expandable'>rollback</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Roll back changes. ...</div><div class='long'><p>Roll back changes.</p>\n</div></div></div></div></div></div></div>","meta":{"deprecated":{"text":"<p>Use {@code AtomicFile} instead.  It would\n be nice to update all existing uses of this to switch to AtomicFile, but since\n their on-file semantics are slightly different that would run the risk of losing\n data if at the point of the platform upgrade to the new code it would need to\n roll back to the backup file.  This can be solved...  but is it worth it and\n all of the testing needed to make sure it is correct?</p>\n"}}});