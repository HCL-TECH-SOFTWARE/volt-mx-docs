Ext.data.JsonP.com_android_internal_util_ConcurrentUtils({"tagname":"class","name":"com.android.internal.util.ConcurrentUtils","autodetected":{},"files":[{"filename":"ConcurrentUtils.js","href":"ConcurrentUtils.html#com-android-internal-util-ConcurrentUtils"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"newFixedThreadPool","tagname":"method","owner":"com.android.internal.util.ConcurrentUtils","id":"method-newFixedThreadPool","meta":{}},{"name":"waitForCountDownNoInterrupt","tagname":"method","owner":"com.android.internal.util.ConcurrentUtils","id":"method-waitForCountDownNoInterrupt","meta":{}},{"name":"waitForFutureNoInterrupt","tagname":"method","owner":"com.android.internal.util.ConcurrentUtils","id":"method-waitForFutureNoInterrupt","meta":{}},{"name":"wtfIfLockHeld","tagname":"method","owner":"com.android.internal.util.ConcurrentUtils","id":"method-wtfIfLockHeld","meta":{}},{"name":"wtfIfLockNotHeld","tagname":"method","owner":"com.android.internal.util.ConcurrentUtils","id":"method-wtfIfLockNotHeld","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.util.ConcurrentUtils","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.util.ConcurrentUtils</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ConcurrentUtils.html#com-android-internal-util-ConcurrentUtils' target='_blank'>ConcurrentUtils.js</a></div></pre><div class='doc-contents'><p>Utility methods for common functionality using java.util.concurrent package</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-newFixedThreadPool' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.ConcurrentUtils'>com.android.internal.util.ConcurrentUtils</span><br/><a href='source/ConcurrentUtils.html#com-android-internal-util-ConcurrentUtils-method-newFixedThreadPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.ConcurrentUtils-method-newFixedThreadPool' class='name expandable'>newFixedThreadPool</a>( <span class='pre'>nThreads, poolName, linuxThreadPriority</span> ) : Object {java.util.concurrent.ExecutorService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a thread pool using\n ThreadFactory) ...</div><div class='long'><p>Creates a thread pool using\n ThreadFactory)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nThreads</span> : Number<div class='sub-desc'><p>the number of threads in the pool</p>\n</div></li><li><span class='pre'>poolName</span> : String<div class='sub-desc'><p>base name of the threads in the pool</p>\n</div></li><li><span class='pre'>linuxThreadPriority</span> : Number<div class='sub-desc'><p>a Linux priority level. see Process.setThreadPriority(int)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.ExecutorService}</span><div class='sub-desc'><p>the newly created thread pool</p>\n</div></li></ul></div></div></div><div id='method-waitForCountDownNoInterrupt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.ConcurrentUtils'>com.android.internal.util.ConcurrentUtils</span><br/><a href='source/ConcurrentUtils.html#com-android-internal-util-ConcurrentUtils-method-waitForCountDownNoInterrupt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.ConcurrentUtils-method-waitForCountDownNoInterrupt' class='name expandable'>waitForCountDownNoInterrupt</a>( <span class='pre'>countDownLatch, timeoutMs, description</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits for CountDownLatch.countDown() to be called on the {@param countDownLatch}. ...</div><div class='long'><p>Waits for CountDownLatch.countDown() to be called on the {@param countDownLatch}.\n <p>If CountDownLatch.countDown() doesn't occur within {@param timeoutMs}, this\n method will throw {@code IllegalStateException}\n <p>If {@code InterruptedException} occurs, this method will interrupt the current thread\n and throw {@code IllegalStateException}</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>countDownLatch</span> : Object {CountDownLatch}<div class='sub-desc'><p>the CountDownLatch which CountDownLatch.countDown() is\n                       being waited on.</p>\n</div></li><li><span class='pre'>timeoutMs</span> : Number<div class='sub-desc'><p>the maximum time waited for CountDownLatch.countDown()</p>\n</div></li><li><span class='pre'>description</span> : String<div class='sub-desc'><p>a short description of the operation</p>\n</div></li></ul></div></div></div><div id='method-waitForFutureNoInterrupt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.ConcurrentUtils'>com.android.internal.util.ConcurrentUtils</span><br/><a href='source/ConcurrentUtils.html#com-android-internal-util-ConcurrentUtils-method-waitForFutureNoInterrupt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.ConcurrentUtils-method-waitForFutureNoInterrupt' class='name expandable'>waitForFutureNoInterrupt</a>( <span class='pre'>future, description</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits if necessary for the computation to complete, and then retrieves its result. ...</div><div class='long'><p>Waits if necessary for the computation to complete, and then retrieves its result.\n <p>If {@code InterruptedException} occurs, this method will interrupt the current thread\n and throw {@code IllegalStateException}</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>future</span> : Object {java.util.concurrent.Future}<div class='sub-desc'><p>future to wait for result</p>\n</div></li><li><span class='pre'>description</span> : String<div class='sub-desc'><p>short description of the operation</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the computed result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if interrupted during wait</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException if an error occurs while waiting for Future.get()\n@see Future#get()</p>\n</div></li></ul></div></div></div><div id='method-wtfIfLockHeld' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.ConcurrentUtils'>com.android.internal.util.ConcurrentUtils</span><br/><a href='source/ConcurrentUtils.html#com-android-internal-util-ConcurrentUtils-method-wtfIfLockHeld' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.ConcurrentUtils-method-wtfIfLockHeld' class='name expandable'>wtfIfLockHeld</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Calls Slog.wtf if a given lock is held. ...</div><div class='long'><p>Calls Slog.wtf if a given lock is held.</p>\n</div></div></div><div id='method-wtfIfLockNotHeld' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.util.ConcurrentUtils'>com.android.internal.util.ConcurrentUtils</span><br/><a href='source/ConcurrentUtils.html#com-android-internal-util-ConcurrentUtils-method-wtfIfLockNotHeld' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.util.ConcurrentUtils-method-wtfIfLockNotHeld' class='name expandable'>wtfIfLockNotHeld</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Calls Slog.wtf if a given lock is not held. ...</div><div class='long'><p>Calls Slog.wtf if a given lock is not held.</p>\n</div></div></div></div></div></div></div>","meta":{}});