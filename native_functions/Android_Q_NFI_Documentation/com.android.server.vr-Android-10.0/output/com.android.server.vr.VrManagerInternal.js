Ext.data.JsonP.com_android_server_vr_VrManagerInternal({"tagname":"class","name":"com.android.server.vr.VrManagerInternal","autodetected":{},"files":[{"filename":"VrManagerInternal.js","href":"VrManagerInternal.html#com-android-server-vr-VrManagerInternal"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"NO_ERROR","tagname":"property","owner":"com.android.server.vr.VrManagerInternal","id":"property-NO_ERROR","meta":{}},{"name":"addPersistentVrModeStateListener","tagname":"method","owner":"com.android.server.vr.VrManagerInternal","id":"method-addPersistentVrModeStateListener","meta":{}},{"name":"getVr2dDisplayId","tagname":"method","owner":"com.android.server.vr.VrManagerInternal","id":"method-getVr2dDisplayId","meta":{}},{"name":"hasVrPackage","tagname":"method","owner":"com.android.server.vr.VrManagerInternal","id":"method-hasVrPackage","meta":{}},{"name":"isCurrentVrListener","tagname":"method","owner":"com.android.server.vr.VrManagerInternal","id":"method-isCurrentVrListener","meta":{}},{"name":"onScreenStateChanged","tagname":"method","owner":"com.android.server.vr.VrManagerInternal","id":"method-onScreenStateChanged","meta":{}},{"name":"setPersistentVrModeEnabled","tagname":"method","owner":"com.android.server.vr.VrManagerInternal","id":"method-setPersistentVrModeEnabled","meta":{}},{"name":"setVr2dDisplayProperties","tagname":"method","owner":"com.android.server.vr.VrManagerInternal","id":"method-setVr2dDisplayProperties","meta":{}},{"name":"setVrMode","tagname":"method","owner":"com.android.server.vr.VrManagerInternal","id":"method-setVrMode","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.server.vr.VrManagerInternal","short_doc":"Service for accessing the VR mode manager. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.server.vr.VrManagerInternal</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal' target='_blank'>VrManagerInternal.js</a></div></pre><div class='doc-contents'><p>Service for accessing the VR mode manager.</p>\n\n<p> Only for use within system server.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-NO_ERROR' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-property-NO_ERROR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-property-NO_ERROR' class='name expandable'>NO_ERROR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The error code returned on success. ...</div><div class='long'><p>The error code returned on success.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addPersistentVrModeStateListener' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-method-addPersistentVrModeStateListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-method-addPersistentVrModeStateListener' class='name expandable'>addPersistentVrModeStateListener</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds listener that reports state changes to persistent VR mode. ...</div><div class='long'><p>Adds listener that reports state changes to persistent VR mode.</p>\n</div></div></div><div id='method-getVr2dDisplayId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-method-getVr2dDisplayId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-method-getVr2dDisplayId' class='name expandable'>getVr2dDisplayId</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return android.view.Display.INVALID_DISPLAY if there exists no virtual display\n currently or the display id of the cu...</div><div class='long'><p>Return android.view.Display.INVALID_DISPLAY if there exists no virtual display\n currently or the display id of the current virtual display.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>android.view.Display.INVALID_DISPLAY if there is no virtual display\n currently, else return the display id of the virtual display</p>\n</div></li></ul></div></div></div><div id='method-hasVrPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-method-hasVrPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-method-hasVrPackage' class='name expandable'>hasVrPackage</a>( <span class='pre'>packageName</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return NO_ERROR if the given package is installed on the device and enabled as a\n VrListenerService for the given cur...</div><div class='long'><p>Return NO_ERROR if the given package is installed on the device and enabled as a\n VrListenerService for the given current user, or a negative error code indicating a failure.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>packageName</span> : Object {ComponentName}<div class='sub-desc'><p>the name of the package to check, or null to select the default package.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>NO_ERROR if the given package is installed and is enabled, or a negative error code\n       given in android.service.vr.VrModeException on failure.</p>\n</div></li></ul></div></div></div><div id='method-isCurrentVrListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-method-isCurrentVrListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-method-isCurrentVrListener' class='name expandable'>isCurrentVrListener</a>( <span class='pre'>packageName, userId</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return {@code true} if the given package is the currently bound VrListenerService for the\n given user. ...</div><div class='long'><p>Return {@code true} if the given package is the currently bound VrListenerService for the\n given user.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>packageName</span> : String<div class='sub-desc'><p>The package name to check.</p>\n</div></li><li><span class='pre'>userId</span> : Number<div class='sub-desc'><p>the user ID to check the package name for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the given package is the currently bound VrListenerService.</p>\n</div></li></ul></div></div></div><div id='method-onScreenStateChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-method-onScreenStateChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-method-onScreenStateChanged' class='name expandable'>onScreenStateChanged</a>( <span class='pre'>isScreenOn</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set whether the display used for VR output is on. ...</div><div class='long'><p>Set whether the display used for VR output is on.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>isScreenOn</span> : Boolean<div class='sub-desc'><p>is {@code true} if the display is on and can receive commands,\n      or {@code false} otherwise.</p>\n</div></li></ul></div></div></div><div id='method-setPersistentVrModeEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-method-setPersistentVrModeEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-method-setPersistentVrModeEnabled' class='name expandable'>setPersistentVrModeEnabled</a>( <span class='pre'>enabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the persistent VR mode state of a device. ...</div><div class='long'><p>Sets the persistent VR mode state of a device. When a device is in persistent VR mode it will\n remain in VR mode even if the foreground does not specify Vr mode being enabled. Mainly used\n by VR viewers to indicate that a device is placed in a VR viewer.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>true if the device should be placed in persistent VR mode.</p>\n</div></li></ul></div></div></div><div id='method-setVr2dDisplayProperties' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-method-setVr2dDisplayProperties' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-method-setVr2dDisplayProperties' class='name expandable'>setVr2dDisplayProperties</a>( <span class='pre'>vr2dDisplayProp</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the resolution and DPI of the vr2d virtual display used to display\n 2D applications in VR mode. ...</div><div class='long'><p>Sets the resolution and DPI of the vr2d virtual display used to display\n 2D applications in VR mode.</p>\n\n<p> <p>Requires android.Manifest.permission.ACCESS_VR_MANAGER permission.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>vr2dDisplayProp</span> : Object {Vr2dDisplayProperties}<div class='sub-desc'><p>Properties of the virtual display for 2D applications\n in VR mode.</p>\n</div></li></ul></div></div></div><div id='method-setVrMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.vr.VrManagerInternal'>com.android.server.vr.VrManagerInternal</span><br/><a href='source/VrManagerInternal.html#com-android-server-vr-VrManagerInternal-method-setVrMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.vr.VrManagerInternal-method-setVrMode' class='name expandable'>setVrMode</a>( <span class='pre'>enabled, packageName, userId, processId, calling</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the current VR mode state. ...</div><div class='long'><p>Set the current VR mode state.\n <p/>\n This may delay the mode change slightly during application transitions to avoid frequently\n tearing down VrListenerServices unless necessary.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p>{@code true} to enable VR mode.</p>\n</div></li><li><span class='pre'>packageName</span> : Object {ComponentName}<div class='sub-desc'><p>The package name of the requested VrListenerService to bind.</p>\n</div></li><li><span class='pre'>userId</span> : Number<div class='sub-desc'><p>the user requesting the VrListenerService component.</p>\n</div></li><li><span class='pre'>processId</span> : Number<div class='sub-desc'><p>the process the component is running in.</p>\n</div></li><li><span class='pre'>calling</span> : Object {ComponentName}<div class='sub-desc'><p>the component currently using VR mode, or null to leave unchanged.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});