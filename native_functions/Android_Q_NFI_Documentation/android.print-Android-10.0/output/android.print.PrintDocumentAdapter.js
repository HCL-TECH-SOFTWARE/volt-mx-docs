Ext.data.JsonP.android_print_PrintDocumentAdapter({"tagname":"class","name":"android.print.PrintDocumentAdapter","autodetected":{},"files":[{"filename":"PrintDocumentAdapter.js","href":"PrintDocumentAdapter.html#android-print-PrintDocumentAdapter"}],"extends":"java.lang.Object","members":[{"name":"EXTRA_PRINT_PREVIEW","tagname":"property","owner":"android.print.PrintDocumentAdapter","id":"property-EXTRA_PRINT_PREVIEW","meta":{}},{"name":"onFinish","tagname":"method","owner":"android.print.PrintDocumentAdapter","id":"method-onFinish","meta":{}},{"name":"onLayout","tagname":"method","owner":"android.print.PrintDocumentAdapter","id":"method-onLayout","meta":{}},{"name":"onStart","tagname":"method","owner":"android.print.PrintDocumentAdapter","id":"method-onStart","meta":{}},{"name":"onWrite","tagname":"method","owner":"android.print.PrintDocumentAdapter","id":"method-onWrite","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.print.PrintDocumentAdapter","short_doc":"Base class that provides the content of a document to be printed. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["android.print.PrintFileDocumentAdapter"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.print.PrintDocumentAdapter</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/android.print.PrintFileDocumentAdapter' rel='android.print.PrintFileDocumentAdapter' class='docClass'>android.print.PrintFileDocumentAdapter</a></div><h4>Files</h4><div class='dependency'><a href='source/PrintDocumentAdapter.html#android-print-PrintDocumentAdapter' target='_blank'>PrintDocumentAdapter.js</a></div></pre><div class='doc-contents'><p>Base class that provides the content of a document to be printed.</p>\n\n<p> <h3>Lifecycle</h3>\n <p>\n <ul>\n <li>\n Initially, you will receive a call to <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onStart\" rel=\"android.print.PrintDocumentAdapter-method-onStart\" class=\"docClass\">onStart</a>(). This callback\n can be used to allocate resources.\n </li>\n <li>\n Next, you will get one or more calls to android.print.PrintAttributes, CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, Bundle) to\n inform you that the print attributes (page size, density, etc) changed\n giving you an opportunity to layout the content to match the new constraints.\n </li>\n <li>\n After every call to android.print.PrintAttributes,\n CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, Bundle), you <strong>may</strong> get\n a call to ParcelFileDescriptor, CancellationSignal,\n android.print.PrintDocumentAdapter.WriteResultCallback) asking you to write a PDF file with the content for\n specific pages.\n </li>\n <li>\n Finally, you will receive a call to <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onFinish\" rel=\"android.print.PrintDocumentAdapter-method-onFinish\" class=\"docClass\">onFinish</a>(). You can use this\n callback to release resources allocated in <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onStart\" rel=\"android.print.PrintDocumentAdapter-method-onStart\" class=\"docClass\">onStart</a>().\n </li>\n </ul>\n <p>\n The <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onStart\" rel=\"android.print.PrintDocumentAdapter-method-onStart\" class=\"docClass\">onStart</a>() callback is always the first call you will receive and\n is useful for doing one time setup or resource allocation before printing. You\n will not receive a subsequent call here.\n </p>\n <p>\n The android.print.PrintAttributes, CancellationSignal,\n android.print.PrintDocumentAdapter.LayoutResultCallback, Bundle) callback requires that you layout the content\n based on the current <a href=\"#!/api/android.print.PrintAttributes\" rel=\"android.print.PrintAttributes\" class=\"docClass\">android.print.PrintAttributes</a>. The execution of this method is\n not considered completed until you invoke one of the methods on the passed in\n callback instance. Hence, you will not receive a subsequent call to any other\n method of this class until the execution of this method is complete by invoking\n one of the callback methods.\n </p>\n <p>\n The ParcelFileDescriptor, CancellationSignal,\n android.print.PrintDocumentAdapter.WriteResultCallback) requires that you render and write the content of some\n pages to the provided destination. The execution of this method is not\n considered complete until you invoke one of the methods on the passed in\n callback instance. Hence, you will not receive a subsequent call to any other\n method of this class until the execution of this method is complete by invoking\n one of the callback methods. You will never receive a sequence of one or more\n calls to this method without a previous call to android.print.PrintAttributes, CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, Bundle).\n </p>\n <p>\n The <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onFinish\" rel=\"android.print.PrintDocumentAdapter-method-onFinish\" class=\"docClass\">onFinish</a>() callback is always the last call you will receive and\n is useful for doing one time cleanup or resource deallocation after printing.\n You will not receive a subsequent call here.\n </p>\n </p>\n <h3>Implementation</h3>\n <p>\n The APIs defined in this class are designed to enable doing part or all\n of the work on an arbitrary thread. For example, if the printed content\n does not depend on the UI state, i.e. on what is shown on the screen, then\n you can offload the entire work on a dedicated thread, thus making your\n application interactive while the print work is being performed. Note that\n while your activity is covered by the system print UI and a user cannot\n interact with it, doing the printing work on the main application thread\n may affect the performance of your other application components as they\n are also executed on that thread.\n </p>\n <p>\n You can also do work on different threads, for example if you print UI\n content, you can handle <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onStart\" rel=\"android.print.PrintDocumentAdapter-method-onStart\" class=\"docClass\">onStart</a>() and android.print.PrintAttributes, CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, Bundle) on\n the UI thread (assuming onStart initializes resources needed for layout).\n This will ensure that the UI does not change while you are laying out the\n printed content. Then you can handle ParcelFileDescriptor,\n CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback) and <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onFinish\" rel=\"android.print.PrintDocumentAdapter-method-onFinish\" class=\"docClass\">onFinish</a>() on another\n thread. This will ensure that the main thread is busy for a minimal amount of\n time. Also this assumes that you will generate the printed content in\n android.print.PrintAttributes, CancellationSignal,\n android.print.PrintDocumentAdapter.LayoutResultCallback, Bundle) which is not mandatory. If you use multiple\n threads, you are responsible for proper synchronization.\n </p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-EXTRA_PRINT_PREVIEW' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.print.PrintDocumentAdapter'>android.print.PrintDocumentAdapter</span><br/><a href='source/PrintDocumentAdapter.html#android-print-PrintDocumentAdapter-property-EXTRA_PRINT_PREVIEW' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.print.PrintDocumentAdapter-property-EXTRA_PRINT_PREVIEW' class='name expandable'>EXTRA_PRINT_PREVIEW</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Extra: mapped to a boolean value that is true if\nthe current layout is for a print preview, false otherwise. ...</div><div class='long'><p>Extra: mapped to a boolean value that is <code>true</code> if\nthe current layout is for a print preview, <code>false</code> otherwise.\nThis extra is provided in the Bundle argument of the android.print.PrintAttributes, CancellationSignal,\nandroid.print.PrintDocumentAdapter.LayoutResultCallback, Bundle) callback.</p>\n\n<p>@see <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onLayout\" rel=\"android.print.PrintDocumentAdapter-method-onLayout\" class=\"docClass\">onLayout</a>(PrintAttributes, PrintAttributes, CancellationSignal,\nLayoutResultCallback, Bundle)</p>\n<p>Defaults to: <code>&quot;EXTRA_PRINT_PREVIEW&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onFinish' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.print.PrintDocumentAdapter'>android.print.PrintDocumentAdapter</span><br/><a href='source/PrintDocumentAdapter.html#android-print-PrintDocumentAdapter-method-onFinish' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.print.PrintDocumentAdapter-method-onFinish' class='name expandable'>onFinish</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when printing finishes. ...</div><div class='long'><p>Called when printing finishes. You can use this callback to release\n resources acquired in <a href=\"#!/api/android.print.PrintDocumentAdapter-method-onStart\" rel=\"android.print.PrintDocumentAdapter-method-onStart\" class=\"docClass\">onStart</a>(). This method is invoked on\n the main thread.</p>\n</div></div></div><div id='method-onLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.print.PrintDocumentAdapter'>android.print.PrintDocumentAdapter</span><br/><a href='source/PrintDocumentAdapter.html#android-print-PrintDocumentAdapter-method-onLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.print.PrintDocumentAdapter-method-onLayout' class='name expandable'>onLayout</a>( <span class='pre'>oldAttributes, newAttributes, cancellationSignal, callback, extras</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the print attributes (page size, density, etc) changed\n giving you a chance to layout the content such th...</div><div class='long'><p>Called when the print attributes (page size, density, etc) changed\n giving you a chance to layout the content such that it matches the\n new constraints. This method is invoked on the main thread.\n <p>\n After you are done laying out, you <strong>must</strong> invoke: boolean) with\n the last argument <code>true</code> or <code>false</code> depending on\n whether the layout changed the content or not, respectively; or android.print.PrintDocumentAdapter.LayoutResultCallback.onLayoutFailed(CharSequence), if an error occurred;\n or android.print.PrintDocumentAdapter.LayoutResultCallback.onLayoutCancelled() if layout was\n cancelled in a response to a cancellation request via the passed in\n CancellationSignal. Note that you <strong>must</strong> call one of\n the methods of the given callback for this method to be considered complete\n which is you will not receive any calls to this adapter until the current\n layout operation is complete by invoking a method on the callback instance.\n The callback methods can be invoked from an arbitrary thread.\n </p>\n <p>\n One of the arguments passed to this method is a CancellationSignal\n which is used to propagate requests from the system to your application for\n canceling the current layout operation. For example, a cancellation may be\n requested if the user changes a print option that may affect layout while\n you are performing a layout operation. In such a case the system will make\n an attempt to cancel the current layout as another one will have to be performed.\n Typically, you should register a cancellation callback in the cancellation\n signal. The cancellation callback <strong>will not</strong> be made on the\n main thread and can be registered as follows:\n </p></p>\n\n<pre> cancellationSignal.setOnCancelListener(new OnCancelListener() {\n     &#064;Override\n     public void onCancel() {\n         // Cancel layout\n     }\n });\n </pre>\n\n\n<p> <p>\n <strong>Note:</strong> If the content is large and a layout will be\n performed, it is a good practice to schedule the work on a dedicated\n thread and register an observer in the provided CancellationSignal upon invocation of which you should stop the\n layout.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>oldAttributes</span> : Object {PrintAttributes}<div class='sub-desc'><p>The old print attributes.</p>\n</div></li><li><span class='pre'>newAttributes</span> : Object {PrintAttributes}<div class='sub-desc'><p>The new print attributes.</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>Signal for observing cancel layout requests.</p>\n</div></li><li><span class='pre'>callback</span> : Object {PrintDocumentAdapter.LayoutResultCallback}<div class='sub-desc'><p>Callback to inform the system for the layout result.</p>\n</div></li><li><span class='pre'>extras</span> : Object {Bundle}<div class='sub-desc'><p>Additional information about how to layout the content.\n@see LayoutResultCallback\n@see CancellationSignal\n@see <a href=\"#!/api/android.print.PrintDocumentAdapter-property-EXTRA_PRINT_PREVIEW\" rel=\"android.print.PrintDocumentAdapter-property-EXTRA_PRINT_PREVIEW\" class=\"docClass\">EXTRA_PRINT_PREVIEW</a></p>\n</div></li></ul></div></div></div><div id='method-onStart' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.print.PrintDocumentAdapter'>android.print.PrintDocumentAdapter</span><br/><a href='source/PrintDocumentAdapter.html#android-print-PrintDocumentAdapter-method-onStart' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.print.PrintDocumentAdapter-method-onStart' class='name expandable'>onStart</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when printing starts. ...</div><div class='long'><p>Called when printing starts. You can use this callback to allocate\n resources. This method is invoked on the main thread.</p>\n</div></div></div><div id='method-onWrite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.print.PrintDocumentAdapter'>android.print.PrintDocumentAdapter</span><br/><a href='source/PrintDocumentAdapter.html#android-print-PrintDocumentAdapter-method-onWrite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.print.PrintDocumentAdapter-method-onWrite' class='name expandable'>onWrite</a>( <span class='pre'>pages, destination, cancellationSignal, callback</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when specific pages of the content should be written in the\n form of a PDF file to the given file descriptor. ...</div><div class='long'><p>Called when specific pages of the content should be written in the\n form of a PDF file to the given file descriptor. This method is invoked\n on the main thread.</p>\n\n<p>\n After you are done writing, you should close the file descriptor and\n invoke android.print.PrintDocumentAdapter.WriteResultCallback.onWriteFinished(PageRange[]), if writing\n completed successfully; or CharSequence), if an error occurred; or android.print.PrintDocumentAdapter.WriteResultCallback.onWriteCancelled(),\n if writing was cancelled in a response to a cancellation request via the passed\n in CancellationSignal. Note that you <strong>must</strong> call one of\n the methods of the given callback for this method to be considered complete which\n is you will not receive any calls to this adapter until the current write\n operation is complete by invoking a method on the callback instance. The callback\n methods can be invoked from an arbitrary thread.\n </p>\n\n\n<p> <p>\n One of the arguments passed to this method is a CancellationSignal\n which is used to propagate requests from the system to your application for\n canceling the current write operation. For example, a cancellation may be\n requested if the user changes a print option that may affect layout while\n you are performing a write operation. In such a case the system will make\n an attempt to cancel the current write as a layout will have to be performed\n which then may be followed by a write. Typically, you should register a\n cancellation callback in the cancellation signal. The cancellation callback\n <strong>will not</strong> be made on the main thread and can be registered\n as follows:\n </p></p>\n\n<pre> cancellationSignal.setOnCancelListener(new OnCancelListener() {\n     &#064;Override\n     public void onCancel() {\n         // Cancel write\n     }\n });\n </pre>\n\n\n<p> <p>\n <strong>Note:</strong> If the printed content is large, it is a good\n practice to schedule writing it on a dedicated thread and register an\n observer in the provided CancellationSignal upon invocation of\n which you should stop writing.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pages</span> : Object {android.print.PageRange[]}<div class='sub-desc'><p>The pages whose content to print - non-overlapping in ascending order.</p>\n</div></li><li><span class='pre'>destination</span> : Object {ParcelFileDescriptor}<div class='sub-desc'><p>The destination file descriptor to which to write.</p>\n</div></li><li><span class='pre'>cancellationSignal</span> : Object {CancellationSignal}<div class='sub-desc'><p>Signal for observing cancel writing requests.</p>\n</div></li><li><span class='pre'>callback</span> : Object {PrintDocumentAdapter.WriteResultCallback}<div class='sub-desc'><p>Callback to inform the system for the write result.\n@see WriteResultCallback\n@see CancellationSignal</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});