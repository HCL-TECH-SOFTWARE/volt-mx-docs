Ext.data.JsonP.android_print_PrintManager({"tagname":"class","name":"android.print.PrintManager","autodetected":{},"files":[{"filename":"PrintManager.js","href":"PrintManager.html#android-print-PrintManager"}],"extends":"java.lang.Object","members":[{"name":"getPrintJobs","tagname":"method","owner":"android.print.PrintManager","id":"method-getPrintJobs","meta":{}},{"name":"print","tagname":"method","owner":"android.print.PrintManager","id":"method-print","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.print.PrintManager","short_doc":"System level service for accessing the printing capabilities of the platform. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.print.PrintManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/PrintManager.html#android-print-PrintManager' target='_blank'>PrintManager.js</a></div></pre><div class='doc-contents'><p>System level service for accessing the printing capabilities of the platform.</p>\n\n<p> <h3>Print mechanics</h3>\n <p>\n The key idea behind printing on the platform is that the content to be printed\n should be laid out for the currently selected print options resulting in an\n optimized output and higher user satisfaction. To achieve this goal the platform\n declares a contract that the printing application has to follow which is defined\n by the <a href=\"#!/api/android.print.PrintDocumentAdapter\" rel=\"android.print.PrintDocumentAdapter\" class=\"docClass\">android.print.PrintDocumentAdapter</a> class. At a higher level the contract is that\n when the user selects some options from the print UI that may affect the way\n content is laid out, for example page size, the application receives a callback\n allowing it to layout the content to better fit these new constraints. After a\n layout pass the system may ask the application to render one or more pages one\n or more times. For example, an application may produce a single column list for\n smaller page sizes and a multi-column table for larger page sizes.\n </p>\n <h3>Print jobs</h3>\n <p>\n Print jobs are started by calling the PrintDocumentAdapter,\n android.print.PrintAttributes) from an activity which results in bringing up the system print\n UI. Once the print UI is up, when the user changes a selected print option that\n affects the way content is laid out the system starts to interact with the\n application following the mechanics described the section above.\n </p>\n <p>\n Print jobs can be in <a href=\"#!/api/android.print.PrintJobInfo-property-STATE_CREATED\" rel=\"android.print.PrintJobInfo-property-STATE_CREATED\" class=\"docClass\">created</a>, <a href=\"#!/api/android.print.PrintJobInfo-property-STATE_QUEUED\" rel=\"android.print.PrintJobInfo-property-STATE_QUEUED\" class=\"docClass\">queued</a>, <a href=\"#!/api/android.print.PrintJobInfo-property-STATE_STARTED\" rel=\"android.print.PrintJobInfo-property-STATE_STARTED\" class=\"docClass\">started</a>,\n <a href=\"#!/api/android.print.PrintJobInfo-property-STATE_BLOCKED\" rel=\"android.print.PrintJobInfo-property-STATE_BLOCKED\" class=\"docClass\">blocked</a>, <a href=\"#!/api/android.print.PrintJobInfo-property-STATE_COMPLETED\" rel=\"android.print.PrintJobInfo-property-STATE_COMPLETED\" class=\"docClass\">completed</a>, <a href=\"#!/api/android.print.PrintJobInfo-property-STATE_FAILED\" rel=\"android.print.PrintJobInfo-property-STATE_FAILED\" class=\"docClass\">failed</a>, and <a href=\"#!/api/android.print.PrintJobInfo-property-STATE_CANCELED\" rel=\"android.print.PrintJobInfo-property-STATE_CANCELED\" class=\"docClass\">canceled</a> state. Print jobs are stored in dedicated\n system spooler until they are handled which is they are cancelled or completed.\n Active print jobs, ones that are not cancelled or completed, are considered failed\n if the device reboots as the new boot may be after a very long time. The user may\n choose to restart such print jobs. Once a print job is queued all relevant content\n is stored in the system spooler and its lifecycle becomes detached from this of\n the application that created it.\n </p>\n <p>\n An applications can query the print spooler for current print jobs it created\n but not print jobs created by other applications.\n </p></p>\n\n<p> @see PrintJob\n @see PrintJobInfo</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getPrintJobs' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.print.PrintManager'>android.print.PrintManager</span><br/><a href='source/PrintManager.html#android-print-PrintManager-method-getPrintJobs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.print.PrintManager-method-getPrintJobs' class='name expandable'>getPrintJobs</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the print jobs for this application. ...</div><div class='long'><p>Gets the print jobs for this application.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>The print job list.\n@see PrintJob</p>\n</div></li></ul></div></div></div><div id='method-print' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.print.PrintManager'>android.print.PrintManager</span><br/><a href='source/PrintManager.html#android-print-PrintManager-method-print' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.print.PrintManager-method-print' class='name expandable'>print</a>( <span class='pre'>printJobName, documentAdapter, attributes</span> ) : Object {android.print.PrintJob}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a print job for printing a android.print.PrintDocumentAdapter with\n default print attributes. ...</div><div class='long'><p>Creates a print job for printing a <a href=\"#!/api/android.print.PrintDocumentAdapter\" rel=\"android.print.PrintDocumentAdapter\" class=\"docClass\">android.print.PrintDocumentAdapter</a> with\n default print attributes.\n <p>\n Calling this method brings the print UI allowing the user to customize\n the print job and returns a <a href=\"#!/api/android.print.PrintJob\" rel=\"android.print.PrintJob\" class=\"docClass\">android.print.PrintJob</a> object without waiting for the\n user to customize or confirm the print job. The returned print job instance\n is in a <a href=\"#!/api/android.print.PrintJobInfo-property-STATE_CREATED\" rel=\"android.print.PrintJobInfo-property-STATE_CREATED\" class=\"docClass\">created</a> state.\n <p>\n This method can be called only from an Activity. The rationale is that\n printing from a service will create an inconsistent user experience as the print\n UI would appear without any context.\n </p>\n <p>\n Also the passed in <a href=\"#!/api/android.print.PrintDocumentAdapter\" rel=\"android.print.PrintDocumentAdapter\" class=\"docClass\">android.print.PrintDocumentAdapter</a> will be considered invalid if\n your activity is finished. The rationale is that once the activity that\n initiated printing is finished, the provided adapter may be in an inconsistent\n state as it may depend on the UI presented by the activity.\n </p>\n <p>\n The default print attributes are a hint to the system how the data is to\n be printed. For example, a photo editor may look at the photo aspect ratio\n to determine the default orientation and provide a hint whether the printing\n should be in portrait or landscape. The system will do a best effort to\n selected the hinted options in the print dialog, given the current printer\n supports them.\n </p>\n <p>\n <strong>Note:</strong> Calling this method will bring the print dialog and\n the system will connect to the provided <a href=\"#!/api/android.print.PrintDocumentAdapter\" rel=\"android.print.PrintDocumentAdapter\" class=\"docClass\">android.print.PrintDocumentAdapter</a>. If a\n configuration change occurs that you application does not handle, for example\n a rotation change, the system will drop the connection to the adapter as the\n activity has to be recreated and the old adapter may be invalid in this context,\n hence a new adapter instance is required. As a consequence, if your activity\n does not handle configuration changes (default behavior), you have to save the\n state that you were printing and call this method again when your activity\n is recreated.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>printJobName</span> : String<div class='sub-desc'><p>A name for the new print job which is shown to the user.</p>\n</div></li><li><span class='pre'>documentAdapter</span> : Object {PrintDocumentAdapter}<div class='sub-desc'><p>An adapter that emits the document to print.</p>\n</div></li><li><span class='pre'>attributes</span> : Object {PrintAttributes}<div class='sub-desc'><p>The default print job attributes or <code>null</code>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.print.PrintJob}</span><div class='sub-desc'><p>The created print job on success or null on failure.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException If not called from an Activity.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the print job name is empty or the\n document adapter is null.\n@see PrintJob</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});