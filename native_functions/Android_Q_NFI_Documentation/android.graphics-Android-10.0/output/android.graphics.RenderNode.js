Ext.data.JsonP.android_graphics_RenderNode({"tagname":"class","name":"android.graphics.RenderNode","autodetected":{},"files":[{"filename":"RenderNode.js","href":"RenderNode.html#android-graphics-RenderNode"}],"extends":"java.lang.Object","members":[{"name":"beginRecording","tagname":"method","owner":"android.graphics.RenderNode","id":"method-beginRecording","meta":{}},{"name":"computeApproximateMemoryUsage","tagname":"method","owner":"android.graphics.RenderNode","id":"method-computeApproximateMemoryUsage","meta":{}},{"name":"discardDisplayList","tagname":"method","owner":"android.graphics.RenderNode","id":"method-discardDisplayList","meta":{}},{"name":"endRecording","tagname":"method","owner":"android.graphics.RenderNode","id":"method-endRecording","meta":{}},{"name":"getAlpha","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getAlpha","meta":{}},{"name":"getAmbientShadowColor","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getAmbientShadowColor","meta":{}},{"name":"getBottom","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getBottom","meta":{}},{"name":"getCameraDistance","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getCameraDistance","meta":{}},{"name":"getClipToBounds","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getClipToBounds","meta":{}},{"name":"getClipToOutline","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getClipToOutline","meta":{}},{"name":"getElevation","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getElevation","meta":{}},{"name":"getHeight","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getHeight","meta":{}},{"name":"getInverseMatrix","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getInverseMatrix","meta":{}},{"name":"getLeft","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getLeft","meta":{}},{"name":"getMatrix","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getMatrix","meta":{}},{"name":"getPivotX","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getPivotX","meta":{}},{"name":"getPivotY","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getPivotY","meta":{}},{"name":"getRight","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getRight","meta":{}},{"name":"getRotationX","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getRotationX","meta":{}},{"name":"getRotationY","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getRotationY","meta":{}},{"name":"getRotationZ","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getRotationZ","meta":{}},{"name":"getScaleX","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getScaleX","meta":{}},{"name":"getScaleY","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getScaleY","meta":{}},{"name":"getSpotShadowColor","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getSpotShadowColor","meta":{}},{"name":"getTop","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getTop","meta":{}},{"name":"getTranslationX","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getTranslationX","meta":{}},{"name":"getTranslationY","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getTranslationY","meta":{}},{"name":"getTranslationZ","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getTranslationZ","meta":{}},{"name":"getUniqueId","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getUniqueId","meta":{}},{"name":"getUseCompositingLayer","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getUseCompositingLayer","meta":{}},{"name":"getWidth","tagname":"method","owner":"android.graphics.RenderNode","id":"method-getWidth","meta":{}},{"name":"hasDisplayList","tagname":"method","owner":"android.graphics.RenderNode","id":"method-hasDisplayList","meta":{}},{"name":"hasIdentityMatrix","tagname":"method","owner":"android.graphics.RenderNode","id":"method-hasIdentityMatrix","meta":{}},{"name":"hasOverlappingRendering","tagname":"method","owner":"android.graphics.RenderNode","id":"method-hasOverlappingRendering","meta":{}},{"name":"hasShadow","tagname":"method","owner":"android.graphics.RenderNode","id":"method-hasShadow","meta":{}},{"name":"isForceDarkAllowed","tagname":"method","owner":"android.graphics.RenderNode","id":"method-isForceDarkAllowed","meta":{}},{"name":"isPivotExplicitlySet","tagname":"method","owner":"android.graphics.RenderNode","id":"method-isPivotExplicitlySet","meta":{}},{"name":"offsetLeftAndRight","tagname":"method","owner":"android.graphics.RenderNode","id":"method-offsetLeftAndRight","meta":{}},{"name":"offsetTopAndBottom","tagname":"method","owner":"android.graphics.RenderNode","id":"method-offsetTopAndBottom","meta":{}},{"name":"resetPivot","tagname":"method","owner":"android.graphics.RenderNode","id":"method-resetPivot","meta":{}},{"name":"setAlpha","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setAlpha","meta":{}},{"name":"setAmbientShadowColor","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setAmbientShadowColor","meta":{}},{"name":"setCameraDistance","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setCameraDistance","meta":{}},{"name":"setClipRect","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setClipRect","meta":{}},{"name":"setClipToBounds","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setClipToBounds","meta":{}},{"name":"setClipToOutline","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setClipToOutline","meta":{}},{"name":"setElevation","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setElevation","meta":{}},{"name":"setForceDarkAllowed","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setForceDarkAllowed","meta":{}},{"name":"setHasOverlappingRendering","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setHasOverlappingRendering","meta":{}},{"name":"setOutline","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setOutline","meta":{}},{"name":"setPivotX","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setPivotX","meta":{}},{"name":"setPivotY","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setPivotY","meta":{}},{"name":"setPosition","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setPosition","meta":{}},{"name":"setProjectBackwards","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setProjectBackwards","meta":{}},{"name":"setProjectionReceiver","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setProjectionReceiver","meta":{}},{"name":"setRotationX","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setRotationX","meta":{}},{"name":"setRotationY","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setRotationY","meta":{}},{"name":"setRotationZ","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setRotationZ","meta":{}},{"name":"setScaleX","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setScaleX","meta":{}},{"name":"setScaleY","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setScaleY","meta":{}},{"name":"setSpotShadowColor","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setSpotShadowColor","meta":{}},{"name":"setTranslationX","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setTranslationX","meta":{}},{"name":"setTranslationY","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setTranslationY","meta":{}},{"name":"setTranslationZ","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setTranslationZ","meta":{}},{"name":"setUseCompositingLayer","tagname":"method","owner":"android.graphics.RenderNode","id":"method-setUseCompositingLayer","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.RenderNode","short_doc":"RenderNode is used to build hardware accelerated rendering hierarchies. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.RenderNode</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/RenderNode.html#android-graphics-RenderNode' target='_blank'>RenderNode.js</a></div></pre><div class='doc-contents'><p>RenderNode is used to build hardware accelerated rendering hierarchies. Each RenderNode\n contains both a display list as well as a set of properties that affect the rendering of the\n display list. RenderNodes are used internally for all Views by default and are not typically\n used directly.</p>\n\n\n<p> <p>RenderNodes are used to divide up the rendering content of a complex scene into smaller\n pieces that can then be updated individually more cheaply. Updating part of the scene only needs\n to update the display list or properties of a small number of RenderNode instead of redrawing\n everything from scratch. A RenderNode only needs its display list re-recorded when its content\n alone should be changed. RenderNodes can also be transformed without re-recording the display\n list through the transform properties.</p></p>\n\n<p> <p>A text editor might for instance store each paragraph into its own RenderNode.\n Thus when the user inserts or removes characters, only the display list of the\n affected paragraph needs to be recorded again.</p></p>\n\n<p> <h3>Hardware acceleration</h3>\n <p>RenderNodes can be drawn using a <a href=\"#!/api/android.graphics.RecordingCanvas\" rel=\"android.graphics.RecordingCanvas\" class=\"docClass\">android.graphics.RecordingCanvas</a>. They are not\n supported in software. Always make sure that the <a href=\"#!/api/android.graphics.Canvas\" rel=\"android.graphics.Canvas\" class=\"docClass\">android.graphics.Canvas</a>\n you are using to render a display list is hardware accelerated using\n android.graphics.Canvas.isHardwareAccelerated().</p></p>\n\n<p> <h3>Creating a RenderNode</h3>\n <pre class=\"prettyprint\">\n     RenderNode renderNode = new RenderNode(\"myRenderNode\");\n     renderNode.setLeftTopRightBottom(0, 0, 50, 50); // Set the size to 50x50\n     RecordingCanvas canvas = renderNode.beginRecording();\n     try {\n         // Draw with the canvas\n         canvas.drawRect(...);\n     } finally {\n         renderNode.endRecording();\n     }</pre></p>\n\n<p> <h3>Drawing a RenderNode in a View</h3>\n <pre class=\"prettyprint\">\n     protected void onDraw(Canvas canvas) {\n         if (canvas.isHardwareAccelerated()) {\n             // Check that the RenderNode has a display list, re-recording it if it does not.\n             if (!myRenderNode.hasDisplayList()) {\n                 updateDisplayList(myRenderNode);\n             }\n             // Draw the RenderNode into this canvas.\n             canvas.drawRenderNode(myRenderNode);\n         }\n     }</pre></p>\n\n<p> <h3>Releasing resources</h3>\n <p>This step is not mandatory but recommended if you want to release resources\n held by a display list as soon as possible. Most significantly any bitmaps it may contain.</p>\n <pre class=\"prettyprint\">\n     // Discards the display list content allowing for any held resources to be released.\n     // After calling this\n     renderNode.discardDisplayList();</pre></p>\n\n<p> <h3>Properties</h3>\n <p>In addition, a RenderNode offers several properties, such as\n <a href=\"#!/api/android.graphics.RenderNode-method-setScaleX\" rel=\"android.graphics.RenderNode-method-setScaleX\" class=\"docClass\">setScaleX</a>(float) or <a href=\"#!/api/android.graphics.RenderNode-method-setTranslationX\" rel=\"android.graphics.RenderNode-method-setTranslationX\" class=\"docClass\">setTranslationX</a>(float), that can be used to affect all\n the drawing commands recorded within. For instance, these properties can be used\n to move around a large number of images without re-issuing all the individual\n <code>canvas.drawBitmap()</code> calls.</p></p>\n\n<p> <pre class=\"prettyprint\">\n     private void createDisplayList() {\n         mRenderNode = new RenderNode(\"MyRenderNode\");\n         mRenderNode.setLeftTopRightBottom(0, 0, width, height);\n         RecordingCanvas canvas = mRenderNode.beginRecording();\n         try {\n             for (Bitmap b : mBitmaps) {\n                 canvas.drawBitmap(b, 0.0f, 0.0f, null);\n                 canvas.translate(0.0f, b.getHeight());\n             }\n         } finally {\n             mRenderNode.endRecording();\n         }\n     }</pre></p>\n\n<pre><code> protected void onDraw(Canvas canvas) {\n     if (canvas.isHardwareAccelerated())\n         canvas.drawRenderNode(mRenderNode);\n     }\n }\n\n private void moveContentBy(int x) {\n      // This will move all the bitmaps recorded inside the display list\n      // by x pixels to the right and redraw this view. All the commands\n      // recorded in createDisplayList() won't be re-issued, only onDraw()\n      // will be invoked and will execute very quickly\n      mRenderNode.offsetLeftAndRight(x);\n      invalidate();\n }&lt;/pre&gt;\n</code></pre>\n\n<p> <p>A few of the properties may at first appear redundant, such as <a href=\"#!/api/android.graphics.RenderNode-method-setElevation\" rel=\"android.graphics.RenderNode-method-setElevation\" class=\"docClass\">setElevation</a>(float)\n and <a href=\"#!/api/android.graphics.RenderNode-method-setTranslationZ\" rel=\"android.graphics.RenderNode-method-setTranslationZ\" class=\"docClass\">setTranslationZ</a>(float). The reason for these duplicates are to allow for a\n separation between static &amp; transient usages. For example consider a button that raises from 2dp\n to 8dp when pressed. To achieve that an application may decide to setElevation(2dip), and then\n on press to animate setTranslationZ to 6dip. Combined this achieves the final desired 8dip\n value, but the animation need only concern itself with animating the lift from press without\n needing to know the initial starting value. <a href=\"#!/api/android.graphics.RenderNode-method-setTranslationX\" rel=\"android.graphics.RenderNode-method-setTranslationX\" class=\"docClass\">setTranslationX</a>(float) and\n <a href=\"#!/api/android.graphics.RenderNode-method-setTranslationY\" rel=\"android.graphics.RenderNode-method-setTranslationY\" class=\"docClass\">setTranslationY</a>(float) are similarly provided for animation uses despite the functional\n overlap with <a href=\"#!/api/android.graphics.RenderNode-method-setPosition\" rel=\"android.graphics.RenderNode-method-setPosition\" class=\"docClass\">setPosition</a>(Rect).</p>\n\n<p> <p>The RenderNode's transform matrix is computed at render time as follows:\n <pre class=\"prettyprint\">\n     Matrix transform = new Matrix();\n     transform.setTranslate(renderNode.getTranslationX(), renderNode.getTranslationY());\n     transform.preRotate(renderNode.getRotationZ(),\n             renderNode.getPivotX(), renderNode.getPivotY());\n     transform.preScale(renderNode.getScaleX(), renderNode.getScaleY(),\n             renderNode.getPivotX(), renderNode.getPivotY());</pre>\n The current canvas transform matrix, which is translated to the RenderNode's position,\n is then multiplied by the RenderNode's transform matrix. Therefore the ordering of calling\n property setters does not affect the result. That is to say that:</p>\n\n<p> <pre class=\"prettyprint\">\n     renderNode.setTranslationX(100);\n     renderNode.setScaleX(100);</pre></p>\n\n<p> is equivalent to:</p>\n\n<p> <pre class=\"prettyprint\">\n     renderNode.setScaleX(100);\n     renderNode.setTranslationX(100);</pre></p>\n\n<p> <h3>Threading</h3>\n <p>RenderNode may be created and used on any thread but they are not thread-safe. Only\n a single thread may interact with a RenderNode at any given time. It is critical\n that the RenderNode is only used on the same thread it is drawn with. For example when using\n RenderNode with a custom View, then that RenderNode must only be used from the UI thread.</p></p>\n\n<p> <h3>When to re-render</h3>\n <p>Many of the RenderNode mutation methods, such as <a href=\"#!/api/android.graphics.RenderNode-method-setTranslationX\" rel=\"android.graphics.RenderNode-method-setTranslationX\" class=\"docClass\">setTranslationX</a>(float), return\n a boolean indicating if the value actually changed or not. This is useful in detecting\n if a new frame should be rendered or not. A typical usage would look like:\n <pre class=\"prettyprint\">\n     public void translateTo(int x, int y) {\n         boolean needsUpdate = myRenderNode.setTranslationX(x);\n         needsUpdate |= myRenderNode.setTranslationY(y);\n         if (needsUpdate) {\n             myOwningView.invalidate();\n         }\n     }</pre>\n This is marginally faster than doing a more explicit up-front check if the value changed by\n comparing the desired value against <a href=\"#!/api/android.graphics.RenderNode-method-getTranslationX\" rel=\"android.graphics.RenderNode-method-getTranslationX\" class=\"docClass\">getTranslationX</a>() as it minimizes JNI transitions.\n The actual mechanism of requesting a new frame to be rendered will depend on how this\n RenderNode is being drawn. If it's drawn to a containing View, as in the above snippet,\n then simply invalidating that View works. If instead the RenderNode is being drawn to a Canvas\n directly such as with Surface.lockHardwareCanvas() then a new frame needs to be drawn\n by calling Surface.lockHardwareCanvas(), re-drawing the root RenderNode or whatever\n top-level content is desired, and finally calling Surface.unlockCanvasAndPost(Canvas).\n </p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-beginRecording' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-beginRecording' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-beginRecording' class='name expandable'>beginRecording</a>( <span class='pre'></span> ) : Object {android.graphics.RecordingCanvas}<span class=\"signature\"></span></div><div class='description'><div class='short'>Same as int) with the width &amp; height set\n to the RenderNode's own width &amp; height. ...</div><div class='long'><p>Same as int) with the width &amp; height set\n to the RenderNode's own width &amp; height. The RenderNode's width &amp; height may be set\n with int, int, int).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.RecordingCanvas}</span><div class='sub-desc'><p>A canvas to record drawing operations.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException If a recording is already in progress. That is, the previous\n call to int) did not call endRecording().\n@see <a href=\"#!/api/android.graphics.RenderNode-method-endRecording\" rel=\"android.graphics.RenderNode-method-endRecording\" class=\"docClass\">endRecording</a>()\n@see <a href=\"#!/api/android.graphics.RenderNode-method-hasDisplayList\" rel=\"android.graphics.RenderNode-method-hasDisplayList\" class=\"docClass\">hasDisplayList</a>()</p>\n</div></li></ul></div></div></div><div id='method-computeApproximateMemoryUsage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-computeApproximateMemoryUsage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-computeApproximateMemoryUsage' class='name expandable'>computeApproximateMemoryUsage</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the approximate memory usage of the RenderNode for debug purposes. ...</div><div class='long'><p>Gets the approximate memory usage of the RenderNode for debug purposes. Does not include\n the memory usage of any child RenderNodes nor any bitmaps, only the memory usage of\n this RenderNode and any data it owns.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Approximate memory usage in bytes.</p>\n</div></li></ul></div></div></div><div id='method-discardDisplayList' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-discardDisplayList' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-discardDisplayList' class='name expandable'>discardDisplayList</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reset native resources. ...</div><div class='long'><p>Reset native resources. This is called when cleaning up the state of display lists\n during destruction of hardware resources, to ensure that we do not hold onto\n obsolete resources after related resources are gone.</p>\n</div></div></div><div id='method-endRecording' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-endRecording' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-endRecording' class='name expandable'>endRecording</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>`\n Ends the recording for this display list. ...</div><div class='long'><p>`\n Ends the recording for this display list. Calling this method marks\n the display list valid and <a href=\"#!/api/android.graphics.RenderNode-method-hasDisplayList\" rel=\"android.graphics.RenderNode-method-hasDisplayList\" class=\"docClass\">hasDisplayList</a>() will return true.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-beginRecording\" rel=\"android.graphics.RenderNode-method-beginRecording\" class=\"docClass\">beginRecording</a>(int, int)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-hasDisplayList\" rel=\"android.graphics.RenderNode-method-hasDisplayList\" class=\"docClass\">hasDisplayList</a>()</p>\n</div></div></div><div id='method-getAlpha' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getAlpha' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getAlpha' class='name expandable'>getAlpha</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the translucency level of this display list. ...</div><div class='long'><p>Returns the translucency level of this display list.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>A value between 0.0f and 1.0f\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setAlpha\" rel=\"android.graphics.RenderNode-method-setAlpha\" class=\"docClass\">setAlpha</a>(float)</p>\n</div></li></ul></div></div></div><div id='method-getAmbientShadowColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getAmbientShadowColor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getAmbientShadowColor' class='name expandable'>getAmbientShadowColor</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The shadow color set by setAmbientShadowColor(int), or black if\n nothing was set</p>\n</div></li></ul></div></div></div><div id='method-getBottom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getBottom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getBottom' class='name expandable'>getBottom</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the bottom position for the RenderNode. ...</div><div class='long'><p>Gets the bottom position for the RenderNode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the bottom position in pixels</p>\n</div></li></ul></div></div></div><div id='method-getCameraDistance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getCameraDistance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getCameraDistance' class='name expandable'>getCameraDistance</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the distance in Z of the camera for this RenderNode ...</div><div class='long'><p>Returns the distance in Z of the camera for this RenderNode</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the distance along the Z axis in pixels.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setCameraDistance\" rel=\"android.graphics.RenderNode-method-setCameraDistance\" class=\"docClass\">setCameraDistance</a>(float)</p>\n</div></li></ul></div></div></div><div id='method-getClipToBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getClipToBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getClipToBounds' class='name expandable'>getClipToBounds</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether or not the RenderNode is clipping to its bounds. ...</div><div class='long'><p>Returns whether or not the RenderNode is clipping to its bounds. See\n <a href=\"#!/api/android.graphics.RenderNode-method-setClipToBounds\" rel=\"android.graphics.RenderNode-method-setClipToBounds\" class=\"docClass\">setClipToBounds</a>(boolean) and int, int, int)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the render node clips to its bounds, false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-getClipToOutline' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getClipToOutline' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getClipToOutline' class='name expandable'>getClipToOutline</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>See setClipToOutline(boolean) ...</div><div class='long'><p>See <a href=\"#!/api/android.graphics.RenderNode-method-setClipToOutline\" rel=\"android.graphics.RenderNode-method-setClipToOutline\" class=\"docClass\">setClipToOutline</a>(boolean)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if this RenderNode clips to its outline, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-getElevation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getElevation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getElevation' class='name expandable'>getElevation</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>See setElevation(float) ...</div><div class='long'><p>See <a href=\"#!/api/android.graphics.RenderNode-method-setElevation\" rel=\"android.graphics.RenderNode-method-setElevation\" class=\"docClass\">setElevation</a>(float)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The RenderNode's current elevation</p>\n</div></li></ul></div></div></div><div id='method-getHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getHeight' class='name expandable'>getHeight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the height of the RenderNode, which is the bottom - top. ...</div><div class='long'><p>Gets the height of the RenderNode, which is the bottom - top.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the height of the RenderNode</p>\n</div></li></ul></div></div></div><div id='method-getInverseMatrix' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getInverseMatrix' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getInverseMatrix' class='name expandable'>getInverseMatrix</a>( <span class='pre'>outMatrix</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current transform inverted. ...</div><div class='long'><p>Gets the current transform inverted. This is a faster way to do the otherwise\n equivalent <a href=\"#!/api/android.graphics.RenderNode-method-getMatrix\" rel=\"android.graphics.RenderNode-method-getMatrix\" class=\"docClass\">getMatrix</a>(Matrix) followed by android.graphics.Matrix.invert(android.graphics.Matrix)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>outMatrix</span> : Object {Matrix}<div class='sub-desc'><p>The matrix to store the inverse transform of the RenderNode</p>\n</div></li></ul></div></div></div><div id='method-getLeft' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getLeft' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getLeft' class='name expandable'>getLeft</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the left position for the RenderNode. ...</div><div class='long'><p>Gets the left position for the RenderNode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the left position in pixels</p>\n</div></li></ul></div></div></div><div id='method-getMatrix' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getMatrix' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getMatrix' class='name expandable'>getMatrix</a>( <span class='pre'>outMatrix</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current transform matrix ...</div><div class='long'><p>Gets the current transform matrix</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>outMatrix</span> : Object {Matrix}<div class='sub-desc'><p>The matrix to store the transform of the RenderNode</p>\n</div></li></ul></div></div></div><div id='method-getPivotX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getPivotX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getPivotX' class='name expandable'>getPivotX</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the pivot value for this display list on the X axis, in pixels. ...</div><div class='long'><p>Returns the pivot value for this display list on the X axis, in pixels.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setPivotX\" rel=\"android.graphics.RenderNode-method-setPivotX\" class=\"docClass\">setPivotX</a>(float)</p>\n</div></div></div><div id='method-getPivotY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getPivotY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getPivotY' class='name expandable'>getPivotY</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the pivot value for this display list on the Y axis, in pixels. ...</div><div class='long'><p>Returns the pivot value for this display list on the Y axis, in pixels.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setPivotY\" rel=\"android.graphics.RenderNode-method-setPivotY\" class=\"docClass\">setPivotY</a>(float)</p>\n</div></div></div><div id='method-getRight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getRight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getRight' class='name expandable'>getRight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the right position for the RenderNode. ...</div><div class='long'><p>Gets the right position for the RenderNode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the right position in pixels</p>\n</div></li></ul></div></div></div><div id='method-getRotationX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getRotationX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getRotationX' class='name expandable'>getRotationX</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the rotation value for this display list around the X axis, in degrees. ...</div><div class='long'><p>Returns the rotation value for this display list around the X axis, in degrees.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setRotationX\" rel=\"android.graphics.RenderNode-method-setRotationX\" class=\"docClass\">setRotationX</a>(float)</p>\n</div></div></div><div id='method-getRotationY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getRotationY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getRotationY' class='name expandable'>getRotationY</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the rotation value for this display list around the Y axis, in degrees. ...</div><div class='long'><p>Returns the rotation value for this display list around the Y axis, in degrees.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setRotationY\" rel=\"android.graphics.RenderNode-method-setRotationY\" class=\"docClass\">setRotationY</a>(float)</p>\n</div></div></div><div id='method-getRotationZ' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getRotationZ' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getRotationZ' class='name expandable'>getRotationZ</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the rotation value for this display list around the Z axis, in degrees. ...</div><div class='long'><p>Returns the rotation value for this display list around the Z axis, in degrees.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setRotationZ\" rel=\"android.graphics.RenderNode-method-setRotationZ\" class=\"docClass\">setRotationZ</a>(float)</p>\n</div></div></div><div id='method-getScaleX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getScaleX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getScaleX' class='name expandable'>getScaleX</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the scale value for this display list on the X axis. ...</div><div class='long'><p>Returns the scale value for this display list on the X axis.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setScaleX\" rel=\"android.graphics.RenderNode-method-setScaleX\" class=\"docClass\">setScaleX</a>(float)</p>\n</div></div></div><div id='method-getScaleY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getScaleY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getScaleY' class='name expandable'>getScaleY</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the scale value for this display list on the Y axis. ...</div><div class='long'><p>Returns the scale value for this display list on the Y axis.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setScaleY\" rel=\"android.graphics.RenderNode-method-setScaleY\" class=\"docClass\">setScaleY</a>(float)</p>\n</div></div></div><div id='method-getSpotShadowColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getSpotShadowColor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getSpotShadowColor' class='name expandable'>getSpotShadowColor</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The shadow color set by setSpotShadowColor(int), or black if nothing\n was set</p>\n</div></li></ul></div></div></div><div id='method-getTop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getTop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getTop' class='name expandable'>getTop</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the top position for the RenderNode. ...</div><div class='long'><p>Gets the top position for the RenderNode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the top position in pixels</p>\n</div></li></ul></div></div></div><div id='method-getTranslationX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getTranslationX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getTranslationX' class='name expandable'>getTranslationX</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the translation value for this display list on the X axis, in pixels. ...</div><div class='long'><p>Returns the translation value for this display list on the X axis, in pixels.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setTranslationX\" rel=\"android.graphics.RenderNode-method-setTranslationX\" class=\"docClass\">setTranslationX</a>(float)</p>\n</div></div></div><div id='method-getTranslationY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getTranslationY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getTranslationY' class='name expandable'>getTranslationY</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the translation value for this display list on the Y axis, in pixels. ...</div><div class='long'><p>Returns the translation value for this display list on the Y axis, in pixels.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setTranslationY\" rel=\"android.graphics.RenderNode-method-setTranslationY\" class=\"docClass\">setTranslationY</a>(float)</p>\n</div></div></div><div id='method-getTranslationZ' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getTranslationZ' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getTranslationZ' class='name expandable'>getTranslationZ</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the translation value for this display list on the Z axis. ...</div><div class='long'><p>Returns the translation value for this display list on the Z axis.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setTranslationZ\" rel=\"android.graphics.RenderNode-method-setTranslationZ\" class=\"docClass\">setTranslationZ</a>(float)</p>\n</div></div></div><div id='method-getUniqueId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getUniqueId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getUniqueId' class='name expandable'>getUniqueId</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the unique ID that identifies this RenderNode. ...</div><div class='long'><p>Returns the unique ID that identifies this RenderNode. This ID is unique for the\n lifetime of the process. IDs are reset on process death, and are unique only within\n the process.</p>\n\n<p> This ID is intended to be used with debugging tools to associate a particular\n RenderNode across different debug dumping &amp; inspection tools. For example\n a View layout inspector should include the unique ID for any RenderNodes that it owns\n to associate the drawing content with the layout content.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the unique ID for this RenderNode</p>\n</div></li></ul></div></div></div><div id='method-getUseCompositingLayer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getUseCompositingLayer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getUseCompositingLayer' class='name expandable'>getUseCompositingLayer</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets whether or not a compositing layer is forced to be used. ...</div><div class='long'><p>Gets whether or not a compositing layer is forced to be used. The default &amp; recommended\n is false, as it is typically faster to avoid using compositing layers.\n See android.graphics.Paint).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if a compositing layer is forced, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-getWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-getWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-getWidth' class='name expandable'>getWidth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the width of the RenderNode, which is the right - left. ...</div><div class='long'><p>Gets the width of the RenderNode, which is the right - left.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the width of the RenderNode</p>\n</div></li></ul></div></div></div><div id='method-hasDisplayList' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-hasDisplayList' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-hasDisplayList' class='name expandable'>hasDisplayList</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the RenderNode has a display list. ...</div><div class='long'><p>Returns whether the RenderNode has a display list. If this returns false, the RenderNode\n should be re-recorded with <a href=\"#!/api/android.graphics.RenderNode-method-beginRecording\" rel=\"android.graphics.RenderNode-method-beginRecording\" class=\"docClass\">beginRecording</a>() and <a href=\"#!/api/android.graphics.RenderNode-method-endRecording\" rel=\"android.graphics.RenderNode-method-endRecording\" class=\"docClass\">endRecording</a>().</p>\n\n<p> A RenderNode without a display list may still be drawn, however it will have no impact\n on the rendering content until its display list is updated.</p>\n\n<p> When a RenderNode is no longer drawn by anything the system may automatically\n invoke <a href=\"#!/api/android.graphics.RenderNode-method-discardDisplayList\" rel=\"android.graphics.RenderNode-method-discardDisplayList\" class=\"docClass\">discardDisplayList</a>(). It is therefore important to ensure that\n <a href=\"#!/api/android.graphics.RenderNode-method-hasDisplayList\" rel=\"android.graphics.RenderNode-method-hasDisplayList\" class=\"docClass\">hasDisplayList</a>() is true on a RenderNode prior to drawing it.</p>\n\n<p> See <a href=\"#!/api/android.graphics.RenderNode-method-discardDisplayList\" rel=\"android.graphics.RenderNode-method-discardDisplayList\" class=\"docClass\">discardDisplayList</a>()</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>boolean true if this RenderNode has a display list, false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-hasIdentityMatrix' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-hasIdentityMatrix' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-hasIdentityMatrix' class='name expandable'>hasIdentityMatrix</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Whether or not the RenderNode has an identity transform. ...</div><div class='long'><p>Whether or not the RenderNode has an identity transform. This is a faster\n way to do the otherwise equivalent <a href=\"#!/api/android.graphics.RenderNode-method-getMatrix\" rel=\"android.graphics.RenderNode-method-getMatrix\" class=\"docClass\">getMatrix</a>(Matrix) android.graphics.Matrix.isIdentity()\n as it doesn't require copying the Matrix first, thus minimizing overhead.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the RenderNode has an identity transform, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-hasOverlappingRendering' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-hasOverlappingRendering' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-hasOverlappingRendering' class='name expandable'>hasOverlappingRendering</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether the content of this display list overlaps. ...</div><div class='long'><p>Indicates whether the content of this display list overlaps.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if this display list renders content which overlaps, false otherwise.\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setHasOverlappingRendering\" rel=\"android.graphics.RenderNode-method-setHasOverlappingRendering\" class=\"docClass\">setHasOverlappingRendering</a>(boolean)</p>\n</div></li></ul></div></div></div><div id='method-hasShadow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-hasShadow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-hasShadow' class='name expandable'>hasShadow</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the RenderNode has a shadow. ...</div><div class='long'><p>Checks if the RenderNode has a shadow. That is, if the combination of <a href=\"#!/api/android.graphics.RenderNode-method-getElevation\" rel=\"android.graphics.RenderNode-method-getElevation\" class=\"docClass\">getElevation</a>()\n and <a href=\"#!/api/android.graphics.RenderNode-method-getTranslationZ\" rel=\"android.graphics.RenderNode-method-getTranslationZ\" class=\"docClass\">getTranslationZ</a>() is greater than zero, there is an <a href=\"#!/api/android.graphics.Outline\" rel=\"android.graphics.Outline\" class=\"docClass\">android.graphics.Outline</a> set with\n a valid shadow caster path, and the provided outline has a non-zero\n android.graphics.Outline.getAlpha().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if this RenderNode has a shadow, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-isForceDarkAllowed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-isForceDarkAllowed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-isForceDarkAllowed' class='name expandable'>isForceDarkAllowed</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>See setForceDarkAllowed(boolean) ...</div><div class='long'><p>See <a href=\"#!/api/android.graphics.RenderNode-method-setForceDarkAllowed\" rel=\"android.graphics.RenderNode-method-setForceDarkAllowed\" class=\"docClass\">setForceDarkAllowed</a>(boolean)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if force dark is allowed (default), false if it is disabled</p>\n</div></li></ul></div></div></div><div id='method-isPivotExplicitlySet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-isPivotExplicitlySet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-isPivotExplicitlySet' class='name expandable'>isPivotExplicitlySet</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether or not a pivot was explicitly set with setPivotX(float) or\n setPivotY(float). If no pivot has been set then the pivot will be the center\n of the RenderNode.</p>\n</div></li></ul></div></div></div><div id='method-offsetLeftAndRight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-offsetLeftAndRight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-offsetLeftAndRight' class='name expandable'>offsetLeftAndRight</a>( <span class='pre'>offset</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Offsets the left and right positions for the RenderNode ...</div><div class='long'><p>Offsets the left and right positions for the RenderNode</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>offset</span> : Number<div class='sub-desc'><p>The amount that the left and right positions are offset in pixels</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-offsetTopAndBottom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-offsetTopAndBottom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-offsetTopAndBottom' class='name expandable'>offsetTopAndBottom</a>( <span class='pre'>offset</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Offsets the top and bottom values for the RenderNode ...</div><div class='long'><p>Offsets the top and bottom values for the RenderNode</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>offset</span> : Number<div class='sub-desc'><p>The amount that the left and right positions are offset in pixels</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-resetPivot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-resetPivot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-resetPivot' class='name expandable'>resetPivot</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Clears any pivot previously set by a call to  setPivotX(float) or\n setPivotY(float). ...</div><div class='long'><p>Clears any pivot previously set by a call to  <a href=\"#!/api/android.graphics.RenderNode-method-setPivotX\" rel=\"android.graphics.RenderNode-method-setPivotX\" class=\"docClass\">setPivotX</a>(float) or\n <a href=\"#!/api/android.graphics.RenderNode-method-setPivotY\" rel=\"android.graphics.RenderNode-method-setPivotY\" class=\"docClass\">setPivotY</a>(float). After calling this <a href=\"#!/api/android.graphics.RenderNode-method-isPivotExplicitlySet\" rel=\"android.graphics.RenderNode-method-isPivotExplicitlySet\" class=\"docClass\">isPivotExplicitlySet</a>() will be false\n and the pivot used for rotation will return to default of being centered on the view.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setAlpha' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setAlpha' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setAlpha' class='name expandable'>setAlpha</a>( <span class='pre'>alpha</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the translucency level for the display list. ...</div><div class='long'><p>Sets the translucency level for the display list.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alpha</span> : Number<div class='sub-desc'><p>The translucency of the display list, must be a value between 0.0f and 1.0f\n@see View#setAlpha(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getAlpha\" rel=\"android.graphics.RenderNode-method-getAlpha\" class=\"docClass\">getAlpha</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setAmbientShadowColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setAmbientShadowColor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setAmbientShadowColor' class='name expandable'>setAmbientShadowColor</a>( <span class='pre'>color</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the color of the ambient shadow that is drawn when the RenderNode has a positive Z or\n elevation value and is dr...</div><div class='long'><p>Sets the color of the ambient shadow that is drawn when the RenderNode has a positive Z or\n elevation value and is drawn inside of a android.graphics.Canvas.enableZ() section.\n <p>\n By default the shadow color is black. Generally, this color will be opaque so the intensity\n of the shadow is consistent between different RenderNodes with different colors.\n <p>\n The opacity of the final ambient shadow is a function of the shadow caster height, the\n alpha channel of the outlineAmbientShadowColor (typically opaque), and the\n android.R.attr.ambientShadowAlpha theme attribute.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>color</span> : Number<div class='sub-desc'><p>The color this RenderNode will cast for its elevation shadow.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setCameraDistance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setCameraDistance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setCameraDistance' class='name expandable'>setCameraDistance</a>( <span class='pre'>distance</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the distance along the Z axis (orthogonal to the X/Y plane on which\n RenderNodes are drawn) from the camera to t...</div><div class='long'><p>Sets the distance along the Z axis (orthogonal to the X/Y plane on which\n RenderNodes are drawn) from the camera to this RenderNode. The camera's distance\n affects 3D transformations, for instance rotations around the X and Y\n axis. If the rotationX or rotationY properties are changed and this view is\n large (more than half the size of the screen), it is recommended to always\n use a camera distance that's greater than the height (X axis rotation) or\n the width (Y axis rotation) of this view.</p>\n\n\n<p> <p>The distance of the camera from the drawing plane can have an affect on the\n perspective distortion of the RenderNode when it is rotated around the x or y axis.\n For example, a large distance will result in a large viewing angle, and there\n will not be much perspective distortion of the view as it rotates. A short\n distance may cause much more perspective distortion upon rotation, and can\n also result in some drawing artifacts if the rotated view ends up partially\n behind the camera (which is why the recommendation is to use a distance at\n least as far as the size of the view, if the view is to be rotated.)</p></p>\n\n<p> <p>The distance is expressed in pixels and must always be positive</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>distance</span> : Number<div class='sub-desc'><p>The distance in pixels, must always be positive\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setRotationX\" rel=\"android.graphics.RenderNode-method-setRotationX\" class=\"docClass\">setRotationX</a>(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-setRotationY\" rel=\"android.graphics.RenderNode-method-setRotationY\" class=\"docClass\">setRotationY</a>(float)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setClipRect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setClipRect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setClipRect' class='name expandable'>setClipRect</a>( <span class='pre'>rect</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets an additional clip on the RenderNode. ...</div><div class='long'><p>Sets an additional clip on the RenderNode. If null, the extra clip is removed from the\n RenderNode. If non-null, the RenderNode will be clipped to this rect. In addition  if\n <a href=\"#!/api/android.graphics.RenderNode-method-setClipToBounds\" rel=\"android.graphics.RenderNode-method-setClipToBounds\" class=\"docClass\">setClipToBounds</a>(boolean) is true, then the RenderNode will be clipped to the\n intersection of this rectangle and the bounds of the render node, which is set with\n <a href=\"#!/api/android.graphics.RenderNode-method-setPosition\" rel=\"android.graphics.RenderNode-method-setPosition\" class=\"docClass\">setPosition</a>(Rect).</p>\n\n<p> <p>This is equivalent to do a android.graphics.Canvas.clipRect(Rect) at the start of this\n RenderNode's display list. However, as this is a property of the RenderNode instead\n of part of the display list it can be more easily animated for transient additional\n clipping. An example usage of this would be the android.transition.ChangeBounds\n transition animation with the resizeClip=true option.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rect</span> : Object {Rect}<div class='sub-desc'><p>the bounds to clip to. If null, the additional clip is removed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setClipToBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setClipToBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setClipToBounds' class='name expandable'>setClipToBounds</a>( <span class='pre'>clipToBounds</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Set whether the Render node should clip itself to its bounds. ...</div><div class='long'><p>Set whether the Render node should clip itself to its bounds. This defaults to true,\n and is useful to the renderer in enable quick-rejection of chunks of the tree as well as\n better partial invalidation support. Clipping can be further restricted or controlled\n through the combination of this property as well as <a href=\"#!/api/android.graphics.RenderNode-method-setClipRect\" rel=\"android.graphics.RenderNode-method-setClipRect\" class=\"docClass\">setClipRect</a>(Rect), which\n allows for a different clipping rectangle to be used in addition to or instead of the\n int, int, int) or the RenderNode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>clipToBounds</span> : Boolean<div class='sub-desc'><p>true if the display list should clip to its bounds, false otherwise.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setClipToOutline' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setClipToOutline' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setClipToOutline' class='name expandable'>setClipToOutline</a>( <span class='pre'>clipToOutline</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Enables or disables clipping to the outline. ...</div><div class='long'><p>Enables or disables clipping to the outline.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>clipToOutline</span> : Boolean<div class='sub-desc'><p>true if clipping to the outline.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the clipToOutline value changed, false if previous value matched the new\n         value.</p>\n</div></li></ul></div></div></div><div id='method-setElevation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setElevation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setElevation' class='name expandable'>setElevation</a>( <span class='pre'>lift</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the base elevation of this RenderNode in pixels ...</div><div class='long'><p>Sets the base elevation of this RenderNode in pixels</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lift</span> : Number<div class='sub-desc'><p>the elevation in pixels</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setForceDarkAllowed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setForceDarkAllowed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setForceDarkAllowed' class='name expandable'>setForceDarkAllowed</a>( <span class='pre'>allow</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether or not to allow force dark to apply to this RenderNode. ...</div><div class='long'><p>Sets whether or not to allow force dark to apply to this RenderNode.</p>\n\n<p> Setting this to false will disable the auto-dark feature on everything this RenderNode\n draws, including any descendants.</p>\n\n<p> Setting this to true will allow this RenderNode to be automatically made dark, however\n a value of 'true' will not override any 'false' value in its parent chain nor will\n it prevent any 'false' in any of its children.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>allow</span> : Boolean<div class='sub-desc'><p>Whether or not to allow force dark.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setHasOverlappingRendering' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setHasOverlappingRendering' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setHasOverlappingRendering' class='name expandable'>setHasOverlappingRendering</a>( <span class='pre'>hasOverlappingRendering</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether the display list renders content which overlaps. ...</div><div class='long'><p>Sets whether the display list renders content which overlaps. Non-overlapping rendering\n can use a fast path for alpha that avoids rendering to an offscreen buffer. By default\n display lists consider they do not have overlapping content.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hasOverlappingRendering</span> : Boolean<div class='sub-desc'><p>False if the content is guaranteed to be non-overlapping,\n                                true otherwise.\n@see android.view.View#hasOverlappingRendering()\n@see <a href=\"#!/api/android.graphics.RenderNode-method-hasOverlappingRendering\" rel=\"android.graphics.RenderNode-method-hasOverlappingRendering\" class=\"docClass\">hasOverlappingRendering</a>()</p>\n</div></li></ul></div></div></div><div id='method-setOutline' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setOutline' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setOutline' class='name expandable'>setOutline</a>( <span class='pre'>outline</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the outline, defining the shape that casts a shadow, and the path to\n be clipped if setClipToOutline is set. ...</div><div class='long'><p>Sets the outline, defining the shape that casts a shadow, and the path to\n be clipped if setClipToOutline is set.</p>\n\n<p> This will make a copy of the provided <a href=\"#!/api/android.graphics.Outline\" rel=\"android.graphics.Outline\" class=\"docClass\">android.graphics.Outline</a>, so any future modifications\n to the outline will need to call <a href=\"#!/api/android.graphics.RenderNode-method-setOutline\" rel=\"android.graphics.RenderNode-method-setOutline\" class=\"docClass\">setOutline</a>(Outline) with the modified\n outline for those changes to be applied.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>outline</span> : Object {Outline}<div class='sub-desc'><p>The outline to use for this RenderNode.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setPivotX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setPivotX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setPivotX' class='name expandable'>setPivotX</a>( <span class='pre'>pivotX</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the pivot value for the display list on the X axis ...</div><div class='long'><p>Sets the pivot value for the display list on the X axis</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pivotX</span> : Number<div class='sub-desc'><p>The pivot value of the display list on the X axis, in pixels\n@see View#setPivotX(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getPivotX\" rel=\"android.graphics.RenderNode-method-getPivotX\" class=\"docClass\">getPivotX</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setPivotY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setPivotY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setPivotY' class='name expandable'>setPivotY</a>( <span class='pre'>pivotY</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the pivot value for the display list on the Y axis ...</div><div class='long'><p>Sets the pivot value for the display list on the Y axis</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pivotY</span> : Number<div class='sub-desc'><p>The pivot value of the display list on the Y axis, in pixels\n@see View#setPivotY(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getPivotY\" rel=\"android.graphics.RenderNode-method-getPivotY\" class=\"docClass\">getPivotY</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setPosition' class='name expandable'>setPosition</a>( <span class='pre'>position</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the position of the RenderNode. ...</div><div class='long'><p>Sets the position of the RenderNode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Object {Rect}<div class='sub-desc'><p>The position rectangle in pixels</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setProjectBackwards' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setProjectBackwards' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setProjectBackwards' class='name expandable'>setProjectBackwards</a>( <span class='pre'>shouldProject</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether the RenderNode should be drawn immediately after the\n closest ancestor RenderNode containing a projectio...</div><div class='long'><p><p>Sets whether the RenderNode should be drawn immediately after the\n closest ancestor RenderNode containing a projection receiver.</p>\n\n<p> <p>The default is false, and the rendering of this node happens in the typical draw order.</p>\n\n<p> <p>If true, then at rendering time this rendernode will not be drawn in order with the\n android.graphics.Canvas.drawRenderNode(RenderNode) command that drew this RenderNode, but instead\n it will be re-positioned in the RenderNode tree to be drawn on the closet ancestor with a\n child rendernode that has <a href=\"#!/api/android.graphics.RenderNode-method-setProjectionReceiver\" rel=\"android.graphics.RenderNode-method-setProjectionReceiver\" class=\"docClass\">setProjectionReceiver</a>(boolean) as true.</p>\n\n<p> <p>The typical usage of this is to allow a child RenderNode to draw on a parent's background,\n such as the platform's usage with android.graphics.drawable.RippleDrawable. Consider\n the following structure, built out of which RenderNode called drawRenderNode on a different\n RenderNode:</p>\n\n<p><pre>        +-------------+\n        |RenderNode: P|\n        +-+----------++\n          |          |\n          v          v\n  +-------+-----+  +-+--------------+\n  |RenderNode: C|  |RenderNode: P'BG|\n  +-------+-----+  +----------------+\n          |\n          |\n +--------+-------+\n |RenderNode: C'BG|\n +----------------+\n </pre></p>\n\n<p> If P'BG is a projection receiver, and C'BG is set to project backwards then C'BG will\n behave as if it was drawn directly by P'BG instead of by C. This includes inheriting P'BG's\n clip instead of C's clip.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>shouldProject</span> : Boolean<div class='sub-desc'><p>true if the display list should be projected onto a\n                      containing volume. Default is false.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setProjectionReceiver' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setProjectionReceiver' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setProjectionReceiver' class='name expandable'>setProjectionReceiver</a>( <span class='pre'>shouldRecieve</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether the RenderNode is a projection receiver. ...</div><div class='long'><p>Sets whether the RenderNode is a projection receiver. If true then this RenderNode's parent\n should draw any descendant RenderNodes with ProjectBackwards=true directly on top of it.\n Default value is false. See\n <a href=\"#!/api/android.graphics.RenderNode-method-setProjectBackwards\" rel=\"android.graphics.RenderNode-method-setProjectBackwards\" class=\"docClass\">setProjectBackwards</a>(boolean) for a description of what this entails.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>shouldRecieve</span> : Boolean<div class='sub-desc'><p>True if this RenderNode is a projection receiver, false otherwise.\n                      Default is false.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setRotationX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setRotationX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setRotationX' class='name expandable'>setRotationX</a>( <span class='pre'>rotationX</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the rotation value for the display list around the X axis. ...</div><div class='long'><p>Sets the rotation value for the display list around the X axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rotationX</span> : Number<div class='sub-desc'><p>The rotation value of the display list, in degrees\n@see View#setRotationX(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getRotationX\" rel=\"android.graphics.RenderNode-method-getRotationX\" class=\"docClass\">getRotationX</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setRotationY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setRotationY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setRotationY' class='name expandable'>setRotationY</a>( <span class='pre'>rotationY</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the rotation value for the display list around the Y axis. ...</div><div class='long'><p>Sets the rotation value for the display list around the Y axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rotationY</span> : Number<div class='sub-desc'><p>The rotation value of the display list, in degrees\n@see View#setRotationY(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getRotationY\" rel=\"android.graphics.RenderNode-method-getRotationY\" class=\"docClass\">getRotationY</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setRotationZ' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setRotationZ' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setRotationZ' class='name expandable'>setRotationZ</a>( <span class='pre'>rotation</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the rotation value for the display list around the Z axis. ...</div><div class='long'><p>Sets the rotation value for the display list around the Z axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rotation</span> : Number<div class='sub-desc'><p>The rotation value of the display list, in degrees\n@see View#setRotationZ(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getRotationZ\" rel=\"android.graphics.RenderNode-method-getRotationZ\" class=\"docClass\">getRotationZ</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setScaleX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setScaleX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setScaleX' class='name expandable'>setScaleX</a>( <span class='pre'>scaleX</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the scale value for the display list on the X axis. ...</div><div class='long'><p>Sets the scale value for the display list on the X axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>scaleX</span> : Number<div class='sub-desc'><p>The scale value of the display list\n@see View#setScaleX(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getScaleX\" rel=\"android.graphics.RenderNode-method-getScaleX\" class=\"docClass\">getScaleX</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setScaleY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setScaleY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setScaleY' class='name expandable'>setScaleY</a>( <span class='pre'>scaleY</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the scale value for the display list on the Y axis. ...</div><div class='long'><p>Sets the scale value for the display list on the Y axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>scaleY</span> : Number<div class='sub-desc'><p>The scale value of the display list\n@see View#setScaleY(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getScaleY\" rel=\"android.graphics.RenderNode-method-getScaleY\" class=\"docClass\">getScaleY</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setSpotShadowColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setSpotShadowColor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setSpotShadowColor' class='name expandable'>setSpotShadowColor</a>( <span class='pre'>color</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the color of the spot shadow that is drawn when the RenderNode has a positive Z or\n elevation value and is drawn...</div><div class='long'><p>Sets the color of the spot shadow that is drawn when the RenderNode has a positive Z or\n elevation value and is drawn inside of a android.graphics.Canvas.enableZ() section.\n <p>\n By default the shadow color is black. Generally, this color will be opaque so the intensity\n of the shadow is consistent between different RenderNodes with different colors.\n <p>\n The opacity of the final spot shadow is a function of the shadow caster height, the\n alpha channel of the outlineSpotShadowColor (typically opaque), and the\n android.R.attr.spotShadowAlpha theme attribute</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>color</span> : Number<div class='sub-desc'><p>The color this RenderNode will cast for its elevation spot shadow.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setTranslationX' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setTranslationX' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setTranslationX' class='name expandable'>setTranslationX</a>( <span class='pre'>translationX</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the translation value for the display list on the X axis. ...</div><div class='long'><p>Sets the translation value for the display list on the X axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>translationX</span> : Number<div class='sub-desc'><p>The X axis translation value of the display list, in pixels\n@see View#setTranslationX(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getTranslationX\" rel=\"android.graphics.RenderNode-method-getTranslationX\" class=\"docClass\">getTranslationX</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setTranslationY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setTranslationY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setTranslationY' class='name expandable'>setTranslationY</a>( <span class='pre'>translationY</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the translation value for the display list on the Y axis. ...</div><div class='long'><p>Sets the translation value for the display list on the Y axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>translationY</span> : Number<div class='sub-desc'><p>The Y axis translation value of the display list, in pixels\n@see View#setTranslationY(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getTranslationY\" rel=\"android.graphics.RenderNode-method-getTranslationY\" class=\"docClass\">getTranslationY</a>()</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setTranslationZ' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setTranslationZ' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setTranslationZ' class='name expandable'>setTranslationZ</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the translation value for the display list on the Z axis. ...</div><div class='long'><p>Sets the translation value for the display list on the Z axis.\n@see View#setTranslationZ(float)\n@see <a href=\"#!/api/android.graphics.RenderNode-method-getTranslationZ\" rel=\"android.graphics.RenderNode-method-getTranslationZ\" class=\"docClass\">getTranslationZ</a>()</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div><div id='method-setUseCompositingLayer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.RenderNode'>android.graphics.RenderNode</span><br/><a href='source/RenderNode.html#android-graphics-RenderNode-method-setUseCompositingLayer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.RenderNode-method-setUseCompositingLayer' class='name expandable'>setUseCompositingLayer</a>( <span class='pre'>forceToLayer, paint</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Controls whether or not to force this RenderNode to render to an intermediate buffer. ...</div><div class='long'><p>Controls whether or not to force this RenderNode to render to an intermediate buffer.\n Internally RenderNode will already promote itself to a composition layer if it's useful\n for performance or required for the current combination of <a href=\"#!/api/android.graphics.RenderNode-method-setAlpha\" rel=\"android.graphics.RenderNode-method-setAlpha\" class=\"docClass\">setAlpha</a>(float) and\n <a href=\"#!/api/android.graphics.RenderNode-method-setHasOverlappingRendering\" rel=\"android.graphics.RenderNode-method-setHasOverlappingRendering\" class=\"docClass\">setHasOverlappingRendering</a>(boolean).</p>\n\n<p> <p>The usage of this is instead to allow for either overriding of the internal behavior\n if it's measured to be necessary for the particular rendering content in question or, more\n usefully, to add a composition effect to the RenderNode via the optional paint parameter.</p>\n\n<p> <p>Note: When a RenderNode is using a compositing layer it will also result in\n clipToBounds=true behavior.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>forceToLayer</span> : Boolean<div class='sub-desc'><p>if true this forces the RenderNode to use an intermediate buffer.\n                     Default &amp; generally recommended value is false.</p>\n</div></li><li><span class='pre'>paint</span> : Object {Paint}<div class='sub-desc'><p>The blend mode, alpha, and ColorFilter to apply to the compositing layer.\n                     Only applies if forceToLayer is true. The paint's alpha is multiplied\n                     with getAlpha() to resolve the final alpha of the RenderNode.\n                     If null then no additional composition effects are applied on top of the\n                     composition layer.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the value changed, false if the new value was the same as the previous value.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});