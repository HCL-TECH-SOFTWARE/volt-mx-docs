Ext.data.JsonP.android_graphics_SurfaceTexture({"tagname":"class","name":"android.graphics.SurfaceTexture","autodetected":{},"files":[{"filename":"SurfaceTexture.js","href":"SurfaceTexture.html#android-graphics-SurfaceTexture"}],"extends":"java.lang.Object","members":[{"name":"attachToGLContext","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-attachToGLContext","meta":{}},{"name":"detachFromGLContext","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-detachFromGLContext","meta":{}},{"name":"getTimestamp","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-getTimestamp","meta":{}},{"name":"getTransformMatrix","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-getTransformMatrix","meta":{}},{"name":"isReleased","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-isReleased","meta":{}},{"name":"release","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-release","meta":{}},{"name":"releaseTexImage","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-releaseTexImage","meta":{}},{"name":"setDefaultBufferSize","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-setDefaultBufferSize","meta":{}},{"name":"setOnFrameAvailableListener","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-setOnFrameAvailableListener","meta":{}},{"name":"updateTexImage","tagname":"method","owner":"android.graphics.SurfaceTexture","id":"method-updateTexImage","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.SurfaceTexture","short_doc":"Captures frames from an image stream as an OpenGL ES texture. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.SurfaceTexture</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture' target='_blank'>SurfaceTexture.js</a></div></pre><div class='doc-contents'><p>Captures frames from an image stream as an OpenGL ES texture.</p>\n\n<p> <p>The image stream may come from either camera preview or video decode. A\n android.view.Surface created from a SurfaceTexture can be used as an output\n destination for the android.hardware.camera2, android.media.MediaCodec,\n android.media.MediaPlayer, and android.renderscript.Allocation APIs.\n When <a href=\"#!/api/android.graphics.SurfaceTexture-method-updateTexImage\" rel=\"android.graphics.SurfaceTexture-method-updateTexImage\" class=\"docClass\">updateTexImage</a> is called, the contents of the texture object specified\n when the SurfaceTexture was created are updated to contain the most recent image from the image\n stream.  This may cause some frames of the stream to be skipped.</p>\n\n<p> <p>A SurfaceTexture may also be used in place of a SurfaceHolder when specifying the output\n destination of the older android.hardware.Camera API. Doing so will cause all the\n frames from the image stream to be sent to the SurfaceTexture object rather than to the device's\n display.</p>\n\n<p> <p>When sampling from the texture one should first transform the texture coordinates using the\n matrix queried via getTransformMatrix(float[]).  The transform matrix may change each\n time <a href=\"#!/api/android.graphics.SurfaceTexture-method-updateTexImage\" rel=\"android.graphics.SurfaceTexture-method-updateTexImage\" class=\"docClass\">updateTexImage</a> is called, so it should be re-queried each time the texture image\n is updated.\n This matrix transforms traditional 2D OpenGL ES texture coordinate column vectors of the form (s,\n t, 0, 1) where s and t are on the inclusive interval [0, 1] to the proper sampling location in\n the streamed texture.  This transform compensates for any properties of the image stream source\n that cause it to appear different from a traditional OpenGL ES texture.  For example, sampling\n from the bottom left corner of the image can be accomplished by transforming the column vector\n (0, 0, 0, 1) using the queried matrix, while sampling from the top right corner of the image can\n be done by transforming (1, 1, 0, 1).</p>\n\n<p> <p>The texture object uses the GL_TEXTURE_EXTERNAL_OES texture target, which is defined by the\n <a href=\"http://www.khronos.org/registry/gles/extensions/OES/OES_EGL_image_external.txt\">\n GL_OES_EGL_image_external</a> OpenGL ES extension.  This limits how the texture may be used.\n Each time the texture is bound it must be bound to the GL_TEXTURE_EXTERNAL_OES target rather than\n the GL_TEXTURE_2D target.  Additionally, any OpenGL ES 2.0 shader that samples from the texture\n must declare its use of this extension using, for example, an \"#extension\n GL_OES_EGL_image_external : require\" directive.  Such shaders must also access the texture using\n the samplerExternalOES GLSL sampler type.</p>\n\n<p> <p>SurfaceTexture objects may be created on any thread.  <a href=\"#!/api/android.graphics.SurfaceTexture-method-updateTexImage\" rel=\"android.graphics.SurfaceTexture-method-updateTexImage\" class=\"docClass\">updateTexImage</a> may only be\n called on the thread with the OpenGL ES context that contains the texture object.  The\n frame-available callback is called on an arbitrary thread, so unless special care is taken <a href=\"#!/api/android.graphics.SurfaceTexture-method-updateTexImage\" rel=\"android.graphics.SurfaceTexture-method-updateTexImage\" class=\"docClass\">updateTexImage</a> should not be called directly from the callback.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-attachToGLContext' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-attachToGLContext' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-attachToGLContext' class='name expandable'>attachToGLContext</a>( <span class='pre'>texName</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attach the SurfaceTexture to the OpenGL ES context that is current on the calling thread. ...</div><div class='long'><p>Attach the SurfaceTexture to the OpenGL ES context that is current on the calling thread.  A\n new OpenGL ES texture object is created and populated with the SurfaceTexture image frame\n that was current at the time of the last call to <a href=\"#!/api/android.graphics.SurfaceTexture-method-detachFromGLContext\" rel=\"android.graphics.SurfaceTexture-method-detachFromGLContext\" class=\"docClass\">detachFromGLContext</a>.  This new\n texture is bound to the GL_TEXTURE_EXTERNAL_OES texture target.</p>\n\n<p> This can be used to access the SurfaceTexture image contents from multiple OpenGL ES\n contexts.  Note, however, that the image contents are only accessible from one OpenGL ES\n context at a time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>texName</span> : Number<div class='sub-desc'><p>The name of the OpenGL ES texture that will be created.  This texture name\n must be unusued in the OpenGL ES context that is current on the calling thread.</p>\n</div></li></ul></div></div></div><div id='method-detachFromGLContext' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-detachFromGLContext' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-detachFromGLContext' class='name expandable'>detachFromGLContext</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Detach the SurfaceTexture from the OpenGL ES context that owns the OpenGL ES texture object. ...</div><div class='long'><p>Detach the SurfaceTexture from the OpenGL ES context that owns the OpenGL ES texture object.\n This call must be made with the OpenGL ES context current on the calling thread.  The OpenGL\n ES texture object will be deleted as a result of this call.  After calling this method all\n calls to <a href=\"#!/api/android.graphics.SurfaceTexture-method-updateTexImage\" rel=\"android.graphics.SurfaceTexture-method-updateTexImage\" class=\"docClass\">updateTexImage</a> will throw an java.lang.IllegalStateException until\n a successful call to <a href=\"#!/api/android.graphics.SurfaceTexture-method-attachToGLContext\" rel=\"android.graphics.SurfaceTexture-method-attachToGLContext\" class=\"docClass\">attachToGLContext</a> is made.</p>\n\n<p> This can be used to access the SurfaceTexture image contents from multiple OpenGL ES\n contexts.  Note, however, that the image contents are only accessible from one OpenGL ES\n context at a time.</p>\n</div></div></div><div id='method-getTimestamp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-getTimestamp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-getTimestamp' class='name expandable'>getTimestamp</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the timestamp associated with the texture image set by the most recent call to\n updateTexImage. ...</div><div class='long'><p>Retrieve the timestamp associated with the texture image set by the most recent call to\n updateTexImage.</p>\n\n<p> <p>This timestamp is in nanoseconds, and is normally monotonically increasing. The timestamp\n should be unaffected by time-of-day adjustments. The specific meaning and zero point of the\n timestamp depends on the source providing images to the SurfaceTexture. Unless otherwise\n specified by the image source, timestamps cannot generally be compared across SurfaceTexture\n instances, or across multiple program invocations. It is mostly useful for determining time\n offsets between subsequent frames.</p></p>\n\n<p> <p>For camera sources, timestamps should be strictly monotonic. Timestamps from MediaPlayer\n sources may be reset when the playback position is set. For EGL and Vulkan producers, the\n timestamp is the desired present time set with the EGL_ANDROID_presentation_time or\n VK_GOOGLE_display_timing extensions.</p></p>\n</div></div></div><div id='method-getTransformMatrix' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-getTransformMatrix' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-getTransformMatrix' class='name expandable'>getTransformMatrix</a>( <span class='pre'>mtx</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by\n the most recent call t...</div><div class='long'><p>Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by\n the most recent call to updateTexImage.</p>\n\n<p> This transform matrix maps 2D homogeneous texture coordinates of the form (s, t, 0, 1) with s\n and t in the inclusive range [0, 1] to the texture coordinate that should be used to sample\n that location from the texture.  Sampling the texture outside of the range of this transform\n is undefined.</p>\n\n<p> The matrix is stored in column-major order so that it may be passed directly to OpenGL ES via\n the glLoadMatrixf or glUniformMatrix4fv functions.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mtx</span> : Object {float[]}<div class='sub-desc'><p>the array into which the 4x4 matrix will be stored.  The array must have exactly\n     16 elements.</p>\n</div></li></ul></div></div></div><div id='method-isReleased' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-isReleased' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-isReleased' class='name expandable'>isReleased</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the SurfaceTexture was released. ...</div><div class='long'><p>Returns true if the SurfaceTexture was released.\n@see <a href=\"#!/api/android.graphics.SurfaceTexture-method-release\" rel=\"android.graphics.SurfaceTexture-method-release\" class=\"docClass\">release</a>()</p>\n</div></div></div><div id='method-release' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-release' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-release' class='name expandable'>release</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>release() frees all the buffers and puts the SurfaceTexture into the\n 'abandoned' state. ...</div><div class='long'><p>release() frees all the buffers and puts the SurfaceTexture into the\n 'abandoned' state. Once put in this state the SurfaceTexture can never\n leave it. When in the 'abandoned' state, all methods of the\n IGraphicBufferProducer interface will fail with the NO_INIT error.</p>\n\n<p> Note that while calling this method causes all the buffers to be freed\n from the perspective of the the SurfaceTexture, if there are additional\n references on the buffers (e.g. if a buffer is referenced by a client or\n by OpenGL ES as a texture) then those buffer will remain allocated.</p>\n\n<p> Always call this method when you are done with SurfaceTexture. Failing\n to do so may delay resource deallocation for a significant amount of\n time.\n@see <a href=\"#!/api/android.graphics.SurfaceTexture-method-isReleased\" rel=\"android.graphics.SurfaceTexture-method-isReleased\" class=\"docClass\">isReleased</a>()</p>\n</div></div></div><div id='method-releaseTexImage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-releaseTexImage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-releaseTexImage' class='name expandable'>releaseTexImage</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases the the texture content. ...</div><div class='long'><p>Releases the the texture content. This is needed in single buffered mode to allow the image\n content producer to take ownership of the image buffer.\n For more information see boolean).</p>\n</div></div></div><div id='method-setDefaultBufferSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-setDefaultBufferSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-setDefaultBufferSize' class='name expandable'>setDefaultBufferSize</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the default size of the image buffers. ...</div><div class='long'><p>Set the default size of the image buffers.  The image producer may override the buffer size,\n in which case the producer-set buffer size will be used, not the default size set by this\n method.  Both video and camera based image producers do override the size.  This method may\n be used to set the image size when producing images with <a href=\"#!/api/android.graphics.Canvas\" rel=\"android.graphics.Canvas\" class=\"docClass\">android.graphics.Canvas</a> (via\n android.view.Surface.lockCanvas), or OpenGL ES (via an EGLSurface).</p>\n\n<p> The new default buffer size will take effect the next time the image producer requests a\n buffer to fill.  For <a href=\"#!/api/android.graphics.Canvas\" rel=\"android.graphics.Canvas\" class=\"docClass\">android.graphics.Canvas</a> this will be the next time android.view.Surface.lockCanvas is called.  For OpenGL ES, the EGLSurface should be\n destroyed (via eglDestroySurface), made not-current (via eglMakeCurrent), and then recreated\n (via eglCreateWindowSurface) to ensure that the new default size has taken effect.</p>\n\n<p> The width and height parameters must be no greater than the minimum of\n GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see\n glGetIntegerv).\n An error due to invalid dimensions might not be reported until\n updateTexImage() is called.</p>\n</div></div></div><div id='method-setOnFrameAvailableListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-setOnFrameAvailableListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-setOnFrameAvailableListener' class='name expandable'>setOnFrameAvailableListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when a new image frame becomes available to the\n SurfaceTexture. ...</div><div class='long'><p>Register a callback to be invoked when a new image frame becomes available to the\n SurfaceTexture.\n <p>\n If a handler is specified, the callback will be invoked on that handler's thread.\n If no handler is specified, then the callback may be called on an arbitrary thread,\n so it is not safe to call <a href=\"#!/api/android.graphics.SurfaceTexture-method-updateTexImage\" rel=\"android.graphics.SurfaceTexture-method-updateTexImage\" class=\"docClass\">updateTexImage</a> without first binding the OpenGL ES\n context to the thread invoking the callback.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {SurfaceTexture.OnFrameAvailableListener}<div class='sub-desc'><p>The listener to use, or null to remove the listener.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>The handler on which the listener should be invoked, or null\n to use an arbitrary thread.</p>\n</div></li></ul></div></div></div><div id='method-updateTexImage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.SurfaceTexture'>android.graphics.SurfaceTexture</span><br/><a href='source/SurfaceTexture.html#android-graphics-SurfaceTexture-method-updateTexImage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.SurfaceTexture-method-updateTexImage' class='name expandable'>updateTexImage</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Update the texture image to the most recent frame from the image stream. ...</div><div class='long'><p>Update the texture image to the most recent frame from the image stream.  This may only be\n called while the OpenGL ES context that owns the texture is current on the calling thread.\n It will implicitly bind its texture to the GL_TEXTURE_EXTERNAL_OES texture target.</p>\n</div></div></div></div></div></div></div>","meta":{}});