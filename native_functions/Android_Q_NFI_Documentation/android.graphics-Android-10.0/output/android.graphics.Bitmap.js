Ext.data.JsonP.android_graphics_Bitmap({"tagname":"class","name":"android.graphics.Bitmap","autodetected":{},"files":[{"filename":"Bitmap.js","href":"Bitmap.html#android-graphics-Bitmap"}],"extends":"java.lang.Object","members":[{"name":"CREATOR","tagname":"property","owner":"android.graphics.Bitmap","id":"property-CREATOR","meta":{}},{"name":"DENSITY_NONE","tagname":"property","owner":"android.graphics.Bitmap","id":"property-DENSITY_NONE","meta":{}},{"name":"compress","tagname":"method","owner":"android.graphics.Bitmap","id":"method-compress","meta":{}},{"name":"copy","tagname":"method","owner":"android.graphics.Bitmap","id":"method-copy","meta":{}},{"name":"copyPixelsFromBuffer","tagname":"method","owner":"android.graphics.Bitmap","id":"method-copyPixelsFromBuffer","meta":{}},{"name":"copyPixelsToBuffer","tagname":"method","owner":"android.graphics.Bitmap","id":"method-copyPixelsToBuffer","meta":{}},{"name":"createBitmap","tagname":"method","owner":"android.graphics.Bitmap","id":"method-createBitmap","meta":{}},{"name":"createScaledBitmap","tagname":"method","owner":"android.graphics.Bitmap","id":"method-createScaledBitmap","meta":{}},{"name":"describeContents","tagname":"method","owner":"android.graphics.Bitmap","id":"method-describeContents","meta":{}},{"name":"eraseColor","tagname":"method","owner":"android.graphics.Bitmap","id":"method-eraseColor","meta":{}},{"name":"extractAlpha","tagname":"method","owner":"android.graphics.Bitmap","id":"method-extractAlpha","meta":{}},{"name":"getAllocationByteCount","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getAllocationByteCount","meta":{}},{"name":"getByteCount","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getByteCount","meta":{}},{"name":"getColor","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getColor","meta":{}},{"name":"getColorSpace","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getColorSpace","meta":{}},{"name":"getConfig","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getConfig","meta":{}},{"name":"getDensity","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getDensity","meta":{}},{"name":"getGenerationId","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getGenerationId","meta":{}},{"name":"getHeight","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getHeight","meta":{}},{"name":"getNinePatchChunk","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getNinePatchChunk","meta":{}},{"name":"getPixel","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getPixel","meta":{}},{"name":"getPixels","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getPixels","meta":{}},{"name":"getRowBytes","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getRowBytes","meta":{}},{"name":"getScaledHeight","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getScaledHeight","meta":{}},{"name":"getScaledWidth","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getScaledWidth","meta":{}},{"name":"getWidth","tagname":"method","owner":"android.graphics.Bitmap","id":"method-getWidth","meta":{}},{"name":"hasAlpha","tagname":"method","owner":"android.graphics.Bitmap","id":"method-hasAlpha","meta":{}},{"name":"hasMipMap","tagname":"method","owner":"android.graphics.Bitmap","id":"method-hasMipMap","meta":{}},{"name":"isMutable","tagname":"method","owner":"android.graphics.Bitmap","id":"method-isMutable","meta":{}},{"name":"isPremultiplied","tagname":"method","owner":"android.graphics.Bitmap","id":"method-isPremultiplied","meta":{}},{"name":"isRecycled","tagname":"method","owner":"android.graphics.Bitmap","id":"method-isRecycled","meta":{}},{"name":"prepareToDraw","tagname":"method","owner":"android.graphics.Bitmap","id":"method-prepareToDraw","meta":{}},{"name":"reconfigure","tagname":"method","owner":"android.graphics.Bitmap","id":"method-reconfigure","meta":{}},{"name":"recycle","tagname":"method","owner":"android.graphics.Bitmap","id":"method-recycle","meta":{}},{"name":"sameAs","tagname":"method","owner":"android.graphics.Bitmap","id":"method-sameAs","meta":{}},{"name":"setColorSpace","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setColorSpace","meta":{}},{"name":"setConfig","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setConfig","meta":{}},{"name":"setDensity","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setDensity","meta":{}},{"name":"setHasAlpha","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setHasAlpha","meta":{}},{"name":"setHasMipMap","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setHasMipMap","meta":{}},{"name":"setHeight","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setHeight","meta":{}},{"name":"setPixel","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setPixel","meta":{}},{"name":"setPixels","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setPixels","meta":{}},{"name":"setPremultiplied","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setPremultiplied","meta":{}},{"name":"setWidth","tagname":"method","owner":"android.graphics.Bitmap","id":"method-setWidth","meta":{}},{"name":"writeToParcel","tagname":"method","owner":"android.graphics.Bitmap","id":"method-writeToParcel","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.Bitmap","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.Bitmap</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Bitmap.html#android-graphics-Bitmap' target='_blank'>Bitmap.js</a></div></pre><div class='doc-contents'><p>implements android.os.Parcelable</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-CREATOR' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-property-CREATOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-property-CREATOR' class='name expandable'>CREATOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-DENSITY_NONE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-property-DENSITY_NONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-property-DENSITY_NONE' class='name expandable'>DENSITY_NONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates that the bitmap was created for an unknown pixel density. ...</div><div class='long'><p>Indicates that the bitmap was created for an unknown pixel density.</p>\n\n<p>@see Bitmap#getDensity()\n@see Bitmap#setDensity(int)</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-compress' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-compress' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-compress' class='name expandable'>compress</a>( <span class='pre'>format, quality, stream</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Write a compressed version of the bitmap to the specified outputstream. ...</div><div class='long'><p>Write a compressed version of the bitmap to the specified outputstream.\n If this returns true, the bitmap can be reconstructed by passing a\n corresponding inputstream to BitmapFactory.decodeStream(). Note: not\n all Formats support all bitmap configs directly, so it is possible that\n the returned bitmap from BitmapFactory could be in a different bitdepth,\n and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque\n pixels).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>format</span> : Object {Bitmap.CompressFormat}<div class='sub-desc'><p>The format of the compressed image</p>\n</div></li><li><span class='pre'>quality</span> : Number<div class='sub-desc'><p>Hint to the compressor, 0-100. 0 meaning compress for\n                 small size, 100 meaning compress for max quality. Some\n                 formats, like PNG which is lossless, will ignore the\n                 quality setting</p>\n</div></li><li><span class='pre'>stream</span> : Object {OutputStream}<div class='sub-desc'><p>The outputstream to write the compressed data.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if successfully compressed to the specified stream.</p>\n</div></li></ul></div></div></div><div id='method-copy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-copy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-copy' class='name expandable'>copy</a>( <span class='pre'>config, isMutable</span> ) : Object {android.graphics.Bitmap}<span class=\"signature\"></span></div><div class='description'><div class='short'>Tries to make a new bitmap based on the dimensions of this bitmap,\n setting the new bitmap's config to the one specif...</div><div class='long'><p>Tries to make a new bitmap based on the dimensions of this bitmap,\n setting the new bitmap's config to the one specified, and then copying\n this bitmap's pixels into the new bitmap. If the conversion is not\n supported, or the allocator fails, then this returns NULL.  The returned\n bitmap has the same density and color space as the original, except in\n the following cases. When copying to <a href=\"#!/api/android.graphics.Bitmap.Config-property-ALPHA_8\" rel=\"android.graphics.Bitmap.Config-property-ALPHA_8\" class=\"docClass\">android.graphics.Bitmap.Config.ALPHA_8</a>, the color\n space is dropped. When copying to or from <a href=\"#!/api/android.graphics.Bitmap.Config-property-RGBA_F16\" rel=\"android.graphics.Bitmap.Config-property-RGBA_F16\" class=\"docClass\">android.graphics.Bitmap.Config.RGBA_F16</a>,\n EXTENDED or non-EXTENDED variants may be adjusted as appropriate.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object {Bitmap.Config}<div class='sub-desc'><p>The desired config for the resulting bitmap</p>\n</div></li><li><span class='pre'>isMutable</span> : Boolean<div class='sub-desc'><p>True if the resulting bitmap should be mutable (i.e.\n                  its pixels can be modified)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Bitmap}</span><div class='sub-desc'><p>the new bitmap, or null if the copy could not be made.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if config is Config.HARDWARE and isMutable is true</p>\n</div></li></ul></div></div></div><div id='method-copyPixelsFromBuffer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-copyPixelsFromBuffer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-copyPixelsFromBuffer' class='name expandable'>copyPixelsFromBuffer</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Copy the pixels from the buffer, beginning at the current position,\n overwriting the bitmap's pixels. ...</div><div class='long'><p>Copy the pixels from the buffer, beginning at the current position,\n overwriting the bitmap's pixels. The data in the buffer is not changed\n in any way (unlike setPixels(), which converts from unpremultipled 32bit\n to whatever the bitmap's native format is. The pixels in the source\n buffer are assumed to be in the bitmap's color space.</p>\n\n\n<p> <p>After this method returns, the current position of the buffer is\n updated: the position is incremented by the number of elements read from\n the buffer. If you need to read the bitmap from the buffer again you must\n first rewind the buffer.</p></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the bitmap's config is Config.HARDWARE</p>\n</div></li></ul></div></div></div><div id='method-copyPixelsToBuffer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-copyPixelsToBuffer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-copyPixelsToBuffer' class='name expandable'>copyPixelsToBuffer</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Copy the bitmap's pixels into the specified buffer (allocated by the\n caller). ...</div><div class='long'><p>Copy the bitmap's pixels into the specified buffer (allocated by the\n caller). An exception is thrown if the buffer is not large enough to\n hold all of the pixels (taking into account the number of bytes per\n pixel) or if the Buffer subclass is not one of the support types\n (ByteBuffer, ShortBuffer, IntBuffer).</p>\n\n\n<p> <p>The content of the bitmap is copied into the buffer as-is. This means\n that if this bitmap stores its pixels pre-multiplied\n (see <a href=\"#!/api/android.graphics.Bitmap-method-isPremultiplied\" rel=\"android.graphics.Bitmap-method-isPremultiplied\" class=\"docClass\">isPremultiplied</a>(), the values in the buffer will also be\n pre-multiplied. The pixels remain in the color space of the bitmap.</p>\n <p>After this method returns, the current position of the buffer is\n updated: the position is incremented by the number of elements written\n in the buffer.</p></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the bitmap's config is Config.HARDWARE</p>\n</div></li></ul></div></div></div><div id='method-createBitmap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-createBitmap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-createBitmap' class='name expandable'>createBitmap</a>( <span class='pre'>source, width, height, config</span> ) : Object {android.graphics.Bitmap}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a Bitmap from the given android.graphics.Picture source of recorded drawing commands. ...</div><div class='long'><p>Creates a Bitmap from the given <a href=\"#!/api/android.graphics.Picture\" rel=\"android.graphics.Picture\" class=\"docClass\">android.graphics.Picture</a> source of recorded drawing commands.</p>\n\n<p> The bitmap will be immutable with the given width and height. If the width and height\n are not the same as the Picture's width &amp; height, the Picture will be scaled to\n fit the given width and height.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : Object {Picture}<div class='sub-desc'><p>The recorded Picture of drawing commands that will be\n               drawn into the returned Bitmap.</p>\n</div></li><li><span class='pre'>width</span> : Number<div class='sub-desc'><p>The width of the bitmap to create. The picture's width will be\n              scaled to match if necessary.</p>\n</div></li><li><span class='pre'>height</span> : Number<div class='sub-desc'><p>The height of the bitmap to create. The picture's height will be\n              scaled to match if necessary.</p>\n</div></li><li><span class='pre'>config</span> : Object {Bitmap.Config}<div class='sub-desc'><p>The Config of the created bitmap.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Bitmap}</span><div class='sub-desc'><p>An immutable bitmap with a configuration specified by the config parameter</p>\n</div></li></ul></div></div></div><div id='method-createScaledBitmap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-createScaledBitmap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-createScaledBitmap' class='name expandable'>createScaledBitmap</a>( <span class='pre'>src, dstWidth, dstHeight, filter</span> ) : Object {android.graphics.Bitmap}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new bitmap, scaled from an existing bitmap, when possible. ...</div><div class='long'><p>Creates a new bitmap, scaled from an existing bitmap, when possible. If the\n specified width and height are the same as the current width and height of\n the source bitmap, the source bitmap is returned and no new bitmap is\n created.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object {Bitmap}<div class='sub-desc'><p>The source bitmap.</p>\n</div></li><li><span class='pre'>dstWidth</span> : Number<div class='sub-desc'><p>The new bitmap's desired width.</p>\n</div></li><li><span class='pre'>dstHeight</span> : Number<div class='sub-desc'><p>The new bitmap's desired height.</p>\n</div></li><li><span class='pre'>filter</span> : Boolean<div class='sub-desc'><p>Whether or not bilinear filtering should be used when scaling the\n                  bitmap. If this is true then bilinear filtering will be used when\n                  scaling which has better image quality at the cost of worse performance.\n                  If this is false then nearest-neighbor scaling is used instead which\n                  will have worse image quality but is faster. Recommended default\n                  is to set filter to 'true' as the cost of bilinear filtering is\n                  typically minimal and the improved image quality is significant.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Bitmap}</span><div class='sub-desc'><p>The new scaled bitmap or the source bitmap if no scaling is required.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if width is &lt;= 0, or height is &lt;= 0</p>\n</div></li></ul></div></div></div><div id='method-describeContents' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-describeContents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-describeContents' class='name expandable'>describeContents</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>No special parcel contents. ...</div><div class='long'><p>No special parcel contents.</p>\n</div></div></div><div id='method-eraseColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-eraseColor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-eraseColor' class='name expandable'>eraseColor</a>( <span class='pre'>color</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Fills the bitmap's pixels with the specified {@code ColorLong}. ...</div><div class='long'><p>Fills the bitmap's pixels with the specified {@code ColorLong}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>color</span> : Number<div class='sub-desc'><p>The color to fill as packed by the Color class.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the bitmap is not mutable.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the color space encoded in the\n                                  {@code ColorLong} is invalid or unknown.</p>\n</div></li></ul></div></div></div><div id='method-extractAlpha' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-extractAlpha' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-extractAlpha' class='name expandable'>extractAlpha</a>( <span class='pre'>paint, offsetXY</span> ) : Object {android.graphics.Bitmap}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new bitmap that captures the alpha values of the original. ...</div><div class='long'><p>Returns a new bitmap that captures the alpha values of the original.\n These values may be affected by the optional Paint parameter, which\n can contain its own alpha, and may also contain a MaskFilter which\n could change the actual dimensions of the resulting bitmap (e.g.\n a blur maskfilter might enlarge the resulting bitmap). If offsetXY\n is not null, it returns the amount to offset the returned bitmap so\n that it will logically align with the original. For example, if the\n paint contains a blur of radius 2, then offsetXY[] would contains\n -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then\n drawing the original would result in the blur visually aligning with\n the original.</p>\n\n<p> <p>The initial density of the returned bitmap is the same as the original's.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>paint</span> : Object {Paint}<div class='sub-desc'><p>Optional paint used to modify the alpha values in the\n              resulting bitmap. Pass null for default behavior.</p>\n</div></li><li><span class='pre'>offsetXY</span> : Object {int[]}<div class='sub-desc'><p>Optional array that returns the X (index 0) and Y\n                 (index 1) offset needed to position the returned bitmap\n                 so that it visually lines up with the original.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Bitmap}</span><div class='sub-desc'><p>new bitmap containing the (optionally modified by paint) alpha\n         channel of the original bitmap. This may be drawn with\n         Canvas.drawBitmap(), where the color(s) will be taken from the\n         paint that is passed to the draw call.</p>\n</div></li></ul></div></div></div><div id='method-getAllocationByteCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getAllocationByteCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getAllocationByteCount' class='name expandable'>getAllocationByteCount</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the size of the allocated memory used to store this bitmap's pixels. ...</div><div class='long'><p>Returns the size of the allocated memory used to store this bitmap's pixels.</p>\n\n<p> <p>This can be larger than the result of <a href=\"#!/api/android.graphics.Bitmap-method-getByteCount\" rel=\"android.graphics.Bitmap-method-getByteCount\" class=\"docClass\">getByteCount</a>() if a bitmap is reused to\n decode other bitmaps of smaller size, or by manual reconfiguration. See int, android.graphics.Bitmap.Config), <a href=\"#!/api/android.graphics.Bitmap-method-setWidth\" rel=\"android.graphics.Bitmap-method-setWidth\" class=\"docClass\">setWidth</a>(int), <a href=\"#!/api/android.graphics.Bitmap-method-setHeight\" rel=\"android.graphics.Bitmap-method-setHeight\" class=\"docClass\">setHeight</a>(int), setConfig(Bitmap.Config), and <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inBitmap\" rel=\"android.graphics.BitmapFactory.Options-property-inBitmap\" class=\"docClass\">android.graphics.BitmapFactory.Options.inBitmap</a>. If a bitmap is not modified in this way, this value will be\n the same as that returned by <a href=\"#!/api/android.graphics.Bitmap-method-getByteCount\" rel=\"android.graphics.Bitmap-method-getByteCount\" class=\"docClass\">getByteCount</a>().</p></p>\n\n<p> <p>This value will not change over the lifetime of a Bitmap.</p>\n@see <a href=\"#!/api/android.graphics.Bitmap-method-reconfigure\" rel=\"android.graphics.Bitmap-method-reconfigure\" class=\"docClass\">reconfigure</a>(int, int, Config)</p>\n</div></div></div><div id='method-getByteCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getByteCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getByteCount' class='name expandable'>getByteCount</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the minimum number of bytes that can be used to store this bitmap's pixels. ...</div><div class='long'><p>Returns the minimum number of bytes that can be used to store this bitmap's pixels.</p>\n\n<p> <p>As of android.os.Build.VERSION_CODES.KITKAT, the result of this method can\n no longer be used to determine memory usage of a bitmap. See <a href=\"#!/api/android.graphics.Bitmap-method-getAllocationByteCount\" rel=\"android.graphics.Bitmap-method-getAllocationByteCount\" class=\"docClass\">getAllocationByteCount</a>().</p></p>\n</div></div></div><div id='method-getColor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getColor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getColor' class='name expandable'>getColor</a>( <span class='pre'>x, y</span> ) : Object {android.graphics.Color}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the android.graphics.Color at the specified location. ...</div><div class='long'><p>Returns the <a href=\"#!/api/android.graphics.Color\" rel=\"android.graphics.Color\" class=\"docClass\">android.graphics.Color</a> at the specified location. Throws an exception\n if x or y are out of bounds (negative or >= to the width or height\n respectively).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The x coordinate (0...width-1) of the pixel to return</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>The y coordinate (0...height-1) of the pixel to return</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Color}</span><div class='sub-desc'><p>The Color at the specified coordinate</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if x, y exceed the bitmap's bounds</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the bitmap's config is Config.HARDWARE</p>\n</div></li></ul></div></div></div><div id='method-getColorSpace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getColorSpace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getColorSpace' class='name expandable'>getColorSpace</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the color space associated with this bitmap. ...</div><div class='long'><p>Returns the color space associated with this bitmap. If the color\n space is unknown, this method returns null.</p>\n</div></div></div><div id='method-getConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getConfig' class='name expandable'>getConfig</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>If the bitmap's internal config is in one of the public formats, return\n that config, otherwise return null. ...</div><div class='long'><p>If the bitmap's internal config is in one of the public formats, return\n that config, otherwise return null.</p>\n</div></div></div><div id='method-getDensity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getDensity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getDensity' class='name expandable'>getDensity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the density for this bitmap. ...</div><div class='long'><p>Returns the density for this bitmap.</p>\n\n\n<p> <p>The default density is the same density as the current display,\n unless the current application does not support different screen\n densities in which case it is\n android.util.DisplayMetrics.DENSITY_DEFAULT.  Note that\n compatibility mode is determined by the application that was initially\n loaded into a process -- applications that share the same process should\n all have the same compatibility, or ensure they explicitly set the\n density of their bitmaps appropriately.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>A scaling factor of the default density or <a href=\"#!/api/android.graphics.Bitmap-property-DENSITY_NONE\" rel=\"android.graphics.Bitmap-property-DENSITY_NONE\" class=\"docClass\">DENSITY_NONE</a>\n         if the scaling factor is unknown.\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setDensity\" rel=\"android.graphics.Bitmap-method-setDensity\" class=\"docClass\">setDensity</a>(int)\n@see android.util.DisplayMetrics#DENSITY_DEFAULT\n@see android.util.DisplayMetrics#densityDpi\n@see <a href=\"#!/api/android.graphics.Bitmap-property-DENSITY_NONE\" rel=\"android.graphics.Bitmap-property-DENSITY_NONE\" class=\"docClass\">DENSITY_NONE</a></p>\n</div></li></ul></div></div></div><div id='method-getGenerationId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getGenerationId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getGenerationId' class='name expandable'>getGenerationId</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the generation ID of this bitmap. ...</div><div class='long'><p>Returns the generation ID of this bitmap. The generation ID changes\n whenever the bitmap is modified. This can be used as an efficient way to\n check if a bitmap has changed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current generation ID for this bitmap.</p>\n</div></li></ul></div></div></div><div id='method-getHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getHeight' class='name expandable'>getHeight</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the bitmap's height ...</div><div class='long'><p>Returns the bitmap's height</p>\n</div></div></div><div id='method-getNinePatchChunk' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getNinePatchChunk' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getNinePatchChunk' class='name expandable'>getNinePatchChunk</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an optional array of private data, used by the UI system for\n some bitmaps. ...</div><div class='long'><p>Returns an optional array of private data, used by the UI system for\n some bitmaps. Not intended to be called by applications.</p>\n</div></div></div><div id='method-getPixel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getPixel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getPixel' class='name expandable'>getPixel</a>( <span class='pre'>x, y</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the android.graphics.Color at the specified location. ...</div><div class='long'><p>Returns the <a href=\"#!/api/android.graphics.Color\" rel=\"android.graphics.Color\" class=\"docClass\">android.graphics.Color</a> at the specified location. Throws an exception\n if x or y are out of bounds (negative or >= to the width or height\n respectively). The returned color is a non-premultiplied ARGB value in\n the <a href=\"#!/api/android.graphics.ColorSpace.Named-property-SRGB\" rel=\"android.graphics.ColorSpace.Named-property-SRGB\" class=\"docClass\">sRGB</a> color space.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The x coordinate (0...width-1) of the pixel to return</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>The y coordinate (0...height-1) of the pixel to return</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The argb Color at the specified coordinate</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if x, y exceed the bitmap's bounds</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the bitmap's config is Config.HARDWARE</p>\n</div></li></ul></div></div></div><div id='method-getPixels' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getPixels' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getPixels' class='name expandable'>getPixels</a>( <span class='pre'>pixels, offset, stride, x, y, width, height</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns in pixels[] a copy of the data in the bitmap. ...</div><div class='long'><p>Returns in pixels[] a copy of the data in the bitmap. Each value is\n a packed int representing a <a href=\"#!/api/android.graphics.Color\" rel=\"android.graphics.Color\" class=\"docClass\">android.graphics.Color</a>. The stride parameter allows\n the caller to allow for gaps in the returned pixels array between\n rows. For normal packed results, just pass width for the stride value.\n The returned colors are non-premultiplied ARGB values in the\n <a href=\"#!/api/android.graphics.ColorSpace.Named-property-SRGB\" rel=\"android.graphics.ColorSpace.Named-property-SRGB\" class=\"docClass\">sRGB</a> color space.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pixels</span> : Object {int[]}<div class='sub-desc'><p>The array to receive the bitmap's colors</p>\n</div></li><li><span class='pre'>offset</span> : Number<div class='sub-desc'><p>The first index to write into pixels[]</p>\n</div></li><li><span class='pre'>stride</span> : Number<div class='sub-desc'><p>The number of entries in pixels[] to skip between\n                 rows (must be >= bitmap's width). Can be negative.</p>\n</div></li><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The x coordinate of the first pixel to read from\n                 the bitmap</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>The y coordinate of the first pixel to read from\n                 the bitmap</p>\n</div></li><li><span class='pre'>width</span> : Number<div class='sub-desc'><p>The number of pixels to read from each row</p>\n</div></li><li><span class='pre'>height</span> : Number<div class='sub-desc'><p>The number of rows to read</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if x, y, width, height exceed the\n         bounds of the bitmap, or if abs(stride) &lt; width.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArrayIndexOutOfBoundsException if the pixels array is too small\n         to receive the specified number of pixels.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the bitmap's config is Config.HARDWARE</p>\n</div></li></ul></div></div></div><div id='method-getRowBytes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getRowBytes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getRowBytes' class='name expandable'>getRowBytes</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the number of bytes between rows in the bitmap's pixels. ...</div><div class='long'><p>Return the number of bytes between rows in the bitmap's pixels. Note that\n this refers to the pixels as stored natively by the bitmap. If you call\n getPixels() or setPixels(), then the pixels are uniformly treated as\n 32bit values, packed according to the Color class.</p>\n\n<p> <p>As of android.os.Build.VERSION_CODES.KITKAT, this method\n should not be used to calculate the memory usage of the bitmap. Instead,\n see <a href=\"#!/api/android.graphics.Bitmap-method-getAllocationByteCount\" rel=\"android.graphics.Bitmap-method-getAllocationByteCount\" class=\"docClass\">getAllocationByteCount</a>().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>number of bytes between rows of the native bitmap pixels.</p>\n</div></li></ul></div></div></div><div id='method-getScaledHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getScaledHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getScaledHeight' class='name expandable'>getScaledHeight</a>( <span class='pre'>targetDensity</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method that returns the height of this bitmap divided\n by the density scale factor. ...</div><div class='long'><p>Convenience method that returns the height of this bitmap divided\n by the density scale factor.</p>\n\n<p> Returns the bitmap's height multiplied by the ratio of the target density to the bitmap's\n source density</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>targetDensity</span> : Number<div class='sub-desc'><p>The density of the target canvas of the bitmap.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The scaled height of this bitmap, according to the density scale factor.</p>\n</div></li></ul></div></div></div><div id='method-getScaledWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getScaledWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getScaledWidth' class='name expandable'>getScaledWidth</a>( <span class='pre'>targetDensity</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method that returns the width of this bitmap divided\n by the density scale factor. ...</div><div class='long'><p>Convenience method that returns the width of this bitmap divided\n by the density scale factor.</p>\n\n<p> Returns the bitmap's width multiplied by the ratio of the target density to the bitmap's\n source density</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>targetDensity</span> : Number<div class='sub-desc'><p>The density of the target canvas of the bitmap.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The scaled width of this bitmap, according to the density scale factor.</p>\n</div></li></ul></div></div></div><div id='method-getWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-getWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-getWidth' class='name expandable'>getWidth</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the bitmap's width ...</div><div class='long'><p>Returns the bitmap's width</p>\n</div></div></div><div id='method-hasAlpha' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-hasAlpha' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-hasAlpha' class='name expandable'>hasAlpha</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the bitmap's config supports per-pixel alpha, and\n if the pixels may contain non-opaque alpha values. ...</div><div class='long'><p>Returns true if the bitmap's config supports per-pixel alpha, and\n if the pixels may contain non-opaque alpha values. For some configs,\n this is always false (e.g. RGB_565), since they do not support per-pixel\n alpha. However, for configs that do, the bitmap may be flagged to be\n known that all of its pixels are opaque. In this case hasAlpha() will\n also return false. If a config such as ARGB_8888 is not so flagged,\n it will return true by default.</p>\n</div></div></div><div id='method-hasMipMap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-hasMipMap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-hasMipMap' class='name expandable'>hasMipMap</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether the renderer responsible for drawing this\n bitmap should attempt to use mipmaps when this bitmap is...</div><div class='long'><p>Indicates whether the renderer responsible for drawing this\n bitmap should attempt to use mipmaps when this bitmap is drawn\n scaled down.</p>\n\n<p> If you know that you are going to draw this bitmap at less than\n 50% of its original size, you may be able to obtain a higher\n quality</p>\n\n<p> This property is only a suggestion that can be ignored by the\n renderer. It is not guaranteed to have any effect.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the renderer should attempt to use mipmaps,\n         false otherwise\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setHasMipMap\" rel=\"android.graphics.Bitmap-method-setHasMipMap\" class=\"docClass\">setHasMipMap</a>(boolean)</p>\n</div></li></ul></div></div></div><div id='method-isMutable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-isMutable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-isMutable' class='name expandable'>isMutable</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the bitmap is marked as mutable (i.e.&nbsp;can be drawn into) ...</div><div class='long'><p>Returns true if the bitmap is marked as mutable (i.e.&nbsp;can be drawn into)</p>\n</div></div></div><div id='method-isPremultiplied' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-isPremultiplied' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-isPremultiplied' class='name expandable'>isPremultiplied</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether pixels stored in this bitmaps are stored pre-multiplied. ...</div><div class='long'><p>Indicates whether pixels stored in this bitmaps are stored pre-multiplied.\n When a pixel is pre-multiplied, the RGB components have been multiplied by\n the alpha component. For instance, if the original color is a 50%\n translucent red <code>(128, 255, 0, 0)</code>, the pre-multiplied form is\n <code>(128, 128, 0, 0)</code>.</p>\n\n\n<p> <p>This method always returns false if <a href=\"#!/api/android.graphics.Bitmap-method-getConfig\" rel=\"android.graphics.Bitmap-method-getConfig\" class=\"docClass\">getConfig</a>() is\n <a href=\"#!/api/android.graphics.Bitmap.Config-property-RGB_565\" rel=\"android.graphics.Bitmap.Config-property-RGB_565\" class=\"docClass\">android.graphics.Bitmap.Config.RGB_565</a>.</p></p>\n\n<p> <p>The return value is undefined if <a href=\"#!/api/android.graphics.Bitmap-method-getConfig\" rel=\"android.graphics.Bitmap-method-getConfig\" class=\"docClass\">getConfig</a>() is\n <a href=\"#!/api/android.graphics.Bitmap.Config-property-ALPHA_8\" rel=\"android.graphics.Bitmap.Config-property-ALPHA_8\" class=\"docClass\">android.graphics.Bitmap.Config.ALPHA_8</a>.</p></p>\n\n<p> <p>This method only returns true if <a href=\"#!/api/android.graphics.Bitmap-method-hasAlpha\" rel=\"android.graphics.Bitmap-method-hasAlpha\" class=\"docClass\">hasAlpha</a>() returns true.\n A bitmap with no alpha channel can be used both as a pre-multiplied and\n as a non pre-multiplied bitmap.</p></p>\n\n<p> <p>Only pre-multiplied bitmaps may be drawn by the view system or\n <a href=\"#!/api/android.graphics.Canvas\" rel=\"android.graphics.Canvas\" class=\"docClass\">android.graphics.Canvas</a>. If a non-pre-multiplied bitmap with an alpha channel is\n drawn to a Canvas, a RuntimeException will be thrown.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the underlying pixels have been pre-multiplied, false\n         otherwise\n@see Bitmap#setPremultiplied(boolean)\n@see BitmapFactory.Options#inPremultiplied</p>\n</div></li></ul></div></div></div><div id='method-isRecycled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-isRecycled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-isRecycled' class='name expandable'>isRecycled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this bitmap has been recycled. ...</div><div class='long'><p>Returns true if this bitmap has been recycled. If so, then it is an error\n to try to access its pixels, and the bitmap will not draw.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the bitmap has been recycled</p>\n</div></li></ul></div></div></div><div id='method-prepareToDraw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-prepareToDraw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-prepareToDraw' class='name expandable'>prepareToDraw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Builds caches associated with the bitmap that are used for drawing it. ...</div><div class='long'><p>Builds caches associated with the bitmap that are used for drawing it.</p>\n\n<p> <p>Starting in android.os.Build.VERSION_CODES.N, this call initiates an asynchronous\n upload to the GPU on RenderThread, if the Bitmap is not already uploaded. With Hardware\n Acceleration, Bitmaps must be uploaded to the GPU in order to be rendered. This is done by\n default the first time a Bitmap is drawn, but the process can take several milliseconds,\n depending on the size of the Bitmap. Each time a Bitmap is modified and drawn again, it must\n be re-uploaded.</p></p>\n\n<p> <p>Calling this method in advance can save time in the first frame it's used. For example, it\n is recommended to call this on an image decoding worker thread when a decoded Bitmap is about\n to be displayed. It is recommended to make any pre-draw modifications to the Bitmap before\n calling this method, so the cached, uploaded copy may be reused without re-uploading.</p></p>\n\n<p> In android.os.Build.VERSION_CODES.KITKAT and below, for purgeable bitmaps, this call\n would attempt to ensure that the pixels have been decoded.</p>\n</div></div></div><div id='method-reconfigure' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-reconfigure' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-reconfigure' class='name expandable'>reconfigure</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Modifies the bitmap to have a specified width, height, and android.graphics.Bitmap.Config, without affecting the unde...</div><div class='long'><p>Modifies the bitmap to have a specified width, height, and <a href=\"#!/api/android.graphics.Bitmap.Config\" rel=\"android.graphics.Bitmap.Config\" class=\"docClass\">android.graphics.Bitmap.Config</a>, without affecting the underlying allocation backing the bitmap.\n Bitmap pixel data is not re-initialized for the new configuration.</p>\n\n\n<p> <p>This method can be used to avoid allocating a new bitmap, instead\n reusing an existing bitmap's allocation for a new configuration of equal\n or lesser size. If the Bitmap's allocation isn't large enough to support\n the new configuration, an IllegalArgumentException will be thrown and the\n bitmap will not be modified.</p></p>\n\n<p> <p>The result of <a href=\"#!/api/android.graphics.Bitmap-method-getByteCount\" rel=\"android.graphics.Bitmap-method-getByteCount\" class=\"docClass\">getByteCount</a>() will reflect the new configuration,\n while <a href=\"#!/api/android.graphics.Bitmap-method-getAllocationByteCount\" rel=\"android.graphics.Bitmap-method-getAllocationByteCount\" class=\"docClass\">getAllocationByteCount</a>() will reflect that of the initial\n configuration.</p></p>\n\n<p> <p>Note: This may change this result of hasAlpha(). When converting to 565,\n the new bitmap will always be considered opaque. When converting from 565,\n the new bitmap will be considered non-opaque, and will respect the value\n set by setPremultiplied().</p></p>\n\n<p> <p>WARNING: This method should NOT be called on a bitmap currently in use\n by the view system, Canvas, or the AndroidBitmap NDK API. It does not\n make guarantees about how the underlying pixel buffer is remapped to the\n new config, just that the allocation is reused. Additionally, the view\n system does not account for bitmap properties being modifying during use,\n e.g. while attached to drawables.</p></p>\n\n<p> <p>In order to safely ensure that a Bitmap is no longer in use by the\n View system it is necessary to wait for a draw pass to occur after\n invalidate()'ing any view that had previously drawn the Bitmap in the last\n draw pass due to hardware acceleration's caching of draw commands. As\n an example, here is how this can be done for an ImageView:\n <pre class=\"prettyprint\">\n      ImageView myImageView = ...;\n      final Bitmap myBitmap = ...;\n      myImageView.setImageDrawable(null);\n      myImageView.post(new Runnable() {\n          public void run() {\n              // myBitmap is now no longer in use by the ImageView\n              // and can be safely reconfigured.\n              myBitmap.reconfigure(...);\n          }\n      });\n </pre></p>\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setWidth\" rel=\"android.graphics.Bitmap-method-setWidth\" class=\"docClass\">setWidth</a>(int)\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setHeight\" rel=\"android.graphics.Bitmap-method-setHeight\" class=\"docClass\">setHeight</a>(int)\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setConfig\" rel=\"android.graphics.Bitmap-method-setConfig\" class=\"docClass\">setConfig</a>(Config)</p>\n</div></div></div><div id='method-recycle' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-recycle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-recycle' class='name expandable'>recycle</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Free the native object associated with this bitmap, and clear the\n reference to the pixel data. ...</div><div class='long'><p>Free the native object associated with this bitmap, and clear the\n reference to the pixel data. This will not free the pixel data synchronously;\n it simply allows it to be garbage collected if there are no other references.\n The bitmap is marked as \"dead\", meaning it will throw an exception if\n getPixels() or setPixels() is called, and will draw nothing. This operation\n cannot be reversed, so it should only be called if you are sure there are no\n further uses for the bitmap. This is an advanced call, and normally need\n not be called, since the normal GC process will free up this memory when\n there are no more references to this bitmap.</p>\n</div></div></div><div id='method-sameAs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-sameAs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-sameAs' class='name expandable'>sameAs</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Given another bitmap, return true if it has the same dimensions, config,\n  and pixel data as this bitmap. ...</div><div class='long'><p>Given another bitmap, return true if it has the same dimensions, config,\n  and pixel data as this bitmap. If any of those differ, return false.\n  If other is null, return false.</p>\n</div></div></div><div id='method-setColorSpace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setColorSpace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setColorSpace' class='name expandable'>setColorSpace</a>( <span class='pre'>colorSpace, colorSpace</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Modifies the bitmap to have the specified android.graphics.ColorSpace, without\n affecting the underlying allocation b...</div><div class='long'><p>Modifies the bitmap to have the specified <a href=\"#!/api/android.graphics.ColorSpace\" rel=\"android.graphics.ColorSpace\" class=\"docClass\">android.graphics.ColorSpace</a>, without\n affecting the underlying allocation backing the bitmap.</p>\n\n\n<p> <p>This affects how the framework will interpret the color at each pixel. A bitmap\n with <a href=\"#!/api/android.graphics.Bitmap.Config-property-ALPHA_8\" rel=\"android.graphics.Bitmap.Config-property-ALPHA_8\" class=\"docClass\">android.graphics.Bitmap.Config.ALPHA_8</a> never has a color space, since a color space does not\n affect the alpha channel. Other {@code Config}s must always have a non-null\n {@code ColorSpace}.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>colorSpace</span> : Object {ColorSpace}<div class='sub-desc'><p>to assign to the bitmap</p>\n</div></li><li><span class='pre'>colorSpace</span> : Object<div class='sub-desc'><p>to assign to the bitmap</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the {@code Config} (returned by getConfig())\n         is Config.ALPHA_8.</p>\n</div></li></ul></div></div></div><div id='method-setConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setConfig' class='name expandable'>setConfig</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for calling int, android.graphics.Bitmap.Config)\n with the current height and width. ...</div><div class='long'><p>Convenience method for calling int, android.graphics.Bitmap.Config)\n with the current height and width.</p>\n\n\n<p> <p>WARNING: this method should not be used on bitmaps currently used by\n the view system, see int, android.graphics.Bitmap.Config) for more\n details.</p>\n@see <a href=\"#!/api/android.graphics.Bitmap-method-reconfigure\" rel=\"android.graphics.Bitmap-method-reconfigure\" class=\"docClass\">reconfigure</a>(int, int, Config)\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setWidth\" rel=\"android.graphics.Bitmap-method-setWidth\" class=\"docClass\">setWidth</a>(int)\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setHeight\" rel=\"android.graphics.Bitmap-method-setHeight\" class=\"docClass\">setHeight</a>(int)</p>\n</div></div></div><div id='method-setDensity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setDensity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setDensity' class='name expandable'>setDensity</a>( <span class='pre'>density</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies the density for this bitmap. ...</div><div class='long'><p>Specifies the density for this bitmap.  When the bitmap is\n drawn to a Canvas that also has a density, it will be scaled\n appropriately.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>density</span> : Number<div class='sub-desc'><p>The density scaling factor to use with this bitmap or\n        <a href=\"#!/api/android.graphics.Bitmap-property-DENSITY_NONE\" rel=\"android.graphics.Bitmap-property-DENSITY_NONE\" class=\"docClass\">DENSITY_NONE</a> if the density is unknown.\n@see <a href=\"#!/api/android.graphics.Bitmap-method-getDensity\" rel=\"android.graphics.Bitmap-method-getDensity\" class=\"docClass\">getDensity</a>()\n@see android.util.DisplayMetrics#DENSITY_DEFAULT\n@see android.util.DisplayMetrics#densityDpi\n@see <a href=\"#!/api/android.graphics.Bitmap-property-DENSITY_NONE\" rel=\"android.graphics.Bitmap-property-DENSITY_NONE\" class=\"docClass\">DENSITY_NONE</a></p>\n</div></li></ul></div></div></div><div id='method-setHasAlpha' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setHasAlpha' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setHasAlpha' class='name expandable'>setHasAlpha</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tell the bitmap if all of the pixels are known to be opaque (false)\n or if some of the pixels may contain non-opaque ...</div><div class='long'><p>Tell the bitmap if all of the pixels are known to be opaque (false)\n or if some of the pixels may contain non-opaque alpha values (true).\n Note, for some configs (e.g. RGB_565) this call is ignored, since it\n does not support per-pixel alpha values.</p>\n\n<p> This is meant as a drawing hint, as in some cases a bitmap that is known\n to be opaque can take a faster drawing case than one that may have\n non-opaque per-pixel alpha values.</p>\n</div></div></div><div id='method-setHasMipMap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setHasMipMap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setHasMipMap' class='name expandable'>setHasMipMap</a>( <span class='pre'>hasMipMap</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a hint for the renderer responsible for drawing this bitmap\n indicating that it should attempt to use mipmaps whe...</div><div class='long'><p>Set a hint for the renderer responsible for drawing this bitmap\n indicating that it should attempt to use mipmaps when this bitmap\n is drawn scaled down.</p>\n\n<p> If you know that you are going to draw this bitmap at less than\n 50% of its original size, you may be able to obtain a higher\n quality by turning this property on.</p>\n\n<p> Note that if the renderer respects this hint it might have to\n allocate extra memory to hold the mipmap levels for this bitmap.</p>\n\n<p> This property is only a suggestion that can be ignored by the\n renderer. It is not guaranteed to have any effect.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hasMipMap</span> : Boolean<div class='sub-desc'><p>indicates whether the renderer should attempt\n                  to use mipmaps\n@see <a href=\"#!/api/android.graphics.Bitmap-method-hasMipMap\" rel=\"android.graphics.Bitmap-method-hasMipMap\" class=\"docClass\">hasMipMap</a>()</p>\n</div></li></ul></div></div></div><div id='method-setHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setHeight' class='name expandable'>setHeight</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for calling int, android.graphics.Bitmap.Config)\n with the current width and config. ...</div><div class='long'><p>Convenience method for calling int, android.graphics.Bitmap.Config)\n with the current width and config.</p>\n\n\n<p> <p>WARNING: this method should not be used on bitmaps currently used by\n the view system, see int, android.graphics.Bitmap.Config) for more\n details.</p>\n@see <a href=\"#!/api/android.graphics.Bitmap-method-reconfigure\" rel=\"android.graphics.Bitmap-method-reconfigure\" class=\"docClass\">reconfigure</a>(int, int, Config)\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setWidth\" rel=\"android.graphics.Bitmap-method-setWidth\" class=\"docClass\">setWidth</a>(int)\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setConfig\" rel=\"android.graphics.Bitmap-method-setConfig\" class=\"docClass\">setConfig</a>(Config)</p>\n</div></div></div><div id='method-setPixel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setPixel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setPixel' class='name expandable'>setPixel</a>( <span class='pre'>x, y, color</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Write the specified android.graphics.Color into the bitmap (assuming it is\n mutable) at the x,y coordinate. ...</div><div class='long'><p>Write the specified <a href=\"#!/api/android.graphics.Color\" rel=\"android.graphics.Color\" class=\"docClass\">android.graphics.Color</a> into the bitmap (assuming it is\n mutable) at the x,y coordinate. The color must be a\n non-premultiplied ARGB value in the <a href=\"#!/api/android.graphics.ColorSpace.Named-property-SRGB\" rel=\"android.graphics.ColorSpace.Named-property-SRGB\" class=\"docClass\">sRGB</a>\n color space.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The x coordinate of the pixel to replace (0...width-1)</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>The y coordinate of the pixel to replace (0...height-1)</p>\n</div></li><li><span class='pre'>color</span> : Number<div class='sub-desc'><p>The ARGB color to write into the bitmap</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the bitmap is not mutable</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if x, y are outside of the bitmap's\n         bounds.</p>\n</div></li></ul></div></div></div><div id='method-setPixels' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setPixels' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setPixels' class='name expandable'>setPixels</a>( <span class='pre'>pixels, offset, stride, x, y, width, height</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Replace pixels in the bitmap with the colors in the array. ...</div><div class='long'><p>Replace pixels in the bitmap with the colors in the array. Each element\n in the array is a packed int representing a non-premultiplied ARGB\n <a href=\"#!/api/android.graphics.Color\" rel=\"android.graphics.Color\" class=\"docClass\">android.graphics.Color</a> in the <a href=\"#!/api/android.graphics.ColorSpace.Named-property-SRGB\" rel=\"android.graphics.ColorSpace.Named-property-SRGB\" class=\"docClass\">sRGB</a> color space.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pixels</span> : Object {int[]}<div class='sub-desc'><p>The colors to write to the bitmap</p>\n</div></li><li><span class='pre'>offset</span> : Number<div class='sub-desc'><p>The index of the first color to read from pixels[]</p>\n</div></li><li><span class='pre'>stride</span> : Number<div class='sub-desc'><p>The number of colors in pixels[] to skip between rows.\n                 Normally this value will be the same as the width of\n                 the bitmap, but it can be larger (or negative).</p>\n</div></li><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The x coordinate of the first pixel to write to in\n                 the bitmap.</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>The y coordinate of the first pixel to write to in\n                 the bitmap.</p>\n</div></li><li><span class='pre'>width</span> : Number<div class='sub-desc'><p>The number of colors to copy from pixels[] per row</p>\n</div></li><li><span class='pre'>height</span> : Number<div class='sub-desc'><p>The number of rows to write to the bitmap</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the bitmap is not mutable</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if x, y, width, height are outside of\n         the bitmap's bounds.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArrayIndexOutOfBoundsException if the pixels array is too small\n         to receive the specified number of pixels.</p>\n</div></li></ul></div></div></div><div id='method-setPremultiplied' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setPremultiplied' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setPremultiplied' class='name expandable'>setPremultiplied</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether the bitmap should treat its data as pre-multiplied. ...</div><div class='long'><p>Sets whether the bitmap should treat its data as pre-multiplied.</p>\n\n<p> <p>Bitmaps are always treated as pre-multiplied by the view system and\n <a href=\"#!/api/android.graphics.Canvas\" rel=\"android.graphics.Canvas\" class=\"docClass\">android.graphics.Canvas</a> for performance reasons. Storing un-pre-multiplied data in\n a Bitmap (through <a href=\"#!/api/android.graphics.Bitmap-method-setPixel\" rel=\"android.graphics.Bitmap-method-setPixel\" class=\"docClass\">setPixel</a>, <a href=\"#!/api/android.graphics.Bitmap-method-setPixels\" rel=\"android.graphics.Bitmap-method-setPixels\" class=\"docClass\">setPixels</a>, or <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inPremultiplied\" rel=\"android.graphics.BitmapFactory.Options-property-inPremultiplied\" class=\"docClass\">android.graphics.BitmapFactory.Options.inPremultiplied</a>)\n can lead to incorrect blending if drawn by the framework.</p></p>\n\n<p> <p>This method will not affect the behavior of a bitmap without an alpha\n channel, or if <a href=\"#!/api/android.graphics.Bitmap-method-hasAlpha\" rel=\"android.graphics.Bitmap-method-hasAlpha\" class=\"docClass\">hasAlpha</a>() returns false.</p></p>\n\n<p> <p>Calling <a href=\"#!/api/android.graphics.Bitmap-method-createBitmap\" rel=\"android.graphics.Bitmap-method-createBitmap\" class=\"docClass\">createBitmap</a> or <a href=\"#!/api/android.graphics.Bitmap-method-createScaledBitmap\" rel=\"android.graphics.Bitmap-method-createScaledBitmap\" class=\"docClass\">createScaledBitmap</a> with a source\n Bitmap whose colors are not pre-multiplied may result in a RuntimeException,\n since those functions require drawing the source, which is not supported for\n un-pre-multiplied Bitmaps.</p>\n@see Bitmap#isPremultiplied()\n@see BitmapFactory.Options#inPremultiplied</p>\n</div></div></div><div id='method-setWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-setWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-setWidth' class='name expandable'>setWidth</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method for calling int, android.graphics.Bitmap.Config)\n with the current height and config. ...</div><div class='long'><p>Convenience method for calling int, android.graphics.Bitmap.Config)\n with the current height and config.</p>\n\n\n<p> <p>WARNING: this method should not be used on bitmaps currently used by\n the view system, see int, android.graphics.Bitmap.Config) for more\n details.</p>\n@see <a href=\"#!/api/android.graphics.Bitmap-method-reconfigure\" rel=\"android.graphics.Bitmap-method-reconfigure\" class=\"docClass\">reconfigure</a>(int, int, Config)\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setHeight\" rel=\"android.graphics.Bitmap-method-setHeight\" class=\"docClass\">setHeight</a>(int)\n@see <a href=\"#!/api/android.graphics.Bitmap-method-setConfig\" rel=\"android.graphics.Bitmap-method-setConfig\" class=\"docClass\">setConfig</a>(Config)</p>\n</div></div></div><div id='method-writeToParcel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.Bitmap'>android.graphics.Bitmap</span><br/><a href='source/Bitmap.html#android-graphics-Bitmap-method-writeToParcel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.Bitmap-method-writeToParcel' class='name expandable'>writeToParcel</a>( <span class='pre'>p</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Write the bitmap and its pixels to the parcel. ...</div><div class='long'><p>Write the bitmap and its pixels to the parcel. The bitmap can be\n rebuilt from the parcel by calling CREATOR.createFromParcel().</p>\n\n<p> If this bitmap is <a href=\"#!/api/android.graphics.Bitmap.Config-property-HARDWARE\" rel=\"android.graphics.Bitmap.Config-property-HARDWARE\" class=\"docClass\">android.graphics.Bitmap.Config.HARDWARE</a>, it may be unparceled with a different pixel\n format (e.g. 565, 8888), but the content will be preserved to the best quality permitted\n by the final pixel format</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>p</span> : Object {Parcel}<div class='sub-desc'><p>Parcel object to write the bitmap data into</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});