Ext.data.JsonP.android_graphics_HardwareRenderer({"tagname":"class","name":"android.graphics.HardwareRenderer","autodetected":{},"files":[{"filename":"HardwareRenderer.js","href":"HardwareRenderer.html#android-graphics-HardwareRenderer"}],"extends":"java.lang.Object","members":[{"name":"SYNC_CONTEXT_IS_STOPPED","tagname":"property","owner":"android.graphics.HardwareRenderer","id":"property-SYNC_CONTEXT_IS_STOPPED","meta":{}},{"name":"SYNC_FRAME_DROPPED","tagname":"property","owner":"android.graphics.HardwareRenderer","id":"property-SYNC_FRAME_DROPPED","meta":{}},{"name":"SYNC_LOST_SURFACE_REWARD_IF_FOUND","tagname":"property","owner":"android.graphics.HardwareRenderer","id":"property-SYNC_LOST_SURFACE_REWARD_IF_FOUND","meta":{}},{"name":"SYNC_OK","tagname":"property","owner":"android.graphics.HardwareRenderer","id":"property-SYNC_OK","meta":{}},{"name":"SYNC_REDRAW_REQUESTED","tagname":"property","owner":"android.graphics.HardwareRenderer","id":"property-SYNC_REDRAW_REQUESTED","meta":{}},{"name":"clearContent","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-clearContent","meta":{}},{"name":"createRenderRequest","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-createRenderRequest","meta":{}},{"name":"destroy","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-destroy","meta":{}},{"name":"isOpaque","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-isOpaque","meta":{}},{"name":"notifyFramePending","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-notifyFramePending","meta":{}},{"name":"setContentRoot","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-setContentRoot","meta":{}},{"name":"setLightSourceAlpha","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-setLightSourceAlpha","meta":{}},{"name":"setLightSourceGeometry","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-setLightSourceGeometry","meta":{}},{"name":"setName","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-setName","meta":{}},{"name":"setOpaque","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-setOpaque","meta":{}},{"name":"setSurface","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-setSurface","meta":{}},{"name":"start","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-start","meta":{}},{"name":"stop","tagname":"method","owner":"android.graphics.HardwareRenderer","id":"method-stop","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.HardwareRenderer","short_doc":"Creates an instance of a hardware-accelerated renderer. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.HardwareRenderer</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer' target='_blank'>HardwareRenderer.js</a></div></pre><div class='doc-contents'><p>Creates an instance of a hardware-accelerated renderer. This is used to render a scene built\n from <a href=\"#!/api/android.graphics.RenderNode\" rel=\"android.graphics.RenderNode\" class=\"docClass\">android.graphics.RenderNode</a>'s to an output android.view.Surface. There can be as many\n HardwareRenderer instances as desired.</p>\n\n\n<p> <h3>Resources &amp; lifecycle</h3></p>\n\n<p> <p>All HardwareRenderer instances share a common render thread. The render thread contains\n the GPU context &amp; resources necessary to do GPU-accelerated rendering. As such, the first\n HardwareRenderer created comes with the cost of also creating the associated GPU contexts,\n however each incremental HardwareRenderer thereafter is fairly cheap. The expected usage\n is to have a HardwareRenderer instance for every active Surface. For example\n when an Activity shows a Dialog the system internally will use 2 hardware renderers, both\n of which may be drawing at the same time.</p></p>\n\n<p> <p>NOTE: Due to the shared, cooperative nature of the render thread it is critical that\n any Surface used must have a prompt, reliable consuming side. System-provided\n consumers such as android.view.SurfaceView,\n android.view.Window.takeSurface(SurfaceHolder.Callback2),\n or android.view.TextureView all fit this requirement. However if custom consumers\n are used such as when using <a href=\"#!/api/android.graphics.SurfaceTexture\" rel=\"android.graphics.SurfaceTexture\" class=\"docClass\">android.graphics.SurfaceTexture</a> or android.media.ImageReader\n it is the app's responsibility to ensure that they consume updates promptly and rapidly.\n Failure to do so will cause the render thread to stall on that surface, blocking all\n HardwareRenderer instances.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-SYNC_CONTEXT_IS_STOPPED' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-property-SYNC_CONTEXT_IS_STOPPED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-property-SYNC_CONTEXT_IS_STOPPED' class='name expandable'>SYNC_CONTEXT_IS_STOPPED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The hardware renderer has been set to a \"stopped\" state. ...</div><div class='long'><p>The hardware renderer has been set to a \"stopped\" state. If this is returned then the\nrendering content has been synced, however a frame was not produced.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-SYNC_FRAME_DROPPED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-property-SYNC_FRAME_DROPPED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-property-SYNC_FRAME_DROPPED' class='name expandable'>SYNC_FRAME_DROPPED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The content was synced but the renderer has declined to produce a frame in this vsync\ninterval. ...</div><div class='long'><p>The content was synced but the renderer has declined to produce a frame in this vsync\ninterval. This can happen if a frame was already drawn in this vsync or if the renderer\nis outrunning the frame consumer. The renderer will internally re-schedule itself\nto render a frame in the next vsync signal, so the caller does not need to do anything\nin response to this signal.</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-SYNC_LOST_SURFACE_REWARD_IF_FOUND' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-property-SYNC_LOST_SURFACE_REWARD_IF_FOUND' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-property-SYNC_LOST_SURFACE_REWARD_IF_FOUND' class='name expandable'>SYNC_LOST_SURFACE_REWARD_IF_FOUND</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The hardware renderer no longer has a valid android.view.Surface to render to. ...</div><div class='long'><p>The hardware renderer no longer has a valid android.view.Surface to render to.\nThis can happen if Surface.release() was called. The user should no longer\nattempt to call syncAndDraw until a new surface has been provided by calling\nsetSurface.</p>\n\n<p><p>Spoiler: the reward is GPU-accelerated drawing, better find that Surface!</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-SYNC_OK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-property-SYNC_OK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-property-SYNC_OK' class='name expandable'>SYNC_OK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Nothing interesting to report. ...</div><div class='long'><p>Nothing interesting to report. Sync &amp; draw kicked off</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-SYNC_REDRAW_REQUESTED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-property-SYNC_REDRAW_REQUESTED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-property-SYNC_REDRAW_REQUESTED' class='name expandable'>SYNC_REDRAW_REQUESTED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The renderer is requesting a redraw. ...</div><div class='long'><p>The renderer is requesting a redraw. This can occur if there's an animation that's running\nin the RenderNode tree and the hardware renderer is unable to self-animate.</p>\n\n<p><p>If this is returned from syncAndDraw the expectation is that syncAndDraw\nwill be called again on the next vsync signal.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-clearContent' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-clearContent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-clearContent' class='name expandable'>clearContent</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Destroys all the display lists associated with the current rendering content. ...</div><div class='long'><p>Destroys all the display lists associated with the current rendering content.\n This includes releasing a reference to the current content root RenderNode. It will\n therefore be necessary to call <a href=\"#!/api/android.graphics.HardwareRenderer-method-setContentRoot\" rel=\"android.graphics.HardwareRenderer-method-setContentRoot\" class=\"docClass\">setContentRoot</a>(RenderNode) in order to resume\n rendering after calling this, along with re-recording the display lists for the\n RenderNode tree.</p>\n\n<p> <p>It is recommended, but not necessary, to use this in combination with lifecycle events\n such as Activity.onStop() and Activity.onStart() or in response to\n android.content.ComponentCallbacks2.onTrimMemory(int) signals such as\n android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN</p>\n\n<p> See also <a href=\"#!/api/android.graphics.HardwareRenderer-method-stop\" rel=\"android.graphics.HardwareRenderer-method-stop\" class=\"docClass\">stop</a>().</p>\n</div></div></div><div id='method-createRenderRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-createRenderRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-createRenderRequest' class='name expandable'>createRenderRequest</a>( <span class='pre'></span> ) : Object {android.graphics.HardwareRenderer.FrameRenderRequest}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a android.graphics.HardwareRenderer.FrameRenderRequest that can be used to render a new frame. ...</div><div class='long'><p>Returns a <a href=\"#!/api/android.graphics.HardwareRenderer.FrameRenderRequest\" rel=\"android.graphics.HardwareRenderer.FrameRenderRequest\" class=\"docClass\">android.graphics.HardwareRenderer.FrameRenderRequest</a> that can be used to render a new frame. This is used\n to synchronize the RenderNode content provided by <a href=\"#!/api/android.graphics.HardwareRenderer-method-setContentRoot\" rel=\"android.graphics.HardwareRenderer-method-setContentRoot\" class=\"docClass\">setContentRoot</a>(RenderNode) with\n the RenderThread and then renders a single frame to the Surface set with\n <a href=\"#!/api/android.graphics.HardwareRenderer-method-setSurface\" rel=\"android.graphics.HardwareRenderer-method-setSurface\" class=\"docClass\">setSurface</a>(Surface).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.HardwareRenderer.FrameRenderRequest}</span><div class='sub-desc'><p>An instance of FrameRenderRequest. The instance may be reused for every\n frame, so the caller should not hold onto it for longer than a single render request.</p>\n</div></li></ul></div></div></div><div id='method-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-destroy' class='name expandable'>destroy</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Destroys the rendering context of this HardwareRenderer. ...</div><div class='long'><p>Destroys the rendering context of this HardwareRenderer. This destroys the resources\n associated with this renderer and releases the currently set Surface. This must\n be called when this HardwareRenderer is no longer needed.</p>\n\n<p> <p>The renderer may be restored from this state by setting a new Surface, setting\n new rendering content with <a href=\"#!/api/android.graphics.HardwareRenderer-method-setContentRoot\" rel=\"android.graphics.HardwareRenderer-method-setContentRoot\" class=\"docClass\">setContentRoot</a>(RenderNode), and resuming\n rendering by issuing a new <a href=\"#!/api/android.graphics.HardwareRenderer.FrameRenderRequest\" rel=\"android.graphics.HardwareRenderer.FrameRenderRequest\" class=\"docClass\">android.graphics.HardwareRenderer.FrameRenderRequest</a>.</p>\n\n<p> <p>It is recommended to call this in response to callbacks such as\n android.view.SurfaceHolder.Callback.surfaceDestroyed(SurfaceHolder).</p>\n\n<p> <p>Note that if there are any outstanding frame commit callbacks they may never being\n invoked if the frame was deferred to a later vsync.</p>\n</div></div></div><div id='method-isOpaque' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-isOpaque' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-isOpaque' class='name expandable'>isOpaque</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Whether or not the renderer is set to be opaque. ...</div><div class='long'><p>Whether or not the renderer is set to be opaque. See <a href=\"#!/api/android.graphics.HardwareRenderer-method-setOpaque\" rel=\"android.graphics.HardwareRenderer-method-setOpaque\" class=\"docClass\">setOpaque</a>(boolean)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the renderer is opaque, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-notifyFramePending' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-notifyFramePending' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-notifyFramePending' class='name expandable'>notifyFramePending</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notifies the hardware renderer that a call to android.graphics.HardwareRenderer.FrameRenderRequest.syncAndDraw() will...</div><div class='long'><p>Notifies the hardware renderer that a call to android.graphics.HardwareRenderer.FrameRenderRequest.syncAndDraw() will\n be coming soon. This is used to help schedule when RenderThread-driven animations will\n happen as the renderer wants to avoid producing more than one frame per vsync signal.</p>\n</div></div></div><div id='method-setContentRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-setContentRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-setContentRoot' class='name expandable'>setContentRoot</a>( <span class='pre'>content</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the content root to render. ...</div><div class='long'><p>Sets the content root to render. It is not necessary to call this whenever the content\n recording changes. Any mutations to the RenderNode content, or any of the RenderNode's\n contained within the content node, will be applied whenever a new <a href=\"#!/api/android.graphics.HardwareRenderer.FrameRenderRequest\" rel=\"android.graphics.HardwareRenderer.FrameRenderRequest\" class=\"docClass\">android.graphics.HardwareRenderer.FrameRenderRequest</a>\n is issued via <a href=\"#!/api/android.graphics.HardwareRenderer-method-createRenderRequest\" rel=\"android.graphics.HardwareRenderer-method-createRenderRequest\" class=\"docClass\">createRenderRequest</a>() and android.graphics.HardwareRenderer.FrameRenderRequest.syncAndDraw().</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>content</span> : Object {RenderNode}<div class='sub-desc'><p>The content to set as the root RenderNode. If null the content root is removed\n                and the renderer will draw nothing.</p>\n</div></li></ul></div></div></div><div id='method-setLightSourceAlpha' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-setLightSourceAlpha' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-setLightSourceAlpha' class='name expandable'>setLightSourceAlpha</a>( <span class='pre'>ambientShadowAlpha, spotShadowAlpha</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Configures the ambient &amp; spot shadow alphas. ...</div><div class='long'><p>Configures the ambient &amp; spot shadow alphas. This is the alpha used when the shadow\n has max alpha, and ramps down from the values provided to zero.</p>\n\n<p> <p>These values are typically provided by the current theme, see\n android.R.attr.spotShadowAlpha and android.R.attr.ambientShadowAlpha.</p>\n\n<p> <p>This must be set at least once along with\n float, float, float) before shadows will work.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ambientShadowAlpha</span> : Number<div class='sub-desc'><p>The alpha for the ambient shadow. If unsure, a reasonable default\n                           is 0.039f.</p>\n</div></li><li><span class='pre'>spotShadowAlpha</span> : Number<div class='sub-desc'><p>The alpha for the spot shadow. If unsure, a reasonable default is\n                           0.19f.</p>\n</div></li></ul></div></div></div><div id='method-setLightSourceGeometry' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-setLightSourceGeometry' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-setLightSourceGeometry' class='name expandable'>setLightSourceGeometry</a>( <span class='pre'>lightX, lightY, lightZ, lightRadius</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the center of the light source. ...</div><div class='long'><p>Sets the center of the light source. The light source point controls the directionality\n and shape of shadows rendered by RenderNode Z &amp; elevation.</p>\n\n<p> <p>The platform's recommendation is to set lightX to 'displayWidth / 2f - windowLeft', set\n lightY to 0 - windowTop, lightZ set to 600dp, and lightRadius to 800dp.</p>\n\n<p> <p>The light source should be setup both as part of initial configuration, and whenever\n the window moves to ensure the light source stays anchored in display space instead\n of in window space.</p>\n\n<p> <p>This must be set at least once along with float)\n before shadows will work.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lightX</span> : Number<div class='sub-desc'><p>The X position of the light source</p>\n</div></li><li><span class='pre'>lightY</span> : Number<div class='sub-desc'><p>The Y position of the light source</p>\n</div></li><li><span class='pre'>lightZ</span> : Number<div class='sub-desc'><p>The Z position of the light source. Must be >= 0.</p>\n</div></li><li><span class='pre'>lightRadius</span> : Number<div class='sub-desc'><p>The radius of the light source. Smaller radius will have sharper edges,\n                    larger radius will have softer shadows.</p>\n</div></li></ul></div></div></div><div id='method-setName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-setName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-setName' class='name expandable'>setName</a>( <span class='pre'>name</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets a name for this renderer. ...</div><div class='long'><p>Sets a name for this renderer. This is used to identify this renderer instance\n when reporting debug information such as the per-window frame time metrics\n reported by 'adb shell dumpsys gfxinfo [package] framestats'</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The debug name to use for this HardwareRenderer instance</p>\n</div></li></ul></div></div></div><div id='method-setOpaque' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-setOpaque' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-setOpaque' class='name expandable'>setOpaque</a>( <span class='pre'>opaque</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Change the HardwareRenderer's opacity. ...</div><div class='long'><p>Change the HardwareRenderer's opacity. Will take effect on the next frame produced.</p>\n\n<p> <p>If the renderer is set to opaque it is the app's responsibility to ensure that the\n content renders to every pixel of the Surface, otherwise corruption may result. Note that\n this includes ensuring that the first draw of any given pixel does not attempt to blend\n against the destination. If this is false then the hardware renderer will clear to\n transparent at the start of every frame.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>opaque</span> : Boolean<div class='sub-desc'><p>true if the content rendered is opaque, false if the renderer should clear\n               to transparent before rendering</p>\n</div></li></ul></div></div></div><div id='method-setSurface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-setSurface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-setSurface' class='name expandable'>setSurface</a>( <span class='pre'>surface</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The surface to render into. ...</div><div class='long'><p>The surface to render into. The surface is assumed to be associated with the display and\n as such is still driven by vsync signals such as those from\n android.view.Choreographer and that it has a native refresh rate matching that of\n the display's (typically 60hz).</p>\n\n\n<p> <p>NOTE: Due to the shared, cooperative nature of the render thread it is critical that\n any Surface used must have a prompt, reliable consuming side. System-provided\n consumers such as android.view.SurfaceView,\n android.view.Window.takeSurface(SurfaceHolder.Callback2),\n or android.view.TextureView all fit this requirement. However if custom consumers\n are used such as when using <a href=\"#!/api/android.graphics.SurfaceTexture\" rel=\"android.graphics.SurfaceTexture\" class=\"docClass\">android.graphics.SurfaceTexture</a> or android.media.ImageReader\n it is the app's responsibility to ensure that they consume updates promptly and rapidly.\n Failure to do so will cause the render thread to stall on that surface, blocking all\n HardwareRenderer instances.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>surface</span> : Object {Surface}<div class='sub-desc'><p>The surface to render into. If null then rendering will be stopped. If\n                non-null then Surface.isValid() must be true.</p>\n</div></li></ul></div></div></div><div id='method-start' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-start' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-start' class='name expandable'>start</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resumes rendering into the surface. ...</div><div class='long'><p>Resumes rendering into the surface. Any pending rendering requests\n will produce a new frame at the next vsync signal.</p>\n\n<p> <p>This is useful in combination with lifecycle events such as Activity.onStart().\n See <a href=\"#!/api/android.graphics.HardwareRenderer-method-stop\" rel=\"android.graphics.HardwareRenderer-method-stop\" class=\"docClass\">stop</a>() for stopping rendering.</p>\n</div></div></div><div id='method-stop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.HardwareRenderer'>android.graphics.HardwareRenderer</span><br/><a href='source/HardwareRenderer.html#android-graphics-HardwareRenderer-method-stop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.HardwareRenderer-method-stop' class='name expandable'>stop</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Hard stops rendering into the surface. ...</div><div class='long'><p>Hard stops rendering into the surface. If the renderer is stopped it will\n block any attempt to render. Calls to android.graphics.HardwareRenderer.FrameRenderRequest.syncAndDraw() will\n still sync over the latest rendering content, however they will not render and instead\n <a href=\"#!/api/android.graphics.HardwareRenderer-property-SYNC_CONTEXT_IS_STOPPED\" rel=\"android.graphics.HardwareRenderer-property-SYNC_CONTEXT_IS_STOPPED\" class=\"docClass\">SYNC_CONTEXT_IS_STOPPED</a> will be returned.</p>\n\n<p> <p>This is useful in combination with lifecycle events such as Activity.onStop().\n See <a href=\"#!/api/android.graphics.HardwareRenderer-method-start\" rel=\"android.graphics.HardwareRenderer-method-start\" class=\"docClass\">start</a>() for resuming rendering.</p>\n</div></div></div></div></div></div></div>","meta":{}});