Ext.data.JsonP.android_graphics_ColorSpace_Renderer({"tagname":"class","name":"android.graphics.ColorSpace.Renderer","autodetected":{},"files":[{"filename":"Renderer.js","href":"Renderer.html#android-graphics-ColorSpace-Renderer"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"add","tagname":"method","owner":"android.graphics.ColorSpace.Renderer","id":"method-add","meta":{}},{"name":"clip","tagname":"method","owner":"android.graphics.ColorSpace.Renderer","id":"method-clip","meta":{}},{"name":"render","tagname":"method","owner":"android.graphics.ColorSpace.Renderer","id":"method-render","meta":{}},{"name":"showWhitePoint","tagname":"method","owner":"android.graphics.ColorSpace.Renderer","id":"method-showWhitePoint","meta":{}},{"name":"size","tagname":"method","owner":"android.graphics.ColorSpace.Renderer","id":"method-size","meta":{}},{"name":"uniformChromaticityScale","tagname":"method","owner":"android.graphics.ColorSpace.Renderer","id":"method-uniformChromaticityScale","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.ColorSpace.Renderer","short_doc":"A color space renderer can be used to visualize and compare the gamut and\n white point of one or more color spaces. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.ColorSpace.Renderer</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Renderer.html#android-graphics-ColorSpace-Renderer' target='_blank'>Renderer.js</a></div></pre><div class='doc-contents'><p>A color space renderer can be used to visualize and compare the gamut and\n white point of one or more color spaces. The output is an sRGB <a href=\"#!/api/android.graphics.Bitmap\" rel=\"android.graphics.Bitmap\" class=\"docClass\">android.graphics.Bitmap</a>\n showing a CIE 1931 xyY or a CIE 1976 UCS chromaticity diagram.</p>\n\n\n<p> <p>The following code snippet shows how to compare the <a href=\"#!/api/android.graphics.ColorSpace.Named-property-SRGB\" rel=\"android.graphics.ColorSpace.Named-property-SRGB\" class=\"docClass\">android.graphics.ColorSpace.Named.SRGB</a>\n and <a href=\"#!/api/android.graphics.ColorSpace.Named-property-DCI_P3\" rel=\"android.graphics.ColorSpace.Named-property-DCI_P3\" class=\"docClass\">android.graphics.ColorSpace.Named.DCI_P3</a> color spaces in a CIE 1931 diagram:</p></p>\n\n<p> <pre class=\"prettyprint\">\n Bitmap bitmap = ColorSpace.createRenderer()\n     .size(768)\n     .clip(true)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n     .render();\n </pre>\n <p>\n     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_clipped.png\" />\n     <figcaption style=\"text-align: center;\">sRGB vs DCI-P3</figcaption>\n </p></p>\n\n<p> <p>A renderer can also be used to show the location of specific colors,\n associated with a color space, in the CIE 1931 xyY chromaticity diagram.\n See float, float, float, int) for more information.</p></p>\n\n<p> @see ColorSpace#createRenderer()</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ColorSpace.Renderer'>android.graphics.ColorSpace.Renderer</span><br/><a href='source/Renderer.html#android-graphics-ColorSpace-Renderer-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ColorSpace.Renderer-method-add' class='name expandable'>add</a>( <span class='pre'>colorSpace, r, g, b, pointColor</span> ) : Object {android.graphics.ColorSpace.Renderer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds a color to represent as a point on the chromaticity diagram. ...</div><div class='long'><p>Adds a color to represent as a point on the chromaticity diagram.\n The color is associated with a color space which will be used to\n perform the conversion to CIE XYZ and compute the location of the point\n on the diagram. The point is rendered as a colored circle.</p>\n\n\n<p> <p>The following code snippet and image show an example of calling this\n method to render the location of several sRGB colors as white circles:</p>\n <pre class=\"prettyprint\">\n Bitmap bitmap = ColorSpace.createRenderer()\n     .clip(true)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.0f, 0.1f, 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.1f, 0.1f, 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.2f, 0.1f, 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.3f, 0.1f, 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.4f, 0.1f, 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0.1f, 0.5f, 0.1f, 0xffffffff)\n     .render();\n </pre>\n <p>\n     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_points.png\" />\n     <figcaption style=\"text-align: center;\">\n         Locating colors on the chromaticity diagram\n     </figcaption>\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>colorSpace</span> : Object {ColorSpace}<div class='sub-desc'><p>The color space of the color to locate on the diagram</p>\n</div></li><li><span class='pre'>r</span> : Number<div class='sub-desc'><p>The first component of the color to locate on the diagram</p>\n</div></li><li><span class='pre'>g</span> : Number<div class='sub-desc'><p>The second component of the color to locate on the diagram</p>\n</div></li><li><span class='pre'>b</span> : Number<div class='sub-desc'><p>The third component of the color to locate on the diagram</p>\n</div></li><li><span class='pre'>pointColor</span> : Number<div class='sub-desc'><p>The sRGB color to use to render the point on the diagram</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.ColorSpace.Renderer}</span><div class='sub-desc'><p>This instance of Renderer</p>\n</div></li></ul></div></div></div><div id='method-clip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ColorSpace.Renderer'>android.graphics.ColorSpace.Renderer</span><br/><a href='source/Renderer.html#android-graphics-ColorSpace-Renderer-method-clip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ColorSpace.Renderer-method-clip' class='name expandable'>clip</a>( <span class='pre'>clip</span> ) : Object {android.graphics.ColorSpace.Renderer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines whether the chromaticity diagram should be clipped by the first\n registered color space. ...</div><div class='long'><p>Defines whether the chromaticity diagram should be clipped by the first\n registered color space. The default value is false.</p>\n\n\n<p> <p>The following code snippet and image show the default behavior:</p>\n <pre class=\"prettyprint\">\n Bitmap bitmap = ColorSpace.createRenderer()\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n     .render();\n </pre>\n <p>\n     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_comparison.png\" />\n     <figcaption style=\"text-align: center;\">Clipping disabled</figcaption>\n </p></p>\n\n<p> <p>Here is the same example with clipping enabled:</p>\n <pre class=\"prettyprint\">\n Bitmap bitmap = ColorSpace.createRenderer()\n     .clip(true)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n     .render();\n </pre>\n <p>\n     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_clipped.png\" />\n     <figcaption style=\"text-align: center;\">Clipping enabled</figcaption>\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>clip</span> : Boolean<div class='sub-desc'><p>True to clip the chromaticity diagram to the first registered color space,\n             false otherwise</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.ColorSpace.Renderer}</span><div class='sub-desc'><p>This instance of Renderer</p>\n</div></li></ul></div></div></div><div id='method-render' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ColorSpace.Renderer'>android.graphics.ColorSpace.Renderer</span><br/><a href='source/Renderer.html#android-graphics-ColorSpace-Renderer-method-render' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ColorSpace.Renderer-method-render' class='name expandable'>render</a>( <span class='pre'></span> ) : Object {android.graphics.Bitmap}<span class=\"signature\"></span></div><div class='description'><div class='short'>Renders the int) color spaces and\n float, float, float, int) points registered\n with this renderer. ...</div><div class='long'><p>Renders the int) color spaces and\n float, float, float, int) points registered\n with this renderer. The output bitmap is an sRGB image with the\n dimensions specified by calling <a href=\"#!/api/android.graphics.ColorSpace.Renderer-method-size\" rel=\"android.graphics.ColorSpace.Renderer-method-size\" class=\"docClass\">size</a>(int) (1204x1024px by\n default).</p>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Bitmap}</span><div class='sub-desc'><p>A new non-null Bitmap with the dimensions specified\n        by size(int) (1024x1024 by default)</p>\n</div></li></ul></div></div></div><div id='method-showWhitePoint' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ColorSpace.Renderer'>android.graphics.ColorSpace.Renderer</span><br/><a href='source/Renderer.html#android-graphics-ColorSpace-Renderer-method-showWhitePoint' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ColorSpace.Renderer-method-showWhitePoint' class='name expandable'>showWhitePoint</a>( <span class='pre'>show</span> ) : Object {android.graphics.ColorSpace.Renderer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Shows or hides the white point of each color space in the output bitmap. ...</div><div class='long'><p>Shows or hides the white point of each color space in the output bitmap.\n The default is true.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>show</span> : Boolean<div class='sub-desc'><p>True to show the white point of each color space, false\n             otherwise</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.ColorSpace.Renderer}</span><div class='sub-desc'><p>This instance of Renderer</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ColorSpace.Renderer'>android.graphics.ColorSpace.Renderer</span><br/><a href='source/Renderer.html#android-graphics-ColorSpace-Renderer-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ColorSpace.Renderer-method-size' class='name expandable'>size</a>( <span class='pre'>size</span> ) : Object {android.graphics.ColorSpace.Renderer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the dimensions (width and height) in pixels of the output bitmap. ...</div><div class='long'><p>Sets the dimensions (width and height) in pixels of the output bitmap.\n The size must be at least 128px and defaults to 1024px.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>size</span> : Number<div class='sub-desc'><p>The size in pixels of the output bitmap</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.ColorSpace.Renderer}</span><div class='sub-desc'><p>This instance of Renderer</p>\n</div></li></ul></div></div></div><div id='method-uniformChromaticityScale' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ColorSpace.Renderer'>android.graphics.ColorSpace.Renderer</span><br/><a href='source/Renderer.html#android-graphics-ColorSpace-Renderer-method-uniformChromaticityScale' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ColorSpace.Renderer-method-uniformChromaticityScale' class='name expandable'>uniformChromaticityScale</a>( <span class='pre'>ucs</span> ) : Object {android.graphics.ColorSpace.Renderer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines whether the chromaticity diagram should use the uniform\n chromaticity scale (CIE 1976 UCS). ...</div><div class='long'><p>Defines whether the chromaticity diagram should use the uniform\n chromaticity scale (CIE 1976 UCS). When the uniform chromaticity scale\n is used, the distance between two points on the diagram is approximately\n proportional to the perceived color difference.</p>\n\n\n<p> <p>The following code snippet shows how to enable the uniform chromaticity\n scale. The image below shows the result:</p>\n <pre class=\"prettyprint\">\n Bitmap bitmap = ColorSpace.createRenderer()\n     .uniformChromaticityScale(true)\n     .add(ColorSpace.get(ColorSpace.Named.SRGB), 0xffffffff)\n     .add(ColorSpace.get(ColorSpace.Named.DCI_P3), 0xffffc845)\n     .render();\n </pre>\n <p>\n     <img style=\"display: block; margin: 0 auto;\" src=\"{@docRoot}reference/android/images/graphics/colorspace_ucs.png\" />\n     <figcaption style=\"text-align: center;\">CIE 1976 UCS diagram</figcaption>\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ucs</span> : Boolean<div class='sub-desc'><p>True to render the chromaticity diagram as the CIE 1976 UCS diagram</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.ColorSpace.Renderer}</span><div class='sub-desc'><p>This instance of Renderer</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});