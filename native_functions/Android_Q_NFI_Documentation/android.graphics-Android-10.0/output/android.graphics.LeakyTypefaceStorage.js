Ext.data.JsonP.android_graphics_LeakyTypefaceStorage({"tagname":"class","name":"android.graphics.LeakyTypefaceStorage","autodetected":{},"files":[{"filename":"LeakyTypefaceStorage.js","href":"LeakyTypefaceStorage.html#android-graphics-LeakyTypefaceStorage"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"readTypefaceFromParcel","tagname":"method","owner":"android.graphics.LeakyTypefaceStorage","id":"method-readTypefaceFromParcel","meta":{}},{"name":"writeTypefaceToParcel","tagname":"method","owner":"android.graphics.LeakyTypefaceStorage","id":"method-writeTypefaceToParcel","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.LeakyTypefaceStorage","short_doc":"This class is used for Parceling Typeface object. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.LeakyTypefaceStorage</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/LeakyTypefaceStorage.html#android-graphics-LeakyTypefaceStorage' target='_blank'>LeakyTypefaceStorage.js</a></div></pre><div class='doc-contents'><p>This class is used for Parceling Typeface object.\n Note: Typeface object can not be passed over the process boundary.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-readTypefaceFromParcel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.LeakyTypefaceStorage'>android.graphics.LeakyTypefaceStorage</span><br/><a href='source/LeakyTypefaceStorage.html#android-graphics-LeakyTypefaceStorage-method-readTypefaceFromParcel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.LeakyTypefaceStorage-method-readTypefaceFromParcel' class='name expandable'>readTypefaceFromParcel</a>( <span class='pre'>parcel</span> ) : Object {android.graphics.Typeface}<span class=\"signature\"></span></div><div class='description'><div class='short'>Read typeface from parcel. ...</div><div class='long'><p>Read typeface from parcel.</p>\n\n<p> If the <a href=\"#!/api/android.graphics.Typeface\" rel=\"android.graphics.Typeface\" class=\"docClass\">android.graphics.Typeface</a> was created in another process, this method returns null.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parcel</span> : Object {Parcel}<div class='sub-desc'><p>A Parcel object</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Typeface}</span><div class='sub-desc'><p>A Typeface object.</p>\n</div></li></ul></div></div></div><div id='method-writeTypefaceToParcel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.LeakyTypefaceStorage'>android.graphics.LeakyTypefaceStorage</span><br/><a href='source/LeakyTypefaceStorage.html#android-graphics-LeakyTypefaceStorage-method-writeTypefaceToParcel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.LeakyTypefaceStorage-method-writeTypefaceToParcel' class='name expandable'>writeTypefaceToParcel</a>( <span class='pre'>typeface, parcel</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Write typeface to parcel. ...</div><div class='long'><p>Write typeface to parcel.</p>\n\n<p> You can't transfer Typeface to a different process. readTypefaceFromParcel will\n return {@code null} if the readTypefaceFromParcel is called in a different process.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>typeface</span> : Object {Typeface}<div class='sub-desc'><p>A Typeface to be written.</p>\n</div></li><li><span class='pre'>parcel</span> : Object {Parcel}<div class='sub-desc'><p>A Parcel object.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});