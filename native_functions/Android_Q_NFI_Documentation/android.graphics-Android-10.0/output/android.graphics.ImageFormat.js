Ext.data.JsonP.android_graphics_ImageFormat({"tagname":"class","name":"android.graphics.ImageFormat","autodetected":{},"files":[{"filename":"ImageFormat.js","href":"ImageFormat.html#android-graphics-ImageFormat"}],"extends":"java.lang.Object","members":[{"name":"DEPTH16","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-DEPTH16","meta":{}},{"name":"DEPTH_JPEG","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-DEPTH_JPEG","meta":{}},{"name":"DEPTH_POINT_CLOUD","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-DEPTH_POINT_CLOUD","meta":{}},{"name":"FLEX_RGBA_8888","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-FLEX_RGBA_8888","meta":{}},{"name":"FLEX_RGB_888","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-FLEX_RGB_888","meta":{}},{"name":"HEIC","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-HEIC","meta":{}},{"name":"JPEG","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-JPEG","meta":{}},{"name":"NV16","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-NV16","meta":{}},{"name":"NV21","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-NV21","meta":{}},{"name":"PRIVATE","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-PRIVATE","meta":{}},{"name":"RAW10","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-RAW10","meta":{}},{"name":"RAW12","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-RAW12","meta":{}},{"name":"RAW_PRIVATE","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-RAW_PRIVATE","meta":{}},{"name":"RAW_SENSOR","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-RAW_SENSOR","meta":{}},{"name":"RGB_565","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-RGB_565","meta":{}},{"name":"UNKNOWN","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-UNKNOWN","meta":{}},{"name":"Y8","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-Y8","meta":{}},{"name":"YUV_420_888","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-YUV_420_888","meta":{}},{"name":"YUV_422_888","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-YUV_422_888","meta":{}},{"name":"YUV_444_888","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-YUV_444_888","meta":{}},{"name":"YUY2","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-YUY2","meta":{}},{"name":"YV12","tagname":"property","owner":"android.graphics.ImageFormat","id":"property-YV12","meta":{}},{"name":"getBitsPerPixel","tagname":"method","owner":"android.graphics.ImageFormat","id":"method-getBitsPerPixel","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.ImageFormat","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.ImageFormat</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ImageFormat.html#android-graphics-ImageFormat' target='_blank'>ImageFormat.js</a></div></pre><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DEPTH16' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-DEPTH16' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-DEPTH16' class='name expandable'>DEPTH16</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Android dense depth image format. ...</div><div class='long'><p>Android dense depth image format.</p>\n\n\n\n\n<p>Each pixel is 16 bits, representing a depth ranging measurement from a depth camera or\nsimilar sensor. The 16-bit sample consists of a confidence value and the actual ranging\nmeasurement.</p>\n\n\n\n\n<p>The confidence value is an estimate of correctness for this sample.  It is encoded in the\n3 most significant bits of the sample, with a value of 0 representing 100% confidence, a\nvalue of 1 representing 0% confidence, a value of 2 representing 1/7, a value of 3\nrepresenting 2/7, and so on.</p>\n\n\n\n\n<p>As an example, the following sample extracts the range and confidence from the first pixel\nof a DEPTH16-format android.media.Image, and converts the confidence to a\nfloating-point value between 0 and 1.f inclusive, with 1.f representing maximum confidence:\n\n<pre>   ShortBuffer shortDepthBuffer = img.getPlanes()[0].getBuffer().asShortBuffer();\n   short depthSample = shortDepthBuffer.get()\n   short depthRange = (short) (depthSample & 0x1FFF);\n   short depthConfidence = (short) ((depthSample >> 13) & 0x7);\n   float depthPercentage = depthConfidence == 0 ? 1.f : (depthConfidence - 1) / 7.f;\n</pre>\n</p>\n\n\n\n\n<p>This format assumes\n<ul>\n<li>an even width</li>\n<li>an even height</li>\n<li>a horizontal stride multiple of 16 pixels</li>\n</ul>\n</p>\n\n\n\n\n<pre> y_size = stride * height </pre>\n\n\n<p>When produced by a camera, the units for the range are millimeters.</p>\n<p>Defaults to: <code>&quot;1144402265&quot;</code></p></div></div></div><div id='property-DEPTH_JPEG' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-DEPTH_JPEG' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-DEPTH_JPEG' class='name expandable'>DEPTH_JPEG</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Depth augmented compressed JPEG format. ...</div><div class='long'><p>Depth augmented compressed JPEG format.</p>\n\n<p>JPEG compressed main image along with XMP embedded depth metadata\nfollowing ISO 16684-1:2011(E).</p>\n\n<p>Defaults to: <code>&quot;1768253795&quot;</code></p></div></div></div><div id='property-DEPTH_POINT_CLOUD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-DEPTH_POINT_CLOUD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-DEPTH_POINT_CLOUD' class='name expandable'>DEPTH_POINT_CLOUD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Android sparse depth point cloud format. ...</div><div class='long'><p>Android sparse depth point cloud format.</p>\n\n<p>A variable-length list of 3D points plus a confidence value, with each point represented\nby four floats; first the X, Y, Z position coordinates, and then the confidence value.</p>\n\n\n\n\n<p><p>The number of points is {@code (size of the buffer in bytes) / 16}.</p>\n\n<p><p>The coordinate system and units of the position values depend on the source of the point\ncloud data. The confidence value is between 0.f and 1.f, inclusive, with 0 representing 0%\nconfidence and 1.f representing 100% confidence in the measured position values.</p></p>\n\n<p><p>As an example, the following code extracts the first depth point in a DEPTH_POINT_CLOUD\nformat android.media.Image:\n<pre>   FloatBuffer floatDepthBuffer = img.getPlanes()[0].getBuffer().asFloatBuffer();\n   float x = floatDepthBuffer.get();\n   float y = floatDepthBuffer.get();\n   float z = floatDepthBuffer.get();\n   float confidence = floatDepthBuffer.get();\n</pre></p>\n\n<p>For camera devices that support the\nDEPTH_OUTPUT\ncapability, DEPTH_POINT_CLOUD coordinates have units of meters, and the coordinate system is\ndefined by the camera's pose transforms:\nandroid.hardware.camera2.CameraCharacteristics.LENS_POSE_TRANSLATION and\nandroid.hardware.camera2.CameraCharacteristics.LENS_POSE_ROTATION. That means the origin is\nthe optical center of the camera device, and the positive Z axis points along the camera's optical axis,\ntoward the scene.</p>\n<p>Defaults to: <code>&quot;257&quot;</code></p></div></div></div><div id='property-FLEX_RGBA_8888' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-FLEX_RGBA_8888' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-FLEX_RGBA_8888' class='name expandable'>FLEX_RGBA_8888</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Multi-plane Android RGBA format\n\n\n\n\nThis format is a generic RGBA format, capable of describing most RGBA formats,\nwi...</div><div class='long'><p>Multi-plane Android RGBA format</p>\n\n\n\n\n<p>This format is a generic RGBA format, capable of describing most RGBA formats,\nwith 8 bits per color sample.</p>\n\n\n\n\n<p>Images in this format are always represented by four separate buffers\nof data, one for each color plane. Additional information always\naccompanies the buffers, describing the row stride and the pixel stride\nfor each plane.</p>\n\n\n\n\n<p>The order of planes in the array returned by\nImage#getPlanes() is guaranteed such that\nplane #0 is always R (red), plane #1 is always G (green), plane #2 is always B (blue),\nand plane #3 is always A (alpha). This format may represent pre-multiplied or\nnon-premultiplied alpha.</p>\n\n\n\n\n<p>All four planes are guaranteed to have the same row strides and pixel strides.</p>\n\n\n\n\n<p>For example, the android.media.Image object can provide data\nin this format from a android.media.MediaCodec\nthrough android.media.MediaCodec.getOutputImage object.</p>\n\n\n<p>@see android.media.Image\n@see android.media.MediaCodec</p>\n<p>Defaults to: <code>&quot;42&quot;</code></p></div></div></div><div id='property-FLEX_RGB_888' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-FLEX_RGB_888' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-FLEX_RGB_888' class='name expandable'>FLEX_RGB_888</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Multi-plane Android RGB format\n\n\n\n\nThis format is a generic RGB format, capable of describing most RGB formats,\nwith ...</div><div class='long'><p>Multi-plane Android RGB format</p>\n\n\n\n\n<p>This format is a generic RGB format, capable of describing most RGB formats,\nwith 8 bits per color sample.</p>\n\n\n\n\n<p>Images in this format are always represented by three separate buffers\nof data, one for each color plane. Additional information always\naccompanies the buffers, describing the row stride and the pixel stride\nfor each plane.</p>\n\n\n\n\n<p>The order of planes in the array returned by\nImage#getPlanes() is guaranteed such that\nplane #0 is always R (red), plane #1 is always G (green), and plane #2 is always B\n(blue).</p>\n\n\n\n\n<p>All three planes are guaranteed to have the same row strides and pixel strides.</p>\n\n\n\n\n<p>For example, the android.media.Image object can provide data\nin this format from a android.media.MediaCodec\nthrough android.media.MediaCodec.getOutputImage object.</p>\n\n\n<p>@see android.media.Image\n@see android.media.MediaCodec</p>\n<p>Defaults to: <code>&quot;41&quot;</code></p></div></div></div><div id='property-HEIC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-HEIC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-HEIC' class='name expandable'>HEIC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Compressed HEIC format. ...</div><div class='long'><p>Compressed HEIC format.</p>\n\n<p>This format defines the HEIC brand of High Efficiency Image File\nFormat as described in ISO/IEC 23008-12.</p>\n\n<p>Defaults to: <code>&quot;1212500294&quot;</code></p></div></div></div><div id='property-JPEG' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-JPEG' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-JPEG' class='name expandable'>JPEG</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Compressed JPEG format. ...</div><div class='long'><p>Compressed JPEG format.</p>\n\n<p>This format is always supported as an output format for the\nandroid.hardware.camera2 API, and as a picture format for the older\nandroid.hardware.Camera API</p>\n\n<p>Defaults to: <code>&quot;256&quot;</code></p></div></div></div><div id='property-NV16' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-NV16' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-NV16' class='name expandable'>NV16</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>YCbCr format, used for video. ...</div><div class='long'><p>YCbCr format, used for video.</p>\n\n<p>For the android.hardware.camera2 API, the <a href=\"#!/api/android.graphics.ImageFormat-property-YUV_420_888\" rel=\"android.graphics.ImageFormat-property-YUV_420_888\" class=\"docClass\">YUV_420_888</a> format is\nrecommended for YUV output instead.</p>\n\n\n\n\n<p>Whether this format is supported by the old camera API can be determined by\nandroid.hardware.Camera.Parameters.getSupportedPreviewFormats().</p>\n\n<p>Defaults to: <code>&quot;16&quot;</code></p></div></div></div><div id='property-NV21' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-NV21' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-NV21' class='name expandable'>NV21</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>YCrCb format used for images, which uses the NV21 encoding format. ...</div><div class='long'><p>YCrCb format used for images, which uses the NV21 encoding format.</p>\n\n<p>This is the default format\nfor android.hardware.Camera preview images, when not otherwise set with\nandroid.hardware.Camera.Parameters.setPreviewFormat(int).</p>\n\n\n\n\n<p>For the android.hardware.camera2 API, the <a href=\"#!/api/android.graphics.ImageFormat-property-YUV_420_888\" rel=\"android.graphics.ImageFormat-property-YUV_420_888\" class=\"docClass\">YUV_420_888</a> format is\nrecommended for YUV output instead.</p>\n\n<p>Defaults to: <code>&quot;17&quot;</code></p></div></div></div><div id='property-PRIVATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-PRIVATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-PRIVATE' class='name expandable'>PRIVATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Android private opaque image format. ...</div><div class='long'><p>Android private opaque image format.</p>\n\n<p>\nThe choices of the actual format and pixel data layout are entirely up to\nthe device-specific and framework internal implementations, and may vary\ndepending on use cases even for the same device. The buffers of this\nformat can be produced by components like\nImageWriter , and interpreted correctly\nby consumers like android.graphics.CameraDevice based on the device/framework private information. However,\nthese buffers are not directly accessible to the application.\n</p>\n\n\n<p>\nWhen an Image of this format is obtained from\nan ImageReader or\nImageWriter, the\ngetPlanes() method will return an\nempty Plane array.\n</p>\n\n\n<p>\nIf a buffer of this format is to be used as an OpenGL ES texture, the\nframework will assume that sampling the texture will always return an\nalpha value of 1.0 (i.e. the buffer contains only opaque pixel values).\n</p>\n\n<p>Defaults to: <code>&quot;34&quot;</code></p></div></div></div><div id='property-RAW10' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-RAW10' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-RAW10' class='name expandable'>RAW10</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Android 10-bit raw format\n\n\n\n\nThis is a single-plane, 10-bit per pixel, densely packed (in each row),\nunprocessed for...</div><div class='long'><p>\nAndroid 10-bit raw format\n</p>\n\n\n<p>\nThis is a single-plane, 10-bit per pixel, densely packed (in each row),\nunprocessed format, usually representing raw Bayer-pattern images coming\nfrom an image sensor.\n</p>\n\n\n<p>\nIn an image buffer with this format, starting from the first pixel of\neach row, each 4 consecutive pixels are packed into 5 bytes (40 bits).\nEach one of the first 4 bytes contains the top 8 bits of each pixel, The\nfifth byte contains the 2 least significant bits of the 4 pixels, the\nexact layout data for each 4 consecutive pixels is illustrated below\n({@code Pi[j]} stands for the jth bit of the ith pixel):\n</p>\n\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">bit 7</th>\n<th align=\"center\">bit 6</th>\n<th align=\"center\">bit 5</th>\n<th align=\"center\">bit 4</th>\n<th align=\"center\">bit 3</th>\n<th align=\"center\">bit 2</th>\n<th align=\"center\">bit 1</th>\n<th align=\"center\">bit 0</th>\n</tr>\n</thead> <tbody>\n<tr>\n<td align=\"center\">Byte 0:</td>\n<td align=\"center\">P0[9]</td>\n<td align=\"center\">P0[8]</td>\n<td align=\"center\">P0[7]</td>\n<td align=\"center\">P0[6]</td>\n<td align=\"center\">P0[5]</td>\n<td align=\"center\">P0[4]</td>\n<td align=\"center\">P0[3]</td>\n<td align=\"center\">P0[2]</td>\n</tr>\n<tr>\n<td align=\"center\">Byte 1:</td>\n<td align=\"center\">P1[9]</td>\n<td align=\"center\">P1[8]</td>\n<td align=\"center\">P1[7]</td>\n<td align=\"center\">P1[6]</td>\n<td align=\"center\">P1[5]</td>\n<td align=\"center\">P1[4]</td>\n<td align=\"center\">P1[3]</td>\n<td align=\"center\">P1[2]</td>\n</tr>\n<tr>\n<td align=\"center\">Byte 2:</td>\n<td align=\"center\">P2[9]</td>\n<td align=\"center\">P2[8]</td>\n<td align=\"center\">P2[7]</td>\n<td align=\"center\">P2[6]</td>\n<td align=\"center\">P2[5]</td>\n<td align=\"center\">P2[4]</td>\n<td align=\"center\">P2[3]</td>\n<td align=\"center\">P2[2]</td>\n</tr>\n<tr>\n<td align=\"center\">Byte 3:</td>\n<td align=\"center\">P3[9]</td>\n<td align=\"center\">P3[8]</td>\n<td align=\"center\">P3[7]</td>\n<td align=\"center\">P3[6]</td>\n<td align=\"center\">P3[5]</td>\n<td align=\"center\">P3[4]</td>\n<td align=\"center\">P3[3]</td>\n<td align=\"center\">P3[2]</td>\n</tr>\n<tr>\n<td align=\"center\">Byte 4:</td>\n<td align=\"center\">P3[1]</td>\n<td align=\"center\">P3[0]</td>\n<td align=\"center\">P2[1]</td>\n<td align=\"center\">P2[0]</td>\n<td align=\"center\">P1[1]</td>\n<td align=\"center\">P1[0]</td>\n<td align=\"center\">P0[1]</td>\n<td align=\"center\">P0[0]</td>\n</tr>\n</tbody>\n</table>\n\n\n<p>\nThis format assumes\n<ul>\n<li>a width multiple of 4 pixels</li>\n<li>an even height</li>\n</ul>\n</p>\n\n\n\n\n<pre>size = row stride * height</pre>\n\n\n<p> where the row stride is in <em>bytes</em>,\nnot pixels.</p>\n\n<p>\nSince this is a densely packed format, the pixel stride is always 0. The\napplication must use the pixel data layout defined in above table to\naccess each row data. When row stride is equal to {@code width * (10 / 8)}, there\nwill be no padding bytes at the end of each row, the entire image data is\ndensely packed. When stride is larger than {@code width * (10 / 8)}, padding\nbytes will be present at the end of each row.\n</p>\n\n\n<p>\nFor example, the android.media.Image object can provide data in\nthis format from a android.hardware.camera2.CameraDevice (if\nsupported) through a android.media.ImageReader object. The\nImage#getPlanes() will return a\nsingle plane containing the pixel data. The pixel stride is always 0 in\nandroid.media.Image.Plane.getPixelStride(), and the\nandroid.media.Image.Plane.getRowStride() describes the vertical\nneighboring pixel distance (in bytes) between adjacent rows.\n</p>\n\n\n<p>@see android.media.Image\n@see android.media.ImageReader\n@see android.hardware.camera2.CameraDevice</p>\n<p>Defaults to: <code>&quot;37&quot;</code></p></div></div></div><div id='property-RAW12' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-RAW12' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-RAW12' class='name expandable'>RAW12</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Android 12-bit raw format\n\n\n\n\nThis is a single-plane, 12-bit per pixel, densely packed (in each row),\nunprocessed for...</div><div class='long'><p>\nAndroid 12-bit raw format\n</p>\n\n\n<p>\nThis is a single-plane, 12-bit per pixel, densely packed (in each row),\nunprocessed format, usually representing raw Bayer-pattern images coming\nfrom an image sensor.\n</p>\n\n\n<p>\nIn an image buffer with this format, starting from the first pixel of each\nrow, each two consecutive pixels are packed into 3 bytes (24 bits). The first\nand second byte contains the top 8 bits of first and second pixel. The third\nbyte contains the 4 least significant bits of the two pixels, the exact layout\ndata for each two consecutive pixels is illustrated below (Pi[j] stands for\nthe jth bit of the ith pixel):\n</p>\n\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">bit 7</th>\n<th align=\"center\">bit 6</th>\n<th align=\"center\">bit 5</th>\n<th align=\"center\">bit 4</th>\n<th align=\"center\">bit 3</th>\n<th align=\"center\">bit 2</th>\n<th align=\"center\">bit 1</th>\n<th align=\"center\">bit 0</th>\n</tr>\n</thead> <tbody>\n<tr>\n<td align=\"center\">Byte 0:</td>\n<td align=\"center\">P0[11]</td>\n<td align=\"center\">P0[10]</td>\n<td align=\"center\">P0[ 9]</td>\n<td align=\"center\">P0[ 8]</td>\n<td align=\"center\">P0[ 7]</td>\n<td align=\"center\">P0[ 6]</td>\n<td align=\"center\">P0[ 5]</td>\n<td align=\"center\">P0[ 4]</td>\n</tr>\n<tr>\n<td align=\"center\">Byte 1:</td>\n<td align=\"center\">P1[11]</td>\n<td align=\"center\">P1[10]</td>\n<td align=\"center\">P1[ 9]</td>\n<td align=\"center\">P1[ 8]</td>\n<td align=\"center\">P1[ 7]</td>\n<td align=\"center\">P1[ 6]</td>\n<td align=\"center\">P1[ 5]</td>\n<td align=\"center\">P1[ 4]</td>\n</tr>\n<tr>\n<td align=\"center\">Byte 2:</td>\n<td align=\"center\">P1[ 3]</td>\n<td align=\"center\">P1[ 2]</td>\n<td align=\"center\">P1[ 1]</td>\n<td align=\"center\">P1[ 0]</td>\n<td align=\"center\">P0[ 3]</td>\n<td align=\"center\">P0[ 2]</td>\n<td align=\"center\">P0[ 1]</td>\n<td align=\"center\">P0[ 0]</td>\n</tr>\n</tbody>\n</table>\n\n\n<p>\nThis format assumes\n<ul>\n<li>a width multiple of 4 pixels</li>\n<li>an even height</li>\n</ul>\n</p>\n\n\n\n\n<pre>size = row stride * height</pre>\n\n\n<p> where the row stride is in <em>bytes</em>,\nnot pixels.</p>\n\n<p>\nSince this is a densely packed format, the pixel stride is always 0. The\napplication must use the pixel data layout defined in above table to\naccess each row data. When row stride is equal to {@code width * (12 / 8)}, there\nwill be no padding bytes at the end of each row, the entire image data is\ndensely packed. When stride is larger than {@code width * (12 / 8)}, padding\nbytes will be present at the end of each row.\n</p>\n\n\n<p>\nFor example, the android.media.Image object can provide data in\nthis format from a android.hardware.camera2.CameraDevice (if\nsupported) through a android.media.ImageReader object. The\nImage#getPlanes() will return a\nsingle plane containing the pixel data. The pixel stride is always 0 in\nandroid.media.Image.Plane.getPixelStride(), and the\nandroid.media.Image.Plane.getRowStride() describes the vertical\nneighboring pixel distance (in bytes) between adjacent rows.\n</p>\n\n\n<p>@see android.media.Image\n@see android.media.ImageReader\n@see android.hardware.camera2.CameraDevice</p>\n<p>Defaults to: <code>&quot;38&quot;</code></p></div></div></div><div id='property-RAW_PRIVATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-RAW_PRIVATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-RAW_PRIVATE' class='name expandable'>RAW_PRIVATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Private raw camera sensor image format, a single channel image with\nimplementation depedent pixel layout. ...</div><div class='long'><p>Private raw camera sensor image format, a single channel image with\nimplementation depedent pixel layout.</p>\n\n\n\n\n<p>RAW_PRIVATE is a format for unprocessed raw image buffers coming from an\nimage sensor. The actual structure of buffers of this format is\nimplementation-dependent.</p>\n\n<p>Defaults to: <code>&quot;36&quot;</code></p></div></div></div><div id='property-RAW_SENSOR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-RAW_SENSOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-RAW_SENSOR' class='name expandable'>RAW_SENSOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>General raw camera sensor image format, usually representing a\nsingle-channel Bayer-mosaic image. ...</div><div class='long'><p>General raw camera sensor image format, usually representing a\nsingle-channel Bayer-mosaic image. Each pixel color sample is stored with\n16 bits of precision.</p>\n\n\n\n\n<p>The layout of the color mosaic, the maximum and minimum encoding\nvalues of the raw pixel data, the color space of the image, and all other\nneeded information to interpret a raw sensor image must be queried from\nthe android.hardware.camera2.CameraDevice which produced the\nimage.</p>\n\n<p>Defaults to: <code>&quot;32&quot;</code></p></div></div></div><div id='property-RGB_565' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-RGB_565' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-RGB_565' class='name expandable'>RGB_565</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>RGB format used for pictures encoded as RGB_565. ...</div><div class='long'><p>RGB format used for pictures encoded as RGB_565. See\nandroid.hardware.Camera.Parameters.setPictureFormat(int).</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-UNKNOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-UNKNOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-UNKNOWN' class='name expandable'>UNKNOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-Y8' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-Y8' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-Y8' class='name expandable'>Y8</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Android Y8 format. ...</div><div class='long'><p>Android Y8 format.</p>\n\n\n\n\n<p>Y8 is a YUV planar format comprised of a WxH Y plane only, with each pixel\nbeing represented by 8 bits. It is equivalent to just the Y plane from <a href=\"#!/api/android.graphics.ImageFormat-property-YV12\" rel=\"android.graphics.ImageFormat-property-YV12\" class=\"docClass\">YV12</a>\nformat.</p>\n\n\n\n\n<p>This format assumes\n<ul>\n<li>an even width</li>\n<li>an even height</li>\n<li>a horizontal stride multiple of 16 pixels</li>\n</ul>\n</p>\n\n\n\n\n<pre> size = stride * height </pre>\n\n\n\n\n<p>For example, the android.media.Image object can provide data\nin this format from a android.hardware.camera2.CameraDevice (if\nsupported) through a android.media.ImageReader object. The\nImage#getPlanes() will return a\nsingle plane containing the pixel data. The pixel stride is always 1 in\nandroid.media.Image.Plane.getPixelStride(), and the\nandroid.media.Image.Plane.getRowStride() describes the vertical\nneighboring pixel distance (in bytes) between adjacent rows.</p>\n\n\n<p>@see android.media.Image\n@see android.media.ImageReader\n@see android.hardware.camera2.CameraDevice</p>\n<p>Defaults to: <code>&quot;538982489&quot;</code></p></div></div></div><div id='property-YUV_420_888' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-YUV_420_888' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-YUV_420_888' class='name expandable'>YUV_420_888</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Multi-plane Android YUV 420 format\n\n\n\n\nThis format is a generic YCbCr format, capable of describing any 4:2:0\nchroma-...</div><div class='long'><p>Multi-plane Android YUV 420 format</p>\n\n\n\n\n<p>This format is a generic YCbCr format, capable of describing any 4:2:0\nchroma-subsampled planar or semiplanar buffer (but not fully interleaved),\nwith 8 bits per color sample.</p>\n\n\n\n\n<p>Images in this format are always represented by three separate buffers\nof data, one for each color plane. Additional information always\naccompanies the buffers, describing the row stride and the pixel stride\nfor each plane.</p>\n\n\n\n\n<p>The order of planes in the array returned by\nImage#getPlanes() is guaranteed such that\nplane #0 is always Y, plane #1 is always U (Cb), and plane #2 is always V (Cr).</p>\n\n\n\n\n<p>The Y-plane is guaranteed not to be interleaved with the U/V planes\n(in particular, pixel stride is always 1 in\nyPlane.getPixelStride()).</p>\n\n\n\n\n<p>The U/V planes are guaranteed to have the same row stride and pixel stride\n(in particular,\nuPlane.getRowStride()\n== vPlane.getRowStride() and\nuPlane.getPixelStride()\n== vPlane.getPixelStride();\n).</p>\n\n\n\n\n<p>For example, the android.media.Image object can provide data\nin this format from a android.hardware.camera2.CameraDevice\nthrough a android.media.ImageReader object.</p>\n\n\n<p>@see android.media.Image\n@see android.media.ImageReader\n@see android.hardware.camera2.CameraDevice</p>\n<p>Defaults to: <code>&quot;35&quot;</code></p></div></div></div><div id='property-YUV_422_888' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-YUV_422_888' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-YUV_422_888' class='name expandable'>YUV_422_888</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Multi-plane Android YUV 422 format\n\n\n\n\nThis format is a generic YCbCr format, capable of describing any 4:2:2\nchroma-...</div><div class='long'><p>Multi-plane Android YUV 422 format</p>\n\n\n\n\n<p>This format is a generic YCbCr format, capable of describing any 4:2:2\nchroma-subsampled (planar, semiplanar or interleaved) format,\nwith 8 bits per color sample.</p>\n\n\n\n\n<p>Images in this format are always represented by three separate buffers\nof data, one for each color plane. Additional information always\naccompanies the buffers, describing the row stride and the pixel stride\nfor each plane.</p>\n\n\n\n\n<p>The order of planes in the array returned by\nImage#getPlanes() is guaranteed such that\nplane #0 is always Y, plane #1 is always U (Cb), and plane #2 is always V (Cr).</p>\n\n\n\n\n<p>In contrast to the <a href=\"#!/api/android.graphics.ImageFormat-property-YUV_420_888\" rel=\"android.graphics.ImageFormat-property-YUV_420_888\" class=\"docClass\">YUV_420_888</a> format, the Y-plane may have a pixel\nstride greater than 1 in\nyPlane.getPixelStride().</p>\n\n\n\n\n<p>The U/V planes are guaranteed to have the same row stride and pixel stride\n(in particular,\nuPlane.getRowStride()\n== vPlane.getRowStride() and\nuPlane.getPixelStride()\n== vPlane.getPixelStride();\n).</p>\n\n\n\n\n<p>For example, the android.media.Image object can provide data\nin this format from a android.media.MediaCodec\nthrough android.media.MediaCodec.getOutputImage object.</p>\n\n\n<p>@see android.media.Image\n@see android.media.MediaCodec</p>\n<p>Defaults to: <code>&quot;39&quot;</code></p></div></div></div><div id='property-YUV_444_888' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-YUV_444_888' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-YUV_444_888' class='name expandable'>YUV_444_888</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Multi-plane Android YUV 444 format\n\n\n\n\nThis format is a generic YCbCr format, capable of describing any 4:4:4\n(planar...</div><div class='long'><p>Multi-plane Android YUV 444 format</p>\n\n\n\n\n<p>This format is a generic YCbCr format, capable of describing any 4:4:4\n(planar, semiplanar or interleaved) format,\nwith 8 bits per color sample.</p>\n\n\n\n\n<p>Images in this format are always represented by three separate buffers\nof data, one for each color plane. Additional information always\naccompanies the buffers, describing the row stride and the pixel stride\nfor each plane.</p>\n\n\n\n\n<p>The order of planes in the array returned by\nImage#getPlanes() is guaranteed such that\nplane #0 is always Y, plane #1 is always U (Cb), and plane #2 is always V (Cr).</p>\n\n\n\n\n<p>In contrast to the <a href=\"#!/api/android.graphics.ImageFormat-property-YUV_420_888\" rel=\"android.graphics.ImageFormat-property-YUV_420_888\" class=\"docClass\">YUV_420_888</a> format, the Y-plane may have a pixel\nstride greater than 1 in\nyPlane.getPixelStride().</p>\n\n\n\n\n<p>The U/V planes are guaranteed to have the same row stride and pixel stride\n(in particular,\nuPlane.getRowStride()\n== vPlane.getRowStride() and\nuPlane.getPixelStride()\n== vPlane.getPixelStride();\n).</p>\n\n\n\n\n<p>For example, the android.media.Image object can provide data\nin this format from a android.media.MediaCodec\nthrough android.media.MediaCodec.getOutputImage object.</p>\n\n\n<p>@see android.media.Image\n@see android.media.MediaCodec</p>\n<p>Defaults to: <code>&quot;40&quot;</code></p></div></div></div><div id='property-YUY2' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-YUY2' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-YUY2' class='name expandable'>YUY2</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>YCbCr format used for images, which uses YUYV (YUY2) encoding format. ...</div><div class='long'><p>YCbCr format used for images, which uses YUYV (YUY2) encoding format.</p>\n\n<p>For the android.hardware.camera2 API, the <a href=\"#!/api/android.graphics.ImageFormat-property-YUV_420_888\" rel=\"android.graphics.ImageFormat-property-YUV_420_888\" class=\"docClass\">YUV_420_888</a> format is\nrecommended for YUV output instead.</p>\n\n\n\n\n<p>This is an alternative format for android.hardware.Camera preview images. Whether\nthis format is supported by the camera hardware can be determined by\nandroid.hardware.Camera.Parameters.getSupportedPreviewFormats().</p>\n\n<p>Defaults to: <code>&quot;20&quot;</code></p></div></div></div><div id='property-YV12' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-property-YV12' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-property-YV12' class='name expandable'>YV12</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Android YUV format. ...</div><div class='long'><p>Android YUV format.</p>\n\n\n\n\n<p>This format is exposed to software decoders and applications.</p>\n\n\n\n\n<p>YV12 is a 4:2:0 YCrCb planar format comprised of a WxH Y plane followed\nby (W/2) x (H/2) Cr and Cb planes.</p>\n\n\n\n\n<p>This format assumes\n<ul>\n<li>an even width</li>\n<li>an even height</li>\n<li>a horizontal stride multiple of 16 pixels</li>\n<li>a vertical stride equal to the height</li>\n</ul>\n</p>\n\n\n\n\n<pre> y_size = stride * height\nc_stride = ALIGN(stride/2, 16)\nc_size = c_stride * height/2\nsize = y_size + c_size * 2\ncr_offset = y_size\ncb_offset = y_size + c_size</pre>\n\n\n\n\n<p>For the android.hardware.camera2 API, the <a href=\"#!/api/android.graphics.ImageFormat-property-YUV_420_888\" rel=\"android.graphics.ImageFormat-property-YUV_420_888\" class=\"docClass\">YUV_420_888</a> format is\nrecommended for YUV output instead.</p>\n\n\n\n\n<p><p>For the older camera API, this format is guaranteed to be supported for\nandroid.hardware.Camera preview images since API level 12; for earlier API versions,\ncheck android.hardware.Camera.Parameters.getSupportedPreviewFormats().</p>\n\n<p><p>Note that for camera preview callback use (see\nandroid.hardware.Camera.setPreviewCallback), the\n<var>stride</var> value is the smallest possible; that is, it is equal\nto:</p>\n\n<p><pre>stride = ALIGN(width, 16)</pre></p>\n\n<p>@see android.hardware.Camera.Parameters#setPreviewCallback\n@see android.hardware.Camera.Parameters#setPreviewFormat\n@see android.hardware.Camera.Parameters#getSupportedPreviewFormats\n</p></p>\n<p>Defaults to: <code>&quot;842094169&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getBitsPerPixel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.ImageFormat'>android.graphics.ImageFormat</span><br/><a href='source/ImageFormat.html#android-graphics-ImageFormat-method-getBitsPerPixel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.ImageFormat-method-getBitsPerPixel' class='name expandable'>getBitsPerPixel</a>( <span class='pre'>format</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Use this function to retrieve the number of bits per pixel of an\n ImageFormat. ...</div><div class='long'><p>Use this function to retrieve the number of bits per pixel of an\n ImageFormat.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>format</span> : Number<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of bits per pixel of the given format or -1 if the\n         format doesn't exist or is not supported.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});