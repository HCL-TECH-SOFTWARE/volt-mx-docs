Ext.data.JsonP.android_graphics_BitmapFactory_Options({"tagname":"class","name":"android.graphics.BitmapFactory.Options","autodetected":{},"files":[{"filename":"Options.js","href":"Options.html#android-graphics-BitmapFactory-Options"}],"extends":"java.lang.Object","members":[{"name":"inBitmap","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inBitmap","meta":{}},{"name":"inDensity","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inDensity","meta":{}},{"name":"inDither","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inDither","meta":{"deprecated":{"text":"<p>As of android.os.Build.VERSION_CODES.N, this is\nignored.</p>\n\n<p>In android.os.Build.VERSION_CODES.M and below, if dither is\ntrue, the decoder will attempt to dither the decoded image.</p>\n"}}},{"name":"inInputShareable","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inInputShareable","meta":{"deprecated":{"text":"<p>As of android.os.Build.VERSION_CODES.LOLLIPOP, this is\nignored.</p>\n\n<p>In android.os.Build.VERSION_CODES.KITKAT and below, this\nfield works in conjuction with inPurgeable. If inPurgeable is false,\nthen this field is ignored. If inPurgeable is true, then this field\ndetermines whether the bitmap can share a reference to the input\ndata (inputstream, array, etc.) or if it must make a deep copy.</p>\n"}}},{"name":"inJustDecodeBounds","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inJustDecodeBounds","meta":{}},{"name":"inMutable","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inMutable","meta":{}},{"name":"inPreferQualityOverSpeed","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inPreferQualityOverSpeed","meta":{"deprecated":{"text":"<p>As of android.os.Build.VERSION_CODES.N, this is\nignored.  The output will always be high quality.</p>\n\n<p>In android.os.Build.VERSION_CODES.M and below, if\ninPreferQualityOverSpeed is set to true, the decoder will try to\ndecode the reconstructed image to a higher quality even at the\nexpense of the decoding speed. Currently the field only affects JPEG\ndecode, in the case of which a more accurate, but slightly slower,\nIDCT method will be used instead.</p>\n"}}},{"name":"inPreferredColorSpace","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inPreferredColorSpace","meta":{}},{"name":"inPreferredConfig","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inPreferredConfig","meta":{}},{"name":"inPremultiplied","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inPremultiplied","meta":{}},{"name":"inPurgeable","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inPurgeable","meta":{"deprecated":{"text":"<p>As of android.os.Build.VERSION_CODES.LOLLIPOP, this is\nignored.</p>\n\n<p>In android.os.Build.VERSION_CODES.KITKAT and below, if this\nis set to true, then the resulting bitmap will allocate its\npixels such that they can be purged if the system needs to reclaim\nmemory. In that instance, when the pixels need to be accessed again\n(e.g. the bitmap is drawn, getPixels() is called), they will be\nautomatically re-decoded.</p>\n\n<p>For the re-decode to happen, the bitmap must have access to the\nencoded data, either by sharing a reference to the input\nor by making a copy of it. This distinction is controlled by\ninInputShareable. If this is true, then the bitmap may keep a shallow\nreference to the input. If this is false, then the bitmap will\nexplicitly make a copy of the input data, and keep that. Even if\nsharing is allowed, the implementation may still decide to make a\ndeep copy of the input data.</p>\n\n\n\n\n<p>While inPurgeable can help avoid big Dalvik heap allocations (from\nAPI level 11 onward), it sacrifices performance predictability since any\nimage that the view system tries to draw may incur a decode delay which\ncan lead to dropped frames. Therefore, most apps should avoid using\ninPurgeable to allow for a fast and fluid UI. To minimize Dalvik heap\nallocations use the <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inBitmap\" rel=\"android.graphics.BitmapFactory.Options-property-inBitmap\" class=\"docClass\">inBitmap</a> flag instead.</p>\n\n\n\n\n<p class=\"note\"><strong>Note:</strong> This flag is ignored when used\nwith int,\nandroid.graphics.BitmapFactory.Options) or android.graphics.BitmapFactory.Options).</p>\n\n"}}},{"name":"inSampleSize","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inSampleSize","meta":{}},{"name":"inScaled","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inScaled","meta":{}},{"name":"inScreenDensity","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inScreenDensity","meta":{}},{"name":"inTargetDensity","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inTargetDensity","meta":{}},{"name":"inTempStorage","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-inTempStorage","meta":{}},{"name":"mCancel","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-mCancel","meta":{"deprecated":{"text":"<p>As of android.os.Build.VERSION_CODES.N, see\ncomments on <a href=\"#!/api/android.graphics.BitmapFactory.Options-method-requestCancelDecode\" rel=\"android.graphics.BitmapFactory.Options-method-requestCancelDecode\" class=\"docClass\">requestCancelDecode</a>().</p>\n\n<p>Flag to indicate that cancel has been called on this object.  This\nis useful if there's an intermediary that wants to first decode the\nbounds and then decode the image.  In that case the intermediary\ncan check, inbetween the bounds decode and the image decode, to see\nif the operation is canceled.</p>\n"}}},{"name":"outColorSpace","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-outColorSpace","meta":{}},{"name":"outConfig","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-outConfig","meta":{}},{"name":"outHeight","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-outHeight","meta":{}},{"name":"outMimeType","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-outMimeType","meta":{}},{"name":"outWidth","tagname":"property","owner":"android.graphics.BitmapFactory.Options","id":"property-outWidth","meta":{}},{"name":"requestCancelDecode","tagname":"method","owner":"android.graphics.BitmapFactory.Options","id":"method-requestCancelDecode","meta":{"deprecated":{"text":"<p>As of android.os.Build.VERSION_CODES.N, this\n  will not affect the decode, though it will still set mCancel.</p>\n\n<p>  In android.os.Build.VERSION_CODES.M and below, if this can\n  be called from another thread while this options object is inside\n  a decode... call. Calling this will notify the decoder that it\n  should cancel its operation. This is not guaranteed to cancel the\n  decode, but if it does, the decoder... operation will return null,\n  or if inJustDecodeBounds is true, will set outWidth/outHeight\n  to -1</p>\n"}}}],"alternateClassNames":[],"aliases":{},"id":"class-android.graphics.BitmapFactory.Options","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.graphics.BitmapFactory.Options</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Options.html#android-graphics-BitmapFactory-Options' target='_blank'>Options.js</a></div></pre><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-inBitmap' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inBitmap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inBitmap' class='name expandable'>inBitmap</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If set, decode methods that take the Options object will attempt to\nreuse this bitmap when loading content. ...</div><div class='long'><p>If set, decode methods that take the Options object will attempt to\nreuse this bitmap when loading content. If the decode operation\ncannot use this bitmap, the decode method will throw an\njava.lang.IllegalArgumentException. The\ncurrent implementation necessitates that the reused bitmap be\nmutable, and the resulting reused bitmap will continue to remain\nmutable even when decoding a resource which would normally result in\nan immutable bitmap.</p>\n\n<p>You should still always use the returned Bitmap of the decode\nmethod and not assume that reusing the bitmap worked, due to the\nconstraints outlined above and failure situations that can occur.\nChecking whether the return value matches the value of the inBitmap\nset in the Options structure will indicate if the bitmap was reused,\nbut in all cases you should use the Bitmap returned by the decoding\nfunction to ensure that you are using the bitmap that was used as the\ndecode destination.</p>\n\n\n\n\n<h3>Usage with BitmapFactory</h3>\n\n\n\n\n<p>As of android.os.Build.VERSION_CODES.KITKAT, any\nmutable bitmap can be reused by <a href=\"#!/api/android.graphics.BitmapFactory\" rel=\"android.graphics.BitmapFactory\" class=\"docClass\">android.graphics.BitmapFactory</a> to decode any\nother bitmaps as long as the resulting byte count of the decoded bitmap is less than or equal to the allocated byte count of the reused\nbitmap. This can be because the intrinsic size is smaller, or its\nsize post scaling (for density / sample size) is smaller.</p>\n\n\n\n\n<p class=\"note\">Prior to android.os.Build.VERSION_CODES.KITKAT\nadditional constraints apply: The image being decoded (whether as a\nresource or as a stream) must be in jpeg or png format. Only equal\nsized bitmaps are supported, with <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inSampleSize\" rel=\"android.graphics.BitmapFactory.Options-property-inSampleSize\" class=\"docClass\">inSampleSize</a> set to 1.\nAdditionally, the <a href=\"#!/api/android.graphics.Bitmap.Config\" rel=\"android.graphics.Bitmap.Config\" class=\"docClass\">configuration</a> of the reused bitmap will override the setting of\n<a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inPreferredConfig\" rel=\"android.graphics.BitmapFactory.Options-property-inPreferredConfig\" class=\"docClass\">inPreferredConfig</a>, if set.</p>\n\n\n\n\n<h3>Usage with BitmapRegionDecoder</h3>\n\n\n\n\n<p><p>BitmapRegionDecoder will draw its requested content into the Bitmap\nprovided, clipping if the output content size (post scaling) is larger\nthan the provided Bitmap. The provided Bitmap's width, height, and\n<a href=\"#!/api/android.graphics.Bitmap.Config\" rel=\"android.graphics.Bitmap.Config\" class=\"docClass\">android.graphics.Bitmap.Config</a> will not be changed.</p>\n\n<p><p class=\"note\">BitmapRegionDecoder support for <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inBitmap\" rel=\"android.graphics.BitmapFactory.Options-property-inBitmap\" class=\"docClass\">inBitmap</a> was\nintroduced in android.os.Build.VERSION_CODES.JELLY_BEAN. All\nformats supported by BitmapRegionDecoder support Bitmap reuse via\n<a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inBitmap\" rel=\"android.graphics.BitmapFactory.Options-property-inBitmap\" class=\"docClass\">inBitmap</a>.</p></p>\n\n<p>@see Bitmap#reconfigure(int,int, <a href=\"#!/api/android.graphics.Bitmap.Config\" rel=\"android.graphics.Bitmap.Config\" class=\"docClass\">android.graphics.Bitmap.Config</a>)</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inDensity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inDensity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inDensity' class='name expandable'>inDensity</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The pixel density to use for the bitmap. ...</div><div class='long'><p>The pixel density to use for the bitmap.  This will always result\nin the returned bitmap having a density set for it (see\nandroid.graphics.Bitmap.setDensity(int)).  In addition,\nif <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScaled\" rel=\"android.graphics.BitmapFactory.Options-property-inScaled\" class=\"docClass\">inScaled</a> is set (which it is by default} and this\ndensity does not match <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inTargetDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inTargetDensity\" class=\"docClass\">inTargetDensity</a>, then the bitmap\nwill be scaled to the target density before being returned.</p>\n\n<p><p>If this is 0,\nint),\nint, android.graphics.BitmapFactory.Options),\nand <a href=\"#!/api/android.graphics.BitmapFactory-method-decodeResourceStream\" rel=\"android.graphics.BitmapFactory-method-decodeResourceStream\" class=\"docClass\">android.graphics.BitmapFactory.decodeResourceStream</a>\nwill fill in the density associated with the resource.  The other\nfunctions will leave it as-is and no density will be applied.</p>\n\n<p>@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inTargetDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inTargetDensity\" class=\"docClass\">inTargetDensity</a>\n@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScreenDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inScreenDensity\" class=\"docClass\">inScreenDensity</a>\n@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScaled\" rel=\"android.graphics.BitmapFactory.Options-property-inScaled\" class=\"docClass\">inScaled</a>\n@see Bitmap#setDensity(int)\n@see android.util.DisplayMetrics#densityDpi</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inDither' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inDither' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inDither' class='name expandable'>inDither</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>As of android.os.Build.VERSION_CODES.N, this is\nignored.</p>\n\n<p>In android.os.Build.VERSION_CODES.M and below, if dither is\ntrue, the decoder will attempt to dither the decoded image.</p>\n\n        </div>\n</div></div></div><div id='property-inInputShareable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inInputShareable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inInputShareable' class='name expandable'>inInputShareable</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>As of android.os.Build.VERSION_CODES.LOLLIPOP, this is\nignored.</p>\n\n<p>In android.os.Build.VERSION_CODES.KITKAT and below, this\nfield works in conjuction with inPurgeable. If inPurgeable is false,\nthen this field is ignored. If inPurgeable is true, then this field\ndetermines whether the bitmap can share a reference to the input\ndata (inputstream, array, etc.) or if it must make a deep copy.</p>\n\n        </div>\n</div></div></div><div id='property-inJustDecodeBounds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inJustDecodeBounds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inJustDecodeBounds' class='name expandable'>inJustDecodeBounds</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If set to true, the decoder will return null (no bitmap), but\nthe out... ...</div><div class='long'><p>If set to true, the decoder will return null (no bitmap), but\nthe <code>out...</code> fields will still be set, allowing the caller to\nquery the bitmap without having to allocate the memory for its pixels.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inMutable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inMutable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inMutable' class='name expandable'>inMutable</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If set, decode methods will always return a mutable Bitmap instead of\nan immutable one. ...</div><div class='long'><p>If set, decode methods will always return a mutable Bitmap instead of\nan immutable one. This can be used for instance to programmatically apply\neffects to a Bitmap loaded through BitmapFactory.</p>\n\n<p><p>Can not be set simultaneously with inPreferredConfig =\n<a href=\"#!/api/android.graphics.Bitmap.Config-property-HARDWARE\" rel=\"android.graphics.Bitmap.Config-property-HARDWARE\" class=\"docClass\">android.graphics.Bitmap.Config.HARDWARE</a>,\nbecause hardware bitmaps are always immutable.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inPreferQualityOverSpeed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inPreferQualityOverSpeed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inPreferQualityOverSpeed' class='name expandable'>inPreferQualityOverSpeed</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>As of android.os.Build.VERSION_CODES.N, this is\nignored.  The output will always be high quality.</p>\n\n<p>In android.os.Build.VERSION_CODES.M and below, if\ninPreferQualityOverSpeed is set to true, the decoder will try to\ndecode the reconstructed image to a higher quality even at the\nexpense of the decoding speed. Currently the field only affects JPEG\ndecode, in the case of which a more accurate, but slightly slower,\nIDCT method will be used instead.</p>\n\n        </div>\n</div></div></div><div id='property-inPreferredColorSpace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inPreferredColorSpace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inPreferredColorSpace' class='name expandable'>inPreferredColorSpace</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If this is non-null, the decoder will try to decode into this\ncolor space. ...</div><div class='long'><p>If this is non-null, the decoder will try to decode into this\ncolor space. If it is null, or the request cannot be met,\nthe decoder will pick either the color space embedded in the image\nor the color space best suited for the requested image configuration\n(for instance <a href=\"#!/api/android.graphics.ColorSpace.Named-property-SRGB\" rel=\"android.graphics.ColorSpace.Named-property-SRGB\" class=\"docClass\">sRGB</a> for\n<a href=\"#!/api/android.graphics.Bitmap.Config-property-ARGB_8888\" rel=\"android.graphics.Bitmap.Config-property-ARGB_8888\" class=\"docClass\">android.graphics.Bitmap.Config.ARGB_8888</a> configuration and\n<a href=\"#!/api/android.graphics.ColorSpace.Named-property-EXTENDED_SRGB\" rel=\"android.graphics.ColorSpace.Named-property-EXTENDED_SRGB\" class=\"docClass\">EXTENDED_SRGB</a> for\n<a href=\"#!/api/android.graphics.Bitmap.Config-property-RGBA_F16\" rel=\"android.graphics.Bitmap.Config-property-RGBA_F16\" class=\"docClass\">android.graphics.Bitmap.Config.RGBA_F16</a>).</p>\n\n\n\n\n<p class=\"note\">Only <a href=\"#!/api/android.graphics.ColorSpace.Model-property-RGB\" rel=\"android.graphics.ColorSpace.Model-property-RGB\" class=\"docClass\">android.graphics.ColorSpace.Model.RGB</a> color spaces are\ncurrently supported. An <code>IllegalArgumentException</code> will\nbe thrown by the decode methods when setting a non-RGB color space\nsuch as <a href=\"#!/api/android.graphics.ColorSpace.Named-property-CIE_LAB\" rel=\"android.graphics.ColorSpace.Named-property-CIE_LAB\" class=\"docClass\">Lab</a>.</p>\n\n\n\n\n<p class=\"note\">The specified color space's transfer function must be\nan <a href=\"#!/api/android.graphics.ColorSpace.Rgb.TransferParameters\" rel=\"android.graphics.ColorSpace.Rgb.TransferParameters\" class=\"docClass\">ICC parametric curve</a>. An\n<code>IllegalArgumentException</code> will be thrown by the decode methods\nif calling android.graphics.ColorSpace.Rgb.getTransferParameters() on the\nspecified color space returns null.</p>\n\n\n\n\n<p>After decode, the bitmap's color space is stored in\n<a href=\"#!/api/android.graphics.BitmapFactory.Options-property-outColorSpace\" rel=\"android.graphics.BitmapFactory.Options-property-outColorSpace\" class=\"docClass\">outColorSpace</a>.</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inPreferredConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inPreferredConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inPreferredConfig' class='name expandable'>inPreferredConfig</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If this is non-null, the decoder will try to decode into this\ninternal configuration. ...</div><div class='long'><p>If this is non-null, the decoder will try to decode into this\ninternal configuration. If it is null, or the request cannot be met,\nthe decoder will try to pick the best matching config based on the\nsystem's screen depth, and characteristics of the original image such\nas if it has per-pixel alpha (requiring a config that also does).</p>\n\n<p>Image are loaded with the <a href=\"#!/api/android.graphics.Bitmap.Config-property-ARGB_8888\" rel=\"android.graphics.Bitmap.Config-property-ARGB_8888\" class=\"docClass\">android.graphics.Bitmap.Config.ARGB_8888</a> config by\ndefault.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inPremultiplied' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inPremultiplied' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inPremultiplied' class='name expandable'>inPremultiplied</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If true (which is the default), the resulting bitmap will have its\ncolor channels pre-multipled by the alpha channel. ...</div><div class='long'><p>If true (which is the default), the resulting bitmap will have its\ncolor channels pre-multipled by the alpha channel.</p>\n\n<p>This should NOT be set to false for images to be directly drawn by\nthe view system or through a <a href=\"#!/api/android.graphics.Canvas\" rel=\"android.graphics.Canvas\" class=\"docClass\">android.graphics.Canvas</a>. The view system and\n<a href=\"#!/api/android.graphics.Canvas\" rel=\"android.graphics.Canvas\" class=\"docClass\">android.graphics.Canvas</a> assume all drawn images are pre-multiplied to simplify\ndraw-time blending, and will throw a RuntimeException when\nun-premultiplied are drawn.</p>\n\n\n\n\n<p>This is likely only useful if you want to manipulate raw encoded\nimage data, e.g. with RenderScript or custom OpenGL.</p>\n\n\n\n\n<p>This does not affect bitmaps without an alpha channel.</p>\n\n\n\n\n<p>Setting this flag to false while setting <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScaled\" rel=\"android.graphics.BitmapFactory.Options-property-inScaled\" class=\"docClass\">inScaled</a> to true\nmay result in incorrect colors.</p>\n\n\n<p>@see Bitmap#hasAlpha()\n@see Bitmap#isPremultiplied()\n@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScaled\" rel=\"android.graphics.BitmapFactory.Options-property-inScaled\" class=\"docClass\">inScaled</a></p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inPurgeable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inPurgeable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inPurgeable' class='name expandable'>inPurgeable</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>As of android.os.Build.VERSION_CODES.LOLLIPOP, this is\nignored.</p>\n\n<p>In android.os.Build.VERSION_CODES.KITKAT and below, if this\nis set to true, then the resulting bitmap will allocate its\npixels such that they can be purged if the system needs to reclaim\nmemory. In that instance, when the pixels need to be accessed again\n(e.g. the bitmap is drawn, getPixels() is called), they will be\nautomatically re-decoded.</p>\n\n<p>For the re-decode to happen, the bitmap must have access to the\nencoded data, either by sharing a reference to the input\nor by making a copy of it. This distinction is controlled by\ninInputShareable. If this is true, then the bitmap may keep a shallow\nreference to the input. If this is false, then the bitmap will\nexplicitly make a copy of the input data, and keep that. Even if\nsharing is allowed, the implementation may still decide to make a\ndeep copy of the input data.</p>\n\n\n\n\n<p>While inPurgeable can help avoid big Dalvik heap allocations (from\nAPI level 11 onward), it sacrifices performance predictability since any\nimage that the view system tries to draw may incur a decode delay which\ncan lead to dropped frames. Therefore, most apps should avoid using\ninPurgeable to allow for a fast and fluid UI. To minimize Dalvik heap\nallocations use the <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inBitmap\" rel=\"android.graphics.BitmapFactory.Options-property-inBitmap\" class=\"docClass\">inBitmap</a> flag instead.</p>\n\n\n\n\n<p class=\"note\"><strong>Note:</strong> This flag is ignored when used\nwith int,\nandroid.graphics.BitmapFactory.Options) or android.graphics.BitmapFactory.Options).</p>\n\n\n        </div>\n</div></div></div><div id='property-inSampleSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inSampleSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inSampleSize' class='name expandable'>inSampleSize</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If set to a value > 1, requests the decoder to subsample the original\nimage, returning a smaller image to save memory. ...</div><div class='long'><p>If set to a value > 1, requests the decoder to subsample the original\nimage, returning a smaller image to save memory. The sample size is\nthe number of pixels in either dimension that correspond to a single\npixel in the decoded bitmap. For example, inSampleSize == 4 returns\nan image that is 1/4 the width/height of the original, and 1/16 the\nnumber of pixels. Any value &lt;= 1 is treated the same as 1. Note: the\ndecoder uses a final value based on powers of 2, any other value will\nbe rounded down to the nearest power of 2.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inScaled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inScaled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inScaled' class='name expandable'>inScaled</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When this flag is set, if inDensity and\ninTargetDensity are not 0, the\nbitmap will be scaled to match inTargetDensity...</div><div class='long'><p>When this flag is set, if <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inDensity\" class=\"docClass\">inDensity</a> and\n<a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inTargetDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inTargetDensity\" class=\"docClass\">inTargetDensity</a> are not 0, the\nbitmap will be scaled to match <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inTargetDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inTargetDensity\" class=\"docClass\">inTargetDensity</a> when loaded,\nrather than relying on the graphics system scaling it each time it\nis drawn to a Canvas.</p>\n\n<p>BitmapRegionDecoder ignores this flag, and will not scale output\nbased on density. (though <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inSampleSize\" rel=\"android.graphics.BitmapFactory.Options-property-inSampleSize\" class=\"docClass\">inSampleSize</a> is supported)</p>\n\n\n\n\n<p><p>This flag is turned on by default and should be turned off if you need\na non-scaled version of the bitmap.  Nine-patch bitmaps ignore this\nflag and are always scaled.</p>\n\n<p><p>If <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inPremultiplied\" rel=\"android.graphics.BitmapFactory.Options-property-inPremultiplied\" class=\"docClass\">inPremultiplied</a> is set to false, and the image has alpha,\nsetting this flag to true may result in incorrect colors.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inScreenDensity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inScreenDensity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inScreenDensity' class='name expandable'>inScreenDensity</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The pixel density of the actual screen that is being used. ...</div><div class='long'><p>The pixel density of the actual screen that is being used.  This is\npurely for applications running in density compatibility code, where\n<a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inTargetDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inTargetDensity\" class=\"docClass\">inTargetDensity</a> is actually the density the application\nsees rather than the real screen density.</p>\n\n<p><p>By setting this, you\nallow the loading code to avoid scaling a bitmap that is currently\nin the screen density up/down to the compatibility density.  Instead,\nif <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inDensity\" class=\"docClass\">inDensity</a> is the same as <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScreenDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inScreenDensity\" class=\"docClass\">inScreenDensity</a>, the\nbitmap will be left as-is.  Anything using the resulting bitmap\nmust also used android.graphics.Bitmap.getScaledWidth and <a href=\"#!/api/android.graphics.Bitmap-method-getScaledHeight\" rel=\"android.graphics.Bitmap-method-getScaledHeight\" class=\"docClass\">android.graphics.Bitmap.getScaledHeight</a> to account for any different between the\nbitmap's density and the target's density.</p>\n\n<p><p>This is never set automatically for the caller by\n<a href=\"#!/api/android.graphics.BitmapFactory\" rel=\"android.graphics.BitmapFactory\" class=\"docClass\">android.graphics.BitmapFactory</a> itself.  It must be explicitly set, since the\ncaller must deal with the resulting bitmap in a density-aware way.</p>\n\n<p>@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inDensity\" class=\"docClass\">inDensity</a>\n@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inTargetDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inTargetDensity\" class=\"docClass\">inTargetDensity</a>\n@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScaled\" rel=\"android.graphics.BitmapFactory.Options-property-inScaled\" class=\"docClass\">inScaled</a>\n@see android.util.DisplayMetrics#densityDpi</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inTargetDensity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inTargetDensity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inTargetDensity' class='name expandable'>inTargetDensity</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The pixel density of the destination this bitmap will be drawn to. ...</div><div class='long'><p>The pixel density of the destination this bitmap will be drawn to.\nThis is used in conjunction with <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inDensity\" class=\"docClass\">inDensity</a> and\n<a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScaled\" rel=\"android.graphics.BitmapFactory.Options-property-inScaled\" class=\"docClass\">inScaled</a> to determine if and how to scale the bitmap before\nreturning it.</p>\n\n<p><p>If this is 0,\nint),\nint, android.graphics.BitmapFactory.Options),\nand <a href=\"#!/api/android.graphics.BitmapFactory-method-decodeResourceStream\" rel=\"android.graphics.BitmapFactory-method-decodeResourceStream\" class=\"docClass\">android.graphics.BitmapFactory.decodeResourceStream</a>\nwill fill in the density associated the Resources object's\nDisplayMetrics.  The other\nfunctions will leave it as-is and no scaling for density will be\nperformed.</p>\n\n<p>@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inDensity\" class=\"docClass\">inDensity</a>\n@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScreenDensity\" rel=\"android.graphics.BitmapFactory.Options-property-inScreenDensity\" class=\"docClass\">inScreenDensity</a>\n@see <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inScaled\" rel=\"android.graphics.BitmapFactory.Options-property-inScaled\" class=\"docClass\">inScaled</a>\n@see android.util.DisplayMetrics#densityDpi</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-inTempStorage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-inTempStorage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-inTempStorage' class='name expandable'>inTempStorage</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Temp storage to use for decoding. ...</div><div class='long'><p>Temp storage to use for decoding.  Suggest 16K or so.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-mCancel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-mCancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-mCancel' class='name expandable'>mCancel</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>As of android.os.Build.VERSION_CODES.N, see\ncomments on <a href=\"#!/api/android.graphics.BitmapFactory.Options-method-requestCancelDecode\" rel=\"android.graphics.BitmapFactory.Options-method-requestCancelDecode\" class=\"docClass\">requestCancelDecode</a>().</p>\n\n<p>Flag to indicate that cancel has been called on this object.  This\nis useful if there's an intermediary that wants to first decode the\nbounds and then decode the image.  In that case the intermediary\ncan check, inbetween the bounds decode and the image decode, to see\nif the operation is canceled.</p>\n\n        </div>\n</div></div></div><div id='property-outColorSpace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-outColorSpace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-outColorSpace' class='name expandable'>outColorSpace</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If known, the color space the decoded bitmap will have. ...</div><div class='long'><p>If known, the color space the decoded bitmap will have. Note that the\noutput color space is not guaranteed to be the color space the bitmap\nis encoded with. If not known (when the config is\n<a href=\"#!/api/android.graphics.Bitmap.Config-property-ALPHA_8\" rel=\"android.graphics.Bitmap.Config-property-ALPHA_8\" class=\"docClass\">android.graphics.Bitmap.Config.ALPHA_8</a> for instance), or there is an error,\nit is set to null.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-outConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-outConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-outConfig' class='name expandable'>outConfig</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If known, the config the decoded bitmap will have. ...</div><div class='long'><p>If known, the config the decoded bitmap will have.\nIf not known, or there is an error, it is set to null.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-outHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-outHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-outHeight' class='name expandable'>outHeight</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The resulting height of the bitmap. ...</div><div class='long'><p>The resulting height of the bitmap. If <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inJustDecodeBounds\" rel=\"android.graphics.BitmapFactory.Options-property-inJustDecodeBounds\" class=\"docClass\">inJustDecodeBounds</a> is\nset to false, this will be height of the output bitmap after any\nscaling is applied. If true, it will be the height of the input image\nwithout any accounting for scaling.</p>\n\n<p>outHeight will be set to -1 if there is an error trying to decode.</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-outMimeType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-outMimeType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-outMimeType' class='name expandable'>outMimeType</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If known, this string is set to the mimetype of the decoded image. ...</div><div class='long'><p>If known, this string is set to the mimetype of the decoded image.\nIf not known, or there is an error, it is set to null.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-outWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-property-outWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-property-outWidth' class='name expandable'>outWidth</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The resulting width of the bitmap. ...</div><div class='long'><p>The resulting width of the bitmap. If <a href=\"#!/api/android.graphics.BitmapFactory.Options-property-inJustDecodeBounds\" rel=\"android.graphics.BitmapFactory.Options-property-inJustDecodeBounds\" class=\"docClass\">inJustDecodeBounds</a> is\nset to false, this will be width of the output bitmap after any\nscaling is applied. If true, it will be the width of the input image\nwithout any accounting for scaling.</p>\n\n<p>outWidth will be set to -1 if there is an error trying to decode.</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-requestCancelDecode' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.graphics.BitmapFactory.Options'>android.graphics.BitmapFactory.Options</span><br/><a href='source/Options.html#android-graphics-BitmapFactory-Options-method-requestCancelDecode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.graphics.BitmapFactory.Options-method-requestCancelDecode' class='name expandable'>requestCancelDecode</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>As of android.os.Build.VERSION_CODES.N, this\n  will not affect the decode, though it will still set mCancel.</p>\n\n<p>  In android.os.Build.VERSION_CODES.M and below, if this can\n  be called from another thread while this options object is inside\n  a decode... call. Calling this will notify the decoder that it\n  should cancel its operation. This is not guaranteed to cancel the\n  decode, but if it does, the decoder... operation will return null,\n  or if inJustDecodeBounds is true, will set outWidth/outHeight\n  to -1</p>\n\n        </div>\n</div></div></div></div></div></div></div>","meta":{}});