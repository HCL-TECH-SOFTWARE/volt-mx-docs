Ext.data.JsonP.java_nio_file_WatchKey({"tagname":"class","name":"java.nio.file.WatchKey","autodetected":{},"files":[{"filename":"WatchKey.js","href":"WatchKey.html#java-nio-file-WatchKey"}],"since":"1.7","members":[{"name":"cancel","tagname":"method","owner":"java.nio.file.WatchKey","id":"method-cancel","meta":{}},{"name":"isValid","tagname":"method","owner":"java.nio.file.WatchKey","id":"method-isValid","meta":{}},{"name":"pollEvents","tagname":"method","owner":"java.nio.file.WatchKey","id":"method-pollEvents","meta":{}},{"name":"reset","tagname":"method","owner":"java.nio.file.WatchKey","id":"method-reset","meta":{}},{"name":"watchable","tagname":"method","owner":"java.nio.file.WatchKey","id":"method-watchable","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.WatchKey","short_doc":"A token representing the registration of a watchable object\n with a java.nio.file.WatchService. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/WatchKey.html#java-nio-file-WatchKey' target='_blank'>WatchKey.js</a></div></pre><div class='doc-contents'><p>A token representing the registration of a <a href=\"#!/api/java.nio.file.Watchable\" rel=\"java.nio.file.Watchable\" class=\"docClass\">watchable</a> object\n with a <a href=\"#!/api/java.nio.file.WatchService\" rel=\"java.nio.file.WatchService\" class=\"docClass\">java.nio.file.WatchService</a>.</p>\n\n<p> <p> A watch key is created when a watchable object is registered with a watch\n service. The key remains <a href=\"#!/api/java.nio.file.WatchKey-method-isValid\" rel=\"java.nio.file.WatchKey-method-isValid\" class=\"docClass\">valid</a> until:\n <ol>\n   <li> It is cancelled, explicitly, by invoking its <a href=\"#!/api/java.nio.file.WatchKey-method-cancel\" rel=\"java.nio.file.WatchKey-method-cancel\" class=\"docClass\">cancel</a>\n     method, or</li>\n   <li> Cancelled implicitly, because the object is no longer accessible,\n     or </li>\n   <li> By <a href=\"#!/api/java.nio.file.WatchService-method-close\" rel=\"java.nio.file.WatchService-method-close\" class=\"docClass\">closing</a> the watch service. </li>\n </ol></p>\n\n<p> <p> A watch key has a state. When initially created the key is said to be\n <em>ready</em>. When an event is detected then the key is <em>signalled</em>\n and queued so that it can be retrieved by invoking the watch service's poll or take methods. Once\n signalled, a key remains in this state until its <a href=\"#!/api/java.nio.file.WatchKey-method-reset\" rel=\"java.nio.file.WatchKey-method-reset\" class=\"docClass\">reset</a> method\n is invoked to return the key to the ready state. Events detected while the\n key is in the signalled state are queued but do not cause the key to be\n re-queued for retrieval from the watch service. Events are retrieved by\n invoking the key's <a href=\"#!/api/java.nio.file.WatchKey-method-pollEvents\" rel=\"java.nio.file.WatchKey-method-pollEvents\" class=\"docClass\">pollEvents</a> method. This method\n retrieves and removes all events accumulated for the object. When initially\n created, a watch key has no pending events. Typically events are retrieved\n when the key is in the signalled state leading to the following idiom:</p>\n\n<pre>     for (;;) {\n         // retrieve key\n         WatchKey key = watcher.take();\n\n         // process events\n         for (WatchEvent&lt;?&gt; event: key.pollEvents()) {\n             :\n         }\n\n         // reset the key\n         boolean valid = key.reset();\n         if (!valid) {\n             // object no longer registered\n         }\n     }\n </pre>\n\n\n<p> <p> Watch keys are safe for use by multiple concurrent threads. Where there\n are several threads retrieving signalled keys from a watch service then care\n should be taken to ensure that the {@code reset} method is only invoked after\n the events for the object have been processed. This ensures that one thread\n is processing the events for an object at any time.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cancel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.WatchKey'>java.nio.file.WatchKey</span><br/><a href='source/WatchKey.html#java-nio-file-WatchKey-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.WatchKey-method-cancel' class='name expandable'>cancel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancels the registration with the watch service. ...</div><div class='long'><p>Cancels the registration with the watch service. Upon return the watch key\n will be invalid. If the watch key is enqueued, waiting to be retrieved\n from the watch service, then it will remain in the queue until it is\n removed. Pending events, if any, remain pending and may be retrieved by\n invoking the <a href=\"#!/api/java.nio.file.WatchKey-method-pollEvents\" rel=\"java.nio.file.WatchKey-method-pollEvents\" class=\"docClass\">pollEvents</a> method after the key is\n cancelled.</p>\n\n<p> <p> If this watch key has already been cancelled then invoking this\n method has no effect.  Once cancelled, a watch key remains forever invalid.</p>\n</div></div></div><div id='method-isValid' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.WatchKey'>java.nio.file.WatchKey</span><br/><a href='source/WatchKey.html#java-nio-file-WatchKey-method-isValid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.WatchKey-method-isValid' class='name expandable'>isValid</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this watch key is valid. ...</div><div class='long'><p>Tells whether or not this watch key is valid.</p>\n\n<p> <p> A watch key is valid upon creation and remains until it is cancelled,\n or its watch service is closed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if, and only if, this watch key is valid</p>\n</div></li></ul></div></div></div><div id='method-pollEvents' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.WatchKey'>java.nio.file.WatchKey</span><br/><a href='source/WatchKey.html#java-nio-file-WatchKey-method-pollEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.WatchKey-method-pollEvents' class='name expandable'>pollEvents</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes all pending events for this watch key, returning\n a {@code List} of the events that were retrie...</div><div class='long'><p>Retrieves and removes all pending events for this watch key, returning\n a {@code List} of the events that were retrieved.</p>\n\n<p> <p> Note that this method does not wait if there are no events pending.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>the list of the events retrieved; may be empty</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.WatchKey'>java.nio.file.WatchKey</span><br/><a href='source/WatchKey.html#java-nio-file-WatchKey-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.WatchKey-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets this watch key. ...</div><div class='long'><p>Resets this watch key.</p>\n\n<p> <p> If this watch key has been cancelled or this watch key is already in\n the ready state then invoking this method has no effect. Otherwise\n if there are pending events for the object then this watch key is\n immediately re-queued to the watch service. If there are no pending\n events then the watch key is put into the ready state and will remain in\n that state until an event is detected or the watch key is cancelled.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the watch key is valid and has been reset, and\n          {@code false} if the watch key could not be reset because it is\n          no longer <a href=\"#!/api/java.nio.file.WatchKey-method-isValid\" rel=\"java.nio.file.WatchKey-method-isValid\" class=\"docClass\">valid</a></p>\n</div></li></ul></div></div></div><div id='method-watchable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.WatchKey'>java.nio.file.WatchKey</span><br/><a href='source/WatchKey.html#java-nio-file-WatchKey-method-watchable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.WatchKey-method-watchable' class='name expandable'>watchable</a>( <span class='pre'></span> ) : Object {java.nio.file.Watchable}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the object for which this watch key was created. ...</div><div class='long'><p>Returns the object for which this watch key was created. This method will\n continue to return the object even after the key is cancelled.</p>\n\n<p> <p> As the {@code WatchService} is intended to map directly on to the\n native file event notification facility (where available) then many of\n details on how registered objects are watched is highly implementation\n specific. When watching a directory for changes for example, and the\n directory is moved or renamed in the file system, there is no guarantee\n that the watch key will be cancelled and so the object returned by this\n method may no longer be a valid path to the directory.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Watchable}</span><div class='sub-desc'><p>the object for which this watch key was created</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});