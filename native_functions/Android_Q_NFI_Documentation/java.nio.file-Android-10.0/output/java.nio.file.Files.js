Ext.data.JsonP.java_nio_file_Files({"tagname":"class","name":"java.nio.file.Files","autodetected":{},"files":[{"filename":"Files.js","href":"Files.html#java-nio-file-Files"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"copy","tagname":"method","owner":"java.nio.file.Files","id":"method-copy","meta":{}},{"name":"createDirectories","tagname":"method","owner":"java.nio.file.Files","id":"method-createDirectories","meta":{}},{"name":"createDirectory","tagname":"method","owner":"java.nio.file.Files","id":"method-createDirectory","meta":{}},{"name":"createFile","tagname":"method","owner":"java.nio.file.Files","id":"method-createFile","meta":{}},{"name":"createLink","tagname":"method","owner":"java.nio.file.Files","id":"method-createLink","meta":{}},{"name":"createSymbolicLink","tagname":"method","owner":"java.nio.file.Files","id":"method-createSymbolicLink","meta":{}},{"name":"createTempDirectory","tagname":"method","owner":"java.nio.file.Files","id":"method-createTempDirectory","meta":{}},{"name":"createTempFile","tagname":"method","owner":"java.nio.file.Files","id":"method-createTempFile","meta":{}},{"name":"delete","tagname":"method","owner":"java.nio.file.Files","id":"method-delete","meta":{}},{"name":"deleteIfExists","tagname":"method","owner":"java.nio.file.Files","id":"method-deleteIfExists","meta":{}},{"name":"exists","tagname":"method","owner":"java.nio.file.Files","id":"method-exists","meta":{}},{"name":"find","tagname":"method","owner":"java.nio.file.Files","id":"method-find","meta":{}},{"name":"getAttribute","tagname":"method","owner":"java.nio.file.Files","id":"method-getAttribute","meta":{}},{"name":"getFileAttributeView","tagname":"method","owner":"java.nio.file.Files","id":"method-getFileAttributeView","meta":{}},{"name":"getFileStore","tagname":"method","owner":"java.nio.file.Files","id":"method-getFileStore","meta":{}},{"name":"getLastModifiedTime","tagname":"method","owner":"java.nio.file.Files","id":"method-getLastModifiedTime","meta":{}},{"name":"getOwner","tagname":"method","owner":"java.nio.file.Files","id":"method-getOwner","meta":{}},{"name":"getPosixFilePermissions","tagname":"method","owner":"java.nio.file.Files","id":"method-getPosixFilePermissions","meta":{}},{"name":"isDirectory","tagname":"method","owner":"java.nio.file.Files","id":"method-isDirectory","meta":{}},{"name":"isExecutable","tagname":"method","owner":"java.nio.file.Files","id":"method-isExecutable","meta":{}},{"name":"isHidden","tagname":"method","owner":"java.nio.file.Files","id":"method-isHidden","meta":{}},{"name":"isReadable","tagname":"method","owner":"java.nio.file.Files","id":"method-isReadable","meta":{}},{"name":"isRegularFile","tagname":"method","owner":"java.nio.file.Files","id":"method-isRegularFile","meta":{}},{"name":"isSameFile","tagname":"method","owner":"java.nio.file.Files","id":"method-isSameFile","meta":{}},{"name":"isSymbolicLink","tagname":"method","owner":"java.nio.file.Files","id":"method-isSymbolicLink","meta":{}},{"name":"isWritable","tagname":"method","owner":"java.nio.file.Files","id":"method-isWritable","meta":{}},{"name":"lines","tagname":"method","owner":"java.nio.file.Files","id":"method-lines","meta":{}},{"name":"list","tagname":"method","owner":"java.nio.file.Files","id":"method-list","meta":{}},{"name":"move","tagname":"method","owner":"java.nio.file.Files","id":"method-move","meta":{}},{"name":"newBufferedReader","tagname":"method","owner":"java.nio.file.Files","id":"method-newBufferedReader","meta":{}},{"name":"newBufferedWriter","tagname":"method","owner":"java.nio.file.Files","id":"method-newBufferedWriter","meta":{}},{"name":"newByteChannel","tagname":"method","owner":"java.nio.file.Files","id":"method-newByteChannel","meta":{}},{"name":"newDirectoryStream","tagname":"method","owner":"java.nio.file.Files","id":"method-newDirectoryStream","meta":{}},{"name":"newInputStream","tagname":"method","owner":"java.nio.file.Files","id":"method-newInputStream","meta":{}},{"name":"newOutputStream","tagname":"method","owner":"java.nio.file.Files","id":"method-newOutputStream","meta":{}},{"name":"notExists","tagname":"method","owner":"java.nio.file.Files","id":"method-notExists","meta":{}},{"name":"probeContentType","tagname":"method","owner":"java.nio.file.Files","id":"method-probeContentType","meta":{}},{"name":"readAllBytes","tagname":"method","owner":"java.nio.file.Files","id":"method-readAllBytes","meta":{}},{"name":"readAllLines","tagname":"method","owner":"java.nio.file.Files","id":"method-readAllLines","meta":{}},{"name":"readAttributes","tagname":"method","owner":"java.nio.file.Files","id":"method-readAttributes","meta":{}},{"name":"readSymbolicLink","tagname":"method","owner":"java.nio.file.Files","id":"method-readSymbolicLink","meta":{}},{"name":"setAttribute","tagname":"method","owner":"java.nio.file.Files","id":"method-setAttribute","meta":{}},{"name":"setLastModifiedTime","tagname":"method","owner":"java.nio.file.Files","id":"method-setLastModifiedTime","meta":{}},{"name":"setOwner","tagname":"method","owner":"java.nio.file.Files","id":"method-setOwner","meta":{}},{"name":"setPosixFilePermissions","tagname":"method","owner":"java.nio.file.Files","id":"method-setPosixFilePermissions","meta":{}},{"name":"size","tagname":"method","owner":"java.nio.file.Files","id":"method-size","meta":{}},{"name":"walk","tagname":"method","owner":"java.nio.file.Files","id":"method-walk","meta":{}},{"name":"walkFileTree","tagname":"method","owner":"java.nio.file.Files","id":"method-walkFileTree","meta":{}},{"name":"write","tagname":"method","owner":"java.nio.file.Files","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.Files","short_doc":"This class consists exclusively of static methods that operate on files,\n directories, or other types of files. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.file.Files</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Files.html#java-nio-file-Files' target='_blank'>Files.js</a></div></pre><div class='doc-contents'><p>This class consists exclusively of static methods that operate on files,\n directories, or other types of files.</p>\n\n<p> <p> In most cases, the methods defined here will delegate to the associated\n file system provider to perform the file operations.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-copy' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-copy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-copy' class='name expandable'>copy</a>( <span class='pre'>source, out</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Copies all bytes from a file to an output stream. ...</div><div class='long'><p>Copies all bytes from a file to an output stream.</p>\n\n<p> <p> If an I/O error occurs reading from the file or writing to the output\n stream, then it may do so after some bytes have been read or written.\n Consequently the output stream may be in an inconsistent state. It is\n strongly recommended that the output stream be promptly closed if an I/O\n error occurs.</p>\n\n<p> <p> This method may block indefinitely writing to the output stream (or\n reading from the file). The behavior for the case that the output stream\n is <i>asynchronously closed</i> or the thread interrupted during the copy\n is highly output stream and file system provider specific and therefore\n not specified.</p>\n\n<p> <p> Note that if the given output stream is java.io.Flushable\n then its flush method may need to invoked\n after this method completes so as to flush any buffered output.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : Object {Path}<div class='sub-desc'><p>the  path to the file</p>\n</div></li><li><span class='pre'>out</span> : Object {OutputStream}<div class='sub-desc'><p>the output stream to write to</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of bytes read or written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs when reading or writing</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-createDirectories' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-createDirectories' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-createDirectories' class='name expandable'>createDirectories</a>( <span class='pre'>dir, attrs</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a directory by creating all nonexistent parent directories first. ...</div><div class='long'><p>Creates a directory by creating all nonexistent parent directories first.\n Unlike the <a href=\"#!/api/java.nio.file.Files-method-createDirectory\" rel=\"java.nio.file.Files-method-createDirectory\" class=\"docClass\">createDirectory</a> method, an exception\n is not thrown if the directory could not be created because it already\n exists.</p>\n\n<p> <p> The {@code attrs} parameter is optional file-attributes to set atomically when creating the nonexistent\n directories. Each file attribute is identified by its name. If more than one attribute of the same name is\n included in the array then all but the last occurrence is ignored.</p>\n\n<p> <p> If this method fails, then it may do so after creating some, but not\n all, of the parent directories.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dir</span> : Object {Path}<div class='sub-desc'><p>the directory to create</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the directory</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the directory</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains an attribute that cannot be set atomically\n          when creating the directory</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if {@code dir} exists but is not a directory <i>(optional specific\n          exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          in the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked prior to attempting to create a directory and\n          its checkRead is\n          invoked for each parent directory that is checked. If {@code\n          dir} is not an absolute path then its toAbsolutePath may need to be invoked to get its absolute path.\n          This may invoke the security manager's checkPropertyAccess\n          method to check access to the system property {@code user.dir}</p>\n</div></li></ul></div></div></div><div id='method-createDirectory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-createDirectory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-createDirectory' class='name expandable'>createDirectory</a>( <span class='pre'>dir, attrs</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new directory. ...</div><div class='long'><p>Creates a new directory. The check for the existence of the file and the\n creation of the directory if it does not exist are a single operation\n that is atomic with respect to all other filesystem activities that might\n affect the directory. The <a href=\"#!/api/java.nio.file.Files-method-createDirectories\" rel=\"java.nio.file.Files-method-createDirectories\" class=\"docClass\">createDirectories</a>\n method should be used where it is required to create all nonexistent\n parent directories first.</p>\n\n<p> <p> The {@code attrs} parameter is optional file-attributes to set atomically when creating the directory. Each\n attribute is identified by its name. If more\n than one attribute of the same name is included in the array then all but\n the last occurrence is ignored.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dir</span> : Object {Path}<div class='sub-desc'><p>the directory to create</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the directory</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the directory</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains an attribute that cannot be set atomically\n          when creating the directory</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if a directory could not otherwise be created because a file of\n          that name already exists <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs or the parent directory does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to the new directory.</p>\n</div></li></ul></div></div></div><div id='method-createFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-createFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-createFile' class='name expandable'>createFile</a>( <span class='pre'>path, attrs</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new and empty file, failing if the file already exists. ...</div><div class='long'><p>Creates a new and empty file, failing if the file already exists. The\n check for the existence of the file and the creation of the new file if\n it does not exist are a single operation that is atomic with respect to\n all other filesystem activities that might affect the directory.</p>\n\n<p> <p> The {@code attrs} parameter is optional file-attributes to set atomically when creating the file. Each attribute\n is identified by its name. If more than one\n attribute of the same name is included in the array then all but the last\n occurrence is ignored.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to create</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains an attribute that cannot be set atomically\n          when creating the file</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if a file of that name already exists\n          <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs or the parent directory does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to the new file.</p>\n</div></li></ul></div></div></div><div id='method-createLink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-createLink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-createLink' class='name expandable'>createLink</a>( <span class='pre'>link, existing</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new link (directory entry) for an existing file (optional\n operation). ...</div><div class='long'><p>Creates a new link (directory entry) for an existing file <i>(optional\n operation)</i>.</p>\n\n<p> <p> The {@code link} parameter locates the directory entry to create.\n The {@code existing} parameter is the path to an existing file. This\n method creates a new directory entry for the file so that it can be\n accessed using {@code link} as the path. On some file systems this is\n known as creating a \"hard link\". Whether the file attributes are\n maintained for the file or for each directory entry is file system\n specific and therefore not specified. Typically, a file system requires\n that all links (directory entries) for a file be on the same file system.\n Furthermore, on some platforms, the Java virtual machine may require to\n be started with implementation specific privileges to create hard links\n or to create links to directories.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>link</span> : Object {Path}<div class='sub-desc'><p>the link (directory entry) to create</p>\n</div></li><li><span class='pre'>existing</span> : Object {Path}<div class='sub-desc'><p>a path to an existing file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the path to the link (directory entry)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the implementation does not support adding an existing file\n          to a directory</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if the entry could not otherwise be created because a file of\n          that name already exists <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager\n          is installed, it denies LinkPermission<tt>(\"hard\")</tt>\n          or its checkWrite\n          method denies write access to either the link or the\n          existing file.</p>\n</div></li></ul></div></div></div><div id='method-createSymbolicLink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-createSymbolicLink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-createSymbolicLink' class='name expandable'>createSymbolicLink</a>( <span class='pre'>link, target, attrs</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a symbolic link to a target (optional operation). ...</div><div class='long'><p>Creates a symbolic link to a target <i>(optional operation)</i>.</p>\n\n<p> <p> The {@code target} parameter is the target of the link. It may be an\n <a href=\"#!/api/java.nio.file.Path-method-isAbsolute\" rel=\"java.nio.file.Path-method-isAbsolute\" class=\"docClass\">absolute</a> or relative path and may not exist. When\n the target is a relative path then file system operations on the resulting\n link are relative to the path of the link.</p>\n\n<p> <p> The {@code attrs} parameter is optional attributes to set atomically when creating the link. Each attribute is\n identified by its name. If more than one attribute\n of the same name is included in the array then all but the last occurrence\n is ignored.</p>\n\n<p> <p> Where symbolic links are supported, but the underlying <a href=\"#!/api/java.nio.file.FileStore\" rel=\"java.nio.file.FileStore\" class=\"docClass\">java.nio.file.FileStore</a>\n does not support symbolic links, then this may fail with an IOException. Additionally, some operating systems may require that the\n Java virtual machine be started with implementation specific privileges to\n create symbolic links, in which case this method may throw {@code IOException}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>link</span> : Object {Path}<div class='sub-desc'><p>the path of the symbolic link to create</p>\n</div></li><li><span class='pre'>target</span> : Object {Path}<div class='sub-desc'><p>the target of the symbolic link</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>the array of attributes to set atomically when creating the\n          symbolic link</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the path to the symbolic link</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the implementation does not support symbolic links or the\n          array contains an attribute that cannot be set atomically when\n          creating the symbolic link</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if a file with the name already exists <i>(optional specific\n          exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager\n          is installed, it denies LinkPermission<tt>(\"symbolic\")</tt>\n          or its checkWrite\n          method denies write access to the path of the symbolic link.</p>\n</div></li></ul></div></div></div><div id='method-createTempDirectory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-createTempDirectory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-createTempDirectory' class='name expandable'>createTempDirectory</a>( <span class='pre'>prefix, attrs</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new directory in the default temporary-file directory, using\n the given prefix to generate its name. ...</div><div class='long'><p>Creates a new directory in the default temporary-file directory, using\n the given prefix to generate its name. The resulting {@code Path} is\n associated with the default {@code FileSystem}.</p>\n\n<p> <p> This method works in exactly the manner specified by createTempDirectory(Path,String,FileAttribute[]) method for the case\n that the {@code dir} parameter is the temporary-file directory.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>prefix</span> : String<div class='sub-desc'><p>the prefix string to be used in generating the directory's name;\n          may be {@code null}</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the directory</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the path to the newly created directory that did not exist before\n          this method was invoked</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the prefix cannot be used to generate a candidate directory name</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains an attribute that cannot be set atomically\n          when creating the directory</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs or the temporary-file directory does not\n          exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access when creating the\n          directory.</p>\n</div></li></ul></div></div></div><div id='method-createTempFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-createTempFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-createTempFile' class='name expandable'>createTempFile</a>( <span class='pre'>prefix, suffix, attrs</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates an empty file in the default temporary-file directory, using\n the given prefix and suffix to generate its name. ...</div><div class='long'><p>Creates an empty file in the default temporary-file directory, using\n the given prefix and suffix to generate its name. The resulting {@code\n Path} is associated with the default {@code FileSystem}.</p>\n\n<p> <p> This method works in exactly the manner specified by the\n createTempFile(Path,String,String,FileAttribute[]) method for\n the case that the {@code dir} parameter is the temporary-file directory.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>prefix</span> : String<div class='sub-desc'><p>the prefix string to be used in generating the file's name;\n          may be {@code null}</p>\n</div></li><li><span class='pre'>suffix</span> : String<div class='sub-desc'><p>the suffix string to be used in generating the file's name;\n          may be {@code null}, in which case \"{@code .tmp}\" is used</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of file attributes to set atomically when\n          creating the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the path to the newly created file that did not exist before\n          this method was invoked</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the prefix or suffix parameters cannot be used to generate\n          a candidate file name</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains an attribute that cannot be set atomically\n          when creating the directory</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs or the temporary-file directory does not\n          exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to the file.</p>\n</div></li></ul></div></div></div><div id='method-delete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-delete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-delete' class='name expandable'>delete</a>( <span class='pre'>path</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes a file. ...</div><div class='long'><p>Deletes a file.</p>\n\n<p> <p> An implementation may require to examine the file to determine if the\n file is a directory. Consequently this method may not be atomic with respect\n to other file system operations.  If the file is a symbolic link then the\n symbolic link itself, not the final target of the link, is deleted.</p>\n\n<p> <p> If the file is a directory then the directory must be empty. In some\n implementations a directory has entries for special files or links that\n are created when the directory is created. In such implementations a\n directory is considered empty when only the special entries exist.\n This method can be used with the <a href=\"#!/api/java.nio.file.Files-method-walkFileTree\" rel=\"java.nio.file.Files-method-walkFileTree\" class=\"docClass\">walkFileTree</a>\n method to delete a directory and all entries in the directory, or an\n entire <i>file-tree</i> where required.</p>\n\n<p> <p> On some operating systems it may not be possible to remove a file when\n it is open and in use by this Java virtual machine or other programs.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to delete</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFileException\n          if the file does not exist <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DirectoryNotEmptyException\n          if the file is a directory and could not otherwise be deleted\n          because the directory is not empty <i>(optional specific\n          exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the SecurityManager.checkDelete(String) method\n          is invoked to check delete access to the file</p>\n</div></li></ul></div></div></div><div id='method-deleteIfExists' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-deleteIfExists' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-deleteIfExists' class='name expandable'>deleteIfExists</a>( <span class='pre'>path</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes a file if it exists. ...</div><div class='long'><p>Deletes a file if it exists.</p>\n\n<p> <p> As with the delete(Path) method, an\n implementation may need to examine the file to determine if the file is a\n directory. Consequently this method may not be atomic with respect to\n other file system operations.  If the file is a symbolic link, then the\n symbolic link itself, not the final target of the link, is deleted.</p>\n\n<p> <p> If the file is a directory then the directory must be empty. In some\n implementations a directory has entries for special files or links that\n are created when the directory is created. In such implementations a\n directory is considered empty when only the special entries exist.</p>\n\n<p> <p> On some operating systems it may not be possible to remove a file when\n it is open and in use by this Java virtual machine or other programs.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to delete</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file was deleted by this method; {@code\n          false} if the file could not be deleted because it did not\n          exist</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DirectoryNotEmptyException\n          if the file is a directory and could not otherwise be deleted\n          because the directory is not empty <i>(optional specific\n          exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the SecurityManager.checkDelete(String) method\n          is invoked to check delete access to the file.</p>\n</div></li></ul></div></div></div><div id='method-exists' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-exists' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-exists' class='name expandable'>exists</a>( <span class='pre'>path, options</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether a file exists. ...</div><div class='long'><p>Tests whether a file exists.</p>\n\n<p> <p> The {@code options} parameter may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n\n<p> <p> Note that the result of this method is immediately outdated. If this\n method indicates the file exists then there is no guarantee that a\n subsequence access will succeed. Care should be taken when using this\n method in security sensitive applications.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to test</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled\n .</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file exists; {@code false} if the file does\n          not exist or its existence cannot be determined.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, the SecurityManager.checkRead(String) is invoked to check\n          read access to the file.\n@see <a href=\"#!/api/java.nio.file.Files-method-notExists\" rel=\"java.nio.file.Files-method-notExists\" class=\"docClass\">notExists</a></p>\n</div></li></ul></div></div></div><div id='method-find' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-find' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-find' class='name expandable'>find</a>( <span class='pre'>start, maxDepth, matcher, options</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a {@code Stream} that is lazily populated with {@code\n Path} by searching for files in a file tree rooted at a...</div><div class='long'><p>Return a {@code Stream} that is lazily populated with {@code\n Path} by searching for files in a file tree rooted at a given starting\n file.</p>\n\n<p> <p> This method walks the file tree in exactly the manner specified by\n the <a href=\"#!/api/java.nio.file.Files-method-walk\" rel=\"java.nio.file.Files-method-walk\" class=\"docClass\">walk</a> method. For each file encountered, the given\n BiPredicate is invoked with its <a href=\"#!/api/java.nio.file.Path\" rel=\"java.nio.file.Path\" class=\"docClass\">java.nio.file.Path</a> and BasicFileAttributes. The {@code Path} object is obtained as if by\n resolving the relative path against {@code\n start} and is only included in the returned Stream if\n the {@code BiPredicate} returns true. Compare to calling filter on the {@code Stream}\n returned by {@code walk} method, this method may be more efficient by\n avoiding redundant retrieval of the {@code BasicFileAttributes}.</p>\n\n<p> <p> The returned stream encapsulates one or more <a href=\"#!/api/java.nio.file.DirectoryStream\" rel=\"java.nio.file.DirectoryStream\" class=\"docClass\">java.nio.file.DirectoryStream</a>s.\n If timely disposal of file system resources is required, the\n {@code try}-with-resources construct should be used to ensure that the\n stream's close method is invoked after the stream\n operations are completed.  Operating on a closed stream will result in an\n java.lang.IllegalStateException.</p>\n\n<p> <p> If an IOException is thrown when accessing the directory\n after returned from this method, it is wrapped in an UncheckedIOException which will be thrown from the method that caused\n the access to take place.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>start</span> : Object {Path}<div class='sub-desc'><p>the starting file</p>\n</div></li><li><span class='pre'>maxDepth</span> : Number<div class='sub-desc'><p>the maximum number of directory levels to search</p>\n</div></li><li><span class='pre'>matcher</span> : Object {java.util.function.BiPredicate}<div class='sub-desc'><p>the function used to decide whether a file should be included\n          in the returned stream</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.FileVisitOption[]}<div class='sub-desc'><p>options to configure the traversal</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the Stream of Path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the {@code maxDepth} parameter is negative</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If the security manager denies access to the starting file.\n          In the case of the default provider, the checkRead method is invoked\n          to check read access to the directory.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error is thrown when accessing the starting file.\n@see <a href=\"#!/api/java.nio.file.Files-method-walk\" rel=\"java.nio.file.Files-method-walk\" class=\"docClass\">walk</a>(Path, int, FileVisitOption...)</p>\n</div></li></ul></div></div></div><div id='method-getAttribute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-getAttribute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-getAttribute' class='name expandable'>getAttribute</a>( <span class='pre'>path, attribute, options</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads the value of a file attribute. ...</div><div class='long'><p>Reads the value of a file attribute.</p>\n\n<p> <p> The {@code attribute} parameter identifies the attribute to be read\n and takes the form:\n <blockquote>\n [<i>view-name</i><b>:</b>]<i>attribute-name</i>\n </blockquote>\n where square brackets [...] delineate an optional component and the\n character {@code ':'} stands for itself.</p>\n\n<p> <p> <i>view-name</i> is the name of a FileAttributeView that identifies a set of file attributes. If not\n specified then it defaults to {@code \"basic\"}, the name of the file\n attribute view that identifies the basic set of file attributes common to\n many file systems. <i>attribute-name</i> is the name of the attribute.</p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed and the file attribute of the final target\n of the link is read. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we require the user ID of the file owner on a system that\n supports a \"{@code unix}\" view:</p>\n\n<pre>    Path path = ...\n    int uid = (Integer)Files.getAttribute(path, \"unix:uid\");\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>attribute</span> : String<div class='sub-desc'><p>the attribute to read</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the attribute value</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the attribute view is not available</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the attribute name is not specified or is not recognized</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkRead\n          method denies read access to the file. If this method is invoked\n          to read security sensitive attributes then the security manager\n          may be invoked to check for additional permissions.</p>\n</div></li></ul></div></div></div><div id='method-getFileAttributeView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-getFileAttributeView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-getFileAttributeView' class='name expandable'>getFileAttributeView</a>( <span class='pre'>path, type, options, options</span> ) : Object {java.nio.file.attribute.FileAttributeView}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a file attribute view of a given type. ...</div><div class='long'><p>Returns a file attribute view of a given type.</p>\n\n<p> <p> A file attribute view provides a read-only or updatable view of a\n set of file attributes. This method is intended to be used where the file\n attribute view defines type-safe methods to read or update the file\n attributes. The {@code type} parameter is the type of the attribute view\n required and the method returns an instance of that type if supported.\n The BasicFileAttributeView type supports access to the basic\n attributes of a file. Invoking this method to select a file attribute\n view of that type will always return an instance of that class.</p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled by the resulting file attribute view for the case that the\n file is a symbolic link. By default, symbolic links are followed. If the\n option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then\n symbolic links are not followed. This option is ignored by implementations\n that do not support symbolic links.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want read or set a file's ACL, if supported:</p>\n\n<pre>     Path path = ...\n     AclFileAttributeView view = Files.getFileAttributeView(path, AclFileAttributeView.class);\n     if (view != null) {\n         List&lt;AclEntry&gt; acl = view.getAcl();\n         :\n     }\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>type</span> : Object {java.lang.Class}<div class='sub-desc'><p>the {@code Class} object corresponding to the file attribute view</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li><li><span class='pre'>options</span> : Object<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.attribute.FileAttributeView}</span><div class='sub-desc'><p>a file attribute view of the specified type, or {@code null} if\n          the attribute view type is not available</p>\n</div></li></ul></div></div></div><div id='method-getFileStore' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-getFileStore' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-getFileStore' class='name expandable'>getFileStore</a>( <span class='pre'>path</span> ) : Object {java.nio.file.FileStore}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the java.nio.file.FileStore representing the file store where a file\n is located. ...</div><div class='long'><p>Returns the <a href=\"#!/api/java.nio.file.FileStore\" rel=\"java.nio.file.FileStore\" class=\"docClass\">java.nio.file.FileStore</a> representing the file store where a file\n is located.</p>\n\n<p> <p> Once a reference to the {@code FileStore} is obtained it is\n implementation specific if operations on the returned {@code FileStore},\n or java.nio.file.FileStoreAttributeView objects obtained from it, continue\n to depend on the existence of the file. In particular the behavior is not\n defined for the case that the file is deleted or moved to a different\n file store.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileStore}</span><div class='sub-desc'><p>the file store where the file is stored</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file, and in\n          addition it checks RuntimePermission<tt>\n          (\"getFileStoreAttributes\")</tt></p>\n</div></li></ul></div></div></div><div id='method-getLastModifiedTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-getLastModifiedTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-getLastModifiedTime' class='name expandable'>getLastModifiedTime</a>( <span class='pre'>path, options</span> ) : Object {java.nio.file.attribute.FileTime}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a file's last modified time. ...</div><div class='long'><p>Returns a file's last modified time.</p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed and the file attribute of the final target\n of the link is read. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.attribute.FileTime}</span><div class='sub-desc'><p>a {@code FileTime} representing the time the file was last\n          modified, or an implementation specific default when a time\n          stamp to indicate the time of last modification is not supported\n          by the file system</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkRead\n          method denies read access to the file.\n@see BasicFileAttributes#lastModifiedTime</p>\n</div></li></ul></div></div></div><div id='method-getOwner' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-getOwner' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-getOwner' class='name expandable'>getOwner</a>( <span class='pre'>path, options</span> ) : Object {java.nio.file.attribute.UserPrincipal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the owner of a file. ...</div><div class='long'><p>Returns the owner of a file.</p>\n\n<p> <p> The {@code path} parameter is associated with a file system that\n supports FileOwnerAttributeView. This file attribute view provides\n access to a file attribute that is the owner of the file.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>The path to the file</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.attribute.UserPrincipal}</span><div class='sub-desc'><p>A user principal representing the owner of the file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the associated file system does not support the {@code\n          FileOwnerAttributeView}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, it denies RuntimePermission<tt>(\"accessUserInformation\")</tt>\n          or its checkRead method\n          denies read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-getPosixFilePermissions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-getPosixFilePermissions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-getPosixFilePermissions' class='name expandable'>getPosixFilePermissions</a>( <span class='pre'>path, options</span> ) : Object {java.util.Set}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a file's POSIX file permissions. ...</div><div class='long'><p>Returns a file's POSIX file permissions.</p>\n\n<p> <p> The {@code path} parameter is associated with a {@code FileSystem}\n that supports the PosixFileAttributeView. This attribute view\n provides access to file attributes commonly associated with files on file\n systems used by operating systems that implement the Portable Operating\n System Interface (POSIX) family of standards.</p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed and the file attribute of the final target\n of the link is read. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Set}</span><div class='sub-desc'><p>the file permissions</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the associated file system does not support the {@code\n          PosixFileAttributeView}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager is\n          installed, and it denies RuntimePermission<tt>(\"accessUserInformation\")</tt>\n          or its checkRead method\n          denies read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-isDirectory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-isDirectory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-isDirectory' class='name expandable'>isDirectory</a>( <span class='pre'>path, options</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether a file is a directory. ...</div><div class='long'><p>Tests whether a file is a directory.</p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed and the file attribute of the final target\n of the link is read. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n\n<p> <p> Where it is required to distinguish an I/O exception from the case\n that the file is not a directory then the file attributes can be\n read with the readAttributes method and the file type tested with the BasicFileAttributes.isDirectory method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to test</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file is a directory; {@code false} if\n          the file does not exist, is not a directory, or it cannot\n          be determined if the file is a directory or not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkRead\n          method denies read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-isExecutable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-isExecutable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-isExecutable' class='name expandable'>isExecutable</a>( <span class='pre'>path</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether a file is executable. ...</div><div class='long'><p>Tests whether a file is executable. This method checks that a file exists\n and that this Java virtual machine has appropriate privileges to execute the file. The semantics may differ when checking\n access to a directory. For example, on UNIX systems, checking for\n execute access checks that the Java virtual machine has permission to\n search the directory in order to access file or subdirectories.</p>\n\n<p> <p> Depending on the implementation, this method may require to read file\n permissions, access control lists, or other file attributes in order to\n check the effective access to the file. Consequently, this method may not\n be atomic with respect to other file system operations.</p>\n\n<p> <p> Note that the result of this method is immediately outdated, there is\n no guarantee that a subsequent attempt to execute the file will succeed\n (or even that it will access the same file). Care should be taken when\n using this method in security sensitive applications.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to check</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file exists and is executable; {@code false}\n          if the file does not exist, execute access would be denied because\n          the Java virtual machine has insufficient privileges, or access\n          cannot be determined</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkExec is invoked to check execute access to the file.</p>\n</div></li></ul></div></div></div><div id='method-isHidden' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-isHidden' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-isHidden' class='name expandable'>isHidden</a>( <span class='pre'>path</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not a file is considered hidden. ...</div><div class='long'><p>Tells whether or not a file is considered <em>hidden</em>. The exact\n definition of hidden is platform or provider dependent. On UNIX for\n example a file is considered to be hidden if its name begins with a\n period character ('.'). On Windows a file is considered hidden if it\n isn't a directory and the DOS hidden\n attribute is set.</p>\n\n<p> <p> Depending on the implementation this method may require to access\n the file system to determine if the file is considered hidden.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to test</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file is considered hidden</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-isReadable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-isReadable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-isReadable' class='name expandable'>isReadable</a>( <span class='pre'>path</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether a file is readable. ...</div><div class='long'><p>Tests whether a file is readable. This method checks that a file exists\n and that this Java virtual machine has appropriate privileges that would\n allow it open the file for reading. Depending on the implementation, this\n method may require to read file permissions, access control lists, or\n other file attributes in order to check the effective access to the file.\n Consequently, this method may not be atomic with respect to other file\n system operations.</p>\n\n<p> <p> Note that the result of this method is immediately outdated, there is\n no guarantee that a subsequent attempt to open the file for reading will\n succeed (or even that it will access the same file). Care should be taken\n when using this method in security sensitive applications.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to check</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file exists and is readable; {@code false}\n          if the file does not exist, read access would be denied because\n          the Java virtual machine has insufficient privileges, or access\n          cannot be determined</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-isRegularFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-isRegularFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-isRegularFile' class='name expandable'>isRegularFile</a>( <span class='pre'>path, options</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether a file is a regular file with opaque content. ...</div><div class='long'><p>Tests whether a file is a regular file with opaque content.</p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed and the file attribute of the final target\n of the link is read. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n\n<p> <p> Where it is required to distinguish an I/O exception from the case\n that the file is not a regular file then the file attributes can be\n read with the readAttributes method and the file type tested with the BasicFileAttributes.isRegularFile method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file is a regular file; {@code false} if\n          the file does not exist, is not a regular file, or it\n          cannot be determined if the file is a regular file or not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkRead\n          method denies read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-isSameFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-isSameFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-isSameFile' class='name expandable'>isSameFile</a>( <span class='pre'>path, path2</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if two paths locate the same file. ...</div><div class='long'><p>Tests if two paths locate the same file.</p>\n\n<p> <p> If both {@code Path} objects are equal\n then this method returns {@code true} without checking if the file exists.\n If the two {@code Path} objects are associated with different providers\n then this method returns {@code false}. Otherwise, this method checks if\n both {@code Path} objects locate the same file, and depending on the\n implementation, may require to open or access both files.</p>\n\n<p> <p> If the file system and files remain static, then this method implements\n an equivalence relation for non-null {@code Paths}.\n <ul>\n <li>It is <i>reflexive</i>: for {@code Path} {@code f},\n     {@code isSameFile(f,f)} should return {@code true}.\n <li>It is <i>symmetric</i>: for two {@code Paths} {@code f} and {@code g},\n     {@code isSameFile(f,g)} will equal {@code isSameFile(g,f)}.\n <li>It is <i>transitive</i>: for three {@code Paths}\n     {@code f}, {@code g}, and {@code h}, if {@code isSameFile(f,g)} returns\n     {@code true} and {@code isSameFile(g,h)} returns {@code true}, then\n     {@code isSameFile(f,h)} will return return {@code true}.\n </li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>one path to the file</p>\n</div></li><li><span class='pre'>path2</span> : Object {Path}<div class='sub-desc'><p>the other path</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if, and only if, the two paths locate the same file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to both files.\n@see java.nio.file.attribute.BasicFileAttributes#fileKey</p>\n</div></li></ul></div></div></div><div id='method-isSymbolicLink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-isSymbolicLink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-isSymbolicLink' class='name expandable'>isSymbolicLink</a>( <span class='pre'>path</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether a file is a symbolic link. ...</div><div class='long'><p>Tests whether a file is a symbolic link.</p>\n\n<p> <p> Where it is required to distinguish an I/O exception from the case\n that the file is not a symbolic link then the file attributes can be\n read with the readAttributes method and the file type tested with the BasicFileAttributes.isSymbolicLink method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>The path to the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file is a symbolic link; {@code false} if\n          the file does not exist, is not a symbolic link, or it cannot\n          be determined if the file is a symbolic link or not.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkRead\n          method denies read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-isWritable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-isWritable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-isWritable' class='name expandable'>isWritable</a>( <span class='pre'>path</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether a file is writable. ...</div><div class='long'><p>Tests whether a file is writable. This method checks that a file exists\n and that this Java virtual machine has appropriate privileges that would\n allow it open the file for writing. Depending on the implementation, this\n method may require to read file permissions, access control lists, or\n other file attributes in order to check the effective access to the file.\n Consequently, this method may not be atomic with respect to other file\n system operations.</p>\n\n<p> <p> Note that result of this method is immediately outdated, there is no\n guarantee that a subsequent attempt to open the file for writing will\n succeed (or even that it will access the same file). Care should be taken\n when using this method in security sensitive applications.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to check</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file exists and is writable; {@code false}\n          if the file does not exist, write access would be denied because\n          the Java virtual machine has insufficient privileges, or access\n          cannot be determined</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          is invoked to check write access to the file.</p>\n</div></li></ul></div></div></div><div id='method-lines' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-lines' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-lines' class='name expandable'>lines</a>( <span class='pre'>path</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Read all lines from a file as a {@code Stream}. ...</div><div class='long'><p>Read all lines from a file as a {@code Stream}. Bytes from the file are\n decoded into characters using the UTF-8\n charset.</p>\n\n<p> <p> This method works as if invoking it were equivalent to evaluating the\n expression:\n <pre>{@code\n Files.lines(path, StandardCharsets.UTF_8)\n }</pre></p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the lines from the file as a {@code Stream}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs opening the file</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-list' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-list' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-list' class='name expandable'>list</a>( <span class='pre'>dir</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a lazily populated {@code Stream}, the elements of\n which are the entries in the directory. ...</div><div class='long'><p>Return a lazily populated {@code Stream}, the elements of\n which are the entries in the directory.  The listing is not recursive.</p>\n\n<p> <p> The elements of the stream are <a href=\"#!/api/java.nio.file.Path\" rel=\"java.nio.file.Path\" class=\"docClass\">java.nio.file.Path</a> objects that are\n obtained as if by resolving the name of the\n directory entry against {@code dir}. Some file systems maintain special\n links to the directory itself and the directory's parent directory.\n Entries representing these links are not included.</p>\n\n<p> <p> The stream is <i>weakly consistent</i>. It is thread safe but does\n not freeze the directory while iterating, so it may (or may not)\n reflect updates to the directory that occur after returning from this\n method.</p>\n\n<p> <p> The returned stream encapsulates a <a href=\"#!/api/java.nio.file.DirectoryStream\" rel=\"java.nio.file.DirectoryStream\" class=\"docClass\">java.nio.file.DirectoryStream</a>.\n If timely disposal of file system resources is required, the\n {@code try}-with-resources construct should be used to ensure that the\n stream's close method is invoked after the stream\n operations are completed.</p>\n\n<p> <p> Operating on a closed stream behaves as if the end of stream\n has been reached. Due to read-ahead, one or more elements may be\n returned after the stream has been closed.</p>\n\n<p> <p> If an IOException is thrown when accessing the directory\n after this method has returned, it is wrapped in an UncheckedIOException which will be thrown from the method that caused\n the access to take place.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dir</span> : Object {Path}<div class='sub-desc'><p>The path to the directory</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>The {@code Stream} describing the content of the\n          directory</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NotDirectoryException\n          if the file could not otherwise be opened because it is not\n          a directory <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs when opening the directory</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the directory.\n@see <a href=\"#!/api/java.nio.file.Files-method-newDirectoryStream\" rel=\"java.nio.file.Files-method-newDirectoryStream\" class=\"docClass\">newDirectoryStream</a>(Path)</p>\n</div></li></ul></div></div></div><div id='method-move' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-move' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-move' class='name expandable'>move</a>( <span class='pre'>source, target, options</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Move or rename a file to a target file. ...</div><div class='long'><p>Move or rename a file to a target file.</p>\n\n<p> <p> By default, this method attempts to move the file to the target\n file, failing if the target file exists except if the source and\n target are the <a href=\"#!/api/java.nio.file.Files-method-isSameFile\" rel=\"java.nio.file.Files-method-isSameFile\" class=\"docClass\">same</a> file, in which case this method\n has no effect. If the file is a symbolic link then the symbolic link\n itself, not the target of the link, is moved. This method may be\n invoked to move an empty directory. In some implementations a directory\n has entries for special files or links that are created when the\n directory is created. In such implementations a directory is considered\n empty when only the special entries exist. When invoked to move a\n directory that is not empty then the directory is moved if it does not\n require moving the entries in the directory.  For example, renaming a\n directory on the same <a href=\"#!/api/java.nio.file.FileStore\" rel=\"java.nio.file.FileStore\" class=\"docClass\">java.nio.file.FileStore</a> will usually not require moving\n the entries in the directory. When moving a directory requires that its\n entries be moved then this method fails (by throwing an {@code\n IOException}). To move a <i>file tree</i> may involve copying rather\n than moving directories and this can be done using the <a href=\"#!/api/java.nio.file.Files-method-copy\" rel=\"java.nio.file.Files-method-copy\" class=\"docClass\">copy</a> method in conjunction with the <a href=\"#!/api/java.nio.file.Files-method-walkFileTree\" rel=\"java.nio.file.Files-method-walkFileTree\" class=\"docClass\">java.nio.file.Files.walkFileTree</a> utility method.</p>\n\n<p> <p> The {@code options} parameter may include any of the following:</p>\n\n<p> <table border=1 cellpadding=5 summary=\"\">\n <tr> <th>Option</th> <th>Description</th> </tr>\n <tr>\n   <td> <a href=\"#!/api/java.nio.file.StandardCopyOption-property-REPLACE_EXISTING\" rel=\"java.nio.file.StandardCopyOption-property-REPLACE_EXISTING\" class=\"docClass\">REPLACE_EXISTING</a> </td>\n   <td> If the target file exists, then the target file is replaced if it\n     is not a non-empty directory. If the target file exists and is a\n     symbolic link, then the symbolic link itself, not the target of\n     the link, is replaced. </td>\n </tr>\n <tr>\n   <td> <a href=\"#!/api/java.nio.file.StandardCopyOption-property-ATOMIC_MOVE\" rel=\"java.nio.file.StandardCopyOption-property-ATOMIC_MOVE\" class=\"docClass\">ATOMIC_MOVE</a> </td>\n   <td> The move is performed as an atomic file system operation and all\n     other options are ignored. If the target file exists then it is\n     implementation specific if the existing file is replaced or this method\n     fails by throwing an IOException. If the move cannot be\n     performed as an atomic file system operation then <a href=\"#!/api/java.nio.file.AtomicMoveNotSupportedException\" rel=\"java.nio.file.AtomicMoveNotSupportedException\" class=\"docClass\">java.nio.file.AtomicMoveNotSupportedException</a> is thrown. This can arise, for\n     example, when the target location is on a different {@code FileStore}\n     and would require that the file be copied, or target location is\n     associated with a different provider to this object. </td>\n </tr></table></p>\n\n<p> <p> An implementation of this interface may support additional\n implementation specific options.</p>\n\n<p> <p> Moving a file will copy the last-modified-time to the target\n file if supported by both source and target file stores. Copying of file\n timestamps may result in precision loss. An implementation may also\n attempt to copy other file attributes but is not required to fail if the\n file attributes cannot be copied. When the move is performed as\n a non-atomic operation, and an {@code IOException} is thrown, then the\n state of the files is not defined. The original file and the target file\n may both exist, the target file may be incomplete or some of its file\n attributes may not been copied from the original file.</p>\n\n<p> <p> <b>Usage Examples:</b>\n Suppose we want to rename a file to \"newname\", keeping the file in the\n same directory:</p>\n\n<pre>     Path source = ...\n     Files.move(source, source.resolveSibling(\"newname\"));\n </pre>\n\n\n<p> Alternatively, suppose we want to move a file to new directory, keeping\n the same file name, and replacing any existing file of that name in the\n directory:</p>\n\n<pre>     Path source = ...\n     Path newdir = ...\n     Files.move(source, newdir.resolve(source.getFileName()), REPLACE_EXISTING);\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : Object {Path}<div class='sub-desc'><p>the path to the file to move</p>\n</div></li><li><span class='pre'>target</span> : Object {Path}<div class='sub-desc'><p>the path to the target file (may be associated with a different\n          provider to the source path)</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.CopyOption[]}<div class='sub-desc'><p>options specifying how the move should be done</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the path to the target file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the array contains a copy option that is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if the target file exists but cannot be replaced because the\n          {@code REPLACE_EXISTING} option is not specified <i>(optional\n          specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DirectoryNotEmptyException\n          the {@code REPLACE_EXISTING} option is specified but the file\n          cannot be replaced because it is a non-empty directory\n          <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AtomicMoveNotSupportedException\n          if the options array contains the {@code ATOMIC_MOVE} option but\n          the file cannot be moved as an atomic file system operation.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to both the source and\n          target file.</p>\n</div></li></ul></div></div></div><div id='method-newBufferedReader' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-newBufferedReader' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-newBufferedReader' class='name expandable'>newBufferedReader</a>( <span class='pre'>path</span> ) : Object {java.io.BufferedReader}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a file for reading, returning a {@code BufferedReader} to read text\n from the file in an efficient manner. ...</div><div class='long'><p>Opens a file for reading, returning a {@code BufferedReader} to read text\n from the file in an efficient manner. Bytes from the file are decoded into\n characters using the UTF-8 charset.</p>\n\n<p> <p> This method works as if invoking it were equivalent to evaluating the\n expression:\n <pre>{@code\n Files.newBufferedReader(path, StandardCharsets.UTF_8)\n }</pre></p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.BufferedReader}</span><div class='sub-desc'><p>a new buffered reader, with default buffer size, to read text\n          from the file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs opening the file</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-newBufferedWriter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-newBufferedWriter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-newBufferedWriter' class='name expandable'>newBufferedWriter</a>( <span class='pre'>path, options</span> ) : Object {java.io.BufferedWriter}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file for writing, returning a {@code BufferedWriter}\n to write text to the file in an efficient ma...</div><div class='long'><p>Opens or creates a file for writing, returning a {@code BufferedWriter}\n to write text to the file in an efficient manner. The text is encoded\n into bytes for writing using the UTF-8\n charset.</p>\n\n<p> <p> This method works as if invoking it were equivalent to evaluating the\n expression:\n <pre>{@code\n Files.newBufferedWriter(path, StandardCharsets.UTF_8, options)\n }</pre></p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.BufferedWriter}</span><div class='sub-desc'><p>a new buffered writer, with default buffer size, to write text\n          to the file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs opening or creating the file</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported option is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to the file.</p>\n</div></li></ul></div></div></div><div id='method-newByteChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-newByteChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-newByteChannel' class='name expandable'>newByteChannel</a>( <span class='pre'>path, options</span> ) : Object {java.nio.channels.SeekableByteChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file, returning a seekable byte channel to access the\n file. ...</div><div class='long'><p>Opens or creates a file, returning a seekable byte channel to access the\n file.</p>\n\n<p> <p> This method opens or creates a file in exactly the manner specified\n by the newByteChannel\n method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.SeekableByteChannel}</span><div class='sub-desc'><p>a new seekable byte channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the set contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported open option is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if a file of that name already exists and the CREATE_NEW option is specified\n          <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the path if the file is\n          opened for reading. The checkWrite method is invoked to check write access to the path\n          if the file is opened for writing. The checkDelete method is\n          invoked to check delete access if the file is opened with the\n          {@code DELETE_ON_CLOSE} option.\n@see java.nio.channels.FileChannel#open(Path,OpenOption[])</p>\n</div></li></ul></div></div></div><div id='method-newDirectoryStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-newDirectoryStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-newDirectoryStream' class='name expandable'>newDirectoryStream</a>( <span class='pre'>dir, filter</span> ) : Object {java.nio.file.DirectoryStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a directory, returning a java.nio.file.DirectoryStream to iterate over\n the entries in the directory. ...</div><div class='long'><p>Opens a directory, returning a <a href=\"#!/api/java.nio.file.DirectoryStream\" rel=\"java.nio.file.DirectoryStream\" class=\"docClass\">java.nio.file.DirectoryStream</a> to iterate over\n the entries in the directory. The elements returned by the directory\n stream's <a href=\"#!/api/java.nio.file.DirectoryStream-method-iterator\" rel=\"java.nio.file.DirectoryStream-method-iterator\" class=\"docClass\">iterator</a> are of type {@code\n Path}, each one representing an entry in the directory. The {@code Path}\n objects are obtained as if by resolving the\n name of the directory entry against {@code dir}. The entries returned by\n the iterator are filtered by the given <a href=\"#!/api/java.nio.file.DirectoryStream.Filter\" rel=\"java.nio.file.DirectoryStream.Filter\" class=\"docClass\">filter</a>.</p>\n\n<p> <p> When not using the try-with-resources construct, then directory\n stream's {@code close} method should be invoked after iteration is\n completed so as to free any resources held for the open directory.</p>\n\n<p> <p> Where the filter terminates due to an uncaught error or runtime\n exception then it is propagated to the hasNext or next method. Where an {@code\n IOException} is thrown, it results in the {@code hasNext} or {@code\n next} method throwing a <a href=\"#!/api/java.nio.file.DirectoryIteratorException\" rel=\"java.nio.file.DirectoryIteratorException\" class=\"docClass\">java.nio.file.DirectoryIteratorException</a> with the\n {@code IOException} as the cause.</p>\n\n<p> <p> When an implementation supports operations on entries in the\n directory that execute in a race-free manner then the returned directory\n stream is a <a href=\"#!/api/java.nio.file.SecureDirectoryStream\" rel=\"java.nio.file.SecureDirectoryStream\" class=\"docClass\">java.nio.file.SecureDirectoryStream</a>.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want to iterate over the files in a directory that are\n larger than 8K.</p>\n\n<pre>     DirectoryStream.Filter&lt;Path&gt; filter = new DirectoryStream.Filter&lt;Path&gt;() {\n         public boolean accept(Path file) throws IOException {\n             return (Files.size(file) &gt; 8192L);\n         }\n     };\n     Path dir = ...\n     try (DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir, filter)) {\n         :\n     }\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dir</span> : Object {Path}<div class='sub-desc'><p>the path to the directory</p>\n</div></li><li><span class='pre'>filter</span> : Object {java.nio.file.DirectoryStream.Filter}<div class='sub-desc'><p>the directory stream filter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.DirectoryStream}</span><div class='sub-desc'><p>a new and open {@code DirectoryStream} object</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NotDirectoryException\n          if the file could not otherwise be opened because it is not\n          a directory <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the directory.</p>\n</div></li></ul></div></div></div><div id='method-newInputStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-newInputStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-newInputStream' class='name expandable'>newInputStream</a>( <span class='pre'>path, options</span> ) : Object {java.io.InputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens a file, returning an input stream to read from the file. ...</div><div class='long'><p>Opens a file, returning an input stream to read from the file. The stream\n will not be buffered, and is not required to support the mark or reset methods. The\n stream will be safe for access by multiple concurrent threads. Reading\n commences at the beginning of the file. Whether the returned stream is\n <i>asynchronously closeable</i> and/or <i>interruptible</i> is highly\n file system provider specific and therefore not specified.</p>\n\n<p> <p> The {@code options} parameter determines how the file is opened.\n If no options are present then it is equivalent to opening the file with\n the <a href=\"#!/api/java.nio.file.StandardOpenOption-property-READ\" rel=\"java.nio.file.StandardOpenOption-property-READ\" class=\"docClass\">READ</a> option. In addition to the {@code\n READ} option, an implementation may also support additional implementation\n specific options.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to open</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.InputStream}</span><div class='sub-desc'><p>a new input stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if an invalid combination of options is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported option is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-newOutputStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-newOutputStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-newOutputStream' class='name expandable'>newOutputStream</a>( <span class='pre'>path, options</span> ) : Object {java.io.OutputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file, returning an output stream that may be used to\n write bytes to the file. ...</div><div class='long'><p>Opens or creates a file, returning an output stream that may be used to\n write bytes to the file. The resulting stream will not be buffered. The\n stream will be safe for access by multiple concurrent threads. Whether\n the returned stream is <i>asynchronously closeable</i> and/or\n <i>interruptible</i> is highly file system provider specific and\n therefore not specified.</p>\n\n<p> <p> This method opens or creates a file in exactly the manner specified\n by the newByteChannel\n method with the exception that the <a href=\"#!/api/java.nio.file.StandardOpenOption-property-READ\" rel=\"java.nio.file.StandardOpenOption-property-READ\" class=\"docClass\">READ</a>\n option may not be present in the array of options. If no options are\n present then this method works as if the <a href=\"#!/api/java.nio.file.StandardOpenOption-property-CREATE\" rel=\"java.nio.file.StandardOpenOption-property-CREATE\" class=\"docClass\">CREATE</a>, <a href=\"#!/api/java.nio.file.StandardOpenOption-property-TRUNCATE_EXISTING\" rel=\"java.nio.file.StandardOpenOption-property-TRUNCATE_EXISTING\" class=\"docClass\">TRUNCATE_EXISTING</a>,\n and <a href=\"#!/api/java.nio.file.StandardOpenOption-property-WRITE\" rel=\"java.nio.file.StandardOpenOption-property-WRITE\" class=\"docClass\">WRITE</a> options are present. In other\n words, it opens the file for writing, creating the file if it doesn't\n exist, or initially truncating an existing <a href=\"#!/api/java.nio.file.Files-method-isRegularFile\" rel=\"java.nio.file.Files-method-isRegularFile\" class=\"docClass\">regular-file</a> to a size of {@code 0} if it exists.</p>\n\n<p> <p> <b>Usage Examples:</b></p>\n\n<pre>     Path path = ...\n\n     // truncate and overwrite an existing file, or create the file if\n     // it doesn't initially exist\n     OutputStream out = Files.newOutputStream(path);\n\n     // append to an existing file, fail if the file does not exist\n     out = Files.newOutputStream(path, APPEND);\n\n     // append to an existing file, create file if it doesn't initially exist\n     out = Files.newOutputStream(path, CREATE, APPEND);\n\n     // always create new file, failing if it already exists\n     out = Files.newOutputStream(path, CREATE_NEW);\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.OutputStream}</span><div class='sub-desc'><p>a new output stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if {@code options} contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported option is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to the file. The checkDelete method is\n          invoked to check delete access if the file is opened with the\n          {@code DELETE_ON_CLOSE} option.</p>\n</div></li></ul></div></div></div><div id='method-notExists' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-notExists' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-notExists' class='name expandable'>notExists</a>( <span class='pre'>path, options</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether the file located by this path does not exist. ...</div><div class='long'><p>Tests whether the file located by this path does not exist. This method\n is intended for cases where it is required to take action when it can be\n confirmed that a file does not exist.</p>\n\n<p> <p> The {@code options} parameter may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n\n<p> <p> Note that this method is not the complement of the <a href=\"#!/api/java.nio.file.Files-method-exists\" rel=\"java.nio.file.Files-method-exists\" class=\"docClass\">exists</a> method. Where it is not possible to determine if a file exists\n or not then both methods return {@code false}. As with the {@code exists}\n method, the result of this method is immediately outdated. If this\n method indicates the file does exist then there is no guarantee that a\n subsequence attempt to create the file will succeed. Care should be taken\n when using this method in security sensitive applications.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to test</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the file does not exist; {@code false} if the\n          file exists or its existence cannot be determined</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, the SecurityManager.checkRead(String) is invoked to check\n          read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-probeContentType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-probeContentType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-probeContentType' class='name expandable'>probeContentType</a>( <span class='pre'>path</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Probes the content type of a file. ...</div><div class='long'><p>Probes the content type of a file.</p>\n\n<p> <p> This method uses the installed FileTypeDetector implementations\n to probe the given file to determine its content type. Each file type\n detector's probeContentType is\n invoked, in turn, to probe the file type. If the file is recognized then\n the content type is returned. If the file is not recognized by any of the\n installed file type detectors then a system-default file type detector is\n invoked to guess the content type.</p>\n\n<p> <p> A given invocation of the Java virtual machine maintains a system-wide\n list of file type detectors. Installed file type detectors are loaded\n using the service-provider loading facility defined by the ServiceLoader\n class. Installed file type detectors are loaded using the system class\n loader. If the system class loader cannot be found then the extension class\n loader is used; If the extension class loader cannot be found then the\n bootstrap class loader is used. File type detectors are typically installed\n by placing them in a JAR file on the application class path or in the\n extension directory, the JAR file contains a provider-configuration file\n named {@code java.nio.file.spi.FileTypeDetector} in the resource directory\n {@code META-INF/services}, and the file lists one or more fully-qualified\n names of concrete subclass of {@code FileTypeDetector } that have a zero\n argument constructor. If the process of locating or instantiating the\n installed file type detectors fails then an unspecified error is thrown.\n The ordering that installed providers are located is implementation\n specific.</p>\n\n<p> <p> The return value of this method is the string form of the value of a\n Multipurpose Internet Mail Extension (MIME) content type as\n defined by <a href=\"http://www.ietf.org/rfc/rfc2045.txt\"><i>RFC&nbsp;2045:\n Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet\n Message Bodies</i></a>. The string is guaranteed to be parsable according\n to the grammar in the RFC.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file to probe</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The content type of the file, or {@code null} if the content\n          type cannot be determined</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If a security manager is installed and it denies an unspecified\n          permission required by a file type detector implementation.</p>\n</div></li></ul></div></div></div><div id='method-readAllBytes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-readAllBytes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-readAllBytes' class='name expandable'>readAllBytes</a>( <span class='pre'>path</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads all the bytes from a file. ...</div><div class='long'><p>Reads all the bytes from a file. The method ensures that the file is\n closed when all bytes have been read or an I/O error, or other runtime\n exception, is thrown.</p>\n\n<p> <p> Note that this method is intended for simple cases where it is\n convenient to read all bytes into a byte array. It is not intended for\n reading in large files.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a byte array containing the bytes read from the file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs reading from the stream</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>OutOfMemoryError\n          if an array of the required size cannot be allocated, for\n          example the file is larger that {@code 2GB}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-readAllLines' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-readAllLines' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-readAllLines' class='name expandable'>readAllLines</a>( <span class='pre'>path</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Read all lines from a file. ...</div><div class='long'><p>Read all lines from a file. Bytes from the file are decoded into characters\n using the UTF-8 charset.</p>\n\n<p> <p> This method works as if invoking it were equivalent to evaluating the\n expression:\n <pre>{@code\n Files.readAllLines(path, StandardCharsets.UTF_8)\n }</pre></p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>the lines from the file as a {@code List}; whether the {@code\n          List} is modifiable or not is implementation dependent and\n          therefore not specified</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs reading from the file or a malformed or\n          unmappable byte sequence is read</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-readAttributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-readAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-readAttributes' class='name expandable'>readAttributes</a>( <span class='pre'>path, attributes, options</span> ) : Object {java.util.Map}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a set of file attributes as a bulk operation. ...</div><div class='long'><p>Reads a set of file attributes as a bulk operation.</p>\n\n<p> <p> The {@code attributes} parameter identifies the attributes to be read\n and takes the form:\n <blockquote>\n [<i>view-name</i><b>:</b>]<i>attribute-list</i>\n </blockquote>\n where square brackets [...] delineate an optional component and the\n character {@code ':'} stands for itself.</p>\n\n<p> <p> <i>view-name</i> is the name of a FileAttributeView that identifies a set of file attributes. If not\n specified then it defaults to {@code \"basic\"}, the name of the file\n attribute view that identifies the basic set of file attributes common to\n many file systems.</p>\n\n<p> <p> The <i>attribute-list</i> component is a comma separated list of\n zero or more names of attributes to read. If the list contains the value\n {@code \"*\"} then all attributes are read. Attributes that are not supported\n are ignored and will not be present in the returned map. It is\n implementation specific if all attributes are read as an atomic operation\n with respect to other file system operations.</p>\n\n<p> <p> The following examples demonstrate possible values for the {@code\n attributes} parameter:</p>\n\n<p> <blockquote>\n <table border=\"0\" summary=\"Possible values\">\n <tr>\n   <td> {@code \"<em>\"} </em></td>\n   <td> Read all basic-file-attributes. </td>\n </tr>\n <tr>\n   <td> {@code \"size,lastModifiedTime,lastAccessTime\"} </td>\n   <td> Reads the file size, last modified time, and last access time\n     attributes. </td>\n </tr>\n <tr>\n   <td> {@code \"posix:\"} </td>\n   <td> Read all POSIX-file-attributes. </td>\n </tr>\n <tr>\n   <td> {@code \"posix:permissions,owner,size\"} </td>\n   <td> Reads the POSX file permissions, owner, and file size. </td>\n </tr>\n </table>\n </blockquote></p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed and the file attribute of the final target\n of the link is read. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>attributes</span> : String<div class='sub-desc'><p>the attributes to read</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Map}</span><div class='sub-desc'><p>a map of the attributes returned; The map's keys are the\n          attribute names, its values are the attribute values</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the attribute view is not available</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if no attributes are specified or an unrecognized attributes is\n          specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkRead\n          method denies read access to the file. If this method is invoked\n          to read security sensitive attributes then the security manager\n          may be invoke to check for additional permissions.</p>\n</div></li></ul></div></div></div><div id='method-readSymbolicLink' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-readSymbolicLink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-readSymbolicLink' class='name expandable'>readSymbolicLink</a>( <span class='pre'>link</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads the target of a symbolic link (optional operation). ...</div><div class='long'><p>Reads the target of a symbolic link <i>(optional operation)</i>.</p>\n\n<p> <p> If the file system supports <a href=\"package-summary.html#links\">symbolic\n links</a> then this method is used to read the target of the link, failing\n if the file is not a symbolic link. The target of the link need not exist.\n The returned {@code Path} object will be associated with the same file\n system as {@code link}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>link</span> : Object {Path}<div class='sub-desc'><p>the path to the symbolic link</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>a {@code Path} object representing the target of the link</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the implementation does not support symbolic links</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotLinkException\n          if the target could otherwise not be read because the file\n          is not a symbolic link <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager\n          is installed, it checks that {@code FilePermission} has been\n          granted with the \"{@code readlink}\" action to read the link.</p>\n</div></li></ul></div></div></div><div id='method-setAttribute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-setAttribute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-setAttribute' class='name expandable'>setAttribute</a>( <span class='pre'>path, attribute, value, options</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the value of a file attribute. ...</div><div class='long'><p>Sets the value of a file attribute.</p>\n\n<p> <p> The {@code attribute} parameter identifies the attribute to be set\n and takes the form:\n <blockquote>\n [<i>view-name</i><b>:</b>]<i>attribute-name</i>\n </blockquote>\n where square brackets [...] delineate an optional component and the\n character {@code ':'} stands for itself.</p>\n\n<p> <p> <i>view-name</i> is the name of a FileAttributeView that identifies a set of file attributes. If not\n specified then it defaults to {@code \"basic\"}, the name of the file\n attribute view that identifies the basic set of file attributes common to\n many file systems. <i>attribute-name</i> is the name of the attribute\n within the set.</p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled for the case that the file is a symbolic link. By default,\n symbolic links are followed and the file attribute of the final target\n of the link is set. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is present then symbolic links are not followed.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want to set the DOS \"hidden\" attribute:</p>\n\n<pre>    Path path = ...\n    Files.setAttribute(path, \"dos:hidden\", true);\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>attribute</span> : String<div class='sub-desc'><p>the attribute to set</p>\n</div></li><li><span class='pre'>value</span> : Object {Object}<div class='sub-desc'><p>the attribute value</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the {@code path} parameter</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the attribute view is not available</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the attribute name is not specified, or is not recognized, or\n          the attribute value is of the correct type but has an\n          inappropriate value</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException\n          if the attribute value is not of the expected type or is a\n          collection containing elements that are not of the expected\n          type</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkWrite\n          method denies write access to the file. If this method is invoked\n          to set security sensitive attributes then the security manager\n          may be invoked to check for additional permissions.</p>\n</div></li></ul></div></div></div><div id='method-setLastModifiedTime' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-setLastModifiedTime' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-setLastModifiedTime' class='name expandable'>setLastModifiedTime</a>( <span class='pre'>path, time</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates a file's last modified time attribute. ...</div><div class='long'><p>Updates a file's last modified time attribute. The file time is converted\n to the epoch and precision supported by the file system. Converting from\n finer to coarser granularities result in precision loss. The behavior of\n this method when attempting to set the last modified time when it is not\n supported by the file system or is outside the range supported by the\n underlying file store is not defined. It may or not fail by throwing an\n {@code IOException}.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want to set the last modified time to the current time:</p>\n\n<pre>    Path path = ...\n    FileTime now = FileTime.fromMillis(System.currentTimeMillis());\n    Files.setLastModifiedTime(path, now);\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>time</span> : Object {FileTime}<div class='sub-desc'><p>the new last modified time</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, the security manager's checkWrite method is invoked\n          to check write access to file\n@see BasicFileAttributeView#setTimes</p>\n</div></li></ul></div></div></div><div id='method-setOwner' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-setOwner' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-setOwner' class='name expandable'>setOwner</a>( <span class='pre'>path, owner</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates the file owner. ...</div><div class='long'><p>Updates the file owner.</p>\n\n<p> <p> The {@code path} parameter is associated with a file system that\n supports FileOwnerAttributeView. This file attribute view provides\n access to a file attribute that is the owner of the file.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want to make \"joe\" the owner of a file:</p>\n\n<pre>     Path path = ...\n     UserPrincipalLookupService lookupService =\n         provider(path).getUserPrincipalLookupService();\n     UserPrincipal joe = lookupService.lookupPrincipalByName(\"joe\");\n     Files.setOwner(path, joe);\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>The path to the file</p>\n</div></li><li><span class='pre'>owner</span> : Object {UserPrincipal}<div class='sub-desc'><p>The new file owner</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>The path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the associated file system does not support the {@code\n          FileOwnerAttributeView}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, it denies RuntimePermission<tt>(\"accessUserInformation\")</tt>\n          or its checkWrite\n          method denies write access to the file.\n@see FileSystem#getUserPrincipalLookupService\n@see java.nio.file.attribute.UserPrincipalLookupService</p>\n</div></li></ul></div></div></div><div id='method-setPosixFilePermissions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-setPosixFilePermissions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-setPosixFilePermissions' class='name expandable'>setPosixFilePermissions</a>( <span class='pre'>path, perms</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets a file's POSIX permissions. ...</div><div class='long'><p>Sets a file's POSIX permissions.</p>\n\n<p> <p> The {@code path} parameter is associated with a {@code FileSystem}\n that supports the PosixFileAttributeView. This attribute view\n provides access to file attributes commonly associated with files on file\n systems used by operating systems that implement the Portable Operating\n System Interface (POSIX) family of standards.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>The path to the file</p>\n</div></li><li><span class='pre'>perms</span> : Object {java.util.Set}<div class='sub-desc'><p>The new set of permissions</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>The path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if the associated file system does not support the {@code\n          PosixFileAttributeView}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException\n          if the sets contains elements that are not of type {@code\n          PosixFilePermission}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, it denies RuntimePermission<tt>(\"accessUserInformation\")</tt>\n          or its checkWrite\n          method denies write access to the file.</p>\n</div></li></ul></div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-size' class='name expandable'>size</a>( <span class='pre'>path</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the size of a file (in bytes). ...</div><div class='long'><p>Returns the size of a file (in bytes). The size may differ from the\n actual size on the file system due to compression, support for sparse\n files, or other reasons. The size of files that are not <a href=\"#!/api/java.nio.file.Files-method-isRegularFile\" rel=\"java.nio.file.Files-method-isRegularFile\" class=\"docClass\">regular</a> files is implementation specific and\n therefore unspecified.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the file size, in bytes</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, its checkRead\n          method denies read access to the file.\n@see BasicFileAttributes#size</p>\n</div></li></ul></div></div></div><div id='method-walk' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-walk' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-walk' class='name expandable'>walk</a>( <span class='pre'>start, options</span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a {@code Stream} that is lazily populated with {@code\n Path} by walking the file tree rooted at a given starti...</div><div class='long'><p>Return a {@code Stream} that is lazily populated with {@code\n Path} by walking the file tree rooted at a given starting file.  The\n file tree is traversed <em>depth-first</em>, the elements in the stream\n are <a href=\"#!/api/java.nio.file.Path\" rel=\"java.nio.file.Path\" class=\"docClass\">java.nio.file.Path</a> objects that are obtained as if by resolving the relative path against {@code start}.</p>\n\n<p> <p> This method works as if invoking it were equivalent to evaluating the\n expression:\n <blockquote></blockquote></p>\n\n<pre> walk(start, Integer.MAX_VALUE, options)\n </pre>\n\n\n<p>\n In other words, it visits all levels of the file tree.</p>\n\n<p> <p> The returned stream encapsulates one or more <a href=\"#!/api/java.nio.file.DirectoryStream\" rel=\"java.nio.file.DirectoryStream\" class=\"docClass\">java.nio.file.DirectoryStream</a>s.\n If timely disposal of file system resources is required, the\n {@code try}-with-resources construct should be used to ensure that the\n stream's close method is invoked after the stream\n operations are completed.  Operating on a closed stream will result in an\n java.lang.IllegalStateException.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>start</span> : Object {Path}<div class='sub-desc'><p>the starting file</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.FileVisitOption[]}<div class='sub-desc'><p>options to configure the traversal</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>the Stream of Path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If the security manager denies access to the starting file.\n          In the case of the default provider, the checkRead method is invoked\n          to check read access to the directory.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error is thrown when accessing the starting file.\n@see <a href=\"#!/api/java.nio.file.Files-method-walk\" rel=\"java.nio.file.Files-method-walk\" class=\"docClass\">walk</a>(Path, int, FileVisitOption...)</p>\n</div></li></ul></div></div></div><div id='method-walkFileTree' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-walkFileTree' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-walkFileTree' class='name expandable'>walkFileTree</a>( <span class='pre'>start, visitor</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Walks a file tree. ...</div><div class='long'><p>Walks a file tree.</p>\n\n<p> <p> This method works as if invoking it were equivalent to evaluating the\n expression:\n <blockquote></blockquote></p>\n\n<pre> walkFileTree(start, EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE, visitor)\n </pre>\n\n\n<p>\n In other words, it does not follow symbolic links, and visits all levels\n of the file tree.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>start</span> : Object {Path}<div class='sub-desc'><p>the starting file</p>\n</div></li><li><span class='pre'>visitor</span> : Object {java.nio.file.FileVisitor}<div class='sub-desc'><p>the file visitor to invoke for each file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the starting file</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          If the security manager denies access to the starting file.\n          In the case of the default provider, the checkRead method is invoked\n          to check read access to the directory.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error is thrown by a visitor method</p>\n</div></li></ul></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Files'>java.nio.file.Files</span><br/><a href='source/Files.html#java-nio-file-Files-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Files-method-write' class='name expandable'>write</a>( <span class='pre'>path, lines, options</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Write lines of text to a file. ...</div><div class='long'><p>Write lines of text to a file. Characters are encoded into bytes using\n the UTF-8 charset.</p>\n\n<p> <p> This method works as if invoking it were equivalent to evaluating the\n expression:\n <pre>{@code\n Files.write(path, lines, StandardCharsets.UTF_8, options);\n }</pre></p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>lines</span> : Object {java.lang.Iterable}<div class='sub-desc'><p>an object to iterate over the char sequences</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.OpenOption[]}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs writing to or creating the file, or the\n          text cannot be encoded as {@code UTF-8}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported option is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to the file.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});