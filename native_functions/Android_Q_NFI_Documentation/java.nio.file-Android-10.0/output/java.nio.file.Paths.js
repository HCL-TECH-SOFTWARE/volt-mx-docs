Ext.data.JsonP.java_nio_file_Paths({"tagname":"class","name":"java.nio.file.Paths","autodetected":{},"files":[{"filename":"Paths.js","href":"Paths.html#java-nio-file-Paths"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"get","tagname":"method","owner":"java.nio.file.Paths","id":"method-get","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.Paths","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.file.Paths</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Paths.html#java-nio-file-Paths' target='_blank'>Paths.js</a></div></pre><div class='doc-contents'><p>This class consists exclusively of static methods that return a <a href=\"#!/api/java.nio.file.Path\" rel=\"java.nio.file.Path\" class=\"docClass\">java.nio.file.Path</a>\n by converting a path string or URI.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-get' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Paths'>java.nio.file.Paths</span><br/><a href='source/Paths.html#java-nio-file-Paths-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Paths-method-get' class='name expandable'>get</a>( <span class='pre'>uri</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts the given URI to a java.nio.file.Path object. ...</div><div class='long'><p>Converts the given URI to a <a href=\"#!/api/java.nio.file.Path\" rel=\"java.nio.file.Path\" class=\"docClass\">java.nio.file.Path</a> object.</p>\n\n<p> <p> This method iterates over the installed providers to locate the provider that is identified by the\n URI scheme of the given URI. URI schemes are\n compared without regard to case. If the provider is found then its getPath method is invoked to convert the\n URI.</p>\n\n<p> <p> In the case of the default provider, identified by the URI scheme\n \"file\", the given URI has a non-empty path component, and undefined query\n and fragment components. Whether the authority component may be present\n is platform specific. The returned {@code Path} is associated with the\n <a href=\"#!/api/java.nio.file.FileSystems-method-getDefault\" rel=\"java.nio.file.FileSystems-method-getDefault\" class=\"docClass\">default</a> file system.</p>\n\n<p> <p> The default provider provides a similar <em>round-trip</em> guarantee\n to the java.io.File class. For a given {@code Path} <i>p</i> it\n is guaranteed that\n <blockquote><tt>\n Paths.get(</tt><i>p</i><tt>.toUri()).equals(</tt>\n <i>p</i><tt>.toAbsolutejava.nio.file.Path())</tt>\n </blockquote>\n so long as the original {@code Path}, the {@code URI}, and the new {@code\n Path} are all created in (possibly different invocations of) the same\n Java virtual machine. Whether other providers make any guarantees is\n provider specific and therefore unspecified.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {URI}<div class='sub-desc'><p>the URI to convert</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the resulting {@code Path}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if preconditions on the {@code uri} parameter do not hold. The\n          format of the URI is provider specific.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileSystemNotFoundException\n          The file system, identified by the URI, does not exist and\n          cannot be created automatically, or the provider identified by\n          the URI's scheme component is not installed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          if a security manager is installed and it denies an unspecified\n          permission to access the file system</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});