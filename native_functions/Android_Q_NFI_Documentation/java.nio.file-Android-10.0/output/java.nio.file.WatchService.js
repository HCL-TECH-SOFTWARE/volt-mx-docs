Ext.data.JsonP.java_nio_file_WatchService({"tagname":"class","name":"java.nio.file.WatchService","autodetected":{},"files":[{"filename":"WatchService.js","href":"WatchService.html#java-nio-file-WatchService"}],"since":"1.7","members":[{"name":"close","tagname":"method","owner":"java.nio.file.WatchService","id":"method-close","meta":{}},{"name":"poll","tagname":"method","owner":"java.nio.file.WatchService","id":"method-poll","meta":{}},{"name":"take","tagname":"method","owner":"java.nio.file.WatchService","id":"method-take","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.WatchService","short_doc":"implements java.io.Closeable\n\n A watch service that watches registered objects for changes and\n events. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/WatchService.html#java-nio-file-WatchService' target='_blank'>WatchService.js</a></div></pre><div class='doc-contents'><p>implements java.io.Closeable</p>\n\n<p> A watch service that <em>watches</em> registered objects for changes and\n events. For example a file manager may use a watch service to monitor a\n directory for changes so that it can update its display of the list of files\n when files are created or deleted.</p>\n\n<p> <p> A <a href=\"#!/api/java.nio.file.Watchable\" rel=\"java.nio.file.Watchable\" class=\"docClass\">java.nio.file.Watchable</a> object is registered with a watch service by invoking\n its <a href=\"#!/api/java.nio.file.Watchable-method-register\" rel=\"java.nio.file.Watchable-method-register\" class=\"docClass\">register</a> method, returning a <a href=\"#!/api/java.nio.file.WatchKey\" rel=\"java.nio.file.WatchKey\" class=\"docClass\">java.nio.file.WatchKey</a>\n to represent the registration. When an event for an object is detected the\n key is <em>signalled</em>, and if not currently signalled, it is queued to\n the watch service so that it can be retrieved by consumers that invoke the\n poll or take methods to retrieve keys\n and process events. Once the events have been processed the consumer\n invokes the key's <a href=\"#!/api/java.nio.file.WatchKey-method-reset\" rel=\"java.nio.file.WatchKey-method-reset\" class=\"docClass\">reset</a> method to reset the key which\n allows the key to be signalled and re-queued with further events.</p>\n\n<p> <p> Registration with a watch service is cancelled by invoking the key's\n <a href=\"#!/api/java.nio.file.WatchKey-method-cancel\" rel=\"java.nio.file.WatchKey-method-cancel\" class=\"docClass\">cancel</a> method. A key that is queued at the time that\n it is cancelled remains in the queue until it is retrieved. Depending on the\n object, a key may be cancelled automatically. For example, suppose a\n directory is watched and the watch service detects that it has been deleted\n or its file system is no longer accessible. When a key is cancelled in this\n manner it is signalled and queued, if not currently signalled. To ensure\n that the consumer is notified the return value from the {@code reset}\n method indicates if the key is valid.</p>\n\n<p> <p> A watch service is safe for use by multiple concurrent consumers. To\n ensure that only one consumer processes the events for a particular object at\n any time then care should be taken to ensure that the key's {@code reset}\n method is only invoked after its events have been processed. The <a href=\"#!/api/java.nio.file.WatchService-method-close\" rel=\"java.nio.file.WatchService-method-close\" class=\"docClass\">close</a> method may be invoked at any time to close the service causing\n any threads waiting to retrieve keys, to throw {@code\n ClosedWatchServiceException}.</p>\n\n<p> <p> File systems may report events faster than they can be retrieved or\n processed and an implementation may impose an unspecified limit on the number\n of events that it may accumulate. Where an implementation <em>knowingly</em>\n discards events then it arranges for the key's <a href=\"#!/api/java.nio.file.WatchKey-method-pollEvents\" rel=\"java.nio.file.WatchKey-method-pollEvents\" class=\"docClass\">pollEvents</a> method to return an element with an event type of <a href=\"#!/api/java.nio.file.StandardWatchEventKinds-property-OVERFLOW\" rel=\"java.nio.file.StandardWatchEventKinds-property-OVERFLOW\" class=\"docClass\">OVERFLOW</a>. This event can be used by the\n consumer as a trigger to re-examine the state of the object.</p>\n\n<p> <p> When an event is reported to indicate that a file in a watched directory\n has been modified then there is no guarantee that the program (or programs)\n that have modified the file have completed. Care should be taken to coordinate\n access with other programs that may be updating the file.\n The FileChannel class defines methods\n to lock regions of a file against access by other programs.</p>\n\n<p> <h2>Platform dependencies</h2></p>\n\n<p> <p> The implementation that observes events from the file system is intended\n to map directly on to the native file event notification facility where\n available, or to use a primitive mechanism, such as polling, when a native\n facility is not available. Consequently, many of the details on how events\n are detected, their timeliness, and whether their ordering is preserved are\n highly implementation specific. For example, when a file in a watched\n directory is modified then it may result in a single <a href=\"#!/api/java.nio.file.StandardWatchEventKinds-property-ENTRY_MODIFY\" rel=\"java.nio.file.StandardWatchEventKinds-property-ENTRY_MODIFY\" class=\"docClass\">ENTRY_MODIFY</a> event in some\n implementations but several events in other implementations. Short-lived\n files (meaning files that are deleted very quickly after they are created)\n may not be detected by primitive implementations that periodically poll the\n file system to detect changes.</p>\n\n<p> <p> If a watched file is not located on a local storage device then it is\n implementation specific if changes to the file can be detected. In particular,\n it is not required that changes to files carried out on remote systems be\n detected.</p>\n\n<p> @see FileSystem#newWatchService</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.WatchService'>java.nio.file.WatchService</span><br/><a href='source/WatchService.html#java-nio-file-WatchService-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.WatchService-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this watch service. ...</div><div class='long'><p>Closes this watch service.</p>\n\n<p> <p> If a thread is currently blocked in the <a href=\"#!/api/java.nio.file.WatchService-method-take\" rel=\"java.nio.file.WatchService-method-take\" class=\"docClass\">take</a> or poll methods waiting for a key to be queued then\n it immediately receives a <a href=\"#!/api/java.nio.file.ClosedWatchServiceException\" rel=\"java.nio.file.ClosedWatchServiceException\" class=\"docClass\">java.nio.file.ClosedWatchServiceException</a>. Any\n valid keys associated with this watch service are <a href=\"#!/api/java.nio.file.WatchKey-method-isValid\" rel=\"java.nio.file.WatchKey-method-isValid\" class=\"docClass\">invalidated</a>.</p>\n\n<p> <p> After a watch service is closed, any further attempt to invoke\n operations upon it will throw <a href=\"#!/api/java.nio.file.ClosedWatchServiceException\" rel=\"java.nio.file.ClosedWatchServiceException\" class=\"docClass\">java.nio.file.ClosedWatchServiceException</a>.\n If this watch service is already closed then invoking this method\n has no effect.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-poll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.WatchService'>java.nio.file.WatchService</span><br/><a href='source/WatchService.html#java-nio-file-WatchService-method-poll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.WatchService-method-poll' class='name expandable'>poll</a>( <span class='pre'>timeout, unit</span> ) : Object {java.nio.file.WatchKey}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes the next watch key, waiting if necessary up to the\n specified wait time if none are yet present. ...</div><div class='long'><p>Retrieves and removes the next watch key, waiting if necessary up to the\n specified wait time if none are yet present.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>how to wait before giving up, in units of unit</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>a {@code TimeUnit} determining how to interpret the timeout\n          parameter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.WatchKey}</span><div class='sub-desc'><p>the next watch key, or {@code null}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedWatchServiceException\n          if this watch service is closed, or it is closed while waiting\n          for the next key</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException\n          if interrupted while waiting</p>\n</div></li></ul></div></div></div><div id='method-take' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.WatchService'>java.nio.file.WatchService</span><br/><a href='source/WatchService.html#java-nio-file-WatchService-method-take' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.WatchService-method-take' class='name expandable'>take</a>( <span class='pre'></span> ) : Object {java.nio.file.WatchKey}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves and removes next watch key, waiting if none are yet present. ...</div><div class='long'><p>Retrieves and removes next watch key, waiting if none are yet present.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.WatchKey}</span><div class='sub-desc'><p>the next watch key</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedWatchServiceException\n          if this watch service is closed, or it is closed while waiting\n          for the next key</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException\n          if interrupted while waiting</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});