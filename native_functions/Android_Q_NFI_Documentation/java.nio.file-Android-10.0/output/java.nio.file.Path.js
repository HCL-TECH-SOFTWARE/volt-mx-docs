Ext.data.JsonP.java_nio_file_Path({"tagname":"class","name":"java.nio.file.Path","autodetected":{},"files":[{"filename":"Path.js","href":"Path.html#java-nio-file-Path"}],"since":"1.7","members":[{"name":"compareTo","tagname":"method","owner":"java.nio.file.Path","id":"method-compareTo","meta":{}},{"name":"endsWith","tagname":"method","owner":"java.nio.file.Path","id":"method-endsWith","meta":{}},{"name":"equals","tagname":"method","owner":"java.nio.file.Path","id":"method-equals","meta":{}},{"name":"getFileName","tagname":"method","owner":"java.nio.file.Path","id":"method-getFileName","meta":{}},{"name":"getFileSystem","tagname":"method","owner":"java.nio.file.Path","id":"method-getFileSystem","meta":{}},{"name":"getName","tagname":"method","owner":"java.nio.file.Path","id":"method-getName","meta":{}},{"name":"getNameCount","tagname":"method","owner":"java.nio.file.Path","id":"method-getNameCount","meta":{}},{"name":"getParent","tagname":"method","owner":"java.nio.file.Path","id":"method-getParent","meta":{}},{"name":"getRoot","tagname":"method","owner":"java.nio.file.Path","id":"method-getRoot","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.nio.file.Path","id":"method-hashCode","meta":{}},{"name":"isAbsolute","tagname":"method","owner":"java.nio.file.Path","id":"method-isAbsolute","meta":{}},{"name":"iterator","tagname":"method","owner":"java.nio.file.Path","id":"method-iterator","meta":{}},{"name":"normalize","tagname":"method","owner":"java.nio.file.Path","id":"method-normalize","meta":{}},{"name":"register","tagname":"method","owner":"java.nio.file.Path","id":"method-register","meta":{}},{"name":"relativize","tagname":"method","owner":"java.nio.file.Path","id":"method-relativize","meta":{}},{"name":"resolve","tagname":"method","owner":"java.nio.file.Path","id":"method-resolve","meta":{}},{"name":"resolveSibling","tagname":"method","owner":"java.nio.file.Path","id":"method-resolveSibling","meta":{}},{"name":"startsWith","tagname":"method","owner":"java.nio.file.Path","id":"method-startsWith","meta":{}},{"name":"subpath","tagname":"method","owner":"java.nio.file.Path","id":"method-subpath","meta":{}},{"name":"toAbsolutePath","tagname":"method","owner":"java.nio.file.Path","id":"method-toAbsolutePath","meta":{}},{"name":"toFile","tagname":"method","owner":"java.nio.file.Path","id":"method-toFile","meta":{}},{"name":"toRealPath","tagname":"method","owner":"java.nio.file.Path","id":"method-toRealPath","meta":{}},{"name":"toString","tagname":"method","owner":"java.nio.file.Path","id":"method-toString","meta":{}},{"name":"toUri","tagname":"method","owner":"java.nio.file.Path","id":"method-toUri","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.Path","short_doc":"implements java.lang.Comparable\n\n implements java.lang.Iterable\n\n implements java.nio.file.Watchable\n\n An object that...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Path.html#java-nio-file-Path' target='_blank'>Path.js</a></div></pre><div class='doc-contents'><p>implements java.lang.Comparable</p>\n\n<p> implements java.lang.Iterable</p>\n\n<p> implements <a href=\"#!/api/java.nio.file.Watchable\" rel=\"java.nio.file.Watchable\" class=\"docClass\">java.nio.file.Watchable</a></p>\n\n<p> An object that may be used to locate a file in a file system. It will\n typically represent a system dependent file path.</p>\n\n<p> <p> A {@code Path} represents a path that is hierarchical and composed of a\n sequence of directory and file name elements separated by a special separator\n or delimiter. A <em>root component</em>, that identifies a file system\n hierarchy, may also be present. The name element that is <em>farthest</em>\n from the root of the directory hierarchy is the name of a file or directory.\n The other name elements are directory names. A {@code Path} can represent a\n root, a root and a sequence of names, or simply one or more name elements.\n A {@code Path} is considered to be an <i>empty path</i> if it consists\n solely of one name element that is empty. Accessing a file using an\n <i>empty path</i> is equivalent to accessing the default directory of the\n file system. {@code Path} defines the getFileName,\n <a href=\"#!/api/java.nio.file.Path-method-getParent\" rel=\"java.nio.file.Path-method-getParent\" class=\"docClass\">getParent</a>, <a href=\"#!/api/java.nio.file.Path-method-getRoot\" rel=\"java.nio.file.Path-method-getRoot\" class=\"docClass\">getRoot</a>, and <a href=\"#!/api/java.nio.file.Path-method-subpath\" rel=\"java.nio.file.Path-method-subpath\" class=\"docClass\">subpath</a> methods to access the path components or a subsequence of its name\n elements.</p>\n\n<p> <p> In addition to accessing the components of a path, a {@code Path} also\n defines the resolve and resolveSibling methods to combine paths. The <a href=\"#!/api/java.nio.file.Path-method-relativize\" rel=\"java.nio.file.Path-method-relativize\" class=\"docClass\">relativize</a>\n method that can be used to construct a relative path between two paths.\n Paths can be <a href=\"#!/api/java.nio.file.Path-method-compareTo\" rel=\"java.nio.file.Path-method-compareTo\" class=\"docClass\">compared</a>, and tested against each other using\n the <a href=\"#!/api/java.nio.file.Path-method-startsWith\" rel=\"java.nio.file.Path-method-startsWith\" class=\"docClass\">startsWith</a> and <a href=\"#!/api/java.nio.file.Path-method-endsWith\" rel=\"java.nio.file.Path-method-endsWith\" class=\"docClass\">endsWith</a> methods.</p>\n\n<p> <p> This interface extends <a href=\"#!/api/java.nio.file.Watchable\" rel=\"java.nio.file.Watchable\" class=\"docClass\">java.nio.file.Watchable</a> interface so that a directory\n located by a path can be <a href=\"#!/api/java.nio.file.Path-method-register\" rel=\"java.nio.file.Path-method-register\" class=\"docClass\">registered</a> with a <a href=\"#!/api/java.nio.file.WatchService\" rel=\"java.nio.file.WatchService\" class=\"docClass\">java.nio.file.WatchService</a> and entries in the directory watched. </p></p>\n\n<p> <p> <b>WARNING:</b> This interface is only intended to be implemented by\n those developing custom file system implementations. Methods may be added to\n this interface in future releases. </p></p>\n\n<p> <h2>Accessing Files</h2>\n <p> Paths may be used with the <a href=\"#!/api/java.nio.file.Files\" rel=\"java.nio.file.Files\" class=\"docClass\">java.nio.file.Files</a> class to operate on files,\n directories, and other types of files. For example, suppose we want a java.io.BufferedReader to read text from a file \"{@code access.log}\". The\n file is located in a directory \"{@code logs}\" relative to the current working\n directory and is UTF-8 encoded.</p>\n\n<pre>     Path path = FileSystems.getDefault().getPath(\"logs\", \"access.log\");\n     BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);\n </pre>\n\n\n<p> <a name=\"interop\"></a><h2>Interoperability</h2>\n <p> Paths associated with the default provider are generally interoperable\n with the java.io.File class. Paths created by other\n providers are unlikely to be interoperable with the abstract path names\n represented by {@code java.io.File}. The toPath\n method may be used to obtain a {@code Path} from the abstract path name\n represented by a {@code java.io.File} object. The resulting {@code Path} can\n be used to operate on the same file as the {@code java.io.File} object. In\n addition, the <a href=\"#!/api/java.nio.file.Path-method-toFile\" rel=\"java.nio.file.Path-method-toFile\" class=\"docClass\">toFile</a> method is useful to construct a {@code\n File} from the {@code String} representation of a {@code Path}.</p>\n\n<p> <h2>Concurrency</h2>\n <p> Implementations of this interface are immutable and safe for use by\n multiple concurrent threads.</p>\n\n<p> @see Paths</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-compareTo' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'>other</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compares two abstract paths lexicographically. ...</div><div class='long'><p>Compares two abstract paths lexicographically. The ordering defined by\n this method is provider specific, and in the case of the default\n provider, platform specific. This method does not access the file system\n and neither file is required to exist.</p>\n\n<p> <p> This method may not be used to compare paths that are associated\n with different file system providers.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {Path}<div class='sub-desc'><p>the path compared to this path.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>zero if the argument is <a href=\"#!/api/java.nio.file.Path-method-equals\" rel=\"java.nio.file.Path-method-equals\" class=\"docClass\">equal</a> to this path, a\n          value less than zero if this path is lexicographically less than\n          the argument, or a value greater than zero if this path is\n          lexicographically greater than the argument</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException\n          if the paths are associated with different providers</p>\n</div></li></ul></div></div></div><div id='method-endsWith' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-endsWith' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-endsWith' class='name expandable'>endsWith</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if this path ends with a {@code Path}, constructed by converting\n the given path string, in exactly the manner ...</div><div class='long'><p>Tests if this path ends with a {@code Path}, constructed by converting\n the given path string, in exactly the manner specified by the endsWith(Path) method. On UNIX for example, the path\n \"{@code foo/bar}\" ends with \"{@code foo/bar}\" and \"{@code bar}\". It does\n not end with \"{@code r}\" or \"{@code /bar}\". Note that trailing separators\n are not taken into account, and so invoking this method on the {@code\n Path}\"{@code foo/bar}\" with the {@code String} \"{@code bar/}\" returns\n {@code true}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : String<div class='sub-desc'><p>the given path string</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this path ends with the given path; otherwise\n          {@code false}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidPathException\n          If the path string cannot be converted to a Path.</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-equals' class='name expandable'>equals</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests this path for equality with the given object. ...</div><div class='long'><p>Tests this path for equality with the given object.</p>\n\n<p> <p> If the given object is not a Path, or is a Path associated with a\n different {@code FileSystem}, then this method returns {@code false}.</p>\n\n<p> <p> Whether or not two path are equal depends on the file system\n implementation. In some cases the paths are compared without regard\n to case, and others are case sensitive. This method does not access the\n file system and the file is not required to exist. Where required, the\n <a href=\"#!/api/java.nio.file.Files-method-isSameFile\" rel=\"java.nio.file.Files-method-isSameFile\" class=\"docClass\">isSameFile</a> method may be used to check if two\n paths locate the same file.</p>\n\n<p> <p> This method satisfies the general contract of the Object.equals method. </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {Object}<div class='sub-desc'><p>the object to which this object is to be compared</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if, and only if, the given object is a {@code Path}\n          that is identical to this {@code Path}</p>\n</div></li></ul></div></div></div><div id='method-getFileName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-getFileName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-getFileName' class='name expandable'>getFileName</a>( <span class='pre'></span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name of the file or directory denoted by this path as a\n {@code Path} object. ...</div><div class='long'><p>Returns the name of the file or directory denoted by this path as a\n {@code Path} object. The file name is the <em>farthest</em> element from\n the root in the directory hierarchy.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>a path representing the name of the file or directory, or\n          {@code null} if this path has zero elements</p>\n</div></li></ul></div></div></div><div id='method-getFileSystem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-getFileSystem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-getFileSystem' class='name expandable'>getFileSystem</a>( <span class='pre'></span> ) : Object {java.nio.file.FileSystem}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the file system that created this object. ...</div><div class='long'><p>Returns the file system that created this object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileSystem}</span><div class='sub-desc'><p>the file system that created this object</p>\n</div></li></ul></div></div></div><div id='method-getName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-getName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-getName' class='name expandable'>getName</a>( <span class='pre'>index</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a name element of this path as a {@code Path} object. ...</div><div class='long'><p>Returns a name element of this path as a {@code Path} object.</p>\n\n<p> <p> The {@code index} parameter is the index of the name element to return.\n The element that is <em>closest</em> to the root in the directory hierarchy\n has index {@code 0}. The element that is <em>farthest</em> from the root\n has index <a href=\"#!/api/java.nio.file.Path-method-getNameCount\" rel=\"java.nio.file.Path-method-getNameCount\" class=\"docClass\">count</a>{@code -1}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>the index of the element</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the name element</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if {@code index} is negative, {@code index} is greater than or\n          equal to the number of elements, or this path has zero name\n          elements</p>\n</div></li></ul></div></div></div><div id='method-getNameCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-getNameCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-getNameCount' class='name expandable'>getNameCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of name elements in the path. ...</div><div class='long'><p>Returns the number of name elements in the path.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of elements in the path, or {@code 0} if this path\n          only represents a root component</p>\n</div></li></ul></div></div></div><div id='method-getParent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-getParent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-getParent' class='name expandable'>getParent</a>( <span class='pre'></span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the parent path, or {@code null} if this path does not\n have a parent. ...</div><div class='long'><p>Returns the <em>parent path</em>, or {@code null} if this path does not\n have a parent.</p>\n\n<p> <p> The parent of this path object consists of this path's root\n component, if any, and each element in the path except for the\n <em>farthest</em> from the root in the directory hierarchy. This method\n does not access the file system; the path or its parent may not exist.\n Furthermore, this method does not eliminate special names such as \".\"\n and \"..\" that may be used in some implementations. On UNIX for example,\n the parent of \"{@code /a/b/c}\" is \"{@code /a/b}\", and the parent of\n {@code \"x/y/.}\" is \"{@code x/y}\". This method may be used with the <a href=\"#!/api/java.nio.file.Path-method-normalize\" rel=\"java.nio.file.Path-method-normalize\" class=\"docClass\">normalize</a> method, to eliminate redundant names, for cases where\n <em>shell-like</em> navigation is required.</p>\n\n<p> <p> If this path has one or more elements, and no root component, then\n this method is equivalent to evaluating the expression:\n <blockquote></blockquote></p>\n\n<pre> subpath(0,&nbsp;getNameCount()-1);\n </pre>\n\n\n<p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>a path representing the path's parent</p>\n</div></li></ul></div></div></div><div id='method-getRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-getRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-getRoot' class='name expandable'>getRoot</a>( <span class='pre'></span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the root component of this path as a {@code Path} object,\n or {@code null} if this path does not have a root ...</div><div class='long'><p>Returns the root component of this path as a {@code Path} object,\n or {@code null} if this path does not have a root component.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>a path representing the root component of this path,\n          or {@code null}</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Computes a hash code for this path. ...</div><div class='long'><p>Computes a hash code for this path.</p>\n\n<p> <p> The hash code is based upon the components of the path, and\n satisfies the general contract of the Object.hashCode method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the hash-code value for this path</p>\n</div></li></ul></div></div></div><div id='method-isAbsolute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-isAbsolute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-isAbsolute' class='name expandable'>isAbsolute</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this path is absolute. ...</div><div class='long'><p>Tells whether or not this path is absolute.</p>\n\n<p> <p> An absolute path is complete in that it doesn't need to be combined\n with other path information in order to locate a file.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if, and only if, this path is absolute</p>\n</div></li></ul></div></div></div><div id='method-iterator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-iterator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-iterator' class='name expandable'>iterator</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iterator over the name elements of this path. ...</div><div class='long'><p>Returns an iterator over the name elements of this path.</p>\n\n<p> <p> The first element returned by the iterator represents the name\n element that is closest to the root in the directory hierarchy, the\n second element is the next closest, and so on. The last element returned\n is the name of the file or directory denoted by this path. The <a href=\"#!/api/java.nio.file.Path-method-getRoot\" rel=\"java.nio.file.Path-method-getRoot\" class=\"docClass\">root</a> component, if present, is not returned by the iterator.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>an iterator over the name elements of this path.</p>\n</div></li></ul></div></div></div><div id='method-normalize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-normalize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-normalize' class='name expandable'>normalize</a>( <span class='pre'></span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a path that is this path with redundant name elements eliminated. ...</div><div class='long'><p>Returns a path that is this path with redundant name elements eliminated.</p>\n\n<p> <p> The precise definition of this method is implementation dependent but\n in general it derives from this path, a path that does not contain\n <em>redundant</em> name elements. In many file systems, the \"{@code .}\"\n and \"{@code ..}\" are special names used to indicate the current directory\n and parent directory. In such file systems all occurrences of \"{@code .}\"\n are considered redundant. If a \"{@code ..}\" is preceded by a\n non-\"{@code ..}\" name then both names are considered redundant (the\n process to identify such names is repeated until it is no longer\n applicable).</p>\n\n<p> <p> This method does not access the file system; the path may not locate\n a file that exists. Eliminating \"{@code ..}\" and a preceding name from a\n path may result in the path that locates a different file than the original\n path. This can arise when the preceding name is a symbolic link.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the resulting path or this path if it does not contain\n          redundant name elements; an empty path is returned if this path\n          does have a root component and all name elements are redundant\n@see <a href=\"#!/api/java.nio.file.Path-method-getParent\" rel=\"java.nio.file.Path-method-getParent\" class=\"docClass\">getParent</a>\n@see <a href=\"#!/api/java.nio.file.Path-method-toRealPath\" rel=\"java.nio.file.Path-method-toRealPath\" class=\"docClass\">toRealPath</a></p>\n</div></li></ul></div></div></div><div id='method-register' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-register' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-register' class='name expandable'>register</a>( <span class='pre'>watcher, events</span> ) : Object {java.nio.file.WatchKey}<span class=\"signature\"></span></div><div class='description'><div class='short'>Registers the file located by this path with a watch service. ...</div><div class='long'><p>Registers the file located by this path with a watch service.</p>\n\n<p> <p> An invocation of this method behaves in exactly the same way as the\n invocation</p>\n\n<pre>     watchable.register(watcher, events, new WatchEvent.Modifier[0]);\n </pre>\n\n\n<p> <p> <b>Usage Example:</b>\n Suppose we wish to register a directory for entry create, delete, and modify\n events:</p>\n\n<pre>     Path dir = ...\n     WatchService watcher = ...\n\n     WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>watcher</span> : Object {WatchService}<div class='sub-desc'><p>The watch service to which this object is to be registered</p>\n</div></li><li><span class='pre'>events</span> : Object {java.nio.file.WatchEvent.Kind[]}<div class='sub-desc'><p>The events for which this object should be registered</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.WatchKey}</span><div class='sub-desc'><p>A key representing the registration of this object with the\n          given watch service</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If unsupported events are specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If an invalid combination of events is specified</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedWatchServiceException\n          If the watch service is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotDirectoryException\n          If the file is registered to watch the entries in a directory\n          and the file is not a directory  <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the file.</p>\n</div></li></ul></div></div></div><div id='method-relativize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-relativize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-relativize' class='name expandable'>relativize</a>( <span class='pre'>other</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a relative path between this path and a given path. ...</div><div class='long'><p>Constructs a relative path between this path and a given path.</p>\n\n<p> <p> Relativization is the inverse of resolution.\n This method attempts to construct a <a href=\"#!/api/java.nio.file.Path-method-isAbsolute\" rel=\"java.nio.file.Path-method-isAbsolute\" class=\"docClass\">relative</a> path\n that when resolved against this path, yields a\n path that locates the same file as the given path. For example, on UNIX,\n if this path is {@code \"/a/b\"} and the given path is {@code \"/a/b/c/d\"}\n then the resulting relative path would be {@code \"c/d\"}. Where this\n path and the given path do not have a <a href=\"#!/api/java.nio.file.Path-method-getRoot\" rel=\"java.nio.file.Path-method-getRoot\" class=\"docClass\">root</a> component,\n then a relative path can be constructed. A relative path cannot be\n constructed if only one of the paths have a root component. Where both\n paths have a root component then it is implementation dependent if a\n relative path can be constructed. If this path and the given path are\n <a href=\"#!/api/java.nio.file.Path-method-equals\" rel=\"java.nio.file.Path-method-equals\" class=\"docClass\">equal</a> then an <i>empty path</i> is returned.</p>\n\n<p> <p> For any two <a href=\"#!/api/java.nio.file.Path-method-normalize\" rel=\"java.nio.file.Path-method-normalize\" class=\"docClass\">normalized</a> paths <i>p</i> and\n <i>q</i>, where <i>q</i> does not have a root component,\n <blockquote>\n   <i>p</i><tt>.relativize(</tt><i>p</i><tt>.resolve(</tt><i>q</i><tt>)).equals(</tt><i>q</i><tt>)</tt>\n </blockquote></p>\n\n<p> <p> When symbolic links are supported, then whether the resulting path,\n when resolved against this path, yields a path that can be used to locate\n the <a href=\"#!/api/java.nio.file.Files-method-isSameFile\" rel=\"java.nio.file.Files-method-isSameFile\" class=\"docClass\">same</a> file as {@code other} is implementation\n dependent. For example, if this path is  {@code \"/a/b\"} and the given\n path is {@code \"/a/x\"} then the resulting relative path may be {@code\n \"../x\"}. If {@code \"b\"} is a symbolic link then is implementation\n dependent if {@code \"a/b/../x\"} would locate the same file as {@code \"/a/x\"}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Object {Path}<div class='sub-desc'><p>the path to relativize against this path</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the resulting relative path, or an empty path if both paths are\n          equal</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if {@code other} is not a {@code Path} that can be relativized\n          against this path</p>\n</div></li></ul></div></div></div><div id='method-resolve' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-resolve' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-resolve' class='name expandable'>resolve</a>( <span class='pre'>other</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts a given path string to a {@code Path} and resolves it against\n this {@code Path} in exactly the manner speci...</div><div class='long'><p>Converts a given path string to a {@code Path} and resolves it against\n this {@code Path} in exactly the manner specified by the resolve method. For example, suppose that the name\n separator is \"{@code /}\" and a path represents \"{@code foo/bar}\", then\n invoking this method with the path string \"{@code gus}\" will result in\n the {@code Path} \"{@code foo/bar/gus}\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : String<div class='sub-desc'><p>the path string to resolve against this path</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the resulting path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidPathException\n          if the path string cannot be converted to a Path.\n@see FileSystem#getPath</p>\n</div></li></ul></div></div></div><div id='method-resolveSibling' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-resolveSibling' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-resolveSibling' class='name expandable'>resolveSibling</a>( <span class='pre'>other</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts a given path string to a {@code Path} and resolves it against\n this path's parent path in exactly the manner...</div><div class='long'><p>Converts a given path string to a {@code Path} and resolves it against\n this path's <a href=\"#!/api/java.nio.file.Path-method-getParent\" rel=\"java.nio.file.Path-method-getParent\" class=\"docClass\">parent</a> path in exactly the manner\n specified by the resolveSibling method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : String<div class='sub-desc'><p>the path string to resolve against this path's parent</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the resulting path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidPathException\n          if the path string cannot be converted to a Path.\n@see FileSystem#getPath</p>\n</div></li></ul></div></div></div><div id='method-startsWith' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-startsWith' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-startsWith' class='name expandable'>startsWith</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if this path starts with a {@code Path}, constructed by converting\n the given path string, in exactly the manne...</div><div class='long'><p>Tests if this path starts with a {@code Path}, constructed by converting\n the given path string, in exactly the manner specified by the startsWith(Path) method. On UNIX for example, the path\n \"{@code foo/bar}\" starts with \"{@code foo}\" and \"{@code foo/bar}\". It\n does not start with \"{@code f}\" or \"{@code fo}\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : String<div class='sub-desc'><p>the given path string</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this path starts with the given path; otherwise\n          {@code false}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidPathException\n          If the path string cannot be converted to a Path.</p>\n</div></li></ul></div></div></div><div id='method-subpath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-subpath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-subpath' class='name expandable'>subpath</a>( <span class='pre'>beginIndex, endIndex</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a relative {@code Path} that is a subsequence of the name\n elements of this path. ...</div><div class='long'><p>Returns a relative {@code Path} that is a subsequence of the name\n elements of this path.</p>\n\n<p> <p> The {@code beginIndex} and {@code endIndex} parameters specify the\n subsequence of name elements. The name that is <em>closest</em> to the root\n in the directory hierarchy has index {@code 0}. The name that is\n <em>farthest</em> from the root has index <a href=\"#!/api/java.nio.file.Path-method-getNameCount\" rel=\"java.nio.file.Path-method-getNameCount\" class=\"docClass\">count</a>{@code -1}. The returned {@code Path} object has the name elements\n that begin at {@code beginIndex} and extend to the element at index {@code\n endIndex-1}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>beginIndex</span> : Number<div class='sub-desc'><p>the index of the first element, inclusive</p>\n</div></li><li><span class='pre'>endIndex</span> : Number<div class='sub-desc'><p>the index of the last element, exclusive</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>a new {@code Path} object that is a subsequence of the name\n          elements in this {@code Path}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if {@code beginIndex} is negative, or greater than or equal to\n          the number of elements. If {@code endIndex} is less than or\n          equal to {@code beginIndex}, or larger than the number of elements.</p>\n</div></li></ul></div></div></div><div id='method-toAbsolutePath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-toAbsolutePath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-toAbsolutePath' class='name expandable'>toAbsolutePath</a>( <span class='pre'></span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Path} object representing the absolute path of this\n path. ...</div><div class='long'><p>Returns a {@code Path} object representing the absolute path of this\n path.</p>\n\n<p> <p> If this path is already <a href=\"#!/api/java.nio.file.Path-method-isAbsolute\" rel=\"java.nio.file.Path-method-isAbsolute\" class=\"docClass\">absolute</a> then this\n method simply returns this path. Otherwise, this method resolves the path\n in an implementation dependent manner, typically by resolving the path\n against a file system default directory. Depending on the implementation,\n this method may throw an I/O error if the file system is not accessible.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>a {@code Path} object representing the absolute path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>java.io.IOError\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, a security manager\n          is installed, and this path is not absolute, then the security\n          manager's checkPropertyAccess method is invoked to check access to the\n          system property {@code user.dir}</p>\n</div></li></ul></div></div></div><div id='method-toFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-toFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-toFile' class='name expandable'>toFile</a>( <span class='pre'></span> ) : Object {java.io.File}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a File object representing this path. ...</div><div class='long'><p>Returns a File object representing this path. Where this {@code\n Path} is associated with the default provider, then this method is\n equivalent to returning a {@code File} object constructed with the\n {@code String} representation of this path.</p>\n\n<p> <p> If this path was created by invoking the {@code File} toPath method then there is no guarantee that the {@code\n File} object returned by this method is <a href=\"#!/api/java.nio.file.Path-method-equals\" rel=\"java.nio.file.Path-method-equals\" class=\"docClass\">equal</a> to the\n original {@code File}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.File}</span><div class='sub-desc'><p>a {@code File} object representing this path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if this {@code Path} is not associated with the default provider</p>\n</div></li></ul></div></div></div><div id='method-toRealPath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-toRealPath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-toRealPath' class='name expandable'>toRealPath</a>( <span class='pre'>options</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the real path of an existing file. ...</div><div class='long'><p>Returns the <em>real</em> path of an existing file.</p>\n\n<p> <p> The precise definition of this method is implementation dependent but\n in general it derives from this path, an <a href=\"#!/api/java.nio.file.Path-method-isAbsolute\" rel=\"java.nio.file.Path-method-isAbsolute\" class=\"docClass\">absolute</a>\n path that locates the <a href=\"#!/api/java.nio.file.Files-method-isSameFile\" rel=\"java.nio.file.Files-method-isSameFile\" class=\"docClass\">same</a> file as this path, but\n with name elements that represent the actual name of the directories\n and the file. For example, where filename comparisons on a file system\n are case insensitive then the name elements represent the names in their\n actual case. Additionally, the resulting path has redundant name\n elements removed.</p>\n\n<p> <p> If this path is relative then its absolute path is first obtained,\n as if by invoking the <a href=\"#!/api/java.nio.file.Path-method-toAbsolutePath\" rel=\"java.nio.file.Path-method-toAbsolutePath\" class=\"docClass\">toAbsolutePath</a> method.</p>\n\n<p> <p> The {@code options} array may be used to indicate how symbolic links\n are handled. By default, symbolic links are resolved to their final\n target. If the option <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> is\n present then this method does not resolve symbolic links.</p>\n\n<p> Some implementations allow special names such as \"{@code ..}\" to refer to\n the parent directory. When deriving the <em>real path</em>, and a\n \"{@code ..}\" (or equivalent) is preceded by a non-\"{@code ..}\" name then\n an implementation will typically cause both names to be removed. When\n not resolving symbolic links and the preceding name is a symbolic link\n then the names are only removed if it guaranteed that the resulting path\n will locate the same file as this path.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>an absolute path represent the <em>real</em> path of the file\n          located by this object</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if the file does not exist or an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager\n          is installed, its checkRead\n          method is invoked to check read access to the file, and where\n          this path is not absolute, its checkPropertyAccess method is invoked to check access to the\n          system property {@code user.dir}</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the string representation of this path. ...</div><div class='long'><p>Returns the string representation of this path.</p>\n\n<p> <p> If this path was created by converting a path string using the\n <a href=\"#!/api/java.nio.file.FileSystem-method-getPath\" rel=\"java.nio.file.FileSystem-method-getPath\" class=\"docClass\">getPath</a> method then the path string returned\n by this method may differ from the original String used to create the path.</p>\n\n<p> <p> The returned path string uses the default name <a href=\"#!/api/java.nio.file.FileSystem-method-getSeparator\" rel=\"java.nio.file.FileSystem-method-getSeparator\" class=\"docClass\">separator</a> to separate names in the path.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the string representation of this path</p>\n</div></li></ul></div></div></div><div id='method-toUri' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.Path'>java.nio.file.Path</span><br/><a href='source/Path.html#java-nio-file-Path-method-toUri' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.Path-method-toUri' class='name expandable'>toUri</a>( <span class='pre'></span> ) : Object {java.net.URI}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a URI to represent this path. ...</div><div class='long'><p>Returns a URI to represent this path.</p>\n\n<p> <p> This method constructs an absolute URI with a scheme equal to the URI scheme that identifies the\n provider. The exact form of the scheme specific part is highly provider\n dependent.</p>\n\n<p> <p> In the case of the default provider, the URI is hierarchical with\n a path component that is absolute. The query and\n fragment components are undefined. Whether the authority component is\n defined or not is implementation dependent. There is no guarantee that\n the {@code URI} may be used to construct a java.io.File.\n In particular, if this path represents a Universal Naming Convention (UNC)\n path, then the UNC server name may be encoded in the authority component\n of the resulting URI. In the case of the default provider, and the file\n exists, and it can be determined that the file is a directory, then the\n resulting {@code URI} will end with a slash.</p>\n\n<p> <p> The default provider provides a similar <em>round-trip</em> guarantee\n to the java.io.File class. For a given {@code Path} <i>p</i> it\n is guaranteed that\n <blockquote><tt>\n java.nio.file.Paths.get(</tt><i>p</i><tt>.toUri()).equals(</tt><i>p</i>\n <tt>.toAbsolutePath())</tt>\n </blockquote>\n so long as the original {@code Path}, the {@code URI}, and the new {@code\n Path} are all created in (possibly different invocations of) the same\n Java virtual machine. Whether other providers make any guarantees is\n provider specific and therefore unspecified.</p>\n\n<p> <p> When a file system is constructed to access the contents of a file\n as a file system then it is highly implementation specific if the returned\n URI represents the given path in the file system or it represents a\n <em>compound</em> URI that encodes the URI of the enclosing file system.\n A format for compound URIs is not defined in this release; such a scheme\n may be added in a future release.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.net.URI}</span><div class='sub-desc'><p>the URI representing this path</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>java.io.IOError\n          if an I/O error occurs obtaining the absolute path, or where a\n          file system is constructed to access the contents of a file as\n          a file system, and the URI of the enclosing file system cannot be\n          obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager\n          is installed, the <a href=\"#!/api/java.nio.file.Path-method-toAbsolutePath\" rel=\"java.nio.file.Path-method-toAbsolutePath\" class=\"docClass\">toAbsolutePath</a> method\n          throws a security exception.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});