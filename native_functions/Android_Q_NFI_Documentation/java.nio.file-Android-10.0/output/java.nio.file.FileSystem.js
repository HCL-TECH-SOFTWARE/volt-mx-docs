Ext.data.JsonP.java_nio_file_FileSystem({"tagname":"class","name":"java.nio.file.FileSystem","autodetected":{},"files":[{"filename":"FileSystem.js","href":"FileSystem.html#java-nio-file-FileSystem"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"close","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-close","meta":{}},{"name":"getFileStores","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-getFileStores","meta":{}},{"name":"getPath","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-getPath","meta":{}},{"name":"getPathMatcher","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-getPathMatcher","meta":{}},{"name":"getRootDirectories","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-getRootDirectories","meta":{}},{"name":"getSeparator","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-getSeparator","meta":{}},{"name":"getUserPrincipalLookupService","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-getUserPrincipalLookupService","meta":{}},{"name":"isOpen","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-isOpen","meta":{}},{"name":"isReadOnly","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-isReadOnly","meta":{}},{"name":"newWatchService","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-newWatchService","meta":{}},{"name":"provider","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-provider","meta":{}},{"name":"supportedFileAttributeViews","tagname":"method","owner":"java.nio.file.FileSystem","id":"method-supportedFileAttributeViews","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.FileSystem","short_doc":"implements java.io.Closeable\n\nProvides an interface to a file system and is the factory for objects to\n access files ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.file.FileSystem</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/FileSystem.html#java-nio-file-FileSystem' target='_blank'>FileSystem.js</a></div></pre><div class='doc-contents'><p>implements java.io.Closeable</p>\n\n<p>Provides an interface to a file system and is the factory for objects to\n access files and other objects in the file system.</p>\n\n<p> <p> The default file system, obtained by invoking the <a href=\"#!/api/java.nio.file.FileSystems-method-getDefault\" rel=\"java.nio.file.FileSystems-method-getDefault\" class=\"docClass\">java.nio.file.FileSystems.getDefault</a> method, provides access to the file system that is\n accessible to the Java virtual machine. The <a href=\"#!/api/java.nio.file.FileSystems\" rel=\"java.nio.file.FileSystems\" class=\"docClass\">java.nio.file.FileSystems</a> class defines\n methods to create file systems that provide access to other types of (custom)\n file systems.</p>\n\n<p> <p> A file system is the factory for several types of objects:</p>\n\n<p> <ul>\n   <li><p> The <a href=\"#!/api/java.nio.file.FileSystem-method-getPath\" rel=\"java.nio.file.FileSystem-method-getPath\" class=\"docClass\">getPath</a> method converts a system dependent\n     <em>path string</em>, returning a <a href=\"#!/api/java.nio.file.Path\" rel=\"java.nio.file.Path\" class=\"docClass\">java.nio.file.Path</a> object that may be used\n     to locate and access a file. </p></li>\n   <li><p> The <a href=\"#!/api/java.nio.file.FileSystem-method-getPathMatcher\" rel=\"java.nio.file.FileSystem-method-getPathMatcher\" class=\"docClass\">getPathMatcher</a> method is used\n     to create a <a href=\"#!/api/java.nio.file.PathMatcher\" rel=\"java.nio.file.PathMatcher\" class=\"docClass\">java.nio.file.PathMatcher</a> that performs match operations on\n     paths. </p></li>\n   <li><p> The <a href=\"#!/api/java.nio.file.FileSystem-method-getFileStores\" rel=\"java.nio.file.FileSystem-method-getFileStores\" class=\"docClass\">getFileStores</a> method returns an iterator\n     over the underlying <a href=\"#!/api/java.nio.file.FileStore\" rel=\"java.nio.file.FileStore\" class=\"docClass\">file-stores</a>. </p></li>\n   <li><p> The <a href=\"#!/api/java.nio.file.FileSystem-method-getUserPrincipalLookupService\" rel=\"java.nio.file.FileSystem-method-getUserPrincipalLookupService\" class=\"docClass\">getUserPrincipalLookupService</a>\n     method returns the UserPrincipalLookupService to lookup users or\n     groups by name. </p></li>\n   <li><p> The <a href=\"#!/api/java.nio.file.FileSystem-method-newWatchService\" rel=\"java.nio.file.FileSystem-method-newWatchService\" class=\"docClass\">newWatchService</a> method creates a\n     <a href=\"#!/api/java.nio.file.WatchService\" rel=\"java.nio.file.WatchService\" class=\"docClass\">java.nio.file.WatchService</a> that may be used to watch objects for changes and\n     events. </p></li>\n </ul></p>\n\n<p> <p> File systems vary greatly. In some cases the file system is a single\n hierarchy of files with one top-level root directory. In other cases it may\n have several distinct file hierarchies, each with its own top-level root\n directory. The <a href=\"#!/api/java.nio.file.FileSystem-method-getRootDirectories\" rel=\"java.nio.file.FileSystem-method-getRootDirectories\" class=\"docClass\">getRootDirectories</a> method may be\n used to iterate over the root directories in the file system. A file system\n is typically composed of one or more underlying <a href=\"#!/api/java.nio.file.FileStore\" rel=\"java.nio.file.FileStore\" class=\"docClass\">file-stores</a>\n that provide the storage for the files. Theses file stores can also vary in\n the features they support, and the file attributes or <em>meta-data</em> that\n they associate with files.</p>\n\n<p> <p> A file system is open upon creation and can be closed by invoking its\n close method. Once closed, any further attempt to access\n objects in the file system cause <a href=\"#!/api/java.nio.file.ClosedFileSystemException\" rel=\"java.nio.file.ClosedFileSystemException\" class=\"docClass\">java.nio.file.ClosedFileSystemException</a> to be\n thrown. File systems created by the default provider\n cannot be closed.</p>\n\n<p> <p> A {@code FileSystem} can provide read-only or read-write access to the\n file system. Whether or not a file system provides read-only access is\n established when the {@code FileSystem} is created and can be tested by invoking\n its isReadOnly method. Attempts to write to file stores\n by means of an object associated with a read-only file system throws <a href=\"#!/api/java.nio.file.ReadOnlyFileSystemException\" rel=\"java.nio.file.ReadOnlyFileSystemException\" class=\"docClass\">java.nio.file.ReadOnlyFileSystemException</a>.</p>\n\n<p> <p> File systems are safe for use by multiple concurrent threads. The <a href=\"#!/api/java.nio.file.FileSystem-method-close\" rel=\"java.nio.file.FileSystem-method-close\" class=\"docClass\">close</a> method may be invoked at any time to close a file system but\n whether a file system is <i>asynchronously closeable</i> is provider specific\n and therefore unspecified. In other words, if a thread is accessing an\n object in a file system, and another thread invokes the {@code close} method\n then it may require to block until the first operation is complete. Closing\n a file system causes all open channels, watch services, and other closeable objects associated with the file system to be closed.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this file system. ...</div><div class='long'><p>Closes this file system.</p>\n\n<p> <p> After a file system is closed then all subsequent access to the file\n system, either by methods defined by this class or on objects associated\n with this file system, throw <a href=\"#!/api/java.nio.file.ClosedFileSystemException\" rel=\"java.nio.file.ClosedFileSystemException\" class=\"docClass\">java.nio.file.ClosedFileSystemException</a>. If the\n file system is already closed then invoking this method has no effect.</p>\n\n<p> <p> Closing a file system will close all open channels, <a href=\"#!/api/java.nio.file.DirectoryStream\" rel=\"java.nio.file.DirectoryStream\" class=\"docClass\">directory-streams</a>,\n <a href=\"#!/api/java.nio.file.WatchService\" rel=\"java.nio.file.WatchService\" class=\"docClass\">watch-service</a>, and other closeable objects associated\n with this file system. The <a href=\"#!/api/java.nio.file.FileSystems-method-getDefault\" rel=\"java.nio.file.FileSystems-method-getDefault\" class=\"docClass\">default</a> file\n system cannot be closed.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          Thrown in the case of the default file system</p>\n</div></li></ul></div></div></div><div id='method-getFileStores' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-getFileStores' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-getFileStores' class='name expandable'>getFileStores</a>( <span class='pre'></span> ) : Object {java.lang.Iterable}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object to iterate over the underlying file stores. ...</div><div class='long'><p>Returns an object to iterate over the underlying file stores.</p>\n\n<p> <p> The elements of the returned iterator are the <a href=\"#!/api/java.nio.file.FileStore\" rel=\"java.nio.file.FileStore\" class=\"docClass\">java.nio.file.FileStores</a> for this file system. The order of the elements is\n not defined and the file stores may change during the lifetime of the\n Java virtual machine. When an I/O error occurs, perhaps because a file\n store is not accessible, then it is not returned by the iterator.</p>\n\n<p> <p> In the case of the default provider, and a security manager is\n installed, the security manager is invoked to check RuntimePermission<tt>(\"getFileStoreAttributes\")</tt>. If denied, then\n no file stores are returned by the iterator. In addition, the security\n manager's SecurityManager.checkRead(String) method is invoked to\n check read access to the file store's <em>top-most</em> directory. If\n denied, the file store is not returned by the iterator. It is system\n dependent if the permission checks are done when the iterator is obtained\n or during iteration.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want to print the space usage for all file stores:</p>\n\n<pre>     for (FileStore store: FileSystems.getDefault().getFileStores()) {\n         long total = store.getTotalSpace() / 1024;\n         long used = (store.getTotalSpace() - store.getUnallocatedSpace()) / 1024;\n         long avail = store.getUsableSpace() / 1024;\n         System.out.format(\"%-20s %12d %12d %12d%n\", store, total, used, avail);\n     }\n </pre>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Iterable}</span><div class='sub-desc'><p>An object to iterate over the backing file stores</p>\n</div></li></ul></div></div></div><div id='method-getPath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-getPath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-getPath' class='name expandable'>getPath</a>( <span class='pre'>first, more</span> ) : Object {java.nio.file.Path}<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts a path string, or a sequence of strings that when joined form\n a path string, to a {@code Path}. ...</div><div class='long'><p>Converts a path string, or a sequence of strings that when joined form\n a path string, to a {@code Path}. If {@code more} does not specify any\n elements then the value of the {@code first} parameter is the path string\n to convert. If {@code more} specifies one or more elements then each\n non-empty string, including {@code first}, is considered to be a sequence\n of name elements (see <a href=\"#!/api/java.nio.file.Path\" rel=\"java.nio.file.Path\" class=\"docClass\">java.nio.file.Path</a>) and is joined to form a path string.\n The details as to how the Strings are joined is provider specific but\n typically they will be joined using the <a href=\"#!/api/java.nio.file.FileSystem-method-getSeparator\" rel=\"java.nio.file.FileSystem-method-getSeparator\" class=\"docClass\">name-separator</a> as the separator. For example, if the name separator is\n \"{@code /}\" and {@code getPath(\"/foo\",\"bar\",\"gus\")} is invoked, then the\n path string {@code \"/foo/bar/gus\"} is converted to a {@code Path}.\n A {@code Path} representing an empty path is returned if {@code first}\n is the empty string and {@code more} does not contain any non-empty\n strings.</p>\n\n<p> <p> The parsing and conversion to a path object is inherently\n implementation dependent. In the simplest case, the path string is rejected,\n and <a href=\"#!/api/java.nio.file.InvalidPathException\" rel=\"java.nio.file.InvalidPathException\" class=\"docClass\">java.nio.file.InvalidPathException</a> thrown, if the path string contains\n characters that cannot be converted to characters that are <em>legal</em>\n to the file store. For example, on UNIX systems, the NUL (&#92;u0000)\n character is not allowed to be present in a path. An implementation may\n choose to reject path strings that contain names that are longer than those\n allowed by any file store, and where an implementation supports a complex\n path syntax, it may choose to reject path strings that are <em>badly\n formed</em>.</p>\n\n<p> <p> In the case of the default provider, path strings are parsed based\n on the definition of paths at the platform or virtual file system level.\n For example, an operating system may not allow specific characters to be\n present in a file name, but a specific underlying file store may impose\n different or additional restrictions on the set of legal\n characters.</p>\n\n<p> <p> This method throws <a href=\"#!/api/java.nio.file.InvalidPathException\" rel=\"java.nio.file.InvalidPathException\" class=\"docClass\">java.nio.file.InvalidPathException</a> when the path string\n cannot be converted to a path. Where possible, and where applicable,\n the exception is created with an <a href=\"#!/api/java.nio.file.InvalidPathException-method-getIndex\" rel=\"java.nio.file.InvalidPathException-method-getIndex\" class=\"docClass\">index</a> value indicating the first position in the {@code path} parameter\n that caused the path string to be rejected.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>first</span> : String<div class='sub-desc'><p>the path string or initial part of the path string</p>\n</div></li><li><span class='pre'>more</span> : Object {java.lang.String[]}<div class='sub-desc'><p>additional strings to be joined to form the path string</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.Path}</span><div class='sub-desc'><p>the resulting {@code Path}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidPathException\n          If the path string cannot be converted</p>\n</div></li></ul></div></div></div><div id='method-getPathMatcher' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-getPathMatcher' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-getPathMatcher' class='name expandable'>getPathMatcher</a>( <span class='pre'>syntaxAndPattern</span> ) : Object {java.nio.file.PathMatcher}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code PathMatcher} that performs match operations on the\n {@code String} representation of java.nio.file.P...</div><div class='long'><p>Returns a {@code PathMatcher} that performs match operations on the\n {@code String} representation of <a href=\"#!/api/java.nio.file.Path\" rel=\"java.nio.file.Path\" class=\"docClass\">java.nio.file.Path</a> objects by interpreting a\n given pattern.</p>\n\n<p> The {@code syntaxAndPattern} parameter identifies the syntax and the\n pattern and takes the form:\n <blockquote></blockquote></p>\n\n<pre> <i>syntax</i><b>:</b><i>pattern</i>\n </pre>\n\n\n<p>\n where {@code ':'} stands for itself.</p>\n\n<p> <p> A {@code FileSystem} implementation supports the \"{@code glob}\" and\n \"{@code regex}\" syntaxes, and may support others. The value of the syntax\n component is compared without regard to case.</p>\n\n<p> <p> When the syntax is \"{@code glob}\" then the {@code String}\n representation of the path is matched using a limited pattern language\n that resembles regular expressions but with a simpler syntax. For example:</p>\n\n<p> <blockquote>\n <table border=\"0\" summary=\"Pattern Language\">\n <tr>\n   <td>{@code <em>.java}</em></td>\n   <td>Matches a path that represents a file name ending in {@code .java}</td>\n </tr>\n <tr>\n   <td>{@code .<em>}</em></td>\n   <td>Matches file names containing a dot</td>\n </tr>\n <tr>\n   <td>{@code .{java,class}}</td>\n   <td>Matches file names ending with {@code .java} or {@code .class}</td>\n </tr>\n <tr>\n   <td>{@code foo.?}</td>\n   <td>Matches file names starting with {@code foo.} and a single\n   character extension</td>\n </tr>\n <tr>\n   <td><tt>&#47;home&#47;<em>&#47;</em></tt>\n   <td>Matches <tt>&#47;home&#47;gus&#47;data</tt></td>\n </td></tr>\n <tr>\n   <td><tt>&#47;home&#47;**</tt>\n   <td>Matches <tt>&#47;home&#47;gus</tt> and\n   <tt>&#47;home&#47;gus&#47;data</tt></td>\n </td></tr></table></blockquote></p>\n\n<p> \n </p>\n\n<p> <p> The following rules are used to interpret glob patterns:</p>\n\n<p> <ul>\n   <li><p> The {@code *} character matches zero or more characters of a name component without\n   crossing directory boundaries. </p></li></ul></p>\n\n<p>   <li><p> The {@code **} characters matches zero or more characters crossing directory boundaries. </p></li></p>\n\n<p>   <li><p> The {@code ?} character matches exactly one character of a\n   name component.</p></li></p>\n\n<p>   <li><p> The backslash character ({@code }) is used to escape characters\n   that would otherwise be interpreted as special characters. The expression\n   {@code \\} matches a single backslash and \"{\" matches a left brace\n   for example.  </p></li></p>\n\n<p>   <li><p> The {@code [ ]} characters are a <i>bracket expression</i> that\n   match a single character of a name component out of a set of characters.\n   For example, {@code [abc]} matches {@code \"a\"}, {@code \"b\"}, or {@code \"c\"}.\n   The hyphen ({@code -}) may be used to specify a range so {@code [a-z]}\n   specifies a range that matches from {@code \"a\"} to {@code \"z\"} (inclusive).\n   These forms can be mixed so [abce-g] matches {@code \"a\"}, {@code \"b\"},\n   {@code \"c\"}, {@code \"e\"}, {@code \"f\"} or {@code \"g\"}. If the character\n   after the {@code [} is a {@code !} then it is used for negation so {@code\n   [!a-c]} matches any character except {@code \"a\"}, {@code \"b\"}, or {@code\n   \"c\"}.\n   <p> Within a bracket expression the {@code *}, {@code ?} and {@code }\n   characters match themselves. The ({@code -}) character matches itself if\n   it is the first character within the brackets, or the first character\n   after the {@code !} if negating.</p></p></li></p>\n\n<p>   <li><p> The {@code { }} characters are a group of subpatterns, where\n   the group matches if any subpattern in the group matches. The {@code \",\"}\n   character is used to separate the subpatterns. Groups cannot be nested.\n   </p></li></p>\n\n<p>   <li><p> Leading period<tt>&#47;</tt>dot characters in file name are\n   treated as regular characters in match operations. For example,\n   the {@code \"*\"} glob pattern matches file name {@code \".login\"}.\n   The <a href=\"#!/api/java.nio.file.Files-method-isHidden\" rel=\"java.nio.file.Files-method-isHidden\" class=\"docClass\">java.nio.file.Files.isHidden</a> method may be used to test whether a file\n   is considered hidden.\n   </p></li></p>\n\n<p>   <li><p> All other characters match themselves in an implementation\n   dependent manner. This includes characters representing any <a href=\"#!/api/java.nio.file.FileSystem-method-getSeparator\" rel=\"java.nio.file.FileSystem-method-getSeparator\" class=\"docClass\">name-separators</a>. </p></li></p>\n\n<p>   <li><p> The matching of <a href=\"#!/api/java.nio.file.Path-method-getRoot\" rel=\"java.nio.file.Path-method-getRoot\" class=\"docClass\">root</a> components is highly\n   implementation-dependent and is not specified. </p></li></p>\n\n<p> </p>\n\n<p> <p> When the syntax is \"{@code regex}\" then the pattern component is a\n regular expression as defined by the java.util.regex.Pattern\n class.</p>\n\n<p> <p>  For both the glob and regex syntaxes, the matching details, such as\n whether the matching is case sensitive, are implementation-dependent\n and therefore not specified.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>syntaxAndPattern</span> : String<div class='sub-desc'><p>The syntax and pattern</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.PathMatcher}</span><div class='sub-desc'><p>A path matcher that may be used to match paths against the pattern</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If the parameter does not take the form: {@code syntax:pattern}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>java.util.regex.PatternSyntaxException\n          If the pattern is invalid</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If the pattern syntax is not known to the implementation\n@see Files#newDirectoryStream(Path,String)</p>\n</div></li></ul></div></div></div><div id='method-getRootDirectories' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-getRootDirectories' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-getRootDirectories' class='name expandable'>getRootDirectories</a>( <span class='pre'></span> ) : Object {java.lang.Iterable}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object to iterate over the paths of the root directories. ...</div><div class='long'><p>Returns an object to iterate over the paths of the root directories.</p>\n\n<p> <p> A file system provides access to a file store that may be composed\n of a number of distinct file hierarchies, each with its own top-level\n root directory. Unless denied by the security manager, each element in\n the returned iterator corresponds to the root directory of a distinct\n file hierarchy. The order of the elements is not defined. The file\n hierarchies may change during the lifetime of the Java virtual machine.\n For example, in some implementations, the insertion of removable media\n may result in the creation of a new file hierarchy with its own\n top-level directory.</p>\n\n<p> <p> When a security manager is installed, it is invoked to check access\n to the each root directory. If denied, the root directory is not returned\n by the iterator. In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check read access\n to each root directory. It is system dependent if the permission checks\n are done when the iterator is obtained or during iteration.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Iterable}</span><div class='sub-desc'><p>An object to iterate over the root directories</p>\n</div></li></ul></div></div></div><div id='method-getSeparator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-getSeparator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-getSeparator' class='name expandable'>getSeparator</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name separator, represented as a string. ...</div><div class='long'><p>Returns the name separator, represented as a string.</p>\n\n<p> <p> The name separator is used to separate names in a path string. An\n implementation may support multiple name separators in which case this\n method returns an implementation specific <em>default</em> name separator.\n This separator is used when creating path strings by invoking the toString() method.</p>\n\n<p> <p> In the case of the default provider, this method returns the same\n separator as java.io.File.separator.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The name separator</p>\n</div></li></ul></div></div></div><div id='method-getUserPrincipalLookupService' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-getUserPrincipalLookupService' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-getUserPrincipalLookupService' class='name expandable'>getUserPrincipalLookupService</a>( <span class='pre'></span> ) : Object {java.nio.file.attribute.UserPrincipalLookupService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the {@code UserPrincipalLookupService} for this file system\n (optional operation). ...</div><div class='long'><p>Returns the {@code UserPrincipalLookupService} for this file system\n <i>(optional operation)</i>. The resulting lookup service may be used to\n lookup user or group names.</p>\n\n<p> <p> <b>Usage Example:</b>\n Suppose we want to make \"joe\" the owner of a file:</p>\n\n<pre>     UserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();\n     Files.setOwner(path, lookupService.lookupPrincipalByName(\"joe\"));\n </pre>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.attribute.UserPrincipalLookupService}</span><div class='sub-desc'><p>The {@code UserPrincipalLookupService} for this file system</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this {@code FileSystem} does not does have a lookup service</p>\n</div></li></ul></div></div></div><div id='method-isOpen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-isOpen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-isOpen' class='name expandable'>isOpen</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this file system is open. ...</div><div class='long'><p>Tells whether or not this file system is open.</p>\n\n<p> <p> File systems created by the default provider are always open.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if, and only if, this file system is open</p>\n</div></li></ul></div></div></div><div id='method-isReadOnly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-isReadOnly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-isReadOnly' class='name expandable'>isReadOnly</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this file system allows only read-only access to\n its file stores. ...</div><div class='long'><p>Tells whether or not this file system allows only read-only access to\n its file stores.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if, and only if, this file system provides\n          read-only access</p>\n</div></li></ul></div></div></div><div id='method-newWatchService' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-newWatchService' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-newWatchService' class='name expandable'>newWatchService</a>( <span class='pre'></span> ) : Object {java.nio.file.WatchService}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a new java.nio.file.WatchService (optional operation). ...</div><div class='long'><p>Constructs a new <a href=\"#!/api/java.nio.file.WatchService\" rel=\"java.nio.file.WatchService\" class=\"docClass\">java.nio.file.WatchService</a> <i>(optional operation)</i>.</p>\n\n<p> <p> This method constructs a new watch service that may be used to watch\n registered objects for changes and events.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.WatchService}</span><div class='sub-desc'><p>a new watch service</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          If this {@code FileSystem} does not support watching file system\n          objects for changes and events. This exception is not thrown\n          by {@code FileSystems} created by the default provider.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-provider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-provider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-provider' class='name expandable'>provider</a>( <span class='pre'></span> ) : Object {java.nio.file.spi.FileSystemProvider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the provider that created this file system. ...</div><div class='long'><p>Returns the provider that created this file system.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.spi.FileSystemProvider}</span><div class='sub-desc'><p>The provider that created this file system.</p>\n</div></li></ul></div></div></div><div id='method-supportedFileAttributeViews' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystem'>java.nio.file.FileSystem</span><br/><a href='source/FileSystem.html#java-nio-file-FileSystem-method-supportedFileAttributeViews' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystem-method-supportedFileAttributeViews' class='name expandable'>supportedFileAttributeViews</a>( <span class='pre'></span> ) : Object {java.util.Set}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the set of the names of the file\n attribute views supported by this {@code FileSystem}. ...</div><div class='long'><p>Returns the set of the names of the file\n attribute views supported by this {@code FileSystem}.</p>\n\n<p> <p> The BasicFileAttributeView is required to be supported and\n therefore the set contains at least one element, \"basic\".</p>\n\n<p> <p> The supportsFileAttributeView(String) method may be used to test if an\n underlying <a href=\"#!/api/java.nio.file.FileStore\" rel=\"java.nio.file.FileStore\" class=\"docClass\">java.nio.file.FileStore</a> supports the file attributes identified by a\n file attribute view.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Set}</span><div class='sub-desc'><p>An unmodifiable set of the names of the supported file attribute\n          views</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});