Ext.data.JsonP.java_nio_file_FileVisitor({"tagname":"class","name":"java.nio.file.FileVisitor","autodetected":{},"files":[{"filename":"FileVisitor.js","href":"FileVisitor.html#java-nio-file-FileVisitor"}],"since":"1.7","members":[{"name":"postVisitDirectory","tagname":"method","owner":"java.nio.file.FileVisitor","id":"method-postVisitDirectory","meta":{}},{"name":"preVisitDirectory","tagname":"method","owner":"java.nio.file.FileVisitor","id":"method-preVisitDirectory","meta":{}},{"name":"visitFile","tagname":"method","owner":"java.nio.file.FileVisitor","id":"method-visitFile","meta":{}},{"name":"visitFileFailed","tagname":"method","owner":"java.nio.file.FileVisitor","id":"method-visitFileFailed","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.FileVisitor","short_doc":"A visitor of files. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/FileVisitor.html#java-nio-file-FileVisitor' target='_blank'>FileVisitor.js</a></div></pre><div class='doc-contents'><p>A visitor of files. An implementation of this interface is provided to the\n <a href=\"#!/api/java.nio.file.Files-method-walkFileTree\" rel=\"java.nio.file.Files-method-walkFileTree\" class=\"docClass\">java.nio.file.Files.walkFileTree</a> methods to visit each file in\n a file tree.</p>\n\n<p> <p> <b>Usage Examples:</b>\n Suppose we want to delete a file tree. In that case, each directory should\n be deleted after the entries in the directory are deleted.</p>\n\n<pre>     Path start = ...\n     Files.walkFileTree(start, new SimpleFileVisitor&lt;Path&gt;() {\n         &#64;Override\n         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n             throws IOException\n         {\n             Files.delete(file);\n             return FileVisitResult.CONTINUE;\n         }\n         &#64;Override\n         public FileVisitResult postVisitDirectory(Path dir, IOException e)\n             throws IOException\n         {\n             if (e == null) {\n                 Files.delete(dir);\n                 return FileVisitResult.CONTINUE;\n             } else {\n                 // directory iteration failed\n                 throw e;\n             }\n         }\n     });\n </pre>\n\n\n<p> <p> Furthermore, suppose we want to copy a file tree to a target location.\n In that case, symbolic links should be followed and the target directory\n should be created before the entries in the directory are copied.</p>\n\n<pre>     final Path source = ...\n     final Path target = ...\n\n     Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,\n         new SimpleFileVisitor&lt;Path&gt;() {\n             &#64;Override\n             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)\n                 throws IOException\n             {\n                 Path targetdir = target.resolve(source.relativize(dir));\n                 try {\n                     Files.copy(dir, targetdir);\n                 } catch (FileAlreadyExistsException e) {\n                      if (!Files.isDirectory(targetdir))\n                          throw e;\n                 }\n                 return CONTINUE;\n             }\n             &#64;Override\n             public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n                 throws IOException\n             {\n                 Files.copy(file, target.resolve(source.relativize(file)));\n                 return CONTINUE;\n             }\n         });\n </pre>\n\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-postVisitDirectory' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileVisitor'>java.nio.file.FileVisitor</span><br/><a href='source/FileVisitor.html#java-nio-file-FileVisitor-method-postVisitDirectory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileVisitor-method-postVisitDirectory' class='name expandable'>postVisitDirectory</a>( <span class='pre'>dir, exc</span> ) : Object {java.nio.file.FileVisitResult}<span class=\"signature\"></span></div><div class='description'><div class='short'>Invoked for a directory after entries in the directory, and all of their\n descendants, have been visited. ...</div><div class='long'><p>Invoked for a directory after entries in the directory, and all of their\n descendants, have been visited. This method is also invoked when iteration\n of the directory completes prematurely (by a <a href=\"#!/api/java.nio.file.FileVisitor-method-visitFile\" rel=\"java.nio.file.FileVisitor-method-visitFile\" class=\"docClass\">visitFile</a>\n method returning <a href=\"#!/api/java.nio.file.FileVisitResult-property-SKIP_SIBLINGS\" rel=\"java.nio.file.FileVisitResult-property-SKIP_SIBLINGS\" class=\"docClass\">SKIP_SIBLINGS</a>,\n or an I/O error when iterating over the directory).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dir</span> : Object {Object}<div class='sub-desc'><p>a reference to the directory</p>\n</div></li><li><span class='pre'>exc</span> : Object {IOException}<div class='sub-desc'><p>{@code null} if the iteration of the directory completes without\n          an error; otherwise the I/O exception that caused the iteration\n          of the directory to complete prematurely</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileVisitResult}</span><div class='sub-desc'><p>the visit result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-preVisitDirectory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileVisitor'>java.nio.file.FileVisitor</span><br/><a href='source/FileVisitor.html#java-nio-file-FileVisitor-method-preVisitDirectory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileVisitor-method-preVisitDirectory' class='name expandable'>preVisitDirectory</a>( <span class='pre'>dir, attrs</span> ) : Object {java.nio.file.FileVisitResult}<span class=\"signature\"></span></div><div class='description'><div class='short'>Invoked for a directory before entries in the directory are visited. ...</div><div class='long'><p>Invoked for a directory before entries in the directory are visited.</p>\n\n<p> <p> If this method returns <a href=\"#!/api/java.nio.file.FileVisitResult-property-CONTINUE\" rel=\"java.nio.file.FileVisitResult-property-CONTINUE\" class=\"docClass\">CONTINUE</a>,\n then entries in the directory are visited. If this method returns <a href=\"#!/api/java.nio.file.FileVisitResult-property-SKIP_SUBTREE\" rel=\"java.nio.file.FileVisitResult-property-SKIP_SUBTREE\" class=\"docClass\">SKIP_SUBTREE</a> or <a href=\"#!/api/java.nio.file.FileVisitResult-property-SKIP_SIBLINGS\" rel=\"java.nio.file.FileVisitResult-property-SKIP_SIBLINGS\" class=\"docClass\">SKIP_SIBLINGS</a> then entries in the\n directory (and any descendants) will not be visited.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dir</span> : Object {Object}<div class='sub-desc'><p>a reference to the directory</p>\n</div></li><li><span class='pre'>attrs</span> : Object {BasicFileAttributes}<div class='sub-desc'><p>the directory's basic attributes</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileVisitResult}</span><div class='sub-desc'><p>the visit result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-visitFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileVisitor'>java.nio.file.FileVisitor</span><br/><a href='source/FileVisitor.html#java-nio-file-FileVisitor-method-visitFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileVisitor-method-visitFile' class='name expandable'>visitFile</a>( <span class='pre'>file, attrs</span> ) : Object {java.nio.file.FileVisitResult}<span class=\"signature\"></span></div><div class='description'><div class='short'>Invoked for a file in a directory. ...</div><div class='long'><p>Invoked for a file in a directory.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>file</span> : Object {Object}<div class='sub-desc'><p>a reference to the file</p>\n</div></li><li><span class='pre'>attrs</span> : Object {BasicFileAttributes}<div class='sub-desc'><p>the file's basic attributes</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileVisitResult}</span><div class='sub-desc'><p>the visit result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-visitFileFailed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileVisitor'>java.nio.file.FileVisitor</span><br/><a href='source/FileVisitor.html#java-nio-file-FileVisitor-method-visitFileFailed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileVisitor-method-visitFileFailed' class='name expandable'>visitFileFailed</a>( <span class='pre'>file, exc</span> ) : Object {java.nio.file.FileVisitResult}<span class=\"signature\"></span></div><div class='description'><div class='short'>Invoked for a file that could not be visited. ...</div><div class='long'><p>Invoked for a file that could not be visited. This method is invoked\n if the file's attributes could not be read, the file is a directory\n that could not be opened, and other reasons.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>file</span> : Object {Object}<div class='sub-desc'><p>a reference to the file</p>\n</div></li><li><span class='pre'>exc</span> : Object {IOException}<div class='sub-desc'><p>the I/O exception that prevented the file from being visited</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileVisitResult}</span><div class='sub-desc'><p>the visit result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});