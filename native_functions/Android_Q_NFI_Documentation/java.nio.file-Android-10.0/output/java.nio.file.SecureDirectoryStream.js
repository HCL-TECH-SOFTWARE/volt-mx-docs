Ext.data.JsonP.java_nio_file_SecureDirectoryStream({"tagname":"class","name":"java.nio.file.SecureDirectoryStream","autodetected":{},"files":[{"filename":"SecureDirectoryStream.js","href":"SecureDirectoryStream.html#java-nio-file-SecureDirectoryStream"}],"since":"1.7","members":[{"name":"deleteDirectory","tagname":"method","owner":"java.nio.file.SecureDirectoryStream","id":"method-deleteDirectory","meta":{}},{"name":"deleteFile","tagname":"method","owner":"java.nio.file.SecureDirectoryStream","id":"method-deleteFile","meta":{}},{"name":"getFileAttributeView","tagname":"method","owner":"java.nio.file.SecureDirectoryStream","id":"method-getFileAttributeView","meta":{}},{"name":"move","tagname":"method","owner":"java.nio.file.SecureDirectoryStream","id":"method-move","meta":{}},{"name":"newByteChannel","tagname":"method","owner":"java.nio.file.SecureDirectoryStream","id":"method-newByteChannel","meta":{}},{"name":"newDirectoryStream","tagname":"method","owner":"java.nio.file.SecureDirectoryStream","id":"method-newDirectoryStream","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.SecureDirectoryStream","short_doc":"implements java.nio.file.DirectoryStream\n\n A {@code DirectoryStream} that defines operations on files that are locate...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/SecureDirectoryStream.html#java-nio-file-SecureDirectoryStream' target='_blank'>SecureDirectoryStream.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.nio.file.DirectoryStream\" rel=\"java.nio.file.DirectoryStream\" class=\"docClass\">java.nio.file.DirectoryStream</a></p>\n\n<p> A {@code DirectoryStream} that defines operations on files that are located\n relative to an open directory. A {@code SecureDirectoryStream} is intended\n for use by sophisticated or security sensitive applications requiring to\n traverse file trees or otherwise operate on directories in a race-free manner.\n Race conditions can arise when a sequence of file operations cannot be\n carried out in isolation. Each of the file operations defined by this\n interface specify a relative path. All access to the file is relative\n to the open directory irrespective of if the directory is moved or replaced\n by an attacker while the directory is open. A {@code SecureDirectoryStream}\n may also be used as a virtual <em>working directory</em>.</p>\n\n<p> <p> A {@code SecureDirectoryStream} requires corresponding support from the\n underlying operating system. Where an implementation supports this features\n then the {@code DirectoryStream} returned by the <a href=\"#!/api/java.nio.file.Files-method-newDirectoryStream\" rel=\"java.nio.file.Files-method-newDirectoryStream\" class=\"docClass\">newDirectoryStream</a> method will be a {@code SecureDirectoryStream} and must\n be cast to that type in order to invoke the methods defined by this interface.</p>\n\n<p> <p> In the case of the default provider, and a security manager is set, then the permission checks are\n performed using the path obtained by resolving the given relative path\n against the <i>original path</i> of the directory (irrespective of if the\n directory is moved since it was opened).</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-deleteDirectory' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.SecureDirectoryStream'>java.nio.file.SecureDirectoryStream</span><br/><a href='source/SecureDirectoryStream.html#java-nio-file-SecureDirectoryStream-method-deleteDirectory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.SecureDirectoryStream-method-deleteDirectory' class='name expandable'>deleteDirectory</a>( <span class='pre'>path</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes a directory. ...</div><div class='long'><p>Deletes a directory.</p>\n\n<p> <p> Unlike the <a href=\"#!/api/java.nio.file.Files-method-delete\" rel=\"java.nio.file.Files-method-delete\" class=\"docClass\">delete()</a> method, this method\n does not first examine the file to determine if the file is a directory.\n Whether non-directories are deleted by this method is system dependent and\n therefore not specified. When the parameter is a relative path then the\n directory to delete is relative to this open directory.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Object}<div class='sub-desc'><p>the path of the directory to delete</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedDirectoryStreamException\n          if the directory stream is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFileException\n          if the directory does not exist <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DirectoryNotEmptyException\n          if the directory could not otherwise be deleted because it is\n          not empty <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkDelete\n          method is invoked to check delete access to the directory</p>\n</div></li></ul></div></div></div><div id='method-deleteFile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.SecureDirectoryStream'>java.nio.file.SecureDirectoryStream</span><br/><a href='source/SecureDirectoryStream.html#java-nio-file-SecureDirectoryStream-method-deleteFile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.SecureDirectoryStream-method-deleteFile' class='name expandable'>deleteFile</a>( <span class='pre'>path</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Deletes a file. ...</div><div class='long'><p>Deletes a file.</p>\n\n<p> <p> Unlike the <a href=\"#!/api/java.nio.file.Files-method-delete\" rel=\"java.nio.file.Files-method-delete\" class=\"docClass\">delete()</a> method, this method does\n not first examine the file to determine if the file is a directory.\n Whether a directory is deleted by this method is system dependent and\n therefore not specified. If the file is a symbolic link, then the link\n itself, not the final target of the link, is deleted. When the\n parameter is a relative path then the file to delete is relative to\n this open directory.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Object}<div class='sub-desc'><p>the path of the file to delete</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedDirectoryStreamException\n          if the directory stream is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NoSuchFileException\n          if the file does not exist <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkDelete\n          method is invoked to check delete access to the file</p>\n</div></li></ul></div></div></div><div id='method-getFileAttributeView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.SecureDirectoryStream'>java.nio.file.SecureDirectoryStream</span><br/><a href='source/SecureDirectoryStream.html#java-nio-file-SecureDirectoryStream-method-getFileAttributeView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.SecureDirectoryStream-method-getFileAttributeView' class='name expandable'>getFileAttributeView</a>( <span class='pre'>path, type, options, options</span> ) : Object {java.nio.file.attribute.FileAttributeView}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new file attribute view to access the file attributes of a file\n in this directory. ...</div><div class='long'><p>Returns a new file attribute view to access the file attributes of a file\n in this directory.</p>\n\n<p> <p> The resulting file attribute view can be used to read or update the\n attributes of file in this directory. The {@code type} parameter specifies\n the type of the attribute view and the method returns an instance of that\n type if supported. Invoking this method to obtain a BasicFileAttributeView always returns an instance of that class that is\n bound to the file in the directory.</p>\n\n<p> <p> The state of resulting file attribute view is intimately connected\n to this directory stream. Once the directory stream closed,\n then all methods to read or update attributes will throw <a href=\"#!/api/java.nio.file.ClosedDirectoryStreamException\" rel=\"java.nio.file.ClosedDirectoryStreamException\" class=\"docClass\">java.nio.file.ClosedDirectoryStreamException</a>. The\n file is not required to exist at the time that the file attribute view\n is created but methods to read or update attributes of the file will\n fail when invoked and the file does not exist.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Object}<div class='sub-desc'><p>the path of the file</p>\n</div></li><li><span class='pre'>type</span> : Object {java.lang.Class}<div class='sub-desc'><p>the {@code Class} object corresponding to the file attribute view</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li><li><span class='pre'>options</span> : Object<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.attribute.FileAttributeView}</span><div class='sub-desc'><p>a new file attribute view of the specified type bound to a\n          this directory stream, or {@code null} if the attribute view\n          type is not available</p>\n</div></li></ul></div></div></div><div id='method-move' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.SecureDirectoryStream'>java.nio.file.SecureDirectoryStream</span><br/><a href='source/SecureDirectoryStream.html#java-nio-file-SecureDirectoryStream-method-move' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.SecureDirectoryStream-method-move' class='name expandable'>move</a>( <span class='pre'>srcpath, targetdir, targetpath</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Move a file from this directory to another directory. ...</div><div class='long'><p>Move a file from this directory to another directory.</p>\n\n<p> <p> This method works in a similar manner to <a href=\"#!/api/java.nio.file.Files-method-move\" rel=\"java.nio.file.Files-method-move\" class=\"docClass\">move</a>\n method when the <a href=\"#!/api/java.nio.file.StandardCopyOption-property-ATOMIC_MOVE\" rel=\"java.nio.file.StandardCopyOption-property-ATOMIC_MOVE\" class=\"docClass\">ATOMIC_MOVE</a> option\n is specified. That is, this method moves a file as an atomic file system\n operation. If the {@code srcpath} parameter is an <a href=\"#!/api/java.nio.file.Path-method-isAbsolute\" rel=\"java.nio.file.Path-method-isAbsolute\" class=\"docClass\">absolute</a> path then it locates the source file. If the parameter is a\n relative path then it is located relative to this open directory. If\n the {@code targetpath} parameter is absolute then it locates the target\n file (the {@code targetdir} parameter is ignored). If the parameter is\n a relative path it is located relative to the open directory identified\n by the {@code targetdir} parameter. In all cases, if the target file\n exists then it is implementation specific if it is replaced or this\n method fails.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>srcpath</span> : Object {Object}<div class='sub-desc'><p>the name of the file to move</p>\n</div></li><li><span class='pre'>targetdir</span> : Object {java.nio.file.SecureDirectoryStream}<div class='sub-desc'><p>the destination directory</p>\n</div></li><li><span class='pre'>targetpath</span> : Object {Object}<div class='sub-desc'><p>the name to give the file in the destination directory</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedDirectoryStreamException\n          if this or the target directory stream is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if the file already exists in the target directory and cannot\n          be replaced <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>AtomicMoveNotSupportedException\n          if the file cannot be moved as an atomic file system operation</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkWrite\n          method is invoked to check write access to both the source and\n          target file.</p>\n</div></li></ul></div></div></div><div id='method-newByteChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.SecureDirectoryStream'>java.nio.file.SecureDirectoryStream</span><br/><a href='source/SecureDirectoryStream.html#java-nio-file-SecureDirectoryStream-method-newByteChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.SecureDirectoryStream-method-newByteChannel' class='name expandable'>newByteChannel</a>( <span class='pre'>path, options, attrs</span> ) : Object {java.nio.channels.SeekableByteChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens or creates a file in this directory, returning a seekable byte\n channel to access the file. ...</div><div class='long'><p>Opens or creates a file in this directory, returning a seekable byte\n channel to access the file.</p>\n\n<p> <p> This method works in exactly the manner specified by the <a href=\"#!/api/java.nio.file.Files-method-newByteChannel\" rel=\"java.nio.file.Files-method-newByteChannel\" class=\"docClass\">java.nio.file.Files.newByteChannel</a> method for the\n case that the {@code path} parameter is an <a href=\"#!/api/java.nio.file.Path-method-isAbsolute\" rel=\"java.nio.file.Path-method-isAbsolute\" class=\"docClass\">absolute</a>\n path. When the parameter is a relative path then the file to open or\n create is relative to this open directory. In addition to the options\n defined by the {@code Files.newByteChannel} method, the <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> option may be used to\n ensure that this method fails if the file is a symbolic link.</p>\n\n<p> <p> The channel, once created, is not dependent upon the directory stream\n used to create it. Closing this directory stream has no effect upon the\n channel.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Object}<div class='sub-desc'><p>the path of the file to open open or create</p>\n</div></li><li><span class='pre'>options</span> : Object {java.util.Set}<div class='sub-desc'><p>options specifying how the file is opened</p>\n</div></li><li><span class='pre'>attrs</span> : Object {java.nio.file.attribute.FileAttribute[]}<div class='sub-desc'><p>an optional list of attributes to set atomically when creating\n          the file</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.SeekableByteChannel}</span><div class='sub-desc'><p>the seekable byte channel</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedDirectoryStreamException\n          if the directory stream is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the set contains an invalid combination of options</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException\n          if an unsupported open option is specified or the array contains\n          attributes that cannot be set atomically when creating the file</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileAlreadyExistsException\n          if a file of that name already exists and the CREATE_NEW option is specified\n          <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the path if the file\n          is opened for reading. The checkWrite method is invoked to check write access to the path\n          if the file is opened for writing.</p>\n</div></li></ul></div></div></div><div id='method-newDirectoryStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.SecureDirectoryStream'>java.nio.file.SecureDirectoryStream</span><br/><a href='source/SecureDirectoryStream.html#java-nio-file-SecureDirectoryStream-method-newDirectoryStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.SecureDirectoryStream-method-newDirectoryStream' class='name expandable'>newDirectoryStream</a>( <span class='pre'>path, options</span> ) : Object {java.nio.file.SecureDirectoryStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens the directory identified by the given path, returning a {@code\n SecureDirectoryStream} to iterate over the entr...</div><div class='long'><p>Opens the directory identified by the given path, returning a {@code\n SecureDirectoryStream} to iterate over the entries in the directory.</p>\n\n<p> <p> This method works in exactly the manner specified by the newDirectoryStream method for the case that\n the {@code path} parameter is an <a href=\"#!/api/java.nio.file.Path-method-isAbsolute\" rel=\"java.nio.file.Path-method-isAbsolute\" class=\"docClass\">absolute</a> path.\n When the parameter is a relative path then the directory to open is\n relative to this open directory. The <a href=\"#!/api/java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" rel=\"java.nio.file.LinkOption-property-NOFOLLOW_LINKS\" class=\"docClass\">NOFOLLOW_LINKS</a> option may be used to\n ensure that this method fails if the file is a symbolic link.</p>\n\n<p> <p> The new directory stream, once created, is not dependent upon the\n directory stream used to create it. Closing this directory stream has no\n effect upon newly created directory stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Object}<div class='sub-desc'><p>the path to the directory to open</p>\n</div></li><li><span class='pre'>options</span> : Object {java.nio.file.LinkOption[]}<div class='sub-desc'><p>options indicating how symbolic links are handled</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.SecureDirectoryStream}</span><div class='sub-desc'><p>a new and open {@code SecureDirectoryStream} object</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClosedDirectoryStreamException\n          if the directory stream is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotDirectoryException\n          if the file could not otherwise be opened because it is not\n          a directory <i>(optional specific exception)</i></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          In the case of the default provider, and a security manager is\n          installed, the checkRead\n          method is invoked to check read access to the directory.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});