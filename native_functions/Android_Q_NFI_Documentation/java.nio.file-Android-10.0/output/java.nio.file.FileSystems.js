Ext.data.JsonP.java_nio_file_FileSystems({"tagname":"class","name":"java.nio.file.FileSystems","autodetected":{},"files":[{"filename":"FileSystems.js","href":"FileSystems.html#java-nio-file-FileSystems"}],"extends":"java.lang.Object","since":"1.7","members":[{"name":"getDefault","tagname":"method","owner":"java.nio.file.FileSystems","id":"method-getDefault","meta":{}},{"name":"getFileSystem","tagname":"method","owner":"java.nio.file.FileSystems","id":"method-getFileSystem","meta":{}},{"name":"newFileSystem","tagname":"method","owner":"java.nio.file.FileSystems","id":"method-newFileSystem","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.nio.file.FileSystems","short_doc":"Factory methods for file systems. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.nio.file.FileSystems</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/FileSystems.html#java-nio-file-FileSystems' target='_blank'>FileSystems.js</a></div></pre><div class='doc-contents'><p>Factory methods for file systems. This class defines the <a href=\"#!/api/java.nio.file.FileSystems-method-getDefault\" rel=\"java.nio.file.FileSystems-method-getDefault\" class=\"docClass\">getDefault</a> method to get the default file system and factory methods to\n construct other types of file systems.</p>\n\n<p> <p> The first invocation of any of the methods defined by this class causes\n the default provider to be loaded. The default\n provider, identified by the URI scheme \"file\", creates the <a href=\"#!/api/java.nio.file.FileSystem\" rel=\"java.nio.file.FileSystem\" class=\"docClass\">java.nio.file.FileSystem</a>\n that provides access to the file systems accessible to the Java virtual\n machine. If the process of loading or initializing the default provider fails\n then an unspecified error is thrown.</p>\n\n<p> <p> The first invocation of the installedProviders method, by way of invoking any of the {@code\n newFileSystem} methods defined by this class, locates and loads all\n installed file system providers. Installed providers are loaded using the\n service-provider loading facility defined by the ServiceLoader class.\n Installed providers are loaded using the system class loader. If the\n system class loader cannot be found then the extension class loader is used;\n if there is no extension class loader then the bootstrap class loader is used.\n Providers are typically installed by placing them in a JAR file on the\n application class path or in the extension directory, the JAR file contains a\n provider-configuration file named {@code java.nio.file.spi.FileSystemProvider}\n in the resource directory {@code META-INF/services}, and the file lists one or\n more fully-qualified names of concrete subclass of java.nio.file.FileSystemProvider\n that have a zero argument constructor.\n The ordering that installed providers are located is implementation specific.\n If a provider is instantiated and its getScheme returns the same URI scheme of a provider that was previously\n instantiated then the most recently instantiated duplicate is discarded. URI\n schemes are compared without regard to case. During construction a provider\n may safely access files associated with the default provider but care needs\n to be taken to avoid circular loading of other installed providers. If\n circular loading of installed providers is detected then an unspecified error\n is thrown.</p>\n\n<p> <p> This class also defines factory methods that allow a ClassLoader\n to be specified when locating a provider. As with installed providers, the\n provider classes are identified by placing the provider configuration file\n in the resource directory {@code META-INF/services}.</p>\n\n<p> <p> If a thread initiates the loading of the installed file system providers\n and another thread invokes a method that also attempts to load the providers\n then the method will block until the loading completes.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getDefault' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystems'>java.nio.file.FileSystems</span><br/><a href='source/FileSystems.html#java-nio-file-FileSystems-method-getDefault' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystems-method-getDefault' class='name expandable'>getDefault</a>( <span class='pre'></span> ) : Object {java.nio.file.FileSystem}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the default {@code FileSystem}. ...</div><div class='long'><p>Returns the default {@code FileSystem}. The default file system creates\n objects that provide access to the file systems accessible to the Java\n virtual machine. The <em>working directory</em> of the file system is\n the current user directory, named by the system property {@code user.dir}.\n This allows for interoperability with the java.io.File\n class.</p>\n\n<p> <p> The first invocation of any of the methods defined by this class\n locates the default provider object. Where the\n system property {@code java.nio.file.spi.DefaultFileSystemProvider} is\n not defined then the default provider is a system-default provider that\n is invoked to create the default file system.</p>\n\n<p> <p> If the system property {@code java.nio.file.spi.DefaultFileSystemProvider}\n is defined then it is taken to be a list of one or more fully-qualified\n names of concrete provider classes identified by the URI scheme\n {@code \"file\"}. Where the property is a list of more than one name then\n the names are separated by a comma. Each class is loaded, using the system\n class loader, and instantiated by invoking a one argument constructor\n whose formal parameter type is {@code FileSystemProvider}. The providers\n are loaded and instantiated in the order they are listed in the property.\n If this process fails or a provider's scheme is not equal to {@code \"file\"}\n then an unspecified error is thrown. URI schemes are normally compared\n without regard to case but for the default provider, the scheme is\n required to be {@code \"file\"}. The first provider class is instantiated\n by invoking it with a reference to the system-default provider.\n The second provider class is instantiated by invoking it with a reference\n to the first provider instance. The third provider class is instantiated\n by invoking it with a reference to the second instance, and so on. The\n last provider to be instantiated becomes the default provider; its {@code\n getFileSystem} method is invoked with the URI {@code \"file:///\"} to\n get a reference to the default file system.</p>\n\n<p> <p> Subsequent invocations of this method return the file system that was\n returned by the first invocation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileSystem}</span><div class='sub-desc'><p>the default file system</p>\n</div></li></ul></div></div></div><div id='method-getFileSystem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystems'>java.nio.file.FileSystems</span><br/><a href='source/FileSystems.html#java-nio-file-FileSystems-method-getFileSystem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystems-method-getFileSystem' class='name expandable'>getFileSystem</a>( <span class='pre'>uri</span> ) : Object {java.nio.file.FileSystem}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a reference to an existing {@code FileSystem}. ...</div><div class='long'><p>Returns a reference to an existing {@code FileSystem}.</p>\n\n<p> <p> This method iterates over the installed providers to locate the provider that is identified by the URI\n scheme of the given URI. URI schemes are compared\n without regard to case. The exact form of the URI is highly provider\n dependent. If found, the provider's getjava.nio.file.FileSystem method is invoked to obtain a reference to the {@code\n FileSystem}.</p>\n\n<p> <p> Once a file system created by this provider is <a href=\"#!/api/java.nio.file.FileSystem-method-close\" rel=\"java.nio.file.FileSystem-method-close\" class=\"docClass\">closed</a> it is provider-dependent if this method returns a reference to\n the closed file system or throws <a href=\"#!/api/java.nio.file.FileSystemNotFoundException\" rel=\"java.nio.file.FileSystemNotFoundException\" class=\"docClass\">java.nio.file.FileSystemNotFoundException</a>.\n If the provider allows a new file system to be created with the same URI\n as a file system it previously created then this method throws the\n exception if invoked after the file system is closed (and before a new\n instance is created by the <a href=\"#!/api/java.nio.file.FileSystems-method-newFileSystem\" rel=\"java.nio.file.FileSystems-method-newFileSystem\" class=\"docClass\">newFileSystem</a> method).</p>\n\n<p> <p> If a security manager is installed then a provider implementation\n may require to check a permission before returning a reference to an\n existing file system. In the case of the <a href=\"#!/api/java.nio.file.FileSystems-method-getDefault\" rel=\"java.nio.file.FileSystems-method-getDefault\" class=\"docClass\">default</a> file system, no permission check is required.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uri</span> : Object {URI}<div class='sub-desc'><p>the URI to locate the file system</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileSystem}</span><div class='sub-desc'><p>the reference to the file system</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          if the pre-conditions for the {@code uri} parameter are not met</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>FileSystemNotFoundException\n          if the file system, identified by the URI, does not exist</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ProviderNotFoundException\n          if a provider supporting the URI scheme is not installed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          if a security manager is installed and it denies an unspecified\n          permission</p>\n</div></li></ul></div></div></div><div id='method-newFileSystem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.nio.file.FileSystems'>java.nio.file.FileSystems</span><br/><a href='source/FileSystems.html#java-nio-file-FileSystems-method-newFileSystem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.nio.file.FileSystems-method-newFileSystem' class='name expandable'>newFileSystem</a>( <span class='pre'>path, loader</span> ) : Object {java.nio.file.FileSystem}<span class=\"signature\"></span></div><div class='description'><div class='short'>Constructs a new {@code FileSystem} to access the contents of a file as a\n file system. ...</div><div class='long'><p>Constructs a new {@code FileSystem} to access the contents of a file as a\n file system.</p>\n\n<p> <p> This method makes use of specialized providers that create pseudo file\n systems where the contents of one or more files is treated as a file\n system.</p>\n\n<p> <p> This method iterates over the installed providers. It invokes, in turn, each provider's newjava.nio.file.FileSystem(Path,Map) method\n with an empty map. If a provider returns a file system then the iteration\n terminates and the file system is returned. If none of the installed\n providers return a {@code FileSystem} then an attempt is made to locate\n the provider using the given class loader. If a provider returns a file\n system then the lookup terminates and the file system is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : Object {Path}<div class='sub-desc'><p>the path to the file</p>\n</div></li><li><span class='pre'>loader</span> : Object {ClassLoader}<div class='sub-desc'><p>the class loader to locate the provider or {@code null} to only\n          attempt to locate an installed provider</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.file.FileSystem}</span><div class='sub-desc'><p>a new file system</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ProviderNotFoundException\n          if a provider supporting this file type cannot be located</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ServiceConfigurationError\n          when an error occurs while loading a service provider</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          if an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n          if a security manager is installed and it denies an unspecified\n          permission</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});