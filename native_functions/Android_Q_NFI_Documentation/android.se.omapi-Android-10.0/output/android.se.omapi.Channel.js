Ext.data.JsonP.android_se_omapi_Channel({"tagname":"class","name":"android.se.omapi.Channel","autodetected":{},"files":[{"filename":"Channel.js","href":"Channel.html#android-se-omapi-Channel"}],"extends":"java.lang.Object","members":[{"name":"close","tagname":"method","owner":"android.se.omapi.Channel","id":"method-close","meta":{}},{"name":"getSelectResponse","tagname":"method","owner":"android.se.omapi.Channel","id":"method-getSelectResponse","meta":{}},{"name":"getSession","tagname":"method","owner":"android.se.omapi.Channel","id":"method-getSession","meta":{}},{"name":"isBasicChannel","tagname":"method","owner":"android.se.omapi.Channel","id":"method-isBasicChannel","meta":{}},{"name":"isOpen","tagname":"method","owner":"android.se.omapi.Channel","id":"method-isOpen","meta":{}},{"name":"selectNext","tagname":"method","owner":"android.se.omapi.Channel","id":"method-selectNext","meta":{}},{"name":"transmit","tagname":"method","owner":"android.se.omapi.Channel","id":"method-transmit","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.se.omapi.Channel","short_doc":"implements java.nio.channels.Channel\n\nInstances of this class represent an ISO/IEC 7816-4 channel opened to a\n Secure...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.se.omapi.Channel</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Channel.html#android-se-omapi-Channel' target='_blank'>Channel.js</a></div></pre><div class='doc-contents'><p>implements java.nio.channels.Channel</p>\n\n<p>Instances of this class represent an ISO/IEC 7816-4 channel opened to a\n Secure Element. It can be either a logical channel or the basic channel. They\n can be used to send APDUs to the secure element. Channels are opened by\n calling the Session.openBasicChannel(byte[]) or\n Session.openLogicalChannel(byte[]) methods.</p>\n\n<p> @see <a href=\"http://globalplatform.org\">GlobalPlatform Open Mobile API</a></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.se.omapi.Channel'>android.se.omapi.Channel</span><br/><a href='source/Channel.html#android-se-omapi-Channel-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.se.omapi.Channel-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this channel to the Secure Element. ...</div><div class='long'><p>Closes this channel to the Secure Element. If the method is called when\n the channel is already closed, this method will be ignored. The close()\n method shall wait for completion of any pending transmit(byte[] command)\n before closing the channel.</p>\n</div></div></div><div id='method-getSelectResponse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.se.omapi.Channel'>android.se.omapi.Channel</span><br/><a href='source/Channel.html#android-se-omapi-Channel-method-getSelectResponse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.se.omapi.Channel-method-getSelectResponse' class='name expandable'>getSelectResponse</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the data as received from the application select command inclusively the status word\n received at applet sele...</div><div class='long'><p>Returns the data as received from the application select command inclusively the status word\n received at applet selection.\n The returned byte array contains the data bytes in the following order:\n [&lt;first data byte&gt;, ..., &lt;last data byte&gt;, &lt;sw1&gt;, &lt;sw2&gt;]</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The data as returned by the application select command inclusively the status word.\n Only the status word if the application select command has no returned data.\n Returns null if an application select command has not been performed or the selection\n response can not be retrieved by the reader implementation.</p>\n</div></li></ul></div></div></div><div id='method-getSession' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.se.omapi.Channel'>android.se.omapi.Channel</span><br/><a href='source/Channel.html#android-se-omapi-Channel-method-getSession' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.se.omapi.Channel-method-getSession' class='name expandable'>getSession</a>( <span class='pre'></span> ) : Object {android.se.omapi.Session}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the session that has opened this channel. ...</div><div class='long'><p>Get the session that has opened this channel.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.se.omapi.Session}</span><div class='sub-desc'><p>the session object this channel is bound to.</p>\n</div></li></ul></div></div></div><div id='method-isBasicChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.se.omapi.Channel'>android.se.omapi.Channel</span><br/><a href='source/Channel.html#android-se-omapi-Channel-method-isBasicChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.se.omapi.Channel-method-isBasicChannel' class='name expandable'>isBasicChannel</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a boolean telling if this channel is the basic channel. ...</div><div class='long'><p>Returns a boolean telling if this channel is the basic channel.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if this channel is a basic channel. <code>false</code> if\n         this channel is a logical channel.</p>\n</div></li></ul></div></div></div><div id='method-isOpen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.se.omapi.Channel'>android.se.omapi.Channel</span><br/><a href='source/Channel.html#android-se-omapi-Channel-method-isOpen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.se.omapi.Channel-method-isOpen' class='name expandable'>isOpen</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells if this channel is open. ...</div><div class='long'><p>Tells if this channel is open.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>false</code> if the channel is closed or in case of an error.\n         <code>true</code> otherwise.</p>\n</div></li></ul></div></div></div><div id='method-selectNext' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.se.omapi.Channel'>android.se.omapi.Channel</span><br/><a href='source/Channel.html#android-se-omapi-Channel-method-selectNext' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.se.omapi.Channel-method-selectNext' class='name expandable'>selectNext</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Performs a selection of the next Applet on this channel that matches to the partial AID\n specified in the openBasicCh...</div><div class='long'><p>Performs a selection of the next Applet on this channel that matches to the partial AID\n specified in the openBasicChannel(byte[] aid) or openLogicalChannel(byte[] aid) method.\n This mechanism can be used by a device application to iterate through all Applets\n matching to the same partial AID.\n If selectNext() returns true a new Applet was successfully selected on this channel.\n If no further Applet exists with matches to the partial AID this method returns false\n and the already selected Applet stays selected. <br></p>\n\n<p> Since the API cannot distinguish between a partial and full AID the API shall rely on the\n response of the Secure Element for the return value of this method. <br>\n The implementation of the underlying SELECT command within this method shall use\n the same values as the corresponding openBasicChannel(byte[] aid) or\n openLogicalChannel(byte[] aid) command with the option: <br>\n P2='02' (Next occurrence) <br>\n The select response stored in the Channel object shall be updated with the APDU\n response of the SELECT command.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if new Applet was selected on this channel.\n               <code>false</code> he already selected Applet stays selected on this channel.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if there is a communication problem to the reader or the Secure Element.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the channel is used after being closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if this operation is not supported by the card.</p>\n</div></li></ul></div></div></div><div id='method-transmit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.se.omapi.Channel'>android.se.omapi.Channel</span><br/><a href='source/Channel.html#android-se-omapi-Channel-method-transmit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.se.omapi.Channel-method-transmit' class='name expandable'>transmit</a>( <span class='pre'>command</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Transmit an APDU command (as per ISO/IEC 7816-4) to the Secure Element. ...</div><div class='long'><p>Transmit an APDU command (as per ISO/IEC 7816-4) to the Secure Element. The\n underlying layers generate as many TPDUs as necessary to transport this APDU. The\n API shall ensure that all available data returned from Secure Element, including\n concatenated responses, are retrieved and made available to the calling application. If a\n warning status code is received the API wont check for further response data but will\n return all data received so far and the warning status code.<br>\n The transport part is invisible from the application. The generated response is the\n response of the APDU which means that all protocols related responses are handled\n inside the API or the underlying implementation.<br>\n The transmit method shall support extended length APDU commands independently of\n the coding within the ATR.<br>\n For status word '61 XX' the API or underlying implementation shall issue a GET\n RESPONSE command as specified by ISO 7816-4 standard with LE=XX; for the status\n word '6C XX', the API or underlying implementation shall reissue the input command\n with LE=XX. For other status words, the API (or underlying implementation) shall return\n the complete response including data and status word to the device application. The API\n (or underlying implementation) shall not handle internally the received status words. The\n channel shall not be closed even if the Secure Element answered with an error code.\n The system ensures the synchronization between all the concurrent calls to this method,\n and that only one APDU will be sent at a time, irrespective of the number of TPDUs that\n might be required to transport it to the SE. The entire APDU communication to this SE is\n locked to the APDU.<br>\n The channel information in the class byte in the APDU will be ignored. The system will\n add any required information to ensure the APDU is transported on this channel.\n The only restrictions on the set of commands that can be sent is defined below, the API\n implementation shall be able to send all other commands: <br>\n <ul>\n <li>MANAGE_CHANNEL commands are not allowed.</li>\n <li>SELECT by DF Name (p1=04) are not allowed.</li>\n <li>CLA bytes with channel numbers are de-masked.</li>\n </ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>command</span> : Object {byte[]}<div class='sub-desc'><p>the APDU command to be transmitted, as a byte array.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the response received, as a byte array. The returned byte array contains the data\n bytes in the following order:\n [&lt;first data byte&gt;, ..., &lt;last data byte&gt;, &lt;sw1&gt;, &lt;sw2&gt;]</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if there is a communication problem to the reader or the Secure Element.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the channel is used after being closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the command byte array is less than 4 bytes long.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if Lc byte is inconsistent with length of the byte array.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if CLA byte is invalid according to [2] (0xff).</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if INS byte is invalid according to [2] (0x6x or 0x9x).</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException if the command is filtered by the security policy.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if command is NULL.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});