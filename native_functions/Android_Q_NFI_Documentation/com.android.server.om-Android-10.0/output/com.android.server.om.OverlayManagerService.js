Ext.data.JsonP.com_android_server_om_OverlayManagerService({"tagname":"class","name":"com.android.server.om.OverlayManagerService","autodetected":{},"files":[{"filename":"OverlayManagerService.js","href":"OverlayManagerService.html#com-android-server-om-OverlayManagerService"}],"extends":"com.android.server.SystemService","members":[{"name":"onStart","tagname":"method","owner":"com.android.server.om.OverlayManagerService","id":"method-onStart","meta":{}},{"name":"onSwitchUser","tagname":"method","owner":"com.android.server.om.OverlayManagerService","id":"method-onSwitchUser","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.server.om.OverlayManagerService","short_doc":"Service to manage asset overlays. ...","classIcon":"icon-class","superclasses":["com.android.server.SystemService"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>com.android.server.SystemService<div class='subclass '><strong>com.android.server.om.OverlayManagerService</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/OverlayManagerService.html#com-android-server-om-OverlayManagerService' target='_blank'>OverlayManagerService.js</a></div></pre><div class='doc-contents'><p>Service to manage asset overlays.</p>\n\n<p> <p>Asset overlays are additional resources that come from apks loaded\n alongside the system and app apks. This service, the OverlayManagerService\n (OMS), tracks which installed overlays to use and provides methods to change\n this. Changes propagate to running applications as part of the Activity\n lifecycle. This allows Activities to reread their resources at a well\n defined point.</p></p>\n\n<p> <p>By itself, the OMS will not change what overlays should be active.\n Instead, it is only responsible for making sure that overlays <em>can</em> be used\n from a technical and security point of view and to activate overlays in\n response to external requests. The responsibility to toggle overlays on and\n off lies within components that implement different use-cases such as themes\n or dynamic customization.</p></p>\n\n<p> <p>The OMS receives input from three sources:</p></p>\n\n<p> <ul>\n     <li>Callbacks from the SystemService class, specifically when the\n     Android framework is booting and when the end user switches Android\n     users.</li></ul></p>\n\n<pre><code> &lt;li&gt;Intents from the PackageManagerService (PMS). Overlays are regular\n apks, and whenever a package is installed (or removed, or has a\n component enabled or disabled), the PMS broadcasts this as an intent.\n When the OMS receives one of these intents, it updates its internal\n representation of the available overlays and, if there was a visible\n change, triggers an asset refresh in the affected apps.&lt;/li&gt;\n\n &lt;li&gt;External requests via the AIDL interface.\n The interface allows clients to read information about the currently\n available overlays, change whether an overlay should be used or not, and\n change the relative order in which overlay packages are loaded.\n Read-access is granted if the request targets the same Android user as\n the caller runs as, or if the caller holds the\n INTERACT_ACROSS_USERS_FULL permission. Write-access is granted if the\n caller is granted read-access and additionaly holds the\n CHANGE_OVERLAY_PACKAGES permission.&lt;/li&gt;\n</code></pre>\n\n<p> </p>\n\n<p> <p>The AIDL interface works with String package names, int user IDs, and\n OverlayInfo objects. OverlayInfo instances are used to track a\n specific pair of target and overlay packages and include information such as\n the current state of the overlay. OverlayInfo objects are immutable.</p></p>\n\n<p> <p>Internally, OverlayInfo objects are maintained by the\n OverlayManagerSettings class. The OMS and its helper classes are notified of\n changes to the settings by the OverlayManagerSettings.ChangeListener\n callback interface. The file /data/system/overlays.xml is used to persist\n the settings.</p></p>\n\n<p> <p>Creation and deletion of idmap files are handled by the IdmapManager\n class.</p></p>\n\n<p> <p>The following is an overview of OMS and its related classes. Note how box\n (2) does the heavy lifting, box (1) interacts with the Android framework,\n and box (3) replaces box (1) during unit testing.</p></p>\n\n<pre>         Android framework\n            |         ^\n      . . . | . . . . | . . . .\n     .      |         |       .\n     .    AIDL,   broadcasts  .\n     .   intents      |       .\n     .      |         |       . . . . . . . . . . . .\n     .      v         |       .                     .\n     .  OverlayManagerService . OverlayManagerTests .\n     .                  \\     .     /               .\n     . (1)               \\    .    /            (3) .\n      . . . . . . . . . . \\ . . . / . . . . . . . . .\n     .                     \\     /              .\n     . (2)                  \\   /               .\n     .           OverlayManagerServiceImpl      .\n     .                  |            |          .\n     .                  |            |          .\n     . OverlayManagerSettings     IdmapManager  .\n     .                                          .\n     . . . .  . . . . . . . . . . . . . . . . . .\n </pre>\n\n\n<p> <p>To test the OMS, execute:\n <code>\n atest FrameworksServicesTests:com.android.server.om  # internal tests\n atest OverlayDeviceTests OverlayHostTests            # public API tests\n </code>\n </p></p>\n\n<p> <p>Finally, here is a list of keywords used in the OMS context.</p></p>\n\n<p> <ul>\n     <li><b>target [package]</b> -- A regular apk that may have its resource\n     pool extended  by zero or more overlay packages.</li></ul></p>\n\n<pre><code> &lt;li&gt;&lt;b&gt;overlay [package]&lt;/b&gt; -- An apk that provides additional\n resources to another apk.&lt;/li&gt;\n\n &lt;li&gt;&lt;b&gt;OMS&lt;/b&gt; -- The OverlayManagerService, i.e. this class.&lt;/li&gt;\n\n &lt;li&gt;&lt;b&gt;approved&lt;/b&gt; -- An overlay is approved if the OMS has verified\n that it can be used technically speaking (its target package is\n installed, at least one resource name in both packages match, the\n idmap was created, etc) and that it is secure to do so. External\n clients can not change this state.&lt;/li&gt;\n\n &lt;li&gt;&lt;b&gt;not approved&lt;/b&gt; -- The opposite of approved.&lt;/li&gt;\n\n &lt;li&gt;&lt;b&gt;enabled&lt;/b&gt; -- An overlay currently in active use and thus part\n of resource lookups. This requires the overlay to be approved. Only\n external clients can change this state.&lt;/li&gt;\n\n &lt;li&gt;&lt;b&gt;disabled&lt;/b&gt; -- The opposite of enabled.&lt;/li&gt;\n\n &lt;li&gt;&lt;b&gt;idmap&lt;/b&gt; -- A mapping of resource IDs between target and overlay\n used during resource lookup. Also the name of the binary that creates\n the mapping.&lt;/li&gt;\n</code></pre>\n\n<p> </p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onStart' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.om.OverlayManagerService'>com.android.server.om.OverlayManagerService</span><br/><a href='source/OverlayManagerService.html#com-android-server-om-OverlayManagerService-method-onStart' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.om.OverlayManagerService-method-onStart' class='name expandable'>onStart</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onSwitchUser' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.om.OverlayManagerService'>com.android.server.om.OverlayManagerService</span><br/><a href='source/OverlayManagerService.html#com-android-server-om-OverlayManagerService-method-onSwitchUser' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.om.OverlayManagerService-method-onSwitchUser' class='name expandable'>onSwitchUser</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});