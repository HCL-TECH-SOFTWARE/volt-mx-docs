Ext.data.JsonP.java_security_cert_CertificateFactory({"tagname":"class","name":"java.security.cert.CertificateFactory","autodetected":{},"files":[{"filename":"CertificateFactory.js","href":"CertificateFactory.html#java-security-cert-CertificateFactory"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Hemma Prafullchandra","email":null},{"tagname":"author","name":"Jan Luehe","email":null},{"tagname":"author","name":"Sean Mullan","email":null}],"since":"1.2","members":[{"name":"generateCRL","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-generateCRL","meta":{}},{"name":"generateCRLs","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-generateCRLs","meta":{}},{"name":"generateCertPath","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-generateCertPath","meta":{}},{"name":"generateCertificate","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-generateCertificate","meta":{}},{"name":"generateCertificates","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-generateCertificates","meta":{}},{"name":"getCertPathEncodings","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-getCertPathEncodings","meta":{}},{"name":"getInstance","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-getInstance","meta":{}},{"name":"getProvider","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-getProvider","meta":{}},{"name":"getType","tagname":"method","owner":"java.security.cert.CertificateFactory","id":"method-getType","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.security.cert.CertificateFactory","short_doc":"This class defines the functionality of a certificate factory, which is\n used to generate certificate, certification ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.security.cert.CertificateFactory</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory' target='_blank'>CertificateFactory.js</a></div></pre><div class='doc-contents'><p>This class defines the functionality of a certificate factory, which is\n used to generate certificate, certification path ({@code CertPath})\n and certificate revocation list (CRL) objects from their encodings.</p>\n\n<p> <p>For encodings consisting of multiple certificates, use\n {@code generateCertificates} when you want to\n parse a collection of possibly unrelated certificates. Otherwise,\n use {@code generateCertPath} when you want to generate\n a {@code CertPath} (a certificate chain) and subsequently\n validate it with a {@code CertPathValidator}.</p>\n\n<p> <p>A certificate factory for X.509 must return certificates that are an\n instance of {@code <a href=\"#!/api/java.security.cert.X509Certificate\" rel=\"java.security.cert.X509Certificate\" class=\"docClass\">java.security.cert.X509Certificate</a>}, and CRLs\n that are an instance of {@code <a href=\"#!/api/java.security.cert.X509CRL\" rel=\"java.security.cert.X509CRL\" class=\"docClass\">java.security.cert.X509CRL</a>}.</p>\n\n<p> <p>The following example reads a file with Base64 encoded certificates,\n which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and\n bounded at the end by -----END CERTIFICATE-----. We convert the\n {@code FileInputStream} (which does not support {@code mark}\n and {@code reset}) to a {@code BufferedInputStream} (which\n supports those methods), so that each call to\n {@code generateCertificate} consumes only one certificate, and the\n read position of the input stream is positioned to the next certificate in\n the file:</p>\n\n<p> <pre>{@code\n FileInputStream fis = new FileInputStream(filename);\n BufferedInputStream bis = new BufferedInputStream(fis);</pre></p>\n\n<p> CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");</p>\n\n<p> while (bis.available() > 0) {\n    Certificate cert = cf.generateCertificate(bis);\n    System.out.println(cert.toString());\n }\n }</p>\n\n<p> <p>The following example parses a PKCS#7-formatted certificate reply stored\n in a file and extracts all the certificates from it:</p>\n\n<pre> FileInputStream fis = new FileInputStream(filename);\n CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n Collection c = cf.generateCertificates(fis);\n Iterator i = c.iterator();\n while (i.hasNext()) {\n    Certificate cert = (Certificate)i.next();\n    System.out.println(cert);\n }\n </pre>\n\n\n<p> <p> Android provides the following <code>CertificateFactory</code> types:\n <table>\n   <thead>\n     <tr>\n       <th>Algorithm</th>\n       <th>Supported API Levels</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td>X.509</td>\n       <td>1+</td>\n     </tr>\n   </tbody>\n </table>\n and the following <code>CertPath</code> encodings:\n <table>\n     <thead>\n         <tr>\n             <th>Name</th>\n             <th>Supported (API Levels)</th>\n         </tr>\n     </thead>\n     <tbody>\n         <tr>\n             <td>PKCS7</td>\n             <td>1+</td>\n         </tr>\n         <tr>\n             <td>PkiPath</td>\n             <td>1+</td>\n         </tr>\n     </tbody>\n </table></p>\n\n<p> The type and encodings are described in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#CertificateFactory\">\n CertificateFactory section</a> and the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#CertPathEncodings\">\n CertPath Encodings section</a> of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.</p>\n\n<p> @see Certificate\n @see X509Certificate\n @see CertPath\n @see CRL\n @see X509CRL</p>\n        <p>Available since: <b>1.2</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-generateCRL' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-generateCRL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-generateCRL' class='name expandable'>generateCRL</a>( <span class='pre'>inStream</span> ) : Object {java.security.cert.CRL}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a certificate revocation list (CRL) object and initializes it\n with the data read from the input stream {@c...</div><div class='long'><p>Generates a certificate revocation list (CRL) object and initializes it\n with the data read from the input stream {@code inStream}.</p>\n\n<p> <p>In order to take advantage of the specialized CRL format\n supported by this certificate factory,\n the returned CRL object can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the returned CRL object\n can be typecast to the {@code X509CRL} class.</p>\n\n<p> <p>Note that if the given input stream does not support\n mark and\n reset, this method will\n consume the entire input stream. Otherwise, each call to this\n method consumes one CRL and the read position of the input stream\n is positioned to the next available byte after the inherent\n end-of-CRL marker. If the data in the\n input stream does not contain an inherent end-of-CRL marker (other\n than EOF) and there is trailing data after the CRL is parsed, a\n {@code CRLException} is thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>inStream</span> : Object {InputStream}<div class='sub-desc'><p>an input stream with the CRL data.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.cert.CRL}</span><div class='sub-desc'><p>a CRL object initialized with the data\n from the input stream.\n@exception CRLException on parsing errors.</p>\n</div></li></ul></div></div></div><div id='method-generateCRLs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-generateCRLs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-generateCRLs' class='name expandable'>generateCRLs</a>( <span class='pre'>inStream</span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a (possibly empty) collection view of the CRLs read\n from the given input stream {@code inStream}. ...</div><div class='long'><p>Returns a (possibly empty) collection view of the CRLs read\n from the given input stream {@code inStream}.</p>\n\n<p> <p>In order to take advantage of the specialized CRL format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n CRL class. For example, if this certificate\n factory implements X.509 CRLs, the elements in the returned\n collection can be typecast to the {@code X509CRL} class.</p>\n\n<p> <p>In the case of a certificate factory for X.509 CRLs,\n {@code inStream} may contain a sequence of DER-encoded CRLs.\n In addition, {@code inStream} may contain a PKCS#7 CRL\n set. This is a PKCS#7 <i>SignedData</i> object, with the only\n significant field being <i>crls</i>. In particular, the\n signature and the contents are ignored. This format allows multiple\n CRLs to be downloaded at once. If no CRLs are present,\n an empty collection is returned.</p>\n\n<p> <p>Note that if the given input stream does not support\n mark and\n reset, this method will\n consume the entire input stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>inStream</span> : Object {InputStream}<div class='sub-desc'><p>the input stream with the CRLs.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>a (possibly empty) collection view of\n <a href=\"#!/api/java.security.cert.CRL\" rel=\"java.security.cert.CRL\" class=\"docClass\">java.security.cert.CRL</a> objects initialized with the data from the input\n stream.\n@exception CRLException on parsing errors.</p>\n</div></li></ul></div></div></div><div id='method-generateCertPath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-generateCertPath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-generateCertPath' class='name expandable'>generateCertPath</a>( <span class='pre'>certificates</span> ) : Object {java.security.cert.CertPath}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a {@code CertPath} object and initializes it with\n a {@code List} of {@code Certificate}s. ...</div><div class='long'><p>Generates a {@code CertPath} object and initializes it with\n a {@code List} of {@code Certificate}s.\n <p>\n The certificates supplied must be of a type supported by the\n {@code CertificateFactory}. They will be copied out of the supplied\n {@code List} object.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>certificates</span> : Object {java.util.List}<div class='sub-desc'><p>a {@code List} of {@code Certificate}s</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.cert.CertPath}</span><div class='sub-desc'><p>a {@code CertPath} initialized with the supplied list of\n   certificates\n@exception CertificateException if an exception occurs</p>\n</div></li></ul></div></div></div><div id='method-generateCertificate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-generateCertificate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-generateCertificate' class='name expandable'>generateCertificate</a>( <span class='pre'>inStream</span> ) : Object {java.security.cert.Certificate}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a certificate object and initializes it with\n the data read from the input stream {@code inStream}. ...</div><div class='long'><p>Generates a certificate object and initializes it with\n the data read from the input stream {@code inStream}.</p>\n\n<p> <p>In order to take advantage of the specialized certificate format\n supported by this certificate factory,\n the returned certificate object can be typecast to the corresponding\n certificate class. For example, if this certificate\n factory implements X.509 certificates, the returned certificate object\n can be typecast to the {@code X509Certificate} class.</p>\n\n<p> <p>In the case of a certificate factory for X.509 certificates, the\n certificate provided in {@code inStream} must be DER-encoded and\n may be supplied in binary or printable (Base64) encoding. If the\n certificate is provided in Base64 encoding, it must be bounded at\n the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at\n the end by -----END CERTIFICATE-----.</p>\n\n<p> <p>Note that if the given input stream does not support\n mark and\n reset, this method will\n consume the entire input stream. Otherwise, each call to this\n method consumes one certificate and the read position of the\n input stream is positioned to the next available byte after\n the inherent end-of-certificate marker. If the data in the input stream\n does not contain an inherent end-of-certificate marker (other\n than EOF) and there is trailing data after the certificate is parsed, a\n {@code CertificateException} is thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>inStream</span> : Object {InputStream}<div class='sub-desc'><p>an input stream with the certificate data.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.cert.Certificate}</span><div class='sub-desc'><p>a certificate object initialized with the data\n from the input stream.\n@exception CertificateException on parsing errors.</p>\n</div></li></ul></div></div></div><div id='method-generateCertificates' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-generateCertificates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-generateCertificates' class='name expandable'>generateCertificates</a>( <span class='pre'>inStream</span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a (possibly empty) collection view of the certificates read\n from the given input stream {@code inStream}. ...</div><div class='long'><p>Returns a (possibly empty) collection view of the certificates read\n from the given input stream {@code inStream}.</p>\n\n<p> <p>In order to take advantage of the specialized certificate format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n certificate class. For example, if this certificate\n factory implements X.509 certificates, the elements in the returned\n collection can be typecast to the {@code X509Certificate} class.</p>\n\n<p> <p>In the case of a certificate factory for X.509 certificates,\n {@code inStream} may contain a sequence of DER-encoded certificates\n in the formats described for\n generateCertificate.\n In addition, {@code inStream} may contain a PKCS#7 certificate\n chain. This is a PKCS#7 <i>SignedData</i> object, with the only\n significant field being <i>certificates</i>. In particular, the\n signature and the contents are ignored. This format allows multiple\n certificates to be downloaded at once. If no certificates are present,\n an empty collection is returned.</p>\n\n<p> <p>Note that if the given input stream does not support\n mark and\n reset, this method will\n consume the entire input stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>inStream</span> : Object {InputStream}<div class='sub-desc'><p>the input stream with the certificates.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>a (possibly empty) collection view of\n <a href=\"#!/api/java.security.cert.Certificate\" rel=\"java.security.cert.Certificate\" class=\"docClass\">java.security.cert.Certificate</a> objects\n initialized with the data from the input stream.\n@exception CertificateException on parsing errors.</p>\n</div></li></ul></div></div></div><div id='method-getCertPathEncodings' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-getCertPathEncodings' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-getCertPathEncodings' class='name expandable'>getCertPathEncodings</a>( <span class='pre'></span> ) : Object {java.util.Iterator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an iteration of the {@code CertPath} encodings supported\n by this certificate factory, with the default encod...</div><div class='long'><p>Returns an iteration of the {@code CertPath} encodings supported\n by this certificate factory, with the default encoding first. See\n the CertPath Encodings section in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#CertPathEncodings\">\n Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n for information about standard encoding names and their formats.\n <p>\n Attempts to modify the returned {@code Iterator} via its\n {@code remove} method result in an\n {@code UnsupportedOperationException}.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Iterator}</span><div class='sub-desc'><p>an {@code Iterator} over the names of the supported\n         {@code CertPath} encodings (as {@code String}s)</p>\n</div></li></ul></div></div></div><div id='method-getInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'>type, provider</span> ) : Object {java.security.cert.CertificateFactory}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a certificate factory object for the specified\n certificate type. ...</div><div class='long'><p>Returns a certificate factory object for the specified\n certificate type.</p>\n\n<p> <p> A new CertificateFactory object encapsulating the\n CertificateFactorySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : String<div class='sub-desc'><p>the certificate type.\n See the CertificateFactory section in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#CertificateFactory\">\n Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n for information about standard certificate types.</p>\n</div></li><li><span class='pre'>provider</span> : Object {Provider}<div class='sub-desc'><p>the provider.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.cert.CertificateFactory}</span><div class='sub-desc'><p>a certificate factory object for the specified type.\n@exception CertificateException if a CertificateFactorySpi\n          implementation for the specified algorithm is not available\n          from the specified Provider object.\n@exception IllegalArgumentException if the {@code provider} is\n          null.\n@see java.security.Provider</p>\n</div></li></ul></div></div></div><div id='method-getProvider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-getProvider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-getProvider' class='name expandable'>getProvider</a>( <span class='pre'></span> ) : Object {java.security.Provider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the provider of this certificate factory. ...</div><div class='long'><p>Returns the provider of this certificate factory.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.Provider}</span><div class='sub-desc'><p>the provider of this certificate factory.</p>\n</div></li></ul></div></div></div><div id='method-getType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.security.cert.CertificateFactory'>java.security.cert.CertificateFactory</span><br/><a href='source/CertificateFactory.html#java-security-cert-CertificateFactory-method-getType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.security.cert.CertificateFactory-method-getType' class='name expandable'>getType</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name of the certificate type associated with this\n certificate factory. ...</div><div class='long'><p>Returns the name of the certificate type associated with this\n certificate factory.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the name of the certificate type associated with this\n certificate factory.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});