Ext.data.JsonP.javax_crypto_CipherSpi({"tagname":"class","name":"javax.crypto.CipherSpi","autodetected":{},"files":[{"filename":"CipherSpi.js","href":"CipherSpi.html#javax-crypto-CipherSpi"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Jan Luehe","email":null}],"since":"1.4","members":[],"alternateClassNames":[],"aliases":{},"id":"class-javax.crypto.CipherSpi","short_doc":"This class defines the Service Provider Interface (SPI)\n for the Cipher class. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>javax.crypto.CipherSpi</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/CipherSpi.html#javax-crypto-CipherSpi' target='_blank'>CipherSpi.js</a></div></pre><div class='doc-contents'><p>This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n for the <code>Cipher</code> class.\n All the abstract methods in this class must be implemented by each\n cryptographic service provider who wishes to supply the implementation\n of a particular cipher algorithm.</p>\n\n<p> <p>In order to create an instance of <code>Cipher</code>, which\n encapsulates an instance of this <code>CipherSpi</code> class, an\n application calls one of the\n getInstance\n factory methods of the\n <a href=\"#!/api/javax.crypto.Cipher\" rel=\"javax.crypto.Cipher\" class=\"docClass\">javax.crypto.Cipher</a> engine class and specifies the requested\n <i>transformation</i>.\n Optionally, the application may also specify the name of a provider.</p>\n\n<p> <p>A <i>transformation</i> is a string that describes the operation (or\n set of operations) to be performed on the given input, to produce some\n output. A transformation always includes the name of a cryptographic\n algorithm (e.g., <i>DES</i>), and may be followed by a feedback mode and\n padding scheme.</p>\n\n<p> <p> A transformation is of the form:</p>\n\n<p> <ul>\n <li>\"<i>algorithm/mode/padding</i>\" or</li></ul></p>\n\n<p> <li>\"<i>algorithm</i>\"\n </li></p>\n\n<p> <P> (in the latter case,\n provider-specific default values for the mode and padding scheme are used).\n For example, the following is a valid transformation:</P></p>\n\n<pre>     Cipher c = Cipher.getInstance(\"<i>DES/CBC/PKCS5Padding</i>\");\n </pre>\n\n\n<p> <p>A provider may supply a separate class for each combination\n of <i>algorithm/mode/padding</i>, or may decide to provide more generic\n classes representing sub-transformations corresponding to\n <i>algorithm</i> or <i>algorithm/mode</i> or <i>algorithm//padding</i>\n (note the double slashes),\n in which case the requested mode and/or padding are set automatically by\n the <code>getInstance</code> methods of <code>Cipher</code>, which invoke\n the engineSetMode and\n engineSetPadding\n methods of the provider's subclass of <code>CipherSpi</code>.</p>\n\n<p> <p>A <code>Cipher</code> property in a provider master class may have one of\n the following formats:</p>\n\n<p> <ul></ul></p>\n\n<p> <li></li></p>\n\n<pre>     // provider's subclass of \"CipherSpi\" implements \"algName\" with\n     // pluggable mode and padding\n     <code>Cipher.</code><i>algName</i>\n </pre>\n\n\n<p> <li></li></p>\n\n<pre>     // provider's subclass of \"CipherSpi\" implements \"algName\" in the\n     // specified \"mode\", with pluggable padding\n     <code>Cipher.</code><i>algName/mode</i>\n </pre>\n\n\n<p> <li></li></p>\n\n<pre>     // provider's subclass of \"CipherSpi\" implements \"algName\" with the\n     // specified \"padding\", with pluggable mode\n     <code>Cipher.</code><i>algName//padding</i>\n </pre>\n\n\n<p> <li></li></p>\n\n<pre>     // provider's subclass of \"CipherSpi\" implements \"algName\" with the\n     // specified \"mode\" and \"padding\"\n     <code>Cipher.</code><i>algName/mode/padding</i>\n </pre>\n\n\n<p> </p>\n\n<p> <p>For example, a provider may supply a subclass of <code>CipherSpi</code>\n that implements <i>DES/ECB/PKCS5Padding</i>, one that implements\n <i>DES/CBC/PKCS5Padding</i>, one that implements\n <i>DES/CFB/PKCS5Padding</i>, and yet another one that implements\n <i>DES/OFB/PKCS5Padding</i>. That provider would have the following\n <code>Cipher</code> properties in its master class:</p>\n\n<p> <ul></ul></p>\n\n<p> <li></li></p>\n\n<pre>     <code>Cipher.</code><i>DES/ECB/PKCS5Padding</i>\n </pre>\n\n\n<p> <li></li></p>\n\n<pre>     <code>Cipher.</code><i>DES/CBC/PKCS5Padding</i>\n </pre>\n\n\n<p> <li></li></p>\n\n<pre>     <code>Cipher.</code><i>DES/CFB/PKCS5Padding</i>\n </pre>\n\n\n<p> <li></li></p>\n\n<pre>     <code>Cipher.</code><i>DES/OFB/PKCS5Padding</i>\n </pre>\n\n\n<p> </p>\n\n<p> <p>Another provider may implement a class for each of the above modes\n (i.e., one class for <i>ECB</i>, one for <i>CBC</i>, one for <i>CFB</i>,\n and one for <i>OFB</i>), one class for <i>PKCS5Padding</i>,\n and a generic <i>DES</i> class that subclasses from <code>CipherSpi</code>.\n That provider would have the following\n <code>Cipher</code> properties in its master class:</p>\n\n<p> <ul></ul></p>\n\n<p> <li></li></p>\n\n<pre>     <code>Cipher.</code><i>DES</i>\n </pre>\n\n\n<p> </p>\n\n<p> <p>The <code>getInstance</code> factory method of the <code>Cipher</code>\n engine class follows these rules in order to instantiate a provider's\n implementation of <code>CipherSpi</code> for a\n transformation of the form \"<i>algorithm</i>\":</p>\n\n<p> <ol>\n <li>\n Check if the provider has registered a subclass of <code>CipherSpi</code>\n for the specified \"<i>algorithm</i>\".\n <p>If the answer is YES, instantiate this\n class, for whose mode and padding scheme default values (as supplied by\n the provider) are used.\n <p>If the answer is NO, throw a <code>NoSuchAlgorithmException</code>\n exception.\n </p></p></li></ol></p>\n\n<p> <p>The <code>getInstance</code> factory method of the <code>Cipher</code>\n engine class follows these rules in order to instantiate a provider's\n implementation of <code>CipherSpi</code> for a\n transformation of the form \"<i>algorithm/mode/padding</i>\":</p>\n\n<p> <ol>\n <li>\n Check if the provider has registered a subclass of <code>CipherSpi</code>\n for the specified \"<i>algorithm/mode/padding</i>\" transformation.\n <p>If the answer is YES, instantiate it.\n <p>If the answer is NO, go to the next step.\n <li>\n Check if the provider has registered a subclass of <code>CipherSpi</code>\n for the sub-transformation \"<i>algorithm/mode</i>\".\n <p>If the answer is YES, instantiate it, and call\n <code>engineSetPadding(<i>padding</i>)</code> on the new instance.\n <p>If the answer is NO, go to the next step.\n <li>\n Check if the provider has registered a subclass of <code>CipherSpi</code>\n for the sub-transformation \"<i>algorithm//padding</i>\" (note the double\n slashes).\n <p>If the answer is YES, instantiate it, and call\n <code>engineSetMode(<i>mode</i>)</code> on the new instance.\n <p>If the answer is NO, go to the next step.\n <li>\n Check if the provider has registered a subclass of <code>CipherSpi</code>\n for the sub-transformation \"<i>algorithm</i>\".\n <p>If the answer is YES, instantiate it, and call\n <code>engineSetMode(<i>mode</i>)</code> and\n <code>engineSetPadding(<i>padding</i>)</code> on the new instance.\n <p>If the answer is NO, throw a <code>NoSuchAlgorithmException</code>\n exception.\n </p></p></li></p></p></li></p></p></li></p></p></li></ol></p>\n\n<p> @see KeyGenerator\n @see SecretKey</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'></div></div>","meta":{}});