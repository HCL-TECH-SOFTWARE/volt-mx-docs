Ext.data.JsonP.javax_crypto_SealedObject({"tagname":"class","name":"javax.crypto.SealedObject","autodetected":{},"files":[{"filename":"SealedObject.js","href":"SealedObject.html#javax-crypto-SealedObject"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Li Gong","email":null},{"tagname":"author","name":"Jan Luehe","email":null}],"since":"1.4","members":[{"name":"getAlgorithm","tagname":"method","owner":"javax.crypto.SealedObject","id":"method-getAlgorithm","meta":{}},{"name":"getObject","tagname":"method","owner":"javax.crypto.SealedObject","id":"method-getObject","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-javax.crypto.SealedObject","short_doc":"implements java.io.Serializable\n\nThis class enables a programmer to create an object and protect its\n confidentiality...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>javax.crypto.SealedObject</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/SealedObject.html#javax-crypto-SealedObject' target='_blank'>SealedObject.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p>This class enables a programmer to create an object and protect its\n confidentiality with a cryptographic algorithm.</p>\n\n<p> <p> Given any Serializable object, one can create a SealedObject\n that encapsulates the original object, in serialized\n format (i.e., a \"deep copy\"), and seals (encrypts) its serialized contents,\n using a cryptographic algorithm such as DES, to protect its\n confidentiality.  The encrypted content can later be decrypted (with\n the corresponding algorithm using the correct decryption key) and\n de-serialized, yielding the original object.</p>\n\n<p> <p> Note that the Cipher object must be fully initialized with the\n correct algorithm, key, padding scheme, etc., before being applied\n to a SealedObject.</p>\n\n<p> <p> The original object that was sealed can be recovered in two different\n ways:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>by using the getObject\n method that takes a <code>Cipher</code> object.</li></p>\n\n<p> <p> This method requires a fully initialized <code>Cipher</code> object,\n initialized with the\n exact same algorithm, key, padding scheme, etc., that were used to seal the\n object.</p>\n\n<p> <p> This approach has the advantage that the party who unseals the\n sealed object does not require knowledge of the decryption key. For example,\n after one party has initialized the cipher object with the required\n decryption key, it could hand over the cipher object to\n another party who then unseals the sealed object.</p>\n\n<p> <li>by using one of the\n getObject methods\n that take a <code>Key</code> object.</li></p>\n\n<p> <p> In this approach, the <code>getObject</code> method creates a cipher\n object for the appropriate decryption algorithm and initializes it with the\n given decryption key and the algorithm parameters (if any) that were stored\n in the sealed object.</p>\n\n<p> <p> This approach has the advantage that the party who\n unseals the object does not need to keep track of the parameters (e.g., an\n IV) that were used to seal the object.</p>\n\n<p> </p>\n\n<p> @see Cipher</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getAlgorithm' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.SealedObject'>javax.crypto.SealedObject</span><br/><a href='source/SealedObject.html#javax-crypto-SealedObject-method-getAlgorithm' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.SealedObject-method-getAlgorithm' class='name expandable'>getAlgorithm</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the algorithm that was used to seal this object. ...</div><div class='long'><p>Returns the algorithm that was used to seal this object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the algorithm that was used to seal this object.</p>\n</div></li></ul></div></div></div><div id='method-getObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.SealedObject'>javax.crypto.SealedObject</span><br/><a href='source/SealedObject.html#javax-crypto-SealedObject-method-getObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.SealedObject-method-getObject' class='name expandable'>getObject</a>( <span class='pre'>key, provider</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the original (encapsulated) object. ...</div><div class='long'><p>Retrieves the original (encapsulated) object.</p>\n\n<p> <p>This method creates a cipher for the algorithm that had been used in\n the sealing operation, using an implementation of that algorithm from\n the given <code>provider</code>.\n The Cipher object is initialized for decryption, using the given\n <code>key</code> and the parameters (if any) that had been used in the\n sealing operation.</p>\n\n<p> <p>The encapsulated object is unsealed and de-serialized, before it is\n returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : Object {Key}<div class='sub-desc'><p>the key used to unseal the object.</p>\n</div></li><li><span class='pre'>provider</span> : String<div class='sub-desc'><p>the name of the provider of the algorithm to unseal\n the object.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the original object.\n@exception IllegalArgumentException if the given provider is null\n or empty.\n@exception IOException if an error occurs during de-serialiazation.\n@exception ClassNotFoundException if an error occurs during\n de-serialiazation.\n@exception NoSuchAlgorithmException if the algorithm to unseal the\n object is not available.\n@exception NoSuchProviderException if the given provider is not\n configured.\n@exception InvalidKeyException if the given key cannot be used to unseal\n the object (e.g., it has the wrong algorithm).\n@exception NullPointerException if <code>key</code> is null.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});