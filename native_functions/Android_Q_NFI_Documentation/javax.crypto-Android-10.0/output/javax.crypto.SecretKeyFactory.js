Ext.data.JsonP.javax_crypto_SecretKeyFactory({"tagname":"class","name":"javax.crypto.SecretKeyFactory","autodetected":{},"files":[{"filename":"SecretKeyFactory.js","href":"SecretKeyFactory.html#javax-crypto-SecretKeyFactory"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Jan Luehe","email":null}],"since":"1.4","members":[{"name":"generateSecret","tagname":"method","owner":"javax.crypto.SecretKeyFactory","id":"method-generateSecret","meta":{}},{"name":"getAlgorithm","tagname":"method","owner":"javax.crypto.SecretKeyFactory","id":"method-getAlgorithm","meta":{}},{"name":"getInstance","tagname":"method","owner":"javax.crypto.SecretKeyFactory","id":"method-getInstance","meta":{}},{"name":"getKeySpec","tagname":"method","owner":"javax.crypto.SecretKeyFactory","id":"method-getKeySpec","meta":{}},{"name":"getProvider","tagname":"method","owner":"javax.crypto.SecretKeyFactory","id":"method-getProvider","meta":{}},{"name":"translateKey","tagname":"method","owner":"javax.crypto.SecretKeyFactory","id":"method-translateKey","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-javax.crypto.SecretKeyFactory","short_doc":"This class represents a factory for secret keys. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>javax.crypto.SecretKeyFactory</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/SecretKeyFactory.html#javax-crypto-SecretKeyFactory' target='_blank'>SecretKeyFactory.js</a></div></pre><div class='doc-contents'><p>This class represents a factory for secret keys.</p>\n\n<p> <P> Key factories are used to convert <I>keys</I> (opaque\n cryptographic keys of type <code>Key</code>) into <I>key specifications</I>\n (transparent representations of the underlying key material), and vice\n versa.\n Secret key factories operate only on secret (symmetric) keys.</P></p>\n\n<p> <P> Key factories are bi-directional, i.e., they allow to build an opaque\n key object from a given key specification (key material), or to retrieve\n the underlying key material of a key object in a suitable format.</P></p>\n\n<p> <P> Application developers should refer to their provider's documentation\n to find out which key specifications are supported by the\n generateSecret and\n java.lang.Class) getKeySpec\n methods.\n For example, the DES secret-key factory supplied by the \"SunJCE\" provider\n supports <code>DESKeySpec</code> as a transparent representation of DES\n keys, and that provider's secret-key factory for Triple DES keys supports\n <code>DESedeKeySpec</code> as a transparent representation of Triple DES\n keys.</P></p>\n\n<p> <p> Android provides the following <code>SecretKeyFactory</code> algorithms:\n <table>\n   <thead>\n     <tr>\n       <th>Algorithm</th>\n       <th>Supported API Levels</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td>AES</td>\n       <td>23+</td>\n     </tr>\n     <tr>\n       <td>DES</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>DESede</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA1</td>\n       <td>23+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA224</td>\n       <td>23+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA256</td>\n       <td>23+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA384</td>\n       <td>23+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA512</td>\n       <td>23+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA1</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA1AndAES_128</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA1AndAES_256</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA224AndAES_128</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA224AndAES_256</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA256AndAES_128</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA256AndAES_256</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA384AndAES_128</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA384AndAES_256</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA512AndAES_128</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithHmacSHA512AndAES_256</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBEwithMD5AND128BITAES-CBC-OPENSSL</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithMD5AND192BITAES-CBC-OPENSSL</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithMD5AND256BITAES-CBC-OPENSSL</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithMD5ANDDES</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithMD5ANDRC2</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHA1ANDDES</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHA1ANDRC2</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHA256AND128BITAES-CBC-BC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHA256AND192BITAES-CBC-BC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHA256AND256BITAES-CBC-BC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND128BITAES-CBC-BC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND128BITRC2-CBC</td>\n       <td>10+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND128BITRC4</td>\n       <td>10+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND192BITAES-CBC-BC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND2-KEYTRIPLEDES-CBC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND256BITAES-CBC-BC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND3-KEYTRIPLEDES-CBC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND40BITRC2-CBC</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAAND40BITRC4</td>\n       <td>10+</td>\n     </tr>\n     <tr>\n       <td>PBEwithSHAANDTWOFISH-CBC</td>\n       <td>10+</td>\n     </tr>\n     <tr>\n       <td>PBKDF2withHmacSHA1</td>\n       <td>10+</td>\n     </tr>\n     <tr>\n       <td>PBKDF2withHmacSHA1And8BIT</td>\n       <td>19+</td>\n     </tr>\n     <tr>\n       <td>PBKDF2withHmacSHA224</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBKDF2withHmacSHA256</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBKDF2withHmacSHA384</td>\n       <td>26+</td>\n     </tr>\n     <tr>\n       <td>PBKDF2withHmacSHA512</td>\n       <td>26+</td>\n     </tr>\n   </tbody>\n </table></p>\n\n<p> These algorithms are described in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory\">\n SecretKeyFactory section</a> of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.</p>\n\n<p> @see SecretKey\n @see javax.crypto.spec.DESKeySpec\n @see javax.crypto.spec.DESedeKeySpec\n @see javax.crypto.spec.PBEKeySpec</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-generateSecret' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.SecretKeyFactory'>javax.crypto.SecretKeyFactory</span><br/><a href='source/SecretKeyFactory.html#javax-crypto-SecretKeyFactory-method-generateSecret' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.SecretKeyFactory-method-generateSecret' class='name expandable'>generateSecret</a>( <span class='pre'>keySpec</span> ) : Object {javax.crypto.SecretKey}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a SecretKey object from the provided key\n specification (key material). ...</div><div class='long'><p>Generates a <code>SecretKey</code> object from the provided key\n specification (key material).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keySpec</span> : Object {KeySpec}<div class='sub-desc'><p>the specification (key material) of the secret key</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.crypto.SecretKey}</span><div class='sub-desc'><p>the secret key\n@exception InvalidKeySpecException if the given key specification\n is inappropriate for this secret-key factory to produce a secret key.</p>\n</div></li></ul></div></div></div><div id='method-getAlgorithm' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.SecretKeyFactory'>javax.crypto.SecretKeyFactory</span><br/><a href='source/SecretKeyFactory.html#javax-crypto-SecretKeyFactory-method-getAlgorithm' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.SecretKeyFactory-method-getAlgorithm' class='name expandable'>getAlgorithm</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the algorithm name of this SecretKeyFactory object. ...</div><div class='long'><p>Returns the algorithm name of this <code>SecretKeyFactory</code> object.</p>\n\n<p> <p>This is the same name that was specified in one of the\n <code>getInstance</code> calls that created this\n <code>SecretKeyFactory</code> object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the algorithm name of this <code>SecretKeyFactory</code>\n object.</p>\n</div></li></ul></div></div></div><div id='method-getInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.SecretKeyFactory'>javax.crypto.SecretKeyFactory</span><br/><a href='source/SecretKeyFactory.html#javax-crypto-SecretKeyFactory-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.SecretKeyFactory-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'>algorithm, provider</span> ) : Object {javax.crypto.SecretKeyFactory}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a SecretKeyFactory object that converts\n secret keys of the specified algorithm. ...</div><div class='long'><p>Returns a <code>SecretKeyFactory</code> object that converts\n secret keys of the specified algorithm.</p>\n\n<p> <p> A new SecretKeyFactory object encapsulating the\n SecretKeyFactorySpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>algorithm</span> : String<div class='sub-desc'><p>the standard name of the requested secret-key\n algorithm.\n See the SecretKeyFactory section in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory\">\n Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n for information about standard algorithm names.</p>\n</div></li><li><span class='pre'>provider</span> : Object {Provider}<div class='sub-desc'><p>the provider.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.crypto.SecretKeyFactory}</span><div class='sub-desc'><p>the new <code>SecretKeyFactory</code> object.\n@exception NullPointerException if the specified algorithm\n is null.\n@exception NoSuchAlgorithmException if a SecretKeyFactorySpi\n          implementation for the specified algorithm is not available\n          from the specified Provider object.\n@exception IllegalArgumentException if the <code>provider</code>\n          is null.\n@see java.security.Provider</p>\n</div></li></ul></div></div></div><div id='method-getKeySpec' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.SecretKeyFactory'>javax.crypto.SecretKeyFactory</span><br/><a href='source/SecretKeyFactory.html#javax-crypto-SecretKeyFactory-method-getKeySpec' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.SecretKeyFactory-method-getKeySpec' class='name expandable'>getKeySpec</a>( <span class='pre'>key, keySpec</span> ) : Object {java.security.spec.KeySpec}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a specification (key material) of the given key object\n in the requested format. ...</div><div class='long'><p>Returns a specification (key material) of the given key object\n in the requested format.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : Object {SecretKey}<div class='sub-desc'><p>the key</p>\n</div></li><li><span class='pre'>keySpec</span> : Object {java.lang.Class}<div class='sub-desc'><p>the requested format in which the key material shall be\n returned</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.spec.KeySpec}</span><div class='sub-desc'><p>the underlying key specification (key material) in the\n requested format\n@exception InvalidKeySpecException if the requested key specification is\n inappropriate for the given key (e.g., the algorithms associated with\n <code>key</code> and <code>keySpec</code> do not match, or\n <code>key</code> references a key on a cryptographic hardware device\n whereas <code>keySpec</code> is the specification of a software-based\n key), or the given key cannot be dealt with\n (e.g., the given key has an algorithm or format not supported by this\n secret-key factory).</p>\n</div></li></ul></div></div></div><div id='method-getProvider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.SecretKeyFactory'>javax.crypto.SecretKeyFactory</span><br/><a href='source/SecretKeyFactory.html#javax-crypto-SecretKeyFactory-method-getProvider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.SecretKeyFactory-method-getProvider' class='name expandable'>getProvider</a>( <span class='pre'></span> ) : Object {java.security.Provider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the provider of this SecretKeyFactory object. ...</div><div class='long'><p>Returns the provider of this <code>SecretKeyFactory</code> object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.Provider}</span><div class='sub-desc'><p>the provider of this <code>SecretKeyFactory</code> object</p>\n</div></li></ul></div></div></div><div id='method-translateKey' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.SecretKeyFactory'>javax.crypto.SecretKeyFactory</span><br/><a href='source/SecretKeyFactory.html#javax-crypto-SecretKeyFactory-method-translateKey' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.SecretKeyFactory-method-translateKey' class='name expandable'>translateKey</a>( <span class='pre'>key</span> ) : Object {javax.crypto.SecretKey}<span class=\"signature\"></span></div><div class='description'><div class='short'>Translates a key object, whose provider may be unknown or potentially\n untrusted, into a corresponding key object of ...</div><div class='long'><p>Translates a key object, whose provider may be unknown or potentially\n untrusted, into a corresponding key object of this secret-key factory.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : Object {SecretKey}<div class='sub-desc'><p>the key whose provider is unknown or untrusted</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.crypto.SecretKey}</span><div class='sub-desc'><p>the translated key\n@exception InvalidKeyException if the given key cannot be processed\n by this secret-key factory.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});