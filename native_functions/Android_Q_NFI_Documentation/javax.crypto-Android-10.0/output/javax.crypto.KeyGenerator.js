Ext.data.JsonP.javax_crypto_KeyGenerator({"tagname":"class","name":"javax.crypto.KeyGenerator","autodetected":{},"files":[{"filename":"KeyGenerator.js","href":"KeyGenerator.html#javax-crypto-KeyGenerator"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Jan Luehe","email":null}],"since":"1.4","members":[{"name":"generateKey","tagname":"method","owner":"javax.crypto.KeyGenerator","id":"method-generateKey","meta":{}},{"name":"getAlgorithm","tagname":"method","owner":"javax.crypto.KeyGenerator","id":"method-getAlgorithm","meta":{}},{"name":"getInstance","tagname":"method","owner":"javax.crypto.KeyGenerator","id":"method-getInstance","meta":{}},{"name":"getProvider","tagname":"method","owner":"javax.crypto.KeyGenerator","id":"method-getProvider","meta":{}},{"name":"init","tagname":"method","owner":"javax.crypto.KeyGenerator","id":"method-init","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-javax.crypto.KeyGenerator","short_doc":"This class provides the functionality of a secret (symmetric) key generator. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>javax.crypto.KeyGenerator</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/KeyGenerator.html#javax-crypto-KeyGenerator' target='_blank'>KeyGenerator.js</a></div></pre><div class='doc-contents'><p>This class provides the functionality of a secret (symmetric) key generator.</p>\n\n<p> <p>Key generators are constructed using one of the <code>getInstance</code>\n class methods of this class.</p>\n\n<p> <p>KeyGenerator objects are reusable, i.e., after a key has been\n generated, the same KeyGenerator object can be re-used to generate further\n keys.</p>\n\n<p> <p>There are two ways to generate a key: in an algorithm-independent\n manner, and in an algorithm-specific manner.\n The only difference between the two is the initialization of the object:</p>\n\n<p> <ul>\n <li><b>Algorithm-Independent Initialization</b>\n <p>All key generators share the concepts of a <i>keysize</i> and a\n <i>source of randomness</i>.\n There is an\n java.security.SecureRandom) init\n method in this KeyGenerator class that takes these two universally\n shared types of arguments. There is also one that takes just a\n <code>keysize</code> argument, and uses the SecureRandom implementation\n of the highest-priority installed provider as the source of randomness\n (or a system-provided source of randomness if none of the installed\n providers supply a SecureRandom implementation), and one that takes just a\n source of randomness.</p>\n\n<p> <p>Since no other parameters are specified when you call the above\n algorithm-independent <code>init</code> methods, it is up to the\n provider what to do about the algorithm-specific parameters (if any) to be\n associated with each of the keys.</p>\n\n<p> <li><b>Algorithm-Specific Initialization</b>\n <p>For situations where a set of algorithm-specific parameters already\n exists, there are two\n init\n methods that have an <code>AlgorithmParameterSpec</code>\n argument. One also has a <code>SecureRandom</code> argument, while the\n other uses the SecureRandom implementation\n of the highest-priority installed provider as the source of randomness\n (or a system-provided source of randomness if none of the installed\n providers supply a SecureRandom implementation).\n </p></li></p></p></li></ul></p>\n\n<p> <p>In case the client does not explicitly initialize the KeyGenerator\n (via a call to an <code>init</code> method), each provider must\n supply (and document) a default initialization.</p>\n\n<p> <p> Android provides the following <code>KeyGenerator</code> algorithms:\n <table>\n   <thead>\n     <tr>\n       <th>Algorithm</th>\n       <th>Supported API Levels</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td>AES</td>\n       <td>1+</td>\n     </tr>\n     <tr class=\"deprecated\">\n       <td>AESWRAP</td>\n       <td>1-8</td>\n     </tr>\n     <tr>\n       <td>ARC4</td>\n       <td>14+</td>\n     </tr>\n     <tr>\n       <td>BLOWFISH</td>\n       <td>10+</td>\n     </tr>\n     <tr>\n       <td>ChaCha20</td>\n       <td>28+</td>\n     </tr>\n     <tr>\n       <td>DES</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>DESede</td>\n       <td>1+</td>\n     </tr>\n     <tr class=\"deprecated\">\n       <td>DESedeWRAP</td>\n       <td>1-8</td>\n     </tr>\n     <tr>\n       <td>HmacMD5</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA1</td>\n       <td>11+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA224</td>\n       <td>1-8,22+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA256</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA384</td>\n       <td>1+</td>\n     </tr>\n     <tr>\n       <td>HmacSHA512</td>\n       <td>1+</td>\n     </tr>\n     <tr class=\"deprecated\">\n       <td>RC4</td>\n       <td>10-13</td>\n     </tr>\n   </tbody>\n </table></p>\n\n<p> These algorithms are described in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyGenerator\">\n KeyGenerator section</a> of the\n Java Cryptography Architecture Standard Algorithm Name Documentation.</p>\n\n<p> @see SecretKey</p>\n        <p>Available since: <b>1.4</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-generateKey' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.KeyGenerator'>javax.crypto.KeyGenerator</span><br/><a href='source/KeyGenerator.html#javax-crypto-KeyGenerator-method-generateKey' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.KeyGenerator-method-generateKey' class='name expandable'>generateKey</a>( <span class='pre'></span> ) : Object {javax.crypto.SecretKey}<span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a secret key. ...</div><div class='long'><p>Generates a secret key.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.crypto.SecretKey}</span><div class='sub-desc'><p>the new key</p>\n</div></li></ul></div></div></div><div id='method-getAlgorithm' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.KeyGenerator'>javax.crypto.KeyGenerator</span><br/><a href='source/KeyGenerator.html#javax-crypto-KeyGenerator-method-getAlgorithm' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.KeyGenerator-method-getAlgorithm' class='name expandable'>getAlgorithm</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the algorithm name of this KeyGenerator object. ...</div><div class='long'><p>Returns the algorithm name of this <code>KeyGenerator</code> object.</p>\n\n<p> <p>This is the same name that was specified in one of the\n <code>getInstance</code> calls that created this\n <code>KeyGenerator</code> object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the algorithm name of this <code>KeyGenerator</code> object.</p>\n</div></li></ul></div></div></div><div id='method-getInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.KeyGenerator'>javax.crypto.KeyGenerator</span><br/><a href='source/KeyGenerator.html#javax-crypto-KeyGenerator-method-getInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.KeyGenerator-method-getInstance' class='name expandable'>getInstance</a>( <span class='pre'>algorithm, provider</span> ) : Object {javax.crypto.KeyGenerator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a KeyGenerator object that generates secret keys\n for the specified algorithm. ...</div><div class='long'><p>Returns a <code>KeyGenerator</code> object that generates secret keys\n for the specified algorithm.</p>\n\n<p> <p> A new KeyGenerator object encapsulating the\n KeyGeneratorSpi implementation from the specified Provider\n object is returned.  Note that the specified Provider object\n does not have to be registered in the provider list.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>algorithm</span> : String<div class='sub-desc'><p>the standard name of the requested key algorithm.\n See the KeyGenerator section in the <a href=\n \"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyGenerator\">\n Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n for information about standard algorithm names.</p>\n</div></li><li><span class='pre'>provider</span> : Object {Provider}<div class='sub-desc'><p>the provider.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.crypto.KeyGenerator}</span><div class='sub-desc'><p>the new <code>KeyGenerator</code> object.\n@exception NullPointerException if the specified algorithm is null.\n@exception NoSuchAlgorithmException if a KeyGeneratorSpi\n          implementation for the specified algorithm is not available\n          from the specified Provider object.\n@exception IllegalArgumentException if the <code>provider</code>\n          is null.\n@see java.security.Provider</p>\n</div></li></ul></div></div></div><div id='method-getProvider' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.KeyGenerator'>javax.crypto.KeyGenerator</span><br/><a href='source/KeyGenerator.html#javax-crypto-KeyGenerator-method-getProvider' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.KeyGenerator-method-getProvider' class='name expandable'>getProvider</a>( <span class='pre'></span> ) : Object {java.security.Provider}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the provider of this KeyGenerator object. ...</div><div class='long'><p>Returns the provider of this <code>KeyGenerator</code> object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.security.Provider}</span><div class='sub-desc'><p>the provider of this <code>KeyGenerator</code> object</p>\n</div></li></ul></div></div></div><div id='method-init' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.crypto.KeyGenerator'>javax.crypto.KeyGenerator</span><br/><a href='source/KeyGenerator.html#javax-crypto-KeyGenerator-method-init' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.crypto.KeyGenerator-method-init' class='name expandable'>init</a>( <span class='pre'>keysize, random</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initializes this key generator for a certain keysize, using a\n user-provided source of randomness. ...</div><div class='long'><p>Initializes this key generator for a certain keysize, using a\n user-provided source of randomness.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keysize</span> : Number<div class='sub-desc'><p>the keysize. This is an algorithm-specific metric,\n specified in number of bits.</p>\n</div></li><li><span class='pre'>random</span> : Object {SecureRandom}<div class='sub-desc'><p>the source of randomness for this key generator\n@exception InvalidParameterException if the keysize is wrong or not\n supported.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});