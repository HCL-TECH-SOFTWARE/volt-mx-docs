Ext.data.JsonP.com_android_internal_widget_helper_ItemTouchHelper_SimpleCallback({"tagname":"class","name":"com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback","autodetected":{},"files":[{"filename":"SimpleCallback.js","href":"SimpleCallback.html#com-android-internal-widget-helper-ItemTouchHelper-SimpleCallback"}],"extends":"com.android.internal.widget.helper.ItemTouchHelper.Callback","members":[{"name":"DEFAULT_DRAG_ANIMATION_DURATION","tagname":"property","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"property-DEFAULT_DRAG_ANIMATION_DURATION","meta":{}},{"name":"DEFAULT_SWIPE_ANIMATION_DURATION","tagname":"property","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"property-DEFAULT_SWIPE_ANIMATION_DURATION","meta":{}},{"name":"canDropOver","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-canDropOver","meta":{}},{"name":"chooseDropTarget","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-chooseDropTarget","meta":{}},{"name":"clearView","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-clearView","meta":{}},{"name":"convertToAbsoluteDirection","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-convertToAbsoluteDirection","meta":{}},{"name":"convertToRelativeDirection","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-convertToRelativeDirection","meta":{}},{"name":"getAnimationDuration","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-getAnimationDuration","meta":{}},{"name":"getBoundingBoxMargin","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-getBoundingBoxMargin","meta":{}},{"name":"getDefaultUIUtil","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-getDefaultUIUtil","meta":{}},{"name":"getDragDirs","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback","id":"method-getDragDirs","meta":{}},{"name":"getMoveThreshold","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-getMoveThreshold","meta":{}},{"name":"getMovementFlags","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback","id":"method-getMovementFlags","meta":{}},{"name":"getSwipeDirs","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback","id":"method-getSwipeDirs","meta":{}},{"name":"getSwipeEscapeVelocity","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-getSwipeEscapeVelocity","meta":{}},{"name":"getSwipeThreshold","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-getSwipeThreshold","meta":{}},{"name":"getSwipeVelocityThreshold","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-getSwipeVelocityThreshold","meta":{}},{"name":"interpolateOutOfBoundsScroll","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-interpolateOutOfBoundsScroll","meta":{}},{"name":"isItemViewSwipeEnabled","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-isItemViewSwipeEnabled","meta":{}},{"name":"isLongPressDragEnabled","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-isLongPressDragEnabled","meta":{}},{"name":"makeFlag","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-makeFlag","meta":{}},{"name":"makeMovementFlags","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-makeMovementFlags","meta":{}},{"name":"onChildDraw","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-onChildDraw","meta":{}},{"name":"onChildDrawOver","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-onChildDrawOver","meta":{}},{"name":"onMove","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-onMove","meta":{}},{"name":"onMoved","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-onMoved","meta":{}},{"name":"onSelectedChanged","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-onSelectedChanged","meta":{}},{"name":"onSwiped","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.Callback","id":"method-onSwiped","meta":{}},{"name":"setDefaultDragDirs","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback","id":"method-setDefaultDragDirs","meta":{}},{"name":"setDefaultSwipeDirs","tagname":"method","owner":"com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback","id":"method-setDefaultSwipeDirs","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback","short_doc":"A simple wrapper to the default Callback which you can construct with drag and swipe\n directions and this class will ...","classIcon":"icon-class","superclasses":["java.lang.Object","com.android.internal.widget.helper.ItemTouchHelper.Callback"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><div class='subclass '><strong>com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/SimpleCallback.html#com-android-internal-widget-helper-ItemTouchHelper-SimpleCallback' target='_blank'>SimpleCallback.js</a></div></pre><div class='doc-contents'><p>A simple wrapper to the default Callback which you can construct with drag and swipe\n directions and this class will handle the flag callbacks. You should still override onMove\n or\n onSwiped depending on your use case.</p>\n\n<pre> ItemTouchHelper mIth = new ItemTouchHelper(\n     new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN,\n         ItemTouchHelper.LEFT) {\n         public abstract boolean onMove(RecyclerView recyclerView,\n             ViewHolder viewHolder, ViewHolder target) {\n             final int fromPos = viewHolder.getAdapterPosition();\n             final int toPos = target.getAdapterPosition();\n             // move item in `fromPos` to `toPos` in adapter.\n             return true;// true if moved, false otherwise\n         }\n         public void onSwiped(ViewHolder viewHolder, int direction) {\n             // remove from adapter\n         }\n });\n </pre>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DEFAULT_DRAG_ANIMATION_DURATION' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-property-DEFAULT_DRAG_ANIMATION_DURATION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-property-DEFAULT_DRAG_ANIMATION_DURATION' class='name expandable'>DEFAULT_DRAG_ANIMATION_DURATION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;200&quot;</code></p></div></div></div><div id='property-DEFAULT_SWIPE_ANIMATION_DURATION' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-property-DEFAULT_SWIPE_ANIMATION_DURATION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-property-DEFAULT_SWIPE_ANIMATION_DURATION' class='name expandable'>DEFAULT_SWIPE_ANIMATION_DURATION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;250&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-canDropOver' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-canDropOver' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-canDropOver' class='name expandable'>canDropOver</a>( <span class='pre'>recyclerView, current, target</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return true if the current ViewHolder can be dropped over the the target ViewHolder. ...</div><div class='long'><p>Return true if the current ViewHolder can be dropped over the the target ViewHolder.\n <p>\n This method is used when selecting drop target for the dragged View. After Views are\n eliminated either via bounds check or via this method, resulting set of views will be\n passed to java.util.List, int, int).\n <p>\n Default implementation returns true.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView to which ItemTouchHelper is attached to.</p>\n</div></li><li><span class='pre'>current</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder that user is dragging.</p>\n</div></li><li><span class='pre'>target</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which is below the dragged ViewHolder.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the dragged ViewHolder can be replaced with the target ViewHolder, false\n otherwise.</p>\n</div></li></ul></div></div></div><div id='method-chooseDropTarget' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-chooseDropTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-chooseDropTarget' class='name expandable'>chooseDropTarget</a>( <span class='pre'>selected, dropTargets, curX, curY</span> ) : Object {com.android.internal.widget.RecyclerView.ViewHolder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by ItemTouchHelper to select a drop target from the list of ViewHolders that\n are under the dragged View. ...</div><div class='long'><p>Called by ItemTouchHelper to select a drop target from the list of ViewHolders that\n are under the dragged View.\n <p>\n Default implementation filters the View with which dragged item have changed position\n in the drag direction. For instance, if the view is dragged UP, it compares the\n <code>view.getTop()</code> of the two views before and after drag started. If that value\n is different, the target view passes the filter.\n <p>\n Among these Views which pass the test, the one closest to the dragged view is chosen.\n <p>\n This method is called on the main thread every time user moves the View. If you want to\n override it, make sure it does not do any expensive operations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>selected</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder being dragged by the user.</p>\n</div></li><li><span class='pre'>dropTargets</span> : Object {java.util.List}<div class='sub-desc'><p>The list of ViewHolder that are under the dragged View and\n                    candidate as a drop.</p>\n</div></li><li><span class='pre'>curX</span> : Number<div class='sub-desc'><p>The updated left value of the dragged View after drag translations\n                    are applied. This value does not include margins added by\n                    RecyclerView.ItemDecorations.</p>\n</div></li><li><span class='pre'>curY</span> : Number<div class='sub-desc'><p>The updated top value of the dragged View after drag translations\n                    are applied. This value does not include margins added by\n                    RecyclerView.ItemDecorations.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ViewHolder}</span><div class='sub-desc'><p>A ViewHolder to whose position the dragged ViewHolder should be\n moved to.</p>\n</div></li></ul></div></div></div><div id='method-clearView' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-clearView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-clearView' class='name expandable'>clearView</a>( <span class='pre'>recyclerView, viewHolder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the ItemTouchHelper when the user interaction with an element is over and it\n also completed its animation. ...</div><div class='long'><p>Called by the ItemTouchHelper when the user interaction with an element is over and it\n also completed its animation.\n <p>\n This is a good place to clear all changes on the View that was done in\n int),\n RecyclerView, ViewHolder, float, float, int,\n boolean) or\n RecyclerView, ViewHolder, float, float, int, boolean).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView which is controlled by the ItemTouchHelper.</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The View that was interacted by the user.</p>\n</div></li></ul></div></div></div><div id='method-convertToAbsoluteDirection' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-convertToAbsoluteDirection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-convertToAbsoluteDirection' class='name expandable'>convertToAbsoluteDirection</a>( <span class='pre'>flags, layoutDirection</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts a given set of flags to absolution direction which means START and\n END are replaced with LEFT and RIGHT dep...</div><div class='long'><p>Converts a given set of flags to absolution direction which means START and\n END are replaced with LEFT and RIGHT depending on the layout\n direction.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>The flag value that include any number of movement flags.</p>\n</div></li><li><span class='pre'>layoutDirection</span> : Number<div class='sub-desc'><p>The layout direction of the RecyclerView.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Updated flags which includes only absolute direction values.</p>\n</div></li></ul></div></div></div><div id='method-convertToRelativeDirection' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-convertToRelativeDirection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-convertToRelativeDirection' class='name expandable'>convertToRelativeDirection</a>( <span class='pre'>flags, layoutDirection</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Replaces a movement direction with its relative version by taking layout direction into\n account. ...</div><div class='long'><p>Replaces a movement direction with its relative version by taking layout direction into\n account.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>The flag value that include any number of movement flags.</p>\n</div></li><li><span class='pre'>layoutDirection</span> : Number<div class='sub-desc'><p>The layout direction of the View. Can be obtained from\n                        View.getLayoutDirection().</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Updated flags which uses relative flags (START, END) instead\n of LEFT, RIGHT.\n@see <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-convertToAbsoluteDirection\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-convertToAbsoluteDirection\" class=\"docClass\">convertToAbsoluteDirection</a>(int, int)</p>\n</div></li></ul></div></div></div><div id='method-getAnimationDuration' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-getAnimationDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getAnimationDuration' class='name expandable'>getAnimationDuration</a>( <span class='pre'>recyclerView, animationType, animateDx, animateDy</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the ItemTouchHelper when user action finished on a ViewHolder and now the View\n will be animated to its fin...</div><div class='long'><p>Called by the ItemTouchHelper when user action finished on a ViewHolder and now the View\n will be animated to its final position.\n <p>\n Default implementation uses ItemAnimator's duration values. If\n <code>animationType</code> is ANIMATION_TYPE_DRAG, it returns\n RecyclerView.ItemAnimator.getMoveDuration(), otherwise, it returns\n RecyclerView.ItemAnimator.getRemoveDuration(). If RecyclerView does not have\n any RecyclerView.ItemAnimator attached, this method returns\n {@code DEFAULT_DRAG_ANIMATION_DURATION} or {@code DEFAULT_SWIPE_ANIMATION_DURATION}\n depending on the animation type.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView to which the ItemTouchHelper is attached to.</p>\n</div></li><li><span class='pre'>animationType</span> : Number<div class='sub-desc'><p>The type of animation. Is one of ANIMATION_TYPE_DRAG,\n                      ANIMATION_TYPE_SWIPE_CANCEL or\n                      ANIMATION_TYPE_SWIPE_SUCCESS.</p>\n</div></li><li><span class='pre'>animateDx</span> : Number<div class='sub-desc'><p>The horizontal distance that the animation will offset</p>\n</div></li><li><span class='pre'>animateDy</span> : Number<div class='sub-desc'><p>The vertical distance that the animation will offset</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The duration for the animation</p>\n</div></li></ul></div></div></div><div id='method-getBoundingBoxMargin' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-getBoundingBoxMargin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getBoundingBoxMargin' class='name expandable'>getBoundingBoxMargin</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>When finding views under a dragged view, by default, ItemTouchHelper searches for views\n that overlap with the dragge...</div><div class='long'><p>When finding views under a dragged view, by default, ItemTouchHelper searches for views\n that overlap with the dragged View. By overriding this method, you can extend or shrink\n the search box.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The extra margin to be added to the hit box of the dragged View.</p>\n</div></li></ul></div></div></div><div id='method-getDefaultUIUtil' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-getDefaultUIUtil' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getDefaultUIUtil' class='name expandable'>getDefaultUIUtil</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.helper.ItemTouchUIUtil}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the com.android.internal.widget.helper.ItemTouchUIUtil that is used by the com.android.internal.widget.helper...</div><div class='long'><p>Returns the <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchUIUtil\" rel=\"com.android.internal.widget.helper.ItemTouchUIUtil\" class=\"docClass\">com.android.internal.widget.helper.ItemTouchUIUtil</a> that is used by the <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback\" class=\"docClass\">com.android.internal.widget.helper.ItemTouchHelper.Callback</a> class for\n visual\n changes on Views in response to user interactions. <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchUIUtil\" rel=\"com.android.internal.widget.helper.ItemTouchUIUtil\" class=\"docClass\">com.android.internal.widget.helper.ItemTouchUIUtil</a> has different\n implementations for different platform versions.\n <p>\n By default, <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback\" class=\"docClass\">com.android.internal.widget.helper.ItemTouchHelper.Callback</a> applies these changes on\n RecyclerView.ViewHolder.itemView.\n <p>\n For example, if you have a use case where you only want the text to move when user\n swipes over the view, you can do the following:</p>\n\n<pre>     public void clearView(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder){\n         getDefaultUIUtil().clearView(((ItemTouchViewHolder) viewHolder).textView);\n     }\n     public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {\n         if (viewHolder != null){\n             getDefaultUIUtil().onSelected(((ItemTouchViewHolder) viewHolder).textView);\n         }\n     }\n     public void onChildDraw(Canvas c, RecyclerView recyclerView,\n             RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState,\n             boolean isCurrentlyActive) {\n         getDefaultUIUtil().onDraw(c, recyclerView,\n                 ((ItemTouchViewHolder) viewHolder).textView, dX, dY,\n                 actionState, isCurrentlyActive);\n         return true;\n     }\n     public void onChildDrawOver(Canvas c, RecyclerView recyclerView,\n             RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState,\n             boolean isCurrentlyActive) {\n         getDefaultUIUtil().onDrawOver(c, recyclerView,\n                 ((ItemTouchViewHolder) viewHolder).textView, dX, dY,\n                 actionState, isCurrentlyActive);\n         return true;\n     }\n </pre>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.helper.ItemTouchUIUtil}</span><div class='sub-desc'><p>The ItemTouchUIUtil instance that is used by the Callback</p>\n</div></li></ul></div></div></div><div id='method-getDragDirs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback'>com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback</span><br/><a href='source/SimpleCallback.html#com-android-internal-widget-helper-ItemTouchHelper-SimpleCallback-method-getDragDirs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-getDragDirs' class='name expandable'>getDragDirs</a>( <span class='pre'>recyclerView, viewHolder</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the drag directions for the provided ViewHolder. ...</div><div class='long'><p>Returns the drag directions for the provided ViewHolder.\n Default implementation returns the drag directions that was set via constructor or\n <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-setDefaultDragDirs\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-setDefaultDragDirs\" class=\"docClass\">setDefaultDragDirs</a>(int).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView to which the ItemTouchHelper is attached to.</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The RecyclerView for which the swipe direction is queried.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>A binary OR of direction flags.</p>\n</div></li></ul></div></div></div><div id='method-getMoveThreshold' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-getMoveThreshold' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getMoveThreshold' class='name expandable'>getMoveThreshold</a>( <span class='pre'>viewHolder</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the fraction that the user should move the View to be considered as it is\n dragged. ...</div><div class='long'><p>Returns the fraction that the user should move the View to be considered as it is\n dragged. After a view is moved this amount, ItemTouchHelper starts checking for Views\n below it for a possible drop.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder that is being dragged.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>A float value that denotes the fraction of the View size. Default value is\n .5f .</p>\n</div></li></ul></div></div></div><div id='method-getMovementFlags' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback'>com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback</span><br/><a href='source/SimpleCallback.html#com-android-internal-widget-helper-ItemTouchHelper-SimpleCallback-method-getMovementFlags' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-getMovementFlags' class='name expandable'>getMovementFlags</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getMovementFlags\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getMovementFlags\" class=\"docClass\">com.android.internal.widget.helper.ItemTouchHelper.Callback.getMovementFlags</a></p></div></div></div><div id='method-getSwipeDirs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback'>com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback</span><br/><a href='source/SimpleCallback.html#com-android-internal-widget-helper-ItemTouchHelper-SimpleCallback-method-getSwipeDirs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-getSwipeDirs' class='name expandable'>getSwipeDirs</a>( <span class='pre'>recyclerView, viewHolder</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the swipe directions for the provided ViewHolder. ...</div><div class='long'><p>Returns the swipe directions for the provided ViewHolder.\n Default implementation returns the swipe directions that was set via constructor or\n <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-setDefaultSwipeDirs\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-setDefaultSwipeDirs\" class=\"docClass\">setDefaultSwipeDirs</a>(int).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView to which the ItemTouchHelper is attached to.</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The RecyclerView for which the swipe direction is queried.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>A binary OR of direction flags.</p>\n</div></li></ul></div></div></div><div id='method-getSwipeEscapeVelocity' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-getSwipeEscapeVelocity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeEscapeVelocity' class='name expandable'>getSwipeEscapeVelocity</a>( <span class='pre'>defaultValue</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines the minimum velocity which will be considered as a swipe action by the user. ...</div><div class='long'><p>Defines the minimum velocity which will be considered as a swipe action by the user.\n <p>\n You can increase this value to make it harder to swipe or decrease it to make it easier.\n Keep in mind that ItemTouchHelper also checks the perpendicular velocity and makes sure\n current direction velocity is larger then the perpendicular one. Otherwise, user's\n movement is ambiguous. You can change the threshold by overriding\n <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeVelocityThreshold\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeVelocityThreshold\" class=\"docClass\">getSwipeVelocityThreshold</a>(float).\n <p>\n The velocity is calculated in pixels per second.\n <p>\n The default framework value is passed as a parameter so that you can modify it with a\n multiplier.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>defaultValue</span> : Number<div class='sub-desc'><p>The default value (in pixels per second) used by the\n                     ItemTouchHelper.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The minimum swipe velocity. The default implementation returns the\n <code>defaultValue</code> parameter.\n@see <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeVelocityThreshold\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeVelocityThreshold\" class=\"docClass\">getSwipeVelocityThreshold</a>(float)\n@see <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeThreshold\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeThreshold\" class=\"docClass\">getSwipeThreshold</a>(ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-getSwipeThreshold' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-getSwipeThreshold' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeThreshold' class='name expandable'>getSwipeThreshold</a>( <span class='pre'>viewHolder</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the fraction that the user should move the View to be considered as swiped. ...</div><div class='long'><p>Returns the fraction that the user should move the View to be considered as swiped.\n The fraction is calculated with respect to RecyclerView's bounds.\n <p>\n Default value is .5f, which means, to swipe a View, user must move the View at least\n half of RecyclerView's width or height, depending on the swipe direction.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder that is being dragged.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>A float value that denotes the fraction of the View size. Default value\n is .5f .</p>\n</div></li></ul></div></div></div><div id='method-getSwipeVelocityThreshold' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-getSwipeVelocityThreshold' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeVelocityThreshold' class='name expandable'>getSwipeVelocityThreshold</a>( <span class='pre'>defaultValue</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines the maximum velocity ItemTouchHelper will ever calculate for pointer movements. ...</div><div class='long'><p>Defines the maximum velocity ItemTouchHelper will ever calculate for pointer movements.\n <p>\n To consider a movement as swipe, ItemTouchHelper requires it to be larger than the\n perpendicular movement. If both directions reach to the max threshold, none of them will\n be considered as a swipe because it is usually an indication that user rather tried to\n scroll then swipe.\n <p>\n The velocity is calculated in pixels per second.\n <p>\n You can customize this behavior by changing this method. If you increase the value, it\n will be easier for the user to swipe diagonally and if you decrease the value, user will\n need to make a rather straight finger movement to trigger a swipe.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>defaultValue</span> : Number<div class='sub-desc'><p>The default value(in pixels per second) used by the ItemTouchHelper.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The velocity cap for pointer movements. The default implementation returns the\n <code>defaultValue</code> parameter.\n@see <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeEscapeVelocity\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-getSwipeEscapeVelocity\" class=\"docClass\">getSwipeEscapeVelocity</a>(float)</p>\n</div></li></ul></div></div></div><div id='method-interpolateOutOfBoundsScroll' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-interpolateOutOfBoundsScroll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-interpolateOutOfBoundsScroll' class='name expandable'>interpolateOutOfBoundsScroll</a>( <span class='pre'>recyclerView, viewSize, viewSizeOutOfBounds, totalSize, msSinceStartScroll</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the ItemTouchHelper when user is dragging a view out of bounds. ...</div><div class='long'><p>Called by the ItemTouchHelper when user is dragging a view out of bounds.\n <p>\n You can override this method to decide how much RecyclerView should scroll in response\n to this action. Default implementation calculates a value based on the amount of View\n out of bounds and the time it spent there. The longer user keeps the View out of bounds,\n the faster the list will scroll. Similarly, the larger portion of the View is out of\n bounds, the faster the RecyclerView will scroll.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView instance to which ItemTouchHelper is\n                            attached to.</p>\n</div></li><li><span class='pre'>viewSize</span> : Number<div class='sub-desc'><p>The total size of the View in scroll direction, excluding\n                            item decorations.</p>\n</div></li><li><span class='pre'>viewSizeOutOfBounds</span> : Number<div class='sub-desc'><p>The total size of the View that is out of bounds. This value\n                            is negative if the View is dragged towards left or top edge.</p>\n</div></li><li><span class='pre'>totalSize</span> : Number<div class='sub-desc'><p>The total size of RecyclerView in the scroll direction.</p>\n</div></li><li><span class='pre'>msSinceStartScroll</span> : Number<div class='sub-desc'><p>The time passed since View is kept out of bounds.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The amount that RecyclerView should scroll. Keep in mind that this value will\n be passed to int) method.</p>\n</div></li></ul></div></div></div><div id='method-isItemViewSwipeEnabled' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-isItemViewSwipeEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-isItemViewSwipeEnabled' class='name expandable'>isItemViewSwipeEnabled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether ItemTouchHelper should start a swipe operation if a pointer is swiped\n over the View. ...</div><div class='long'><p>Returns whether ItemTouchHelper should start a swipe operation if a pointer is swiped\n over the View.\n <p>\n Default value returns true but you may want to disable this if you want to start\n swiping on a custom view touch using startSwipe(ViewHolder).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if ItemTouchHelper should start swiping an item when user swipes a pointer\n over the View, false otherwise. Default value is <code>true</code>.\n@see #startSwipe(ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-isLongPressDragEnabled' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-isLongPressDragEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-isLongPressDragEnabled' class='name expandable'>isLongPressDragEnabled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether ItemTouchHelper should start a drag and drop operation if an item is\n long pressed. ...</div><div class='long'><p>Returns whether ItemTouchHelper should start a drag and drop operation if an item is\n long pressed.\n <p>\n Default value returns true but you may want to disable this if you want to start\n dragging on a custom view touch using startDrag(ViewHolder).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if ItemTouchHelper should start dragging an item when it is long pressed,\n false otherwise. Default value is <code>true</code>.\n@see #startDrag(ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-makeFlag' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-makeFlag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-makeFlag' class='name expandable'>makeFlag</a>( <span class='pre'>actionState, directions</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Shifts the given direction flags to the offset of the given action state. ...</div><div class='long'><p>Shifts the given direction flags to the offset of the given action state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>actionState</span> : Number<div class='sub-desc'><p>The action state you want to get flags in. Should be one of\n                    ACTION_STATE_IDLE, ACTION_STATE_SWIPE or\n                    ACTION_STATE_DRAG.</p>\n</div></li><li><span class='pre'>directions</span> : Number<div class='sub-desc'><p>The direction flags. Can be composed from UP, DOWN,\n                    RIGHT, LEFT START and END.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>And integer that represents the given directions in the provided actionState.</p>\n</div></li></ul></div></div></div><div id='method-makeMovementFlags' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-makeMovementFlags' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-makeMovementFlags' class='name expandable'>makeMovementFlags</a>( <span class='pre'>dragFlags, swipeFlags</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method to create movement flags. ...</div><div class='long'><p>Convenience method to create movement flags.\n <p>\n For instance, if you want to let your items be drag &amp; dropped vertically and swiped\n left to be dismissed, you can call this method with:\n <code>makeMovementFlags(UP | DOWN, LEFT);</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dragFlags</span> : Number<div class='sub-desc'><p>The directions in which the item can be dragged.</p>\n</div></li><li><span class='pre'>swipeFlags</span> : Number<div class='sub-desc'><p>The directions in which the item can be swiped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns an integer composed of the given drag and swipe flags.</p>\n</div></li></ul></div></div></div><div id='method-onChildDraw' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-onChildDraw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onChildDraw' class='name expandable'>onChildDraw</a>( <span class='pre'>c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by ItemTouchHelper on RecyclerView's onDraw callback. ...</div><div class='long'><p>Called by ItemTouchHelper on RecyclerView's onDraw callback.\n <p>\n If you would like to customize how your View's respond to user interactions, this is\n a good place to override.\n <p>\n Default implementation translates the child by the given <code>dX</code>,\n <code>dY</code>.\n ItemTouchHelper also takes care of drawing the child after other children if it is being\n dragged. This is done using child re-ordering mechanism. On platforms prior to L, this\n is\n achieved via int) and on L\n and after, it changes View's elevation value to be greater than all other children.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : Object {Canvas}<div class='sub-desc'><p>The canvas which RecyclerView is drawing its children</p>\n</div></li><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView to which ItemTouchHelper is attached to</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which is being interacted by the User or it was\n                          interacted and simply animating to its original position</p>\n</div></li><li><span class='pre'>dX</span> : Number<div class='sub-desc'><p>The amount of horizontal displacement caused by user's action</p>\n</div></li><li><span class='pre'>dY</span> : Number<div class='sub-desc'><p>The amount of vertical displacement caused by user's action</p>\n</div></li><li><span class='pre'>actionState</span> : Number<div class='sub-desc'><p>The type of interaction on the View. Is either ACTION_STATE_DRAG or ACTION_STATE_SWIPE.</p>\n</div></li><li><span class='pre'>isCurrentlyActive</span> : Boolean<div class='sub-desc'><p>True if this view is currently being controlled by the user or\n                          false it is simply animating back to its original state.\n@see <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onChildDrawOver\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onChildDrawOver\" class=\"docClass\">onChildDrawOver</a>(Canvas, RecyclerView, ViewHolder, float, float, int,\n boolean)</p>\n</div></li></ul></div></div></div><div id='method-onChildDrawOver' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-onChildDrawOver' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onChildDrawOver' class='name expandable'>onChildDrawOver</a>( <span class='pre'>c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by ItemTouchHelper on RecyclerView's onDraw callback. ...</div><div class='long'><p>Called by ItemTouchHelper on RecyclerView's onDraw callback.\n <p>\n If you would like to customize how your View's respond to user interactions, this is\n a good place to override.\n <p>\n Default implementation translates the child by the given <code>dX</code>,\n <code>dY</code>.\n ItemTouchHelper also takes care of drawing the child after other children if it is being\n dragged. This is done using child re-ordering mechanism. On platforms prior to L, this\n is\n achieved via int) and on L\n and after, it changes View's elevation value to be greater than all other children.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : Object {Canvas}<div class='sub-desc'><p>The canvas which RecyclerView is drawing its children</p>\n</div></li><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView to which ItemTouchHelper is attached to</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which is being interacted by the User or it was\n                          interacted and simply animating to its original position</p>\n</div></li><li><span class='pre'>dX</span> : Number<div class='sub-desc'><p>The amount of horizontal displacement caused by user's action</p>\n</div></li><li><span class='pre'>dY</span> : Number<div class='sub-desc'><p>The amount of vertical displacement caused by user's action</p>\n</div></li><li><span class='pre'>actionState</span> : Number<div class='sub-desc'><p>The type of interaction on the View. Is either ACTION_STATE_DRAG or ACTION_STATE_SWIPE.</p>\n</div></li><li><span class='pre'>isCurrentlyActive</span> : Boolean<div class='sub-desc'><p>True if this view is currently being controlled by the user or\n                          false it is simply animating back to its original state.\n@see <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onChildDrawOver\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onChildDrawOver\" class=\"docClass\">onChildDrawOver</a>(Canvas, RecyclerView, ViewHolder, float, float, int,\n boolean)</p>\n</div></li></ul></div></div></div><div id='method-onMove' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-onMove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onMove' class='name expandable'>onMove</a>( <span class='pre'>recyclerView, viewHolder, target</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when ItemTouchHelper wants to move the dragged item from its old position to\n the new position. ...</div><div class='long'><p>Called when ItemTouchHelper wants to move the dragged item from its old position to\n the new position.\n <p>\n If this method returns true, ItemTouchHelper assumes {@code viewHolder} has been moved\n to the adapter position of {@code target} ViewHolder\n (ViewHolder#getAdapterPosition()).\n <p>\n If you don't support drag &amp; drop, this method will never be called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView to which ItemTouchHelper is attached to.</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which is being dragged by the user.</p>\n</div></li><li><span class='pre'>target</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder over which the currently active item is being\n                     dragged.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the {@code viewHolder} has been moved to the adapter position of\n {@code target}.\n@see <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onMoved\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onMoved\" class=\"docClass\">onMoved</a>(RecyclerView, ViewHolder, int, ViewHolder, int, int, int)</p>\n</div></li></ul></div></div></div><div id='method-onMoved' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-onMoved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onMoved' class='name expandable'>onMoved</a>( <span class='pre'>recyclerView, viewHolder, fromPos, target, toPos, x, y</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when ViewHolder, ViewHolder) returns true. ...</div><div class='long'><p>Called when ViewHolder, ViewHolder) returns true.\n <p>\n ItemTouchHelper does not create an extra Bitmap or View while dragging, instead, it\n modifies the existing View. Because of this reason, it is important that the View is\n still part of the layout after it is moved. This may not work as intended when swapped\n Views are close to RecyclerView bounds or there are gaps between them (e.g. other Views\n which were not eligible for dropping over).\n <p>\n This method is responsible to give necessary hint to the LayoutManager so that it will\n keep the View in visible area. For example, for LinearLayoutManager, this is as simple\n as calling int).</p>\n\n<p> Default implementation calls RecyclerView.scrollToPosition(int) if the View's\n new position is likely to be out of bounds.\n <p>\n It is important to ensure the ViewHolder will stay visible as otherwise, it might be\n removed by the LayoutManager if the move causes the View to go out of bounds. In that\n case, drag will end prematurely.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView controlled by the ItemTouchHelper.</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder under user's control.</p>\n</div></li><li><span class='pre'>fromPos</span> : Number<div class='sub-desc'><p>The previous adapter position of the dragged item (before it was\n                     moved).</p>\n</div></li><li><span class='pre'>target</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder on which the currently active item has been dropped.</p>\n</div></li><li><span class='pre'>toPos</span> : Number<div class='sub-desc'><p>The new adapter position of the dragged item.</p>\n</div></li><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The updated left value of the dragged View after drag translations\n                     are applied. This value does not include margins added by\n                     RecyclerView.ItemDecorations.</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>The updated top value of the dragged View after drag translations\n                     are applied. This value does not include margins added by\n                     RecyclerView.ItemDecorations.</p>\n</div></li></ul></div></div></div><div id='method-onSelectedChanged' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-onSelectedChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onSelectedChanged' class='name expandable'>onSelectedChanged</a>( <span class='pre'>viewHolder, actionState</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the ViewHolder swiped or dragged by the ItemTouchHelper is changed. ...</div><div class='long'><p>Called when the ViewHolder swiped or dragged by the ItemTouchHelper is changed.\n <p/>\n If you override this method, you should call super.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The new ViewHolder that is being swiped or dragged. Might be null if\n                    it is cleared.</p>\n</div></li><li><span class='pre'>actionState</span> : Number<div class='sub-desc'><p>One of ItemTouchHelper.ACTION_STATE_IDLE,\n                    ItemTouchHelper.ACTION_STATE_SWIPE or\n                    ItemTouchHelper.ACTION_STATE_DRAG.\n@see <a href=\"#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-clearView\" rel=\"com.android.internal.widget.helper.ItemTouchHelper.Callback-method-clearView\" class=\"docClass\">clearView</a>(RecyclerView, RecyclerView.ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-onSwiped' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback' rel='com.android.internal.widget.helper.ItemTouchHelper.Callback' class='defined-in docClass'>com.android.internal.widget.helper.ItemTouchHelper.Callback</a><br/><a href='source/Callback.html#com-android-internal-widget-helper-ItemTouchHelper-Callback-method-onSwiped' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.Callback-method-onSwiped' class='name expandable'>onSwiped</a>( <span class='pre'>viewHolder, direction</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a ViewHolder is swiped by the user. ...</div><div class='long'><p>Called when a ViewHolder is swiped by the user.\n <p>\n If you are returning relative directions (START , END) from the\n ViewHolder) method, this method\n will also use relative directions. Otherwise, it will use absolute directions.\n <p>\n If you don't support swiping, this method will never be called.\n <p>\n ItemTouchHelper will keep a reference to the View until it is detached from\n RecyclerView.\n As soon as it is detached, ItemTouchHelper will call\n ViewHolder).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which has been swiped by the user.</p>\n</div></li><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p>The direction to which the ViewHolder is swiped. It is one of\n                   UP, DOWN,\n                   LEFT or RIGHT. If your\n                   ViewHolder)\n                   method\n                   returned relative flags instead of LEFT / RIGHT;\n                   <code>direction</code> will be relative as well. (START or END).</p>\n</div></li></ul></div></div></div><div id='method-setDefaultDragDirs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback'>com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback</span><br/><a href='source/SimpleCallback.html#com-android-internal-widget-helper-ItemTouchHelper-SimpleCallback-method-setDefaultDragDirs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-setDefaultDragDirs' class='name expandable'>setDefaultDragDirs</a>( <span class='pre'>defaultDragDirs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates the default drag directions. ...</div><div class='long'><p>Updates the default drag directions. For example, you can use this method to toggle\n certain directions depending on your use case.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>defaultDragDirs</span> : Number<div class='sub-desc'><p>Binary OR of directions in which the ViewHolders can be dragged.</p>\n</div></li></ul></div></div></div><div id='method-setDefaultSwipeDirs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback'>com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback</span><br/><a href='source/SimpleCallback.html#com-android-internal-widget-helper-ItemTouchHelper-SimpleCallback-method-setDefaultSwipeDirs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.helper.ItemTouchHelper.SimpleCallback-method-setDefaultSwipeDirs' class='name expandable'>setDefaultSwipeDirs</a>( <span class='pre'>defaultSwipeDirs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates the default swipe directions. ...</div><div class='long'><p>Updates the default swipe directions. For example, you can use this method to toggle\n certain directions depending on your use case.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>defaultSwipeDirs</span> : Number<div class='sub-desc'><p>Binary OR of directions in which the ViewHolders can be swiped.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});