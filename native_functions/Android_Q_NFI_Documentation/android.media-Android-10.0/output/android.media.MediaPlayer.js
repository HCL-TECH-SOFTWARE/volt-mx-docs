Ext.data.JsonP.android_media_MediaPlayer({"tagname":"class","name":"android.media.MediaPlayer","autodetected":{},"files":[{"filename":"MediaPlayer.js","href":"MediaPlayer.html#android-media-MediaPlayer"}],"extends":"android.media.PlayerBase","members":[{"name":"APPLY_METADATA_FILTER","tagname":"property","owner":"android.media.MediaPlayer","id":"property-APPLY_METADATA_FILTER","meta":{}},{"name":"BYPASS_METADATA_FILTER","tagname":"property","owner":"android.media.MediaPlayer","id":"property-BYPASS_METADATA_FILTER","meta":{}},{"name":"MEDIA_ERROR_IO","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_ERROR_IO","meta":{}},{"name":"MEDIA_ERROR_MALFORMED","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_ERROR_MALFORMED","meta":{}},{"name":"MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK","meta":{}},{"name":"MEDIA_ERROR_SERVER_DIED","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_ERROR_SERVER_DIED","meta":{}},{"name":"MEDIA_ERROR_TIMED_OUT","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_ERROR_TIMED_OUT","meta":{}},{"name":"MEDIA_ERROR_UNKNOWN","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_ERROR_UNKNOWN","meta":{}},{"name":"MEDIA_ERROR_UNSUPPORTED","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_ERROR_UNSUPPORTED","meta":{}},{"name":"MEDIA_INFO_AUDIO_NOT_PLAYING","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_AUDIO_NOT_PLAYING","meta":{}},{"name":"MEDIA_INFO_BAD_INTERLEAVING","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_BAD_INTERLEAVING","meta":{}},{"name":"MEDIA_INFO_BUFFERING_END","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_BUFFERING_END","meta":{}},{"name":"MEDIA_INFO_BUFFERING_START","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_BUFFERING_START","meta":{}},{"name":"MEDIA_INFO_METADATA_UPDATE","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_METADATA_UPDATE","meta":{}},{"name":"MEDIA_INFO_NOT_SEEKABLE","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_NOT_SEEKABLE","meta":{}},{"name":"MEDIA_INFO_STARTED_AS_NEXT","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_STARTED_AS_NEXT","meta":{}},{"name":"MEDIA_INFO_SUBTITLE_TIMED_OUT","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_SUBTITLE_TIMED_OUT","meta":{}},{"name":"MEDIA_INFO_TIMED_TEXT_ERROR","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_TIMED_TEXT_ERROR","meta":{}},{"name":"MEDIA_INFO_UNKNOWN","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_UNKNOWN","meta":{}},{"name":"MEDIA_INFO_UNSUPPORTED_SUBTITLE","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_UNSUPPORTED_SUBTITLE","meta":{}},{"name":"MEDIA_INFO_VIDEO_NOT_PLAYING","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_VIDEO_NOT_PLAYING","meta":{}},{"name":"MEDIA_INFO_VIDEO_RENDERING_START","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_VIDEO_RENDERING_START","meta":{}},{"name":"MEDIA_INFO_VIDEO_TRACK_LAGGING","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_INFO_VIDEO_TRACK_LAGGING","meta":{}},{"name":"MEDIA_MIMETYPE_TEXT_SUBRIP","tagname":"property","owner":"android.media.MediaPlayer","id":"property-MEDIA_MIMETYPE_TEXT_SUBRIP","meta":{"deprecated":{"text":"<p>use <a href=\"#!/api/android.media.MediaFormat-property-MIMETYPE_TEXT_SUBRIP\" rel=\"android.media.MediaFormat-property-MIMETYPE_TEXT_SUBRIP\" class=\"docClass\">android.media.MediaFormat.MIMETYPE_TEXT_SUBRIP</a></p>\n"}}},{"name":"METADATA_ALL","tagname":"property","owner":"android.media.MediaPlayer","id":"property-METADATA_ALL","meta":{}},{"name":"METADATA_UPDATE_ONLY","tagname":"property","owner":"android.media.MediaPlayer","id":"property-METADATA_UPDATE_ONLY","meta":{}},{"name":"PREPARE_DRM_STATUS_PREPARATION_ERROR","tagname":"property","owner":"android.media.MediaPlayer","id":"property-PREPARE_DRM_STATUS_PREPARATION_ERROR","meta":{}},{"name":"PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR","tagname":"property","owner":"android.media.MediaPlayer","id":"property-PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR","meta":{}},{"name":"PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR","tagname":"property","owner":"android.media.MediaPlayer","id":"property-PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR","meta":{}},{"name":"PREPARE_DRM_STATUS_SUCCESS","tagname":"property","owner":"android.media.MediaPlayer","id":"property-PREPARE_DRM_STATUS_SUCCESS","meta":{}},{"name":"SEEK_CLOSEST","tagname":"property","owner":"android.media.MediaPlayer","id":"property-SEEK_CLOSEST","meta":{}},{"name":"SEEK_CLOSEST_SYNC","tagname":"property","owner":"android.media.MediaPlayer","id":"property-SEEK_CLOSEST_SYNC","meta":{}},{"name":"SEEK_NEXT_SYNC","tagname":"property","owner":"android.media.MediaPlayer","id":"property-SEEK_NEXT_SYNC","meta":{}},{"name":"SEEK_PREVIOUS_SYNC","tagname":"property","owner":"android.media.MediaPlayer","id":"property-SEEK_PREVIOUS_SYNC","meta":{}},{"name":"VIDEO_SCALING_MODE_SCALE_TO_FIT","tagname":"property","owner":"android.media.MediaPlayer","id":"property-VIDEO_SCALING_MODE_SCALE_TO_FIT","meta":{}},{"name":"VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING","tagname":"property","owner":"android.media.MediaPlayer","id":"property-VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING","meta":{}},{"name":"addOnRoutingChangedListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-addOnRoutingChangedListener","meta":{}},{"name":"addTimedTextSource","tagname":"method","owner":"android.media.MediaPlayer","id":"method-addTimedTextSource","meta":{}},{"name":"attachAuxEffect","tagname":"method","owner":"android.media.MediaPlayer","id":"method-attachAuxEffect","meta":{}},{"name":"clearOnMediaTimeDiscontinuityListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-clearOnMediaTimeDiscontinuityListener","meta":{}},{"name":"clearOnSubtitleDataListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-clearOnSubtitleDataListener","meta":{}},{"name":"create","tagname":"method","owner":"android.media.MediaPlayer","id":"method-create","meta":{}},{"name":"createVolumeShaper","tagname":"method","owner":"android.media.MediaPlayer","id":"method-createVolumeShaper","meta":{}},{"name":"deprecateStreamTypeForPlayback","tagname":"method","owner":"android.media.PlayerBase","id":"method-deprecateStreamTypeForPlayback","meta":{}},{"name":"deselectTrack","tagname":"method","owner":"android.media.MediaPlayer","id":"method-deselectTrack","meta":{}},{"name":"getAudioSessionId","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getAudioSessionId","meta":{}},{"name":"getCurrentPosition","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getCurrentPosition","meta":{}},{"name":"getDrmInfo","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getDrmInfo","meta":{}},{"name":"getDrmPropertyString","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getDrmPropertyString","meta":{}},{"name":"getDuration","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getDuration","meta":{}},{"name":"getKeyRequest","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getKeyRequest","meta":{}},{"name":"getMetadata","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getMetadata","meta":{}},{"name":"getMetrics","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getMetrics","meta":{}},{"name":"getPlaybackParams","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getPlaybackParams","meta":{}},{"name":"getPreferredDevice","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getPreferredDevice","meta":{}},{"name":"getRoutedDevice","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getRoutedDevice","meta":{}},{"name":"getSelectedTrack","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getSelectedTrack","meta":{}},{"name":"getSyncParams","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getSyncParams","meta":{}},{"name":"getTimestamp","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getTimestamp","meta":{}},{"name":"getTrackInfo","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getTrackInfo","meta":{}},{"name":"getVideoHeight","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getVideoHeight","meta":{}},{"name":"getVideoWidth","tagname":"method","owner":"android.media.MediaPlayer","id":"method-getVideoWidth","meta":{}},{"name":"invoke","tagname":"method","owner":"android.media.MediaPlayer","id":"method-invoke","meta":{}},{"name":"isLooping","tagname":"method","owner":"android.media.MediaPlayer","id":"method-isLooping","meta":{}},{"name":"isPlaying","tagname":"method","owner":"android.media.MediaPlayer","id":"method-isPlaying","meta":{}},{"name":"native_pullBatteryData","tagname":"method","owner":"android.media.MediaPlayer","id":"method-native_pullBatteryData","meta":{}},{"name":"newRequest","tagname":"method","owner":"android.media.MediaPlayer","id":"method-newRequest","meta":{}},{"name":"pause","tagname":"method","owner":"android.media.MediaPlayer","id":"method-pause","meta":{}},{"name":"prepare","tagname":"method","owner":"android.media.MediaPlayer","id":"method-prepare","meta":{}},{"name":"prepareAsync","tagname":"method","owner":"android.media.MediaPlayer","id":"method-prepareAsync","meta":{}},{"name":"prepareDrm","tagname":"method","owner":"android.media.MediaPlayer","id":"method-prepareDrm","meta":{}},{"name":"provideKeyResponse","tagname":"method","owner":"android.media.MediaPlayer","id":"method-provideKeyResponse","meta":{}},{"name":"release","tagname":"method","owner":"android.media.MediaPlayer","id":"method-release","meta":{}},{"name":"releaseDrm","tagname":"method","owner":"android.media.MediaPlayer","id":"method-releaseDrm","meta":{}},{"name":"removeOnRoutingChangedListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-removeOnRoutingChangedListener","meta":{}},{"name":"reset","tagname":"method","owner":"android.media.MediaPlayer","id":"method-reset","meta":{}},{"name":"restoreKeys","tagname":"method","owner":"android.media.MediaPlayer","id":"method-restoreKeys","meta":{}},{"name":"seekTo","tagname":"method","owner":"android.media.MediaPlayer","id":"method-seekTo","meta":{}},{"name":"selectTrack","tagname":"method","owner":"android.media.MediaPlayer","id":"method-selectTrack","meta":{}},{"name":"setAudioAttributes","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setAudioAttributes","meta":{}},{"name":"setAudioSessionId","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setAudioSessionId","meta":{}},{"name":"setAudioStreamType","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setAudioStreamType","meta":{"deprecated":{"text":"<p>use setAudioAttributes(AudioAttributes)\n@see <a href=\"#!/api/android.media.AudioManager\" rel=\"android.media.AudioManager\" class=\"docClass\">android.media.AudioManager</a></p>\n"}}},{"name":"setAuxEffectSendLevel","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setAuxEffectSendLevel","meta":{}},{"name":"setDataSource","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setDataSource","meta":{}},{"name":"setDisplay","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setDisplay","meta":{}},{"name":"setDrmPropertyString","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setDrmPropertyString","meta":{}},{"name":"setLooping","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setLooping","meta":{}},{"name":"setMetadataFilter","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setMetadataFilter","meta":{}},{"name":"setNextMediaPlayer","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setNextMediaPlayer","meta":{}},{"name":"setOnBufferingUpdateListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnBufferingUpdateListener","meta":{}},{"name":"setOnCompletionListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnCompletionListener","meta":{}},{"name":"setOnDrmConfigHelper","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnDrmConfigHelper","meta":{}},{"name":"setOnDrmInfoListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnDrmInfoListener","meta":{}},{"name":"setOnDrmPreparedListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnDrmPreparedListener","meta":{}},{"name":"setOnErrorListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnErrorListener","meta":{}},{"name":"setOnInfoListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnInfoListener","meta":{}},{"name":"setOnMediaTimeDiscontinuityListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnMediaTimeDiscontinuityListener","meta":{}},{"name":"setOnPreparedListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnPreparedListener","meta":{}},{"name":"setOnSeekCompleteListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnSeekCompleteListener","meta":{}},{"name":"setOnSubtitleDataListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnSubtitleDataListener","meta":{}},{"name":"setOnTimedMetaDataAvailableListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnTimedMetaDataAvailableListener","meta":{}},{"name":"setOnTimedTextListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnTimedTextListener","meta":{}},{"name":"setOnVideoSizeChangedListener","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setOnVideoSizeChangedListener","meta":{}},{"name":"setPlaybackParams","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setPlaybackParams","meta":{}},{"name":"setPreferredDevice","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setPreferredDevice","meta":{}},{"name":"setRetransmitEndpoint","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setRetransmitEndpoint","meta":{}},{"name":"setScreenOnWhilePlaying","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setScreenOnWhilePlaying","meta":{}},{"name":"setStartDelayMs","tagname":"method","owner":"android.media.PlayerBase","id":"method-setStartDelayMs","meta":{}},{"name":"setSurface","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setSurface","meta":{}},{"name":"setSyncParams","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setSyncParams","meta":{}},{"name":"setVideoScalingMode","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setVideoScalingMode","meta":{}},{"name":"setWakeMode","tagname":"method","owner":"android.media.MediaPlayer","id":"method-setWakeMode","meta":{}},{"name":"start","tagname":"method","owner":"android.media.MediaPlayer","id":"method-start","meta":{}},{"name":"stop","tagname":"method","owner":"android.media.MediaPlayer","id":"method-stop","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.MediaPlayer","short_doc":"implements android.media.SubtitleController.Listener\n\n implements android.media.VolumeAutomation\n\n implements android...","classIcon":"icon-class","superclasses":["java.lang.Object","android.media.PlayerBase"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/android.media.PlayerBase' rel='android.media.PlayerBase' class='docClass'>android.media.PlayerBase</a><div class='subclass '><strong>android.media.MediaPlayer</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/MediaPlayer.html#android-media-MediaPlayer' target='_blank'>MediaPlayer.js</a></div></pre><div class='doc-contents'><p>implements android.media.SubtitleController.Listener</p>\n\n<p> implements <a href=\"#!/api/android.media.VolumeAutomation\" rel=\"android.media.VolumeAutomation\" class=\"docClass\">android.media.VolumeAutomation</a></p>\n\n<p> implements <a href=\"#!/api/android.media.AudioRouting\" rel=\"android.media.AudioRouting\" class=\"docClass\">android.media.AudioRouting</a></p>\n\n<p>MediaPlayer class can be used to control playback\n of audio/video files and streams. An example on how to use the methods in\n this class can be found in android.widget.VideoView.</p>\n\n<p> <p>Topics covered here are:\n <ol>\n <li><a href=\"#StateDiagram\">State Diagram</a>\n <li><a href=\"#Valid_and_Invalid_States\">Valid and Invalid States</a>\n <li><a href=\"#Permissions\">Permissions</a>\n <li><a href=\"#Callbacks\">Register informational and error callbacks</a>\n </li></li></li></li></ol></p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about how to use MediaPlayer, read the\n <a href=\"{@docRoot}guide/topics/media/mediaplayer.html\">Media Playback</a> developer guide.</p>\n </div></p>\n\n<p> <a name=\"StateDiagram\"></a>\n <h3>State Diagram</h3></p>\n\n<p> <p>Playback control of audio/video files and streams is managed as a state\n machine. The following diagram shows the life cycle and the states of a\n MediaPlayer object driven by the supported playback control operations.\n The ovals represent the states a MediaPlayer object may reside\n in. The arcs represent the playback control operations that drive the object\n state transition. There are two types of arcs. The arcs with a single arrow\n head represent synchronous method calls, while those with\n a double arrow head represent asynchronous method calls.</p></p>\n\n<p> <p><img src=\"../../../images/mediaplayer_state_diagram.gif\"\n         alt=\"MediaPlayer State diagram\"\n         border=\"0\" /></p></p>\n\n<p> <p>From this state diagram, one can see that a MediaPlayer object has the\n    following states:</p>\n <ul>\n     <li>When a MediaPlayer object is just created using <code>new</code> or\n         after <a href=\"#!/api/android.media.MediaPlayer-method-reset\" rel=\"android.media.MediaPlayer-method-reset\" class=\"docClass\">reset</a>() is called, it is in the <em>Idle</em> state; and after\n         <a href=\"#!/api/android.media.MediaPlayer-method-release\" rel=\"android.media.MediaPlayer-method-release\" class=\"docClass\">release</a>() is called, it is in the <em>End</em> state. Between these\n         two states is the life cycle of the MediaPlayer object.\n         <ul>\n         <li>There is a subtle but important difference between a newly constructed\n         MediaPlayer object and the MediaPlayer object after <a href=\"#!/api/android.media.MediaPlayer-method-reset\" rel=\"android.media.MediaPlayer-method-reset\" class=\"docClass\">reset</a>()\n         is called. It is a programming error to invoke methods such\n         as <a href=\"#!/api/android.media.MediaPlayer-method-getCurrentPosition\" rel=\"android.media.MediaPlayer-method-getCurrentPosition\" class=\"docClass\">getCurrentPosition</a>(),\n         <a href=\"#!/api/android.media.MediaPlayer-method-getDuration\" rel=\"android.media.MediaPlayer-method-getDuration\" class=\"docClass\">getDuration</a>(), <a href=\"#!/api/android.media.MediaPlayer-method-getVideoHeight\" rel=\"android.media.MediaPlayer-method-getVideoHeight\" class=\"docClass\">getVideoHeight</a>(),\n         <a href=\"#!/api/android.media.MediaPlayer-method-getVideoWidth\" rel=\"android.media.MediaPlayer-method-getVideoWidth\" class=\"docClass\">getVideoWidth</a>(), <a href=\"#!/api/android.media.MediaPlayer-method-setAudioAttributes\" rel=\"android.media.MediaPlayer-method-setAudioAttributes\" class=\"docClass\">setAudioAttributes</a>(AudioAttributes),\n         <a href=\"#!/api/android.media.MediaPlayer-method-setLooping\" rel=\"android.media.MediaPlayer-method-setLooping\" class=\"docClass\">setLooping</a>(boolean),\n         float), <a href=\"#!/api/android.media.MediaPlayer-method-pause\" rel=\"android.media.MediaPlayer-method-pause\" class=\"docClass\">pause</a>(), <a href=\"#!/api/android.media.MediaPlayer-method-start\" rel=\"android.media.MediaPlayer-method-start\" class=\"docClass\">start</a>(),\n         <a href=\"#!/api/android.media.MediaPlayer-method-stop\" rel=\"android.media.MediaPlayer-method-stop\" class=\"docClass\">stop</a>(), int), <a href=\"#!/api/android.media.MediaPlayer-method-prepare\" rel=\"android.media.MediaPlayer-method-prepare\" class=\"docClass\">prepare</a>() or\n         <a href=\"#!/api/android.media.MediaPlayer-method-prepareAsync\" rel=\"android.media.MediaPlayer-method-prepareAsync\" class=\"docClass\">prepareAsync</a>() in the <em>Idle</em> state for both cases. If any of these\n         methods is called right after a MediaPlayer object is constructed,\n         the user supplied callback method OnErrorListener.onError() won't be\n         called by the internal player engine and the object state remains\n         unchanged; but if these methods are called right after <a href=\"#!/api/android.media.MediaPlayer-method-reset\" rel=\"android.media.MediaPlayer-method-reset\" class=\"docClass\">reset</a>(),\n         the user supplied callback method OnErrorListener.onError() will be\n         invoked by the internal player engine and the object will be\n         transfered to the <em>Error</em> state. </li>\n         <li>It is also recommended that once\n         a MediaPlayer object is no longer being used, call <a href=\"#!/api/android.media.MediaPlayer-method-release\" rel=\"android.media.MediaPlayer-method-release\" class=\"docClass\">release</a>() immediately\n         so that resources used by the internal player engine associated with the\n         MediaPlayer object can be released immediately. Resource may include\n         singleton resources such as hardware acceleration components and\n         failure to call <a href=\"#!/api/android.media.MediaPlayer-method-release\" rel=\"android.media.MediaPlayer-method-release\" class=\"docClass\">release</a>() may cause subsequent instances of\n         MediaPlayer objects to fallback to software implementations or fail\n         altogether. Once the MediaPlayer\n         object is in the <em>End</em> state, it can no longer be used and\n         there is no way to bring it back to any other state. </li>\n         <li>Furthermore,\n         the MediaPlayer objects created using <code>new</code> is in the\n         <em>Idle</em> state, while those created with one\n         of the overloaded convenient <code>create</code> methods are <em>NOT</em>\n         in the <em>Idle</em> state. In fact, the objects are in the <em>Prepared</em>\n         state if the creation using <code>create</code> method is successful.\n         </li>\n         </ul>\n         </li>\n     <li>In general, some playback control operation may fail due to various\n         reasons, such as unsupported audio/video format, poorly interleaved\n         audio/video, resolution too high, streaming timeout, and the like.\n         Thus, error reporting and recovery is an important concern under\n         these circumstances. Sometimes, due to programming errors, invoking a playback\n         control operation in an invalid state may also occur. Under all these\n         error conditions, the internal player engine invokes a user supplied\n         OnErrorListener.onError() method if an OnErrorListener has been\n         registered beforehand via\n         setOnErrorListener(android.media.MediaPlayer.OnErrorListener).\n         <ul>\n         <li>It is important to note that once an error occurs, the\n         MediaPlayer object enters the <em>Error</em> state (except as noted\n         above), even if an error listener has not been registered by the application.</li>\n         <li>In order to reuse a MediaPlayer object that is in the <em>\n         Error</em> state and recover from the error,\n         <a href=\"#!/api/android.media.MediaPlayer-method-reset\" rel=\"android.media.MediaPlayer-method-reset\" class=\"docClass\">reset</a>() can be called to restore the object to its <em>Idle</em>\n         state.</li>\n         <li>It is good programming practice to have your application\n         register a OnErrorListener to look out for error notifications from\n         the internal player engine.</li>\n         <li>IllegalStateException is\n         thrown to prevent programming errors such as calling <a href=\"#!/api/android.media.MediaPlayer-method-prepare\" rel=\"android.media.MediaPlayer-method-prepare\" class=\"docClass\">prepare</a>(),\n         <a href=\"#!/api/android.media.MediaPlayer-method-prepareAsync\" rel=\"android.media.MediaPlayer-method-prepareAsync\" class=\"docClass\">prepareAsync</a>(), or one of the overloaded <code>setDataSource\n         </code> methods in an invalid state. </li>\n         </ul>\n         </li>\n     <li>Calling\n         <a href=\"#!/api/android.media.MediaPlayer-method-setDataSource\" rel=\"android.media.MediaPlayer-method-setDataSource\" class=\"docClass\">setDataSource</a>(FileDescriptor), or\n         <a href=\"#!/api/android.media.MediaPlayer-method-setDataSource\" rel=\"android.media.MediaPlayer-method-setDataSource\" class=\"docClass\">setDataSource</a>(String), or\n         Uri), or\n         long, long), or\n         <a href=\"#!/api/android.media.MediaPlayer-method-setDataSource\" rel=\"android.media.MediaPlayer-method-setDataSource\" class=\"docClass\">setDataSource</a>(MediaDataSource) transfers a\n         MediaPlayer object in the <em>Idle</em> state to the\n         <em>Initialized</em> state.\n         <ul>\n         <li>An IllegalStateException is thrown if\n         setDataSource() is called in any other state.</li>\n         <li>It is good programming\n         practice to always look out for <code>IllegalArgumentException</code>\n         and <code>IOException</code> that may be thrown from the overloaded\n         <code>setDataSource</code> methods.</li>\n         </ul>\n         </li>\n     <li>A MediaPlayer object must first enter the <em>Prepared</em> state\n         before playback can be started.\n         <ul>\n         <li>There are two ways (synchronous vs.\n         asynchronous) that the <em>Prepared</em> state can be reached:\n         either a call to <a href=\"#!/api/android.media.MediaPlayer-method-prepare\" rel=\"android.media.MediaPlayer-method-prepare\" class=\"docClass\">prepare</a>() (synchronous) which\n         transfers the object to the <em>Prepared</em> state once the method call\n         returns, or a call to <a href=\"#!/api/android.media.MediaPlayer-method-prepareAsync\" rel=\"android.media.MediaPlayer-method-prepareAsync\" class=\"docClass\">prepareAsync</a>() (asynchronous) which\n         first transfers the object to the <em>Preparing</em> state after the\n         call returns (which occurs almost right away) while the internal\n         player engine continues working on the rest of preparation work\n         until the preparation work completes. When the preparation completes or when <a href=\"#!/api/android.media.MediaPlayer-method-prepare\" rel=\"android.media.MediaPlayer-method-prepare\" class=\"docClass\">prepare</a>() call returns,\n         the internal player engine then calls a user supplied callback method,\n         onPrepared() of the OnPreparedListener interface, if an\n         OnPreparedListener is registered beforehand via setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener).</li>\n         <li>It is important to note that\n         the <em>Preparing</em> state is a transient state, and the behavior\n         of calling any method with side effect while a MediaPlayer object is\n         in the <em>Preparing</em> state is undefined.</li>\n         <li>An IllegalStateException is\n         thrown if <a href=\"#!/api/android.media.MediaPlayer-method-prepare\" rel=\"android.media.MediaPlayer-method-prepare\" class=\"docClass\">prepare</a>() or <a href=\"#!/api/android.media.MediaPlayer-method-prepareAsync\" rel=\"android.media.MediaPlayer-method-prepareAsync\" class=\"docClass\">prepareAsync</a>() is called in\n         any other state.</li>\n         <li>While in the <em>Prepared</em> state, properties\n         such as audio/sound volume, screenOnWhilePlaying, looping can be\n         adjusted by invoking the corresponding set methods.</li>\n         </ul>\n         </li>\n     <li>To start the playback, <a href=\"#!/api/android.media.MediaPlayer-method-start\" rel=\"android.media.MediaPlayer-method-start\" class=\"docClass\">start</a>() must be called. After\n         <a href=\"#!/api/android.media.MediaPlayer-method-start\" rel=\"android.media.MediaPlayer-method-start\" class=\"docClass\">start</a>() returns successfully, the MediaPlayer object is in the\n         <em>Started</em> state. <a href=\"#!/api/android.media.MediaPlayer-method-isPlaying\" rel=\"android.media.MediaPlayer-method-isPlaying\" class=\"docClass\">isPlaying</a>() can be called to test\n         whether the MediaPlayer object is in the <em>Started</em> state.\n         <ul>\n         <li>While in the <em>Started</em> state, the internal player engine calls\n         a user supplied OnBufferingUpdateListener.onBufferingUpdate() callback\n         method if a OnBufferingUpdateListener has been registered beforehand\n         via <a href=\"#!/api/android.media.MediaPlayer-method-setOnBufferingUpdateListener\" rel=\"android.media.MediaPlayer-method-setOnBufferingUpdateListener\" class=\"docClass\">setOnBufferingUpdateListener</a>(OnBufferingUpdateListener).\n         This callback allows applications to keep track of the buffering status\n         while streaming audio/video.</li>\n         <li>Calling <a href=\"#!/api/android.media.MediaPlayer-method-start\" rel=\"android.media.MediaPlayer-method-start\" class=\"docClass\">start</a>() has not effect\n         on a MediaPlayer object that is already in the <em>Started</em> state.</li>\n         </ul>\n         </li>\n     <li>Playback can be paused and stopped, and the current playback position\n         can be adjusted. Playback can be paused via <a href=\"#!/api/android.media.MediaPlayer-method-pause\" rel=\"android.media.MediaPlayer-method-pause\" class=\"docClass\">pause</a>(). When the call to\n         <a href=\"#!/api/android.media.MediaPlayer-method-pause\" rel=\"android.media.MediaPlayer-method-pause\" class=\"docClass\">pause</a>() returns, the MediaPlayer object enters the\n         <em>Paused</em> state. Note that the transition from the <em>Started</em>\n         state to the <em>Paused</em> state and vice versa happens\n         asynchronously in the player engine. It may take some time before\n         the state is updated in calls to <a href=\"#!/api/android.media.MediaPlayer-method-isPlaying\" rel=\"android.media.MediaPlayer-method-isPlaying\" class=\"docClass\">isPlaying</a>(), and it can be\n         a number of seconds in the case of streamed content.\n         <ul>\n         <li>Calling <a href=\"#!/api/android.media.MediaPlayer-method-start\" rel=\"android.media.MediaPlayer-method-start\" class=\"docClass\">start</a>() to resume playback for a paused\n         MediaPlayer object, and the resumed playback\n         position is the same as where it was paused. When the call to\n         <a href=\"#!/api/android.media.MediaPlayer-method-start\" rel=\"android.media.MediaPlayer-method-start\" class=\"docClass\">start</a>() returns, the paused MediaPlayer object goes back to\n         the <em>Started</em> state.</li>\n         <li>Calling <a href=\"#!/api/android.media.MediaPlayer-method-pause\" rel=\"android.media.MediaPlayer-method-pause\" class=\"docClass\">pause</a>() has no effect on\n         a MediaPlayer object that is already in the <em>Paused</em> state.</li>\n         </ul>\n         </li>\n     <li>Calling  <a href=\"#!/api/android.media.MediaPlayer-method-stop\" rel=\"android.media.MediaPlayer-method-stop\" class=\"docClass\">stop</a>() stops playback and causes a\n         MediaPlayer in the <em>Started</em>, <em>Paused</em>, <em>Prepared\n         </em> or <em>PlaybackCompleted</em> state to enter the\n         <em>Stopped</em> state.\n         <ul>\n         <li>Once in the <em>Stopped</em> state, playback cannot be started\n         until <a href=\"#!/api/android.media.MediaPlayer-method-prepare\" rel=\"android.media.MediaPlayer-method-prepare\" class=\"docClass\">prepare</a>() or <a href=\"#!/api/android.media.MediaPlayer-method-prepareAsync\" rel=\"android.media.MediaPlayer-method-prepareAsync\" class=\"docClass\">prepareAsync</a>() are called to set\n         the MediaPlayer object to the <em>Prepared</em> state again.</li>\n         <li>Calling <a href=\"#!/api/android.media.MediaPlayer-method-stop\" rel=\"android.media.MediaPlayer-method-stop\" class=\"docClass\">stop</a>() has no effect on a MediaPlayer\n         object that is already in the <em>Stopped</em> state.</li>\n         </ul>\n         </li>\n     <li>The playback position can be adjusted with a call to\n         int).\n         <ul>\n         <li>Although the asynchronuous int)\n         call returns right away, the actual seek operation may take a while to\n         finish, especially for audio/video being streamed. When the actual\n         seek operation completes, the internal player engine calls a user\n         supplied OnSeekComplete.onSeekComplete() if an OnSeekCompleteListener\n         has been registered beforehand via\n         <a href=\"#!/api/android.media.MediaPlayer-method-setOnSeekCompleteListener\" rel=\"android.media.MediaPlayer-method-setOnSeekCompleteListener\" class=\"docClass\">setOnSeekCompleteListener</a>(OnSeekCompleteListener).</li>\n         <li>Please\n         note that int) can also be called in the other states,\n         such as <em>Prepared</em>, <em>Paused</em> and <em>PlaybackCompleted\n         </em> state. When int) is called in those states,\n         one video frame will be displayed if the stream has video and the requested\n         position is valid.\n         </li>\n         <li>Furthermore, the actual current playback position\n         can be retrieved with a call to <a href=\"#!/api/android.media.MediaPlayer-method-getCurrentPosition\" rel=\"android.media.MediaPlayer-method-getCurrentPosition\" class=\"docClass\">getCurrentPosition</a>(), which\n         is helpful for applications such as a Music player that need to keep\n         track of the playback progress.</li>\n         </ul>\n         </li>\n     <li>When the playback reaches the end of stream, the playback completes.\n         <ul>\n         <li>If the looping mode was being set to <var>true</var>with\n         <a href=\"#!/api/android.media.MediaPlayer-method-setLooping\" rel=\"android.media.MediaPlayer-method-setLooping\" class=\"docClass\">setLooping</a>(boolean), the MediaPlayer object shall remain in\n         the <em>Started</em> state.</li>\n         <li>If the looping mode was set to <var>false\n         </var>, the player engine calls a user supplied callback method,\n         OnCompletion.onCompletion(), if a OnCompletionListener is registered\n         beforehand via <a href=\"#!/api/android.media.MediaPlayer-method-setOnCompletionListener\" rel=\"android.media.MediaPlayer-method-setOnCompletionListener\" class=\"docClass\">setOnCompletionListener</a>(OnCompletionListener).\n         The invoke of the callback signals that the object is now in the <em>\n         PlaybackCompleted</em> state.</li>\n         <li>While in the <em>PlaybackCompleted</em>\n         state, calling <a href=\"#!/api/android.media.MediaPlayer-method-start\" rel=\"android.media.MediaPlayer-method-start\" class=\"docClass\">start</a>() can restart the playback from the\n         beginning of the audio/video source.</li>\n </ul></li></ul></p>\n\n<p> <a name=\"Valid_and_Invalid_States\"></a>\n <h3>Valid and invalid states</h3></p>\n\n<p> <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n <tr><td>Method Name </td></tr></table></p>\n     <td>Valid States </td></p>\n     <td>Invalid States </td>\n     <td>Comments </td>\n <tr><td>attachAuxEffect </td>\n     <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </td>\n     <td>{Idle, Error} </td>\n     <td>This method must be called after setDataSource.\n     Calling it does not change the object state. </td></tr>\n <tr><td>getAudioSessionId </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>getCurrentPosition </td>\n     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,\n         PlaybackCompleted} </td>\n     <td>{Error}</td>\n     <td>Successful invoke of this method in a valid state does not change the\n         state. Calling this method in an invalid state transfers the object\n         to the <em>Error</em> state. </td></tr>\n <tr><td>getDuration </td>\n     <td>{Prepared, Started, Paused, Stopped, PlaybackCompleted} </td>\n     <td>{Idle, Initialized, Error} </td>\n     <td>Successful invoke of this method in a valid state does not change the\n         state. Calling this method in an invalid state transfers the object\n         to the <em>Error</em> state. </td></tr>\n <tr><td>getVideoHeight </td>\n     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,\n         PlaybackCompleted}</td>\n     <td>{Error}</td>\n     <td>Successful invoke of this method in a valid state does not change the\n         state. Calling this method in an invalid state transfers the object\n         to the <em>Error</em> state.  </td></tr>\n <tr><td>getVideoWidth </td>\n     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,\n         PlaybackCompleted}</td>\n     <td>{Error}</td>\n     <td>Successful invoke of this method in a valid state does not change\n         the state. Calling this method in an invalid state transfers the\n         object to the <em>Error</em> state. </td></tr>\n <tr><td>isPlaying </td>\n     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,\n          PlaybackCompleted}</td>\n     <td>{Error}</td>\n     <td>Successful invoke of this method in a valid state does not change\n         the state. Calling this method in an invalid state transfers the\n         object to the <em>Error</em> state. </td></tr>\n <tr><td>pause </td>\n     <td>{Started, Paused, PlaybackCompleted}</td>\n     <td>{Idle, Initialized, Prepared, Stopped, Error}</td>\n     <td>Successful invoke of this method in a valid state transfers the\n         object to the <em>Paused</em> state. Calling this method in an\n         invalid state transfers the object to the <em>Error</em> state.</td></tr>\n <tr><td>prepare </td>\n     <td>{Initialized, Stopped} </td>\n     <td>{Idle, Prepared, Started, Paused, PlaybackCompleted, Error} </td>\n     <td>Successful invoke of this method in a valid state transfers the\n         object to the <em>Prepared</em> state. Calling this method in an\n         invalid state throws an IllegalStateException.</td></tr>\n <tr><td>prepareAsync </td>\n     <td>{Initialized, Stopped} </td>\n     <td>{Idle, Prepared, Started, Paused, PlaybackCompleted, Error} </td>\n     <td>Successful invoke of this method in a valid state transfers the\n         object to the <em>Preparing</em> state. Calling this method in an\n         invalid state throws an IllegalStateException.</td></tr>\n <tr><td>release </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>After <a href=\"#!/api/android.media.MediaPlayer-method-release\" rel=\"android.media.MediaPlayer-method-release\" class=\"docClass\">release</a>(), the object is no longer available. </td></tr>\n <tr><td>reset </td>\n     <td>{Idle, Initialized, Prepared, Started, Paused, Stopped,\n         PlaybackCompleted, Error}</td>\n     <td>{}</td>\n     <td>After <a href=\"#!/api/android.media.MediaPlayer-method-reset\" rel=\"android.media.MediaPlayer-method-reset\" class=\"docClass\">reset</a>(), the object is like being just created.</td></tr>\n <tr><td>seekTo </td>\n     <td>{Prepared, Started, Paused, PlaybackCompleted} </td>\n     <td>{Idle, Initialized, Stopped, Error}</td>\n     <td>Successful invoke of this method in a valid state does not change\n         the state. Calling this method in an invalid state transfers the\n         object to the <em>Error</em> state. </td></tr>\n <tr><td>setAudioAttributes </td>\n     <td>{Idle, Initialized, Stopped, Prepared, Started, Paused,\n          PlaybackCompleted}</td>\n     <td>{Error}</td>\n     <td>Successful invoke of this method does not change the state. In order for the\n         target audio attributes type to become effective, this method must be called before\n         prepare() or prepareAsync().</td></tr>\n <tr><td>setAudioSessionId </td>\n     <td>{Idle} </td>\n     <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted,\n          Error} </td>\n     <td>This method must be called in idle state as the audio session ID must be known before\n         calling setDataSource. Calling it does not change the object state. </td></tr>\n <tr><td>setAudioStreamType (deprecated)</td>\n     <td>{Idle, Initialized, Stopped, Prepared, Started, Paused,\n          PlaybackCompleted}</td>\n     <td>{Error}</td>\n     <td>Successful invoke of this method does not change the state. In order for the\n         target audio stream type to become effective, this method must be called before\n         prepare() or prepareAsync().</td></tr>\n <tr><td>setAuxEffectSendLevel </td>\n     <td>any</td>\n     <td>{} </td>\n     <td>Calling this method does not change the object state. </td></tr>\n <tr><td>setDataSource </td>\n     <td>{Idle} </td>\n     <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted,\n          Error} </td>\n     <td>Successful invoke of this method in a valid state transfers the\n         object to the <em>Initialized</em> state. Calling this method in an\n         invalid state throws an IllegalStateException.</td></tr>\n <tr><td>setDisplay </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>setSurface </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>setVideoScalingMode </td>\n     <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </td>\n     <td>{Idle, Error}</td>\n     <td>Successful invoke of this method does not change the state.</td></tr>\n <tr><td>setLooping </td>\n     <td>{Idle, Initialized, Stopped, Prepared, Started, Paused,\n         PlaybackCompleted}</td>\n     <td>{Error}</td>\n     <td>Successful invoke of this method in a valid state does not change\n         the state. Calling this method in an\n         invalid state transfers the object to the <em>Error</em> state.</td></tr>\n <tr><td>isLooping </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>setOnBufferingUpdateListener </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>setOnCompletionListener </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>setOnErrorListener </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>setOnPreparedListener </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>setOnSeekCompleteListener </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state. </td></tr>\n <tr><td>setPlaybackParams</td>\n     <td>{Initialized, Prepared, Started, Paused, PlaybackCompleted, Error}</td>\n     <td>{Idle, Stopped} </td>\n     <td>This method will change state in some cases, depending on when it's called.\n         </td></tr>\n <tr><td>setScreenOnWhilePlaying</></td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state.  </td></tr>\n <tr><td>setVolume </td>\n     <td>{Idle, Initialized, Stopped, Prepared, Started, Paused,\n          PlaybackCompleted}</td>\n     <td>{Error}</td>\n     <td>Successful invoke of this method does not change the state.\n <tr><td>setWakeMode </td>\n     <td>any </td>\n     <td>{} </td>\n     <td>This method can be called in any state and calling it does not change\n         the object state.</td></tr>\n <tr><td>start </td>\n     <td>{Prepared, Started, Paused, PlaybackCompleted}</td>\n     <td>{Idle, Initialized, Stopped, Error}</td>\n     <td>Successful invoke of this method in a valid state transfers the\n         object to the <em>Started</em> state. Calling this method in an\n         invalid state transfers the object to the <em>Error</em> state.</td></tr>\n <tr><td>stop </td>\n     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td>\n     <td>{Idle, Initialized, Error}</td>\n     <td>Successful invoke of this method in a valid state transfers the\n         object to the <em>Stopped</em> state. Calling this method in an\n         invalid state transfers the object to the <em>Error</em> state.</td></tr>\n <tr><td>getTrackInfo </td>\n     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td>\n     <td>{Idle, Initialized, Error}</td>\n     <td>Successful invoke of this method does not change the state.</td></tr>\n <tr><td>addTimedTextSource </td>\n     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td>\n     <td>{Idle, Initialized, Error}</td>\n     <td>Successful invoke of this method does not change the state.</td></tr>\n <tr><td>selectTrack </td>\n     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td>\n     <td>{Idle, Initialized, Error}</td>\n     <td>Successful invoke of this method does not change the state.</td></tr>\n <tr><td>deselectTrack </td>\n     <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</td>\n     <td>{Idle, Initialized, Error}</td>\n     <td>Successful invoke of this method does not change the state.</td></tr>\n\n<p> </p>\n\n<p> <a name=\"Permissions\"></a>\n <h3>Permissions</h3>\n <p>One may need to declare a corresponding WAKE_LOCK permission &lt;uses-permission&gt;\n element.</p>\n\n<p> <p>This class requires the android.Manifest.permission.INTERNET permission\n when used with network-based content.</p>\n\n<p> <a name=\"Callbacks\"></a>\n <h3>Callbacks</h3>\n <p>Applications may want to register for informational and error\n events in order to be informed of some internal state update and\n possible runtime errors during playback or streaming. Registration for\n these events is done by properly setting the appropriate listeners (via calls\n to\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnPreparedListener\" rel=\"android.media.MediaPlayer-method-setOnPreparedListener\" class=\"docClass\">setOnPreparedListener</a>(OnPreparedListener)setOnPreparedListener,\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnVideoSizeChangedListener\" rel=\"android.media.MediaPlayer-method-setOnVideoSizeChangedListener\" class=\"docClass\">setOnVideoSizeChangedListener</a>(OnVideoSizeChangedListener)setOnVideoSizeChangedListener,\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnSeekCompleteListener\" rel=\"android.media.MediaPlayer-method-setOnSeekCompleteListener\" class=\"docClass\">setOnSeekCompleteListener</a>(OnSeekCompleteListener)setOnSeekCompleteListener,\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnCompletionListener\" rel=\"android.media.MediaPlayer-method-setOnCompletionListener\" class=\"docClass\">setOnCompletionListener</a>(OnCompletionListener)setOnCompletionListener,\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnBufferingUpdateListener\" rel=\"android.media.MediaPlayer-method-setOnBufferingUpdateListener\" class=\"docClass\">setOnBufferingUpdateListener</a>(OnBufferingUpdateListener)setOnBufferingUpdateListener,\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnInfoListener\" rel=\"android.media.MediaPlayer-method-setOnInfoListener\" class=\"docClass\">setOnInfoListener</a>(OnInfoListener)setOnInfoListener,\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnErrorListener\" rel=\"android.media.MediaPlayer-method-setOnErrorListener\" class=\"docClass\">setOnErrorListener</a>(OnErrorListener)setOnErrorListener, etc).\n In order to receive the respective callback\n associated with these listeners, applications are required to create\n MediaPlayer objects on a thread with its own Looper running (main UI\n thread by default has a Looper running).</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-APPLY_METADATA_FILTER' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-APPLY_METADATA_FILTER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-APPLY_METADATA_FILTER' class='name expandable'>APPLY_METADATA_FILTER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to enable the metadata filter during retrieval. ...</div><div class='long'><p>Constant to enable the metadata filter during retrieval.\n// FIXME: unhide.\n// FIXME: add link to getMetadata(boolean, boolean)\n{@hide}</p>\n<p>Defaults to: <code>&quot;true&quot;</code></p></div></div></div><div id='property-BYPASS_METADATA_FILTER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-BYPASS_METADATA_FILTER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-BYPASS_METADATA_FILTER' class='name expandable'>BYPASS_METADATA_FILTER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to disable the metadata filter during retrieval. ...</div><div class='long'><p>Constant to disable the metadata filter during retrieval.\n// FIXME: unhide.\n// FIXME: add link to getMetadata(boolean, boolean)\n{@hide}</p>\n<p>Defaults to: <code>&quot;false&quot;</code></p></div></div></div><div id='property-MEDIA_ERROR_IO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_ERROR_IO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_ERROR_IO' class='name expandable'>MEDIA_ERROR_IO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>File or network related operation errors. ...</div><div class='long'><p>File or network related operation errors.</p>\n<p>Defaults to: <code>&quot;-1004&quot;</code></p></div></div></div><div id='property-MEDIA_ERROR_MALFORMED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_ERROR_MALFORMED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_ERROR_MALFORMED' class='name expandable'>MEDIA_ERROR_MALFORMED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Bitstream is not conforming to the related coding standard or file spec. ...</div><div class='long'><p>Bitstream is not conforming to the related coding standard or file spec.</p>\n<p>Defaults to: <code>&quot;-1007&quot;</code></p></div></div></div><div id='property-MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK' class='name expandable'>MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The video is streamed and its container is not valid for progressive\n playback i.e the video's index (e.g moov atom) ...</div><div class='long'><p>The video is streamed and its container is not valid for progressive\n playback i.e the video's index (e.g moov atom) is not at the start of the\n file.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnErrorListener\" rel=\"android.media.MediaPlayer.OnErrorListener\" class=\"docClass\">android.media.MediaPlayer.OnErrorListener</a></p>\n<p>Defaults to: <code>&quot;200&quot;</code></p></div></div></div><div id='property-MEDIA_ERROR_SERVER_DIED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_ERROR_SERVER_DIED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_ERROR_SERVER_DIED' class='name expandable'>MEDIA_ERROR_SERVER_DIED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Media server died. ...</div><div class='long'><p>Media server died. In this case, the application must release the\n MediaPlayer object and instantiate a new one.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnErrorListener\" rel=\"android.media.MediaPlayer.OnErrorListener\" class=\"docClass\">android.media.MediaPlayer.OnErrorListener</a></p>\n<p>Defaults to: <code>&quot;100&quot;</code></p></div></div></div><div id='property-MEDIA_ERROR_TIMED_OUT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_ERROR_TIMED_OUT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_ERROR_TIMED_OUT' class='name expandable'>MEDIA_ERROR_TIMED_OUT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Some operation takes too long to complete, usually more than 3-5 seconds. ...</div><div class='long'><p>Some operation takes too long to complete, usually more than 3-5 seconds.</p>\n<p>Defaults to: <code>&quot;-110&quot;</code></p></div></div></div><div id='property-MEDIA_ERROR_UNKNOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_ERROR_UNKNOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_ERROR_UNKNOWN' class='name expandable'>MEDIA_ERROR_UNKNOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Unspecified media player error. ...</div><div class='long'><p>Unspecified media player error.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnErrorListener\" rel=\"android.media.MediaPlayer.OnErrorListener\" class=\"docClass\">android.media.MediaPlayer.OnErrorListener</a></p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-MEDIA_ERROR_UNSUPPORTED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_ERROR_UNSUPPORTED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_ERROR_UNSUPPORTED' class='name expandable'>MEDIA_ERROR_UNSUPPORTED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Bitstream is conforming to the related coding standard or file spec, but\n the media framework does not support the fe...</div><div class='long'><p>Bitstream is conforming to the related coding standard or file spec, but\n the media framework does not support the feature.</p>\n<p>Defaults to: <code>&quot;-1010&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_AUDIO_NOT_PLAYING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_AUDIO_NOT_PLAYING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_AUDIO_NOT_PLAYING' class='name expandable'>MEDIA_INFO_AUDIO_NOT_PLAYING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Informs that audio is not playing. ...</div><div class='long'><p>Informs that audio is not playing. Note that playback of the video\n is not interrupted.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;804&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_BAD_INTERLEAVING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_BAD_INTERLEAVING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_BAD_INTERLEAVING' class='name expandable'>MEDIA_INFO_BAD_INTERLEAVING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Bad interleaving means that a media has been improperly interleaved or\n not interleaved at all, e.g has all the video...</div><div class='long'><p>Bad interleaving means that a media has been improperly interleaved or\n not interleaved at all, e.g has all the video samples first then all the\n audio ones. Video is playing but a lot of disk seeks may be happening.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;800&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_BUFFERING_END' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_BUFFERING_END' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_BUFFERING_END' class='name expandable'>MEDIA_INFO_BUFFERING_END</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>MediaPlayer is resuming playback after filling buffers. ...</div><div class='long'><p>MediaPlayer is resuming playback after filling buffers.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;702&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_BUFFERING_START' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_BUFFERING_START' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_BUFFERING_START' class='name expandable'>MEDIA_INFO_BUFFERING_START</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>MediaPlayer is temporarily pausing playback internally in order to\n buffer more data. ...</div><div class='long'><p>MediaPlayer is temporarily pausing playback internally in order to\n buffer more data.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;701&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_METADATA_UPDATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_METADATA_UPDATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_METADATA_UPDATE' class='name expandable'>MEDIA_INFO_METADATA_UPDATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A new set of metadata is available. ...</div><div class='long'><p>A new set of metadata is available.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;802&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_NOT_SEEKABLE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_NOT_SEEKABLE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_NOT_SEEKABLE' class='name expandable'>MEDIA_INFO_NOT_SEEKABLE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The media cannot be seeked (e.g live stream)\n @see android.media.MediaPlayer.OnInfoListener ...</div><div class='long'><p>The media cannot be seeked (e.g live stream)\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;801&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_STARTED_AS_NEXT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_STARTED_AS_NEXT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_STARTED_AS_NEXT' class='name expandable'>MEDIA_INFO_STARTED_AS_NEXT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The player was started because it was used as the next player for another\n player, which just completed playback. ...</div><div class='long'><p>The player was started because it was used as the next player for another\n player, which just completed playback.\n @see <a href=\"#!/api/android.media.MediaPlayer-method-setNextMediaPlayer\" rel=\"android.media.MediaPlayer-method-setNextMediaPlayer\" class=\"docClass\">android.media.MediaPlayer.setNextMediaPlayer</a>(MediaPlayer)\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_SUBTITLE_TIMED_OUT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_SUBTITLE_TIMED_OUT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_SUBTITLE_TIMED_OUT' class='name expandable'>MEDIA_INFO_SUBTITLE_TIMED_OUT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reading the subtitle track takes too long. ...</div><div class='long'><p>Reading the subtitle track takes too long.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;902&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_TIMED_TEXT_ERROR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_TIMED_TEXT_ERROR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_TIMED_TEXT_ERROR' class='name expandable'>MEDIA_INFO_TIMED_TEXT_ERROR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Failed to handle timed text track properly. ...</div><div class='long'><p>Failed to handle timed text track properly.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n\n<p> {@hide}</p>\n<p>Defaults to: <code>&quot;900&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_UNKNOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_UNKNOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_UNKNOWN' class='name expandable'>MEDIA_INFO_UNKNOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Unspecified media player info. ...</div><div class='long'><p>Unspecified media player info.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_UNSUPPORTED_SUBTITLE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_UNSUPPORTED_SUBTITLE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_UNSUPPORTED_SUBTITLE' class='name expandable'>MEDIA_INFO_UNSUPPORTED_SUBTITLE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Subtitle track was not supported by the media framework. ...</div><div class='long'><p>Subtitle track was not supported by the media framework.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;901&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_VIDEO_NOT_PLAYING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_VIDEO_NOT_PLAYING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_VIDEO_NOT_PLAYING' class='name expandable'>MEDIA_INFO_VIDEO_NOT_PLAYING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Informs that video is not playing. ...</div><div class='long'><p>Informs that video is not playing. Note that playback of the audio\n is not interrupted.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;805&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_VIDEO_RENDERING_START' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_VIDEO_RENDERING_START' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_VIDEO_RENDERING_START' class='name expandable'>MEDIA_INFO_VIDEO_RENDERING_START</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The player just pushed the very first video frame for rendering. ...</div><div class='long'><p>The player just pushed the very first video frame for rendering.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-MEDIA_INFO_VIDEO_TRACK_LAGGING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_INFO_VIDEO_TRACK_LAGGING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_INFO_VIDEO_TRACK_LAGGING' class='name expandable'>MEDIA_INFO_VIDEO_TRACK_LAGGING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The video is too complex for the decoder: it can't decode frames fast\n  enough. ...</div><div class='long'><p>The video is too complex for the decoder: it can't decode frames fast\n  enough. Possibly only the audio plays fine at this stage.\n @see <a href=\"#!/api/android.media.MediaPlayer.OnInfoListener\" rel=\"android.media.MediaPlayer.OnInfoListener\" class=\"docClass\">android.media.MediaPlayer.OnInfoListener</a></p>\n<p>Defaults to: <code>&quot;700&quot;</code></p></div></div></div><div id='property-MEDIA_MIMETYPE_TEXT_SUBRIP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-MEDIA_MIMETYPE_TEXT_SUBRIP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-MEDIA_MIMETYPE_TEXT_SUBRIP' class='name expandable'>MEDIA_MIMETYPE_TEXT_SUBRIP</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>MIME type for SubRip (SRT) container. ...</div><div class='long'><p>MIME type for SubRip (SRT) container. Used in addTimedTextSource APIs.</p>\n<p>Defaults to: <code>&quot;application/x-subrip&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>use <a href=\"#!/api/android.media.MediaFormat-property-MIMETYPE_TEXT_SUBRIP\" rel=\"android.media.MediaFormat-property-MIMETYPE_TEXT_SUBRIP\" class=\"docClass\">android.media.MediaFormat.MIMETYPE_TEXT_SUBRIP</a></p>\n\n        </div>\n</div></div></div><div id='property-METADATA_ALL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-METADATA_ALL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-METADATA_ALL' class='name expandable'>METADATA_ALL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to retrieve all the metadata. ...</div><div class='long'><p>Constant to retrieve all the metadata.\n// FIXME: unhide.\n// FIXME: add link to getMetadata(boolean, boolean)\n{@hide}</p>\n<p>Defaults to: <code>&quot;false&quot;</code></p></div></div></div><div id='property-METADATA_UPDATE_ONLY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-METADATA_UPDATE_ONLY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-METADATA_UPDATE_ONLY' class='name expandable'>METADATA_UPDATE_ONLY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant to retrieve only the new metadata since the last\ncall. ...</div><div class='long'><p>Constant to retrieve only the new metadata since the last\ncall.\n// FIXME: unhide.\n// FIXME: add link to getMetadata(boolean, boolean)\n{@hide}</p>\n<p>Defaults to: <code>&quot;true&quot;</code></p></div></div></div><div id='property-PREPARE_DRM_STATUS_PREPARATION_ERROR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-PREPARE_DRM_STATUS_PREPARATION_ERROR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-PREPARE_DRM_STATUS_PREPARATION_ERROR' class='name expandable'>PREPARE_DRM_STATUS_PREPARATION_ERROR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The DRM preparation has failed . ...</div><div class='long'><p>The DRM preparation has failed .</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR' class='name expandable'>PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The device required DRM provisioning but couldn't reach the provisioning server. ...</div><div class='long'><p>The device required DRM provisioning but couldn't reach the provisioning server.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR' class='name expandable'>PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The device required DRM provisioning but the provisioning server denied the request. ...</div><div class='long'><p>The device required DRM provisioning but the provisioning server denied the request.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-PREPARE_DRM_STATUS_SUCCESS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-PREPARE_DRM_STATUS_SUCCESS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-PREPARE_DRM_STATUS_SUCCESS' class='name expandable'>PREPARE_DRM_STATUS_SUCCESS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The status codes for android.media.MediaPlayer.OnDrmPreparedListener.onDrmPrepared listener. ...</div><div class='long'><p>The status codes for <a href=\"#!/api/android.media.MediaPlayer.OnDrmPreparedListener-method-onDrmPrepared\" rel=\"android.media.MediaPlayer.OnDrmPreparedListener-method-onDrmPrepared\" class=\"docClass\">android.media.MediaPlayer.OnDrmPreparedListener.onDrmPrepared</a> listener.</p>\n\n<p><p></p>\n\n<p>DRM preparation has succeeded.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-SEEK_CLOSEST' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-SEEK_CLOSEST' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-SEEK_CLOSEST' class='name expandable'>SEEK_CLOSEST</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This mode is used with int) to move media position to\na frame (not necessarily a key frame) associated with a data so...</div><div class='long'><p>This mode is used with int) to move media position to\na frame (not necessarily a key frame) associated with a data source that\nis located closest to or at the given time.</p>\n\n<p>@see <a href=\"#!/api/android.media.MediaPlayer-method-seekTo\" rel=\"android.media.MediaPlayer-method-seekTo\" class=\"docClass\">seekTo</a>(long, int)</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-SEEK_CLOSEST_SYNC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-SEEK_CLOSEST_SYNC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-SEEK_CLOSEST_SYNC' class='name expandable'>SEEK_CLOSEST_SYNC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This mode is used with int) to move media position to\na sync (or key) frame associated with a data source that is loc...</div><div class='long'><p>This mode is used with int) to move media position to\na sync (or key) frame associated with a data source that is located\nclosest to (in time) or at the given time.</p>\n\n<p>@see <a href=\"#!/api/android.media.MediaPlayer-method-seekTo\" rel=\"android.media.MediaPlayer-method-seekTo\" class=\"docClass\">seekTo</a>(long, int)</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-SEEK_NEXT_SYNC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-SEEK_NEXT_SYNC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-SEEK_NEXT_SYNC' class='name expandable'>SEEK_NEXT_SYNC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This mode is used with int) to move media position to\na sync (or key) frame associated with a data source that is loc...</div><div class='long'><p>This mode is used with int) to move media position to\na sync (or key) frame associated with a data source that is located\nright after or at the given time.</p>\n\n<p>@see <a href=\"#!/api/android.media.MediaPlayer-method-seekTo\" rel=\"android.media.MediaPlayer-method-seekTo\" class=\"docClass\">seekTo</a>(long, int)</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-SEEK_PREVIOUS_SYNC' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-SEEK_PREVIOUS_SYNC' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-SEEK_PREVIOUS_SYNC' class='name expandable'>SEEK_PREVIOUS_SYNC</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This mode is used with int) to move media position to\na sync (or key) frame associated with a data source that is loc...</div><div class='long'><p>This mode is used with int) to move media position to\na sync (or key) frame associated with a data source that is located\nright before or at the given time.</p>\n\n<p>@see <a href=\"#!/api/android.media.MediaPlayer-method-seekTo\" rel=\"android.media.MediaPlayer-method-seekTo\" class=\"docClass\">seekTo</a>(long, int)</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-VIDEO_SCALING_MODE_SCALE_TO_FIT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT' class='name expandable'>VIDEO_SCALING_MODE_SCALE_TO_FIT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies a video scaling mode. ...</div><div class='long'><p>Specifies a video scaling mode. The content is stretched to the\nsurface rendering area. When the surface has the same aspect ratio\nas the content, the aspect ratio of the content is maintained;\notherwise, the aspect ratio of the content is not maintained when video\nis being rendered. Unlike <a href=\"#!/api/android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING\" rel=\"android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING\" class=\"docClass\">VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</a>,\nthere is no content cropping with this video scaling mode.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING' class='name expandable'>VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies a video scaling mode. ...</div><div class='long'><p>Specifies a video scaling mode. The content is scaled, maintaining\nits aspect ratio. The whole surface area is always used. When the\naspect ratio of the content is the same as the surface, no content\nis cropped; otherwise, content is cropped to fit the surface.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addOnRoutingChangedListener' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-addOnRoutingChangedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-addOnRoutingChangedListener' class='name expandable'>addOnRoutingChangedListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds an android.media.AudioRouting.OnRoutingChangedListener to receive notifications of routing\n changes on this Medi...</div><div class='long'><p>Adds an android.media.AudioRouting.OnRoutingChangedListener to receive notifications of routing\n changes on this MediaPlayer.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {AudioRouting.OnRoutingChangedListener}<div class='sub-desc'><p>The AudioRouting.OnRoutingChangedListener interface to receive\n notifications of rerouting events.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>Specifies the Handler object for the thread on which to execute\n the callback. If <code>null</code>, the handler on the main looper will be used.</p>\n</div></li></ul></div></div></div><div id='method-addTimedTextSource' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-addTimedTextSource' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-addTimedTextSource' class='name expandable'>addTimedTextSource</a>( <span class='pre'>fd, offset, length, mime</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds an external timed text file (FileDescriptor). ...</div><div class='long'><p>Adds an external timed text file (FileDescriptor).</p>\n\n<p> It is the caller's responsibility to close the file descriptor.\n It is safe to do so as soon as this call returns.</p>\n\n<p> Currently supported format is SubRip. Note that a single external timed text source may\n contain multiple tracks in it. One can find the total number of available tracks\n using <a href=\"#!/api/android.media.MediaPlayer-method-getTrackInfo\" rel=\"android.media.MediaPlayer-method-getTrackInfo\" class=\"docClass\">getTrackInfo</a>() to see what additional tracks become available\n after this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fd</span> : Object {FileDescriptor}<div class='sub-desc'><p>the FileDescriptor for the file you want to play</p>\n</div></li><li><span class='pre'>offset</span> : Number<div class='sub-desc'><p>the offset into the file where the data to be played starts, in bytes</p>\n</div></li><li><span class='pre'>length</span> : Number<div class='sub-desc'><p>the length in bytes of the data to be played</p>\n</div></li><li><span class='pre'>mime</span> : String<div class='sub-desc'><p>The mime type of the file. Must be one of the mime types listed above.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the mimeType is not supported.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if called in an invalid state.</p>\n</div></li></ul></div></div></div><div id='method-attachAuxEffect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-attachAuxEffect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-attachAuxEffect' class='name expandable'>attachAuxEffect</a>( <span class='pre'>effectId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attaches an auxiliary effect to the player. ...</div><div class='long'><p>Attaches an auxiliary effect to the player. A typical auxiliary effect is a reverberation\n effect which can be applied on any sound source that directs a certain amount of its\n energy to this effect. This amount is defined by setAuxEffectSendLevel().\n See <a href=\"#!/api/android.media.MediaPlayer-method-setAuxEffectSendLevel\" rel=\"android.media.MediaPlayer-method-setAuxEffectSendLevel\" class=\"docClass\">setAuxEffectSendLevel</a>(float).\n <p>After creating an auxiliary effect (e.g.\n android.media.audiofx.EnvironmentalReverb), retrieve its ID with\n android.media.audiofx.AudioEffect.getId() and use it when calling this method\n to attach the player to the effect.\n <p>To detach the effect from the player, call this method with a null effect id.\n <p>This method must be called after one of the overloaded <code> setDataSource </code>\n methods.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>effectId</span> : Number<div class='sub-desc'><p>system wide unique id of the effect to attach</p>\n</div></li></ul></div></div></div><div id='method-clearOnMediaTimeDiscontinuityListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-clearOnMediaTimeDiscontinuityListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-clearOnMediaTimeDiscontinuityListener' class='name expandable'>clearOnMediaTimeDiscontinuityListener</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clears the listener previously set with\n setOnMediaTimeDiscontinuityListener(OnMediaTimeDiscontinuityListener)\n or Ha...</div><div class='long'><p>Clears the listener previously set with\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnMediaTimeDiscontinuityListener\" rel=\"android.media.MediaPlayer-method-setOnMediaTimeDiscontinuityListener\" class=\"docClass\">setOnMediaTimeDiscontinuityListener</a>(OnMediaTimeDiscontinuityListener)\n or Handler)</p>\n</div></div></div><div id='method-clearOnSubtitleDataListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-clearOnSubtitleDataListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-clearOnSubtitleDataListener' class='name expandable'>clearOnSubtitleDataListener</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clears the listener previously set with\n setOnSubtitleDataListener(OnSubtitleDataListener) or\n Handler). ...</div><div class='long'><p>Clears the listener previously set with\n <a href=\"#!/api/android.media.MediaPlayer-method-setOnSubtitleDataListener\" rel=\"android.media.MediaPlayer-method-setOnSubtitleDataListener\" class=\"docClass\">setOnSubtitleDataListener</a>(OnSubtitleDataListener) or\n Handler).</p>\n</div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-create' class='name expandable'>create</a>( <span class='pre'>context, resid, audioAttributes, audioSessionId</span> ) : Object {android.media.MediaPlayer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Same factory method as int) but that lets you specify the audio\n attributes and session ID to be used by the new Medi...</div><div class='long'><p>Same factory method as int) but that lets you specify the audio\n attributes and session ID to be used by the new MediaPlayer instance.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>the Context to use</p>\n</div></li><li><span class='pre'>resid</span> : Number<div class='sub-desc'><p>the raw resource id (<var>R.raw.&lt;something></var>) for\n              the resource to use as the datasource</p>\n</div></li><li><span class='pre'>audioAttributes</span> : Object {AudioAttributes}<div class='sub-desc'><p>the AudioAttributes to be used by the media player.</p>\n</div></li><li><span class='pre'>audioSessionId</span> : Number<div class='sub-desc'><p>the audio session ID to be used by the media player,\n     see AudioManager.generateAudioSessionId() to obtain a new session.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.MediaPlayer}</span><div class='sub-desc'><p>a MediaPlayer object, or null if creation failed</p>\n</div></li></ul></div></div></div><div id='method-createVolumeShaper' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-createVolumeShaper' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-createVolumeShaper' class='name expandable'>createVolumeShaper</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-deprecateStreamTypeForPlayback' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/android.media.PlayerBase' rel='android.media.PlayerBase' class='defined-in docClass'>android.media.PlayerBase</a><br/><a href='source/PlayerBase.html#android-media-PlayerBase-method-deprecateStreamTypeForPlayback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.PlayerBase-method-deprecateStreamTypeForPlayback' class='name expandable'>deprecateStreamTypeForPlayback</a>( <span class='pre'>streamType, streamType</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>streamType</span> : Number<div class='sub-desc'><p>the stream type to check</p>\n</div></li><li><span class='pre'>streamType</span> : Object<div class='sub-desc'><p>the stream type to check</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException</p>\n</div></li></ul></div></div></div><div id='method-deselectTrack' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-deselectTrack' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-deselectTrack' class='name expandable'>deselectTrack</a>( <span class='pre'>index</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Deselect a track. ...</div><div class='long'><p>Deselect a track.\n <p>\n Currently, the track must be a timed text track and no audio or video tracks can be\n deselected. If the timed text track identified by index has not been\n selected before, it throws an exception.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>the index of the track to be deselected. The valid range of the index\n is 0..total number of tracks - 1. The total number of tracks as well as the type of\n each individual track can be found by calling getTrackInfo() method.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if called in an invalid state.\n@see <a href=\"#!/api/android.media.MediaPlayer-method-getTrackInfo\" rel=\"android.media.MediaPlayer-method-getTrackInfo\" class=\"docClass\">android.media.MediaPlayer.getTrackInfo</a></p>\n</div></li></ul></div></div></div><div id='method-getAudioSessionId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getAudioSessionId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getAudioSessionId' class='name expandable'>getAudioSessionId</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the audio session ID. ...</div><div class='long'><p>Returns the audio session ID.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the audio session ID. {@see <a href=\"#!/api/android.media.MediaPlayer-method-setAudioSessionId\" rel=\"android.media.MediaPlayer-method-setAudioSessionId\" class=\"docClass\">setAudioSessionId</a>(int)}\n Note that the audio session ID is 0 only if a problem occured when the MediaPlayer was contructed.</p>\n</div></li></ul></div></div></div><div id='method-getCurrentPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getCurrentPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getCurrentPosition' class='name expandable'>getCurrentPosition</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current playback position. ...</div><div class='long'><p>Gets the current playback position.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current position in milliseconds</p>\n</div></li></ul></div></div></div><div id='method-getDrmInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getDrmInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getDrmInfo' class='name expandable'>getDrmInfo</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the DRM Info associated with the current source ...</div><div class='long'><p>Retrieves the DRM Info associated with the current source</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if called before prepare()</p>\n</div></li></ul></div></div></div><div id='method-getDrmPropertyString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getDrmPropertyString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getDrmPropertyString' class='name expandable'>getDrmPropertyString</a>( <span class='pre'>propertyName</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Read a DRM engine plugin String property value, given the property name string. ...</div><div class='long'><p>Read a DRM engine plugin String property value, given the property name string.\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>propertyName</span> : String<div class='sub-desc'><p>the property name</p>\n\n<p> Standard fields names are:\n MediaDrm.PROPERTY_VENDOR, MediaDrm.PROPERTY_VERSION,\n MediaDrm.PROPERTY_DESCRIPTION, MediaDrm.PROPERTY_ALGORITHMS</p>\n</div></li></ul></div></div></div><div id='method-getDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getDuration' class='name expandable'>getDuration</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the duration of the file. ...</div><div class='long'><p>Gets the duration of the file.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the duration in milliseconds, if no duration is available\n         (for example, if streaming live content), -1 is returned.</p>\n</div></li></ul></div></div></div><div id='method-getKeyRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getKeyRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getKeyRequest' class='name expandable'>getKeyRequest</a>( <span class='pre'>keySetId, initData, mimeType, keyType, optionalParameters</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>A key request/response exchange occurs between the app and a license server\n to obtain or release keys used to decryp...</div><div class='long'><p>A key request/response exchange occurs between the app and a license server\n to obtain or release keys used to decrypt encrypted content.\n <p>\n getKeyRequest() is used to obtain an opaque key request byte array that is\n delivered to the license server.  The opaque key request byte array is returned\n in KeyRequest.data.  The recommended URL to deliver the key request to is\n returned in KeyRequest.defaultUrl.\n <p>\n After the app has received the key request response from the server,\n it should deliver to the response to the DRM engine plugin using the method\n <a href=\"#!/api/android.media.MediaPlayer-method-provideKeyResponse\" rel=\"android.media.MediaPlayer-method-provideKeyResponse\" class=\"docClass\">provideKeyResponse</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keySetId</span> : Object {byte[]}<div class='sub-desc'><p>is the key-set identifier of the offline keys being released when keyType is\n MediaDrm.KEY_TYPE_RELEASE. It should be set to null for other key requests, when\n keyType is MediaDrm.KEY_TYPE_STREAMING or MediaDrm.KEY_TYPE_OFFLINE.</p>\n</div></li><li><span class='pre'>initData</span> : Object {byte[]}<div class='sub-desc'><p>is the container-specific initialization data when the keyType is\n MediaDrm.KEY_TYPE_STREAMING or MediaDrm.KEY_TYPE_OFFLINE. Its meaning is\n interpreted based on the mime type provided in the mimeType parameter.  It could\n contain, for example, the content ID, key ID or other data obtained from the content\n metadata that is required in generating the key request.\n When the keyType is MediaDrm.KEY_TYPE_RELEASE, it should be set to null.</p>\n</div></li><li><span class='pre'>mimeType</span> : String<div class='sub-desc'><p>identifies the mime type of the content</p>\n</div></li><li><span class='pre'>keyType</span> : Number<div class='sub-desc'><p>specifies the type of the request. The request may be to acquire\n keys for streaming, MediaDrm.KEY_TYPE_STREAMING, or for offline content\n MediaDrm.KEY_TYPE_OFFLINE, or to release previously acquired\n keys (MediaDrm.KEY_TYPE_RELEASE), which are identified by a keySetId.</p>\n</div></li><li><span class='pre'>optionalParameters</span> : Object {java.util.Map}<div class='sub-desc'><p>are included in the key request message to\n allow a client application to provide additional message parameters to the server.\n This may be {@code null} if no additional parameters are to be sent.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoDrmSchemeException if there is no active DRM session</p>\n</div></li></ul></div></div></div><div id='method-getMetadata' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getMetadata' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getMetadata' class='name expandable'>getMetadata</a>( <span class='pre'>update_only, apply_filter</span> ) : Object {android.media.Metadata}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the media metadata. ...</div><div class='long'><p>Gets the media metadata.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>update_only</span> : Boolean<div class='sub-desc'><p>controls whether the full set of available\n metadata is returned or just the set that changed since the\n last call. See {@see <a href=\"#!/api/android.media.MediaPlayer-property-METADATA_UPDATE_ONLY\" rel=\"android.media.MediaPlayer-property-METADATA_UPDATE_ONLY\" class=\"docClass\">METADATA_UPDATE_ONLY</a>} and {@see\n <a href=\"#!/api/android.media.MediaPlayer-property-METADATA_ALL\" rel=\"android.media.MediaPlayer-property-METADATA_ALL\" class=\"docClass\">METADATA_ALL</a>}.</p>\n</div></li><li><span class='pre'>apply_filter</span> : Boolean<div class='sub-desc'><p>if true only metadata that matches the\n filter is returned. See {@see <a href=\"#!/api/android.media.MediaPlayer-property-APPLY_METADATA_FILTER\" rel=\"android.media.MediaPlayer-property-APPLY_METADATA_FILTER\" class=\"docClass\">APPLY_METADATA_FILTER</a>} and {@see\n <a href=\"#!/api/android.media.MediaPlayer-property-BYPASS_METADATA_FILTER\" rel=\"android.media.MediaPlayer-property-BYPASS_METADATA_FILTER\" class=\"docClass\">BYPASS_METADATA_FILTER</a>}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.Metadata}</span><div class='sub-desc'><p>The metadata, possibly empty. null if an error occured.\n     // FIXME: unhide.\n {@hide}</p>\n</div></li></ul></div></div></div><div id='method-getMetrics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getMetrics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getMetrics' class='name expandable'>getMetrics</a>( <span class='pre'></span> ) : Object {android.os.PersistableBundle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return Metrics data about the current player. ...</div><div class='long'><p>Return Metrics data about the current player.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.PersistableBundle}</span><div class='sub-desc'><p>a PersistableBundle containing the set of attributes and values\n available for the media being handled by this instance of MediaPlayer\n The attributes are descibed in MetricsConstants.</p>\n\n<p>  Additional vendor-specific fields may also be present in\n  the return value.</p>\n</div></li></ul></div></div></div><div id='method-getPlaybackParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getPlaybackParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getPlaybackParams' class='name expandable'>getPlaybackParams</a>( <span class='pre'></span> ) : Object {android.media.PlaybackParams}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the playback params, containing the current playback rate. ...</div><div class='long'><p>Gets the playback params, containing the current playback rate.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.PlaybackParams}</span><div class='sub-desc'><p>the playback params.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized.</p>\n</div></li></ul></div></div></div><div id='method-getPreferredDevice' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getPreferredDevice' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getPreferredDevice' class='name expandable'>getPreferredDevice</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the selected output specified by setPreferredDevice. ...</div><div class='long'><p>Returns the selected output specified by <a href=\"#!/api/android.media.MediaPlayer-method-setPreferredDevice\" rel=\"android.media.MediaPlayer-method-setPreferredDevice\" class=\"docClass\">setPreferredDevice</a>. Note that this\n is not guaranteed to correspond to the actual device being used for playback.</p>\n</div></div></div><div id='method-getRoutedDevice' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getRoutedDevice' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getRoutedDevice' class='name expandable'>getRoutedDevice</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an android.media.AudioDeviceInfo identifying the current routing of this MediaPlayer\n Note: The query is only...</div><div class='long'><p>Returns an <a href=\"#!/api/android.media.AudioDeviceInfo\" rel=\"android.media.AudioDeviceInfo\" class=\"docClass\">android.media.AudioDeviceInfo</a> identifying the current routing of this MediaPlayer\n Note: The query is only valid if the MediaPlayer is currently playing.\n If the player is not playing, the returned device can be null or correspond to previously\n selected device when the player was last active.</p>\n</div></div></div><div id='method-getSelectedTrack' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getSelectedTrack' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getSelectedTrack' class='name expandable'>getSelectedTrack</a>( <span class='pre'>trackType</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the index of the audio, video, or subtitle track currently selected for playback,\n The return value is an ind...</div><div class='long'><p>Returns the index of the audio, video, or subtitle track currently selected for playback,\n The return value is an index into the array returned by <a href=\"#!/api/android.media.MediaPlayer-method-getTrackInfo\" rel=\"android.media.MediaPlayer-method-getTrackInfo\" class=\"docClass\">getTrackInfo</a>(), and can\n be used in calls to <a href=\"#!/api/android.media.MediaPlayer-method-selectTrack\" rel=\"android.media.MediaPlayer-method-selectTrack\" class=\"docClass\">selectTrack</a>(int) or <a href=\"#!/api/android.media.MediaPlayer-method-deselectTrack\" rel=\"android.media.MediaPlayer-method-deselectTrack\" class=\"docClass\">deselectTrack</a>(int).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>trackType</span> : Number<div class='sub-desc'><p>should be one of TrackInfo.MEDIA_TRACK_TYPE_VIDEO,\n TrackInfo.MEDIA_TRACK_TYPE_AUDIO, or\n TrackInfo.MEDIA_TRACK_TYPE_SUBTITLE</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>index of the audio, video, or subtitle track currently selected for playback;\n a negative integer is returned when there is no selected track for {@code trackType} or\n when {@code trackType} is not one of audio, video, or subtitle.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if called after release()\n@see <a href=\"#!/api/android.media.MediaPlayer-method-getTrackInfo\" rel=\"android.media.MediaPlayer-method-getTrackInfo\" class=\"docClass\">getTrackInfo</a>()\n@see <a href=\"#!/api/android.media.MediaPlayer-method-selectTrack\" rel=\"android.media.MediaPlayer-method-selectTrack\" class=\"docClass\">selectTrack</a>(int)\n@see <a href=\"#!/api/android.media.MediaPlayer-method-deselectTrack\" rel=\"android.media.MediaPlayer-method-deselectTrack\" class=\"docClass\">deselectTrack</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-getSyncParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getSyncParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getSyncParams' class='name expandable'>getSyncParams</a>( <span class='pre'></span> ) : Object {android.media.SyncParams}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the A/V sync mode. ...</div><div class='long'><p>Gets the A/V sync mode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.SyncParams}</span><div class='sub-desc'><p>the A/V sync params</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized.</p>\n</div></li></ul></div></div></div><div id='method-getTimestamp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getTimestamp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getTimestamp' class='name expandable'>getTimestamp</a>( <span class='pre'></span> ) : Object {android.media.MediaTimestamp}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get current playback position as a android.media.MediaTimestamp. ...</div><div class='long'><p>Get current playback position as a <a href=\"#!/api/android.media.MediaTimestamp\" rel=\"android.media.MediaTimestamp\" class=\"docClass\">android.media.MediaTimestamp</a>.\n <p>\n The MediaTimestamp represents how the media time correlates to the system time in\n a linear fashion using an anchor and a clock rate. During regular playback, the media\n time moves fairly constantly (though the anchor frame may be rebased to a current\n system time, the linear correlation stays steady). Therefore, this method does not\n need to be called often.\n <p>\n To help users get current playback position, this method always anchors the timestamp\n to the current system time, so\n <a href=\"#!/api/android.media.MediaTimestamp-method-getAnchorMediaTimeUs\" rel=\"android.media.MediaTimestamp-method-getAnchorMediaTimeUs\" class=\"docClass\">android.media.MediaTimestamp.getAnchorMediaTimeUs</a> can be used as current playback position.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.MediaTimestamp}</span><div class='sub-desc'><p>a MediaTimestamp object if a timestamp is available, or {@code null} if no timestamp\n         is available, e.g. because the media player has not been initialized.\n@see MediaTimestamp</p>\n</div></li></ul></div></div></div><div id='method-getTrackInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getTrackInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getTrackInfo' class='name expandable'>getTrackInfo</a>( <span class='pre'></span> ) : Object {android.media.MediaPlayer.TrackInfo}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an array of track information. ...</div><div class='long'><p>Returns an array of track information.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.MediaPlayer.TrackInfo}</span><div class='sub-desc'><p>Array of track info. The total number of tracks is the array length.\n Must be called again if an external timed text source has been added after any of the\n addTimedTextSource methods are called.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if it is called in an invalid state.</p>\n</div></li></ul></div></div></div><div id='method-getVideoHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getVideoHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getVideoHeight' class='name expandable'>getVideoHeight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the height of the video. ...</div><div class='long'><p>Returns the height of the video.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the height of the video, or 0 if there is no video,\n no display surface was set, or the height has not been determined\n yet. The OnVideoSizeChangedListener can be registered via\n setOnVideoSizeChangedListener(OnVideoSizeChangedListener)\n to provide a notification when the height is available.</p>\n</div></li></ul></div></div></div><div id='method-getVideoWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-getVideoWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-getVideoWidth' class='name expandable'>getVideoWidth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the width of the video. ...</div><div class='long'><p>Returns the width of the video.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the width of the video, or 0 if there is no video,\n no display surface was set, or the width has not been determined\n yet. The OnVideoSizeChangedListener can be registered via\n setOnVideoSizeChangedListener(OnVideoSizeChangedListener)\n to provide a notification when the width is available.</p>\n</div></li></ul></div></div></div><div id='method-invoke' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-invoke' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-invoke' class='name expandable'>invoke</a>( <span class='pre'>request, reply</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Invoke a generic method on the native player using opaque\n parcels for the request and reply. ...</div><div class='long'><p>Invoke a generic method on the native player using opaque\n parcels for the request and reply. Both payloads' format is a\n convention between the java caller and the native player.\n Must be called after setDataSource to make sure a native player\n exists. On failure, a RuntimeException is thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>request</span> : Object {Parcel}<div class='sub-desc'><p>Parcel with the data for the extension. The\n caller must use newRequest() to get one.</p>\n</div></li><li><span class='pre'>reply</span> : Object {Parcel}<div class='sub-desc'><p>Output parcel with the data returned by the\n native player.\n {@hide}</p>\n</div></li></ul></div></div></div><div id='method-isLooping' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-isLooping' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-isLooping' class='name expandable'>isLooping</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks whether the MediaPlayer is looping or non-looping. ...</div><div class='long'><p>Checks whether the MediaPlayer is looping or non-looping.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the MediaPlayer is currently looping, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-isPlaying' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-isPlaying' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-isPlaying' class='name expandable'>isPlaying</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks whether the MediaPlayer is playing. ...</div><div class='long'><p>Checks whether the MediaPlayer is playing.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if currently playing, false otherwise</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized or has been released.</p>\n</div></li></ul></div></div></div><div id='method-native_pullBatteryData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-native_pullBatteryData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-native_pullBatteryData' class='name expandable'>native_pullBatteryData</a>( <span class='pre'>reply</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>reply</span> : Object {Parcel}<div class='sub-desc'><p>Parcel with audio/video duration info for battery\n                    tracking usage</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The status code.\n {@hide}</p>\n</div></li></ul></div></div></div><div id='method-newRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-newRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-newRequest' class='name expandable'>newRequest</a>( <span class='pre'></span> ) : Object {android.os.Parcel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a request parcel which can be routed to the native media\n player using Parcel). ...</div><div class='long'><p>Create a request parcel which can be routed to the native media\n player using Parcel). The Parcel\n returned has the proper InterfaceToken set. The caller should\n not overwrite that token, i.e it can only append data to the\n Parcel.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.Parcel}</span><div class='sub-desc'><p>A parcel suitable to hold a request for the native\n player.\n {@hide}</p>\n</div></li></ul></div></div></div><div id='method-pause' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-pause' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-pause' class='name expandable'>pause</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Pauses playback. ...</div><div class='long'><p>Pauses playback. Call start() to resume.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized.</p>\n</div></li></ul></div></div></div><div id='method-prepare' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-prepare' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-prepare' class='name expandable'>prepare</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Prepares the player for playback, synchronously. ...</div><div class='long'><p>Prepares the player for playback, synchronously.</p>\n\n<p> After setting the datasource and the display surface, you need to either\n call prepare() or prepareAsync(). For files, it is OK to call prepare(),\n which blocks until MediaPlayer is ready for playback.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if it is called in an invalid state</p>\n</div></li></ul></div></div></div><div id='method-prepareAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-prepareAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-prepareAsync' class='name expandable'>prepareAsync</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Prepares the player for playback, asynchronously. ...</div><div class='long'><p>Prepares the player for playback, asynchronously.</p>\n\n<p> After setting the datasource and the display surface, you need to either\n call prepare() or prepareAsync(). For streams, you should call prepareAsync(),\n which returns immediately, rather than blocking until enough data has been\n buffered.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if it is called in an invalid state</p>\n</div></li></ul></div></div></div><div id='method-prepareDrm' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-prepareDrm' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-prepareDrm' class='name expandable'>prepareDrm</a>( <span class='pre'>uuid</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Prepares the DRM for the current source\n \n If {@code OnDrmConfigHelper} is registered, it will be called during\n prep...</div><div class='long'><p>Prepares the DRM for the current source\n <p>\n If {@code OnDrmConfigHelper} is registered, it will be called during\n preparation to allow configuration of the DRM properties before opening the\n DRM session. Note that the callback is called synchronously in the thread that called\n {@code prepareDrm}. It should be used only for a series of {@code getDrmPropertyString}\n and {@code setDrmPropertyString} calls and refrain from any lengthy operation.\n <p>\n If the device has not been provisioned before, this call also provisions the device\n which involves accessing the provisioning server and can take a variable time to\n complete depending on the network connectivity.\n If {@code OnDrmPreparedListener} is registered, prepareDrm() runs in non-blocking\n mode by launching the provisioning in the background and returning. The listener\n will be called when provisioning and preparation has finished. If a\n {@code OnDrmPreparedListener} is not registered, prepareDrm() waits till provisioning\n and preparation has finished, i.e., runs in blocking mode.\n <p>\n If {@code OnDrmPreparedListener} is registered, it is called to indicate the DRM\n session being ready. The application should not make any assumption about its call\n sequence (e.g., before or after prepareDrm returns), or the thread context that will\n execute the listener (unless the listener is registered with a handler thread).\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uuid</span> : Object {UUID}<div class='sub-desc'><p>The UUID of the crypto scheme. If not known beforehand, it can be retrieved\n from the source through {@code getDrmInfo} or registering a {@code onDrmInfoListener}.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException              if called before prepare(), or the DRM was\n                                            prepared already</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedSchemeException         if the crypto scheme is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ResourceBusyException              if required DRM resources are in use</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ProvisioningNetworkErrorException  if provisioning is required but failed due to a\n                                            network error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ProvisioningServerErrorException   if provisioning is required but failed due to\n                                            the request denied by the provisioning server</p>\n</div></li></ul></div></div></div><div id='method-provideKeyResponse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-provideKeyResponse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-provideKeyResponse' class='name expandable'>provideKeyResponse</a>( <span class='pre'>keySetId, response</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>A key response is received from the license server by the app, then it is\n provided to the DRM engine plugin using pr...</div><div class='long'><p>A key response is received from the license server by the app, then it is\n provided to the DRM engine plugin using provideKeyResponse. When the\n response is for an offline key request, a key-set identifier is returned that\n can be used to later restore the keys to a new session with the method\n {@ link # restoreKeys}.\n When the response is for a streaming or release request, null is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keySetId</span> : Object {byte[]}<div class='sub-desc'><p>When the response is for a release request, keySetId identifies\n the saved key associated with the release request (i.e., the same keySetId\n passed to the earlier {@ link # getKeyRequest} call. It MUST be null when the\n response is for either streaming or offline key requests.</p>\n</div></li><li><span class='pre'>response</span> : Object {byte[]}<div class='sub-desc'><p>the byte array response from the server</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoDrmSchemeException if there is no active DRM session</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DeniedByServerException if the response indicates that the\n server rejected the request</p>\n</div></li></ul></div></div></div><div id='method-release' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-release' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-release' class='name expandable'>release</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases resources associated with this MediaPlayer object. ...</div><div class='long'><p>Releases resources associated with this MediaPlayer object.\n It is considered good practice to call this method when you're\n done using the MediaPlayer. In particular, whenever an Activity\n of an application is paused (its onPause() method is called),\n or stopped (its onStop() method is called), this method should be\n invoked to release the MediaPlayer object, unless the application\n has a special need to keep the object around. In addition to\n unnecessary resources (such as memory and instances of codecs)\n being held, failure to call this method immediately if a\n MediaPlayer object is no longer needed may also lead to\n continuous battery consumption for mobile devices, and playback\n failure for other applications if no multiple instances of the\n same codec are supported on a device. Even if multiple instances\n of the same codec are supported, some performance degradation\n may be expected when unnecessary multiple instances are used\n at the same time.</p>\n</div></div></div><div id='method-releaseDrm' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-releaseDrm' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-releaseDrm' class='name expandable'>releaseDrm</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases the DRM session\n \n The player has to have an active DRM session and be in stopped, or prepared\n state before...</div><div class='long'><p>Releases the DRM session\n <p>\n The player has to have an active DRM session and be in stopped, or prepared\n state before this call is made.\n A {@code reset()} call will release the DRM session implicitly.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NoDrmSchemeException if there is no active DRM session to release</p>\n</div></li></ul></div></div></div><div id='method-removeOnRoutingChangedListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-removeOnRoutingChangedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-removeOnRoutingChangedListener' class='name expandable'>removeOnRoutingChangedListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes an android.media.AudioRouting.OnRoutingChangedListener which has been previously added\n to receive rerouting ...</div><div class='long'><p>Removes an android.media.AudioRouting.OnRoutingChangedListener which has been previously added\n to receive rerouting notifications.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {AudioRouting.OnRoutingChangedListener}<div class='sub-desc'><p>The previously added AudioRouting.OnRoutingChangedListener interface\n to remove.</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets the MediaPlayer to its uninitialized state. ...</div><div class='long'><p>Resets the MediaPlayer to its uninitialized state. After calling\n this method, you will have to initialize it again by setting the\n data source and calling prepare().</p>\n</div></div></div><div id='method-restoreKeys' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-restoreKeys' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-restoreKeys' class='name expandable'>restoreKeys</a>( <span class='pre'>keySetId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Restore persisted offline keys into a new session. ...</div><div class='long'><p>Restore persisted offline keys into a new session.  keySetId identifies the\n keys to load, obtained from a prior call to <a href=\"#!/api/android.media.MediaPlayer-method-provideKeyResponse\" rel=\"android.media.MediaPlayer-method-provideKeyResponse\" class=\"docClass\">provideKeyResponse</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keySetId</span> : Object {byte[]}<div class='sub-desc'><p>identifies the saved key set to restore</p>\n</div></li></ul></div></div></div><div id='method-seekTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-seekTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-seekTo' class='name expandable'>seekTo</a>( <span class='pre'>msec</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Seeks to specified time position. ...</div><div class='long'><p>Seeks to specified time position.\n Same as int) with {@code mode = SEEK_PREVIOUS_SYNC}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>msec</span> : Number<div class='sub-desc'><p>the offset in milliseconds from the start to seek to</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized</p>\n</div></li></ul></div></div></div><div id='method-selectTrack' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-selectTrack' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-selectTrack' class='name expandable'>selectTrack</a>( <span class='pre'>index</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Selects a track. ...</div><div class='long'><p>Selects a track.\n <p>\n If a MediaPlayer is in invalid state, it throws an IllegalStateException exception.\n If a MediaPlayer is in <em>Started</em> state, the selected track is presented immediately.\n If a MediaPlayer is not in Started state, it just marks the track to be played.\n </p>\n <p>\n In any valid state, if it is called multiple times on the same type of track (ie. Video,\n Audio, Timed Text), the most recent one will be chosen.\n </p>\n <p>\n The first audio and video tracks are selected by default if available, even though\n this method is not called. However, no timed text track will be selected until\n this function is called.\n </p>\n <p>\n Currently, only timed text, subtitle or audio tracks can be selected via this method.\n In addition, the support for selecting an audio track at runtime is pretty limited\n in that an audio track can only be selected in the <em>Prepared</em> state.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>the index of the track to be selected. The valid range of the index\n is 0..total number of track - 1. The total number of tracks as well as the type of\n each individual track can be found by calling getTrackInfo() method.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if called in an invalid state.\n@see <a href=\"#!/api/android.media.MediaPlayer-method-getTrackInfo\" rel=\"android.media.MediaPlayer-method-getTrackInfo\" class=\"docClass\">android.media.MediaPlayer.getTrackInfo</a></p>\n</div></li></ul></div></div></div><div id='method-setAudioAttributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setAudioAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setAudioAttributes' class='name expandable'>setAudioAttributes</a>( <span class='pre'>attributes</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the audio attributes for this MediaPlayer. ...</div><div class='long'><p>Sets the audio attributes for this MediaPlayer.\n See <a href=\"#!/api/android.media.AudioAttributes\" rel=\"android.media.AudioAttributes\" class=\"docClass\">android.media.AudioAttributes</a> for how to build and configure an instance of this class.\n You must call this method before <a href=\"#!/api/android.media.MediaPlayer-method-prepare\" rel=\"android.media.MediaPlayer-method-prepare\" class=\"docClass\">prepare</a>() or <a href=\"#!/api/android.media.MediaPlayer-method-prepareAsync\" rel=\"android.media.MediaPlayer-method-prepareAsync\" class=\"docClass\">prepareAsync</a>() in order\n for the audio attributes to become effective thereafter.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributes</span> : Object {AudioAttributes}<div class='sub-desc'><p>a non-null set of audio attributes</p>\n</div></li></ul></div></div></div><div id='method-setAudioSessionId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setAudioSessionId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setAudioSessionId' class='name expandable'>setAudioSessionId</a>( <span class='pre'>sessionId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the audio session ID. ...</div><div class='long'><p>Sets the audio session ID.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sessionId</span> : Number<div class='sub-desc'><p>the audio session ID.\n The audio session ID is a system wide unique identifier for the audio stream played by\n this MediaPlayer instance.\n The primary use of the audio session ID  is to associate audio effects to a particular\n instance of MediaPlayer: if an audio session ID is provided when creating an audio effect,\n this effect will be applied only to the audio content of media players within the same\n audio session and not to the output mix.\n When created, a MediaPlayer instance automatically generates its own audio session ID.\n However, it is possible to force this player to be part of an already existing audio session\n by calling this method.\n This method must be called before one of the overloaded <code> setDataSource </code> methods.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if it is called in an invalid state</p>\n</div></li></ul></div></div></div><div id='method-setAudioStreamType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setAudioStreamType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setAudioStreamType' class='name expandable'>setAudioStreamType</a>( <span class='pre'>streamtype</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Sets the audio stream type for this MediaPlayer. ...</div><div class='long'><p>Sets the audio stream type for this MediaPlayer. See <a href=\"#!/api/android.media.AudioManager\" rel=\"android.media.AudioManager\" class=\"docClass\">android.media.AudioManager</a>\n for a list of stream types. Must call this method before prepare() or\n prepareAsync() in order for the target stream type to become effective\n thereafter.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>use setAudioAttributes(AudioAttributes)\n@see <a href=\"#!/api/android.media.AudioManager\" rel=\"android.media.AudioManager\" class=\"docClass\">android.media.AudioManager</a></p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>streamtype</span> : Number<div class='sub-desc'><p>the audio stream type</p>\n</div></li></ul></div></div></div><div id='method-setAuxEffectSendLevel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setAuxEffectSendLevel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setAuxEffectSendLevel' class='name expandable'>setAuxEffectSendLevel</a>( <span class='pre'>level</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the send level of the player to the attached auxiliary effect. ...</div><div class='long'><p>Sets the send level of the player to the attached auxiliary effect.\n See <a href=\"#!/api/android.media.MediaPlayer-method-attachAuxEffect\" rel=\"android.media.MediaPlayer-method-attachAuxEffect\" class=\"docClass\">attachAuxEffect</a>(int). The level value range is 0 to 1.0.\n <p>By default the send level is 0, so even if an effect is attached to the player\n this method must be called for the effect to be applied.\n <p>Note that the passed level value is a raw scalar. UI controls should be scaled\n logarithmically: the gain applied by audio framework ranges from -72dB to 0dB,\n so an appropriate conversion from linear UI input x to level is:\n x == 0 -> level = 0\n 0 &lt; x &lt;= R -> level = 10<sup>72*(x-R)/20/R</sup></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>level</span> : Number<div class='sub-desc'><p>send level scalar</p>\n</div></li></ul></div></div></div><div id='method-setDataSource' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setDataSource' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setDataSource' class='name expandable'>setDataSource</a>( <span class='pre'>dataSource</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the data source (MediaDataSource) to use. ...</div><div class='long'><p>Sets the data source (MediaDataSource) to use.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dataSource</span> : Object {MediaDataSource}<div class='sub-desc'><p>the MediaDataSource for the media you want to play</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if it is called in an invalid state</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if dataSource is not a valid MediaDataSource</p>\n</div></li></ul></div></div></div><div id='method-setDisplay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setDisplay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setDisplay' class='name expandable'>setDisplay</a>( <span class='pre'>sh</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the SurfaceHolder to use for displaying the video\n portion of the media. ...</div><div class='long'><p>Sets the SurfaceHolder to use for displaying the video\n portion of the media.</p>\n\n<p> Either a surface holder or surface must be set if a display or video sink\n is needed.  Not calling this method or <a href=\"#!/api/android.media.MediaPlayer-method-setSurface\" rel=\"android.media.MediaPlayer-method-setSurface\" class=\"docClass\">setSurface</a>(Surface)\n when playing back a video will result in only the audio track being played.\n A null surface holder or surface will result in only the audio track being\n played.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sh</span> : Object {SurfaceHolder}<div class='sub-desc'><p>the SurfaceHolder to use for video display</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized or has been released.</p>\n</div></li></ul></div></div></div><div id='method-setDrmPropertyString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setDrmPropertyString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setDrmPropertyString' class='name expandable'>setDrmPropertyString</a>( <span class='pre'>propertyName, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a DRM engine plugin String property value. ...</div><div class='long'><p>Set a DRM engine plugin String property value.\n <p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>propertyName</span> : String<div class='sub-desc'><p>the property name</p>\n</div></li><li><span class='pre'>value</span> : String<div class='sub-desc'><p>the property value</p>\n\n<p> Standard fields names are:\n MediaDrm.PROPERTY_VENDOR, MediaDrm.PROPERTY_VERSION,\n MediaDrm.PROPERTY_DESCRIPTION, MediaDrm.PROPERTY_ALGORITHMS</p>\n</div></li></ul></div></div></div><div id='method-setLooping' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setLooping' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setLooping' class='name expandable'>setLooping</a>( <span class='pre'>looping</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the player to be looping or non-looping. ...</div><div class='long'><p>Sets the player to be looping or non-looping.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>looping</span> : Boolean<div class='sub-desc'><p>whether to loop or not</p>\n</div></li></ul></div></div></div><div id='method-setMetadataFilter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setMetadataFilter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setMetadataFilter' class='name expandable'>setMetadataFilter</a>( <span class='pre'>allow, block</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a filter for the metadata update notification and update\n retrieval. ...</div><div class='long'><p>Set a filter for the metadata update notification and update\n retrieval. The caller provides 2 set of metadata keys, allowed\n and blocked. The blocked set always takes precedence over the\n allowed one.\n Metadata.MATCH_ALL and Metadata.MATCH_NONE are 2 sets available as\n shorthands to allow/block all or no metadata.</p>\n\n<p> By default, there is no filter set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>allow</span> : Object {java.util.Set}<div class='sub-desc'><p>Is the set of metadata the client is interested\n              in receiving new notifications for.</p>\n</div></li><li><span class='pre'>block</span> : Object {java.util.Set}<div class='sub-desc'><p>Is the set of metadata the client is not interested\n              in receiving new notifications for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The call status code.</p>\n\n<pre><code> // FIXME: unhide.\n</code></pre>\n\n<p> {@hide}</p>\n</div></li></ul></div></div></div><div id='method-setNextMediaPlayer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setNextMediaPlayer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setNextMediaPlayer' class='name expandable'>setNextMediaPlayer</a>( <span class='pre'>next</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the MediaPlayer to start when this MediaPlayer finishes playback\n (i.e. ...</div><div class='long'><p>Set the MediaPlayer to start when this MediaPlayer finishes playback\n (i.e. reaches the end of the stream).\n The media framework will attempt to transition from this player to\n the next as seamlessly as possible. The next player can be set at\n any time before completion, but shall be after setDataSource has been\n called successfully. The next player must be prepared by the\n app, and the application should not call start() on it.\n The next MediaPlayer must be different from 'this'. An exception\n will be thrown if next == this.\n The application may call setNextMediaPlayer(null) to indicate no\n next player should be started at the end of playback.\n If the current player is looping, it will keep looping and the next\n player will not be started.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>next</span> : Object {MediaPlayer}<div class='sub-desc'><p>the player to start after this one completes playback.</p>\n</div></li></ul></div></div></div><div id='method-setOnBufferingUpdateListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnBufferingUpdateListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnBufferingUpdateListener' class='name expandable'>setOnBufferingUpdateListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when the status of a network\n stream's buffer has changed. ...</div><div class='long'><p>Register a callback to be invoked when the status of a network\n stream's buffer has changed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnBufferingUpdateListener}<div class='sub-desc'><p>the callback that will be run.</p>\n</div></li></ul></div></div></div><div id='method-setOnCompletionListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnCompletionListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnCompletionListener' class='name expandable'>setOnCompletionListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when the end of a media source\n has been reached during playback. ...</div><div class='long'><p>Register a callback to be invoked when the end of a media source\n has been reached during playback.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnCompletionListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnDrmConfigHelper' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnDrmConfigHelper' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnDrmConfigHelper' class='name expandable'>setOnDrmConfigHelper</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked for configuration of the DRM object before\n the session is created. ...</div><div class='long'><p>Register a callback to be invoked for configuration of the DRM object before\n the session is created.\n The callback will be invoked synchronously during the execution\n of <a href=\"#!/api/android.media.MediaPlayer-method-prepareDrm\" rel=\"android.media.MediaPlayer-method-prepareDrm\" class=\"docClass\">prepareDrm</a>(UUID uuid).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnDrmConfigHelper}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnDrmInfoListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnDrmInfoListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnDrmInfoListener' class='name expandable'>setOnDrmInfoListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when the DRM info is\n known. ...</div><div class='long'><p>Register a callback to be invoked when the DRM info is\n known.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnDrmInfoListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnDrmPreparedListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnDrmPreparedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnDrmPreparedListener' class='name expandable'>setOnDrmPreparedListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when the DRM object is prepared. ...</div><div class='long'><p>Register a callback to be invoked when the DRM object is prepared.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnDrmPreparedListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>the Handler that will receive the callback</p>\n</div></li></ul></div></div></div><div id='method-setOnErrorListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnErrorListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnErrorListener' class='name expandable'>setOnErrorListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when an error has happened\n during an asynchronous operation. ...</div><div class='long'><p>Register a callback to be invoked when an error has happened\n during an asynchronous operation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnErrorListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnInfoListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnInfoListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnInfoListener' class='name expandable'>setOnInfoListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when an info/warning is available. ...</div><div class='long'><p>Register a callback to be invoked when an info/warning is available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnInfoListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnMediaTimeDiscontinuityListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnMediaTimeDiscontinuityListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnMediaTimeDiscontinuityListener' class='name expandable'>setOnMediaTimeDiscontinuityListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the listener to be invoked when a media time discontinuity is encountered. ...</div><div class='long'><p>Sets the listener to be invoked when a media time discontinuity is encountered.\n The listener will be called on the same thread as the one in which the MediaPlayer was\n created.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnMediaTimeDiscontinuityListener}<div class='sub-desc'><p>the listener called after a discontinuity</p>\n</div></li></ul></div></div></div><div id='method-setOnPreparedListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnPreparedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnPreparedListener' class='name expandable'>setOnPreparedListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when the media source is ready\n for playback. ...</div><div class='long'><p>Register a callback to be invoked when the media source is ready\n for playback.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnPreparedListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnSeekCompleteListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnSeekCompleteListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnSeekCompleteListener' class='name expandable'>setOnSeekCompleteListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when a seek operation has been\n completed. ...</div><div class='long'><p>Register a callback to be invoked when a seek operation has been\n completed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnSeekCompleteListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnSubtitleDataListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnSubtitleDataListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnSubtitleDataListener' class='name expandable'>setOnSubtitleDataListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the listener to be invoked when a subtitle track has new data available. ...</div><div class='long'><p>Sets the listener to be invoked when a subtitle track has new data available.\n The subtitle data comes from a subtitle track previously selected with\n <a href=\"#!/api/android.media.MediaPlayer-method-selectTrack\" rel=\"android.media.MediaPlayer-method-selectTrack\" class=\"docClass\">selectTrack</a>(int). Use <a href=\"#!/api/android.media.MediaPlayer-method-getTrackInfo\" rel=\"android.media.MediaPlayer-method-getTrackInfo\" class=\"docClass\">getTrackInfo</a>() to determine which tracks are\n subtitles (of type <a href=\"#!/api/android.media.MediaPlayer.TrackInfo-property-MEDIA_TRACK_TYPE_SUBTITLE\" rel=\"android.media.MediaPlayer.TrackInfo-property-MEDIA_TRACK_TYPE_SUBTITLE\" class=\"docClass\">android.media.MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_SUBTITLE</a>), Subtitle track encodings\n can be determined by android.media.MediaPlayer.TrackInfo.getFormat()).<br>\n See <a href=\"#!/api/android.media.MediaPlayer2.SubtitleData\" rel=\"android.media.MediaPlayer2.SubtitleData\" class=\"docClass\">android.media.MediaPlayer2.SubtitleData</a> for an example of querying subtitle encoding.<br>\n The listener will be called on the same thread as the one in which the MediaPlayer was\n created.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnSubtitleDataListener}<div class='sub-desc'><p>the listener called when new data is available</p>\n</div></li></ul></div></div></div><div id='method-setOnTimedMetaDataAvailableListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnTimedMetaDataAvailableListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnTimedMetaDataAvailableListener' class='name expandable'>setOnTimedMetaDataAvailableListener</a>( <span class='pre'>listener, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when a selected track has timed metadata available. ...</div><div class='long'><p>Register a callback to be invoked when a selected track has timed metadata available.\n <p>\n Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates\n <a href=\"#!/api/android.media.TimedMetaData\" rel=\"android.media.TimedMetaData\" class=\"docClass\">android.media.TimedMetaData</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnTimedMetaDataAvailableListener}<div class='sub-desc'><p>the callback that will be run\n@see MediaPlayer.OnTimedMetaDataAvailableListener\n@see TimedMetaData</p>\n</div></li><li><span class='pre'>listener</span> : Object<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnTimedTextListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnTimedTextListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnTimedTextListener' class='name expandable'>setOnTimedTextListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when a timed text is available\n for display. ...</div><div class='long'><p>Register a callback to be invoked when a timed text is available\n for display.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnTimedTextListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setOnVideoSizeChangedListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setOnVideoSizeChangedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setOnVideoSizeChangedListener' class='name expandable'>setOnVideoSizeChangedListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when the video size is\n known or updated. ...</div><div class='long'><p>Register a callback to be invoked when the video size is\n known or updated.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaPlayer.OnVideoSizeChangedListener}<div class='sub-desc'><p>the callback that will be run</p>\n</div></li></ul></div></div></div><div id='method-setPlaybackParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setPlaybackParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setPlaybackParams' class='name expandable'>setPlaybackParams</a>( <span class='pre'>params</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets playback rate using android.media.PlaybackParams. ...</div><div class='long'><p>Sets playback rate using <a href=\"#!/api/android.media.PlaybackParams\" rel=\"android.media.PlaybackParams\" class=\"docClass\">android.media.PlaybackParams</a>. The object sets its internal\n PlaybackParams to the input, except that the object remembers previous speed\n when input speed is zero. This allows the object to resume at previous speed\n when start() is called. Calling it before the object is prepared does not change\n the object state. After the object is prepared, calling it with zero speed is\n equivalent to calling pause(). After the object is prepared, calling it with\n non-zero speed is equivalent to calling start().</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {PlaybackParams}<div class='sub-desc'><p>the playback params.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized or has been released.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if params is not supported.</p>\n</div></li></ul></div></div></div><div id='method-setPreferredDevice' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setPreferredDevice' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setPreferredDevice' class='name expandable'>setPreferredDevice</a>( <span class='pre'>deviceInfo</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies an audio device (via an android.media.AudioDeviceInfo object) to route\n the output from this MediaPlayer. ...</div><div class='long'><p>Specifies an audio device (via an <a href=\"#!/api/android.media.AudioDeviceInfo\" rel=\"android.media.AudioDeviceInfo\" class=\"docClass\">android.media.AudioDeviceInfo</a> object) to route\n the output from this MediaPlayer.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>deviceInfo</span> : Object {AudioDeviceInfo}<div class='sub-desc'><p>The AudioDeviceInfo specifying the audio sink or source.\n  If deviceInfo is null, default routing is restored.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if succesful, false if the specified AudioDeviceInfo is non-null and\n does not correspond to a valid audio device.</p>\n</div></li></ul></div></div></div><div id='method-setRetransmitEndpoint' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setRetransmitEndpoint' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setRetransmitEndpoint' class='name expandable'>setRetransmitEndpoint</a>( <span class='pre'>endpoint</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the target UDP re-transmit endpoint for the low level player. ...</div><div class='long'><p>Sets the target UDP re-transmit endpoint for the low level player.\n Generally, the address portion of the endpoint is an IP multicast\n address, although a unicast address would be equally valid.  When a valid\n retransmit endpoint has been set, the media player will not decode and\n render the media presentation locally.  Instead, the player will attempt\n to re-multiplex its media data using the Android@Home RTP profile and\n re-transmit to the target endpoint.  Receiver devices (which may be\n either the same as the transmitting device or different devices) may\n instantiate, prepare, and start a receiver player using a setDataSource\n URL of the form...</p>\n\n<p> aahRX://&lt;multicastIP&gt;:&lt;port&gt;</p>\n\n<p> to receive, decode and render the re-transmitted content.</p>\n\n<p> setRetransmitEndpoint may only be called before setDataSource has been\n called; while the player is in the Idle state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>endpoint</span> : Object {InetSocketAddress}<div class='sub-desc'><p>the address and UDP port of the re-transmission target or\n null if no re-transmission is to be performed.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if it is called in an invalid state</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the retransmit endpoint is supplied,\n but invalid.</p>\n\n<p> {@hide} pending API council</p>\n</div></li></ul></div></div></div><div id='method-setScreenOnWhilePlaying' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setScreenOnWhilePlaying' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setScreenOnWhilePlaying' class='name expandable'>setScreenOnWhilePlaying</a>( <span class='pre'>screenOn</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Control whether we should use the attached SurfaceHolder to keep the\n screen on while video playback is occurring. ...</div><div class='long'><p>Control whether we should use the attached SurfaceHolder to keep the\n screen on while video playback is occurring.  This is the preferred\n method over <a href=\"#!/api/android.media.MediaPlayer-method-setWakeMode\" rel=\"android.media.MediaPlayer-method-setWakeMode\" class=\"docClass\">setWakeMode</a> where possible, since it doesn't\n require that the application have permission for low-level wake lock\n access.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>screenOn</span> : Boolean<div class='sub-desc'><p>Supply true to keep the screen on, false to allow it\n to turn off.</p>\n</div></li></ul></div></div></div><div id='method-setStartDelayMs' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/android.media.PlayerBase' rel='android.media.PlayerBase' class='defined-in docClass'>android.media.PlayerBase</a><br/><a href='source/PlayerBase.html#android-media-PlayerBase-method-setStartDelayMs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.PlayerBase-method-setStartDelayMs' class='name expandable'>setStartDelayMs</a>( <span class='pre'>delayMs, delayMs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>delayMs</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>delayMs</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-setSurface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setSurface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setSurface' class='name expandable'>setSurface</a>( <span class='pre'>surface</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the Surface to be used as the sink for the video portion of\n the media. ...</div><div class='long'><p>Sets the Surface to be used as the sink for the video portion of\n the media. This is similar to <a href=\"#!/api/android.media.MediaPlayer-method-setDisplay\" rel=\"android.media.MediaPlayer-method-setDisplay\" class=\"docClass\">setDisplay</a>(SurfaceHolder), but\n does not support <a href=\"#!/api/android.media.MediaPlayer-method-setScreenOnWhilePlaying\" rel=\"android.media.MediaPlayer-method-setScreenOnWhilePlaying\" class=\"docClass\">setScreenOnWhilePlaying</a>(boolean).  Setting a\n Surface will un-set any Surface or SurfaceHolder that was previously set.\n A null surface will result in only the audio track being played.</p>\n\n<p> If the Surface sends frames to a SurfaceTexture, the timestamps\n returned from SurfaceTexture.getTimestamp() will have an\n unspecified zero point.  These timestamps cannot be directly compared\n between different media sources, different instances of the same media\n source, or multiple runs of the same program.  The timestamp is normally\n monotonically increasing and is unaffected by time-of-day adjustments,\n but it is reset when the position is set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>surface</span> : Object {Surface}<div class='sub-desc'><p>The Surface to be used for the video portion of\n the media.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized or has been released.</p>\n</div></li></ul></div></div></div><div id='method-setSyncParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setSyncParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setSyncParams' class='name expandable'>setSyncParams</a>( <span class='pre'>params</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets A/V sync mode. ...</div><div class='long'><p>Sets A/V sync mode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {SyncParams}<div class='sub-desc'><p>the A/V sync params to apply</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if params are not supported.</p>\n</div></li></ul></div></div></div><div id='method-setVideoScalingMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setVideoScalingMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setVideoScalingMode' class='name expandable'>setVideoScalingMode</a>( <span class='pre'>mode</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets video scaling mode. ...</div><div class='long'><p>Sets video scaling mode. To make the target video scaling mode\n effective during playback, this method must be called after\n data source is set. If not called, the default video\n scaling mode is <a href=\"#!/api/android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT\" rel=\"android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT\" class=\"docClass\">VIDEO_SCALING_MODE_SCALE_TO_FIT</a>.</p>\n\n<p> <p> The supported video scaling modes are:\n <ul>\n <li> <a href=\"#!/api/android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT\" rel=\"android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT\" class=\"docClass\">VIDEO_SCALING_MODE_SCALE_TO_FIT</a>\n <li> <a href=\"#!/api/android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING\" rel=\"android.media.MediaPlayer-property-VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING\" class=\"docClass\">VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</a>\n </li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mode</span> : Number<div class='sub-desc'><p>target video scaling mode. Must be one of the supported\n video scaling modes; otherwise, IllegalArgumentException will be thrown.\n@see MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT\n@see MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING</p>\n</div></li></ul></div></div></div><div id='method-setWakeMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-setWakeMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-setWakeMode' class='name expandable'>setWakeMode</a>( <span class='pre'>context, mode</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the low-level power management behavior for this MediaPlayer. ...</div><div class='long'><p>Set the low-level power management behavior for this MediaPlayer.  This\n can be used when the MediaPlayer is not playing through a SurfaceHolder\n set with <a href=\"#!/api/android.media.MediaPlayer-method-setDisplay\" rel=\"android.media.MediaPlayer-method-setDisplay\" class=\"docClass\">setDisplay</a>(SurfaceHolder) and thus can use the\n high-level <a href=\"#!/api/android.media.MediaPlayer-method-setScreenOnWhilePlaying\" rel=\"android.media.MediaPlayer-method-setScreenOnWhilePlaying\" class=\"docClass\">setScreenOnWhilePlaying</a>(boolean) feature.</p>\n\n<p> <p>This function has the MediaPlayer access the low-level power manager\n service to control the device's power usage while playing is occurring.\n The parameter is a combination of android.os.PowerManager wake flags.\n Use of this method requires android.Manifest.permission.WAKE_LOCK\n permission.\n By default, no attempt is made to keep the device awake during playback.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>the Context to use</p>\n</div></li><li><span class='pre'>mode</span> : Number<div class='sub-desc'><p>the power/wake mode to set\n@see android.os.PowerManager</p>\n</div></li></ul></div></div></div><div id='method-start' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-start' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-start' class='name expandable'>start</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts or resumes playback. ...</div><div class='long'><p>Starts or resumes playback. If playback had previously been paused,\n playback will continue from where it was paused. If playback had\n been stopped, or never started before, playback will start at the\n beginning.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if it is called in an invalid state</p>\n</div></li></ul></div></div></div><div id='method-stop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer'>android.media.MediaPlayer</span><br/><a href='source/MediaPlayer.html#android-media-MediaPlayer-method-stop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer-method-stop' class='name expandable'>stop</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stops playback after playback has been started or paused. ...</div><div class='long'><p>Stops playback after playback has been started or paused.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});