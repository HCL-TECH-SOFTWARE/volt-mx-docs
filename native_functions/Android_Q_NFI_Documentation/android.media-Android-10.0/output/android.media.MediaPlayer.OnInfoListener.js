Ext.data.JsonP.android_media_MediaPlayer_OnInfoListener({"tagname":"class","name":"android.media.MediaPlayer.OnInfoListener","autodetected":{},"files":[{"filename":"OnInfoListener.js","href":"OnInfoListener.html#android-media-MediaPlayer-OnInfoListener"}],"members":[{"name":"onInfo","tagname":"method","owner":"android.media.MediaPlayer.OnInfoListener","id":"method-onInfo","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.MediaPlayer.OnInfoListener","short_doc":"Interface definition of a callback to be invoked to communicate some\n info and/or warning about the media or its play...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/OnInfoListener.html#android-media-MediaPlayer-OnInfoListener' target='_blank'>OnInfoListener.js</a></div></pre><div class='doc-contents'><p>Interface definition of a callback to be invoked to communicate some\n info and/or warning about the media or its playback.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onInfo' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer.OnInfoListener'>android.media.MediaPlayer.OnInfoListener</span><br/><a href='source/OnInfoListener.html#android-media-MediaPlayer-OnInfoListener-method-onInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer.OnInfoListener-method-onInfo' class='name expandable'>onInfo</a>( <span class='pre'>mp, what, extra</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to indicate an info or a warning. ...</div><div class='long'><p>Called to indicate an info or a warning.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mp</span> : Object {MediaPlayer}<div class='sub-desc'><p>the MediaPlayer the info pertains to.</p>\n</div></li><li><span class='pre'>what</span> : Number<div class='sub-desc'><p>the type of info or warning.\n <ul>\n <li>MEDIA_INFO_UNKNOWN\n <li>MEDIA_INFO_VIDEO_TRACK_LAGGING\n <li>MEDIA_INFO_VIDEO_RENDERING_START\n <li>MEDIA_INFO_BUFFERING_START\n <li>MEDIA_INFO_BUFFERING_END\n <li><code>MEDIA_INFO_NETWORK_BANDWIDTH (703)</code> -\n     bandwidth information is available (as <code>extra</code> kbps)\n <li>MEDIA_INFO_BAD_INTERLEAVING\n <li>MEDIA_INFO_NOT_SEEKABLE\n <li>MEDIA_INFO_METADATA_UPDATE\n <li>MEDIA_INFO_UNSUPPORTED_SUBTITLE\n <li>MEDIA_INFO_SUBTITLE_TIMED_OUT\n </li></li></li></li></li></li></li></li></li></li></li></ul></p>\n</div></li><li><span class='pre'>extra</span> : Number<div class='sub-desc'><p>an extra code, specific to the info. Typically\n implementation dependent.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the method handled the info, false if it didn't.\n Returning false, or not having an OnInfoListener at all, will\n cause the info to be discarded.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});