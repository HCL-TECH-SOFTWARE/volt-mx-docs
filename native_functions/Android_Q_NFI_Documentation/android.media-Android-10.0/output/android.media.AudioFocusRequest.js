Ext.data.JsonP.android_media_AudioFocusRequest({"tagname":"class","name":"android.media.AudioFocusRequest","autodetected":{},"files":[{"filename":"AudioFocusRequest.js","href":"AudioFocusRequest.html#android-media-AudioFocusRequest"}],"extends":"java.lang.Object","members":[{"name":"acceptsDelayedFocusGain","tagname":"method","owner":"android.media.AudioFocusRequest","id":"method-acceptsDelayedFocusGain","meta":{}},{"name":"getAudioAttributes","tagname":"method","owner":"android.media.AudioFocusRequest","id":"method-getAudioAttributes","meta":{}},{"name":"getFocusGain","tagname":"method","owner":"android.media.AudioFocusRequest","id":"method-getFocusGain","meta":{}},{"name":"willPauseWhenDucked","tagname":"method","owner":"android.media.AudioFocusRequest","id":"method-willPauseWhenDucked","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.AudioFocusRequest","short_doc":"A class to encapsulate information about an audio focus request. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.AudioFocusRequest</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AudioFocusRequest.html#android-media-AudioFocusRequest' target='_blank'>AudioFocusRequest.js</a></div></pre><div class='doc-contents'><p>A class to encapsulate information about an audio focus request.\n An {@code AudioFocusRequest} instance is built by <a href=\"#!/api/android.media.AudioAttributes.Builder\" rel=\"android.media.AudioAttributes.Builder\" class=\"docClass\">android.media.AudioAttributes.Builder</a>, and is used to\n request and abandon audio focus, respectively\n with android.media.AudioManager.requestAudioFocus(AudioFocusRequest) and\n android.media.AudioManager.abandonAudioFocusRequest(AudioFocusRequest).</p>\n\n<p> <h3>What is audio focus?</h3>\n <p>Audio focus is a concept introduced in API 8. It is used to convey the fact that a user can\n only focus on a single audio stream at a time, e.g. listening to music or a podcast, but not\n both at the same time. In some cases, multiple audio streams can be playing at the same time,\n but there is only one the user would really listen to (focus on), while the other plays in\n the background. An example of this is driving directions being spoken while music plays at\n a reduced volume (a.k.a. ducking).\n <p>When an application requests audio focus, it expresses its intention to “own” audio focus to\n play audio. Let’s review the different types of focus requests, the return value after a request,\n and the responses to a loss.\n <p class=\"note\">Note: applications should not play anything until granted focus.</p></p>\n\n<p> <h3>The different types of focus requests</h3>\n <p>There are four focus request types. A successful focus request with each will yield different\n behaviors by the system and the other application that previously held audio focus.\n <ul>\n <li><a href=\"#!/api/android.media.AudioManager-property-AUDIOFOCUS_GAIN\" rel=\"android.media.AudioManager-property-AUDIOFOCUS_GAIN\" class=\"docClass\">android.media.AudioManager.AUDIOFOCUS_GAIN</a> expresses the fact that your application is now the\n sole source of audio that the user is listening to. The duration of the audio playback is\n unknown, and is possibly very long: after the user finishes interacting with your application,\n (s)he doesn’t expect another audio stream to resume. Examples of uses of this focus gain are\n for music playback, for a game or a video player.</li></ul></p>\n\n<p> <li><a href=\"#!/api/android.media.AudioManager-property-AUDIOFOCUS_GAIN_TRANSIENT\" rel=\"android.media.AudioManager-property-AUDIOFOCUS_GAIN_TRANSIENT\" class=\"docClass\">android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT</a> is for a situation when you know your\n application is temporarily grabbing focus from the current owner, but the user expects playback\n to go back to where it was once your application no longer requires audio focus. An example is\n for playing an alarm, or during a VoIP call. The playback is known to be finite: the alarm will\n time-out or be dismissed, the VoIP call has a beginning and an end. When any of those events\n ends, and if the user was listening to music when it started, the user expects music to resume,\n but didn’t wish to listen to both at the same time.</li></p>\n\n<p> <li><a href=\"#!/api/android.media.AudioManager-property-AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK\" rel=\"android.media.AudioManager-property-AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK\" class=\"docClass\">android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK</a>: this focus request type is similar\n to {@code AUDIOFOCUS_GAIN_TRANSIENT} for the temporary aspect of the focus request, but it also\n expresses the fact during the time you own focus, you allow another application to keep playing\n at a reduced volume, “ducked”. Examples are when playing driving directions or notifications,\n it’s ok for music to keep playing, but not loud enough that it would prevent the directions to\n be hard to understand. A typical attenuation by the “ducked” application is a factor of 0.2f\n (or -14dB), that can for instance be applied with {@code MediaPlayer.setVolume(0.2f)} when\n using this class for playback.</li></p>\n\n<p> <li><a href=\"#!/api/android.media.AudioManager-property-AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE\" rel=\"android.media.AudioManager-property-AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE\" class=\"docClass\">android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE</a> is also for a temporary request,\n but also expresses that your application expects the device to not play anything else. This is\n typically used if you are doing audio recording or speech recognition, and don’t want for\n examples notifications to be played by the system during that time.</li>\n </p>\n\n<p> <p>An {@code AudioFocusRequest} instance always contains one of the four types of requests\n explained above. It is passed when building an {@code AudioFocusRequest} instance with its\n builder in the <a href=\"#!/api/android.media.AudioAttributes.Builder\" rel=\"android.media.AudioAttributes.Builder\" class=\"docClass\">android.media.AudioAttributes.Builder</a> constructor\n android.media.AudioFocusRequest.Builder.android.media.AudioFocusRequest.Builder(int), or\n with android.media.AudioFocusRequest.Builder.setFocusGain(int) after copying an existing instance with\n android.media.AudioFocusRequest.Builder.android.media.AudioFocusRequest.Builder(android.media.AudioFocusRequest).</p>\n\n<p> <h3>Qualifying your focus request</h3>\n <h4>Use case requiring a focus request</h4>\n <p>Any focus request is qualified by the <a href=\"#!/api/android.media.AudioAttributes\" rel=\"android.media.AudioAttributes\" class=\"docClass\">android.media.AudioAttributes</a>\n (see android.media.AudioAttributes.Builder.setAudioAttributes(AudioAttributes)) that describe the audio use case that\n will follow the request (once it's successful or granted). It is recommended to use the\n same {@code AudioAttributes} for the request as the attributes you are using for audio/media\n playback.\n <br>If no attributes are set, default attributes of <a href=\"#!/api/android.media.AudioAttributes-property-USAGE_MEDIA\" rel=\"android.media.AudioAttributes-property-USAGE_MEDIA\" class=\"docClass\">android.media.AudioAttributes.USAGE_MEDIA</a> are used.</p>\n\n<p> <h4>Delayed focus</h4>\n <p>Audio focus can be \"locked\" by the system for a number of reasons: during a phone call, when\n the car to which the device is connected plays an emergency message... To support these\n situations, the application can request to be notified when its request is fulfilled, by flagging\n its request as accepting delayed focus, with android.media.AudioAttributes.Builder.setAcceptsDelayedFocusGain(boolean).\n <br>If focus is requested while being locked by the system,\n android.media.AudioManager.requestAudioFocus(AudioFocusRequest) will return\n <a href=\"#!/api/android.media.AudioManager-property-AUDIOFOCUS_REQUEST_DELAYED\" rel=\"android.media.AudioManager-property-AUDIOFOCUS_REQUEST_DELAYED\" class=\"docClass\">android.media.AudioManager.AUDIOFOCUS_REQUEST_DELAYED</a>. When focus isn't locked anymore, the focus\n listener set with android.media.AudioAttributes.Builder.setOnAudioFocusChangeListener(OnAudioFocusChangeListener)\n or with Handler) will\n be called to notify the application it now owns audio focus.</p>\n\n<p> <h4>Pausing vs ducking</h4>\n <p>When an application requested audio focus with\n <a href=\"#!/api/android.media.AudioManager-property-AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK\" rel=\"android.media.AudioManager-property-AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK\" class=\"docClass\">android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK</a>, the system will duck the current focus\n owner.\n <p class=\"note\">Note: this behavior is <b>new for Android O</b>, whereas applications targeting\n SDK level up to API 25 had to implement the ducking themselves when they received a focus\n loss of <a href=\"#!/api/android.media.AudioManager-property-AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK\" rel=\"android.media.AudioManager-property-AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK\" class=\"docClass\">android.media.AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK</a>.\n <p>But ducking is not always the behavior expected by the user. A typical example is when the\n device plays driving directions while the user is listening to an audio book or podcast, and\n expects the audio playback to pause, instead of duck, as it is hard to understand a navigation\n prompt and spoken content at the same time. Therefore the system will not automatically duck\n when it detects it would be ducking spoken content: such content is detected when the\n {@code AudioAttributes} of the player are qualified by\n <a href=\"#!/api/android.media.AudioAttributes-property-CONTENT_TYPE_SPEECH\" rel=\"android.media.AudioAttributes-property-CONTENT_TYPE_SPEECH\" class=\"docClass\">android.media.AudioAttributes.CONTENT_TYPE_SPEECH</a>. Refer for instance to\n android.media.AudioAttributes.Builder.setContentType(int) and\n android.media.MediaPlayer.setAudioAttributes(AudioAttributes) if you are writing a media playback\n application for audio book, podcasts... Since the system will not automatically duck applications\n that play speech, it calls their focus listener instead to notify them of\n <a href=\"#!/api/android.media.AudioManager-property-AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK\" rel=\"android.media.AudioManager-property-AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK\" class=\"docClass\">android.media.AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK</a>, so they can pause instead. Note that\n this behavior is independent of the use of {@code AudioFocusRequest}, but tied to the use\n of {@code AudioAttributes}.\n <p>If your application requires pausing instead of ducking for any other reason than playing\n speech, you can also declare so with android.media.AudioAttributes.Builder.setWillPauseWhenDucked(boolean), which will\n cause the system to call your focus listener instead of automatically ducking.</p>\n\n<p> <h4>Example</h4>\n <p>The example below covers the following steps to be found in any application that would play\n audio, and use audio focus. Here we play an audio book, and our application is intended to pause\n rather than duck when it loses focus. These steps consist in:\n <ul>\n <li>Creating {@code AudioAttributes} to be used for the playback and the focus request.</li>\n <li>Configuring and creating the {@code AudioFocusRequest} instance that defines the intended\n     focus behaviors.</li>\n <li>Requesting audio focus and checking the return code to see if playback can happen right\n     away, or is delayed.</li>\n <li>Implementing a focus change listener to respond to focus gains and losses.</li>\n </ul>\n <p>\n <pre class=\"prettyprint\">\n // initialization of the audio attributes and focus request\n mAudioManager = (AudioManager) Context.getSystemService(Context.AUDIO_SERVICE);\n mPlaybackAttributes = new AudioAttributes.Builder()\n         .setUsage(AudioAttributes.USAGE_MEDIA)\n         .setContentType(AudioAttributes.CONTENT_TYPE_SPEECH)\n         .build();\n mFocusRequest = new AudioFocusRequest.Builder(AudioManager.AUDIOFOCUS_GAIN)\n         .setAudioAttributes(mPlaybackAttributes)\n         .setAcceptsDelayedFocusGain(true)\n         .setWillPauseWhenDucked(true)\n         .setOnAudioFocusChangeListener(this, mMyHandler)\n         .build();\n mMediaPlayer = new MediaPlayer();\n mMediaPlayer.setAudioAttributes(mPlaybackAttributes);\n final Object mFocusLock = new Object();</pre></p>\n\n<p> boolean mPlaybackDelayed = false;</p>\n\n<p> // requesting audio focus\n int res = mAudioManager.requestAudioFocus(mFocusRequest);\n synchronized (mFocusLock) {\n     if (res == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\n         mPlaybackDelayed = false;\n     } else if (res == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {\n         mPlaybackDelayed = false;\n         playbackNow();\n     } else if (res == AudioManager.AUDIOFOCUS_REQUEST_DELAYED) {\n        mPlaybackDelayed = true;\n     }\n }</p>\n\n<p> // implementation of the OnAudioFocusChangeListener\n &#64;Override\n public void onAudioFocusChange(int focusChange) {\n     switch (focusChange) {\n         case AudioManager.AUDIOFOCUS_GAIN:\n             if (mPlaybackDelayed || mResumeOnFocusGain) {\n                 synchronized (mFocusLock) {\n                     mPlaybackDelayed = false;\n                     mResumeOnFocusGain = false;\n                 }\n                 playbackNow();\n             }\n             break;\n         case AudioManager.AUDIOFOCUS_LOSS:\n             synchronized (mFocusLock) {\n                 // this is not a transient loss, we shouldn't automatically resume for now\n                 mResumeOnFocusGain = false;\n                 mPlaybackDelayed = false;\n             }\n             pausePlayback();\n             break;\n         case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\n         case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\n             // we handle all transient losses the same way because we never duck audio books\n             synchronized (mFocusLock) {\n                 // we should only resume if playback was interrupted\n                 mResumeOnFocusGain = mMediaPlayer.isPlaying();\n                 mPlaybackDelayed = false;\n             }\n             pausePlayback();\n             break;\n     }\n }</p>\n\n<p> // Important:\n // Also set \"mResumeOnFocusGain\" to false when the user pauses or stops playback: this way your\n // application doesn't automatically restart when it gains focus, even though the user had\n // stopped it.\n </p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-acceptsDelayedFocusGain' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.AudioFocusRequest'>android.media.AudioFocusRequest</span><br/><a href='source/AudioFocusRequest.html#android-media-AudioFocusRequest-method-acceptsDelayedFocusGain' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.AudioFocusRequest-method-acceptsDelayedFocusGain' class='name expandable'>acceptsDelayedFocusGain</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the application that would use this {@code AudioFocusRequest} supports\n a focus gain granted after a ...</div><div class='long'><p>Returns whether the application that would use this {@code AudioFocusRequest} supports\n a focus gain granted after a temporary request failure.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>whether delayed focus gain is supported.</p>\n</div></li></ul></div></div></div><div id='method-getAudioAttributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.AudioFocusRequest'>android.media.AudioFocusRequest</span><br/><a href='source/AudioFocusRequest.html#android-media-AudioFocusRequest-method-getAudioAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.AudioFocusRequest-method-getAudioAttributes' class='name expandable'>getAudioAttributes</a>( <span class='pre'></span> ) : Object {android.media.AudioAttributes}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the android.media.AudioAttributes set for this {@code AudioFocusRequest}, or the default\n attributes if none ...</div><div class='long'><p>Returns the <a href=\"#!/api/android.media.AudioAttributes\" rel=\"android.media.AudioAttributes\" class=\"docClass\">android.media.AudioAttributes</a> set for this {@code AudioFocusRequest}, or the default\n attributes if none were set.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.AudioAttributes}</span><div class='sub-desc'><p>non-null AudioAttributes.</p>\n</div></li></ul></div></div></div><div id='method-getFocusGain' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.AudioFocusRequest'>android.media.AudioFocusRequest</span><br/><a href='source/AudioFocusRequest.html#android-media-AudioFocusRequest-method-getFocusGain' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.AudioFocusRequest-method-getFocusGain' class='name expandable'>getFocusGain</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the type of audio focus request configured for this {@code AudioFocusRequest}. ...</div><div class='long'><p>Returns the type of audio focus request configured for this {@code AudioFocusRequest}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>one of AudioManager.AUDIOFOCUS_GAIN,\n AudioManager.AUDIOFOCUS_GAIN_TRANSIENT,\n AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK, and\n AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE.</p>\n</div></li></ul></div></div></div><div id='method-willPauseWhenDucked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.AudioFocusRequest'>android.media.AudioFocusRequest</span><br/><a href='source/AudioFocusRequest.html#android-media-AudioFocusRequest-method-willPauseWhenDucked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.AudioFocusRequest-method-willPauseWhenDucked' class='name expandable'>willPauseWhenDucked</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the application that would use this {@code AudioFocusRequest} would pause\n when it is requested to duck. ...</div><div class='long'><p>Returns whether the application that would use this {@code AudioFocusRequest} would pause\n when it is requested to duck.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the duck/pause behavior.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});