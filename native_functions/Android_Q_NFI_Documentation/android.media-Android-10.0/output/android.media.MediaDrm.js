Ext.data.JsonP.android_media_MediaDrm({"tagname":"class","name":"android.media.MediaDrm","autodetected":{},"files":[{"filename":"MediaDrm.js","href":"MediaDrm.html#android-media-MediaDrm"}],"extends":"java.lang.Object","members":[{"name":"EVENT_KEY_EXPIRED","tagname":"property","owner":"android.media.MediaDrm","id":"property-EVENT_KEY_EXPIRED","meta":{"deprecated":{"text":"<p>Use <a href=\"#!/api/android.media.MediaDrm.OnKeyStatusChangeListener-method-onKeyStatusChange\" rel=\"android.media.MediaDrm.OnKeyStatusChangeListener-method-onKeyStatusChange\" class=\"docClass\">android.media.MediaDrm.OnKeyStatusChangeListener.onKeyStatusChange</a>\nand check for <a href=\"#!/api/android.media.MediaDrm.KeyStatus-property-STATUS_EXPIRED\" rel=\"android.media.MediaDrm.KeyStatus-property-STATUS_EXPIRED\" class=\"docClass\">android.media.MediaDrm.KeyStatus.STATUS_EXPIRED</a> in the <a href=\"#!/api/android.media.MediaDrm.KeyStatus\" rel=\"android.media.MediaDrm.KeyStatus\" class=\"docClass\">android.media.MediaDrm.KeyStatus</a>\ninstead.</p>\n"}}},{"name":"EVENT_KEY_REQUIRED","tagname":"property","owner":"android.media.MediaDrm","id":"property-EVENT_KEY_REQUIRED","meta":{}},{"name":"EVENT_PROVISION_REQUIRED","tagname":"property","owner":"android.media.MediaDrm","id":"property-EVENT_PROVISION_REQUIRED","meta":{"deprecated":{"text":"<p>Handle provisioning via android.media.NotProvisionedException\ninstead.</p>\n"}}},{"name":"EVENT_SESSION_RECLAIMED","tagname":"property","owner":"android.media.MediaDrm","id":"property-EVENT_SESSION_RECLAIMED","meta":{}},{"name":"EVENT_VENDOR_DEFINED","tagname":"property","owner":"android.media.MediaDrm","id":"property-EVENT_VENDOR_DEFINED","meta":{}},{"name":"HDCP_LEVEL_UNKNOWN","tagname":"property","owner":"android.media.MediaDrm","id":"property-HDCP_LEVEL_UNKNOWN","meta":{}},{"name":"HDCP_NONE","tagname":"property","owner":"android.media.MediaDrm","id":"property-HDCP_NONE","meta":{}},{"name":"HDCP_NO_DIGITAL_OUTPUT","tagname":"property","owner":"android.media.MediaDrm","id":"property-HDCP_NO_DIGITAL_OUTPUT","meta":{}},{"name":"HDCP_V1","tagname":"property","owner":"android.media.MediaDrm","id":"property-HDCP_V1","meta":{}},{"name":"HDCP_V2","tagname":"property","owner":"android.media.MediaDrm","id":"property-HDCP_V2","meta":{}},{"name":"HDCP_V2_1","tagname":"property","owner":"android.media.MediaDrm","id":"property-HDCP_V2_1","meta":{}},{"name":"HDCP_V2_2","tagname":"property","owner":"android.media.MediaDrm","id":"property-HDCP_V2_2","meta":{}},{"name":"HDCP_V2_3","tagname":"property","owner":"android.media.MediaDrm","id":"property-HDCP_V2_3","meta":{}},{"name":"KEY_TYPE_OFFLINE","tagname":"property","owner":"android.media.MediaDrm","id":"property-KEY_TYPE_OFFLINE","meta":{}},{"name":"KEY_TYPE_RELEASE","tagname":"property","owner":"android.media.MediaDrm","id":"property-KEY_TYPE_RELEASE","meta":{}},{"name":"KEY_TYPE_STREAMING","tagname":"property","owner":"android.media.MediaDrm","id":"property-KEY_TYPE_STREAMING","meta":{}},{"name":"OFFLINE_LICENSE_STATE_RELEASED","tagname":"property","owner":"android.media.MediaDrm","id":"property-OFFLINE_LICENSE_STATE_RELEASED","meta":{}},{"name":"OFFLINE_LICENSE_STATE_UNKNOWN","tagname":"property","owner":"android.media.MediaDrm","id":"property-OFFLINE_LICENSE_STATE_UNKNOWN","meta":{}},{"name":"OFFLINE_LICENSE_STATE_USABLE","tagname":"property","owner":"android.media.MediaDrm","id":"property-OFFLINE_LICENSE_STATE_USABLE","meta":{}},{"name":"PROPERTY_ALGORITHMS","tagname":"property","owner":"android.media.MediaDrm","id":"property-PROPERTY_ALGORITHMS","meta":{}},{"name":"PROPERTY_DESCRIPTION","tagname":"property","owner":"android.media.MediaDrm","id":"property-PROPERTY_DESCRIPTION","meta":{}},{"name":"PROPERTY_DEVICE_UNIQUE_ID","tagname":"property","owner":"android.media.MediaDrm","id":"property-PROPERTY_DEVICE_UNIQUE_ID","meta":{}},{"name":"PROPERTY_VENDOR","tagname":"property","owner":"android.media.MediaDrm","id":"property-PROPERTY_VENDOR","meta":{}},{"name":"PROPERTY_VERSION","tagname":"property","owner":"android.media.MediaDrm","id":"property-PROPERTY_VERSION","meta":{}},{"name":"SECURITY_LEVEL_HW_SECURE_ALL","tagname":"property","owner":"android.media.MediaDrm","id":"property-SECURITY_LEVEL_HW_SECURE_ALL","meta":{}},{"name":"SECURITY_LEVEL_HW_SECURE_CRYPTO","tagname":"property","owner":"android.media.MediaDrm","id":"property-SECURITY_LEVEL_HW_SECURE_CRYPTO","meta":{}},{"name":"SECURITY_LEVEL_HW_SECURE_DECODE","tagname":"property","owner":"android.media.MediaDrm","id":"property-SECURITY_LEVEL_HW_SECURE_DECODE","meta":{}},{"name":"SECURITY_LEVEL_SW_SECURE_CRYPTO","tagname":"property","owner":"android.media.MediaDrm","id":"property-SECURITY_LEVEL_SW_SECURE_CRYPTO","meta":{}},{"name":"SECURITY_LEVEL_SW_SECURE_DECODE","tagname":"property","owner":"android.media.MediaDrm","id":"property-SECURITY_LEVEL_SW_SECURE_DECODE","meta":{}},{"name":"SECURITY_LEVEL_UNKNOWN","tagname":"property","owner":"android.media.MediaDrm","id":"property-SECURITY_LEVEL_UNKNOWN","meta":{}},{"name":"clearOnEventListener","tagname":"method","owner":"android.media.MediaDrm","id":"method-clearOnEventListener","meta":{}},{"name":"clearOnExpirationUpdateListener","tagname":"method","owner":"android.media.MediaDrm","id":"method-clearOnExpirationUpdateListener","meta":{}},{"name":"clearOnKeyStatusChangeListener","tagname":"method","owner":"android.media.MediaDrm","id":"method-clearOnKeyStatusChangeListener","meta":{}},{"name":"clearOnSessionLostStateListener","tagname":"method","owner":"android.media.MediaDrm","id":"method-clearOnSessionLostStateListener","meta":{}},{"name":"close","tagname":"method","owner":"android.media.MediaDrm","id":"method-close","meta":{}},{"name":"closeSession","tagname":"method","owner":"android.media.MediaDrm","id":"method-closeSession","meta":{}},{"name":"getConnectedHdcpLevel","tagname":"method","owner":"android.media.MediaDrm","id":"method-getConnectedHdcpLevel","meta":{}},{"name":"getCryptoSession","tagname":"method","owner":"android.media.MediaDrm","id":"method-getCryptoSession","meta":{}},{"name":"getKeyRequest","tagname":"method","owner":"android.media.MediaDrm","id":"method-getKeyRequest","meta":{}},{"name":"getMaxHdcpLevel","tagname":"method","owner":"android.media.MediaDrm","id":"method-getMaxHdcpLevel","meta":{}},{"name":"getMaxSecurityLevel","tagname":"method","owner":"android.media.MediaDrm","id":"method-getMaxSecurityLevel","meta":{}},{"name":"getMaxSessionCount","tagname":"method","owner":"android.media.MediaDrm","id":"method-getMaxSessionCount","meta":{}},{"name":"getMetrics","tagname":"method","owner":"android.media.MediaDrm","id":"method-getMetrics","meta":{}},{"name":"getOfflineLicenseKeySetIds","tagname":"method","owner":"android.media.MediaDrm","id":"method-getOfflineLicenseKeySetIds","meta":{}},{"name":"getOfflineLicenseState","tagname":"method","owner":"android.media.MediaDrm","id":"method-getOfflineLicenseState","meta":{}},{"name":"getOpenSessionCount","tagname":"method","owner":"android.media.MediaDrm","id":"method-getOpenSessionCount","meta":{}},{"name":"getPropertyByteArray","tagname":"method","owner":"android.media.MediaDrm","id":"method-getPropertyByteArray","meta":{}},{"name":"getPropertyString","tagname":"method","owner":"android.media.MediaDrm","id":"method-getPropertyString","meta":{}},{"name":"getProvisionRequest","tagname":"method","owner":"android.media.MediaDrm","id":"method-getProvisionRequest","meta":{}},{"name":"getSecureStop","tagname":"method","owner":"android.media.MediaDrm","id":"method-getSecureStop","meta":{}},{"name":"getSecureStopIds","tagname":"method","owner":"android.media.MediaDrm","id":"method-getSecureStopIds","meta":{}},{"name":"getSecureStops","tagname":"method","owner":"android.media.MediaDrm","id":"method-getSecureStops","meta":{}},{"name":"getSecurityLevel","tagname":"method","owner":"android.media.MediaDrm","id":"method-getSecurityLevel","meta":{}},{"name":"isCryptoSchemeSupported","tagname":"method","owner":"android.media.MediaDrm","id":"method-isCryptoSchemeSupported","meta":{}},{"name":"openSession","tagname":"method","owner":"android.media.MediaDrm","id":"method-openSession","meta":{}},{"name":"provideKeyResponse","tagname":"method","owner":"android.media.MediaDrm","id":"method-provideKeyResponse","meta":{}},{"name":"provideProvisionResponse","tagname":"method","owner":"android.media.MediaDrm","id":"method-provideProvisionResponse","meta":{}},{"name":"queryKeyStatus","tagname":"method","owner":"android.media.MediaDrm","id":"method-queryKeyStatus","meta":{}},{"name":"release","tagname":"method","owner":"android.media.MediaDrm","id":"method-release","meta":{"deprecated":{"text":"<p>replaced by close().</p>\n"}}},{"name":"releaseAllSecureStops","tagname":"method","owner":"android.media.MediaDrm","id":"method-releaseAllSecureStops","meta":{"deprecated":{"text":"<p>Remove all secure stops using <a href=\"#!/api/android.media.MediaDrm-method-removeAllSecureStops\" rel=\"android.media.MediaDrm-method-removeAllSecureStops\" class=\"docClass\">removeAllSecureStops</a> instead.</p>\n"}}},{"name":"releaseSecureStops","tagname":"method","owner":"android.media.MediaDrm","id":"method-releaseSecureStops","meta":{}},{"name":"removeAllSecureStops","tagname":"method","owner":"android.media.MediaDrm","id":"method-removeAllSecureStops","meta":{}},{"name":"removeKeys","tagname":"method","owner":"android.media.MediaDrm","id":"method-removeKeys","meta":{}},{"name":"removeOfflineLicense","tagname":"method","owner":"android.media.MediaDrm","id":"method-removeOfflineLicense","meta":{}},{"name":"removeSecureStop","tagname":"method","owner":"android.media.MediaDrm","id":"method-removeSecureStop","meta":{}},{"name":"restoreKeys","tagname":"method","owner":"android.media.MediaDrm","id":"method-restoreKeys","meta":{}},{"name":"setOnEventListener","tagname":"method","owner":"android.media.MediaDrm","id":"method-setOnEventListener","meta":{}},{"name":"setOnExpirationUpdateListener","tagname":"method","owner":"android.media.MediaDrm","id":"method-setOnExpirationUpdateListener","meta":{}},{"name":"setOnKeyStatusChangeListener","tagname":"method","owner":"android.media.MediaDrm","id":"method-setOnKeyStatusChangeListener","meta":{}},{"name":"setOnSessionLostStateListener","tagname":"method","owner":"android.media.MediaDrm","id":"method-setOnSessionLostStateListener","meta":{}},{"name":"setPropertyByteArray","tagname":"method","owner":"android.media.MediaDrm","id":"method-setPropertyByteArray","meta":{}},{"name":"setPropertyString","tagname":"method","owner":"android.media.MediaDrm","id":"method-setPropertyString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.MediaDrm","short_doc":"implements java.lang.AutoCloseable\n\nMediaDrm can be used to obtain keys for decrypting protected media streams, in\n c...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.MediaDrm</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/MediaDrm.html#android-media-MediaDrm' target='_blank'>MediaDrm.js</a></div></pre><div class='doc-contents'><p>implements java.lang.AutoCloseable</p>\n\n<p>MediaDrm can be used to obtain keys for decrypting protected media streams, in\n conjunction with <a href=\"#!/api/android.media.MediaCrypto\" rel=\"android.media.MediaCrypto\" class=\"docClass\">android.media.MediaCrypto</a>.  The MediaDrm APIs\n are designed to support the ISO/IEC 23001-7: Common Encryption standard, but\n may also be used to implement other encryption schemes.\n <p>\n Encrypted content is prepared using an encryption server and stored in a content\n library. The encrypted content is streamed or downloaded from the content library to\n client devices via content servers.  Licenses to view the content are obtained from\n a License Server.\n <p>\n <p><img src=\"../../../images/mediadrm_overview.png\"\n      alt=\"MediaDrm Overview diagram\"\n      border=\"0\" /></p>\n <p>\n Keys are requested from the license server using a key request. The key\n response is delivered to the client app, which provides the response to the\n MediaDrm API.\n <p>\n A Provisioning server may be required to distribute device-unique credentials to\n the devices.\n <p>\n Enforcing requirements related to the number of devices that may play content\n simultaneously can be performed either through key renewal or using the secure\n stop methods.\n <p>\n The following sequence diagram shows the interactions between the objects\n involved while playing back encrypted content:\n <p>\n <p><img src=\"../../../images/mediadrm_decryption_sequence.png\"\n         alt=\"MediaDrm Overview diagram\"\n         border=\"0\" /></p>\n <p>\n The app first constructs <a href=\"#!/api/android.media.MediaExtractor\" rel=\"android.media.MediaExtractor\" class=\"docClass\">android.media.MediaExtractor</a> and\n <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> objects. It accesses the DRM-scheme-identifying UUID,\n typically from metadata in the content, and uses this UUID to construct an instance\n of a MediaDrm object that is able to support the DRM scheme required by the content.\n Crypto schemes are assigned 16 byte UUIDs.  The method <a href=\"#!/api/android.media.MediaDrm-method-isCryptoSchemeSupported\" rel=\"android.media.MediaDrm-method-isCryptoSchemeSupported\" class=\"docClass\">isCryptoSchemeSupported</a>\n can be used to query if a given scheme is supported on the device.\n <p>\n The app calls <a href=\"#!/api/android.media.MediaDrm-method-openSession\" rel=\"android.media.MediaDrm-method-openSession\" class=\"docClass\">openSession</a> to generate a sessionId that will uniquely identify\n the session in subsequent interactions. The app next uses the MediaDrm object to\n obtain a key request message and send it to the license server, then provide\n the server's response to the MediaDrm object.\n <p>\n Once the app has a sessionId, it can construct a MediaCrypto object from the UUID and\n sessionId.  The MediaCrypto object is registered with the MediaCodec in the\n <a href=\"#!/api/android.media.MediaCodec-method-configure\" rel=\"android.media.MediaCodec-method-configure\" class=\"docClass\">android.media.MediaCodec.configure</a> method to enable the codec to decrypt content.\n <p>\n When the app has constructed <a href=\"#!/api/android.media.MediaExtractor\" rel=\"android.media.MediaExtractor\" class=\"docClass\">android.media.MediaExtractor</a>,\n <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> and <a href=\"#!/api/android.media.MediaCrypto\" rel=\"android.media.MediaCrypto\" class=\"docClass\">android.media.MediaCrypto</a> objects,\n it proceeds to pull samples from the extractor and queue them into the decoder.  For\n encrypted content, the samples returned from the extractor remain encrypted, they\n are only decrypted when the samples are delivered to the decoder.\n <p>\n MediaDrm methods throw <a href=\"#!/api/android.media.MediaDrm.MediaDrmStateException\" rel=\"android.media.MediaDrm.MediaDrmStateException\" class=\"docClass\">android.media.MediaDrm.MediaDrmStateException</a>\n when a method is called on a MediaDrm object that has had an unrecoverable failure\n in the DRM plugin or security hardware.\n <a href=\"#!/api/android.media.MediaDrm.MediaDrmStateException\" rel=\"android.media.MediaDrm.MediaDrmStateException\" class=\"docClass\">android.media.MediaDrm.MediaDrmStateException</a> extends\n java.lang.IllegalStateException with the addition of a developer-readable\n diagnostic information string associated with the exception.\n <p>\n In the event of a mediaserver process crash or restart while a MediaDrm object\n is active, MediaDrm methods may throw <a href=\"#!/api/android.media.MediaDrmResetException\" rel=\"android.media.MediaDrmResetException\" class=\"docClass\">android.media.MediaDrmResetException</a>.\n To recover, the app must release the MediaDrm object, then create and initialize\n a new one.\n <p>\n As <a href=\"#!/api/android.media.MediaDrmResetException\" rel=\"android.media.MediaDrmResetException\" class=\"docClass\">android.media.MediaDrmResetException</a> and\n <a href=\"#!/api/android.media.MediaDrm.MediaDrmStateException\" rel=\"android.media.MediaDrm.MediaDrmStateException\" class=\"docClass\">android.media.MediaDrm.MediaDrmStateException</a> both extend\n java.lang.IllegalStateException, they should be in an earlier catch()\n block than java.lang.IllegalStateException if handled separately.\n <p>\n <a name=\"Callbacks\"></a>\n <h3>Callbacks</h3>\n <p>Applications should register for informational events in order\n to be informed of key state updates during playback or streaming.\n Registration for these events is done via a call to\n <a href=\"#!/api/android.media.MediaDrm-method-setOnEventListener\" rel=\"android.media.MediaDrm-method-setOnEventListener\" class=\"docClass\">setOnEventListener</a>. In order to receive the respective\n callback associated with this listener, applications are required to create\n MediaDrm objects on a thread with its own Looper running (main UI\n thread by default has a Looper running).</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-EVENT_KEY_EXPIRED' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-EVENT_KEY_EXPIRED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-EVENT_KEY_EXPIRED' class='name expandable'>EVENT_KEY_EXPIRED</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>This event type indicates that the licensed usage duration for keys in a session\nhas expired. ...</div><div class='long'><p>This event type indicates that the licensed usage duration for keys in a session\nhas expired.  The keys are no longer valid.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>Use <a href=\"#!/api/android.media.MediaDrm.OnKeyStatusChangeListener-method-onKeyStatusChange\" rel=\"android.media.MediaDrm.OnKeyStatusChangeListener-method-onKeyStatusChange\" class=\"docClass\">android.media.MediaDrm.OnKeyStatusChangeListener.onKeyStatusChange</a>\nand check for <a href=\"#!/api/android.media.MediaDrm.KeyStatus-property-STATUS_EXPIRED\" rel=\"android.media.MediaDrm.KeyStatus-property-STATUS_EXPIRED\" class=\"docClass\">android.media.MediaDrm.KeyStatus.STATUS_EXPIRED</a> in the <a href=\"#!/api/android.media.MediaDrm.KeyStatus\" rel=\"android.media.MediaDrm.KeyStatus\" class=\"docClass\">android.media.MediaDrm.KeyStatus</a>\ninstead.</p>\n\n        </div>\n</div></div></div><div id='property-EVENT_KEY_REQUIRED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-EVENT_KEY_REQUIRED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-EVENT_KEY_REQUIRED' class='name expandable'>EVENT_KEY_REQUIRED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This event type indicates that the app needs to request keys from a license\nserver. ...</div><div class='long'><p>This event type indicates that the app needs to request keys from a license\nserver.  The request message data is obtained using <a href=\"#!/api/android.media.MediaDrm-method-getKeyRequest\" rel=\"android.media.MediaDrm-method-getKeyRequest\" class=\"docClass\">getKeyRequest</a>.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-EVENT_PROVISION_REQUIRED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-EVENT_PROVISION_REQUIRED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-EVENT_PROVISION_REQUIRED' class='name expandable'>EVENT_PROVISION_REQUIRED</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>This event type indicates that the app needs to request a certificate from\nthe provisioning server. ...</div><div class='long'><p>This event type indicates that the app needs to request a certificate from\nthe provisioning server.  The request message data is obtained using\n<a href=\"#!/api/android.media.MediaDrm-method-getProvisionRequest\" rel=\"android.media.MediaDrm-method-getProvisionRequest\" class=\"docClass\">getProvisionRequest</a></p>\n<p>Defaults to: <code>&quot;1&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>Handle provisioning via android.media.NotProvisionedException\ninstead.</p>\n\n        </div>\n</div></div></div><div id='property-EVENT_SESSION_RECLAIMED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-EVENT_SESSION_RECLAIMED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-EVENT_SESSION_RECLAIMED' class='name expandable'>EVENT_SESSION_RECLAIMED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This event indicates that a session opened by the app has been reclaimed by the resource\nmanager. ...</div><div class='long'><p>This event indicates that a session opened by the app has been reclaimed by the resource\nmanager.</p>\n<p>Defaults to: <code>&quot;5&quot;</code></p></div></div></div><div id='property-EVENT_VENDOR_DEFINED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-EVENT_VENDOR_DEFINED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-EVENT_VENDOR_DEFINED' class='name expandable'>EVENT_VENDOR_DEFINED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This event may indicate some specific vendor-defined condition, see your\nDRM provider documentation for details ...</div><div class='long'><p>This event may indicate some specific vendor-defined condition, see your\nDRM provider documentation for details</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-HDCP_LEVEL_UNKNOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-HDCP_LEVEL_UNKNOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-HDCP_LEVEL_UNKNOWN' class='name expandable'>HDCP_LEVEL_UNKNOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The DRM plugin did not report an HDCP level, or an error\noccurred accessing it ...</div><div class='long'><p>The DRM plugin did not report an HDCP level, or an error\noccurred accessing it</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-HDCP_NONE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-HDCP_NONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-HDCP_NONE' class='name expandable'>HDCP_NONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>HDCP is not supported on this device, content is unprotected ...</div><div class='long'><p>HDCP is not supported on this device, content is unprotected</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-HDCP_NO_DIGITAL_OUTPUT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-HDCP_NO_DIGITAL_OUTPUT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-HDCP_NO_DIGITAL_OUTPUT' class='name expandable'>HDCP_NO_DIGITAL_OUTPUT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>No digital output, implicitly secure ...</div><div class='long'><p>No digital output, implicitly secure</p>\n<p>Defaults to: <code>&quot;2147483647&quot;</code></p></div></div></div><div id='property-HDCP_V1' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-HDCP_V1' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-HDCP_V1' class='name expandable'>HDCP_V1</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>HDCP version 1.0 ...</div><div class='long'><p>HDCP version 1.0</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-HDCP_V2' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-HDCP_V2' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-HDCP_V2' class='name expandable'>HDCP_V2</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>HDCP version 2.0 Type 1. ...</div><div class='long'><p>HDCP version 2.0 Type 1.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-HDCP_V2_1' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-HDCP_V2_1' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-HDCP_V2_1' class='name expandable'>HDCP_V2_1</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>HDCP version 2.1 Type 1. ...</div><div class='long'><p>HDCP version 2.1 Type 1.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-HDCP_V2_2' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-HDCP_V2_2' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-HDCP_V2_2' class='name expandable'>HDCP_V2_2</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>HDCP version 2.2 Type 1. ...</div><div class='long'><p>HDCP version 2.2 Type 1.</p>\n<p>Defaults to: <code>&quot;5&quot;</code></p></div></div></div><div id='property-HDCP_V2_3' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-HDCP_V2_3' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-HDCP_V2_3' class='name expandable'>HDCP_V2_3</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>HDCP version 2.3 Type 1. ...</div><div class='long'><p>HDCP version 2.3 Type 1.</p>\n<p>Defaults to: <code>&quot;6&quot;</code></p></div></div></div><div id='property-KEY_TYPE_OFFLINE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-KEY_TYPE_OFFLINE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-KEY_TYPE_OFFLINE' class='name expandable'>KEY_TYPE_OFFLINE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This key request type specifies that the keys will be for offline use, they\nwill be saved to the device for use when ...</div><div class='long'><p>This key request type specifies that the keys will be for offline use, they\nwill be saved to the device for use when the device is not connected to a network.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-KEY_TYPE_RELEASE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-KEY_TYPE_RELEASE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-KEY_TYPE_RELEASE' class='name expandable'>KEY_TYPE_RELEASE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This key request type specifies that previously saved offline keys should be released. ...</div><div class='long'><p>This key request type specifies that previously saved offline keys should be released.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-KEY_TYPE_STREAMING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-KEY_TYPE_STREAMING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-KEY_TYPE_STREAMING' class='name expandable'>KEY_TYPE_STREAMING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This key request type species that the keys will be for online use, they will\nnot be saved to the device for subseque...</div><div class='long'><p>This key request type species that the keys will be for online use, they will\nnot be saved to the device for subsequent use when the device is not connected\nto a network.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-OFFLINE_LICENSE_STATE_RELEASED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-OFFLINE_LICENSE_STATE_RELEASED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-OFFLINE_LICENSE_STATE_RELEASED' class='name expandable'>OFFLINE_LICENSE_STATE_RELEASED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Offline license is released, the keys have been marked for\nrelease using getKeyRequest with KEY_TYPE_RELEASE but\nthe ...</div><div class='long'><p>Offline license is released, the keys have been marked for\nrelease using <a href=\"#!/api/android.media.MediaDrm-method-getKeyRequest\" rel=\"android.media.MediaDrm-method-getKeyRequest\" class=\"docClass\">getKeyRequest</a> with KEY_TYPE_RELEASE but\nthe key response has not been received.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-OFFLINE_LICENSE_STATE_UNKNOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-OFFLINE_LICENSE_STATE_UNKNOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-OFFLINE_LICENSE_STATE_UNKNOWN' class='name expandable'>OFFLINE_LICENSE_STATE_UNKNOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Offline license state is unknown, an error occurred while trying\nto access it. ...</div><div class='long'><p>Offline license state is unknown, an error occurred while trying\nto access it.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-OFFLINE_LICENSE_STATE_USABLE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-OFFLINE_LICENSE_STATE_USABLE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-OFFLINE_LICENSE_STATE_USABLE' class='name expandable'>OFFLINE_LICENSE_STATE_USABLE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Offline license is usable, the keys may be used for decryption. ...</div><div class='long'><p>Offline license is usable, the keys may be used for decryption.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-PROPERTY_ALGORITHMS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-PROPERTY_ALGORITHMS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-PROPERTY_ALGORITHMS' class='name expandable'>PROPERTY_ALGORITHMS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>String property name: a comma-separated list of cipher and mac algorithms\nsupported by CryptoSession. ...</div><div class='long'><p>String property name: a comma-separated list of cipher and mac algorithms\nsupported by CryptoSession.  The list may be empty if the DRM\nplugin does not support CryptoSession operations.</p>\n<p>Defaults to: <code>&quot;algorithms&quot;</code></p></div></div></div><div id='property-PROPERTY_DESCRIPTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-PROPERTY_DESCRIPTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-PROPERTY_DESCRIPTION' class='name expandable'>PROPERTY_DESCRIPTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>String property name: describes the DRM plugin ...</div><div class='long'><p>String property name: describes the DRM plugin</p>\n<p>Defaults to: <code>&quot;description&quot;</code></p></div></div></div><div id='property-PROPERTY_DEVICE_UNIQUE_ID' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-PROPERTY_DEVICE_UNIQUE_ID' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-PROPERTY_DEVICE_UNIQUE_ID' class='name expandable'>PROPERTY_DEVICE_UNIQUE_ID</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Byte array property name: the device unique identifier is established during\ndevice provisioning and provides a means...</div><div class='long'><p>Byte array property name: the device unique identifier is established during\ndevice provisioning and provides a means of uniquely identifying each device.</p>\n<p>Defaults to: <code>&quot;deviceUniqueId&quot;</code></p></div></div></div><div id='property-PROPERTY_VENDOR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-PROPERTY_VENDOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-PROPERTY_VENDOR' class='name expandable'>PROPERTY_VENDOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>String property name: identifies the maker of the DRM plugin ...</div><div class='long'><p>String property name: identifies the maker of the DRM plugin</p>\n<p>Defaults to: <code>&quot;vendor&quot;</code></p></div></div></div><div id='property-PROPERTY_VERSION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-PROPERTY_VERSION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-PROPERTY_VERSION' class='name expandable'>PROPERTY_VERSION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>String property name: identifies the version of the DRM plugin ...</div><div class='long'><p>String property name: identifies the version of the DRM plugin</p>\n<p>Defaults to: <code>&quot;version&quot;</code></p></div></div></div><div id='property-SECURITY_LEVEL_HW_SECURE_ALL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-SECURITY_LEVEL_HW_SECURE_ALL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-SECURITY_LEVEL_HW_SECURE_ALL' class='name expandable'>SECURITY_LEVEL_HW_SECURE_ALL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>DRM key management, crypto operations, decoding of content and all\nhandling of the media (compressed and uncompressed...</div><div class='long'><p>DRM key management, crypto operations, decoding of content and all\nhandling of the media (compressed and uncompressed) is handled within a\nhardware backed trusted execution environment.</p>\n<p>Defaults to: <code>&quot;5&quot;</code></p></div></div></div><div id='property-SECURITY_LEVEL_HW_SECURE_CRYPTO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-SECURITY_LEVEL_HW_SECURE_CRYPTO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-SECURITY_LEVEL_HW_SECURE_CRYPTO' class='name expandable'>SECURITY_LEVEL_HW_SECURE_CRYPTO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>DRM key management and crypto operations are performed within a hardware\nbacked trusted execution environment. ...</div><div class='long'><p>DRM key management and crypto operations are performed within a hardware\nbacked trusted execution environment.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-SECURITY_LEVEL_HW_SECURE_DECODE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-SECURITY_LEVEL_HW_SECURE_DECODE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-SECURITY_LEVEL_HW_SECURE_DECODE' class='name expandable'>SECURITY_LEVEL_HW_SECURE_DECODE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>DRM key management, crypto operations and decoding of content are\nperformed within a hardware backed trusted executio...</div><div class='long'><p>DRM key management, crypto operations and decoding of content are\nperformed within a hardware backed trusted execution environment.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-SECURITY_LEVEL_SW_SECURE_CRYPTO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-SECURITY_LEVEL_SW_SECURE_CRYPTO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-SECURITY_LEVEL_SW_SECURE_CRYPTO' class='name expandable'>SECURITY_LEVEL_SW_SECURE_CRYPTO</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>DRM key management uses software-based whitebox crypto. ...</div><div class='long'><p>DRM key management uses software-based whitebox crypto.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-SECURITY_LEVEL_SW_SECURE_DECODE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-SECURITY_LEVEL_SW_SECURE_DECODE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-SECURITY_LEVEL_SW_SECURE_DECODE' class='name expandable'>SECURITY_LEVEL_SW_SECURE_DECODE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>DRM key management and decoding use software-based whitebox crypto. ...</div><div class='long'><p>DRM key management and decoding use software-based whitebox crypto.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-SECURITY_LEVEL_UNKNOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-property-SECURITY_LEVEL_UNKNOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-property-SECURITY_LEVEL_UNKNOWN' class='name expandable'>SECURITY_LEVEL_UNKNOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The DRM plugin did not report a security level, or an error occurred\naccessing it ...</div><div class='long'><p>The DRM plugin did not report a security level, or an error occurred\naccessing it</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-clearOnEventListener' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-clearOnEventListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-clearOnEventListener' class='name expandable'>clearOnEventListener</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clear the android.media.MediaDrm.OnEventListener. ...</div><div class='long'><p>Clear the <a href=\"#!/api/android.media.MediaDrm.OnEventListener\" rel=\"android.media.MediaDrm.OnEventListener\" class=\"docClass\">android.media.MediaDrm.OnEventListener</a>.</p>\n</div></div></div><div id='method-clearOnExpirationUpdateListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-clearOnExpirationUpdateListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-clearOnExpirationUpdateListener' class='name expandable'>clearOnExpirationUpdateListener</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clear the android.media.MediaDrm.OnExpirationUpdateListener. ...</div><div class='long'><p>Clear the <a href=\"#!/api/android.media.MediaDrm.OnExpirationUpdateListener\" rel=\"android.media.MediaDrm.OnExpirationUpdateListener\" class=\"docClass\">android.media.MediaDrm.OnExpirationUpdateListener</a>.</p>\n</div></div></div><div id='method-clearOnKeyStatusChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-clearOnKeyStatusChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-clearOnKeyStatusChangeListener' class='name expandable'>clearOnKeyStatusChangeListener</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clear the android.media.MediaDrm.OnKeyStatusChangeListener. ...</div><div class='long'><p>Clear the <a href=\"#!/api/android.media.MediaDrm.OnKeyStatusChangeListener\" rel=\"android.media.MediaDrm.OnKeyStatusChangeListener\" class=\"docClass\">android.media.MediaDrm.OnKeyStatusChangeListener</a>.</p>\n</div></div></div><div id='method-clearOnSessionLostStateListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-clearOnSessionLostStateListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-clearOnSessionLostStateListener' class='name expandable'>clearOnSessionLostStateListener</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clear the android.media.MediaDrm.OnSessionLostStateListener. ...</div><div class='long'><p>Clear the <a href=\"#!/api/android.media.MediaDrm.OnSessionLostStateListener\" rel=\"android.media.MediaDrm.OnSessionLostStateListener\" class=\"docClass\">android.media.MediaDrm.OnSessionLostStateListener</a>.</p>\n</div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases resources associated with the current session of\n MediaDrm. ...</div><div class='long'><p>Releases resources associated with the current session of\n MediaDrm. It is considered good practice to call this method when\n the <a href=\"#!/api/android.media.MediaDrm\" rel=\"android.media.MediaDrm\" class=\"docClass\">android.media.MediaDrm</a> object is no longer needed in your\n application. After this method is called, <a href=\"#!/api/android.media.MediaDrm\" rel=\"android.media.MediaDrm\" class=\"docClass\">android.media.MediaDrm</a> is no\n longer usable since it has lost all of its required resource.</p>\n\n<p> This method was added in API 28. In API versions 18 through 27, release()\n should be called instead. There is no need to do anything for API\n versions prior to 18.</p>\n</div></div></div><div id='method-closeSession' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-closeSession' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-closeSession' class='name expandable'>closeSession</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Close a session on the MediaDrm object that was previously opened\n with openSession. ...</div><div class='long'><p>Close a session on the MediaDrm object that was previously opened\n with <a href=\"#!/api/android.media.MediaDrm-method-openSession\" rel=\"android.media.MediaDrm-method-openSession\" class=\"docClass\">openSession</a>.</p>\n</div></div></div><div id='method-getConnectedHdcpLevel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getConnectedHdcpLevel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getConnectedHdcpLevel' class='name expandable'>getConnectedHdcpLevel</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the HDCP level negotiated with downstream receivers the\n device is connected to. ...</div><div class='long'><p>Return the HDCP level negotiated with downstream receivers the\n device is connected to. If multiple HDCP-capable displays are\n simultaneously connected to separate interfaces, this method\n returns the lowest negotiated level of all interfaces.\n <p>\n This method should only be used for informational purposes, not for\n enforcing compliance with HDCP requirements. Trusted enforcement of\n HDCP policies must be handled by the DRM system.\n <p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the connected HDCP level</p>\n</div></li></ul></div></div></div><div id='method-getCryptoSession' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getCryptoSession' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getCryptoSession' class='name expandable'>getCryptoSession</a>( <span class='pre'>sessionId, cipherAlgorithm, macAlgorithm</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtain a CryptoSession object which can be used to encrypt, decrypt,\n sign and verify messages or data using the sess...</div><div class='long'><p>Obtain a CryptoSession object which can be used to encrypt, decrypt,\n sign and verify messages or data using the session keys established\n for the session using methods <a href=\"#!/api/android.media.MediaDrm-method-getKeyRequest\" rel=\"android.media.MediaDrm-method-getKeyRequest\" class=\"docClass\">getKeyRequest</a> and\n <a href=\"#!/api/android.media.MediaDrm-method-provideKeyResponse\" rel=\"android.media.MediaDrm-method-provideKeyResponse\" class=\"docClass\">provideKeyResponse</a> using a session key server.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sessionId</span> : Object {byte[]}<div class='sub-desc'><p>the session ID for the session containing keys\n to be used for encrypt, decrypt, sign and/or verify</p>\n</div></li><li><span class='pre'>cipherAlgorithm</span> : String<div class='sub-desc'><p>the algorithm to use for encryption and\n decryption ciphers. The algorithm string conforms to JCA Standard\n Names for Cipher Transforms and is case insensitive.  For example\n \"AES/CBC/NoPadding\".</p>\n</div></li><li><span class='pre'>macAlgorithm</span> : String<div class='sub-desc'><p>the algorithm to use for sign and verify\n The algorithm string conforms to JCA Standard Names for Mac\n Algorithms and is case insensitive.  For example \"HmacSHA256\".\n <p>\n The list of supported algorithms for a DRM plugin can be obtained\n using the method <a href=\"#!/api/android.media.MediaDrm-method-getPropertyString\" rel=\"android.media.MediaDrm-method-getPropertyString\" class=\"docClass\">getPropertyString</a> with the property name\n \"algorithms\".</p>\n</div></li></ul></div></div></div><div id='method-getKeyRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getKeyRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getKeyRequest' class='name expandable'>getKeyRequest</a>( <span class='pre'>scope, init, mimeType, keyType, optionalParameters</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>A key request/response exchange occurs between the app and a license server\n to obtain or release keys used to decryp...</div><div class='long'><p>A key request/response exchange occurs between the app and a license server\n to obtain or release keys used to decrypt encrypted content.\n <p>\n getKeyRequest() is used to obtain an opaque key request byte array that is\n delivered to the license server.  The opaque key request byte array is returned\n in KeyRequest.data.  The recommended URL to deliver the key request to is\n returned in KeyRequest.defaultUrl.\n <p>\n After the app has received the key request response from the server,\n it should deliver to the response to the MediaDrm instance using the method\n <a href=\"#!/api/android.media.MediaDrm-method-provideKeyResponse\" rel=\"android.media.MediaDrm-method-provideKeyResponse\" class=\"docClass\">provideKeyResponse</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>scope</span> : Object {byte[]}<div class='sub-desc'><p>may be a sessionId or a keySetId, depending on the specified keyType.\n When the keyType is KEY_TYPE_STREAMING or KEY_TYPE_OFFLINE,\n scope should be set to the sessionId the keys will be provided to.  When the keyType\n is KEY_TYPE_RELEASE, scope should be set to the keySetId of the keys\n being released. Releasing keys from a device invalidates them for all sessions.</p>\n</div></li><li><span class='pre'>init</span> : Object {byte[]}<div class='sub-desc'><p>container-specific data, its meaning is interpreted based on the\n mime type provided in the mimeType parameter.  It could contain, for example,\n the content ID, key ID or other data obtained from the content metadata that is\n required in generating the key request. May be null when keyType is\n KEY_TYPE_RELEASE or if the request is a renewal, i.e. not the first key\n request for the session.</p>\n</div></li><li><span class='pre'>mimeType</span> : String<div class='sub-desc'><p>identifies the mime type of the content. May be null if the\n keyType is KEY_TYPE_RELEASE or if the request is a renewal, i.e. not the\n first key request for the session.</p>\n</div></li><li><span class='pre'>keyType</span> : Number<div class='sub-desc'><p>specifes the type of the request. The request may be to acquire\n keys for streaming or offline content, or to release previously acquired\n keys, which are identified by a keySetId.</p>\n</div></li><li><span class='pre'>optionalParameters</span> : Object {java.util.HashMap}<div class='sub-desc'><p>are included in the key request message to\n allow a client application to provide additional message parameters to the server.\n This may be {@code null} if no additional parameters are to be sent.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NotProvisionedException if reprovisioning is needed, due to a\n problem with the certifcate</p>\n</div></li></ul></div></div></div><div id='method-getMaxHdcpLevel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getMaxHdcpLevel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getMaxHdcpLevel' class='name expandable'>getMaxHdcpLevel</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the maximum supported HDCP level. ...</div><div class='long'><p>Return the maximum supported HDCP level. The maximum HDCP level is a\n constant for a given device, it does not depend on downstream receivers\n that may be connected. If multiple HDCP-capable interfaces are present,\n it indicates the highest of the maximum HDCP levels of all interfaces.\n <p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the maximum supported HDCP level</p>\n</div></li></ul></div></div></div><div id='method-getMaxSecurityLevel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getMaxSecurityLevel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getMaxSecurityLevel' class='name expandable'>getMaxSecurityLevel</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a value that may be passed as a parameter to openSession(int)\n requesting that the session be opened at the m...</div><div class='long'><p>Returns a value that may be passed as a parameter to <a href=\"#!/api/android.media.MediaDrm-method-openSession\" rel=\"android.media.MediaDrm-method-openSession\" class=\"docClass\">openSession</a>(int)\n requesting that the session be opened at the maximum security level of\n the device.</p>\n</div></div></div><div id='method-getMaxSessionCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getMaxSessionCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getMaxSessionCount' class='name expandable'>getMaxSessionCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the maximum number of MediaDrm sessions that may be opened\n simultaneosly among all MediaDrm instances for the...</div><div class='long'><p>Return the maximum number of MediaDrm sessions that may be opened\n simultaneosly among all MediaDrm instances for the active DRM\n scheme. The maximum number of sessions is not affected by any\n sessions that may have already been opened.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>maximum sessions.</p>\n</div></li></ul></div></div></div><div id='method-getMetrics' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getMetrics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getMetrics' class='name expandable'>getMetrics</a>( <span class='pre'></span> ) : Object {android.os.PersistableBundle}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return Metrics data about the current MediaDrm instance. ...</div><div class='long'><p>Return Metrics data about the current MediaDrm instance.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.PersistableBundle}</span><div class='sub-desc'><p>a PersistableBundle containing the set of attributes and values\n available for this instance of MediaDrm.\n The attributes are described in MetricsConstants.</p>\n\n<p> Additional vendor-specific fields may also be present in\n the return value.</p>\n</div></li></ul></div></div></div><div id='method-getOfflineLicenseKeySetIds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getOfflineLicenseKeySetIds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getOfflineLicenseKeySetIds' class='name expandable'>getOfflineLicenseKeySetIds</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>The keys in an offline license allow protected content to be played even\n if the device is not connected to a network. ...</div><div class='long'><p>The keys in an offline license allow protected content to be played even\n if the device is not connected to a network. Offline licenses are stored\n on the device after a key request/response exchange when the key request\n KeyType is OFFLINE. Normally each app is responsible for keeping track of\n the keySetIds it has created. If an app loses the keySetId for any stored\n licenses that it created, however, it must be able to recover the stored\n keySetIds so those licenses can be removed when they expire or when the\n app is uninstalled.\n <p>\n This method returns a list of the keySetIds for all offline licenses.\n The offline license keySetId may be used to query the status of an\n offline license with <a href=\"#!/api/android.media.MediaDrm-method-getOfflineLicenseState\" rel=\"android.media.MediaDrm-method-getOfflineLicenseState\" class=\"docClass\">getOfflineLicenseState</a> or remove it with\n <a href=\"#!/api/android.media.MediaDrm-method-removeOfflineLicense\" rel=\"android.media.MediaDrm-method-removeOfflineLicense\" class=\"docClass\">removeOfflineLicense</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a list of offline license keySetIds</p>\n</div></li></ul></div></div></div><div id='method-getOfflineLicenseState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getOfflineLicenseState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getOfflineLicenseState' class='name expandable'>getOfflineLicenseState</a>( <span class='pre'>keySetId</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Request the state of an offline license. ...</div><div class='long'><p>Request the state of an offline license. An offline license may be usable\n or inactive. The keys in a usable offline license are available for\n decryption. When the offline license state is inactive, the keys have\n been marked for release using <a href=\"#!/api/android.media.MediaDrm-method-getKeyRequest\" rel=\"android.media.MediaDrm-method-getKeyRequest\" class=\"docClass\">getKeyRequest</a> with\n KEY_TYPE_RELEASE but the key response has not been received. The keys in\n an inactive offline license are not usable for decryption.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keySetId</span> : Object {byte[]}<div class='sub-desc'><p>selects the offline license</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the offline license state</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the keySetId does not refer to an\n offline license.</p>\n</div></li></ul></div></div></div><div id='method-getOpenSessionCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getOpenSessionCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getOpenSessionCount' class='name expandable'>getOpenSessionCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the number of MediaDrm sessions that are currently opened\n simultaneously among all MediaDrm instances for the...</div><div class='long'><p>Return the number of MediaDrm sessions that are currently opened\n simultaneously among all MediaDrm instances for the active DRM scheme.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of open sessions.</p>\n</div></li></ul></div></div></div><div id='method-getPropertyByteArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getPropertyByteArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getPropertyByteArray' class='name expandable'>getPropertyByteArray</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Read a MediaDrm byte array property value, given the property name string. ...</div><div class='long'><p>Read a MediaDrm byte array property value, given the property name string.\n <p>\n Standard fields names are <a href=\"#!/api/android.media.MediaDrm-property-PROPERTY_DEVICE_UNIQUE_ID\" rel=\"android.media.MediaDrm-property-PROPERTY_DEVICE_UNIQUE_ID\" class=\"docClass\">PROPERTY_DEVICE_UNIQUE_ID</a></p>\n</div></div></div><div id='method-getPropertyString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getPropertyString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getPropertyString' class='name expandable'>getPropertyString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Read a MediaDrm String property value, given the property name string. ...</div><div class='long'><p>Read a MediaDrm String property value, given the property name string.\n <p>\n Standard fields names are:\n <a href=\"#!/api/android.media.MediaDrm-property-PROPERTY_VENDOR\" rel=\"android.media.MediaDrm-property-PROPERTY_VENDOR\" class=\"docClass\">PROPERTY_VENDOR</a>, <a href=\"#!/api/android.media.MediaDrm-property-PROPERTY_VERSION\" rel=\"android.media.MediaDrm-property-PROPERTY_VERSION\" class=\"docClass\">PROPERTY_VERSION</a>,\n <a href=\"#!/api/android.media.MediaDrm-property-PROPERTY_DESCRIPTION\" rel=\"android.media.MediaDrm-property-PROPERTY_DESCRIPTION\" class=\"docClass\">PROPERTY_DESCRIPTION</a>, <a href=\"#!/api/android.media.MediaDrm-property-PROPERTY_ALGORITHMS\" rel=\"android.media.MediaDrm-property-PROPERTY_ALGORITHMS\" class=\"docClass\">PROPERTY_ALGORITHMS</a></p>\n</div></div></div><div id='method-getProvisionRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getProvisionRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getProvisionRequest' class='name expandable'>getProvisionRequest</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>A provision request/response exchange occurs between the app and a provisioning\n server to retrieve a device certific...</div><div class='long'><p>A provision request/response exchange occurs between the app and a provisioning\n server to retrieve a device certificate.  If provisionining is required, the\n EVENT_PROVISION_REQUIRED event will be sent to the event handler.\n getProvisionRequest is used to obtain the opaque provision request byte array that\n should be delivered to the provisioning server. The provision request byte array\n is returned in ProvisionRequest.data. The recommended URL to deliver the provision\n request to is returned in ProvisionRequest.defaultUrl.</p>\n</div></div></div><div id='method-getSecureStop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getSecureStop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getSecureStop' class='name expandable'>getSecureStop</a>( <span class='pre'>ssid</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Access a specific secure stop given its secure stop ID. ...</div><div class='long'><p>Access a specific secure stop given its secure stop ID.\n Each secure stop has a unique ID.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ssid</span> : Object {byte[]}<div class='sub-desc'><p>the ID of the secure stop to return</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the secure stop identified by ssid</p>\n</div></li></ul></div></div></div><div id='method-getSecureStopIds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getSecureStopIds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getSecureStopIds' class='name expandable'>getSecureStopIds</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a list of all secure stop IDs currently in persistent memory. ...</div><div class='long'><p>Return a list of all secure stop IDs currently in persistent memory.\n The secure stop ID can be used to access or remove the corresponding\n secure stop.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a list of secure stop IDs</p>\n</div></li></ul></div></div></div><div id='method-getSecureStops' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getSecureStops' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getSecureStops' class='name expandable'>getSecureStops</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Secure stops are a way to enforce limits on the number of concurrent\n streams per subscriber across devices. ...</div><div class='long'><p>Secure stops are a way to enforce limits on the number of concurrent\n streams per subscriber across devices. They provide secure monitoring of\n the lifetime of content decryption keys in MediaDrm sessions.\n <p>\n A secure stop is written to secure persistent memory when keys are loaded\n into a MediaDrm session. The secure stop state indicates that the keys\n are available for use. When playback completes and the keys are removed\n or the session is destroyed, the secure stop state is updated to indicate\n that keys are no longer usable.\n <p>\n After playback, the app can query the secure stop and send it in a\n message to the license server confirming that the keys are no longer\n active. The license server returns a secure stop release response\n message to the app which then deletes the secure stop from persistent\n memory using <a href=\"#!/api/android.media.MediaDrm-method-releaseSecureStops\" rel=\"android.media.MediaDrm-method-releaseSecureStops\" class=\"docClass\">releaseSecureStops</a>.\n <p>\n Each secure stop has a unique ID that can be used to identify it during\n enumeration, access and removal.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a list of all secure stops from secure persistent memory</p>\n</div></li></ul></div></div></div><div id='method-getSecurityLevel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-getSecurityLevel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-getSecurityLevel' class='name expandable'>getSecurityLevel</a>( <span class='pre'>sessionId</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the current security level of a session. ...</div><div class='long'><p>Return the current security level of a session. A session has an initial\n security level determined by the robustness of the DRM system's\n implementation on the device. The security level may be changed at the\n time a session is opened using <a href=\"#!/api/android.media.MediaDrm-method-openSession\" rel=\"android.media.MediaDrm-method-openSession\" class=\"docClass\">openSession</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sessionId</span> : Object {byte[]}<div class='sub-desc'><p>the session to query.\n <p></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the security level of the session</p>\n</div></li></ul></div></div></div><div id='method-isCryptoSchemeSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-isCryptoSchemeSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-isCryptoSchemeSupported' class='name expandable'>isCryptoSchemeSupported</a>( <span class='pre'>uuid, mimeType, securityLevel</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Query if the given scheme identified by its UUID is supported on\n this device, and whether the DRM plugin is able to ...</div><div class='long'><p>Query if the given scheme identified by its UUID is supported on\n this device, and whether the DRM plugin is able to handle the\n media container format specified by mimeType at the requested\n security level.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>uuid</span> : Object {UUID}<div class='sub-desc'><p>The UUID of the crypto scheme.</p>\n</div></li><li><span class='pre'>mimeType</span> : String<div class='sub-desc'><p>The MIME type of the media container, e.g. \"video/mp4\"\n   or \"video/webm\"</p>\n</div></li><li><span class='pre'>securityLevel</span> : Number<div class='sub-desc'><p>the security level requested</p>\n</div></li></ul></div></div></div><div id='method-openSession' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-openSession' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-openSession' class='name expandable'>openSession</a>( <span class='pre'>level</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Open a new session at a requested security level. ...</div><div class='long'><p>Open a new session at a requested security level. The security level\n represents the robustness of the device's DRM implementation. By default,\n sessions are opened at the native security level of the device.\n Overriding the security level is necessary when the decrypted frames need\n to be manipulated, such as for image compositing. The security level\n parameter must be lower than the native level. Reducing the security\n level will typically limit the content to lower resolutions, as\n determined by the license policy. If the requested level is not\n supported, the next lower supported security level will be set. The level\n can be queried using <a href=\"#!/api/android.media.MediaDrm-method-getSecurityLevel\" rel=\"android.media.MediaDrm-method-getSecurityLevel\" class=\"docClass\">getSecurityLevel</a>. A session\n ID is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>level</span> : Number<div class='sub-desc'><p>the new security level</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NotProvisionedException if provisioning is needed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ResourceBusyException if required resources are in use</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the requested security level is\n higher than the native level or lower than the lowest supported level or\n if the device does not support specifying the security level when opening\n a session</p>\n</div></li></ul></div></div></div><div id='method-provideKeyResponse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-provideKeyResponse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-provideKeyResponse' class='name expandable'>provideKeyResponse</a>( <span class='pre'>scope, response</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>A key response is received from the license server by the app, then it is\n provided to the MediaDrm instance using pr...</div><div class='long'><p>A key response is received from the license server by the app, then it is\n provided to the MediaDrm instance using provideKeyResponse.  When the\n response is for an offline key request, a keySetId is returned that can be\n used to later restore the keys to a new session with the method\n <a href=\"#!/api/android.media.MediaDrm-method-restoreKeys\" rel=\"android.media.MediaDrm-method-restoreKeys\" class=\"docClass\">restoreKeys</a>.\n When the response is for a streaming or release request, an empty byte array\n is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>scope</span> : Object {byte[]}<div class='sub-desc'><p>may be a sessionId or keySetId depending on the type of the\n response.  Scope should be set to the sessionId when the response is for either\n streaming or offline key requests.  Scope should be set to the keySetId when\n the response is for a release request.</p>\n</div></li><li><span class='pre'>response</span> : Object {byte[]}<div class='sub-desc'><p>the byte array response from the server</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>If the response is for an offline request, the keySetId for the offline\n keys will be returned. If the response is for a streaming or release request\n an empty byte array will be returned.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NotProvisionedException if the response indicates that\n reprovisioning is required</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DeniedByServerException if the response indicates that the\n server rejected the request</p>\n</div></li></ul></div></div></div><div id='method-provideProvisionResponse' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-provideProvisionResponse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-provideProvisionResponse' class='name expandable'>provideProvisionResponse</a>( <span class='pre'>response</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>After a provision response is received by the app, it is provided to the\n MediaDrm instance using this method. ...</div><div class='long'><p>After a provision response is received by the app, it is provided to the\n MediaDrm instance using this method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>response</span> : Object {byte[]}<div class='sub-desc'><p>the opaque provisioning response byte array to provide to the\n MediaDrm instance.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DeniedByServerException if the response indicates that the\n server rejected the request</p>\n</div></li></ul></div></div></div><div id='method-queryKeyStatus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-queryKeyStatus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-queryKeyStatus' class='name expandable'>queryKeyStatus</a>( <span class='pre'>sessionId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Request an informative description of the key status for the session. ...</div><div class='long'><p>Request an informative description of the key status for the session.  The status is\n in the form of {name, value} pairs.  Since DRM license policies vary by vendor,\n the specific status field names are determined by each DRM vendor.  Refer to your\n DRM provider documentation for definitions of the field names for a particular\n DRM plugin.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sessionId</span> : Object {byte[]}<div class='sub-desc'><p>the session ID for the DRM session</p>\n</div></li></ul></div></div></div><div id='method-release' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-release' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-release' class='name expandable'>release</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>replaced by close().</p>\n\n        </div>\n</div></div></div><div id='method-releaseAllSecureStops' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-releaseAllSecureStops' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-releaseAllSecureStops' class='name expandable'>releaseAllSecureStops</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Remove all secure stops without requiring a secure stop release message from\n the license server. ...</div><div class='long'><p>Remove all secure stops without requiring a secure stop release message from\n the license server.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Remove all secure stops using <a href=\"#!/api/android.media.MediaDrm-method-removeAllSecureStops\" rel=\"android.media.MediaDrm-method-removeAllSecureStops\" class=\"docClass\">removeAllSecureStops</a> instead.</p>\n\n        </div>\n</div></div></div><div id='method-releaseSecureStops' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-releaseSecureStops' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-releaseSecureStops' class='name expandable'>releaseSecureStops</a>( <span class='pre'>ssRelease</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Process the secure stop server response message ssRelease. ...</div><div class='long'><p>Process the secure stop server response message ssRelease.  After\n authenticating the message, remove the secure stops identified in the\n response.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ssRelease</span> : Object {byte[]}<div class='sub-desc'><p>the server response indicating which secure stops to release</p>\n</div></li></ul></div></div></div><div id='method-removeAllSecureStops' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-removeAllSecureStops' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-removeAllSecureStops' class='name expandable'>removeAllSecureStops</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove all secure stops without requiring a secure stop release message from\n the license server. ...</div><div class='long'><p>Remove all secure stops without requiring a secure stop release message from\n the license server.</p>\n\n<p> This method was added in API 28. In API versions 18 through 27,\n <a href=\"#!/api/android.media.MediaDrm-method-releaseAllSecureStops\" rel=\"android.media.MediaDrm-method-releaseAllSecureStops\" class=\"docClass\">releaseAllSecureStops</a> should be called instead. There is no need to\n do anything for API versions prior to 18.</p>\n</div></div></div><div id='method-removeKeys' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-removeKeys' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-removeKeys' class='name expandable'>removeKeys</a>( <span class='pre'>sessionId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove the current keys from a session. ...</div><div class='long'><p>Remove the current keys from a session.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sessionId</span> : Object {byte[]}<div class='sub-desc'><p>the session ID for the DRM session</p>\n</div></li></ul></div></div></div><div id='method-removeOfflineLicense' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-removeOfflineLicense' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-removeOfflineLicense' class='name expandable'>removeOfflineLicense</a>( <span class='pre'>keySetId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Normally offline licenses are released using a key request/response\n exchange using getKeyRequest where the key type ...</div><div class='long'><p>Normally offline licenses are released using a key request/response\n exchange using <a href=\"#!/api/android.media.MediaDrm-method-getKeyRequest\" rel=\"android.media.MediaDrm-method-getKeyRequest\" class=\"docClass\">getKeyRequest</a> where the key type is\n KEY_TYPE_RELEASE, followed by <a href=\"#!/api/android.media.MediaDrm-method-provideKeyResponse\" rel=\"android.media.MediaDrm-method-provideKeyResponse\" class=\"docClass\">provideKeyResponse</a>. This allows\n the server to cryptographically confirm that the license has been removed\n and then adjust the count of offline licenses allocated to the device.\n <p>\n In some exceptional situations it may be necessary to directly remove\n offline licenses without notifying the server, which may be performed\n using this method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>keySetId</span> : Object {byte[]}<div class='sub-desc'><p>the id of the offline license to remove</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the keySetId does not refer to an\n offline license.</p>\n</div></li></ul></div></div></div><div id='method-removeSecureStop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-removeSecureStop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-removeSecureStop' class='name expandable'>removeSecureStop</a>( <span class='pre'>ssid</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a specific secure stop without requiring a secure stop release message\n from the license server. ...</div><div class='long'><p>Remove a specific secure stop without requiring a secure stop release message\n from the license server.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ssid</span> : Object {byte[]}<div class='sub-desc'><p>the ID of the secure stop to remove</p>\n</div></li></ul></div></div></div><div id='method-restoreKeys' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-restoreKeys' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-restoreKeys' class='name expandable'>restoreKeys</a>( <span class='pre'>sessionId, keySetId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Restore persisted offline keys into a new session. ...</div><div class='long'><p>Restore persisted offline keys into a new session.  keySetId identifies the\n keys to load, obtained from a prior call to <a href=\"#!/api/android.media.MediaDrm-method-provideKeyResponse\" rel=\"android.media.MediaDrm-method-provideKeyResponse\" class=\"docClass\">provideKeyResponse</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>sessionId</span> : Object {byte[]}<div class='sub-desc'><p>the session ID for the DRM session</p>\n</div></li><li><span class='pre'>keySetId</span> : Object {byte[]}<div class='sub-desc'><p>identifies the saved key set to restore</p>\n</div></li></ul></div></div></div><div id='method-setOnEventListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-setOnEventListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-setOnEventListener' class='name expandable'>setOnEventListener</a>( <span class='pre'>executor, listener, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when an event occurs ...</div><div class='long'><p>Register a callback to be invoked when an event occurs</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor through which the listener should be invoked</p>\n</div></li><li><span class='pre'>listener</span> : Object {MediaDrm.OnEventListener}<div class='sub-desc'><p>the callback that will be run.</p>\n</div></li><li><span class='pre'>listener</span> : Object<div class='sub-desc'><p>the callback that will be run.</p>\n</div></li></ul></div></div></div><div id='method-setOnExpirationUpdateListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-setOnExpirationUpdateListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-setOnExpirationUpdateListener' class='name expandable'>setOnExpirationUpdateListener</a>( <span class='pre'>executor, listener, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when a session expiration update\n occurs. ...</div><div class='long'><p>Register a callback to be invoked when a session expiration update\n occurs.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor through which the listener should be invoked</p>\n</div></li><li><span class='pre'>listener</span> : Object {MediaDrm.OnExpirationUpdateListener}<div class='sub-desc'><p>the callback that will be run.</p>\n</div></li><li><span class='pre'>listener</span> : Object<div class='sub-desc'><p>the callback that will be run.</p>\n</div></li></ul></div></div></div><div id='method-setOnKeyStatusChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-setOnKeyStatusChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-setOnKeyStatusChangeListener' class='name expandable'>setOnKeyStatusChangeListener</a>( <span class='pre'>listener, executor, executor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when the state of keys in a session\n change. ...</div><div class='long'><p>Register a callback to be invoked when the state of keys in a session\n change.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {Executor}<div class='sub-desc'><p>the callback that will be run when key status changes.</p>\n</div></li><li><span class='pre'>executor</span> : Object {MediaDrm.OnKeyStatusChangeListener}<div class='sub-desc'><p>the executor on which the listener should be invoked.</p>\n</div></li><li><span class='pre'>executor</span> : Object<div class='sub-desc'><p>the executor on which the listener should be invoked.</p>\n</div></li></ul></div></div></div><div id='method-setOnSessionLostStateListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-setOnSessionLostStateListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-setOnSessionLostStateListener' class='name expandable'>setOnSessionLostStateListener</a>( <span class='pre'>listener, executor, executor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a callback to be invoked when session state has been\n lost. ...</div><div class='long'><p>Register a callback to be invoked when session state has been\n lost.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {Executor}<div class='sub-desc'><p>the callback that will be run.</p>\n</div></li><li><span class='pre'>executor</span> : Object {MediaDrm.OnSessionLostStateListener}<div class='sub-desc'><p>the executor on which the listener should be invoked.</p>\n</div></li><li><span class='pre'>executor</span> : Object<div class='sub-desc'><p>the executor on which the listener should be invoked.</p>\n</div></li></ul></div></div></div><div id='method-setPropertyByteArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-setPropertyByteArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-setPropertyByteArray' class='name expandable'>setPropertyByteArray</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a MediaDrm byte array property value, given the property name string\n and new value for the property. ...</div><div class='long'><p>Set a MediaDrm byte array property value, given the property name string\n and new value for the property.</p>\n</div></div></div><div id='method-setPropertyString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaDrm'>android.media.MediaDrm</span><br/><a href='source/MediaDrm.html#android-media-MediaDrm-method-setPropertyString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaDrm-method-setPropertyString' class='name expandable'>setPropertyString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a MediaDrm String property value, given the property name string\n and new value for the property. ...</div><div class='long'><p>Set a MediaDrm String property value, given the property name string\n and new value for the property.</p>\n</div></div></div></div></div></div></div>","meta":{}});