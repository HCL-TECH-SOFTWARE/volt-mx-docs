Ext.data.JsonP.android_media_MediaPlayer2_DrmEventCallback({"tagname":"class","name":"android.media.MediaPlayer2.DrmEventCallback","autodetected":{},"files":[{"filename":"DrmEventCallback.js","href":"DrmEventCallback.html#android-media-MediaPlayer2-DrmEventCallback"}],"extends":"java.lang.Object","members":[{"name":"onDrmConfig","tagname":"method","owner":"android.media.MediaPlayer2.DrmEventCallback","id":"method-onDrmConfig","meta":{}},{"name":"onDrmInfo","tagname":"method","owner":"android.media.MediaPlayer2.DrmEventCallback","id":"method-onDrmInfo","meta":{}},{"name":"onDrmKeyRequest","tagname":"method","owner":"android.media.MediaPlayer2.DrmEventCallback","id":"method-onDrmKeyRequest","meta":{}},{"name":"onDrmPrepared","tagname":"method","owner":"android.media.MediaPlayer2.DrmEventCallback","id":"method-onDrmPrepared","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.MediaPlayer2.DrmEventCallback","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.MediaPlayer2.DrmEventCallback</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/DrmEventCallback.html#android-media-MediaPlayer2-DrmEventCallback' target='_blank'>DrmEventCallback.js</a></div></pre><div class='doc-contents'><p>Interface definition for callbacks to be invoked when the player has the corresponding\n DRM events.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-onDrmConfig' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer2.DrmEventCallback'>android.media.MediaPlayer2.DrmEventCallback</span><br/><a href='source/DrmEventCallback.html#android-media-MediaPlayer2-DrmEventCallback-method-onDrmConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer2.DrmEventCallback-method-onDrmConfig' class='name expandable'>onDrmConfig</a>( <span class='pre'>mp, dsd, drm</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to give the app the opportunity to configure DRM before the session is created. ...</div><div class='long'><p>Called to give the app the opportunity to configure DRM before the session is created.</p>\n\n<p> This facilitates configuration of the properties, like 'securityLevel', which\n has to be set after DRM scheme creation but before the DRM session is opened.</p>\n\n<p> The only allowed DRM calls in this listener are\n android.media.MediaDrm.getPropertyString(String),\n android.media.MediaDrm.getPropertyByteArray(String),\n String),\n byte[]),\n <a href=\"#!/api/android.media.MediaDrm-method-setOnExpirationUpdateListener\" rel=\"android.media.MediaDrm-method-setOnExpirationUpdateListener\" class=\"docClass\">android.media.MediaDrm.setOnExpirationUpdateListener</a>,\n and <a href=\"#!/api/android.media.MediaDrm-method-setOnKeyStatusChangeListener\" rel=\"android.media.MediaDrm-method-setOnKeyStatusChangeListener\" class=\"docClass\">android.media.MediaDrm.setOnKeyStatusChangeListener</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mp</span> : Object {MediaPlayer2}<div class='sub-desc'><p>the {@code MediaPlayer2} associated with this callback</p>\n</div></li><li><span class='pre'>dsd</span> : Object {DataSourceDesc}<div class='sub-desc'><p>the DataSourceDesc of this data source</p>\n</div></li><li><span class='pre'>drm</span> : Object {MediaDrm}<div class='sub-desc'><p>handle to get/set DRM properties and listeners for this data source</p>\n</div></li></ul></div></div></div><div id='method-onDrmInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer2.DrmEventCallback'>android.media.MediaPlayer2.DrmEventCallback</span><br/><a href='source/DrmEventCallback.html#android-media-MediaPlayer2-DrmEventCallback-method-onDrmInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer2.DrmEventCallback-method-onDrmInfo' class='name expandable'>onDrmInfo</a>( <span class='pre'>mp, dsd, drmInfo</span> ) : Object {android.media.MediaPlayer2.DrmPreparationInfo}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to indicate DRM info is available. ...</div><div class='long'><p>Called to indicate DRM info is available. Return a <a href=\"#!/api/android.media.MediaPlayer2.DrmPreparationInfo\" rel=\"android.media.MediaPlayer2.DrmPreparationInfo\" class=\"docClass\">android.media.MediaPlayer2.DrmPreparationInfo</a> object that\n bundles DRM initialization parameters.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mp</span> : Object {MediaPlayer2}<div class='sub-desc'><p>the {@code MediaPlayer2} associated with this callback</p>\n</div></li><li><span class='pre'>dsd</span> : Object {DataSourceDesc}<div class='sub-desc'><p>the DataSourceDesc of this data source</p>\n</div></li><li><span class='pre'>drmInfo</span> : Object {MediaPlayer2.DrmInfo}<div class='sub-desc'><p>DRM info of the source including PSSH, and subset of crypto schemes\n        supported by this device</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.MediaPlayer2.DrmPreparationInfo}</span><div class='sub-desc'><p>a DrmPreparationInfo object to initialize DRM playback, or null to skip\n         DRM initialization</p>\n</div></li></ul></div></div></div><div id='method-onDrmKeyRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer2.DrmEventCallback'>android.media.MediaPlayer2.DrmEventCallback</span><br/><a href='source/DrmEventCallback.html#android-media-MediaPlayer2-DrmEventCallback-method-onDrmKeyRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer2.DrmEventCallback-method-onDrmKeyRequest' class='name expandable'>onDrmKeyRequest</a>( <span class='pre'>mp, dsd, request</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to indicate the DRM session for {@code dsd} is ready for key request/response ...</div><div class='long'><p>Called to indicate the DRM session for {@code dsd} is ready for key request/response</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mp</span> : Object {MediaPlayer2}<div class='sub-desc'><p>the {@code MediaPlayer2} associated with this callback</p>\n</div></li><li><span class='pre'>dsd</span> : Object {DataSourceDesc}<div class='sub-desc'><p>the DataSourceDesc of this data source</p>\n</div></li><li><span class='pre'>request</span> : Object {MediaDrm.KeyRequest}<div class='sub-desc'><p>a MediaDrm.KeyRequest prepared using the\n        DrmPreparationInfo returned from\n        DataSourceDesc, DrmInfo)</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the response to {@code request} (from license server); returning {@code null} or\n         throwing an RuntimeException from this callback would trigger an\n         EventCallback.onError.</p>\n</div></li></ul></div></div></div><div id='method-onDrmPrepared' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaPlayer2.DrmEventCallback'>android.media.MediaPlayer2.DrmEventCallback</span><br/><a href='source/DrmEventCallback.html#android-media-MediaPlayer2-DrmEventCallback-method-onDrmPrepared' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaPlayer2.DrmEventCallback-method-onDrmPrepared' class='name expandable'>onDrmPrepared</a>( <span class='pre'>mp, dsd, status, keySetId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to notify the client that {@code mp} is ready to decrypt DRM protected data source\n {@code dsd} or if there is...</div><div class='long'><p>Called to notify the client that {@code mp} is ready to decrypt DRM protected data source\n {@code dsd} or if there is an error during DRM preparation</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mp</span> : Object {MediaPlayer2}<div class='sub-desc'><p>the {@code MediaPlayer2} associated with this callback</p>\n</div></li><li><span class='pre'>dsd</span> : Object {DataSourceDesc}<div class='sub-desc'><p>the DataSourceDesc of this data source</p>\n</div></li><li><span class='pre'>status</span> : Number<div class='sub-desc'><p>the result of DRM preparation.</p>\n</div></li><li><span class='pre'>keySetId</span> : Object {byte[]}<div class='sub-desc'><p>optional identifier that can be used to restore DRM playback initiated\n        with a MediaDrm.KEY_TYPE_OFFLINE key request.\n@see DrmPreparationInfo.Builder#setKeySetId(byte[])</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});