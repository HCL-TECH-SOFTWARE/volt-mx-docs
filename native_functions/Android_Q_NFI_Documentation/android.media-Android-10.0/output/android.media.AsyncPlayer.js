Ext.data.JsonP.android_media_AsyncPlayer({"tagname":"class","name":"android.media.AsyncPlayer","autodetected":{},"files":[{"filename":"AsyncPlayer.js","href":"AsyncPlayer.html#android-media-AsyncPlayer"}],"extends":"java.lang.Object","members":[{"name":"play","tagname":"method","owner":"android.media.AsyncPlayer","id":"method-play","meta":{}},{"name":"stop","tagname":"method","owner":"android.media.AsyncPlayer","id":"method-stop","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.AsyncPlayer","short_doc":"Plays a series of audio URIs, but does all the hard work on another thread\n so that any slowness with preparing or lo...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.AsyncPlayer</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AsyncPlayer.html#android-media-AsyncPlayer' target='_blank'>AsyncPlayer.js</a></div></pre><div class='doc-contents'><p>Plays a series of audio URIs, but does all the hard work on another thread\n so that any slowness with preparing or loading doesn't block the calling thread.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-play' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.AsyncPlayer'>android.media.AsyncPlayer</span><br/><a href='source/AsyncPlayer.html#android-media-AsyncPlayer-method-play' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.AsyncPlayer-method-play' class='name expandable'>play</a>( <span class='pre'>context, uri, looping, attributes</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Start playing the sound. ...</div><div class='long'><p>Start playing the sound.  It will actually start playing at some\n point in the future.  There are no guarantees about latency here.\n Calling this before another audio file is done playing will stop\n that one and start the new one.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>the non-null application's context.</p>\n</div></li><li><span class='pre'>uri</span> : Object {Uri}<div class='sub-desc'><p>the non-null URI to play.  (see Uri))</p>\n</div></li><li><span class='pre'>looping</span> : Boolean<div class='sub-desc'><p>whether the audio should loop forever.\n          (see MediaPlayer.setLooping(boolean))</p>\n</div></li><li><span class='pre'>attributes</span> : Object {AudioAttributes}<div class='sub-desc'><p>the non-null AudioAttributes to use.\n          (see MediaPlayer.setAudioAttributes(AudioAttributes))</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException</p>\n</div></li></ul></div></div></div><div id='method-stop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.AsyncPlayer'>android.media.AsyncPlayer</span><br/><a href='source/AsyncPlayer.html#android-media-AsyncPlayer-method-stop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.AsyncPlayer-method-stop' class='name expandable'>stop</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stop a previously played sound. ...</div><div class='long'><p>Stop a previously played sound.  It can't be played again or unpaused\n at this point.  Calling this multiple times has no ill effects.</p>\n</div></div></div></div></div></div></div>","meta":{}});