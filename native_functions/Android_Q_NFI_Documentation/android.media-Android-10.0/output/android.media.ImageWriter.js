Ext.data.JsonP.android_media_ImageWriter({"tagname":"class","name":"android.media.ImageWriter","autodetected":{},"files":[{"filename":"ImageWriter.js","href":"ImageWriter.html#android-media-ImageWriter"}],"extends":"java.lang.Object","members":[{"name":"close","tagname":"method","owner":"android.media.ImageWriter","id":"method-close","meta":{}},{"name":"dequeueInputImage","tagname":"method","owner":"android.media.ImageWriter","id":"method-dequeueInputImage","meta":{}},{"name":"getFormat","tagname":"method","owner":"android.media.ImageWriter","id":"method-getFormat","meta":{}},{"name":"getMaxImages","tagname":"method","owner":"android.media.ImageWriter","id":"method-getMaxImages","meta":{}},{"name":"newInstance","tagname":"method","owner":"android.media.ImageWriter","id":"method-newInstance","meta":{}},{"name":"queueInputImage","tagname":"method","owner":"android.media.ImageWriter","id":"method-queueInputImage","meta":{}},{"name":"setOnImageReleasedListener","tagname":"method","owner":"android.media.ImageWriter","id":"method-setOnImageReleasedListener","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.ImageWriter","short_doc":"implements java.lang.AutoCloseable\n\n\n The ImageWriter class allows an application to produce Image data into a\n andro...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.ImageWriter</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ImageWriter.html#android-media-ImageWriter' target='_blank'>ImageWriter.js</a></div></pre><div class='doc-contents'><p>implements java.lang.AutoCloseable</p>\n\n<p>\n The ImageWriter class allows an application to produce Image data into a\n android.view.Surface, and have it be consumed by another component\n like CameraDevice.\n </p>\n\n\n<p> <p>\n Several Android API classes can provide input Surface objects for ImageWriter to produce data into, including\n <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> (encoder),\n CameraCaptureSession\n (reprocessing input), <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a>, etc.\n </p>\n <p>\n The input Image data is encapsulated in <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> objects. To produce\n Image data into a destination Surface, the\n application can get an input Image via <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a> then write\n Image data into it. Multiple such <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> objects can be dequeued at\n the same time and queued back in any order, up to the number specified by the\n {@code maxImages} constructor parameter.\n </p>\n <p>\n If the application already has an Image from <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a>, the\n application can directly queue this Image into the ImageWriter (via\n <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueInputImage</a>), potentially with zero buffer copies. This\n even works if the image format of the ImageWriter is\n PRIVATE, and prior to Android P is the only\n way to enqueue images into such an ImageWriter. Starting in Android P\n private images may also be accessed through their hardware buffers\n (when available) through the android.media.Image.getHardwareBuffer() method.\n Attempting to access the planes of a private image, will return an\n empty array.\n </p>\n <p>\n Once new input Images are queued into an ImageWriter, it's up to the\n downstream components (e.g. <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a> or\n android.hardware.camera2.CameraDevice) to consume the Images. If the\n downstream components cannot consume the Images at least as fast as the\n ImageWriter production rate, the <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a> call will\n eventually block and the application will have to drop input frames.\n </p>\n <p>\n If the consumer component that provided the input Surface\n abandons the Surface, <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueing</a>\n or <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueing</a> an <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> will throw an\n IllegalStateException.\n </p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageWriter'>android.media.ImageWriter</span><br/><a href='source/ImageWriter.html#android-media-ImageWriter-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageWriter-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Free up all the resources associated with this ImageWriter. ...</div><div class='long'><p>Free up all the resources associated with this ImageWriter.\n <p>\n After calling this method, this ImageWriter cannot be used. Calling any\n methods on this ImageWriter and Images previously provided by\n <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a>() will result in an\n IllegalStateException, and attempting to write into\n ByteBuffers returned by an earlier\n android.media.Image.Plane#getBuffer call will have undefined\n behavior.\n </p></p>\n</div></div></div><div id='method-dequeueInputImage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageWriter'>android.media.ImageWriter</span><br/><a href='source/ImageWriter.html#android-media-ImageWriter-method-dequeueInputImage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageWriter-method-dequeueInputImage' class='name expandable'>dequeueInputImage</a>( <span class='pre'></span> ) : Object {android.media.Image}<span class=\"signature\"></span></div><div class='description'><div class='short'>Dequeue the next available input Image for the application to produce\n data into. ...</div><div class='long'><p>\n Dequeue the next available input Image for the application to produce\n data into.\n </p>\n\n\n<p> <p>\n This method requests a new input Image from ImageWriter. The application\n owns this Image after this call. Once the application fills the Image\n data, it is expected to return this Image back to ImageWriter for\n downstream consumer components (e.g.\n android.hardware.camera2.CameraDevice) to consume. The Image can\n be returned to ImageWriter via <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueInputImage</a> or\n android.media.Image.close().\n </p>\n <p>\n This call will block if all available input images have been queued by\n the application and the downstream consumer has not yet consumed any.\n When an Image is consumed by the downstream consumer and released, an\n <a href=\"#!/api/android.media.ImageWriter.OnImageReleasedListener-method-onImageReleased\" rel=\"android.media.ImageWriter.OnImageReleasedListener-method-onImageReleased\" class=\"docClass\">android.media.ImageWriter.OnImageReleasedListener.onImageReleased</a> callback will be fired,\n which indicates that there is one input Image available. For non-\n PRIVATE formats (\n getFormat() != android.media.ImageFormat.PRIVATE), it is\n recommended to dequeue the next Image only after this callback is fired,\n in the steady state.\n </p>\n <p>\n If the format of ImageWriter is PRIVATE (\n getFormat() == android.media.ImageFormat.PRIVATE), the\n image buffer is accessible to the application only through the hardware\n buffer obtained through android.media.Image.getHardwareBuffer(). (On Android\n versions prior to P, dequeueing private buffers will cause an\n IllegalStateException to be thrown). Alternatively,\n the application can acquire images from some other component (e.g. an\n <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a>), and queue them directly to this ImageWriter via the\n <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueInputImage()</a> method.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.Image}</span><div class='sub-desc'><p>The next available input Image from this ImageWriter.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if {@code maxImages} Images are currently\n             dequeued, or the input Surface\n             has been abandoned by the consumer component that provided\n             the Surface. Prior to Android\n             P, throws if the ImageWriter format is\n             PRIVATE.\n@see <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueInputImage</a>\n@see Image#close</p>\n</div></li></ul></div></div></div><div id='method-getFormat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageWriter'>android.media.ImageWriter</span><br/><a href='source/ImageWriter.html#android-media-ImageWriter-method-getFormat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageWriter-method-getFormat' class='name expandable'>getFormat</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the ImageWriter format. ...</div><div class='long'><p>Get the ImageWriter format.\n <p>\n This format may be different than the Image format returned by\n android.media.Image.getFormat(). However, if the ImageWriter format is\n PRIVATE, calling <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a>()\n will result in an IllegalStateException.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The ImageWriter format.</p>\n</div></li></ul></div></div></div><div id='method-getMaxImages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageWriter'>android.media.ImageWriter</span><br/><a href='source/ImageWriter.html#android-media-ImageWriter-method-getMaxImages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageWriter-method-getMaxImages' class='name expandable'>getMaxImages</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Maximum number of Images that can be dequeued from the ImageWriter\n simultaneously (for example, with dequeueInputIma...</div><div class='long'><p>\n Maximum number of Images that can be dequeued from the ImageWriter\n simultaneously (for example, with <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a>()).\n </p>\n\n\n<p> <p>\n An Image is considered dequeued after it's returned by\n <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a>() from ImageWriter, and until the Image is\n sent back to ImageWriter via <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueInputImage</a>, or\n android.media.Image.close().\n </p>\n <p>\n Attempting to dequeue more than {@code maxImages} concurrently will\n result in the <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a>() function throwing an\n IllegalStateException.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Maximum number of Images that can be dequeued from this\n         ImageWriter.\n@see <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a>\n@see <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueInputImage</a>\n@see Image#close</p>\n</div></li></ul></div></div></div><div id='method-newInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageWriter'>android.media.ImageWriter</span><br/><a href='source/ImageWriter.html#android-media-ImageWriter-method-newInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageWriter-method-newInstance' class='name expandable'>newInstance</a>( <span class='pre'>surface, maxImages, format</span> ) : Object {android.media.ImageWriter}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new ImageWriter with given number of max Images and format. ...</div><div class='long'><p>\n Create a new ImageWriter with given number of max Images and format.\n </p>\n\n\n<p> <p>\n The {@code maxImages} parameter determines the maximum number of\n <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> objects that can be be dequeued from the\n {@code ImageWriter} simultaneously. Requesting more buffers will use up\n more memory, so it is important to use only the minimum number necessary.\n </p>\n <p>\n The format specifies the image format of this ImageWriter. The format\n from the {@code surface} will be overridden with this format. For example,\n if the surface is obtained from a android.graphics.SurfaceTexture, the default\n format may be PixelFormat.RGBA_8888. If the application creates an ImageWriter\n with this surface and android.media.ImageFormat.PRIVATE, this ImageWriter will be able to operate\n with android.media.ImageFormat.PRIVATE Images.\n </p>\n <p>\n Note that the consumer end-point may or may not be able to support Images with different\n format, for such case, the application should only use this method if the consumer is able\n to consume such images.\n </p>\n <p>\n The input Image size depends on the Surface that is provided by\n the downstream consumer end-point.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>surface</span> : Object {Surface}<div class='sub-desc'><p>The destination Surface this writer produces Image data\n            into.</p>\n</div></li><li><span class='pre'>maxImages</span> : Number<div class='sub-desc'><p>The maximum number of Images the user will want to\n            access simultaneously for producing Image data. This should be\n            as small as possible to limit memory use. Once maxImages\n            Images are dequeued by the user, one of them has to be queued\n            back before a new Image can be dequeued for access via\n            dequeueInputImage().</p>\n</div></li><li><span class='pre'>format</span> : Number<div class='sub-desc'><p>The format of this ImageWriter. It can be any valid format specified by\n            ImageFormat or PixelFormat.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.ImageWriter}</span><div class='sub-desc'><p>a new ImageWriter instance.</p>\n</div></li></ul></div></div></div><div id='method-queueInputImage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageWriter'>android.media.ImageWriter</span><br/><a href='source/ImageWriter.html#android-media-ImageWriter-method-queueInputImage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageWriter-method-queueInputImage' class='name expandable'>queueInputImage</a>( <span class='pre'>image</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Queue an input android.media.Image back to ImageWriter for the downstream\n consumer to access. ...</div><div class='long'><p>\n Queue an input <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> back to ImageWriter for the downstream\n consumer to access.\n </p>\n\n\n<p> <p>\n The input <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> could be from ImageReader (acquired via\n android.media.ImageReader.acquireNextandroid.media.Image or\n android.media.ImageReader.acquireLatestandroid.media.Image), or from this ImageWriter\n (acquired via <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a>). In the former case, the Image\n data will be moved to this ImageWriter. Note that the Image properties\n (size, format, strides, etc.) must be the same as the properties of the\n images dequeued from this ImageWriter, or this method will throw an\n IllegalArgumentException. In the latter case, the application has\n filled the input image with data. This method then passes the filled\n buffer to the downstream consumer. In both cases, it's up to the caller\n to ensure that the Image timestamp (in nanoseconds) is correctly set, as\n the downstream component may want to use it to indicate the Image data\n capture time.\n </p>\n <p>\n After this method is called and the downstream consumer consumes and\n releases the Image, an <a href=\"#!/api/android.media.ImageWriter.OnImageReleasedListener-method-onImageReleased\" rel=\"android.media.ImageWriter.OnImageReleasedListener-method-onImageReleased\" class=\"docClass\">android.media.ImageWriter.OnImageReleasedListener.onImageReleased</a>\n callback will fire. The application can use this callback to avoid\n sending Images faster than the downstream consumer processing rate in\n steady state.\n </p>\n <p>\n Passing in an Image from some other component (e.g. an\n <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a>) requires a free input Image from this ImageWriter as\n the destination. In this case, this call will block, as\n <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a> does, if there are no free Images available.\n To avoid blocking, the application should ensure that there is at least\n one free Image available in this ImageWriter before calling this method.\n </p>\n <p>\n After this call, the input Image is no longer valid for further access,\n as if the Image is <a href=\"#!/api/android.media.Image-method-close\" rel=\"android.media.Image-method-close\" class=\"docClass\">closed</a>. Attempting to access the\n ByteBuffers returned by an earlier\n android.media.Image.Plane#getBuffer call will result in an\n IllegalStateException.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>image</span> : Object {Image}<div class='sub-desc'><p>The Image to be queued back to ImageWriter for future\n            consumption.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the image was already queued previously,\n            or the image was aborted previously, or the input\n            Surface has been abandoned by the\n            consumer component that provided the\n            Surface.\n@see <a href=\"#!/api/android.media.ImageWriter-method-dequeueInputImage\" rel=\"android.media.ImageWriter-method-dequeueInputImage\" class=\"docClass\">dequeueInputImage</a>()</p>\n</div></li></ul></div></div></div><div id='method-setOnImageReleasedListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageWriter'>android.media.ImageWriter</span><br/><a href='source/ImageWriter.html#android-media-ImageWriter-method-setOnImageReleasedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageWriter-method-setOnImageReleasedListener' class='name expandable'>setOnImageReleasedListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a listener to be invoked when an input Image is returned to the\n ImageWriter. ...</div><div class='long'><p>Register a listener to be invoked when an input Image is returned to the\n ImageWriter.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {ImageWriter.OnImageReleasedListener}<div class='sub-desc'><p>The listener that will be run.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>The handler on which the listener should be invoked, or\n            null if the listener should be invoked on the calling thread's\n            looper.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If no handler specified and the calling\n             thread has no looper.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});