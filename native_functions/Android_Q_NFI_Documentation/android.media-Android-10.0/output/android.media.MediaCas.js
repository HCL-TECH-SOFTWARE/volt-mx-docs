Ext.data.JsonP.android_media_MediaCas({"tagname":"class","name":"android.media.MediaCas","autodetected":{},"files":[{"filename":"MediaCas.js","href":"MediaCas.html#android-media-MediaCas"}],"extends":"java.lang.Object","members":[{"name":"close","tagname":"method","owner":"android.media.MediaCas","id":"method-close","meta":{}},{"name":"enumeratePlugins","tagname":"method","owner":"android.media.MediaCas","id":"method-enumeratePlugins","meta":{}},{"name":"isSystemIdSupported","tagname":"method","owner":"android.media.MediaCas","id":"method-isSystemIdSupported","meta":{}},{"name":"openSession","tagname":"method","owner":"android.media.MediaCas","id":"method-openSession","meta":{}},{"name":"processEmm","tagname":"method","owner":"android.media.MediaCas","id":"method-processEmm","meta":{}},{"name":"provision","tagname":"method","owner":"android.media.MediaCas","id":"method-provision","meta":{}},{"name":"refreshEntitlements","tagname":"method","owner":"android.media.MediaCas","id":"method-refreshEntitlements","meta":{}},{"name":"sendEvent","tagname":"method","owner":"android.media.MediaCas","id":"method-sendEvent","meta":{}},{"name":"setEventListener","tagname":"method","owner":"android.media.MediaCas","id":"method-setEventListener","meta":{}},{"name":"setPrivateData","tagname":"method","owner":"android.media.MediaCas","id":"method-setPrivateData","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.MediaCas","short_doc":"implements java.lang.AutoCloseable\n\nMediaCas can be used to obtain keys for descrambling protected media streams, in\n...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.MediaCas</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/MediaCas.html#android-media-MediaCas' target='_blank'>MediaCas.js</a></div></pre><div class='doc-contents'><p>implements java.lang.AutoCloseable</p>\n\n<p>MediaCas can be used to obtain keys for descrambling protected media streams, in\n conjunction with <a href=\"#!/api/android.media.MediaDescrambler\" rel=\"android.media.MediaDescrambler\" class=\"docClass\">android.media.MediaDescrambler</a>. The MediaCas APIs are\n designed to support conditional access such as those in the ISO/IEC13818-1.\n The CA system is identified by a 16-bit integer CA_system_id. The scrambling\n algorithms are usually proprietary and implemented by vendor-specific CA plugins\n installed on the device.\n <p>\n The app is responsible for constructing a MediaCas object for the CA system it\n intends to use. The app can query if a certain CA system is supported using static\n method <a href=\"#!/api/android.media.MediaCas-method-isSystemIdSupported\" rel=\"android.media.MediaCas-method-isSystemIdSupported\" class=\"docClass\">isSystemIdSupported</a>. It can also obtain the entire list of supported\n CA systems using static method <a href=\"#!/api/android.media.MediaCas-method-enumeratePlugins\" rel=\"android.media.MediaCas-method-enumeratePlugins\" class=\"docClass\">enumeratePlugins</a>.\n <p>\n Once the MediaCas object is constructed, the app should properly provision it by\n using method <a href=\"#!/api/android.media.MediaCas-method-provision\" rel=\"android.media.MediaCas-method-provision\" class=\"docClass\">provision</a> and/or <a href=\"#!/api/android.media.MediaCas-method-processEmm\" rel=\"android.media.MediaCas-method-processEmm\" class=\"docClass\">processEmm</a>. The EMMs (Entitlement\n management messages) can be distributed out-of-band, or in-band with the stream.\n <p>\n To descramble elementary streams, the app first calls <a href=\"#!/api/android.media.MediaCas-method-openSession\" rel=\"android.media.MediaCas-method-openSession\" class=\"docClass\">openSession</a> to\n generate a <a href=\"#!/api/android.media.MediaCas.Session\" rel=\"android.media.MediaCas.Session\" class=\"docClass\">android.media.MediaCas.Session</a> object that will uniquely identify a session. A session\n provides a context for subsequent key updates and descrambling activities. The ECMs\n (Entitlement control messages) are sent to the session via method\n <a href=\"#!/api/android.media.MediaCas.Session-method-processEcm\" rel=\"android.media.MediaCas.Session-method-processEcm\" class=\"docClass\">android.media.MediaCas.Session.processEcm</a>.\n <p>\n The app next constructs a MediaDescrambler object, and initializes it with the\n session using <a href=\"#!/api/android.media.MediaDescrambler-method-setMediaCasSession\" rel=\"android.media.MediaDescrambler-method-setMediaCasSession\" class=\"docClass\">android.media.MediaDescrambler.setMediaCasSession</a>. This ties the\n descrambler to the session, and the descrambler can then be used to descramble\n content secured with the session's key, either during extraction, or during decoding\n with <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a>.\n <p>\n If the app handles sample extraction using its own extractor, it can use\n MediaDescrambler to descramble samples into clear buffers (if the session's license\n doesn't require secure decoders), or descramble a small amount of data to retrieve\n information necessary for the downstream pipeline to process the sample (if the\n session's license requires secure decoders).\n <p>\n If the session requires a secure decoder, a MediaDescrambler needs to be provided to\n MediaCodec to descramble samples queued by <a href=\"#!/api/android.media.MediaCodec-method-queueSecureInputBuffer\" rel=\"android.media.MediaCodec-method-queueSecureInputBuffer\" class=\"docClass\">android.media.MediaCodec.queueSecureInputBuffer</a>\n into protected buffers. The app should use android.view.Surface, int, MediaDescrambler) instead of the normal android.view.Surface, android.media.MediaCrypto, int) method\n to configure MediaCodec.\n <p>\n <h3>Using Android's MediaExtractor</h3>\n <p>\n If the app uses <a href=\"#!/api/android.media.MediaExtractor\" rel=\"android.media.MediaExtractor\" class=\"docClass\">android.media.MediaExtractor</a>, it can delegate the CAS session\n management to MediaExtractor by calling <a href=\"#!/api/android.media.MediaExtractor-method-setMediaCas\" rel=\"android.media.MediaExtractor-method-setMediaCas\" class=\"docClass\">android.media.MediaExtractor.setMediaCas</a>.\n MediaExtractor will take over and call <a href=\"#!/api/android.media.MediaCas-method-openSession\" rel=\"android.media.MediaCas-method-openSession\" class=\"docClass\">openSession</a>, <a href=\"#!/api/android.media.MediaCas-method-processEmm\" rel=\"android.media.MediaCas-method-processEmm\" class=\"docClass\">processEmm</a>\n and/or <a href=\"#!/api/android.media.MediaCas.Session-method-processEcm\" rel=\"android.media.MediaCas.Session-method-processEcm\" class=\"docClass\">android.media.MediaCas.Session.processEcm</a>, etc.. if necessary.\n <p>\n When using <a href=\"#!/api/android.media.MediaExtractor\" rel=\"android.media.MediaExtractor\" class=\"docClass\">android.media.MediaExtractor</a>, the app would still need a MediaDescrambler\n to use with <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> if the licensing requires a secure decoder. The\n session associated with the descrambler of a track can be retrieved by calling\n <a href=\"#!/api/android.media.MediaExtractor-method-getCasInfo\" rel=\"android.media.MediaExtractor-method-getCasInfo\" class=\"docClass\">android.media.MediaExtractor.getCasInfo</a>, and used to initialize a MediaDescrambler\n object for MediaCodec.\n <p>\n <h3>Listeners</h3>\n <p>The app may register a listener to receive events from the CA system using\n method <a href=\"#!/api/android.media.MediaCas-method-setEventListener\" rel=\"android.media.MediaCas-method-setEventListener\" class=\"docClass\">setEventListener</a>. The exact format of the event is scheme-specific\n and is not specified by this API.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-enumeratePlugins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-enumeratePlugins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-enumeratePlugins' class='name expandable'>enumeratePlugins</a>( <span class='pre'></span> ) : Object {android.media.MediaCas.PluginDescriptor}<span class=\"signature\"></span></div><div class='description'><div class='short'>List all available CA plugins on the device. ...</div><div class='long'><p>List all available CA plugins on the device.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.MediaCas.PluginDescriptor}</span><div class='sub-desc'><p>an array of descriptors for the available CA plugins.</p>\n</div></li></ul></div></div></div><div id='method-isSystemIdSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-isSystemIdSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-isSystemIdSupported' class='name expandable'>isSystemIdSupported</a>( <span class='pre'>CA_system_id</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Query if a certain CA system is supported on this device. ...</div><div class='long'><p>Query if a certain CA system is supported on this device.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>CA_system_id</span> : Number<div class='sub-desc'><p>the id of the CA system.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether the specified CA system is supported on this device.</p>\n</div></li></ul></div></div></div><div id='method-openSession' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-openSession' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-openSession' class='name expandable'>openSession</a>( <span class='pre'></span> ) : Object {android.media.MediaCas.Session}<span class=\"signature\"></span></div><div class='description'><div class='short'>Open a session to descramble one or more streams scrambled by the\n conditional access system. ...</div><div class='long'><p>Open a session to descramble one or more streams scrambled by the\n conditional access system.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.MediaCas.Session}</span><div class='sub-desc'><p>session the newly opened session.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the MediaCas instance is not valid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasException for CAS-specific errors.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasStateException for CAS-specific state exceptions.</p>\n</div></li></ul></div></div></div><div id='method-processEmm' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-processEmm' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-processEmm' class='name expandable'>processEmm</a>( <span class='pre'>data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Send a received EMM packet to the CA system. ...</div><div class='long'><p>Send a received EMM packet to the CA system. This is similar to\n int, int) except that the entire byte\n array is sent.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>data</span> : Object {byte[]}<div class='sub-desc'><p>byte array of the EMM data.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the MediaCas instance is not valid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasException for CAS-specific errors.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasStateException for CAS-specific state exceptions.</p>\n</div></li></ul></div></div></div><div id='method-provision' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-provision' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-provision' class='name expandable'>provision</a>( <span class='pre'>provisionString</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Initiate a provisioning operation for a CA system. ...</div><div class='long'><p>Initiate a provisioning operation for a CA system.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>provisionString</span> : String<div class='sub-desc'><p>string containing information needed for the\n provisioning operation, the format of which is scheme and implementation\n specific.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the MediaCas instance is not valid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasException for CAS-specific errors.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasStateException for CAS-specific state exceptions.</p>\n</div></li></ul></div></div></div><div id='method-refreshEntitlements' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-refreshEntitlements' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-refreshEntitlements' class='name expandable'>refreshEntitlements</a>( <span class='pre'>refreshType, refreshData</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify the CA system to refresh entitlement keys. ...</div><div class='long'><p>Notify the CA system to refresh entitlement keys.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>refreshType</span> : Number<div class='sub-desc'><p>the type of the refreshment.</p>\n</div></li><li><span class='pre'>refreshData</span> : Object {byte[]}<div class='sub-desc'><p>private data associated with the refreshment.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the MediaCas instance is not valid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasException for CAS-specific errors.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasStateException for CAS-specific state exceptions.</p>\n</div></li></ul></div></div></div><div id='method-sendEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-sendEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-sendEvent' class='name expandable'>sendEvent</a>( <span class='pre'>event, arg, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Send an event to a CA system. ...</div><div class='long'><p>Send an event to a CA system. The format of the event is scheme-specific\n and is opaque to the framework.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>event</span> : Number<div class='sub-desc'><p>an integer denoting a scheme-specific event to be sent.</p>\n</div></li><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>a scheme-specific integer argument for the event.</p>\n</div></li><li><span class='pre'>data</span> : Object {byte[]}<div class='sub-desc'><p>a byte array containing scheme-specific data for the event.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the MediaCas instance is not valid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasException for CAS-specific errors.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasStateException for CAS-specific state exceptions.</p>\n</div></li></ul></div></div></div><div id='method-setEventListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-setEventListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-setEventListener' class='name expandable'>setEventListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set an event listener to receive notifications from the MediaCas instance. ...</div><div class='long'><p>Set an event listener to receive notifications from the MediaCas instance.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaCas.EventListener}<div class='sub-desc'><p>the event listener to be set.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>the handler whose looper the event listener will be called on.\n If handler is null, we'll try to use current thread's looper, or the main\n looper. If neither are available, an internal thread will be created instead.</p>\n</div></li></ul></div></div></div><div id='method-setPrivateData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaCas'>android.media.MediaCas</span><br/><a href='source/MediaCas.html#android-media-MediaCas-method-setPrivateData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaCas-method-setPrivateData' class='name expandable'>setPrivateData</a>( <span class='pre'>data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Send the private data for the CA system. ...</div><div class='long'><p>Send the private data for the CA system.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>data</span> : Object {byte[]}<div class='sub-desc'><p>byte array of the private data.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the MediaCas instance is not valid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasException for CAS-specific errors.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>MediaCasStateException for CAS-specific state exceptions.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});