Ext.data.JsonP.android_media_MediaSync({"tagname":"class","name":"android.media.MediaSync","autodetected":{},"files":[{"filename":"MediaSync.js","href":"MediaSync.html#android-media-MediaSync"}],"extends":"java.lang.Object","members":[{"name":"MEDIASYNC_ERROR_AUDIOTRACK_FAIL","tagname":"property","owner":"android.media.MediaSync","id":"property-MEDIASYNC_ERROR_AUDIOTRACK_FAIL","meta":{}},{"name":"MEDIASYNC_ERROR_SURFACE_FAIL","tagname":"property","owner":"android.media.MediaSync","id":"property-MEDIASYNC_ERROR_SURFACE_FAIL","meta":{}},{"name":"createInputSurface","tagname":"method","owner":"android.media.MediaSync","id":"method-createInputSurface","meta":{}},{"name":"flush","tagname":"method","owner":"android.media.MediaSync","id":"method-flush","meta":{}},{"name":"getPlaybackParams","tagname":"method","owner":"android.media.MediaSync","id":"method-getPlaybackParams","meta":{}},{"name":"getSyncParams","tagname":"method","owner":"android.media.MediaSync","id":"method-getSyncParams","meta":{}},{"name":"getTimestamp","tagname":"method","owner":"android.media.MediaSync","id":"method-getTimestamp","meta":{}},{"name":"queueAudio","tagname":"method","owner":"android.media.MediaSync","id":"method-queueAudio","meta":{}},{"name":"release","tagname":"method","owner":"android.media.MediaSync","id":"method-release","meta":{}},{"name":"setAudioTrack","tagname":"method","owner":"android.media.MediaSync","id":"method-setAudioTrack","meta":{}},{"name":"setCallback","tagname":"method","owner":"android.media.MediaSync","id":"method-setCallback","meta":{}},{"name":"setOnErrorListener","tagname":"method","owner":"android.media.MediaSync","id":"method-setOnErrorListener","meta":{}},{"name":"setPlaybackParams","tagname":"method","owner":"android.media.MediaSync","id":"method-setPlaybackParams","meta":{}},{"name":"setSurface","tagname":"method","owner":"android.media.MediaSync","id":"method-setSurface","meta":{}},{"name":"setSyncParams","tagname":"method","owner":"android.media.MediaSync","id":"method-setSyncParams","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.MediaSync","short_doc":"MediaSync class can be used to synchronously play audio and video streams. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.MediaSync</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/MediaSync.html#android-media-MediaSync' target='_blank'>MediaSync.js</a></div></pre><div class='doc-contents'><p>MediaSync class can be used to synchronously play audio and video streams.\n It can be used to play audio-only or video-only stream, too.</p>\n\n<p> <p>MediaSync is generally used like this:</p>\n\n<pre> MediaSync sync = new MediaSync();\n sync.setSurface(surface);\n Surface inputSurface = sync.createInputSurface();\n ...\n // MediaCodec videoDecoder = ...;\n videoDecoder.configure(format, inputSurface, ...);\n ...\n sync.setAudioTrack(audioTrack);\n sync.setCallback(new MediaSync.Callback() {\n     {@literal @Override}\n     public void onAudioBufferConsumed(MediaSync sync, ByteBuffer audioBuffer, int bufferId) {\n         ...\n     }\n }, null);\n // This needs to be done since sync is paused on creation.\n sync.setPlaybackParams(new PlaybackParams().setSpeed(1.f));\n\n for (;;) {\n   ...\n   // send video frames to surface for rendering, e.g., call\n   // videoDecoder.releaseOutputBuffer(videoOutputBufferIx, videoPresentationTimeNs);\n   // More details are available as below.\n   ...\n   sync.queueAudio(audioByteBuffer, bufferId, audioPresentationTimeUs); // non-blocking.\n   // The audioByteBuffer and bufferId will be returned via callback.\n   // More details are available as below.\n   ...\n     ...\n }\n sync.setPlaybackParams(new PlaybackParams().setSpeed(0.f));\n sync.release();\n sync = null;\n\n // The following code snippet illustrates how video/audio raw frames are created by\n // MediaCodec's, how they are fed to MediaSync and how they are returned by MediaSync.\n // This is the callback from MediaCodec.\n onOutputBufferAvailable(MediaCodec codec, int bufferId, BufferInfo info) {\n     // ...\n     if (codec == videoDecoder) {\n         // surface timestamp must contain media presentation time in nanoseconds.\n         codec.releaseOutputBuffer(bufferId, 1000 * info.presentationTime);\n     } else {\n         ByteBuffer audioByteBuffer = codec.getOutputBuffer(bufferId);\n         sync.queueAudio(audioByteBuffer, bufferId, info.presentationTime);\n     }\n     // ...\n }\n\n // This is the callback from MediaSync.\n onAudioBufferConsumed(MediaSync sync, ByteBuffer buffer, int bufferId) {\n     // ...\n     audioDecoder.releaseBuffer(bufferId, false);\n     // ...\n }\n\n </pre>\n\n\n<p> The client needs to configure corresponding sink by setting the Surface and/or AudioTrack\n based on the stream type it will play.\n <p>\n For video, the client needs to call <a href=\"#!/api/android.media.MediaSync-method-createInputSurface\" rel=\"android.media.MediaSync-method-createInputSurface\" class=\"docClass\">createInputSurface</a> to obtain a surface on\n which it will render video frames.\n <p>\n For audio, the client needs to set up audio track correctly, e.g., using <a href=\"#!/api/android.media.AudioTrack-property-MODE_STREAM\" rel=\"android.media.AudioTrack-property-MODE_STREAM\" class=\"docClass\">android.media.AudioTrack.MODE_STREAM</a>. The audio buffers are sent to MediaSync directly via <a href=\"#!/api/android.media.MediaSync-method-queueAudio\" rel=\"android.media.MediaSync-method-queueAudio\" class=\"docClass\">queueAudio</a>, and are returned to the client via android.media.MediaCodec.Callback.onAudioBufferConsumed\n asynchronously. The client should not modify an audio buffer till it's returned.\n <p>\n The client can optionally pre-fill audio/video buffers by setting playback rate to 0.0,\n and then feed audio/video buffers to corresponding components. This can reduce possible\n initial underrun.\n <p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-MEDIASYNC_ERROR_AUDIOTRACK_FAIL' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-property-MEDIASYNC_ERROR_AUDIOTRACK_FAIL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-property-MEDIASYNC_ERROR_AUDIOTRACK_FAIL' class='name expandable'>MEDIASYNC_ERROR_AUDIOTRACK_FAIL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Audio track failed. ...</div><div class='long'><p>Audio track failed.\n @see android.media.MediaSync.OnErrorListener</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-MEDIASYNC_ERROR_SURFACE_FAIL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-property-MEDIASYNC_ERROR_SURFACE_FAIL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-property-MEDIASYNC_ERROR_SURFACE_FAIL' class='name expandable'>MEDIASYNC_ERROR_SURFACE_FAIL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The surface failed to handle video buffers. ...</div><div class='long'><p>The surface failed to handle video buffers.\n @see android.media.MediaSync.OnErrorListener</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-createInputSurface' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-createInputSurface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-createInputSurface' class='name expandable'>createInputSurface</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Requests a Surface to use as the input. ...</div><div class='long'><p>Requests a Surface to use as the input. This may only be called after\n <a href=\"#!/api/android.media.MediaSync-method-setSurface\" rel=\"android.media.MediaSync-method-setSurface\" class=\"docClass\">setSurface</a>.\n <p>\n The application is responsible for calling release() on the Surface when\n done.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if not set, or another input surface has\n     already been created.</p>\n</div></li></ul></div></div></div><div id='method-flush' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Flushes all buffers from the sync object. ...</div><div class='long'><p>Flushes all buffers from the sync object.\n <p>\n All pending unprocessed audio and video buffers are discarded. If an audio track was\n configured, it is flushed and stopped. If a video output surface was configured, the\n last frame queued to it is left on the frame. Queue a blank video frame to clear the\n surface,\n <p>\n No callbacks are received for the flushed buffers.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized.</p>\n</div></li></ul></div></div></div><div id='method-getPlaybackParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-getPlaybackParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-getPlaybackParams' class='name expandable'>getPlaybackParams</a>( <span class='pre'></span> ) : Object {android.media.PlaybackParams}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the playback rate using android.media.PlaybackParams. ...</div><div class='long'><p>Gets the playback rate using <a href=\"#!/api/android.media.PlaybackParams\" rel=\"android.media.PlaybackParams\" class=\"docClass\">android.media.PlaybackParams</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.PlaybackParams}</span><div class='sub-desc'><p>the playback rate being used.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal sync engine or the audio track has not\n     been initialized.</p>\n</div></li></ul></div></div></div><div id='method-getSyncParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-getSyncParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-getSyncParams' class='name expandable'>getSyncParams</a>( <span class='pre'></span> ) : Object {android.media.SyncParams}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the A/V sync mode. ...</div><div class='long'><p>Gets the A/V sync mode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.SyncParams}</span><div class='sub-desc'><p>the A/V sync params</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized.</p>\n</div></li></ul></div></div></div><div id='method-getTimestamp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-getTimestamp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-getTimestamp' class='name expandable'>getTimestamp</a>( <span class='pre'></span> ) : Object {android.media.MediaTimestamp}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get current playback position. ...</div><div class='long'><p>Get current playback position.\n <p>\n The MediaTimestamp represents how the media time correlates to the system time in\n a linear fashion using an anchor and a clock rate. During regular playback, the media\n time moves fairly constantly (though the anchor frame may be rebased to a current\n system time, the linear correlation stays steady). Therefore, this method does not\n need to be called often.\n <p>\n To help users get current playback position, this method always anchors the timestamp\n to the current system time, so\n <a href=\"#!/api/android.media.MediaTimestamp-method-getAnchorMediaTimeUs\" rel=\"android.media.MediaTimestamp-method-getAnchorMediaTimeUs\" class=\"docClass\">android.media.MediaTimestamp.getAnchorMediaTimeUs</a> can be used as current playback position.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.MediaTimestamp}</span><div class='sub-desc'><p>a MediaTimestamp object if a timestamp is available, or {@code null} if no timestamp\n         is available, e.g. because the media player has not been initialized.\n@see MediaTimestamp</p>\n</div></li></ul></div></div></div><div id='method-queueAudio' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-queueAudio' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-queueAudio' class='name expandable'>queueAudio</a>( <span class='pre'>audioData, bufferId, presentationTimeUs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Queues the audio data asynchronously for playback (AudioTrack must be in streaming mode). ...</div><div class='long'><p>Queues the audio data asynchronously for playback (AudioTrack must be in streaming mode).\n If the audio track was flushed as a result of <a href=\"#!/api/android.media.MediaSync-method-flush\" rel=\"android.media.MediaSync-method-flush\" class=\"docClass\">flush</a>, it will be restarted.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>audioData</span> : Object {ByteBuffer}<div class='sub-desc'><p>the buffer that holds the data to play. This buffer will be returned\n     to the client via registered callback.</p>\n</div></li><li><span class='pre'>bufferId</span> : Number<div class='sub-desc'><p>an integer used to identify audioData. It will be returned to\n     the client along with audioData. This helps applications to keep track of audioData,\n     e.g., it can be used to store the output buffer index used by the audio codec.</p>\n</div></li><li><span class='pre'>presentationTimeUs</span> : Number<div class='sub-desc'><p>the presentation timestamp in microseconds for the first frame\n     in the buffer.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if audio track is not set or internal configureation\n     has not been done correctly.</p>\n</div></li></ul></div></div></div><div id='method-release' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-release' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-release' class='name expandable'>release</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Make sure you call this when you're done to free up any opened\n component instance instead of relying on the garbage ...</div><div class='long'><p>Make sure you call this when you're done to free up any opened\n component instance instead of relying on the garbage collector\n to do this for you at some point in the future.</p>\n</div></div></div><div id='method-setAudioTrack' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-setAudioTrack' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-setAudioTrack' class='name expandable'>setAudioTrack</a>( <span class='pre'>audioTrack</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the audio track for MediaSync. ...</div><div class='long'><p>Sets the audio track for MediaSync.\n <p>\n Currently, this is only supported in the Initialized state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>audioTrack</span> : Object {AudioTrack}<div class='sub-desc'><p>Specify an AudioTrack through which to render the audio data.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the audioTrack has been released, or is invalid.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if setting the audio track is not supported, e.g.\n     not in the Initialized state, or another audio track has already been set.</p>\n</div></li></ul></div></div></div><div id='method-setCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-setCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-setCallback' class='name expandable'>setCallback</a>( <span class='pre'>cb, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets an asynchronous callback for actionable MediaSync events. ...</div><div class='long'><p>Sets an asynchronous callback for actionable MediaSync events.\n <p>\n This method can be called multiple times to update a previously set callback. If the\n handler is changed, undelivered notifications scheduled for the old handler may be dropped.\n <p>\n <b>Do not call this inside callback.</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cb</span> : Object {MediaSync.Callback}<div class='sub-desc'><p>The callback that will run. Use {@code null} to stop receiving callbacks.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>The Handler that will run the callback. Use {@code null} to use MediaSync's\n     internal handler if it exists.</p>\n</div></li></ul></div></div></div><div id='method-setOnErrorListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-setOnErrorListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-setOnErrorListener' class='name expandable'>setOnErrorListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets an asynchronous callback for error events. ...</div><div class='long'><p>Sets an asynchronous callback for error events.\n <p>\n This method can be called multiple times to update a previously set listener. If the\n handler is changed, undelivered notifications scheduled for the old handler may be dropped.\n <p>\n <b>Do not call this inside callback.</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaSync.OnErrorListener}<div class='sub-desc'><p>The callback that will run. Use {@code null} to stop receiving callbacks.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>The Handler that will run the callback. Use {@code null} to use MediaSync's\n     internal handler if it exists.</p>\n</div></li></ul></div></div></div><div id='method-setPlaybackParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-setPlaybackParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-setPlaybackParams' class='name expandable'>setPlaybackParams</a>( <span class='pre'>params</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets playback rate using android.media.PlaybackParams. ...</div><div class='long'><p>Sets playback rate using <a href=\"#!/api/android.media.PlaybackParams\" rel=\"android.media.PlaybackParams\" class=\"docClass\">android.media.PlaybackParams</a>.\n <p>\n When using MediaSync with <a href=\"#!/api/android.media.AudioTrack\" rel=\"android.media.AudioTrack\" class=\"docClass\">android.media.AudioTrack</a>, set playback params using this\n call instead of calling it directly on the track, so that the sync is aware of\n the params change.\n <p>\n This call also works if there is no audio track.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {PlaybackParams}<div class='sub-desc'><p>the playback params to use. Speed is the ratio between desired playback rate and normal one. 1.0 means\n     normal playback speed. 0.0 means pause. Value larger than 1.0 means faster playback,\n     while value between 0.0 and 1.0 for slower playback. <b>Note:</b> the normal rate\n     does not change as a result of this call. To restore the original rate at any time,\n     use speed of 1.0.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal sync engine or the audio track has not\n     been initialized.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the params are not supported.</p>\n</div></li></ul></div></div></div><div id='method-setSurface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-setSurface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-setSurface' class='name expandable'>setSurface</a>( <span class='pre'>surface</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the output surface for MediaSync. ...</div><div class='long'><p>Sets the output surface for MediaSync.\n <p>\n Currently, this is only supported in the Initialized state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>surface</span> : Object {Surface}<div class='sub-desc'><p>Specify a surface on which to render the video data.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the surface has been released, is invalid,\n     or can not be connected.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if setting the surface is not supported, e.g.\n     not in the Initialized state, or another surface has already been set.</p>\n</div></li></ul></div></div></div><div id='method-setSyncParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.MediaSync'>android.media.MediaSync</span><br/><a href='source/MediaSync.html#android-media-MediaSync-method-setSyncParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.MediaSync-method-setSyncParams' class='name expandable'>setSyncParams</a>( <span class='pre'>params</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets A/V sync mode. ...</div><div class='long'><p>Sets A/V sync mode.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {SyncParams}<div class='sub-desc'><p>the A/V sync params to apply</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if the internal player engine has not been\n initialized.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if params are not supported.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});