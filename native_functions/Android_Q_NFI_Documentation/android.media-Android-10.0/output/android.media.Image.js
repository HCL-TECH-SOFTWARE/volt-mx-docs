Ext.data.JsonP.android_media_Image({"tagname":"class","name":"android.media.Image","autodetected":{},"files":[{"filename":"Image.js","href":"Image.html#android-media-Image"}],"extends":"java.lang.Object","members":[{"name":"close","tagname":"method","owner":"android.media.Image","id":"method-close","meta":{}},{"name":"getCropRect","tagname":"method","owner":"android.media.Image","id":"method-getCropRect","meta":{}},{"name":"getFormat","tagname":"method","owner":"android.media.Image","id":"method-getFormat","meta":{}},{"name":"getHardwareBuffer","tagname":"method","owner":"android.media.Image","id":"method-getHardwareBuffer","meta":{}},{"name":"getHeight","tagname":"method","owner":"android.media.Image","id":"method-getHeight","meta":{}},{"name":"getPlanes","tagname":"method","owner":"android.media.Image","id":"method-getPlanes","meta":{}},{"name":"getTimestamp","tagname":"method","owner":"android.media.Image","id":"method-getTimestamp","meta":{}},{"name":"getWidth","tagname":"method","owner":"android.media.Image","id":"method-getWidth","meta":{}},{"name":"setCropRect","tagname":"method","owner":"android.media.Image","id":"method-setCropRect","meta":{}},{"name":"setTimestamp","tagname":"method","owner":"android.media.Image","id":"method-setTimestamp","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.Image","short_doc":"implements java.lang.AutoCloseable\n\nA single complete image buffer to use with a media source such as a\n android.medi...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["android.media.MediaCodec.MediaImage"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.Image</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/android.media.MediaCodec.MediaImage' rel='android.media.MediaCodec.MediaImage' class='docClass'>android.media.MediaCodec.MediaImage</a></div><h4>Files</h4><div class='dependency'><a href='source/Image.html#android-media-Image' target='_blank'>Image.js</a></div></pre><div class='doc-contents'><p>implements java.lang.AutoCloseable</p>\n\n<p>A single complete image buffer to use with a media source such as a\n <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> or a\n CameraDevice.</p>\n\n\n<p> <p>This class allows for efficient direct application access to the pixel\n data of the Image through one or more\n ByteBuffers. Each buffer is encapsulated in a\n <a href=\"#!/api/android.media.Image.Plane\" rel=\"android.media.Image.Plane\" class=\"docClass\">android.media.Image.Plane</a> that describes the layout of the pixel data in that plane. Due\n to this direct access, and unlike the Bitmap class,\n Images are not directly usable as UI resources.</p></p>\n\n<p> <p>Since Images are often directly produced or consumed by hardware\n components, they are a limited resource shared across the system, and should\n be closed as soon as they are no longer needed.</p></p>\n\n<p> <p>For example, when using the <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a> class to read out Images\n from various media sources, not closing old Image objects will prevent the\n availability of new Images once\n the maximum outstanding image count is\n reached. When this happens, the function acquiring new Images will typically\n throw an IllegalStateException.</p></p>\n\n<p> @see ImageReader</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Free up this frame for reuse. ...</div><div class='long'><p>Free up this frame for reuse.\n <p>\n After calling this method, calling any methods on this {@code Image} will\n result in an IllegalStateException, and attempting to read from\n or write to ByteBuffers returned by an earlier\n <a href=\"#!/api/android.media.Image.Plane-method-getBuffer\" rel=\"android.media.Image.Plane-method-getBuffer\" class=\"docClass\">android.media.Image.Plane.getBuffer</a> call will have undefined behavior. If the image\n was obtained from <a href=\"#!/api/android.media.ImageWriter\" rel=\"android.media.ImageWriter\" class=\"docClass\">android.media.ImageWriter</a> via\n android.media.ImageWriter.dequeueInputImage(), after calling this method, any\n image data filled by the application will be lost and the image will be\n returned to <a href=\"#!/api/android.media.ImageWriter\" rel=\"android.media.ImageWriter\" class=\"docClass\">android.media.ImageWriter</a> for reuse. Images given to\n <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueInputImage()</a> are automatically\n closed.\n </p></p>\n</div></div></div><div id='method-getCropRect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-getCropRect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-getCropRect' class='name expandable'>getCropRect</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the crop rectangle associated with this frame. ...</div><div class='long'><p>Get the crop rectangle associated with this frame.\n <p>\n The crop rectangle specifies the region of valid pixels in the image,\n using coordinates in the largest-resolution plane.</p>\n</div></div></div><div id='method-getFormat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-getFormat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-getFormat' class='name expandable'>getFormat</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the format for this image. ...</div><div class='long'><p>Get the format for this image. This format determines the number of\n ByteBuffers needed to represent the image, and the general layout of the\n pixel data in each ByteBuffer.</p>\n\n<p> <p>\n The format is one of the values from\n android.media.ImageFormat. The mapping between the\n formats and the planes is as follows:\n </p></p>\n\n<p> <table>\n <tr>\n   <th>Format</th>\n   <th>Plane count</th>\n   <th>Layout details</th>\n </tr>\n <tr>\n   <td>JPEG</td>\n   <td>1</td>\n   <td>Compressed data, so row and pixel strides are 0. To uncompress, use\n      BitmapFactory#decodeByteArray.\n   </td>\n </tr>\n <tr>\n   <td>YUV_420_888</td>\n   <td>3</td>\n   <td>A luminance plane followed by the Cb and Cr chroma planes.\n     The chroma planes have half the width and height of the luminance\n     plane (4:2:0 subsampling). Each pixel sample in each plane has 8 bits.\n     Each plane has its own row stride and pixel stride.</td>\n </tr>\n <tr>\n   <td>YUV_422_888</td>\n   <td>3</td>\n   <td>A luminance plane followed by the Cb and Cr chroma planes.\n     The chroma planes have half the width and the full height of the luminance\n     plane (4:2:2 subsampling). Each pixel sample in each plane has 8 bits.\n     Each plane has its own row stride and pixel stride.</td>\n </tr>\n <tr>\n   <td>YUV_444_888</td>\n   <td>3</td>\n   <td>A luminance plane followed by the Cb and Cr chroma planes.\n     The chroma planes have the same width and height as that of the luminance\n     plane (4:4:4 subsampling). Each pixel sample in each plane has 8 bits.\n     Each plane has its own row stride and pixel stride.</td>\n </tr>\n <tr>\n   <td>FLEX_RGB_888</td>\n   <td>3</td>\n   <td>A R (red) plane followed by the G (green) and B (blue) planes.\n     All planes have the same widths and heights.\n     Each pixel sample in each plane has 8 bits.\n     Each plane has its own row stride and pixel stride.</td>\n </tr>\n <tr>\n   <td>FLEX_RGBA_8888</td>\n   <td>4</td>\n   <td>A R (red) plane followed by the G (green), B (blue), and\n     A (alpha) planes. All planes have the same widths and heights.\n     Each pixel sample in each plane has 8 bits.\n     Each plane has its own row stride and pixel stride.</td>\n </tr>\n <tr>\n   <td>RAW_SENSOR</td>\n   <td>1</td>\n   <td>A single plane of raw sensor image data, with 16 bits per color\n     sample. The details of the layout need to be queried from the source of\n     the raw sensor data, such as\n     CameraDevice.\n   </td>\n </tr>\n <tr>\n   <td>RAW_PRIVATE</td>\n   <td>1</td>\n   <td>A single plane of raw sensor image data of private layout.\n   The details of the layout is implementation specific. Row stride and\n   pixel stride are undefined for this format. Calling android.media.Image.Plane.getRowStride()\n   or android.media.Image.Plane.getPixelStride() on RAW_PRIVATE image will cause\n   UnSupportedOperationException being thrown.\n   </td>\n </tr>\n <tr>\n   <td>HEIC</td>\n   <td>1</td>\n   <td>Compressed data, so row and pixel strides are 0. To uncompress, use\n      BitmapFactory#decodeByteArray.\n   </td>\n </tr>\n </table>\n@see android.graphics.ImageFormat</p>\n</div></div></div><div id='method-getHardwareBuffer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-getHardwareBuffer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-getHardwareBuffer' class='name expandable'>getHardwareBuffer</a>( <span class='pre'></span> ) : Object {android.hardware.HardwareBuffer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the HardwareBuffer handle of the input image\n intended for GPU and/or hardware access. ...</div><div class='long'><p>Get the HardwareBuffer handle of the input image\n intended for GPU and/or hardware access.\n <p>\n The returned HardwareBuffer shall not be used\n after  <a href=\"#!/api/android.media.Image-method-close\" rel=\"android.media.Image-method-close\" class=\"docClass\">android.media.Image.close()</a> has been called.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.hardware.HardwareBuffer}</span><div class='sub-desc'><p>the HardwareBuffer associated with this Image or null if this Image doesn't support\n this feature. (Unsupported use cases include Image instances obtained through\n <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">MediaCodec</a>, and on versions prior to Android P,\n <a href=\"#!/api/android.media.ImageWriter\" rel=\"android.media.ImageWriter\" class=\"docClass\">ImageWriter</a>).</p>\n</div></li></ul></div></div></div><div id='method-getHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-getHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-getHeight' class='name expandable'>getHeight</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The height of the image in pixels. ...</div><div class='long'><p>The height of the image in pixels. For formats where some color channels\n are subsampled, this is the height of the largest-resolution plane.</p>\n</div></div></div><div id='method-getPlanes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-getPlanes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-getPlanes' class='name expandable'>getPlanes</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the array of pixel planes for this Image. ...</div><div class='long'><p>Get the array of pixel planes for this Image. The number of planes is\n determined by the format of the Image. The application will get an empty\n array if the image format is PRIVATE, because the image pixel data is not directly accessible. The\n application can check the image format by calling\n getFormat().</p>\n</div></div></div><div id='method-getTimestamp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-getTimestamp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-getTimestamp' class='name expandable'>getTimestamp</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the timestamp associated with this frame. ...</div><div class='long'><p>Get the timestamp associated with this frame.\n <p>\n The timestamp is measured in nanoseconds, and is normally monotonically\n increasing. The timestamps for the images from different sources may have\n different timebases therefore may not be comparable. The specific meaning and\n timebase of the timestamp depend on the source providing images. See\n Camera,\n CameraDevice,\n <a href=\"#!/api/android.media.MediaPlayer\" rel=\"android.media.MediaPlayer\" class=\"docClass\">android.media.MediaPlayer</a> and <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> for more details.\n </p></p>\n</div></div></div><div id='method-getWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-getWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-getWidth' class='name expandable'>getWidth</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The width of the image in pixels. ...</div><div class='long'><p>The width of the image in pixels. For formats where some color channels\n are subsampled, this is the width of the largest-resolution plane.</p>\n</div></div></div><div id='method-setCropRect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-setCropRect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-setCropRect' class='name expandable'>setCropRect</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the crop rectangle associated with this frame. ...</div><div class='long'><p>Set the crop rectangle associated with this frame.\n <p>\n The crop rectangle specifies the region of valid pixels in the image,\n using coordinates in the largest-resolution plane.</p>\n</div></div></div><div id='method-setTimestamp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.Image'>android.media.Image</span><br/><a href='source/Image.html#android-media-Image-method-setTimestamp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.Image-method-setTimestamp' class='name expandable'>setTimestamp</a>( <span class='pre'>timestamp</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the timestamp associated with this frame. ...</div><div class='long'><p>Set the timestamp associated with this frame.\n <p>\n The timestamp is measured in nanoseconds, and is normally monotonically\n increasing. The timestamps for the images from different sources may have\n different timebases therefore may not be comparable. The specific meaning and\n timebase of the timestamp depend on the source providing images. See\n Camera,\n CameraDevice,\n <a href=\"#!/api/android.media.MediaPlayer\" rel=\"android.media.MediaPlayer\" class=\"docClass\">android.media.MediaPlayer</a> and <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> for more details.\n </p>\n <p>\n For images dequeued from <a href=\"#!/api/android.media.ImageWriter\" rel=\"android.media.ImageWriter\" class=\"docClass\">android.media.ImageWriter</a> via\n android.media.ImageWriter.dequeueInputImage(), it's up to the application to\n set the timestamps correctly before sending them back to the\n <a href=\"#!/api/android.media.ImageWriter\" rel=\"android.media.ImageWriter\" class=\"docClass\">android.media.ImageWriter</a>, or the timestamp will be generated automatically when\n <a href=\"#!/api/android.media.ImageWriter-method-queueInputImage\" rel=\"android.media.ImageWriter-method-queueInputImage\" class=\"docClass\">queueInputImage()</a> is called.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timestamp</span> : Number<div class='sub-desc'><p>The timestamp to be set for this image.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});