Ext.data.JsonP.android_media_ImageReader({"tagname":"class","name":"android.media.ImageReader","autodetected":{},"files":[{"filename":"ImageReader.js","href":"ImageReader.html#android-media-ImageReader"}],"extends":"java.lang.Object","members":[{"name":"acquireLatestImage","tagname":"method","owner":"android.media.ImageReader","id":"method-acquireLatestImage","meta":{}},{"name":"acquireNextImage","tagname":"method","owner":"android.media.ImageReader","id":"method-acquireNextImage","meta":{}},{"name":"close","tagname":"method","owner":"android.media.ImageReader","id":"method-close","meta":{}},{"name":"discardFreeBuffers","tagname":"method","owner":"android.media.ImageReader","id":"method-discardFreeBuffers","meta":{}},{"name":"getHeight","tagname":"method","owner":"android.media.ImageReader","id":"method-getHeight","meta":{}},{"name":"getImageFormat","tagname":"method","owner":"android.media.ImageReader","id":"method-getImageFormat","meta":{}},{"name":"getMaxImages","tagname":"method","owner":"android.media.ImageReader","id":"method-getMaxImages","meta":{}},{"name":"getSurface","tagname":"method","owner":"android.media.ImageReader","id":"method-getSurface","meta":{}},{"name":"getWidth","tagname":"method","owner":"android.media.ImageReader","id":"method-getWidth","meta":{}},{"name":"newInstance","tagname":"method","owner":"android.media.ImageReader","id":"method-newInstance","meta":{}},{"name":"setOnImageAvailableListener","tagname":"method","owner":"android.media.ImageReader","id":"method-setOnImageAvailableListener","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.ImageReader","short_doc":"implements java.lang.AutoCloseable\n\nThe ImageReader class allows direct application access to image data\n rendered in...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.ImageReader</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ImageReader.html#android-media-ImageReader' target='_blank'>ImageReader.js</a></div></pre><div class='doc-contents'><p>implements java.lang.AutoCloseable</p>\n\n<p>The ImageReader class allows direct application access to image data\n rendered into a android.view.Surface</p>\n\n\n<p> <p>Several Android media API classes accept Surface objects as targets to\n render to, including <a href=\"#!/api/android.media.MediaPlayer\" rel=\"android.media.MediaPlayer\" class=\"docClass\">android.media.MediaPlayer</a>, <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a>,\n android.hardware.camera2.CameraDevice, <a href=\"#!/api/android.media.ImageWriter\" rel=\"android.media.ImageWriter\" class=\"docClass\">android.media.ImageWriter</a> and\n RenderScript Allocations. The image\n sizes and formats that can be used with each source vary, and should be\n checked in the documentation for the specific API.</p></p>\n\n<p> <p>The image data is encapsulated in <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> objects, and multiple such\n objects can be accessed at the same time, up to the number specified by the\n {@code maxImages} constructor parameter. New images sent to an ImageReader\n through its Surface are queued until accessed through the <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a>\n or <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a> call. Due to memory limits, an image source will\n eventually stall or drop Images in trying to render to the Surface if the\n ImageReader does not obtain and release Images at a rate equal to the\n production rate.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-acquireLatestImage' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-acquireLatestImage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-acquireLatestImage' class='name expandable'>acquireLatestImage</a>( <span class='pre'></span> ) : Object {android.media.Image}<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquire the latest android.media.Image from the ImageReader's queue, dropping older\n images. ...</div><div class='long'><p>\n Acquire the latest <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> from the ImageReader's queue, dropping older\n <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">images</a>. Returns {@code null} if no new image is available.\n </p>\n\n\n<p> <p>\n This operation will acquire all the images possible from the ImageReader,\n but <a href=\"#!/api/android.media.ImageReader-method-close\" rel=\"android.media.ImageReader-method-close\" class=\"docClass\">close</a> all images that aren't the latest. This function is\n recommended to use over <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a> for most use-cases, as it's\n more suited for real-time processing.\n </p>\n <p>\n Note that <a href=\"#!/api/android.media.ImageReader-method-getMaxImages\" rel=\"android.media.ImageReader-method-getMaxImages\" class=\"docClass\">maxImages</a> should be at least 2 for\n <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a> to be any different than <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a> -\n discarding all-but-the-newest <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> requires temporarily acquiring two\n <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Images</a> at once. Or more generally, calling <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a>\n with less than two images of margin, that is\n {@code (maxImages - currentAcquiredImages &lt; 2)} will not discard as expected.\n </p>\n <p>\n This operation will fail by throwing an IllegalStateException if\n {@code maxImages} have been acquired with <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a> or\n <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a>. In particular a sequence of <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a>\n calls greater than <a href=\"#!/api/android.media.ImageReader-method-getMaxImages\" rel=\"android.media.ImageReader-method-getMaxImages\" class=\"docClass\">getMaxImages</a> without calling <a href=\"#!/api/android.media.Image-method-close\" rel=\"android.media.Image-method-close\" class=\"docClass\">android.media.Image.close</a> in-between\n will exhaust the underlying queue. At such a time, IllegalStateException\n will be thrown until more images are\n released with <a href=\"#!/api/android.media.Image-method-close\" rel=\"android.media.Image-method-close\" class=\"docClass\">android.media.Image.close</a>.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.Image}</span><div class='sub-desc'><p>latest frame of image data, or {@code null} if no image data is available.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if too many images are currently acquired</p>\n</div></li></ul></div></div></div><div id='method-acquireNextImage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-acquireNextImage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-acquireNextImage' class='name expandable'>acquireNextImage</a>( <span class='pre'></span> ) : Object {android.media.Image}<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquire the next Image from the ImageReader's queue. ...</div><div class='long'><p>\n Acquire the next Image from the ImageReader's queue. Returns {@code null} if\n no new image is available.\n </p>\n\n\n<p> <p><i>Warning:</i> Consider using <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a>() instead, as it will\n automatically release older images, and allow slower-running processing routines to catch\n up to the newest frame. Usage of <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a> is recommended for\n batch/background processing. Incorrectly using this function can cause images to appear\n with an ever-increasing delay, followed by a complete stall where no new images seem to\n appear.\n </p></p>\n\n<p> <p>\n This operation will fail by throwing an IllegalStateException if\n {@code maxImages} have been acquired with <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a> or\n <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a>. In particular a sequence of <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a> or\n <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a> calls greater than <a href=\"#!/api/android.media.ImageReader-method-getMaxImages\" rel=\"android.media.ImageReader-method-getMaxImages\" class=\"docClass\">maxImages</a> without\n calling <a href=\"#!/api/android.media.Image-method-close\" rel=\"android.media.Image-method-close\" class=\"docClass\">android.media.Image.close</a> in-between will exhaust the underlying queue. At such a time,\n IllegalStateException will be thrown until more images are released with\n <a href=\"#!/api/android.media.Image-method-close\" rel=\"android.media.Image-method-close\" class=\"docClass\">android.media.Image.close</a>.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.media.Image}</span><div class='sub-desc'><p>a new frame of image data, or {@code null} if no image data is available.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if {@code maxImages} images are currently acquired\n@see <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a></p>\n</div></li></ul></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Free up all the resources associated with this ImageReader. ...</div><div class='long'><p>Free up all the resources associated with this ImageReader.</p>\n\n<p> <p>\n After calling this method, this ImageReader can not be used. Calling\n any methods on this ImageReader and Images previously provided by\n <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a> or <a href=\"#!/api/android.media.ImageReader-method-acquireLatestImage\" rel=\"android.media.ImageReader-method-acquireLatestImage\" class=\"docClass\">acquireLatestImage</a>\n will result in an IllegalStateException, and attempting to read from\n ByteBuffers returned by an earlier\n android.media.Image.Plane#getBuffer call will\n have undefined behavior.\n </p></p>\n</div></div></div><div id='method-discardFreeBuffers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-discardFreeBuffers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-discardFreeBuffers' class='name expandable'>discardFreeBuffers</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Discard any free buffers owned by this ImageReader. ...</div><div class='long'><p>Discard any free buffers owned by this ImageReader.</p>\n\n<p> <p>\n Generally, the ImageReader caches buffers for reuse once they have been\n allocated, for best performance. However, sometimes it may be important to\n release all the cached, unused buffers to save on memory.\n </p>\n <p>\n Calling this method will discard all free cached buffers. This does not include any buffers\n associated with Images acquired from the ImageReader, any filled buffers waiting to be\n acquired, and any buffers currently in use by the source rendering buffers into the\n ImageReader's Surface.\n <p>\n The ImageReader continues to be usable after this call, but may need to reallocate buffers\n when more buffers are needed for rendering.\n </p></p>\n</div></div></div><div id='method-getHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-getHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-getHeight' class='name expandable'>getHeight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>The default height of android.media.Images, in pixels. ...</div><div class='long'><p>The default height of <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Images</a>, in pixels.</p>\n\n<p> <p>The height may be overridden by the producer sending buffers to this\n ImageReader's Surface. If so, the actual height of the images can be\n found using <a href=\"#!/api/android.media.Image-method-getHeight\" rel=\"android.media.Image-method-getHeight\" class=\"docClass\">android.media.Image.getHeight</a>.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the expected height of an Image</p>\n</div></li></ul></div></div></div><div id='method-getImageFormat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-getImageFormat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-getImageFormat' class='name expandable'>getImageFormat</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>The default image format of android.media.Images. ...</div><div class='long'><p>The default image format of <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Images</a>.</p>\n\n<p> <p>Some color formats may be overridden by the producer sending buffers to\n this ImageReader's Surface if the default color format allows. ImageReader\n guarantees that all <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Images</a> acquired from ImageReader\n (for example, with <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a>) will have a \"compatible\"\n format to what was specified in <a href=\"#!/api/android.media.ImageReader-method-newInstance\" rel=\"android.media.ImageReader-method-newInstance\" class=\"docClass\">newInstance</a>.\n As of now, each format is only compatible to itself.\n The actual format of the images can be found using <a href=\"#!/api/android.media.Image-method-getFormat\" rel=\"android.media.Image-method-getFormat\" class=\"docClass\">android.media.Image.getFormat</a>.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the expected format of an Image\n@see ImageFormat</p>\n</div></li></ul></div></div></div><div id='method-getMaxImages' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-getMaxImages' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-getMaxImages' class='name expandable'>getMaxImages</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Maximum number of images that can be acquired from the ImageReader by any time (for example,\n with acquireNextImage). ...</div><div class='long'><p>Maximum number of images that can be acquired from the ImageReader by any time (for example,\n with <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a>).</p>\n\n<p> <p>An image is considered acquired after it's returned by a function from ImageReader, and\n until the Image is <a href=\"#!/api/android.media.Image-method-close\" rel=\"android.media.Image-method-close\" class=\"docClass\">closed</a> to release the image back to the ImageReader.\n </p></p>\n\n<p> <p>Attempting to acquire more than {@code maxImages} concurrently will result in the\n acquire function throwing a IllegalStateException. Furthermore,\n while the max number of images have been acquired by the ImageReader user, the producer\n enqueueing additional images may stall until at least one image has been released. </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Maximum number of images for this ImageReader.\n@see Image#close</p>\n</div></li></ul></div></div></div><div id='method-getSurface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-getSurface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-getSurface' class='name expandable'>getSurface</a>( <span class='pre'></span> ) : Object {android.view.Surface}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get a Surface that can be used to produce android.media.Images for this\n {@code ImageReader}. ...</div><div class='long'><p>Get a Surface that can be used to produce <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Images</a> for this\n {@code ImageReader}.</p>\n\n\n<p> <p>Until valid image data is rendered into this Surface, the\n <a href=\"#!/api/android.media.ImageReader-method-acquireNextImage\" rel=\"android.media.ImageReader-method-acquireNextImage\" class=\"docClass\">acquireNextImage</a> method will return {@code null}. Only one source\n can be producing data into this Surface at the same time, although the\n same Surface can be reused with a different API once the first source is\n disconnected from the Surface.</p></p>\n\n<p> <p>Please note that holding on to the Surface object returned by this method is not enough\n to keep its parent ImageReader from being reclaimed. In that sense, a Surface acts like a\n weak reference to the ImageReader that provides it.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.Surface}</span><div class='sub-desc'><p>A Surface to use for a drawing target for various APIs.</p>\n</div></li></ul></div></div></div><div id='method-getWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-getWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-getWidth' class='name expandable'>getWidth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>The default width of android.media.Images, in pixels. ...</div><div class='long'><p>The default width of <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Images</a>, in pixels.</p>\n\n<p> <p>The width may be overridden by the producer sending buffers to this\n ImageReader's Surface. If so, the actual width of the images can be\n found using <a href=\"#!/api/android.media.Image-method-getWidth\" rel=\"android.media.Image-method-getWidth\" class=\"docClass\">android.media.Image.getWidth</a>.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the expected width of an Image</p>\n</div></li></ul></div></div></div><div id='method-newInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-newInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-newInstance' class='name expandable'>newInstance</a>( <span class='pre'>width, height, format, maxImages, usage</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new reader for images of the desired size, format and consumer usage flag. ...</div><div class='long'><p>\n Create a new reader for images of the desired size, format and consumer usage flag.\n </p>\n\n\n<p> <p>\n The {@code maxImages} parameter determines the maximum number of <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">android.media.Image</a> objects that\n can be be acquired from the {@code ImageReader} simultaneously. Requesting more buffers will\n use up more memory, so it is important to use only the minimum number necessary for the use\n case.\n </p>\n <p>\n The valid sizes and formats depend on the source of the image data.\n </p>\n <p>\n The format and usage flag combination describes how the buffer will be used by\n consumer end-points. For example, if the application intends to send the images to\n <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> or <a href=\"#!/api/android.media.MediaRecorder\" rel=\"android.media.MediaRecorder\" class=\"docClass\">android.media.MediaRecorder</a> for hardware video\n encoding, the format and usage flag combination needs to be\n PRIVATE and HardwareBuffer.USAGE_VIDEO_ENCODE. When an\n <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a> object is created with a valid size and such format/usage flag\n combination, the application can send the <a href=\"#!/api/android.media.Image\" rel=\"android.media.Image\" class=\"docClass\">images</a> to an <a href=\"#!/api/android.media.ImageWriter\" rel=\"android.media.ImageWriter\" class=\"docClass\">android.media.ImageWriter</a> that\n is created with the input android.view.Surface provided by the\n <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> or <a href=\"#!/api/android.media.MediaRecorder\" rel=\"android.media.MediaRecorder\" class=\"docClass\">android.media.MediaRecorder</a>.\n </p>\n <p>\n If the {@code format} is PRIVATE, the created <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a>\n will produce images that are not directly accessible by the application. The application can\n still acquire images from this <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a>, and send them to the\n camera for reprocessing, or to the\n <a href=\"#!/api/android.media.MediaCodec\" rel=\"android.media.MediaCodec\" class=\"docClass\">android.media.MediaCodec</a> / <a href=\"#!/api/android.media.MediaRecorder\" rel=\"android.media.MediaRecorder\" class=\"docClass\">android.media.MediaRecorder</a> for hardware video\n encoding via <a href=\"#!/api/android.media.ImageWriter\" rel=\"android.media.ImageWriter\" class=\"docClass\">android.media.ImageWriter</a> interface. However, the getPlanes() will return an empty array for PRIVATE format\n images. The application can check if an existing reader's format by calling\n <a href=\"#!/api/android.media.ImageReader-method-getImageFormat\" rel=\"android.media.ImageReader-method-getImageFormat\" class=\"docClass\">getImageFormat</a>().\n </p>\n <p>\n PRIVATE format <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReaders</a> are more\n efficient to use when application access to image data is not necessary, compared to\n ImageReaders using other format such as YUV_420_888.\n </p>\n <p>\n Note that not all format and usage flag combinations are supported by the\n <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a>. Below are the supported combinations by the <a href=\"#!/api/android.media.ImageReader\" rel=\"android.media.ImageReader\" class=\"docClass\">android.media.ImageReader</a>\n (assuming the consumer end-points support the such image consumption, e.g., hardware video\n encoding).\n <table>\n <tr>\n   <th>Format</th>\n   <th>Compatible usage flags</th>\n </tr>\n <tr>\n   <td>non-PRIVATE formats defined by\n   android.media.ImageFormat or\n   PixelFormat</td>\n   <td>HardwareBuffer.USAGE_CPU_READ_RARELY or\n   HardwareBuffer.USAGE_CPU_READ_OFTEN</td>\n </tr>\n <tr>\n   <td>android.graphics.ImageFormat.PRIVATE</td>\n   <td>HardwareBuffer.USAGE_VIDEO_ENCODE or\n   HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE, or combined</td>\n </tr>\n </table>\n Using other combinations may result in IllegalArgumentException.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>width</span> : Number<div class='sub-desc'><p>The default width in pixels of the Images that this reader will produce.</p>\n</div></li><li><span class='pre'>height</span> : Number<div class='sub-desc'><p>The default height in pixels of the Images that this reader will produce.</p>\n</div></li><li><span class='pre'>format</span> : Number<div class='sub-desc'><p>The format of the Image that this reader will produce. This must be one of the\n            android.graphics.ImageFormat or android.graphics.PixelFormat\n            constants. Note that not all formats are supported, like ImageFormat.NV21.</p>\n</div></li><li><span class='pre'>maxImages</span> : Number<div class='sub-desc'><p>The maximum number of images the user will want to access simultaneously.\n            This should be as small as possible to limit memory use. Once maxImages Images are\n            obtained by the user, one of them has to be released before a new Image will\n            become available for access through acquireLatestImage() or\n            acquireNextImage(). Must be greater than 0.</p>\n</div></li><li><span class='pre'>usage</span> : Number<div class='sub-desc'><p>The intended usage of the images produced by this ImageReader. See the usages\n              on HardwareBuffer for a list of valid usage bits. See also\n              int, int, int, long) for checking\n              if a combination is supported. If it's not supported this will throw\n              an IllegalArgumentException.\n@see Image\n@see HardwareBuffer</p>\n</div></li></ul></div></div></div><div id='method-setOnImageAvailableListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.ImageReader'>android.media.ImageReader</span><br/><a href='source/ImageReader.html#android-media-ImageReader-method-setOnImageAvailableListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.ImageReader-method-setOnImageAvailableListener' class='name expandable'>setOnImageAvailableListener</a>( <span class='pre'>listener, handler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a listener to be invoked when a new image becomes available\n from the ImageReader. ...</div><div class='long'><p>Register a listener to be invoked when a new image becomes available\n from the ImageReader.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {ImageReader.OnImageAvailableListener}<div class='sub-desc'><p>The listener that will be run.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>The handler on which the listener should be invoked, or null\n            if the listener should be invoked on the calling thread's looper.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n            If no handler specified and the calling thread has no looper.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});