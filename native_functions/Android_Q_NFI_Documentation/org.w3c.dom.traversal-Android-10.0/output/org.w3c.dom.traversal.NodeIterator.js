Ext.data.JsonP.org_w3c_dom_traversal_NodeIterator({"tagname":"class","name":"org.w3c.dom.traversal.NodeIterator","autodetected":{},"files":[{"filename":"NodeIterator.js","href":"NodeIterator.html#org-w3c-dom-traversal-NodeIterator"}],"since":"DOM Level 2","hide":true,"members":[{"name":"detach","tagname":"method","owner":"org.w3c.dom.traversal.NodeIterator","id":"method-detach","meta":{}},{"name":"getExpandEntityReferences","tagname":"method","owner":"org.w3c.dom.traversal.NodeIterator","id":"method-getExpandEntityReferences","meta":{}},{"name":"getFilter","tagname":"method","owner":"org.w3c.dom.traversal.NodeIterator","id":"method-getFilter","meta":{}},{"name":"getRoot","tagname":"method","owner":"org.w3c.dom.traversal.NodeIterator","id":"method-getRoot","meta":{}},{"name":"getWhatToShow","tagname":"method","owner":"org.w3c.dom.traversal.NodeIterator","id":"method-getWhatToShow","meta":{}},{"name":"nextNode","tagname":"method","owner":"org.w3c.dom.traversal.NodeIterator","id":"method-nextNode","meta":{}},{"name":"previousNode","tagname":"method","owner":"org.w3c.dom.traversal.NodeIterator","id":"method-previousNode","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-org.w3c.dom.traversal.NodeIterator","short_doc":"NodeIterators are used to step through a set of nodes, e.g. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/NodeIterator.html#org-w3c-dom-traversal-NodeIterator' target='_blank'>NodeIterator.js</a></div></pre><div class='doc-contents'><p><code>NodeIterators</code> are used to step through a set of nodes, e.g.\n the set of nodes in a <code>NodeList</code>, the document subtree\n governed by a particular <code>Node</code>, the results of a query, or\n any other set of nodes. The set of nodes to be iterated is determined by\n the implementation of the <code>NodeIterator</code>. DOM Level 2\n specifies a single <code>NodeIterator</code> implementation for\n document-order traversal of a document subtree. Instances of these\n <code>NodeIterators</code> are created by calling\n <code>DocumentTraversal</code><code>.createNodeIterator()</code>.\n <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.</p>\n        <p>Available since: <b>DOM Level 2</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-detach' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.traversal.NodeIterator'>org.w3c.dom.traversal.NodeIterator</span><br/><a href='source/NodeIterator.html#org-w3c-dom-traversal-NodeIterator-method-detach' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.traversal.NodeIterator-method-detach' class='name expandable'>detach</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Detaches the NodeIterator from the set which it iterated\n over, releasing any computational resources and placing the...</div><div class='long'><p>Detaches the <code>NodeIterator</code> from the set which it iterated\n over, releasing any computational resources and placing the\n <code>NodeIterator</code> in the INVALID state. After\n <code>detach</code> has been invoked, calls to <code>nextNode</code>\n or <code>previousNode</code> will raise the exception\n INVALID_STATE_ERR.</p>\n</div></div></div><div id='method-getExpandEntityReferences' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.traversal.NodeIterator'>org.w3c.dom.traversal.NodeIterator</span><br/><a href='source/NodeIterator.html#org-w3c-dom-traversal-NodeIterator-method-getExpandEntityReferences' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.traversal.NodeIterator-method-getExpandEntityReferences' class='name expandable'>getExpandEntityReferences</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The value of this flag determines whether the children of entity\n reference nodes are visible to the NodeIterator. ...</div><div class='long'><p>The value of this flag determines whether the children of entity\n reference nodes are visible to the <code>NodeIterator</code>. If\n false, these children  and their descendants will be rejected. Note\n that this rejection takes precedence over <code>whatToShow</code> and\n the filter. Also note that this is currently the only situation where\n <code>NodeIterators</code> may reject a complete subtree rather than\n skipping individual nodes.\n <br>\n <br> To produce a view of the document that has entity references\n expanded and does not expose the entity reference node itself, use\n the <code>whatToShow</code> flags to hide the entity reference node\n and set <code>expandEntityReferences</code> to true when creating the\n <code>NodeIterator</code>. To produce a view of the document that has\n entity reference nodes but no entity expansion, use the\n <code>whatToShow</code> flags to show the entity reference node and\n set <code>expandEntityReferences</code> to false.</p>\n</div></div></div><div id='method-getFilter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.traversal.NodeIterator'>org.w3c.dom.traversal.NodeIterator</span><br/><a href='source/NodeIterator.html#org-w3c-dom-traversal-NodeIterator-method-getFilter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.traversal.NodeIterator-method-getFilter' class='name expandable'>getFilter</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The NodeFilter used to screen nodes. ...</div><div class='long'><p>The <code>NodeFilter</code> used to screen nodes.</p>\n</div></div></div><div id='method-getRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.traversal.NodeIterator'>org.w3c.dom.traversal.NodeIterator</span><br/><a href='source/NodeIterator.html#org-w3c-dom-traversal-NodeIterator-method-getRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.traversal.NodeIterator-method-getRoot' class='name expandable'>getRoot</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>The root node of the NodeIterator, as specified when it\n was created. ...</div><div class='long'><p>The root node of the <code>NodeIterator</code>, as specified when it\n was created.</p>\n</div></div></div><div id='method-getWhatToShow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.traversal.NodeIterator'>org.w3c.dom.traversal.NodeIterator</span><br/><a href='source/NodeIterator.html#org-w3c-dom-traversal-NodeIterator-method-getWhatToShow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.traversal.NodeIterator-method-getWhatToShow' class='name expandable'>getWhatToShow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This attribute determines which node types are presented via the\n NodeIterator. ...</div><div class='long'><p>This attribute determines which node types are presented via the\n <code>NodeIterator</code>. The available set of constants is defined\n in the <code>NodeFilter</code> interface.  Nodes not accepted by\n <code>whatToShow</code> will be skipped, but their children may still\n be considered. Note that this skip takes precedence over the filter,\n if any.</p>\n</div></div></div><div id='method-nextNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.traversal.NodeIterator'>org.w3c.dom.traversal.NodeIterator</span><br/><a href='source/NodeIterator.html#org-w3c-dom-traversal-NodeIterator-method-nextNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.traversal.NodeIterator-method-nextNode' class='name expandable'>nextNode</a>( <span class='pre'></span> ) : Object {org.w3c.dom.Node}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the next node in the set and advances the position of the\n NodeIterator in the set. ...</div><div class='long'><p>Returns the next node in the set and advances the position of the\n <code>NodeIterator</code> in the set. After a\n <code>NodeIterator</code> is created, the first call to\n <code>nextNode()</code> returns the first node in the set.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {org.w3c.dom.Node}</span><div class='sub-desc'><p>The next <code>Node</code> in the set being iterated over, or\n   <code>null</code> if there are no more members in that set.\n@exception DOMException\n   INVALID_STATE_ERR: Raised if this method is called after the\n   <code>detach</code> method was invoked.</p>\n</div></li></ul></div></div></div><div id='method-previousNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='org.w3c.dom.traversal.NodeIterator'>org.w3c.dom.traversal.NodeIterator</span><br/><a href='source/NodeIterator.html#org-w3c-dom-traversal-NodeIterator-method-previousNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/org.w3c.dom.traversal.NodeIterator-method-previousNode' class='name expandable'>previousNode</a>( <span class='pre'></span> ) : Object {org.w3c.dom.Node}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the previous node in the set and moves the position of the\n NodeIterator backwards in the set. ...</div><div class='long'><p>Returns the previous node in the set and moves the position of the\n <code>NodeIterator</code> backwards in the set.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {org.w3c.dom.Node}</span><div class='sub-desc'><p>The previous <code>Node</code> in the set being iterated over,\n   or <code>null</code> if there are no more members in that set.\n@exception DOMException\n   INVALID_STATE_ERR: Raised if this method is called after the\n   <code>detach</code> method was invoked.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});