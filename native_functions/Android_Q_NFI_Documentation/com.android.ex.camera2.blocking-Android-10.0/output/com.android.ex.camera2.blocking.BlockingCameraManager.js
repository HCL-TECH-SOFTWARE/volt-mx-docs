Ext.data.JsonP.com_android_ex_camera2_blocking_BlockingCameraManager({"tagname":"class","name":"com.android.ex.camera2.blocking.BlockingCameraManager","autodetected":{},"files":[{"filename":"BlockingCameraManager.js","href":"BlockingCameraManager.html#com-android-ex-camera2-blocking-BlockingCameraManager"}],"extends":"java.lang.Object","members":[{"name":"openCamera","tagname":"method","owner":"com.android.ex.camera2.blocking.BlockingCameraManager","id":"method-openCamera","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.ex.camera2.blocking.BlockingCameraManager","short_doc":"Expose CameraManager functionality with blocking functions. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.ex.camera2.blocking.BlockingCameraManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/BlockingCameraManager.html#com-android-ex-camera2-blocking-BlockingCameraManager' target='_blank'>BlockingCameraManager.js</a></div></pre><div class='doc-contents'><p>Expose CameraManager functionality with blocking functions.</p>\n\n<p> <p>Safe to use at the same time as the regular CameraManager, so this does not\n duplicate any functionality that is already blocking.</p></p>\n\n<p> <p>Be careful when using this from UI thread! This function will typically block\n for about 500ms when successful, and as long as {@value #OPEN_TIME_OUT_MS}ms when timing out.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-openCamera' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.ex.camera2.blocking.BlockingCameraManager'>com.android.ex.camera2.blocking.BlockingCameraManager</span><br/><a href='source/BlockingCameraManager.html#com-android-ex-camera2-blocking-BlockingCameraManager-method-openCamera' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.ex.camera2.blocking.BlockingCameraManager-method-openCamera' class='name expandable'>openCamera</a>( <span class='pre'>cameraId, listener, handler</span> ) : Object {android.hardware.camera2.CameraDevice}<span class=\"signature\"></span></div><div class='description'><div class='short'>Open the camera, blocking it until it succeeds or fails. ...</div><div class='long'><p>Open the camera, blocking it until it succeeds or fails.</p>\n\n<p> <p>Note that the Handler provided must not be null. Furthermore, if there is a handler,\n its Looper must not be the current thread's Looper. Otherwise we'd never receive\n the callbacks from the CameraDevice since this function would prevent them from being\n processed.</p></p>\n\n<p> <p>Throws CameraAccessException for the same reason CameraManager.openCamera\n does.</p></p>\n\n<p> <p>Throws <a href=\"#!/api/com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException\" rel=\"com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException\" class=\"docClass\">com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException</a> when the open fails asynchronously (due to\n CameraDevice.StateCallback.onDisconnected(CameraDevice) or\n (CameraDevice.StateCallback.onError(CameraDevice).</p></p>\n\n<p> <p>Throws TimeoutRuntimeException if opening times out. This is usually\n highly unrecoverable, and all future calls to opening that camera will fail since the\n service will think it's busy. This class will do its best to clean up eventually.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cameraId</span> : String<div class='sub-desc'><p>Id of the camera</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraDevice.StateCallback}<div class='sub-desc'><p>Listener to the camera. onOpened, onDisconnected, onError need not be implemented.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>Handler which to run the listener on. Must not be null.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.hardware.camera2.CameraDevice}</span><div class='sub-desc'><p>CameraDevice</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n            If the handler is null, or if the handler's looper is current.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException\n            If open fails immediately.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>BlockingOpenException\n            If open fails after blocking for some amount of time.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutRuntimeException\n            If opening times out. Typically unrecoverable.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});