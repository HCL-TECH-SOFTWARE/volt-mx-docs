Ext.data.JsonP.java_util_concurrent_locks_ReentrantLock({"tagname":"class","name":"java.util.concurrent.locks.ReentrantLock","autodetected":{},"files":[{"filename":"ReentrantLock.js","href":"ReentrantLock.html#java-util-concurrent-locks-ReentrantLock"}],"extends":"java.lang.Object","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"getHoldCount","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-getHoldCount","meta":{}},{"name":"getQueueLength","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-getQueueLength","meta":{}},{"name":"getWaitQueueLength","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-getWaitQueueLength","meta":{}},{"name":"hasQueuedThread","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-hasQueuedThread","meta":{}},{"name":"hasQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-hasQueuedThreads","meta":{}},{"name":"hasWaiters","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-hasWaiters","meta":{}},{"name":"isFair","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-isFair","meta":{}},{"name":"isHeldByCurrentThread","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-isHeldByCurrentThread","meta":{}},{"name":"isLocked","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-isLocked","meta":{}},{"name":"lock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-lock","meta":{}},{"name":"lockInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-lockInterruptibly","meta":{}},{"name":"newCondition","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-newCondition","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-toString","meta":{}},{"name":"tryLock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-tryLock","meta":{}},{"name":"unlock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantLock","id":"method-unlock","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.ReentrantLock","short_doc":"implements java.util.concurrent.locks.Lock\n\n implements java.io.Serializable\n\nA reentrant mutual exclusion java.util....","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.locks.ReentrantLock</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock' target='_blank'>ReentrantLock.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a></p>\n\n<p> implements java.io.Serializable</p>\n\n<p>A reentrant mutual exclusion <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> with the same basic\n behavior and semantics as the implicit monitor lock accessed using\n {@code synchronized} methods and statements, but with extended\n capabilities.</p>\n\n<p> <p>A {@code ReentrantLock} is <em>owned</em> by the thread last\n successfully locking, but not yet unlocking it. A thread invoking\n {@code lock} will return, successfully acquiring the lock, when\n the lock is not owned by another thread. The method will return\n immediately if the current thread already owns the lock. This can\n be checked using methods <a href=\"#!/api/java.util.concurrent.locks.ReentrantLock-method-isHeldByCurrentThread\" rel=\"java.util.concurrent.locks.ReentrantLock-method-isHeldByCurrentThread\" class=\"docClass\">isHeldByCurrentThread</a>, and <a href=\"#!/api/java.util.concurrent.locks.ReentrantLock-method-getHoldCount\" rel=\"java.util.concurrent.locks.ReentrantLock-method-getHoldCount\" class=\"docClass\">getHoldCount</a>.</p>\n\n<p> <p>The constructor for this class accepts an optional\n <em>fairness</em> parameter.  When set {@code true}, under\n contention, locks favor granting access to the longest-waiting\n thread.  Otherwise this lock does not guarantee any particular\n access order.  Programs using fair locks accessed by many threads\n may display lower overall throughput (i.e., are slower; often much\n slower) than those using the default setting, but have smaller\n variances in times to obtain locks and guarantee lack of\n starvation. Note however, that fairness of locks does not guarantee\n fairness of thread scheduling. Thus, one of many threads using a\n fair lock may obtain it multiple times in succession while other\n active threads are not progressing and not currently holding the\n lock.\n Also note that the untimed <a href=\"#!/api/java.util.concurrent.locks.ReentrantLock-method-tryLock\" rel=\"java.util.concurrent.locks.ReentrantLock-method-tryLock\" class=\"docClass\">tryLock</a>() method does not\n honor the fairness setting. It will succeed if the lock\n is available even if other threads are waiting.</p>\n\n<p> <p>It is recommended practice to <em>always</em> immediately\n follow a call to {@code lock} with a {@code try} block, most\n typically in a before/after construction such as:</p>\n\n<p> <pre> {@code\n class X {\n   private final ReentrantLock lock = new ReentrantLock();\n   // ...</pre></p>\n\n<p>   public void m() {\n     lock.lock();  // block until condition holds\n     try {\n       // ... method body\n     } finally {\n       lock.unlock()\n     }\n   }\n }}</p>\n\n<p> <p>In addition to implementing the <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> interface, this\n class defines a number of {@code public} and {@code protected}\n methods for inspecting the state of the lock.  Some of these\n methods are only useful for instrumentation and monitoring.</p>\n\n<p> <p>Serialization of this class behaves in the same way as built-in\n locks: a deserialized lock is in the unlocked state, regardless of\n its state when serialized.</p>\n\n<p> <p>This lock supports a maximum of 2147483647 recursive locks by\n the same thread. Attempts to exceed this limit result in\n Error throws from locking methods.</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getHoldCount' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-getHoldCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-getHoldCount' class='name expandable'>getHoldCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries the number of holds on this lock by the current thread. ...</div><div class='long'><p>Queries the number of holds on this lock by the current thread.</p>\n\n<p> <p>A thread has a hold on a lock for each lock action that is not\n matched by an unlock action.</p>\n\n<p> <p>The hold count information is typically only used for testing and\n debugging purposes. For example, if a certain section of code should\n not be entered with the lock already held then we can assert that\n fact:</p>\n\n<p> <pre> {@code\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...\n   public void m() {\n     assert lock.getHoldCount() == 0;\n     lock.lock();\n     try {\n       // ... method body\n     } finally {\n       lock.unlock();\n     }\n   }\n }}</pre></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of holds on this lock by the current thread,\n         or zero if this lock is not held by the current thread</p>\n</div></li></ul></div></div></div><div id='method-getQueueLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-getQueueLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-getQueueLength' class='name expandable'>getQueueLength</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of threads waiting to acquire\n this lock. ...</div><div class='long'><p>Returns an estimate of the number of threads waiting to acquire\n this lock.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization control.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the estimated number of threads waiting for this lock</p>\n</div></li></ul></div></div></div><div id='method-getWaitQueueLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-getWaitQueueLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-getWaitQueueLength' class='name expandable'>getWaitQueueLength</a>( <span class='pre'>condition</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of threads waiting on the\n given condition associated with this lock. ...</div><div class='long'><p>Returns an estimate of the number of threads waiting on the\n given condition associated with this lock. Note that because\n timeouts and interrupts may occur at any time, the estimate\n serves only as an upper bound on the actual number of waiters.\n This method is designed for use in monitoring of the system\n state, not for synchronization control.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {Condition}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the estimated number of waiting threads</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if this lock is not held</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given condition is\n         not associated with this lock</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-hasQueuedThread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-hasQueuedThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-hasQueuedThread' class='name expandable'>hasQueuedThread</a>( <span class='pre'>thread</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether the given thread is waiting to acquire this\n lock. ...</div><div class='long'><p>Queries whether the given thread is waiting to acquire this\n lock. Note that because cancellations may occur at any time, a\n {@code true} return does not guarantee that this thread\n will ever acquire this lock.  This method is designed primarily for use\n in monitoring of the system state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>thread</span> : Object {Thread}<div class='sub-desc'><p>the thread</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the given thread is queued waiting for this lock</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the thread is null</p>\n</div></li></ul></div></div></div><div id='method-hasQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-hasQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-hasQueuedThreads' class='name expandable'>hasQueuedThreads</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads are waiting to acquire this lock. ...</div><div class='long'><p>Queries whether any threads are waiting to acquire this lock. Note that\n because cancellations may occur at any time, a {@code true}\n return does not guarantee that any other thread will ever\n acquire this lock.  This method is designed primarily for use in\n monitoring of the system state.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there may be other threads waiting to\n         acquire the lock</p>\n</div></li></ul></div></div></div><div id='method-hasWaiters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-hasWaiters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-hasWaiters' class='name expandable'>hasWaiters</a>( <span class='pre'>condition</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads are waiting on the given condition\n associated with this lock. ...</div><div class='long'><p>Queries whether any threads are waiting on the given condition\n associated with this lock. Note that because timeouts and\n interrupts may occur at any time, a {@code true} return does\n not guarantee that a future {@code signal} will awaken any\n threads.  This method is designed primarily for use in\n monitoring of the system state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {Condition}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there are any waiting threads</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if this lock is not held</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given condition is\n         not associated with this lock</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-isFair' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-isFair' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-isFair' class='name expandable'>isFair</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if this lock has fairness set true. ...</div><div class='long'><p>Returns {@code true} if this lock has fairness set true.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this lock has fairness set true</p>\n</div></li></ul></div></div></div><div id='method-isHeldByCurrentThread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-isHeldByCurrentThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-isHeldByCurrentThread' class='name expandable'>isHeldByCurrentThread</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries if this lock is held by the current thread. ...</div><div class='long'><p>Queries if this lock is held by the current thread.</p>\n\n<p> <p>Analogous to the Thread.holdsLock(Object) method for\n built-in monitor locks, this method is typically used for\n debugging and testing. For example, a method that should only be\n called while a lock is held can assert that this is the case:</p>\n\n<p> <pre> {@code\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...</pre></p>\n\n<p>   public void m() {\n       assert lock.isHeldByCurrentThread();\n       // ... method body\n   }\n }}</p>\n\n<p> <p>It can also be used to ensure that a reentrant lock is used\n in a non-reentrant manner, for example:</p>\n\n<p> <pre> {@code\n class X {\n   ReentrantLock lock = new ReentrantLock();\n   // ...</pre></p>\n\n<p>   public void m() {\n       assert !lock.isHeldByCurrentThread();\n       lock.lock();\n       try {\n           // ... method body\n       } finally {\n           lock.unlock();\n       }\n   }\n }}</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if current thread holds this lock and\n         {@code false} otherwise</p>\n</div></li></ul></div></div></div><div id='method-isLocked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-isLocked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-isLocked' class='name expandable'>isLocked</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries if this lock is held by any thread. ...</div><div class='long'><p>Queries if this lock is held by any thread. This method is\n designed for use in monitoring of the system state,\n not for synchronization control.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if any thread holds this lock and\n         {@code false} otherwise</p>\n</div></li></ul></div></div></div><div id='method-lock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-lock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-lock' class='name expandable'>lock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the lock. ...</div><div class='long'><p>Acquires the lock.</p>\n\n<p> <p>Acquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.</p>\n\n<p> <p>If the current thread already holds the lock then the hold\n count is incremented by one and the method returns immediately.</p>\n\n<p> <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until the lock has been acquired,\n at which time the lock hold count is set to one.</p>\n</div></div></div><div id='method-lockInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-lockInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-lockInterruptibly' class='name expandable'>lockInterruptibly</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}. ...</div><div class='long'><p>Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.</p>\n\n<p> <p>Acquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.</p>\n\n<p> <p>If the current thread already holds this lock then the hold count\n is incremented by one and the method returns immediately.</p>\n\n<p> <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>The lock is acquired by the current thread; or</li></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread.</li></p>\n\n<p> </p>\n\n<p> <p>If the lock is acquired by the current thread then the lock hold\n count is set to one.</p>\n\n<p> <p>If the current thread:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>has its interrupted status set on entry to this method; or</li></p>\n\n<p> <li>is {@linkplain Thread#interrupt interrupted} while acquiring\n the lock,</li></p>\n\n<p> </p>\n\n<p> then InterruptedException is thrown and the current thread's\n interrupted status is cleared.</p>\n\n<p> <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-newCondition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-newCondition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-newCondition' class='name expandable'>newCondition</a>( <span class='pre'></span> ) : Object {java.util.concurrent.locks.Condition}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a java.util.concurrent.locks.Condition instance for use with this\n java.util.concurrent.locks.Lock instance. ...</div><div class='long'><p>Returns a <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> instance for use with this\n <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> instance.</p>\n\n<p> <p>The returned <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> instance supports the same\n usages as do the Object monitor methods (wait, notify, and notifyAll) when used with the built-in\n monitor lock.</p>\n\n<p> <ul></ul></p>\n\n<p> <li>If this lock is not held when any of the <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a>\n {@linkplain <a href=\"#!/api/java.util.concurrent.locks.Condition-method-await\" rel=\"java.util.concurrent.locks.Condition-method-await\" class=\"docClass\">java.util.concurrent.locks.Condition.await</a>() waiting} or {@linkplain\n <a href=\"#!/api/java.util.concurrent.locks.Condition-method-signal\" rel=\"java.util.concurrent.locks.Condition-method-signal\" class=\"docClass\">java.util.concurrent.locks.Condition.signal</a> signalling} methods are called, then an IllegalMonitorStateException is thrown.</li></p>\n\n<p> <li>When the condition {@linkplain <a href=\"#!/api/java.util.concurrent.locks.Condition-method-await\" rel=\"java.util.concurrent.locks.Condition-method-await\" class=\"docClass\">java.util.concurrent.locks.Condition.await</a>() waiting}\n methods are called the lock is released and, before they\n return, the lock is reacquired and the lock hold count restored\n to what it was when the method was called.</li></p>\n\n<p> <li>If a thread is {@linkplain Thread#interrupt interrupted}\n while waiting then the wait will terminate, an InterruptedException will be thrown, and the thread's\n interrupted status will be cleared.</li></p>\n\n<p> <li>Waiting threads are signalled in FIFO order.</li></p>\n\n<p> <li>The ordering of lock reacquisition for threads returning\n from waiting methods is the same as for threads initially\n acquiring the lock, which is in the default case not specified,\n but for <em>fair</em> locks favors those threads that have been\n waiting the longest.</li></p>\n\n<p> </p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.locks.Condition}</span><div class='sub-desc'><p>the Condition object</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this lock, as well as its lock state. ...</div><div class='long'><p>Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes either the String {@code \"Unlocked\"}\n or the String {@code \"Locked by\"} followed by the\n {@linkplain Thread#getName name} of the owning thread.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this lock, as well as its lock state</p>\n</div></li></ul></div></div></div><div id='method-tryLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-tryLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-tryLock' class='name expandable'>tryLock</a>( <span class='pre'>timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the lock if it is not held by another thread within the given\n waiting time and the current thread has not b...</div><div class='long'><p>Acquires the lock if it is not held by another thread within the given\n waiting time and the current thread has not been\n {@linkplain Thread#interrupt interrupted}.</p>\n\n<p> <p>Acquires the lock if it is not held by another thread and returns\n immediately with the value {@code true}, setting the lock hold count\n to one. If this lock has been set to use a fair ordering policy then\n an available lock <em>will not</em> be acquired if any other threads\n are waiting for the lock. This is in contrast to the <a href=\"#!/api/java.util.concurrent.locks.ReentrantLock-method-tryLock\" rel=\"java.util.concurrent.locks.ReentrantLock-method-tryLock\" class=\"docClass\">tryLock</a>()\n method. If you want a timed {@code tryLock} that does permit barging on\n a fair lock then combine the timed and un-timed forms together:</p>\n\n<p> <pre> {@code\n if (lock.tryLock() ||\n     lock.tryLock(timeout, unit)) {\n   ...\n }}</pre></p>\n\n<p> <p>If the current thread\n already holds this lock then the hold count is incremented by one and\n the method returns {@code true}.</p>\n\n<p> <p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>The lock is acquired by the current thread; or</li></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or</li></p>\n\n<p> <li>The specified waiting time elapses</li></p>\n\n<p> </p>\n\n<p> <p>If the lock is acquired then the value {@code true} is returned and\n the lock hold count is set to one.</p>\n\n<p> <p>If the current thread:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>has its interrupted status set on entry to this method; or</li></p>\n\n<p> <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the lock,</li></p>\n\n<p> \n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.</p>\n\n<p> <p>If the specified waiting time elapses then the value {@code false}\n is returned.  If the time is less than or equal to zero, the method\n will not wait at all.</p>\n\n<p> <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to the\n interrupt over normal or reentrant acquisition of the lock, and\n over reporting the elapse of the waiting time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the time to wait for the lock</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the lock was free and was acquired by the\n         current thread, or the lock was already held by the current\n         thread; and {@code false} if the waiting time elapsed before\n         the lock could be acquired</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the time unit is null</p>\n</div></li></ul></div></div></div><div id='method-unlock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantLock'>java.util.concurrent.locks.ReentrantLock</span><br/><a href='source/ReentrantLock.html#java-util-concurrent-locks-ReentrantLock-method-unlock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantLock-method-unlock' class='name expandable'>unlock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to release this lock. ...</div><div class='long'><p>Attempts to release this lock.</p>\n\n<p> <p>If the current thread is the holder of this lock then the hold\n count is decremented.  If the hold count is now zero then the lock\n is released.  If the current thread is not the holder of this\n lock then IllegalMonitorStateException is thrown.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if the current thread does not\n         hold this lock</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});