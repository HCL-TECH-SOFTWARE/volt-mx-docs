Ext.data.JsonP.java_util_concurrent_locks_StampedLock({"tagname":"class","name":"java.util.concurrent.locks.StampedLock","autodetected":{},"files":[{"filename":"StampedLock.js","href":"StampedLock.html#java-util-concurrent-locks-StampedLock"}],"extends":"java.lang.Object","since":"1.8","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"asReadLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-asReadLock","meta":{}},{"name":"asReadWriteLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-asReadWriteLock","meta":{}},{"name":"asWriteLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-asWriteLock","meta":{}},{"name":"getReadLockCount","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-getReadLockCount","meta":{}},{"name":"isReadLocked","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-isReadLocked","meta":{}},{"name":"isWriteLocked","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-isWriteLocked","meta":{}},{"name":"readLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-readLock","meta":{}},{"name":"readLockInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-readLockInterruptibly","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-toString","meta":{}},{"name":"tryConvertToOptimisticRead","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-tryConvertToOptimisticRead","meta":{}},{"name":"tryConvertToReadLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-tryConvertToReadLock","meta":{}},{"name":"tryConvertToWriteLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-tryConvertToWriteLock","meta":{}},{"name":"tryOptimisticRead","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-tryOptimisticRead","meta":{}},{"name":"tryReadLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-tryReadLock","meta":{}},{"name":"tryUnlockRead","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-tryUnlockRead","meta":{}},{"name":"tryUnlockWrite","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-tryUnlockWrite","meta":{}},{"name":"tryWriteLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-tryWriteLock","meta":{}},{"name":"unlock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-unlock","meta":{}},{"name":"unlockRead","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-unlockRead","meta":{}},{"name":"unlockWrite","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-unlockWrite","meta":{}},{"name":"validate","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-validate","meta":{}},{"name":"writeLock","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-writeLock","meta":{}},{"name":"writeLockInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.StampedLock","id":"method-writeLockInterruptibly","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.StampedLock","short_doc":"implements java.io.Serializable\n\nA capability-based lock with three modes for controlling read/write\n access. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.locks.StampedLock</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock' target='_blank'>StampedLock.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p>A capability-based lock with three modes for controlling read/write\n access.  The state of a StampedLock consists of a version and mode.\n Lock acquisition methods return a stamp that represents and\n controls access with respect to a lock state; \"try\" versions of\n these methods may instead return the special value zero to\n represent failure to acquire access. Lock release and conversion\n methods require stamps as arguments, and fail if they do not match\n the state of the lock. The three modes are:</p>\n\n<p> <ul></ul></p>\n\n<p>  <li><b>Writing.</b> Method <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-writeLock\" rel=\"java.util.concurrent.locks.StampedLock-method-writeLock\" class=\"docClass\">writeLock</a> possibly blocks\n   waiting for exclusive access, returning a stamp that can be used\n   in method <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-unlockWrite\" rel=\"java.util.concurrent.locks.StampedLock-method-unlockWrite\" class=\"docClass\">unlockWrite</a> to release the lock. Untimed and\n   timed versions of {@code tryWriteLock} are also provided. When\n   the lock is held in write mode, no read locks may be obtained,\n   and all optimistic read validations will fail.</li></p>\n\n<p>  <li><b>Reading.</b> Method <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-readLock\" rel=\"java.util.concurrent.locks.StampedLock-method-readLock\" class=\"docClass\">readLock</a> possibly blocks\n   waiting for non-exclusive access, returning a stamp that can be\n   used in method <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-unlockRead\" rel=\"java.util.concurrent.locks.StampedLock-method-unlockRead\" class=\"docClass\">unlockRead</a> to release the lock. Untimed\n   and timed versions of {@code tryReadLock} are also provided.</li></p>\n\n<p>  <li><b>Optimistic Reading.</b> Method <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-tryOptimisticRead\" rel=\"java.util.concurrent.locks.StampedLock-method-tryOptimisticRead\" class=\"docClass\">tryOptimisticRead</a>\n   returns a non-zero stamp only if the lock is not currently held\n   in write mode. Method <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-validate\" rel=\"java.util.concurrent.locks.StampedLock-method-validate\" class=\"docClass\">validate</a> returns true if the lock\n   has not been acquired in write mode since obtaining a given\n   stamp.  This mode can be thought of as an extremely weak version\n   of a read-lock, that can be broken by a writer at any time.  The\n   use of optimistic mode for short read-only code segments often\n   reduces contention and improves throughput.  However, its use is\n   inherently fragile.  Optimistic read sections should only read\n   fields and hold them in local variables for later use after\n   validation. Fields read while in optimistic mode may be wildly\n   inconsistent, so usage applies only when you are familiar enough\n   with data representations to check consistency and/or repeatedly\n   invoke method {@code validate()}.  For example, such steps are\n   typically required when first reading an object or array\n   reference, and then accessing one of its fields, elements or\n   methods.</li></p>\n\n<p> </p>\n\n<p> <p>This class also supports methods that conditionally provide\n conversions across the three modes. For example, method <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-tryConvertToWriteLock\" rel=\"java.util.concurrent.locks.StampedLock-method-tryConvertToWriteLock\" class=\"docClass\">tryConvertToWriteLock</a> attempts to \"upgrade\" a mode, returning\n a valid write stamp if (1) already in writing mode (2) in reading\n mode and there are no other readers or (3) in optimistic mode and\n the lock is available. The forms of these methods are designed to\n help reduce some of the code bloat that otherwise occurs in\n retry-based designs.</p>\n\n<p> <p>StampedLocks are designed for use as internal utilities in the\n development of thread-safe components. Their use relies on\n knowledge of the internal properties of the data, objects, and\n methods they are protecting.  They are not reentrant, so locked\n bodies should not call other unknown methods that may try to\n re-acquire locks (although you may pass a stamp to other methods\n that can use or convert it).  The use of read lock modes relies on\n the associated code sections being side-effect-free.  Unvalidated\n optimistic read sections cannot call methods that are not known to\n tolerate potential inconsistencies.  Stamps use finite\n representations, and are not cryptographically secure (i.e., a\n valid stamp may be guessable). Stamp values may recycle after (no\n sooner than) one year of continuous operation. A stamp held without\n use or validation for longer than this period may fail to validate\n correctly.  StampedLocks are serializable, but always deserialize\n into initial unlocked state, so they are not useful for remote\n locking.</p>\n\n<p> <p>The scheduling policy of StampedLock does not consistently\n prefer readers over writers or vice versa.  All \"try\" methods are\n best-effort and do not necessarily conform to any scheduling or\n fairness policy. A zero return from any \"try\" method for acquiring\n or converting locks does not carry any information about the state\n of the lock; a subsequent invocation may succeed.</p>\n\n<p> <p>Because it supports coordinated usage across multiple lock\n modes, this class does not directly implement the <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> or\n <a href=\"#!/api/java.util.concurrent.locks.ReadWriteLock\" rel=\"java.util.concurrent.locks.ReadWriteLock\" class=\"docClass\">java.util.concurrent.locks.ReadWriteLock</a> interfaces. However, a StampedLock may be\n viewed <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-asReadLock\" rel=\"java.util.concurrent.locks.StampedLock-method-asReadLock\" class=\"docClass\">asReadLock</a>(), <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-asWriteLock\" rel=\"java.util.concurrent.locks.StampedLock-method-asWriteLock\" class=\"docClass\">asWriteLock</a>(), or <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-asReadWriteLock\" rel=\"java.util.concurrent.locks.StampedLock-method-asReadWriteLock\" class=\"docClass\">asReadWriteLock</a>() in applications requiring only the associated\n set of functionality.</p>\n\n<p> <p><b>Sample Usage.</b> The following illustrates some usage idioms\n in a class that maintains simple two-dimensional points. The sample\n code illustrates some try/catch conventions even though they are\n not strictly needed here because no exceptions can occur in their\n bodies.<br></p>\n\n<p> <pre> {@code\n class Point {\n   private double x, y;\n   private final StampedLock sl = new StampedLock();</pre></p>\n\n<p>   void move(double deltaX, double deltaY) { // an exclusively locked method\n     long stamp = sl.writeLock();\n     try {\n       x += deltaX;\n       y += deltaY;\n     } finally {\n       sl.unlockWrite(stamp);\n     }\n   }</p>\n\n<p>   double distanceFromOrigin() { // A read-only method\n     long stamp = sl.tryOptimisticRead();\n     double currentX = x, currentY = y;\n     if (!sl.validate(stamp)) {\n        stamp = sl.readLock();\n        try {\n          currentX = x;\n          currentY = y;\n        } finally {\n           sl.unlockRead(stamp);\n        }\n     }\n     return Math.sqrt(currentX * currentX + currentY * currentY);\n   }</p>\n\n<p>   void moveIfAtOrigin(double newX, double newY) { // upgrade\n     // Could instead start with optimistic, not read mode\n     long stamp = sl.readLock();\n     try {\n       while (x == 0.0 &amp;&amp; y == 0.0) {\n         long ws = sl.tryConvertToWriteLock(stamp);\n         if (ws != 0L) {\n           stamp = ws;\n           x = newX;\n           y = newY;\n           break;\n         }\n         else {\n           sl.unlockRead(stamp);\n           stamp = sl.writeLock();\n         }\n       }\n     } finally {\n       sl.unlock(stamp);\n     }\n   }\n }}</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-asReadLock' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-asReadLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-asReadLock' class='name expandable'>asReadLock</a>( <span class='pre'></span> ) : Object {java.util.concurrent.locks.Lock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a plain java.util.concurrent.locks.Lock view of this StampedLock in which\n the java.util.concurrent.locks.Loc...</div><div class='long'><p>Returns a plain <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> view of this StampedLock in which\n the <a href=\"#!/api/java.util.concurrent.locks.Lock-method-lock\" rel=\"java.util.concurrent.locks.Lock-method-lock\" class=\"docClass\">java.util.concurrent.locks.Lock.lock</a> method is mapped to <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-readLock\" rel=\"java.util.concurrent.locks.StampedLock-method-readLock\" class=\"docClass\">readLock</a>,\n and similarly for other methods. The returned Lock does not\n support a <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a>; method java.util.concurrent.locks.Lock.newCondition() throws {@code\n UnsupportedOperationException}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.locks.Lock}</span><div class='sub-desc'><p>the lock</p>\n</div></li></ul></div></div></div><div id='method-asReadWriteLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-asReadWriteLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-asReadWriteLock' class='name expandable'>asReadWriteLock</a>( <span class='pre'></span> ) : Object {java.util.concurrent.locks.ReadWriteLock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a java.util.concurrent.locks.ReadWriteLock view of this StampedLock in\n which the java.util.concurrent.locks....</div><div class='long'><p>Returns a <a href=\"#!/api/java.util.concurrent.locks.ReadWriteLock\" rel=\"java.util.concurrent.locks.ReadWriteLock\" class=\"docClass\">java.util.concurrent.locks.ReadWriteLock</a> view of this StampedLock in\n which the java.util.concurrent.locks.ReadWriteLock.readLock() method is mapped to\n <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-asReadLock\" rel=\"java.util.concurrent.locks.StampedLock-method-asReadLock\" class=\"docClass\">asReadLock</a>(), and java.util.concurrent.locks.ReadWriteLock.writeLock() to\n <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-asWriteLock\" rel=\"java.util.concurrent.locks.StampedLock-method-asWriteLock\" class=\"docClass\">asWriteLock</a>().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.locks.ReadWriteLock}</span><div class='sub-desc'><p>the lock</p>\n</div></li></ul></div></div></div><div id='method-asWriteLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-asWriteLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-asWriteLock' class='name expandable'>asWriteLock</a>( <span class='pre'></span> ) : Object {java.util.concurrent.locks.Lock}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a plain java.util.concurrent.locks.Lock view of this StampedLock in which\n the java.util.concurrent.locks.Loc...</div><div class='long'><p>Returns a plain <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> view of this StampedLock in which\n the <a href=\"#!/api/java.util.concurrent.locks.Lock-method-lock\" rel=\"java.util.concurrent.locks.Lock-method-lock\" class=\"docClass\">java.util.concurrent.locks.Lock.lock</a> method is mapped to <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-writeLock\" rel=\"java.util.concurrent.locks.StampedLock-method-writeLock\" class=\"docClass\">writeLock</a>,\n and similarly for other methods. The returned Lock does not\n support a <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a>; method java.util.concurrent.locks.Lock.newCondition() throws {@code\n UnsupportedOperationException}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.locks.Lock}</span><div class='sub-desc'><p>the lock</p>\n</div></li></ul></div></div></div><div id='method-getReadLockCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-getReadLockCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-getReadLockCount' class='name expandable'>getReadLockCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries the number of read locks held for this lock. ...</div><div class='long'><p>Queries the number of read locks held for this lock. This\n method is designed for use in monitoring system state, not for\n synchronization control.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of read locks held</p>\n</div></li></ul></div></div></div><div id='method-isReadLocked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-isReadLocked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-isReadLocked' class='name expandable'>isReadLocked</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if the lock is currently held non-exclusively. ...</div><div class='long'><p>Returns {@code true} if the lock is currently held non-exclusively.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the lock is currently held non-exclusively</p>\n</div></li></ul></div></div></div><div id='method-isWriteLocked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-isWriteLocked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-isWriteLocked' class='name expandable'>isWriteLocked</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code true} if the lock is currently held exclusively. ...</div><div class='long'><p>Returns {@code true} if the lock is currently held exclusively.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the lock is currently held exclusively</p>\n</div></li></ul></div></div></div><div id='method-readLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-readLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-readLock' class='name expandable'>readLock</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Non-exclusively acquires the lock, blocking if necessary\n until available. ...</div><div class='long'><p>Non-exclusively acquires the lock, blocking if necessary\n until available.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a stamp that can be used to unlock or convert mode</p>\n</div></li></ul></div></div></div><div id='method-readLockInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-readLockInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-readLockInterruptibly' class='name expandable'>readLockInterruptibly</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Non-exclusively acquires the lock, blocking if necessary\n until available or the current thread is interrupted. ...</div><div class='long'><p>Non-exclusively acquires the lock, blocking if necessary\n until available or the current thread is interrupted.\n Behavior under interruption matches that specified\n for method java.util.concurrent.locks.Lock.lockInterruptibly().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a stamp that can be used to unlock or convert mode</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n before acquiring the lock</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this lock, as well as its lock\n state. ...</div><div class='long'><p>Returns a string identifying this lock, as well as its lock\n state.  The state, in brackets, includes the String {@code\n \"Unlocked\"} or the String {@code \"Write-locked\"} or the String\n {@code \"Read-locks:\"} followed by the current number of\n read-locks held.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this lock, as well as its lock state</p>\n</div></li></ul></div></div></div><div id='method-tryConvertToOptimisticRead' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-tryConvertToOptimisticRead' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-tryConvertToOptimisticRead' class='name expandable'>tryConvertToOptimisticRead</a>( <span class='pre'>stamp</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>If the lock state matches the given stamp then, atomically, if the stamp\n represents holding a lock, releases it and ...</div><div class='long'><p>If the lock state matches the given stamp then, atomically, if the stamp\n represents holding a lock, releases it and returns an\n observation stamp.  Or, if an optimistic read, returns it if\n validated. This method returns zero in all other cases, and so\n may be useful as a form of \"tryUnlock\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stamp</span> : Number<div class='sub-desc'><p>a stamp</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a valid optimistic read stamp, or zero on failure</p>\n</div></li></ul></div></div></div><div id='method-tryConvertToReadLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-tryConvertToReadLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-tryConvertToReadLock' class='name expandable'>tryConvertToReadLock</a>( <span class='pre'>stamp</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>If the lock state matches the given stamp, atomically performs one of\n the following actions. ...</div><div class='long'><p>If the lock state matches the given stamp, atomically performs one of\n the following actions. If the stamp represents holding a write\n lock, releases it and obtains a read lock.  Or, if a read lock,\n returns it. Or, if an optimistic read, acquires a read lock and\n returns a read stamp only if immediately available. This method\n returns zero in all other cases.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stamp</span> : Number<div class='sub-desc'><p>a stamp</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a valid read stamp, or zero on failure</p>\n</div></li></ul></div></div></div><div id='method-tryConvertToWriteLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-tryConvertToWriteLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-tryConvertToWriteLock' class='name expandable'>tryConvertToWriteLock</a>( <span class='pre'>stamp</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>If the lock state matches the given stamp, atomically performs one of\n the following actions. ...</div><div class='long'><p>If the lock state matches the given stamp, atomically performs one of\n the following actions. If the stamp represents holding a write\n lock, returns it.  Or, if a read lock, if the write lock is\n available, releases the read lock and returns a write stamp.\n Or, if an optimistic read, returns a write stamp only if\n immediately available. This method returns zero in all other\n cases.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stamp</span> : Number<div class='sub-desc'><p>a stamp</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a valid write stamp, or zero on failure</p>\n</div></li></ul></div></div></div><div id='method-tryOptimisticRead' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-tryOptimisticRead' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-tryOptimisticRead' class='name expandable'>tryOptimisticRead</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a stamp that can later be validated, or zero\n if exclusively locked. ...</div><div class='long'><p>Returns a stamp that can later be validated, or zero\n if exclusively locked.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a stamp, or zero if exclusively locked</p>\n</div></li></ul></div></div></div><div id='method-tryReadLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-tryReadLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-tryReadLock' class='name expandable'>tryReadLock</a>( <span class='pre'>time, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Non-exclusively acquires the lock if it is available within the\n given time and the current thread has not been inter...</div><div class='long'><p>Non-exclusively acquires the lock if it is available within the\n given time and the current thread has not been interrupted.\n Behavior under timeout and interruption matches that specified\n for method java.util.concurrent.locks.Lock.tryjava.util.concurrent.locks.Lock(long,TimeUnit).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>time</span> : Number<div class='sub-desc'><p>the maximum time to wait for the lock</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the {@code time} argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a stamp that can be used to unlock or convert mode,\n or zero if the lock is not available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n before acquiring the lock</p>\n</div></li></ul></div></div></div><div id='method-tryUnlockRead' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-tryUnlockRead' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-tryUnlockRead' class='name expandable'>tryUnlockRead</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases one hold of the read lock if it is held, without\n requiring a stamp value. ...</div><div class='long'><p>Releases one hold of the read lock if it is held, without\n requiring a stamp value. This method may be useful for recovery\n after errors.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the read lock was held, else false</p>\n</div></li></ul></div></div></div><div id='method-tryUnlockWrite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-tryUnlockWrite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-tryUnlockWrite' class='name expandable'>tryUnlockWrite</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases the write lock if it is held, without requiring a\n stamp value. ...</div><div class='long'><p>Releases the write lock if it is held, without requiring a\n stamp value. This method may be useful for recovery after\n errors.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the lock was held, else false</p>\n</div></li></ul></div></div></div><div id='method-tryWriteLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-tryWriteLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-tryWriteLock' class='name expandable'>tryWriteLock</a>( <span class='pre'>time, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Exclusively acquires the lock if it is available within the\n given time and the current thread has not been interrupted. ...</div><div class='long'><p>Exclusively acquires the lock if it is available within the\n given time and the current thread has not been interrupted.\n Behavior under timeout and interruption matches that specified\n for method java.util.concurrent.locks.Lock.tryjava.util.concurrent.locks.Lock(long,TimeUnit).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>time</span> : Number<div class='sub-desc'><p>the maximum time to wait for the lock</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the {@code time} argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a stamp that can be used to unlock or convert mode,\n or zero if the lock is not available</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n before acquiring the lock</p>\n</div></li></ul></div></div></div><div id='method-unlock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-unlock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-unlock' class='name expandable'>unlock</a>( <span class='pre'>stamp</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>If the lock state matches the given stamp, releases the\n corresponding mode of the lock. ...</div><div class='long'><p>If the lock state matches the given stamp, releases the\n corresponding mode of the lock.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stamp</span> : Number<div class='sub-desc'><p>a stamp returned by a lock operation</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if the stamp does\n not match the current state of this lock</p>\n</div></li></ul></div></div></div><div id='method-unlockRead' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-unlockRead' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-unlockRead' class='name expandable'>unlockRead</a>( <span class='pre'>stamp</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>If the lock state matches the given stamp, releases the\n non-exclusive lock. ...</div><div class='long'><p>If the lock state matches the given stamp, releases the\n non-exclusive lock.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stamp</span> : Number<div class='sub-desc'><p>a stamp returned by a read-lock operation</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if the stamp does\n not match the current state of this lock</p>\n</div></li></ul></div></div></div><div id='method-unlockWrite' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-unlockWrite' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-unlockWrite' class='name expandable'>unlockWrite</a>( <span class='pre'>stamp</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>If the lock state matches the given stamp, releases the\n exclusive lock. ...</div><div class='long'><p>If the lock state matches the given stamp, releases the\n exclusive lock.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stamp</span> : Number<div class='sub-desc'><p>a stamp returned by a write-lock operation</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if the stamp does\n not match the current state of this lock</p>\n</div></li></ul></div></div></div><div id='method-validate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-validate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-validate' class='name expandable'>validate</a>( <span class='pre'>stamp</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the lock has not been exclusively acquired\n since issuance of the given stamp. ...</div><div class='long'><p>Returns true if the lock has not been exclusively acquired\n since issuance of the given stamp. Always returns false if the\n stamp is zero. Always returns true if the stamp represents a\n currently held lock. Invoking this method with a value not\n obtained from <a href=\"#!/api/java.util.concurrent.locks.StampedLock-method-tryOptimisticRead\" rel=\"java.util.concurrent.locks.StampedLock-method-tryOptimisticRead\" class=\"docClass\">tryOptimisticRead</a> or a locking method\n for this lock has no defined effect or result.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stamp</span> : Number<div class='sub-desc'><p>a stamp</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the lock has not been exclusively acquired\n since issuance of the given stamp; else false</p>\n</div></li></ul></div></div></div><div id='method-writeLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-writeLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-writeLock' class='name expandable'>writeLock</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Exclusively acquires the lock, blocking if necessary\n until available. ...</div><div class='long'><p>Exclusively acquires the lock, blocking if necessary\n until available.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a stamp that can be used to unlock or convert mode</p>\n</div></li></ul></div></div></div><div id='method-writeLockInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.StampedLock'>java.util.concurrent.locks.StampedLock</span><br/><a href='source/StampedLock.html#java-util-concurrent-locks-StampedLock-method-writeLockInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.StampedLock-method-writeLockInterruptibly' class='name expandable'>writeLockInterruptibly</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Exclusively acquires the lock, blocking if necessary\n until available or the current thread is interrupted. ...</div><div class='long'><p>Exclusively acquires the lock, blocking if necessary\n until available or the current thread is interrupted.\n Behavior under interruption matches that specified\n for method java.util.concurrent.locks.Lock.lockInterruptibly().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a stamp that can be used to unlock or convert mode</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n before acquiring the lock</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});