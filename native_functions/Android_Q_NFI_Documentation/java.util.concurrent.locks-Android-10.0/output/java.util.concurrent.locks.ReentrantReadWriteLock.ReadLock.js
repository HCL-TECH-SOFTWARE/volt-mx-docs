Ext.data.JsonP.java_util_concurrent_locks_ReentrantReadWriteLock_ReadLock({"tagname":"class","name":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","autodetected":{},"files":[{"filename":"ReadLock.js","href":"ReadLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-ReadLock"}],"extends":"java.lang.Object","members":[{"name":"lock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","id":"method-lock","meta":{}},{"name":"lockInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","id":"method-lockInterruptibly","meta":{}},{"name":"newCondition","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","id":"method-newCondition","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","id":"method-toString","meta":{}},{"name":"tryLock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","id":"method-tryLock","meta":{}},{"name":"unlock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","id":"method-unlock","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock","short_doc":"implements java.util.concurrent.locks.Lock\n\n implements java.io.Serializable\n\nThe lock returned by method java.util.c...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ReadLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-ReadLock' target='_blank'>ReadLock.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a></p>\n\n<p> implements java.io.Serializable</p>\n\n<p>The lock returned by method <a href=\"#!/api/java.util.concurrent.locks.ReentrantReadWriteLock-method-readLock\" rel=\"java.util.concurrent.locks.ReentrantReadWriteLock-method-readLock\" class=\"docClass\">java.util.concurrent.locks.ReentrantReadWriteLock.readLock</a>.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-lock' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock'>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</span><br/><a href='source/ReadLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-ReadLock-method-lock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock-method-lock' class='name expandable'>lock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the read lock. ...</div><div class='long'><p>Acquires the read lock.</p>\n\n<p> <p>Acquires the read lock if the write lock is not held by\n another thread and returns immediately.</p>\n\n<p> <p>If the write lock is held by another thread then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until the read lock has been acquired.</p>\n</div></div></div><div id='method-lockInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock'>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</span><br/><a href='source/ReadLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-ReadLock-method-lockInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock-method-lockInterruptibly' class='name expandable'>lockInterruptibly</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the read lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}. ...</div><div class='long'><p>Acquires the read lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.</p>\n\n<p> <p>Acquires the read lock if the write lock is not held\n by another thread and returns immediately.</p>\n\n<p> <p>If the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of two things happens:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>The read lock is acquired by the current thread; or</li></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.</li></p>\n\n<p> </p>\n\n<p> <p>If the current thread:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>has its interrupted status set on entry to this method; or</li></p>\n\n<p> <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the read lock,</li></p>\n\n<p> </p>\n\n<p> then InterruptedException is thrown and the current\n thread's interrupted status is cleared.</p>\n\n<p> <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-newCondition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock'>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</span><br/><a href='source/ReadLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-ReadLock-method-newCondition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock-method-newCondition' class='name expandable'>newCondition</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Throws {@code UnsupportedOperationException} because\n {@code ReadLocks} do not support conditions. ...</div><div class='long'><p>Throws {@code UnsupportedOperationException} because\n {@code ReadLocks} do not support conditions.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException always</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock'>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</span><br/><a href='source/ReadLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-ReadLock-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this lock, as well as its lock state. ...</div><div class='long'><p>Returns a string identifying this lock, as well as its lock state.\n The state, in brackets, includes the String {@code \"Read locks =\"}\n followed by the number of held read locks.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this lock, as well as its lock state</p>\n</div></li></ul></div></div></div><div id='method-tryLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock'>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</span><br/><a href='source/ReadLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-ReadLock-method-tryLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock-method-tryLock' class='name expandable'>tryLock</a>( <span class='pre'>timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the read lock if the write lock is not held by\n another thread within the given waiting time and the\n curren...</div><div class='long'><p>Acquires the read lock if the write lock is not held by\n another thread within the given waiting time and the\n current thread has not been {@linkplain Thread#interrupt\n interrupted}.</p>\n\n<p> <p>Acquires the read lock if the write lock is not held by\n another thread and returns immediately with the value\n {@code true}. If this lock has been set to use a fair\n ordering policy then an available lock <em>will not</em> be\n acquired if any other threads are waiting for the\n lock. This is in contrast to the <a href=\"#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock-method-tryLock\" rel=\"java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock-method-tryLock\" class=\"docClass\">tryLock</a>()\n method. If you want a timed {@code tryLock} that does\n permit barging on a fair lock then combine the timed and\n un-timed forms together:</p>\n\n<p> <pre> {@code\n if (lock.tryLock() ||\n     lock.tryLock(timeout, unit)) {\n   ...\n }}</pre></p>\n\n<p> <p>If the write lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>The read lock is acquired by the current thread; or</li></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or</li></p>\n\n<p> <li>The specified waiting time elapses.</li></p>\n\n<p> </p>\n\n<p> <p>If the read lock is acquired then the value {@code true} is\n returned.</p>\n\n<p> <p>If the current thread:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>has its interrupted status set on entry to this method; or</li></p>\n\n<p> <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the read lock,</li></p>\n\n<p>  then InterruptedException is thrown and the\n current thread's interrupted status is cleared.</p>\n\n<p> <p>If the specified waiting time elapses then the value\n {@code false} is returned.  If the time is less than or\n equal to zero, the method will not wait at all.</p>\n\n<p> <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the time to wait for the read lock</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the read lock was acquired</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the time unit is null</p>\n</div></li></ul></div></div></div><div id='method-unlock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock'>java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock</span><br/><a href='source/ReadLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-ReadLock-method-unlock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock-method-unlock' class='name expandable'>unlock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to release this lock. ...</div><div class='long'><p>Attempts to release this lock.</p>\n\n<p> <p>If the number of readers is now zero then the lock\n is made available for write lock attempts. If the current\n thread does not hold this lock then IllegalMonitorStateException is thrown.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if the current thread\n does not hold this lock</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});