Ext.data.JsonP.java_util_concurrent_locks_AbstractQueuedLongSynchronizer({"tagname":"class","name":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","autodetected":{},"files":[{"filename":"AbstractQueuedLongSynchronizer.js","href":"AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer"}],"extends":"java.util.concurrent.locks.AbstractOwnableSynchronizer","since":"1.6","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"acquire","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-acquire","meta":{}},{"name":"acquireInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-acquireInterruptibly","meta":{}},{"name":"acquireShared","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-acquireShared","meta":{}},{"name":"acquireSharedInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-acquireSharedInterruptibly","meta":{}},{"name":"getExclusiveQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-getExclusiveQueuedThreads","meta":{}},{"name":"getFirstQueuedThread","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-getFirstQueuedThread","meta":{}},{"name":"getQueueLength","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-getQueueLength","meta":{}},{"name":"getQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-getQueuedThreads","meta":{}},{"name":"getSharedQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-getSharedQueuedThreads","meta":{}},{"name":"getWaitQueueLength","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-getWaitQueueLength","meta":{}},{"name":"getWaitingThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-getWaitingThreads","meta":{}},{"name":"hasContended","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-hasContended","meta":{}},{"name":"hasQueuedPredecessors","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-hasQueuedPredecessors","meta":{}},{"name":"hasQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-hasQueuedThreads","meta":{}},{"name":"hasWaiters","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-hasWaiters","meta":{}},{"name":"isQueued","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-isQueued","meta":{}},{"name":"owns","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-owns","meta":{}},{"name":"release","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-release","meta":{}},{"name":"releaseShared","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-releaseShared","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-toString","meta":{}},{"name":"tryAcquireNanos","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-tryAcquireNanos","meta":{}},{"name":"tryAcquireSharedNanos","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer","id":"method-tryAcquireSharedNanos","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.AbstractQueuedLongSynchronizer","short_doc":"implements java.io.Serializable\n\nA version of java.util.concurrent.locks.AbstractQueuedSynchronizer in\n which synchro...","classIcon":"icon-class","superclasses":["java.lang.Object","java.util.concurrent.locks.AbstractOwnableSynchronizer"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.util.concurrent.locks.AbstractOwnableSynchronizer' rel='java.util.concurrent.locks.AbstractOwnableSynchronizer' class='docClass'>java.util.concurrent.locks.AbstractOwnableSynchronizer</a><div class='subclass '><strong>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer' target='_blank'>AbstractQueuedLongSynchronizer.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p>A version of <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer\" class=\"docClass\">java.util.concurrent.locks.AbstractQueuedSynchronizer</a> in\n which synchronization state is maintained as a {@code long}.\n This class has exactly the same structure, properties, and methods\n as {@code AbstractQueuedSynchronizer} with the exception\n that all state-related parameters and results are defined\n as {@code long} rather than {@code int}. This class\n may be useful when creating synchronizers such as\n multilevel locks and barriers that require\n 64 bits of state.</p>\n\n<p> <p>See <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer\" class=\"docClass\">java.util.concurrent.locks.AbstractQueuedSynchronizer</a> for usage\n notes and examples.</p>\n        <p>Available since: <b>1.6</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-acquire' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-acquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-acquire' class='name expandable'>acquire</a>( <span class='pre'>arg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires in exclusive mode, ignoring interrupts. ...</div><div class='long'><p>Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once tryAcquire,\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking tryAcquire until success.  This method can be used\n to implement method <a href=\"#!/api/java.util.concurrent.locks.Lock-method-lock\" rel=\"java.util.concurrent.locks.Lock-method-lock\" class=\"docClass\">java.util.concurrent.locks.Lock.lock</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquire but is otherwise uninterpreted and\n        can represent anything you like.</p>\n</div></li></ul></div></div></div><div id='method-acquireInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-acquireInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-acquireInterruptibly' class='name expandable'>acquireInterruptibly</a>( <span class='pre'>arg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires in exclusive mode, aborting if interrupted. ...</div><div class='long'><p>Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once tryAcquire, returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking tryAcquire\n until success or the thread is interrupted.  This method can be\n used to implement method <a href=\"#!/api/java.util.concurrent.locks.Lock-method-lockInterruptibly\" rel=\"java.util.concurrent.locks.Lock-method-lockInterruptibly\" class=\"docClass\">java.util.concurrent.locks.Lock.lockInterruptibly</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquire but is otherwise uninterpreted and\n        can represent anything you like.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-acquireShared' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-acquireShared' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-acquireShared' class='name expandable'>acquireShared</a>( <span class='pre'>arg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires in shared mode, ignoring interrupts. ...</div><div class='long'><p>Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once tryAcquireShared,\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking tryAcquireShared until success.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquireShared but is otherwise uninterpreted\n        and can represent anything you like.</p>\n</div></li></ul></div></div></div><div id='method-acquireSharedInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-acquireSharedInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-acquireSharedInterruptibly' class='name expandable'>acquireSharedInterruptibly</a>( <span class='pre'>arg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires in shared mode, aborting if interrupted. ...</div><div class='long'><p>Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n tryAcquireShared, returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking tryAcquireShared until success or the thread\n is interrupted.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.\n This value is conveyed to tryAcquireShared but is\n otherwise uninterpreted and can represent anything\n you like.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-getExclusiveQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-getExclusiveQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getExclusiveQueuedThreads' class='name expandable'>getExclusiveQueuedThreads</a>( <span class='pre'></span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. ...</div><div class='long'><p>Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getQueuedThreads\" rel=\"java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getQueuedThreads\" class=\"docClass\">getQueuedThreads</a> except that it only returns\n those threads waiting due to an exclusive acquire.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the collection of threads</p>\n</div></li></ul></div></div></div><div id='method-getFirstQueuedThread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-getFirstQueuedThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getFirstQueuedThread' class='name expandable'>getFirstQueuedThread</a>( <span class='pre'></span> ) : Object {java.lang.Thread}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued. ...</div><div class='long'><p>Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued.</p>\n\n<p> <p>In this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Thread}</span><div class='sub-desc'><p>the first (longest-waiting) thread in the queue, or\n         {@code null} if no threads are currently queued</p>\n</div></li></ul></div></div></div><div id='method-getQueueLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-getQueueLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getQueueLength' class='name expandable'>getQueueLength</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of threads waiting to\n acquire. ...</div><div class='long'><p>Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization control.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the estimated number of threads waiting to acquire</p>\n</div></li></ul></div></div></div><div id='method-getQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-getQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getQueuedThreads' class='name expandable'>getQueuedThreads</a>( <span class='pre'></span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a collection containing threads that may be waiting to\n acquire. ...</div><div class='long'><p>Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the collection of threads</p>\n</div></li></ul></div></div></div><div id='method-getSharedQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-getSharedQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getSharedQueuedThreads' class='name expandable'>getSharedQueuedThreads</a>( <span class='pre'></span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a collection containing threads that may be waiting to\n acquire in shared mode. ...</div><div class='long'><p>Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getQueuedThreads\" rel=\"java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getQueuedThreads\" class=\"docClass\">getQueuedThreads</a> except that it only returns\n those threads waiting due to a shared acquire.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the collection of threads</p>\n</div></li></ul></div></div></div><div id='method-getWaitQueueLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-getWaitQueueLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getWaitQueueLength' class='name expandable'>getWaitQueueLength</a>( <span class='pre'>condition</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. ...</div><div class='long'><p>Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring system\n state, not for synchronization control.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {AbstractQueuedLongSynchronizer.ConditionObject}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the estimated number of waiting threads</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if exclusive synchronization\n         is not held</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given condition is\n         not associated with this synchronizer</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-getWaitingThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-getWaitingThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-getWaitingThreads' class='name expandable'>getWaitingThreads</a>( <span class='pre'>condition</span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synch...</div><div class='long'><p>Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {AbstractQueuedLongSynchronizer.ConditionObject}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the collection of threads</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if exclusive synchronization\n         is not held</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given condition is\n         not associated with this synchronizer</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-hasContended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-hasContended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-hasContended' class='name expandable'>hasContended</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads have ever contended to acquire this\n synchronizer; that is, if an acquire method has ever...</div><div class='long'><p>Queries whether any threads have ever contended to acquire this\n synchronizer; that is, if an acquire method has ever blocked.</p>\n\n<p> <p>In this implementation, this operation returns in\n constant time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there has ever been contention</p>\n</div></li></ul></div></div></div><div id='method-hasQueuedPredecessors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-hasQueuedPredecessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-hasQueuedPredecessors' class='name expandable'>hasQueuedPredecessors</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads have been waiting to acquire longer\n than the current thread. ...</div><div class='long'><p>Queries whether any threads have been waiting to acquire longer\n than the current thread.</p>\n\n<p> <p>An invocation of this method is equivalent to (but may be\n more efficient than):\n <pre> {@code\n getFirstQueuedThread() != Thread.currentThread()\n   &amp;&amp; hasQueuedThreads()}</pre></p>\n\n<p> <p>Note that because cancellations due to interrupts and\n timeouts may occur at any time, a {@code true} return does not\n guarantee that some other thread will acquire before the current\n thread.  Likewise, it is possible for another thread to win a\n race to enqueue after this method has returned {@code false},\n due to the queue being empty.</p>\n\n<p> <p>This method is designed to be used by a fair synchronizer to\n avoid <a href=\"AbstractQueuedSynchronizer.html#barging\">barging</a>.\n Such a synchronizer's tryAcquire method should return\n {@code false}, and its tryAcquireShared method should\n return a negative value, if this method returns {@code true}\n (unless this is a reentrant acquire).  For example, the {@code\n tryAcquire} method for a fair, reentrant, exclusive mode\n synchronizer might look like this:</p>\n\n<p> <pre> {@code\n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }}</pre></p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there is a queued thread preceding the\n         current thread, and {@code false} if the current thread\n         is at the head of the queue or the queue is empty</p>\n</div></li></ul></div></div></div><div id='method-hasQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-hasQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-hasQueuedThreads' class='name expandable'>hasQueuedThreads</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads are waiting to acquire. ...</div><div class='long'><p>Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.</p>\n\n<p> <p>In this implementation, this operation returns in\n constant time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there may be other threads waiting to acquire</p>\n</div></li></ul></div></div></div><div id='method-hasWaiters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-hasWaiters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-hasWaiters' class='name expandable'>hasWaiters</a>( <span class='pre'>condition</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads are waiting on the given condition\n associated with this synchronizer. ...</div><div class='long'><p>Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a {@code true} return\n does not guarantee that a future {@code signal} will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {AbstractQueuedLongSynchronizer.ConditionObject}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there are any waiting threads</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if exclusive synchronization\n         is not held</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given condition is\n         not associated with this synchronizer</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-isQueued' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-isQueued' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-isQueued' class='name expandable'>isQueued</a>( <span class='pre'>thread</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the given thread is currently queued. ...</div><div class='long'><p>Returns true if the given thread is currently queued.</p>\n\n<p> <p>This implementation traverses the queue to determine\n presence of the given thread.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>thread</span> : Object {Thread}<div class='sub-desc'><p>the thread</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the given thread is on the queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the thread is null</p>\n</div></li></ul></div></div></div><div id='method-owns' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-owns' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-owns' class='name expandable'>owns</a>( <span class='pre'>condition</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether the given ConditionObject\n uses this synchronizer as its lock. ...</div><div class='long'><p>Queries whether the given ConditionObject\n uses this synchronizer as its lock.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {AbstractQueuedLongSynchronizer.ConditionObject}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if owned</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-release' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-release' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-release' class='name expandable'>release</a>( <span class='pre'>arg</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases in exclusive mode. ...</div><div class='long'><p>Releases in exclusive mode.  Implemented by unblocking one or\n more threads if tryRelease returns true.\n This method can be used to implement method <a href=\"#!/api/java.util.concurrent.locks.Lock-method-unlock\" rel=\"java.util.concurrent.locks.Lock-method-unlock\" class=\"docClass\">java.util.concurrent.locks.Lock.unlock</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the release argument.  This value is conveyed to\n        tryRelease but is otherwise uninterpreted and\n        can represent anything you like.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the value returned from tryRelease</p>\n</div></li></ul></div></div></div><div id='method-releaseShared' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-releaseShared' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-releaseShared' class='name expandable'>releaseShared</a>( <span class='pre'>arg</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases in shared mode. ...</div><div class='long'><p>Releases in shared mode.  Implemented by unblocking one or more\n threads if tryReleaseShared returns true.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the release argument.  This value is conveyed to\n        tryReleaseShared but is otherwise uninterpreted\n        and can represent anything you like.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the value returned from tryReleaseShared</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this synchronizer, as well as its state. ...</div><div class='long'><p>Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String {@code \"State =\"}\n followed by the current value of getState, and either\n {@code \"nonempty\"} or {@code \"empty\"} depending on whether the\n queue is empty.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this synchronizer, as well as its state</p>\n</div></li></ul></div></div></div><div id='method-tryAcquireNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-tryAcquireNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-tryAcquireNanos' class='name expandable'>tryAcquireNanos</a>( <span class='pre'>arg, nanosTimeout</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses. ...</div><div class='long'><p>Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once tryAcquire, returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n tryAcquire until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method TimeUnit).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquire but is otherwise uninterpreted and\n        can represent anything you like.</p>\n</div></li><li><span class='pre'>nanosTimeout</span> : Number<div class='sub-desc'><p>the maximum number of nanoseconds to wait</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if acquired; {@code false} if timed out</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-tryAcquireSharedNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedLongSynchronizer'>java.util.concurrent.locks.AbstractQueuedLongSynchronizer</span><br/><a href='source/AbstractQueuedLongSynchronizer.html#java-util-concurrent-locks-AbstractQueuedLongSynchronizer-method-tryAcquireSharedNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedLongSynchronizer-method-tryAcquireSharedNanos' class='name expandable'>tryAcquireSharedNanos</a>( <span class='pre'>arg, nanosTimeout</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses. ...</div><div class='long'><p>Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once tryAcquireShared, returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking tryAcquireShared until success or the thread\n is interrupted or the timeout elapses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquireShared but is otherwise uninterpreted\n        and can represent anything you like.</p>\n</div></li><li><span class='pre'>nanosTimeout</span> : Number<div class='sub-desc'><p>the maximum number of nanoseconds to wait</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if acquired; {@code false} if timed out</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});