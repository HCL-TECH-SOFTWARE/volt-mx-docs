Ext.data.JsonP.java_util_concurrent_locks_ReentrantReadWriteLock_WriteLock({"tagname":"class","name":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","autodetected":{},"files":[{"filename":"WriteLock.js","href":"WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock"}],"extends":"java.lang.Object","members":[{"name":"getHoldCount","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","id":"method-getHoldCount","meta":{}},{"name":"isHeldByCurrentThread","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","id":"method-isHeldByCurrentThread","meta":{}},{"name":"lock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","id":"method-lock","meta":{}},{"name":"lockInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","id":"method-lockInterruptibly","meta":{}},{"name":"newCondition","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","id":"method-newCondition","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","id":"method-toString","meta":{}},{"name":"tryLock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","id":"method-tryLock","meta":{}},{"name":"unlock","tagname":"method","owner":"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","id":"method-unlock","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock","short_doc":"implements java.util.concurrent.locks.Lock\n\n implements java.io.Serializable\n\nThe lock returned by method java.util.c...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock' target='_blank'>WriteLock.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a></p>\n\n<p> implements java.io.Serializable</p>\n\n<p>The lock returned by method <a href=\"#!/api/java.util.concurrent.locks.ReentrantReadWriteLock-method-writeLock\" rel=\"java.util.concurrent.locks.ReentrantReadWriteLock-method-writeLock\" class=\"docClass\">java.util.concurrent.locks.ReentrantReadWriteLock.writeLock</a>.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getHoldCount' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock'>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</span><br/><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock-method-getHoldCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-getHoldCount' class='name expandable'>getHoldCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries the number of holds on this write lock by the current\n thread. ...</div><div class='long'><p>Queries the number of holds on this write lock by the current\n thread.  A thread has a hold on a lock for each lock action\n that is not matched by an unlock action.  Identical in effect\n to <a href=\"#!/api/java.util.concurrent.locks.ReentrantReadWriteLock-method-getWriteHoldCount\" rel=\"java.util.concurrent.locks.ReentrantReadWriteLock-method-getWriteHoldCount\" class=\"docClass\">java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount</a>.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of holds on this lock by the current thread,\n         or zero if this lock is not held by the current thread</p>\n</div></li></ul></div></div></div><div id='method-isHeldByCurrentThread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock'>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</span><br/><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock-method-isHeldByCurrentThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-isHeldByCurrentThread' class='name expandable'>isHeldByCurrentThread</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries if this write lock is held by the current thread. ...</div><div class='long'><p>Queries if this write lock is held by the current thread.\n Identical in effect to <a href=\"#!/api/java.util.concurrent.locks.ReentrantReadWriteLock-method-isWriteLockedByCurrentThread\" rel=\"java.util.concurrent.locks.ReentrantReadWriteLock-method-isWriteLockedByCurrentThread\" class=\"docClass\">java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLockedByCurrentThread</a>.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the current thread holds this lock and\n         {@code false} otherwise</p>\n</div></li></ul></div></div></div><div id='method-lock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock'>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</span><br/><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock-method-lock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-lock' class='name expandable'>lock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the write lock. ...</div><div class='long'><p>Acquires the write lock.</p>\n\n<p> <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately, setting the write lock hold count to\n one.</p>\n\n<p> <p>If the current thread already holds the write lock then the\n hold count is incremented by one and the method returns\n immediately.</p>\n\n<p> <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until the write lock has been acquired, at which\n time the write lock hold count is set to one.</p>\n</div></div></div><div id='method-lockInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock'>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</span><br/><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock-method-lockInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-lockInterruptibly' class='name expandable'>lockInterruptibly</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the write lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}. ...</div><div class='long'><p>Acquires the write lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.</p>\n\n<p> <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately, setting the write lock hold count to\n one.</p>\n\n<p> <p>If the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n immediately.</p>\n\n<p> <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until one of two things happens:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>The write lock is acquired by the current thread; or</li></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.</li></p>\n\n<p> </p>\n\n<p> <p>If the write lock is acquired by the current thread then the\n lock hold count is set to one.</p>\n\n<p> <p>If the current thread:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>has its interrupted status set on entry to this method;\n or</li></p>\n\n<p> <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the write lock,</li></p>\n\n<p> </p>\n\n<p> then InterruptedException is thrown and the current\n thread's interrupted status is cleared.</p>\n\n<p> <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-newCondition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock'>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</span><br/><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock-method-newCondition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-newCondition' class='name expandable'>newCondition</a>( <span class='pre'></span> ) : Object {java.util.concurrent.locks.Condition}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a java.util.concurrent.locks.Condition instance for use with this\n java.util.concurrent.locks.Lock instance. ...</div><div class='long'><p>Returns a <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> instance for use with this\n <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> instance.\n <p>The returned <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> instance supports the same\n usages as do the Object monitor methods (wait, notify, and notifyAll) when used with the built-in\n monitor lock.</p>\n\n<p> <ul></ul></p>\n\n<p> <li>If this write lock is not held when any <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> method is called then an IllegalMonitorStateException is thrown.  (Read locks are\n held independently of write locks, so are not checked or\n affected. However it is essentially always an error to\n invoke a condition waiting method when the current thread\n has also acquired read locks, since other threads that\n could unblock it will not be able to acquire the write\n lock.)</li></p>\n\n<p> <li>When the condition {@linkplain <a href=\"#!/api/java.util.concurrent.locks.Condition-method-await\" rel=\"java.util.concurrent.locks.Condition-method-await\" class=\"docClass\">java.util.concurrent.locks.Condition.await</a>() waiting}\n methods are called the write lock is released and, before\n they return, the write lock is reacquired and the lock hold\n count restored to what it was when the method was called.</li></p>\n\n<p> <li>If a thread is {@linkplain Thread#interrupt interrupted} while\n waiting then the wait will terminate, an InterruptedException will be thrown, and the thread's\n interrupted status will be cleared.</li></p>\n\n<p> <li>Waiting threads are signalled in FIFO order.</li></p>\n\n<p> <li>The ordering of lock reacquisition for threads returning\n from waiting methods is the same as for threads initially\n acquiring the lock, which is in the default case not specified,\n but for <em>fair</em> locks favors those threads that have been\n waiting the longest.</li></p>\n\n<p> </p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.locks.Condition}</span><div class='sub-desc'><p>the Condition object</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock'>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</span><br/><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this lock, as well as its lock\n state. ...</div><div class='long'><p>Returns a string identifying this lock, as well as its lock\n state.  The state, in brackets includes either the String\n {@code \"Unlocked\"} or the String {@code \"Locked by\"}\n followed by the {@linkplain Thread#getName name} of the owning thread.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this lock, as well as its lock state</p>\n</div></li></ul></div></div></div><div id='method-tryLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock'>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</span><br/><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock-method-tryLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-tryLock' class='name expandable'>tryLock</a>( <span class='pre'>timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the write lock if it is not held by another thread\n within the given waiting time and the current thread has...</div><div class='long'><p>Acquires the write lock if it is not held by another thread\n within the given waiting time and the current thread has\n not been {@linkplain Thread#interrupt interrupted}.</p>\n\n<p> <p>Acquires the write lock if neither the read nor write lock\n are held by another thread\n and returns immediately with the value {@code true},\n setting the write lock hold count to one. If this lock has been\n set to use a fair ordering policy then an available lock\n <em>will not</em> be acquired if any other threads are\n waiting for the write lock. This is in contrast to the <a href=\"#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-tryLock\" rel=\"java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-tryLock\" class=\"docClass\">tryLock</a>() method. If you want a timed {@code tryLock}\n that does permit barging on a fair lock then combine the\n timed and un-timed forms together:</p>\n\n<p> <pre> {@code\n if (lock.tryLock() ||\n     lock.tryLock(timeout, unit)) {\n   ...\n }}</pre></p>\n\n<p> <p>If the current thread already holds this lock then the\n hold count is incremented by one and the method returns\n {@code true}.</p>\n\n<p> <p>If the lock is held by another thread then the current\n thread becomes disabled for thread scheduling purposes and\n lies dormant until one of three things happens:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>The write lock is acquired by the current thread; or</li></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or</li></p>\n\n<p> <li>The specified waiting time elapses</li></p>\n\n<p> </p>\n\n<p> <p>If the write lock is acquired then the value {@code true} is\n returned and the write lock hold count is set to one.</p>\n\n<p> <p>If the current thread:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>has its interrupted status set on entry to this method;\n or</li></p>\n\n<p> <li>is {@linkplain Thread#interrupt interrupted} while\n acquiring the write lock,</li></p>\n\n<p> </p>\n\n<p> then InterruptedException is thrown and the current\n thread's interrupted status is cleared.</p>\n\n<p> <p>If the specified waiting time elapses then the value\n {@code false} is returned.  If the time is less than or\n equal to zero, the method will not wait at all.</p>\n\n<p> <p>In this implementation, as this method is an explicit\n interruption point, preference is given to responding to\n the interrupt over normal or reentrant acquisition of the\n lock, and over reporting the elapse of the waiting time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the time to wait for the write lock</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the timeout argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the lock was free and was acquired\n by the current thread, or the write lock was already held by the\n current thread; and {@code false} if the waiting time\n elapsed before the lock could be acquired.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the time unit is null</p>\n</div></li></ul></div></div></div><div id='method-unlock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock'>java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock</span><br/><a href='source/WriteLock.html#java-util-concurrent-locks-ReentrantReadWriteLock-WriteLock-method-unlock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock-method-unlock' class='name expandable'>unlock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to release this lock. ...</div><div class='long'><p>Attempts to release this lock.</p>\n\n<p> <p>If the current thread is the holder of this lock then\n the hold count is decremented. If the hold count is now\n zero then the lock is released.  If the current thread is\n not the holder of this lock then IllegalMonitorStateException is thrown.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if the current thread does not\n hold this lock</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});