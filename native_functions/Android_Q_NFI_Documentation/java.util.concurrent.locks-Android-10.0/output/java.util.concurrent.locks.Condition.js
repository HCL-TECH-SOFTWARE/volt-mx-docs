Ext.data.JsonP.java_util_concurrent_locks_Condition({"tagname":"class","name":"java.util.concurrent.locks.Condition","autodetected":{},"files":[{"filename":"Condition.js","href":"Condition.html#java-util-concurrent-locks-Condition"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"await","tagname":"method","owner":"java.util.concurrent.locks.Condition","id":"method-await","meta":{}},{"name":"awaitNanos","tagname":"method","owner":"java.util.concurrent.locks.Condition","id":"method-awaitNanos","meta":{}},{"name":"awaitUninterruptibly","tagname":"method","owner":"java.util.concurrent.locks.Condition","id":"method-awaitUninterruptibly","meta":{}},{"name":"awaitUntil","tagname":"method","owner":"java.util.concurrent.locks.Condition","id":"method-awaitUntil","meta":{}},{"name":"signal","tagname":"method","owner":"java.util.concurrent.locks.Condition","id":"method-signal","meta":{}},{"name":"signalAll","tagname":"method","owner":"java.util.concurrent.locks.Condition","id":"method-signalAll","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.Condition","short_doc":"{@code Condition} factors out the {@code Object} monitor\n methods (wait, notify\n and notifyAll) into distinct objects...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Condition.html#java-util-concurrent-locks-Condition' target='_blank'>Condition.js</a></div></pre><div class='doc-contents'><p>{@code Condition} factors out the {@code Object} monitor\n methods (wait, notify\n and notifyAll) into distinct objects to\n give the effect of having multiple wait-sets per object, by\n combining them with the use of arbitrary <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> implementations.\n Where a {@code Lock} replaces the use of {@code synchronized} methods\n and statements, a {@code Condition} replaces the use of the Object\n monitor methods.</p>\n\n<p> <p>Conditions (also known as <em>condition queues</em> or\n <em>condition variables</em>) provide a means for one thread to\n suspend execution (to &quot;wait&quot;) until notified by another\n thread that some state condition may now be true.  Because access\n to this shared state information occurs in different threads, it\n must be protected, so a lock of some form is associated with the\n condition. The key property that waiting for a condition provides\n is that it <em>atomically</em> releases the associated lock and\n suspends the current thread, just like {@code Object.wait}.</p>\n\n<p> <p>A {@code Condition} instance is intrinsically bound to a lock.\n To obtain a {@code Condition} instance for a particular <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a>\n instance use its <a href=\"#!/api/java.util.concurrent.locks.Lock-method-newCondition\" rel=\"java.util.concurrent.locks.Lock-method-newCondition\" class=\"docClass\">newCondition()</a> method.</p>\n\n<p> <p>As an example, suppose we have a bounded buffer which supports\n {@code put} and {@code take} methods.  If a\n {@code take} is attempted on an empty buffer, then the thread will block\n until an item becomes available; if a {@code put} is attempted on a\n full buffer, then the thread will block until a space becomes available.\n We would like to keep waiting {@code put} threads and {@code take}\n threads in separate wait-sets so that we can use the optimization of\n only notifying a single thread at a time when items or spaces become\n available in the buffer. This can be achieved using two\n <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> instances.</p>\n\n<pre> class BoundedBuffer {\n   <b>final Lock lock = new ReentrantLock();</b>\n   final Condition notFull  = <b>lock.newCondition(); </b>\n   final Condition notEmpty = <b>lock.newCondition(); </b>\n\n   final Object[] items = new Object[100];\n   int putptr, takeptr, count;\n\n   public void put(Object x) throws InterruptedException {\n     <b>lock.lock();\n     try {</b>\n       while (count == items.length)\n         <b>notFull.await();</b>\n       items[putptr] = x;\n       if (++putptr == items.length) putptr = 0;\n       ++count;\n       <b>notEmpty.signal();</b>\n     <b>} finally {\n       lock.unlock();\n     }</b>\n   }\n\n   public Object take() throws InterruptedException {\n     <b>lock.lock();\n     try {</b>\n       while (count == 0)\n         <b>notEmpty.await();</b>\n       Object x = items[takeptr];\n       if (++takeptr == items.length) takeptr = 0;\n       --count;\n       <b>notFull.signal();</b>\n       return x;\n     <b>} finally {\n       lock.unlock();\n     }</b>\n   }\n }\n </pre>\n\n\n<p> (The java.util.concurrent.ArrayBlockingQueue class provides\n this functionality, so there is no reason to implement this\n sample usage class.)</p>\n\n<p> <p>A {@code Condition} implementation can provide behavior and semantics\n that is\n different from that of the {@code Object} monitor methods, such as\n guaranteed ordering for notifications, or not requiring a lock to be held\n when performing notifications.\n If an implementation provides such specialized semantics then the\n implementation must document those semantics.</p>\n\n<p> <p>Note that {@code Condition} instances are just normal objects and can\n themselves be used as the target in a {@code synchronized} statement,\n and can have their own monitor wait and\n notify methods invoked.\n Acquiring the monitor lock of a {@code Condition} instance, or using its\n monitor methods, has no specified relationship with acquiring the\n <a href=\"#!/api/java.util.concurrent.locks.Lock\" rel=\"java.util.concurrent.locks.Lock\" class=\"docClass\">java.util.concurrent.locks.Lock</a> associated with that {@code Condition} or the use of its\n {@linkplain <a href=\"#!/api/java.util.concurrent.locks.Condition-method-await\" rel=\"java.util.concurrent.locks.Condition-method-await\" class=\"docClass\">await</a> waiting} and {@linkplain <a href=\"#!/api/java.util.concurrent.locks.Condition-method-signal\" rel=\"java.util.concurrent.locks.Condition-method-signal\" class=\"docClass\">signal</a> signalling} methods.\n It is recommended that to avoid confusion you never use {@code Condition}\n instances in this way, except perhaps within their own implementation.</p>\n\n<p> <p>Except where noted, passing a {@code null} value for any parameter\n will result in a NullPointerException being thrown.</p>\n\n<p> <h3>Implementation Considerations</h3></p>\n\n<p> <p>When waiting upon a {@code Condition}, a &quot;<em>spurious\n wakeup</em>&quot; is permitted to occur, in\n general, as a concession to the underlying platform semantics.\n This has little practical impact on most application programs as a\n {@code Condition} should always be waited upon in a loop, testing\n the state predicate that is being waited for.  An implementation is\n free to remove the possibility of spurious wakeups but it is\n recommended that applications programmers always assume that they can\n occur and so always wait in a loop.</p>\n\n<p> <p>The three forms of condition waiting\n (interruptible, non-interruptible, and timed) may differ in their ease of\n implementation on some platforms and in their performance characteristics.\n In particular, it may be difficult to provide these features and maintain\n specific semantics such as ordering guarantees.\n Further, the ability to interrupt the actual suspension of the thread may\n not always be feasible to implement on all platforms.</p>\n\n<p> <p>Consequently, an implementation is not required to define exactly the\n same guarantees or semantics for all three forms of waiting, nor is it\n required to support interruption of the actual suspension of the thread.</p>\n\n<p> <p>An implementation is required to\n clearly document the semantics and guarantees provided by each of the\n waiting methods, and when an implementation does support interruption of\n thread suspension then it must obey the interruption semantics as defined\n in this interface.</p>\n\n<p> <p>As interruption generally implies cancellation, and checks for\n interruption are often infrequent, an implementation can favor responding\n to an interrupt over normal method return. This is true even if it can be\n shown that the interrupt occurred after another action that may have\n unblocked the thread. An implementation should document this behavior.</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-await' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Condition'>java.util.concurrent.locks.Condition</span><br/><a href='source/Condition.html#java-util-concurrent-locks-Condition-method-await' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Condition-method-await' class='name expandable'>await</a>( <span class='pre'>time, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes the current thread to wait until it is signalled or interrupted,\n or the specified waiting time elapses. ...</div><div class='long'><p>Causes the current thread to wait until it is signalled or interrupted,\n or the specified waiting time elapses. This method is behaviorally\n equivalent to:\n <pre> {@code awaitNanos(unit.toNanos(time)) > 0}</pre></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>time</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the {@code time} argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code false} if the waiting time detectably elapsed\n         before return from the method, else {@code true}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n         (and interruption of thread suspension is supported)</p>\n</div></li></ul></div></div></div><div id='method-awaitNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Condition'>java.util.concurrent.locks.Condition</span><br/><a href='source/Condition.html#java-util-concurrent-locks-Condition-method-awaitNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Condition-method-awaitNanos' class='name expandable'>awaitNanos</a>( <span class='pre'>nanosTimeout</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes the current thread to wait until it is signalled or interrupted,\n or the specified waiting time elapses. ...</div><div class='long'><p>Causes the current thread to wait until it is signalled or interrupted,\n or the specified waiting time elapses.</p>\n\n<p> <p>The lock associated with this condition is atomically\n released and the current thread becomes disabled for thread scheduling\n purposes and lies dormant until <em>one</em> of five things happens:\n <ul>\n <li>Some other thread invokes the <a href=\"#!/api/java.util.concurrent.locks.Condition-method-signal\" rel=\"java.util.concurrent.locks.Condition-method-signal\" class=\"docClass\">signal</a> method for this\n {@code Condition} and the current thread happens to be chosen as the\n thread to be awakened; or\n <li>Some other thread invokes the <a href=\"#!/api/java.util.concurrent.locks.Condition-method-signalAll\" rel=\"java.util.concurrent.locks.Condition-method-signalAll\" class=\"docClass\">signalAll</a> method for this\n {@code Condition}; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of thread suspension is supported; or\n <li>The specified waiting time elapses; or\n <li>A &quot;<em>spurious wakeup</em>&quot; occurs.\n </li></li></li></li></li></ul></p>\n\n<p> <p>In all cases, before this method can return the current thread must\n re-acquire the lock associated with this condition. When the\n thread returns it is <em>guaranteed</em> to hold this lock.</p>\n\n<p> <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n and interruption of thread suspension is supported,\n </li></li></ul>\n then InterruptedException is thrown and the current thread's\n interrupted status is cleared. It is not specified, in the first\n case, whether or not the test for interruption occurs before the lock\n is released.</p>\n\n<p> <p>The method returns an estimate of the number of nanoseconds\n remaining to wait given the supplied {@code nanosTimeout}\n value upon return, or a value less than or equal to zero if it\n timed out. This value can be used to determine whether and how\n long to re-wait in cases where the wait returns but an awaited\n condition still does not hold. Typical uses of this method take\n the following form:</p>\n\n<p> <pre> {@code\n boolean aMethod(long timeout, TimeUnit unit) {\n   long nanos = unit.toNanos(timeout);\n   lock.lock();\n   try {\n     while (!conditionBeingWaitedFor()) {\n       if (nanos &lt;= 0L)\n         return false;\n       nanos = theCondition.awaitNanos(nanos);\n     }\n     // ...\n   } finally {\n     lock.unlock();\n   }\n }}</pre></p>\n\n<p> <p>Design note: This method requires a nanosecond argument so\n as to avoid truncation errors in reporting remaining times.\n Such precision loss would make it difficult for programmers to\n ensure that total waiting times are not systematically shorter\n than specified when re-waits occur.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>The current thread is assumed to hold the lock associated with this\n {@code Condition} when this method is called.\n It is up to the implementation to determine if this is\n the case and if not, how to respond. Typically, an exception will be\n thrown (such as IllegalMonitorStateException) and the\n implementation must document that fact.</p>\n\n<p> <p>An implementation can favor responding to an interrupt over normal\n method return in response to a signal, or over indicating the elapse\n of the specified waiting time. In either case the implementation\n must ensure that the signal is redirected to another waiting thread, if\n there is one.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanosTimeout</span> : Number<div class='sub-desc'><p>the maximum time to wait, in nanoseconds</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>an estimate of the {@code nanosTimeout} value minus\n         the time spent waiting upon return from this method.\n         A positive value may be used as the argument to a\n         subsequent call to this method to finish waiting out\n         the desired time.  A value less than or equal to zero\n         indicates that no time remains.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n         (and interruption of thread suspension is supported)</p>\n</div></li></ul></div></div></div><div id='method-awaitUninterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Condition'>java.util.concurrent.locks.Condition</span><br/><a href='source/Condition.html#java-util-concurrent-locks-Condition-method-awaitUninterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Condition-method-awaitUninterruptibly' class='name expandable'>awaitUninterruptibly</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes the current thread to wait until it is signalled. ...</div><div class='long'><p>Causes the current thread to wait until it is signalled.</p>\n\n<p> <p>The lock associated with this condition is atomically\n released and the current thread becomes disabled for thread scheduling\n purposes and lies dormant until <em>one</em> of three things happens:\n <ul>\n <li>Some other thread invokes the <a href=\"#!/api/java.util.concurrent.locks.Condition-method-signal\" rel=\"java.util.concurrent.locks.Condition-method-signal\" class=\"docClass\">signal</a> method for this\n {@code Condition} and the current thread happens to be chosen as the\n thread to be awakened; or\n <li>Some other thread invokes the <a href=\"#!/api/java.util.concurrent.locks.Condition-method-signalAll\" rel=\"java.util.concurrent.locks.Condition-method-signalAll\" class=\"docClass\">signalAll</a> method for this\n {@code Condition}; or\n <li>A &quot;<em>spurious wakeup</em>&quot; occurs.\n </li></li></li></ul></p>\n\n<p> <p>In all cases, before this method can return the current thread must\n re-acquire the lock associated with this condition. When the\n thread returns it is <em>guaranteed</em> to hold this lock.</p>\n\n<p> <p>If the current thread's interrupted status is set when it enters\n this method, or it is {@linkplain Thread#interrupt interrupted}\n while waiting, it will continue to wait until signalled. When it finally\n returns from this method its interrupted status will still\n be set.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>The current thread is assumed to hold the lock associated with this\n {@code Condition} when this method is called.\n It is up to the implementation to determine if this is\n the case and if not, how to respond. Typically, an exception will be\n thrown (such as IllegalMonitorStateException) and the\n implementation must document that fact.</p>\n</div></div></div><div id='method-awaitUntil' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Condition'>java.util.concurrent.locks.Condition</span><br/><a href='source/Condition.html#java-util-concurrent-locks-Condition-method-awaitUntil' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Condition-method-awaitUntil' class='name expandable'>awaitUntil</a>( <span class='pre'>deadline</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes the current thread to wait until it is signalled or interrupted,\n or the specified deadline elapses. ...</div><div class='long'><p>Causes the current thread to wait until it is signalled or interrupted,\n or the specified deadline elapses.</p>\n\n<p> <p>The lock associated with this condition is atomically\n released and the current thread becomes disabled for thread scheduling\n purposes and lies dormant until <em>one</em> of five things happens:\n <ul>\n <li>Some other thread invokes the <a href=\"#!/api/java.util.concurrent.locks.Condition-method-signal\" rel=\"java.util.concurrent.locks.Condition-method-signal\" class=\"docClass\">signal</a> method for this\n {@code Condition} and the current thread happens to be chosen as the\n thread to be awakened; or\n <li>Some other thread invokes the <a href=\"#!/api/java.util.concurrent.locks.Condition-method-signalAll\" rel=\"java.util.concurrent.locks.Condition-method-signalAll\" class=\"docClass\">signalAll</a> method for this\n {@code Condition}; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of thread suspension is supported; or\n <li>The specified deadline elapses; or\n <li>A &quot;<em>spurious wakeup</em>&quot; occurs.\n </li></li></li></li></li></ul></p>\n\n<p> <p>In all cases, before this method can return the current thread must\n re-acquire the lock associated with this condition. When the\n thread returns it is <em>guaranteed</em> to hold this lock.</p>\n\n<p> <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while waiting\n and interruption of thread suspension is supported,\n </li></li></ul>\n then InterruptedException is thrown and the current thread's\n interrupted status is cleared. It is not specified, in the first\n case, whether or not the test for interruption occurs before the lock\n is released.</p>\n\n<p> <p>The return value indicates whether the deadline has elapsed,\n which can be used as follows:\n <pre> {@code\n boolean aMethod(Date deadline) {\n   boolean stillWaiting = true;\n   lock.lock();\n   try {\n     while (!conditionBeingWaitedFor()) {\n       if (!stillWaiting)\n         return false;\n       stillWaiting = theCondition.awaitUntil(deadline);\n     }\n     // ...\n   } finally {\n     lock.unlock();\n   }\n }}</pre></p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>The current thread is assumed to hold the lock associated with this\n {@code Condition} when this method is called.\n It is up to the implementation to determine if this is\n the case and if not, how to respond. Typically, an exception will be\n thrown (such as IllegalMonitorStateException) and the\n implementation must document that fact.</p>\n\n<p> <p>An implementation can favor responding to an interrupt over normal\n method return in response to a signal, or over indicating the passing\n of the specified deadline. In either case the implementation\n must ensure that the signal is redirected to another waiting thread, if\n there is one.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>deadline</span> : Object {Date}<div class='sub-desc'><p>the absolute time to wait until</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code false} if the deadline has elapsed upon return, else\n         {@code true}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n         (and interruption of thread suspension is supported)</p>\n</div></li></ul></div></div></div><div id='method-signal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Condition'>java.util.concurrent.locks.Condition</span><br/><a href='source/Condition.html#java-util-concurrent-locks-Condition-method-signal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Condition-method-signal' class='name expandable'>signal</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Wakes up one waiting thread. ...</div><div class='long'><p>Wakes up one waiting thread.</p>\n\n<p> <p>If any threads are waiting on this condition then one\n is selected for waking up. That thread must then re-acquire the\n lock before returning from {@code await}.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>An implementation may (and typically does) require that the\n current thread hold the lock associated with this {@code\n Condition} when this method is called. Implementations must\n document this precondition and any actions taken if the lock is\n not held. Typically, an exception such as IllegalMonitorStateException will be thrown.</p>\n</div></div></div><div id='method-signalAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Condition'>java.util.concurrent.locks.Condition</span><br/><a href='source/Condition.html#java-util-concurrent-locks-Condition-method-signalAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Condition-method-signalAll' class='name expandable'>signalAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Wakes up all waiting threads. ...</div><div class='long'><p>Wakes up all waiting threads.</p>\n\n<p> <p>If any threads are waiting on this condition then they are\n all woken up. Each thread must re-acquire the lock before it can\n return from {@code await}.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>An implementation may (and typically does) require that the\n current thread hold the lock associated with this {@code\n Condition} when this method is called. Implementations must\n document this precondition and any actions taken if the lock is\n not held. Typically, an exception such as IllegalMonitorStateException will be thrown.</p>\n</div></div></div></div></div></div></div>","meta":{}});