Ext.data.JsonP.java_util_concurrent_locks_Lock({"tagname":"class","name":"java.util.concurrent.locks.Lock","autodetected":{},"files":[{"filename":"Lock.js","href":"Lock.html#java-util-concurrent-locks-Lock"}],"since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"lock","tagname":"method","owner":"java.util.concurrent.locks.Lock","id":"method-lock","meta":{}},{"name":"lockInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.Lock","id":"method-lockInterruptibly","meta":{}},{"name":"newCondition","tagname":"method","owner":"java.util.concurrent.locks.Lock","id":"method-newCondition","meta":{}},{"name":"tryLock","tagname":"method","owner":"java.util.concurrent.locks.Lock","id":"method-tryLock","meta":{}},{"name":"unlock","tagname":"method","owner":"java.util.concurrent.locks.Lock","id":"method-unlock","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.Lock","short_doc":"{@code Lock} implementations provide more extensive locking\n operations than can be obtained using {@code synchronize...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Lock.html#java-util-concurrent-locks-Lock' target='_blank'>Lock.js</a></div></pre><div class='doc-contents'><p>{@code Lock} implementations provide more extensive locking\n operations than can be obtained using {@code synchronized} methods\n and statements.  They allow more flexible structuring, may have\n quite different properties, and may support multiple associated\n <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> objects.</p>\n\n<p> <p>A lock is a tool for controlling access to a shared resource by\n multiple threads. Commonly, a lock provides exclusive access to a\n shared resource: only one thread at a time can acquire the lock and\n all access to the shared resource requires that the lock be\n acquired first. However, some locks may allow concurrent access to\n a shared resource, such as the read lock of a <a href=\"#!/api/java.util.concurrent.locks.ReadWriteLock\" rel=\"java.util.concurrent.locks.ReadWriteLock\" class=\"docClass\">java.util.concurrent.locks.ReadWriteLock</a>.</p>\n\n<p> <p>The use of {@code synchronized} methods or statements provides\n access to the implicit monitor lock associated with every object, but\n forces all lock acquisition and release to occur in a block-structured way:\n when multiple locks are acquired they must be released in the opposite\n order, and all locks must be released in the same lexical scope in which\n they were acquired.</p>\n\n<p> <p>While the scoping mechanism for {@code synchronized} methods\n and statements makes it much easier to program with monitor locks,\n and helps avoid many common programming errors involving locks,\n there are occasions where you need to work with locks in a more\n flexible way. For example, some algorithms for traversing\n concurrently accessed data structures require the use of\n &quot;hand-over-hand&quot; or &quot;chain locking&quot;: you\n acquire the lock of node A, then node B, then release A and acquire\n C, then release B and acquire D and so on.  Implementations of the\n {@code Lock} interface enable the use of such techniques by\n allowing a lock to be acquired and released in different scopes,\n and allowing multiple locks to be acquired and released in any\n order.</p>\n\n<p> <p>With this increased flexibility comes additional\n responsibility. The absence of block-structured locking removes the\n automatic release of locks that occurs with {@code synchronized}\n methods and statements. In most cases, the following idiom\n should be used:</p>\n\n<p> <pre> {@code\n Lock l = ...;\n l.lock();\n try {\n   // access the resource protected by this lock\n } finally {\n   l.unlock();\n }}</pre></p>\n\n<p> When locking and unlocking occur in different scopes, care must be\n taken to ensure that all code that is executed while the lock is\n held is protected by try-finally or try-catch to ensure that the\n lock is released when necessary.</p>\n\n<p> <p>{@code Lock} implementations provide additional functionality\n over the use of {@code synchronized} methods and statements by\n providing a non-blocking attempt to acquire a lock (<a href=\"#!/api/java.util.concurrent.locks.Lock-method-tryLock\" rel=\"java.util.concurrent.locks.Lock-method-tryLock\" class=\"docClass\">tryLock</a>()), an attempt to acquire the lock that can be\n interrupted (<a href=\"#!/api/java.util.concurrent.locks.Lock-method-lockInterruptibly\" rel=\"java.util.concurrent.locks.Lock-method-lockInterruptibly\" class=\"docClass\">lockInterruptibly</a>, and an attempt to acquire\n the lock that can timeout (TimeUnit)).</p>\n\n<p> <p>A {@code Lock} class can also provide behavior and semantics\n that is quite different from that of the implicit monitor lock,\n such as guaranteed ordering, non-reentrant usage, or deadlock\n detection. If an implementation provides such specialized semantics\n then the implementation must document those semantics.</p>\n\n<p> <p>Note that {@code Lock} instances are just normal objects and can\n themselves be used as the target in a {@code synchronized} statement.\n Acquiring the\n monitor lock of a {@code Lock} instance has no specified relationship\n with invoking any of the <a href=\"#!/api/java.util.concurrent.locks.Lock-method-lock\" rel=\"java.util.concurrent.locks.Lock-method-lock\" class=\"docClass\">lock</a> methods of that instance.\n It is recommended that to avoid confusion you never use {@code Lock}\n instances in this way, except within their own implementation.</p>\n\n<p> <p>Except where noted, passing a {@code null} value for any\n parameter will result in a NullPointerException being\n thrown.</p>\n\n<p> <h3>Memory Synchronization</h3></p>\n\n<p> <p>All {@code Lock} implementations <em>must</em> enforce the same\n memory synchronization semantics as provided by the built-in monitor\n lock, as described in\n <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.4\">\n Chapter 17 of\n <cite>The Java&trade; Language Specification</cite></a>:\n <ul>\n <li>A successful {@code lock} operation has the same memory\n synchronization effects as a successful <em>Lock</em> action.\n <li>A successful {@code unlock} operation has the same\n memory synchronization effects as a successful <em>Unlock</em> action.\n </li></li></ul></p>\n\n<p> Unsuccessful locking and unlocking operations, and reentrant\n locking/unlocking operations, do not require any memory\n synchronization effects.</p>\n\n<p> <h3>Implementation Considerations</h3></p>\n\n<p> <p>The three forms of lock acquisition (interruptible,\n non-interruptible, and timed) may differ in their performance\n characteristics, ordering guarantees, or other implementation\n qualities.  Further, the ability to interrupt the <em>ongoing</em>\n acquisition of a lock may not be available in a given {@code Lock}\n class.  Consequently, an implementation is not required to define\n exactly the same guarantees or semantics for all three forms of\n lock acquisition, nor is it required to support interruption of an\n ongoing lock acquisition.  An implementation is required to clearly\n document the semantics and guarantees provided by each of the\n locking methods. It must also obey the interruption semantics as\n defined in this interface, to the extent that interruption of lock\n acquisition is supported: which is either totally, or only on\n method entry.</p>\n\n<p> <p>As interruption generally implies cancellation, and checks for\n interruption are often infrequent, an implementation can favor responding\n to an interrupt over normal method return. This is true even if it can be\n shown that the interrupt occurred after another action may have unblocked\n the thread. An implementation should document this behavior.</p>\n\n<p> @see ReentrantLock\n @see Condition\n @see ReadWriteLock</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-lock' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Lock'>java.util.concurrent.locks.Lock</span><br/><a href='source/Lock.html#java-util-concurrent-locks-Lock-method-lock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Lock-method-lock' class='name expandable'>lock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the lock. ...</div><div class='long'><p>Acquires the lock.</p>\n\n<p> <p>If the lock is not available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until the\n lock has been acquired.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>A {@code Lock} implementation may be able to detect erroneous use\n of the lock, such as an invocation that would cause deadlock, and\n may throw an (unchecked) exception in such circumstances.  The\n circumstances and the exception type must be documented by that\n {@code Lock} implementation.</p>\n</div></div></div><div id='method-lockInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Lock'>java.util.concurrent.locks.Lock</span><br/><a href='source/Lock.html#java-util-concurrent-locks-Lock-method-lockInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Lock-method-lockInterruptibly' class='name expandable'>lockInterruptibly</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}. ...</div><div class='long'><p>Acquires the lock unless the current thread is\n {@linkplain Thread#interrupt interrupted}.</p>\n\n<p> <p>Acquires the lock if it is available and returns immediately.</p>\n\n<p> <p>If the lock is not available then the current thread becomes\n disabled for thread scheduling purposes and lies dormant until\n one of two things happens:</p>\n\n<p> <ul>\n <li>The lock is acquired by the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of lock acquisition is supported.\n </li></li></ul></p>\n\n<p> <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while acquiring the\n lock, and interruption of lock acquisition is supported,\n </li></li></ul>\n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>The ability to interrupt a lock acquisition in some\n implementations may not be possible, and if possible may be an\n expensive operation.  The programmer should be aware that this\n may be the case. An implementation should document when this is\n the case.</p>\n\n<p> <p>An implementation can favor responding to an interrupt over\n normal method return.</p>\n\n<p> <p>A {@code Lock} implementation may be able to detect\n erroneous use of the lock, such as an invocation that would\n cause deadlock, and may throw an (unchecked) exception in such\n circumstances.  The circumstances and the exception type must\n be documented by that {@code Lock} implementation.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is\n         interrupted while acquiring the lock (and interruption\n         of lock acquisition is supported)</p>\n</div></li></ul></div></div></div><div id='method-newCondition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Lock'>java.util.concurrent.locks.Lock</span><br/><a href='source/Lock.html#java-util-concurrent-locks-Lock-method-newCondition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Lock-method-newCondition' class='name expandable'>newCondition</a>( <span class='pre'></span> ) : Object {java.util.concurrent.locks.Condition}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new java.util.concurrent.locks.Condition instance that is bound to this\n {@code Lock} instance. ...</div><div class='long'><p>Returns a new <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> instance that is bound to this\n {@code Lock} instance.</p>\n\n<p> <p>Before waiting on the condition the lock must be held by the\n current thread.\n A call to java.util.concurrent.locks.Condition.await() will atomically release the lock\n before waiting and re-acquire the lock before the wait returns.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>The exact operation of the <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> instance depends on\n the {@code Lock} implementation and must be documented by that\n implementation.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.locks.Condition}</span><div class='sub-desc'><p>A new Condition instance for this {@code Lock} instance</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedOperationException if this {@code Lock}\n         implementation does not support conditions</p>\n</div></li></ul></div></div></div><div id='method-tryLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Lock'>java.util.concurrent.locks.Lock</span><br/><a href='source/Lock.html#java-util-concurrent-locks-Lock-method-tryLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Lock-method-tryLock' class='name expandable'>tryLock</a>( <span class='pre'>time, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires the lock if it is free within the given waiting time and the\n current thread has not been {@linkplain Thread...</div><div class='long'><p>Acquires the lock if it is free within the given waiting time and the\n current thread has not been {@linkplain Thread#interrupt interrupted}.</p>\n\n<p> <p>If the lock is available this method returns immediately\n with the value {@code true}.\n If the lock is not available then\n the current thread becomes disabled for thread scheduling\n purposes and lies dormant until one of three things happens:\n <ul>\n <li>The lock is acquired by the current thread; or\n <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n current thread, and interruption of lock acquisition is supported; or\n <li>The specified waiting time elapses\n </li></li></li></ul></p>\n\n<p> <p>If the lock is acquired then the value {@code true} is returned.</p>\n\n<p> <p>If the current thread:\n <ul>\n <li>has its interrupted status set on entry to this method; or\n <li>is {@linkplain Thread#interrupt interrupted} while acquiring\n the lock, and interruption of lock acquisition is supported,\n </li></li></ul>\n then InterruptedException is thrown and the current thread's\n interrupted status is cleared.</p>\n\n<p> <p>If the specified waiting time elapses then the value {@code false}\n is returned.\n If the time is\n less than or equal to zero, the method will not wait at all.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>The ability to interrupt a lock acquisition in some implementations\n may not be possible, and if possible may\n be an expensive operation.\n The programmer should be aware that this may be the case. An\n implementation should document when this is the case.</p>\n\n<p> <p>An implementation can favor responding to an interrupt over normal\n method return, or reporting a timeout.</p>\n\n<p> <p>A {@code Lock} implementation may be able to detect\n erroneous use of the lock, such as an invocation that would cause\n deadlock, and may throw an (unchecked) exception in such circumstances.\n The circumstances and the exception type must be documented by that\n {@code Lock} implementation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>time</span> : Number<div class='sub-desc'><p>the maximum time to wait for the lock</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the {@code time} argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the lock was acquired and {@code false}\n         if the waiting time elapsed before the lock was acquired</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n         while acquiring the lock (and interruption of lock\n         acquisition is supported)</p>\n</div></li></ul></div></div></div><div id='method-unlock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.Lock'>java.util.concurrent.locks.Lock</span><br/><a href='source/Lock.html#java-util-concurrent-locks-Lock-method-unlock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.Lock-method-unlock' class='name expandable'>unlock</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases the lock. ...</div><div class='long'><p>Releases the lock.</p>\n\n<p> <p><b>Implementation Considerations</b></p>\n\n<p> <p>A {@code Lock} implementation will usually impose\n restrictions on which thread can release a lock (typically only the\n holder of the lock can release it) and may throw\n an (unchecked) exception if the restriction is violated.\n Any restrictions and the exception\n type must be documented by that {@code Lock} implementation.</p>\n</div></div></div></div></div></div></div>","meta":{}});