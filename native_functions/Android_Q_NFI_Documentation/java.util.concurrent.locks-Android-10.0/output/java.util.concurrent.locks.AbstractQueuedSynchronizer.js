Ext.data.JsonP.java_util_concurrent_locks_AbstractQueuedSynchronizer({"tagname":"class","name":"java.util.concurrent.locks.AbstractQueuedSynchronizer","autodetected":{},"files":[{"filename":"AbstractQueuedSynchronizer.js","href":"AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer"}],"extends":"java.util.concurrent.locks.AbstractOwnableSynchronizer","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"acquire","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-acquire","meta":{}},{"name":"acquireInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-acquireInterruptibly","meta":{}},{"name":"acquireShared","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-acquireShared","meta":{}},{"name":"acquireSharedInterruptibly","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-acquireSharedInterruptibly","meta":{}},{"name":"getExclusiveQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-getExclusiveQueuedThreads","meta":{}},{"name":"getFirstQueuedThread","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-getFirstQueuedThread","meta":{}},{"name":"getQueueLength","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-getQueueLength","meta":{}},{"name":"getQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-getQueuedThreads","meta":{}},{"name":"getSharedQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-getSharedQueuedThreads","meta":{}},{"name":"getWaitQueueLength","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-getWaitQueueLength","meta":{}},{"name":"getWaitingThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-getWaitingThreads","meta":{}},{"name":"hasContended","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-hasContended","meta":{}},{"name":"hasQueuedPredecessors","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-hasQueuedPredecessors","meta":{}},{"name":"hasQueuedThreads","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-hasQueuedThreads","meta":{}},{"name":"hasWaiters","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-hasWaiters","meta":{}},{"name":"isQueued","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-isQueued","meta":{}},{"name":"owns","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-owns","meta":{}},{"name":"release","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-release","meta":{}},{"name":"releaseShared","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-releaseShared","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-toString","meta":{}},{"name":"tryAcquireNanos","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-tryAcquireNanos","meta":{}},{"name":"tryAcquireSharedNanos","tagname":"method","owner":"java.util.concurrent.locks.AbstractQueuedSynchronizer","id":"method-tryAcquireSharedNanos","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.AbstractQueuedSynchronizer","short_doc":"implements java.io.Serializable\n\nProvides a framework for implementing blocking locks and related\n synchronizers (sem...","classIcon":"icon-class","superclasses":["java.lang.Object","java.util.concurrent.locks.AbstractOwnableSynchronizer"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.util.concurrent.locks.AbstractOwnableSynchronizer' rel='java.util.concurrent.locks.AbstractOwnableSynchronizer' class='docClass'>java.util.concurrent.locks.AbstractOwnableSynchronizer</a><div class='subclass '><strong>java.util.concurrent.locks.AbstractQueuedSynchronizer</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer' target='_blank'>AbstractQueuedSynchronizer.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p>Provides a framework for implementing blocking locks and related\n synchronizers (semaphores, events, etc) that rely on\n first-in-first-out (FIFO) wait queues.  This class is designed to\n be a useful basis for most kinds of synchronizers that rely on a\n single atomic {@code int} value to represent state. Subclasses\n must define the protected methods that change this state, and which\n define what that state means in terms of this object being acquired\n or released.  Given these, the other methods in this class carry\n out all queuing and blocking mechanics. Subclasses can maintain\n other state fields, but only the atomically updated {@code int}\n value manipulated using methods getState, setState and compareAndSetState is tracked with respect\n to synchronization.</p>\n\n<p> <p>Subclasses should be defined as non-public internal helper\n classes that are used to implement the synchronization properties\n of their enclosing class.  Class\n {@code AbstractQueuedSynchronizer} does not implement any\n synchronization interface.  Instead it defines methods such as\n <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-acquireInterruptibly\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer-method-acquireInterruptibly\" class=\"docClass\">acquireInterruptibly</a> that can be invoked as\n appropriate by concrete locks and related synchronizers to\n implement their public methods.</p>\n\n<p> <p>This class supports either or both a default <em>exclusive</em>\n mode and a <em>shared</em> mode. When acquired in exclusive mode,\n attempted acquires by other threads cannot succeed. Shared mode\n acquires by multiple threads may (but need not) succeed. This class\n does not &quot;understand&quot; these differences except in the\n mechanical sense that when a shared mode acquire succeeds, the next\n waiting thread (if one exists) must also determine whether it can\n acquire as well. Threads waiting in the different modes share the\n same FIFO queue. Usually, implementation subclasses support only\n one of these modes, but both can come into play for example in a\n <a href=\"#!/api/java.util.concurrent.locks.ReadWriteLock\" rel=\"java.util.concurrent.locks.ReadWriteLock\" class=\"docClass\">java.util.concurrent.locks.ReadWriteLock</a>. Subclasses that support only exclusive or\n only shared modes need not define the methods supporting the unused mode.</p>\n\n<p> <p>This class defines a nested java.util.concurrent.locks.ConditionObject class that\n can be used as a <a href=\"#!/api/java.util.concurrent.locks.Condition\" rel=\"java.util.concurrent.locks.Condition\" class=\"docClass\">java.util.concurrent.locks.Condition</a> implementation by subclasses\n supporting exclusive mode for which method isHeldExclusively reports whether synchronization is exclusively\n held with respect to the current thread, method <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-release\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer-method-release\" class=\"docClass\">release</a>\n invoked with the current getState value fully releases\n this object, and <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-acquire\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer-method-acquire\" class=\"docClass\">acquire</a>, given this saved state value,\n eventually restores this object to its previous acquired state.  No\n {@code AbstractQueuedSynchronizer} method otherwise creates such a\n condition, so if this constraint cannot be met, do not use it.  The\n behavior of java.util.concurrent.locks.ConditionObject depends of course on the\n semantics of its synchronizer implementation.</p>\n\n<p> <p>This class provides inspection, instrumentation, and monitoring\n methods for the internal queue, as well as similar methods for\n condition objects. These can be exported as desired into classes\n using an {@code AbstractQueuedSynchronizer} for their\n synchronization mechanics.</p>\n\n<p> <p>Serialization of this class stores only the underlying atomic\n integer maintaining state, so deserialized objects have empty\n thread queues. Typical subclasses requiring serializability will\n define a {@code readObject} method that restores this to a known\n initial state upon deserialization.</p>\n\n<p> <h3>Usage</h3></p>\n\n<p> <p>To use this class as the basis of a synchronizer, redefine the\n following methods, as applicable, by inspecting and/or modifying\n the synchronization state using getState, setState and/or compareAndSetState:</p>\n\n<p> <ul>\n <li>tryAcquire\n <li>tryRelease\n <li>tryAcquireShared\n <li>tryReleaseShared\n <li>isHeldExclusively\n </li></li></li></li></li></ul></p>\n\n<p> Each of these methods by default throws UnsupportedOperationException.  Implementations of these methods\n must be internally thread-safe, and should in general be short and\n not block. Defining these methods is the <em>only</em> supported\n means of using this class. All other methods are declared\n {@code final} because they cannot be independently varied.</p>\n\n<p> <p>You may also find the inherited methods from <a href=\"#!/api/java.util.concurrent.locks.AbstractOwnableSynchronizer\" rel=\"java.util.concurrent.locks.AbstractOwnableSynchronizer\" class=\"docClass\">java.util.concurrent.locks.AbstractOwnableSynchronizer</a> useful to keep track of the thread\n owning an exclusive synchronizer.  You are encouraged to use them\n -- this enables monitoring and diagnostic tools to assist users in\n determining which threads hold locks.</p>\n\n<p> <p>Even though this class is based on an internal FIFO queue, it\n does not automatically enforce FIFO acquisition policies.  The core\n of exclusive synchronization takes the form:</p>\n\n<pre> Acquire:\n     while (!tryAcquire(arg)) {\n        <em>enqueue thread if it is not already queued</em>;\n        <em>possibly block current thread</em>;\n     }\n\n Release:\n     if (tryRelease(arg))\n        <em>unblock the first queued thread</em>;\n </pre>\n\n\n<p> (Shared mode is similar but may involve cascading signals.)</p>\n\n<p> <p id=\"barging\">Because checks in acquire are invoked before\n enqueuing, a newly acquiring thread may <em>barge</em> ahead of\n others that are blocked and queued.  However, you can, if desired,\n define {@code tryAcquire} and/or {@code tryAcquireShared} to\n disable barging by internally invoking one or more of the inspection\n methods, thereby providing a <em>fair</em> FIFO acquisition order.\n In particular, most fair synchronizers can define {@code tryAcquire}\n to return {@code false} if <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasQueuedPredecessors\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasQueuedPredecessors\" class=\"docClass\">hasQueuedPredecessors</a> (a method\n specifically designed to be used by fair synchronizers) returns\n {@code true}.  Other variations are possible.</p>\n\n<p> <p>Throughput and scalability are generally highest for the\n default barging (also known as <em>greedy</em>,\n <em>renouncement</em>, and <em>convoy-avoidance</em>) strategy.\n While this is not guaranteed to be fair or starvation-free, earlier\n queued threads are allowed to recontend before later queued\n threads, and each recontention has an unbiased chance to succeed\n against incoming threads.  Also, while acquires do not\n &quot;spin&quot; in the usual sense, they may perform multiple\n invocations of {@code tryAcquire} interspersed with other\n computations before blocking.  This gives most of the benefits of\n spins when exclusive synchronization is only briefly held, without\n most of the liabilities when it isn't. If so desired, you can\n augment this by preceding calls to acquire methods with\n \"fast-path\" checks, possibly prechecking <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasContended\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasContended\" class=\"docClass\">hasContended</a>\n and/or <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasQueuedThreads\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasQueuedThreads\" class=\"docClass\">hasQueuedThreads</a> to only do so if the synchronizer\n is likely not to be contended.</p>\n\n<p> <p>This class provides an efficient and scalable basis for\n synchronization in part by specializing its range of use to\n synchronizers that can rely on {@code int} state, acquire, and\n release parameters, and an internal FIFO wait queue. When this does\n not suffice, you can build synchronizers from a lower level using\n atomic classes, your own custom\n java.util.Queue classes, and <a href=\"#!/api/java.util.concurrent.locks.LockSupport\" rel=\"java.util.concurrent.locks.LockSupport\" class=\"docClass\">java.util.concurrent.locks.LockSupport</a> blocking\n support.</p>\n\n<p> <h3>Usage Examples</h3></p>\n\n<p> <p>Here is a non-reentrant mutual exclusion lock class that uses\n the value zero to represent the unlocked state, and one to\n represent the locked state. While a non-reentrant lock\n does not strictly require recording of the current owner\n thread, this class does so anyway to make usage easier to monitor.\n It also supports conditions and exposes\n one of the instrumentation methods:</p>\n\n<p> <pre> {@code\n class Mutex implements Lock, java.io.Serializable {</pre></p>\n\n<p>   // Our internal helper class\n   private static class Sync extends AbstractQueuedSynchronizer {\n     // Reports whether in locked state\n     protected boolean isHeldExclusively() {\n       return getState() == 1;\n     }</p>\n\n<pre><code> // Acquires the lock if state is zero\n public boolean tryAcquire(int acquires) {\n   assert acquires == 1; // Otherwise unused\n   if (compareAndSetState(0, 1)) {\n     setExclusiveOwnerThread(Thread.currentThread());\n     return true;\n   }\n   return false;\n }\n\n // Releases the lock by setting state to zero\n protected boolean tryRelease(int releases) {\n   assert releases == 1; // Otherwise unused\n   if (getState() == 0) throw new IllegalMonitorStateException();\n   setExclusiveOwnerThread(null);\n   setState(0);\n   return true;\n }\n\n // Provides a Condition\n Condition newCondition() { return new ConditionObject(); }\n\n // Deserializes properly\n private void readObject(ObjectInputStream s)\n     throws IOException, ClassNotFoundException {\n   s.defaultReadObject();\n   setState(0); // reset to unlocked state\n }\n</code></pre>\n\n<p>   }</p>\n\n<p>   // The sync object does all the hard work. We just forward to it.\n   private final Sync sync = new Sync();</p>\n\n<p>   public void lock()                { sync.acquire(1); }\n   public boolean tryLock()          { return sync.tryAcquire(1); }\n   public void unlock()              { sync.release(1); }\n   public Condition newCondition()   { return sync.newCondition(); }\n   public boolean isLocked()         { return sync.isHeldExclusively(); }\n   public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }\n   public void lockInterruptibly() throws InterruptedException {\n     sync.acquireInterruptibly(1);\n   }\n   public boolean tryLock(long timeout, TimeUnit unit)\n       throws InterruptedException {\n     return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n   }\n }}</p>\n\n<p> <p>Here is a latch class that is like a\n CountDownLatch\n except that it only requires a single {@code signal} to\n fire. Because a latch is non-exclusive, it uses the {@code shared}\n acquire and release methods.</p>\n\n<p> <pre> {@code\n class BooleanLatch {</pre></p>\n\n<p>   private static class Sync extends AbstractQueuedSynchronizer {\n     boolean isSignalled() { return getState() != 0; }</p>\n\n<pre><code> protected int tryAcquireShared(int ignore) {\n   return isSignalled() ? 1 : -1;\n }\n\n protected boolean tryReleaseShared(int ignore) {\n   setState(1);\n   return true;\n }\n</code></pre>\n\n<p>   }</p>\n\n<p>   private final Sync sync = new Sync();\n   public boolean isSignalled() { return sync.isSignalled(); }\n   public void signal()         { sync.releaseShared(1); }\n   public void await() throws InterruptedException {\n     sync.acquireSharedInterruptibly(1);\n   }\n }}</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-acquire' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-acquire' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-acquire' class='name expandable'>acquire</a>( <span class='pre'>arg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires in exclusive mode, ignoring interrupts. ...</div><div class='long'><p>Acquires in exclusive mode, ignoring interrupts.  Implemented\n by invoking at least once tryAcquire,\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking tryAcquire until success.  This method can be used\n to implement method <a href=\"#!/api/java.util.concurrent.locks.Lock-method-lock\" rel=\"java.util.concurrent.locks.Lock-method-lock\" class=\"docClass\">java.util.concurrent.locks.Lock.lock</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquire but is otherwise uninterpreted and\n        can represent anything you like.</p>\n</div></li></ul></div></div></div><div id='method-acquireInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-acquireInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-acquireInterruptibly' class='name expandable'>acquireInterruptibly</a>( <span class='pre'>arg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires in exclusive mode, aborting if interrupted. ...</div><div class='long'><p>Acquires in exclusive mode, aborting if interrupted.\n Implemented by first checking interrupt status, then invoking\n at least once tryAcquire, returning on\n success.  Otherwise the thread is queued, possibly repeatedly\n blocking and unblocking, invoking tryAcquire\n until success or the thread is interrupted.  This method can be\n used to implement method <a href=\"#!/api/java.util.concurrent.locks.Lock-method-lockInterruptibly\" rel=\"java.util.concurrent.locks.Lock-method-lockInterruptibly\" class=\"docClass\">java.util.concurrent.locks.Lock.lockInterruptibly</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquire but is otherwise uninterpreted and\n        can represent anything you like.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-acquireShared' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-acquireShared' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-acquireShared' class='name expandable'>acquireShared</a>( <span class='pre'>arg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires in shared mode, ignoring interrupts. ...</div><div class='long'><p>Acquires in shared mode, ignoring interrupts.  Implemented by\n first invoking at least once tryAcquireShared,\n returning on success.  Otherwise the thread is queued, possibly\n repeatedly blocking and unblocking, invoking tryAcquireShared until success.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquireShared but is otherwise uninterpreted\n        and can represent anything you like.</p>\n</div></li></ul></div></div></div><div id='method-acquireSharedInterruptibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-acquireSharedInterruptibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-acquireSharedInterruptibly' class='name expandable'>acquireSharedInterruptibly</a>( <span class='pre'>arg</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Acquires in shared mode, aborting if interrupted. ...</div><div class='long'><p>Acquires in shared mode, aborting if interrupted.  Implemented\n by first checking interrupt status, then invoking at least once\n tryAcquireShared, returning on success.  Otherwise the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking tryAcquireShared until success or the thread\n is interrupted.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.\n This value is conveyed to tryAcquireShared but is\n otherwise uninterpreted and can represent anything\n you like.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-getExclusiveQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-getExclusiveQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getExclusiveQueuedThreads' class='name expandable'>getExclusiveQueuedThreads</a>( <span class='pre'></span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. ...</div><div class='long'><p>Returns a collection containing threads that may be waiting to\n acquire in exclusive mode. This has the same properties\n as <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getQueuedThreads\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getQueuedThreads\" class=\"docClass\">getQueuedThreads</a> except that it only returns\n those threads waiting due to an exclusive acquire.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the collection of threads</p>\n</div></li></ul></div></div></div><div id='method-getFirstQueuedThread' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-getFirstQueuedThread' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getFirstQueuedThread' class='name expandable'>getFirstQueuedThread</a>( <span class='pre'></span> ) : Object {java.lang.Thread}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued. ...</div><div class='long'><p>Returns the first (longest-waiting) thread in the queue, or\n {@code null} if no threads are currently queued.</p>\n\n<p> <p>In this implementation, this operation normally returns in\n constant time, but may iterate upon contention if other threads are\n concurrently modifying the queue.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Thread}</span><div class='sub-desc'><p>the first (longest-waiting) thread in the queue, or\n         {@code null} if no threads are currently queued</p>\n</div></li></ul></div></div></div><div id='method-getQueueLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-getQueueLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getQueueLength' class='name expandable'>getQueueLength</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of threads waiting to\n acquire. ...</div><div class='long'><p>Returns an estimate of the number of threads waiting to\n acquire.  The value is only an estimate because the number of\n threads may change dynamically while this method traverses\n internal data structures.  This method is designed for use in\n monitoring system state, not for synchronization control.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the estimated number of threads waiting to acquire</p>\n</div></li></ul></div></div></div><div id='method-getQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-getQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getQueuedThreads' class='name expandable'>getQueuedThreads</a>( <span class='pre'></span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a collection containing threads that may be waiting to\n acquire. ...</div><div class='long'><p>Returns a collection containing threads that may be waiting to\n acquire.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  The elements of the\n returned collection are in no particular order.  This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the collection of threads</p>\n</div></li></ul></div></div></div><div id='method-getSharedQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-getSharedQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getSharedQueuedThreads' class='name expandable'>getSharedQueuedThreads</a>( <span class='pre'></span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a collection containing threads that may be waiting to\n acquire in shared mode. ...</div><div class='long'><p>Returns a collection containing threads that may be waiting to\n acquire in shared mode. This has the same properties\n as <a href=\"#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getQueuedThreads\" rel=\"java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getQueuedThreads\" class=\"docClass\">getQueuedThreads</a> except that it only returns\n those threads waiting due to a shared acquire.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the collection of threads</p>\n</div></li></ul></div></div></div><div id='method-getWaitQueueLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-getWaitQueueLength' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getWaitQueueLength' class='name expandable'>getWaitQueueLength</a>( <span class='pre'>condition</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. ...</div><div class='long'><p>Returns an estimate of the number of threads waiting on the\n given condition associated with this synchronizer. Note that\n because timeouts and interrupts may occur at any time, the\n estimate serves only as an upper bound on the actual number of\n waiters.  This method is designed for use in monitoring system\n state, not for synchronization control.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {AbstractQueuedSynchronizer.ConditionObject}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the estimated number of waiting threads</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if exclusive synchronization\n         is not held</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given condition is\n         not associated with this synchronizer</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-getWaitingThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-getWaitingThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-getWaitingThreads' class='name expandable'>getWaitingThreads</a>( <span class='pre'>condition</span> ) : Object {java.util.Collection}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synch...</div><div class='long'><p>Returns a collection containing those threads that may be\n waiting on the given condition associated with this\n synchronizer.  Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate. The elements of the\n returned collection are in no particular order.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {AbstractQueuedSynchronizer.ConditionObject}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Collection}</span><div class='sub-desc'><p>the collection of threads</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if exclusive synchronization\n         is not held</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given condition is\n         not associated with this synchronizer</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-hasContended' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-hasContended' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasContended' class='name expandable'>hasContended</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads have ever contended to acquire this\n synchronizer; that is, if an acquire method has ever...</div><div class='long'><p>Queries whether any threads have ever contended to acquire this\n synchronizer; that is, if an acquire method has ever blocked.</p>\n\n<p> <p>In this implementation, this operation returns in\n constant time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there has ever been contention</p>\n</div></li></ul></div></div></div><div id='method-hasQueuedPredecessors' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-hasQueuedPredecessors' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasQueuedPredecessors' class='name expandable'>hasQueuedPredecessors</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads have been waiting to acquire longer\n than the current thread. ...</div><div class='long'><p>Queries whether any threads have been waiting to acquire longer\n than the current thread.</p>\n\n<p> <p>An invocation of this method is equivalent to (but may be\n more efficient than):\n <pre> {@code\n getFirstQueuedThread() != Thread.currentThread()\n   &amp;&amp; hasQueuedThreads()}</pre></p>\n\n<p> <p>Note that because cancellations due to interrupts and\n timeouts may occur at any time, a {@code true} return does not\n guarantee that some other thread will acquire before the current\n thread.  Likewise, it is possible for another thread to win a\n race to enqueue after this method has returned {@code false},\n due to the queue being empty.</p>\n\n<p> <p>This method is designed to be used by a fair synchronizer to\n avoid <a href=\"AbstractQueuedSynchronizer.html#barging\">barging</a>.\n Such a synchronizer's tryAcquire method should return\n {@code false}, and its tryAcquireShared method should\n return a negative value, if this method returns {@code true}\n (unless this is a reentrant acquire).  For example, the {@code\n tryAcquire} method for a fair, reentrant, exclusive mode\n synchronizer might look like this:</p>\n\n<p> <pre> {@code\n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }}</pre></p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there is a queued thread preceding the\n         current thread, and {@code false} if the current thread\n         is at the head of the queue or the queue is empty</p>\n</div></li></ul></div></div></div><div id='method-hasQueuedThreads' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-hasQueuedThreads' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasQueuedThreads' class='name expandable'>hasQueuedThreads</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads are waiting to acquire. ...</div><div class='long'><p>Queries whether any threads are waiting to acquire. Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.</p>\n\n<p> <p>In this implementation, this operation returns in\n constant time.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there may be other threads waiting to acquire</p>\n</div></li></ul></div></div></div><div id='method-hasWaiters' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-hasWaiters' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-hasWaiters' class='name expandable'>hasWaiters</a>( <span class='pre'>condition</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether any threads are waiting on the given condition\n associated with this synchronizer. ...</div><div class='long'><p>Queries whether any threads are waiting on the given condition\n associated with this synchronizer. Note that because timeouts\n and interrupts may occur at any time, a {@code true} return\n does not guarantee that a future {@code signal} will awaken\n any threads.  This method is designed primarily for use in\n monitoring of the system state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {AbstractQueuedSynchronizer.ConditionObject}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if there are any waiting threads</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalMonitorStateException if exclusive synchronization\n         is not held</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the given condition is\n         not associated with this synchronizer</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-isQueued' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-isQueued' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-isQueued' class='name expandable'>isQueued</a>( <span class='pre'>thread</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the given thread is currently queued. ...</div><div class='long'><p>Returns true if the given thread is currently queued.</p>\n\n<p> <p>This implementation traverses the queue to determine\n presence of the given thread.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>thread</span> : Object {Thread}<div class='sub-desc'><p>the thread</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the given thread is on the queue</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the thread is null</p>\n</div></li></ul></div></div></div><div id='method-owns' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-owns' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-owns' class='name expandable'>owns</a>( <span class='pre'>condition</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries whether the given ConditionObject\n uses this synchronizer as its lock. ...</div><div class='long'><p>Queries whether the given ConditionObject\n uses this synchronizer as its lock.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>condition</span> : Object {AbstractQueuedSynchronizer.ConditionObject}<div class='sub-desc'><p>the condition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if owned</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the condition is null</p>\n</div></li></ul></div></div></div><div id='method-release' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-release' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-release' class='name expandable'>release</a>( <span class='pre'>arg</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases in exclusive mode. ...</div><div class='long'><p>Releases in exclusive mode.  Implemented by unblocking one or\n more threads if tryRelease returns true.\n This method can be used to implement method <a href=\"#!/api/java.util.concurrent.locks.Lock-method-unlock\" rel=\"java.util.concurrent.locks.Lock-method-unlock\" class=\"docClass\">java.util.concurrent.locks.Lock.unlock</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the release argument.  This value is conveyed to\n        tryRelease but is otherwise uninterpreted and\n        can represent anything you like.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the value returned from tryRelease</p>\n</div></li></ul></div></div></div><div id='method-releaseShared' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-releaseShared' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-releaseShared' class='name expandable'>releaseShared</a>( <span class='pre'>arg</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Releases in shared mode. ...</div><div class='long'><p>Releases in shared mode.  Implemented by unblocking one or more\n threads if tryReleaseShared returns true.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the release argument.  This value is conveyed to\n        tryReleaseShared but is otherwise uninterpreted\n        and can represent anything you like.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the value returned from tryReleaseShared</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string identifying this synchronizer, as well as its state. ...</div><div class='long'><p>Returns a string identifying this synchronizer, as well as its state.\n The state, in brackets, includes the String {@code \"State =\"}\n followed by the current value of getState, and either\n {@code \"nonempty\"} or {@code \"empty\"} depending on whether the\n queue is empty.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string identifying this synchronizer, as well as its state</p>\n</div></li></ul></div></div></div><div id='method-tryAcquireNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-tryAcquireNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-tryAcquireNanos' class='name expandable'>tryAcquireNanos</a>( <span class='pre'>arg, nanosTimeout</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses. ...</div><div class='long'><p>Attempts to acquire in exclusive mode, aborting if interrupted,\n and failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once tryAcquire, returning on success.  Otherwise, the thread is\n queued, possibly repeatedly blocking and unblocking, invoking\n tryAcquire until success or the thread is interrupted\n or the timeout elapses.  This method can be used to implement\n method TimeUnit).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquire but is otherwise uninterpreted and\n        can represent anything you like.</p>\n</div></li><li><span class='pre'>nanosTimeout</span> : Number<div class='sub-desc'><p>the maximum number of nanoseconds to wait</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if acquired; {@code false} if timed out</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div><div id='method-tryAcquireSharedNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.AbstractQueuedSynchronizer'>java.util.concurrent.locks.AbstractQueuedSynchronizer</span><br/><a href='source/AbstractQueuedSynchronizer.html#java-util-concurrent-locks-AbstractQueuedSynchronizer-method-tryAcquireSharedNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.AbstractQueuedSynchronizer-method-tryAcquireSharedNanos' class='name expandable'>tryAcquireSharedNanos</a>( <span class='pre'>arg, nanosTimeout</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses. ...</div><div class='long'><p>Attempts to acquire in shared mode, aborting if interrupted, and\n failing if the given timeout elapses.  Implemented by first\n checking interrupt status, then invoking at least once tryAcquireShared, returning on success.  Otherwise, the\n thread is queued, possibly repeatedly blocking and unblocking,\n invoking tryAcquireShared until success or the thread\n is interrupted or the timeout elapses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arg</span> : Number<div class='sub-desc'><p>the acquire argument.  This value is conveyed to\n        tryAcquireShared but is otherwise uninterpreted\n        and can represent anything you like.</p>\n</div></li><li><span class='pre'>nanosTimeout</span> : Number<div class='sub-desc'><p>the maximum number of nanoseconds to wait</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if acquired; {@code false} if timed out</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});