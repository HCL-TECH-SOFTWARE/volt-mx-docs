Ext.data.JsonP.java_util_concurrent_locks_LockSupport({"tagname":"class","name":"java.util.concurrent.locks.LockSupport","autodetected":{},"files":[{"filename":"LockSupport.js","href":"LockSupport.html#java-util-concurrent-locks-LockSupport"}],"extends":"java.lang.Object","members":[{"name":"getBlocker","tagname":"method","owner":"java.util.concurrent.locks.LockSupport","id":"method-getBlocker","meta":{}},{"name":"park","tagname":"method","owner":"java.util.concurrent.locks.LockSupport","id":"method-park","meta":{}},{"name":"parkNanos","tagname":"method","owner":"java.util.concurrent.locks.LockSupport","id":"method-parkNanos","meta":{}},{"name":"parkUntil","tagname":"method","owner":"java.util.concurrent.locks.LockSupport","id":"method-parkUntil","meta":{}},{"name":"unpark","tagname":"method","owner":"java.util.concurrent.locks.LockSupport","id":"method-unpark","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.locks.LockSupport","short_doc":"Basic thread blocking primitives for creating locks and other\n synchronization classes. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.locks.LockSupport</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/LockSupport.html#java-util-concurrent-locks-LockSupport' target='_blank'>LockSupport.js</a></div></pre><div class='doc-contents'><p>Basic thread blocking primitives for creating locks and other\n synchronization classes.</p>\n\n<p> <p>This class associates, with each thread that uses it, a permit\n (in the sense of the Semaphore class). A call to {@code park} will return immediately\n if the permit is available, consuming it in the process; otherwise\n it <em>may</em> block.  A call to {@code unpark} makes the permit\n available, if it was not already available. (Unlike with Semaphores\n though, permits do not accumulate. There is at most one.)\n Reliable usage requires the use of volatile (or atomic) variables\n to control when to park or unpark.  Orderings of calls to these\n methods are maintained with respect to volatile variable accesses,\n but not necessarily non-volatile variable accesses.</p>\n\n<p> <p>Methods {@code park} and {@code unpark} provide efficient\n means of blocking and unblocking threads that do not encounter the\n problems that cause the deprecated methods {@code Thread.suspend}\n and {@code Thread.resume} to be unusable for such purposes: Races\n between one thread invoking {@code park} and another thread trying\n to {@code unpark} it will preserve liveness, due to the\n permit. Additionally, {@code park} will return if the caller's\n thread was interrupted, and timeout versions are supported. The\n {@code park} method may also return at any other time, for \"no\n reason\", so in general must be invoked within a loop that rechecks\n conditions upon return. In this sense {@code park} serves as an\n optimization of a \"busy wait\" that does not waste as much time\n spinning, but must be paired with an {@code unpark} to be\n effective.</p>\n\n<p> <p>The three forms of {@code park} each also support a\n {@code blocker} object parameter. This object is recorded while\n the thread is blocked to permit monitoring and diagnostic tools to\n identify the reasons that threads are blocked. (Such tools may\n access blockers using method <a href=\"#!/api/java.util.concurrent.locks.LockSupport-method-getBlocker\" rel=\"java.util.concurrent.locks.LockSupport-method-getBlocker\" class=\"docClass\">getBlocker</a>(Thread).)\n The use of these forms rather than the original forms without this\n parameter is strongly encouraged. The normal argument to supply as\n a {@code blocker} within a lock implementation is {@code this}.</p>\n\n<p> <p>These methods are designed to be used as tools for creating\n higher-level synchronization utilities, and are not in themselves\n useful for most concurrency control applications.  The {@code park}\n method is designed for use only in constructions of the form:</p>\n\n<p> <pre> {@code\n while (!canProceed()) {\n   // ensure request to unpark is visible to other threads\n   ...\n   LockSupport.park(this);\n }}</pre></p>\n\n<p> where no actions by the thread publishing a request to unpark,\n prior to the call to {@code park}, entail locking or blocking.\n Because only one permit is associated with each thread, any\n intermediary uses of {@code park}, including implicitly via class\n loading, could lead to an unresponsive thread (a \"lost unpark\").</p>\n\n<p> <p><b>Sample Usage.</b> Here is a sketch of a first-in-first-out\n non-reentrant lock class:\n <pre> {@code\n class FIFOMutex {\n   private final AtomicBoolean locked = new AtomicBoolean(false);\n   private final Queue<Thread> waiters\n     = new ConcurrentLinkedQueue&lt;>();</Thread></pre></p>\n\n<p>   public void lock() {\n     boolean wasInterrupted = false;\n     // publish current thread for unparkers\n     waiters.add(Thread.currentThread());</p>\n\n<pre><code> // Block while not first in queue or cannot acquire lock\n while (waiters.peek() != Thread.currentThread() ||\n        !locked.compareAndSet(false, true)) {\n   LockSupport.park(this);\n   // ignore interrupts while waiting\n   if (Thread.interrupted())\n     wasInterrupted = true;\n }\n\n waiters.remove();\n // ensure correct interrupt status on return\n if (wasInterrupted)\n   Thread.currentThread().interrupt();\n</code></pre>\n\n<p>   }</p>\n\n<p>   public void unlock() {\n     locked.set(false);\n     LockSupport.unpark(waiters.peek());\n   }</p>\n\n<p>   static {\n     // Reduce the risk of \"lost unpark\" due to classloading\n     Class&lt;?> ensureLoaded = LockSupport.class;\n   }\n }}</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getBlocker' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.LockSupport'>java.util.concurrent.locks.LockSupport</span><br/><a href='source/LockSupport.html#java-util-concurrent-locks-LockSupport-method-getBlocker' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.LockSupport-method-getBlocker' class='name expandable'>getBlocker</a>( <span class='pre'>t</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the blocker object supplied to the most recent\n invocation of a park method that has not yet unblocked, or nu...</div><div class='long'><p>Returns the blocker object supplied to the most recent\n invocation of a park method that has not yet unblocked, or null\n if not blocked.  The value returned is just a momentary\n snapshot -- the thread may have since unblocked or blocked on a\n different blocker object.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>t</span> : Object {Thread}<div class='sub-desc'><p>the thread</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the blocker</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if argument is null</p>\n</div></li></ul></div></div></div><div id='method-park' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.LockSupport'>java.util.concurrent.locks.LockSupport</span><br/><a href='source/LockSupport.html#java-util-concurrent-locks-LockSupport-method-park' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.LockSupport-method-park' class='name expandable'>park</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Disables the current thread for thread scheduling purposes unless the\n permit is available. ...</div><div class='long'><p>Disables the current thread for thread scheduling purposes unless the\n permit is available.</p>\n\n<p> <p>If the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of three\n things happens:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>Some other thread invokes <a href=\"#!/api/java.util.concurrent.locks.LockSupport-method-unpark\" rel=\"java.util.concurrent.locks.LockSupport-method-unpark\" class=\"docClass\">unpark</a> with the\n current thread as the target; or</li></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or</li></p>\n\n<p> <li>The call spuriously (that is, for no reason) returns.\n </li></p>\n\n<p> <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread upon return.</p>\n</div></div></div><div id='method-parkNanos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.LockSupport'>java.util.concurrent.locks.LockSupport</span><br/><a href='source/LockSupport.html#java-util-concurrent-locks-LockSupport-method-parkNanos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.LockSupport-method-parkNanos' class='name expandable'>parkNanos</a>( <span class='pre'>nanos</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Disables the current thread for thread scheduling purposes, for up to\n the specified waiting time, unless the permit ...</div><div class='long'><p>Disables the current thread for thread scheduling purposes, for up to\n the specified waiting time, unless the permit is available.</p>\n\n<p> <p>If the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:</p>\n\n<p> <ul>\n <li>Some other thread invokes <a href=\"#!/api/java.util.concurrent.locks.LockSupport-method-unpark\" rel=\"java.util.concurrent.locks.LockSupport-method-unpark\" class=\"docClass\">unpark</a> with the\n current thread as the target; or</li></ul></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or</li></p>\n\n<p> <li>The specified waiting time elapses; or</li></p>\n\n<p> <li>The call spuriously (that is, for no reason) returns.\n </li></p>\n\n<p> <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the elapsed time\n upon return.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>nanos</span> : Number<div class='sub-desc'><p>the maximum number of nanoseconds to wait</p>\n</div></li></ul></div></div></div><div id='method-parkUntil' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.LockSupport'>java.util.concurrent.locks.LockSupport</span><br/><a href='source/LockSupport.html#java-util-concurrent-locks-LockSupport-method-parkUntil' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.LockSupport-method-parkUntil' class='name expandable'>parkUntil</a>( <span class='pre'>deadline</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Disables the current thread for thread scheduling purposes, until\n the specified deadline, unless the permit is avail...</div><div class='long'><p>Disables the current thread for thread scheduling purposes, until\n the specified deadline, unless the permit is available.</p>\n\n<p> <p>If the permit is available then it is consumed and the call\n returns immediately; otherwise the current thread becomes disabled\n for thread scheduling purposes and lies dormant until one of four\n things happens:</p>\n\n<p> <ul>\n <li>Some other thread invokes <a href=\"#!/api/java.util.concurrent.locks.LockSupport-method-unpark\" rel=\"java.util.concurrent.locks.LockSupport-method-unpark\" class=\"docClass\">unpark</a> with the\n current thread as the target; or</li></ul></p>\n\n<p> <li>Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or</li></p>\n\n<p> <li>The specified deadline passes; or</li></p>\n\n<p> <li>The call spuriously (that is, for no reason) returns.\n </li></p>\n\n<p> <p>This method does <em>not</em> report which of these caused the\n method to return. Callers should re-check the conditions which caused\n the thread to park in the first place. Callers may also determine,\n for example, the interrupt status of the thread, or the current time\n upon return.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>deadline</span> : Number<div class='sub-desc'><p>the absolute time, in milliseconds from the Epoch,\n        to wait until</p>\n</div></li></ul></div></div></div><div id='method-unpark' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.locks.LockSupport'>java.util.concurrent.locks.LockSupport</span><br/><a href='source/LockSupport.html#java-util-concurrent-locks-LockSupport-method-unpark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.locks.LockSupport-method-unpark' class='name expandable'>unpark</a>( <span class='pre'>thread</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Makes available the permit for the given thread, if it\n was not already available. ...</div><div class='long'><p>Makes available the permit for the given thread, if it\n was not already available.  If the thread was blocked on\n {@code park} then it will unblock.  Otherwise, its next call\n to {@code park} is guaranteed not to block. This operation\n is not guaranteed to have any effect at all if the given\n thread has not been started.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>thread</span> : Object {Thread}<div class='sub-desc'><p>the thread to unpark, or {@code null}, in which case\n        this operation has no effect</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});