Ext.data.JsonP.java_net_URLStreamHandler({"tagname":"class","name":"java.net.URLStreamHandler","autodetected":{},"files":[{"filename":"URLStreamHandler.js","href":"URLStreamHandler.html#java-net-URLStreamHandler"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"James Gosling","email":null}],"since":"JDK1.0","members":[],"alternateClassNames":[],"aliases":{},"id":"class-java.net.URLStreamHandler","short_doc":"The abstract class {@code URLStreamHandler} is the common\n superclass for all stream protocol handlers. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.net.URLStreamHandler</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/URLStreamHandler.html#java-net-URLStreamHandler' target='_blank'>URLStreamHandler.js</a></div></pre><div class='doc-contents'><p>The abstract class {@code URLStreamHandler} is the common\n superclass for all stream protocol handlers. A stream protocol\n handler knows how to make a connection for a particular protocol\n type, such as {@code http} or {@code https}.\n <p>\n In most cases, an instance of a {@code URLStreamHandler}\n subclass is not created directly by an application. Rather, the\n first time a protocol name is encountered when constructing a\n {@code URL}, the appropriate stream protocol handler is\n automatically loaded.</p>\n\n<p> @see     java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)</p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'></div></div>","meta":{}});