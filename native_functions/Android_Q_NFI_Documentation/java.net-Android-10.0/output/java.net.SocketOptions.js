Ext.data.JsonP.java_net_SocketOptions({"tagname":"class","name":"java.net.SocketOptions","autodetected":{},"files":[{"filename":"SocketOptions.js","href":"SocketOptions.html#java-net-SocketOptions"}],"author":[{"tagname":"author","name":"David Brown","email":null}],"members":[{"name":"IP_MULTICAST_IF","tagname":"property","owner":"java.net.SocketOptions","id":"property-IP_MULTICAST_IF","meta":{}},{"name":"IP_MULTICAST_IF2","tagname":"property","owner":"java.net.SocketOptions","id":"property-IP_MULTICAST_IF2","meta":{}},{"name":"IP_MULTICAST_LOOP","tagname":"property","owner":"java.net.SocketOptions","id":"property-IP_MULTICAST_LOOP","meta":{}},{"name":"IP_TOS","tagname":"property","owner":"java.net.SocketOptions","id":"property-IP_TOS","meta":{}},{"name":"SO_BINDADDR","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_BINDADDR","meta":{}},{"name":"SO_BROADCAST","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_BROADCAST","meta":{}},{"name":"SO_KEEPALIVE","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_KEEPALIVE","meta":{}},{"name":"SO_LINGER","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_LINGER","meta":{}},{"name":"SO_OOBINLINE","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_OOBINLINE","meta":{}},{"name":"SO_RCVBUF","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_RCVBUF","meta":{}},{"name":"SO_REUSEADDR","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_REUSEADDR","meta":{}},{"name":"SO_SNDBUF","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_SNDBUF","meta":{}},{"name":"SO_TIMEOUT","tagname":"property","owner":"java.net.SocketOptions","id":"property-SO_TIMEOUT","meta":{}},{"name":"TCP_NODELAY","tagname":"property","owner":"java.net.SocketOptions","id":"property-TCP_NODELAY","meta":{}},{"name":"getOption","tagname":"method","owner":"java.net.SocketOptions","id":"method-getOption","meta":{}},{"name":"setOption","tagname":"method","owner":"java.net.SocketOptions","id":"method-setOption","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.net.SocketOptions","short_doc":"Interface of methods to get/set socket options. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/SocketOptions.html#java-net-SocketOptions' target='_blank'>SocketOptions.js</a></div></pre><div class='doc-contents'><p>Interface of methods to get/set socket options.  This interface is\n implemented by: <B>SocketImpl</B> and  <B>DatagramSocketImpl</B>.\n Subclasses of these should override the methods\n of this interface in order to support their own options.\n <P>\n The methods and constants which specify options in this interface are\n for implementation only.  If you're not subclassing SocketImpl or\n DatagramSocketImpl, <B>you won't use these directly.</B> There are\n type-safe methods to get/set each of these options in Socket, ServerSocket,\n DatagramSocket and MulticastSocket.\n <P></P></P></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-IP_MULTICAST_IF' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-IP_MULTICAST_IF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-IP_MULTICAST_IF' class='name expandable'>IP_MULTICAST_IF</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Set which outgoing interface on which to send multicast packets. ...</div><div class='long'><p>Set which outgoing interface on which to send multicast packets.\n Useful on hosts with multiple network interfaces, where applications\n want to use other than the system default.  Takes/returns an InetAddress.\n <P>\n Valid for Multicast: DatagramSocketImpl</P></p>\n\n<p> @see MulticastSocket#setInterface(InetAddress)\n @see MulticastSocket#getInterface()</p>\n<p>Defaults to: <code>&quot;16&quot;</code></p></div></div></div><div id='property-IP_MULTICAST_IF2' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-IP_MULTICAST_IF2' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-IP_MULTICAST_IF2' class='name expandable'>IP_MULTICAST_IF2</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Same as above. ...</div><div class='long'><p>Same as above. This option is introduced so that the behaviour\n  with IP_MULTICAST_IF will be kept the same as before, while\n  this new option can support setting outgoing interfaces with either\n  IPv4 and IPv6 addresses.</p>\n\n<p>  NOTE: make sure there is no conflict with this\n @see MulticastSocket#setNetworkInterface(NetworkInterface)\n @see MulticastSocket#getNetworkInterface()</p>\n<p>Defaults to: <code>&quot;31&quot;</code></p>        <p>Available since: <b>1.4</b></p>\n</div></div></div><div id='property-IP_MULTICAST_LOOP' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-IP_MULTICAST_LOOP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-IP_MULTICAST_LOOP' class='name expandable'>IP_MULTICAST_LOOP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This option enables or disables local loopback of multicast datagrams. ...</div><div class='long'><p>This option enables or disables local loopback of multicast datagrams.\nThis option is enabled by default for Multicast Sockets.</p>\n<p>Defaults to: <code>&quot;18&quot;</code></p>        <p>Available since: <b>1.4</b></p>\n</div></div></div><div id='property-IP_TOS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-IP_TOS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-IP_TOS' class='name expandable'>IP_TOS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This option sets the type-of-service or traffic class field\nin the IP header for a TCP or UDP socket. ...</div><div class='long'><p>This option sets the type-of-service or traffic class field\nin the IP header for a TCP or UDP socket.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p>        <p>Available since: <b>1.4</b></p>\n</div></div></div><div id='property-SO_BINDADDR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_BINDADDR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_BINDADDR' class='name expandable'>SO_BINDADDR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Fetch the local address binding of a socket (this option cannot\nbe \"set\" only \"gotten\", since sockets are bound at cr...</div><div class='long'><p>Fetch the local address binding of a socket (this option cannot\nbe \"set\" only \"gotten\", since sockets are bound at creation time,\nand so the locally bound address cannot be changed).  The default local\naddress of a socket is INADDR_ANY, meaning any local address on a\nmulti-homed host.  A multi-homed host can use this option to accept\nconnections to only one of its addresses (in the case of a\nServerSocket or DatagramSocket), or to specify its return address\nto the peer (for a Socket or DatagramSocket).  The parameter of\nthis option is an InetAddress.</p>\n\n<p><P>\nThis option <B>must</B> be specified in the constructor.\n<P>\nValid for: SocketImpl, DatagramSocketImpl</P></P></p>\n\n<p>@see Socket#getLocalAddress\n@see DatagramSocket#getLocalAddress</p>\n<p>Defaults to: <code>&quot;15&quot;</code></p></div></div></div><div id='property-SO_BROADCAST' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_BROADCAST' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_BROADCAST' class='name expandable'>SO_BROADCAST</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets SO_BROADCAST for a socket. ...</div><div class='long'><p>Sets SO_BROADCAST for a socket. This option enables and disables\nthe ability of the process to send broadcast messages. It is supported\nfor only datagram sockets and only on networks that support\nthe concept of a broadcast message (e.g. Ethernet, token ring, etc.),\nand it is set by default for DatagramSockets.</p>\n<p>Defaults to: <code>&quot;32&quot;</code></p>        <p>Available since: <b>1.4</b></p>\n</div></div></div><div id='property-SO_KEEPALIVE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_KEEPALIVE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_KEEPALIVE' class='name expandable'>SO_KEEPALIVE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When the keepalive option is set for a TCP socket and no data\nhas been exchanged across the socket in either directio...</div><div class='long'><p>When the keepalive option is set for a TCP socket and no data\nhas been exchanged across the socket in either direction for\n2 hours (NOTE: the actual value is implementation dependent),\nTCP automatically sends a keepalive probe to the peer. This probe is a\nTCP segment to which the peer must respond.\nOne of three responses is expected:\n1. The peer responds with the expected ACK. The application is not\n   notified (since everything is OK). TCP will send another probe\n   following another 2 hours of inactivity.\n2. The peer responds with an RST, which tells the local TCP that\n   the peer host has crashed and rebooted. The socket is closed.\n3. There is no response from the peer. The socket is closed.</p>\n\n<p>The purpose of this option is to detect if the peer host crashes.</p>\n\n<p>Valid only for TCP socket: SocketImpl</p>\n\n<p>@see Socket#setKeepAlive\n@see Socket#getKeepAlive</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div><div id='property-SO_LINGER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_LINGER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_LINGER' class='name expandable'>SO_LINGER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Specify a linger-on-close timeout. ...</div><div class='long'><p>Specify a linger-on-close timeout.  This option disables/enables\nimmediate return from a <B>close()</B> of a TCP Socket.  Enabling\nthis option with a non-zero Integer <I>timeout</I> means that a\n<B>close()</B> will block pending the transmission and acknowledgement\nof all data written to the peer, at which point the socket is closed\n<I>gracefully</I>.  Upon reaching the linger timeout, the socket is\nclosed <I>forcefully</I>, with a TCP RST. Enabling the option with a\ntimeout of zero does a forceful close immediately. If the specified\ntimeout value exceeds 65,535 it will be reduced to 65,535.</p>\n\n<p><P>\nValid only for TCP: SocketImpl</P></p>\n\n<p>@see Socket#setSoLinger\n@see Socket#getSoLinger</p>\n<p>Defaults to: <code>&quot;128&quot;</code></p></div></div></div><div id='property-SO_OOBINLINE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_OOBINLINE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_OOBINLINE' class='name expandable'>SO_OOBINLINE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When the OOBINLINE option is set, any TCP urgent data received on\nthe socket will be received through the socket inpu...</div><div class='long'><p>When the OOBINLINE option is set, any TCP urgent data received on\nthe socket will be received through the socket input stream.\nWhen the option is disabled (which is the default) urgent data\nis silently discarded.</p>\n\n<p>@see Socket#setOOBInline\n@see Socket#getOOBInline</p>\n<p>Defaults to: <code>&quot;4099&quot;</code></p></div></div></div><div id='property-SO_RCVBUF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_RCVBUF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_RCVBUF' class='name expandable'>SO_RCVBUF</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a hint the size of the underlying buffers used by the\nplatform for incoming network I/O. ...</div><div class='long'><p>Set a hint the size of the underlying buffers used by the\nplatform for incoming network I/O. When used in set, this is a\nsuggestion to the kernel from the application about the size of\nbuffers to use for the data to be received over the\nsocket. When used in get, this must return the size of the\nbuffer actually used by the platform when receiving in data on\nthis socket.</p>\n\n<p>Valid for all sockets: SocketImpl, DatagramSocketImpl</p>\n\n<p>@see Socket#setReceiveBufferSize\n@see Socket#getReceiveBufferSize\n@see DatagramSocket#setReceiveBufferSize\n@see DatagramSocket#getReceiveBufferSize</p>\n<p>Defaults to: <code>&quot;4098&quot;</code></p></div></div></div><div id='property-SO_REUSEADDR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_REUSEADDR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_REUSEADDR' class='name expandable'>SO_REUSEADDR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets SO_REUSEADDR for a socket. ...</div><div class='long'><p>Sets SO_REUSEADDR for a socket.  This is used only for MulticastSockets\n in java, and it is set by default for MulticastSockets.\n <P>\n Valid for: DatagramSocketImpl</P></p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-SO_SNDBUF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_SNDBUF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_SNDBUF' class='name expandable'>SO_SNDBUF</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a hint the size of the underlying buffers used by the\nplatform for outgoing network I/O. ...</div><div class='long'><p>Set a hint the size of the underlying buffers used by the\nplatform for outgoing network I/O. When used in set, this is a\nsuggestion to the kernel from the application about the size of\nbuffers to use for the data to be sent over the socket. When\nused in get, this must return the size of the buffer actually\nused by the platform when sending out data on this socket.</p>\n\n<p>Valid for all sockets: SocketImpl, DatagramSocketImpl</p>\n\n<p>@see Socket#setSendBufferSize\n@see Socket#getSendBufferSize\n@see DatagramSocket#setSendBufferSize\n@see DatagramSocket#getSendBufferSize</p>\n<p>Defaults to: <code>&quot;4097&quot;</code></p></div></div></div><div id='property-SO_TIMEOUT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-SO_TIMEOUT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-SO_TIMEOUT' class='name expandable'>SO_TIMEOUT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a timeout on blocking Socket operations:\n \n ServerSocket.accept();\n SocketInputStream.read();\n DatagramSocket.rec...</div><div class='long'><p>Set a timeout on blocking Socket operations:\n <PRE>\n ServerSocket.accept();\n SocketInputStream.read();\n DatagramSocket.receive();\n </PRE></p>\n\n<p> <P> The option must be set prior to entering a blocking\n operation to take effect.  If the timeout expires and the\n operation would continue to block,\n <B>java.io.InterruptedIOException</B> is raised.  The Socket is\n not closed in this case.</P></p>\n\n<p> <P> Valid for all sockets: SocketImpl, DatagramSocketImpl</P></p>\n\n<p> @see Socket#setSoTimeout\n @see ServerSocket#setSoTimeout\n @see DatagramSocket#setSoTimeout</p>\n<p>Defaults to: <code>&quot;4102&quot;</code></p></div></div></div><div id='property-TCP_NODELAY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-property-TCP_NODELAY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-property-TCP_NODELAY' class='name expandable'>TCP_NODELAY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable Nagle's algorithm for this connection. ...</div><div class='long'><p>Disable Nagle's algorithm for this connection.  Written data\nto the network is not buffered pending acknowledgement of\npreviously written data.</p>\n\n<p><P>\nValid for TCP only: SocketImpl.</P></p>\n\n<p>@see Socket#setTcpNoDelay\n@see Socket#getTcpNoDelay</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getOption' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-method-getOption' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-method-getOption' class='name expandable'>getOption</a>( <span class='pre'>optID</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Fetch the value of an option. ...</div><div class='long'><p>Fetch the value of an option.\n Binary options will return java.lang.Boolean(true)\n if enabled, java.lang.Boolean(false) if disabled, e.g.:\n <BR><PRE>\n SocketImpl s;\n ...\n Boolean noDelay = (Boolean)(s.getOption(TCP_NODELAY));\n if (noDelay.booleanValue()) {\n     // true if TCP_NODELAY is enabled...\n ...\n }\n </PRE>\n <P>\n For options that take a particular type as a parameter,\n getOption(int) will return the parameter's value, else\n it will return java.lang.Boolean(false):\n <PRE>\n Object o = s.getOption(SO_LINGER);\n if (o instanceof Integer) {\n     System.out.print(\"Linger time is \" + ((Integer)o).intValue());\n } else {\n   // the true type of o is java.lang.Boolean(false);\n }\n </PRE></P></BR></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>optID</span> : Number<div class='sub-desc'><p>an {@code int} identifying the option to fetch</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the value of the option</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SocketException if the socket is closed</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SocketException if <I>optID</I> is unknown along the\n         protocol stack (including the SocketImpl)\n@see <a href=\"#!/api/java.net.SocketOptions-method-setOption\" rel=\"java.net.SocketOptions-method-setOption\" class=\"docClass\">setOption</a>(int, java.lang.Object)</p>\n</div></li></ul></div></div></div><div id='method-setOption' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.net.SocketOptions'>java.net.SocketOptions</span><br/><a href='source/SocketOptions.html#java-net-SocketOptions-method-setOption' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.net.SocketOptions-method-setOption' class='name expandable'>setOption</a>( <span class='pre'>optID, value</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable/disable the option specified by optID. ...</div><div class='long'><p>Enable/disable the option specified by <I>optID</I>.  If the option\n is to be enabled, and it takes an option-specific \"value\",  this is\n passed in <I>value</I>.  The actual type of value is option-specific,\n and it is an error to pass something that isn't of the expected type:\n <BR><PRE>\n SocketImpl s;\n ...\n s.setOption(SO_LINGER, new Integer(10));\n    // OK - set SO_LINGER w/ timeout of 10 sec.\n s.setOption(SO_LINGER, new Double(10));\n    // ERROR - expects java.lang.Integer\n</PRE>\n If the requested option is binary, it can be set using this method by\n a java.lang.Boolean:\n <BR><PRE>\n s.setOption(TCP_NODELAY, new Boolean(true));\n    // OK - enables TCP_NODELAY, a binary option\n </PRE>\n <BR>\n Any option can be disabled using this method with a Boolean(false):\n <BR><PRE>\n s.setOption(TCP_NODELAY, new Boolean(false));\n    // OK - disables TCP_NODELAY\n s.setOption(SO_LINGER, new Boolean(false));\n    // OK - disables SO_LINGER\n </PRE>\n <BR>\n For an option that has a notion of on and off, and requires\n a non-boolean parameter, setting its value to anything other than\n <I>Boolean(false)</I> implicitly enables it.\n <BR>\n Throws SocketException if the option is unrecognized,\n the socket is closed, or some low-level error occurred\n <BR></BR></BR></BR></BR></BR></BR></BR></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>optID</span> : Number<div class='sub-desc'><p>identifies the option</p>\n</div></li><li><span class='pre'>value</span> : Object {Object}<div class='sub-desc'><p>the parameter of the socket option</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SocketException if the option is unrecognized,\n the socket is closed, or some low-level error occurred\n@see <a href=\"#!/api/java.net.SocketOptions-method-getOption\" rel=\"java.net.SocketOptions-method-getOption\" class=\"docClass\">getOption</a>(int)</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});