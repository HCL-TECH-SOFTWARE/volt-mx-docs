Ext.data.JsonP.com_android_server_deviceidle_IDeviceIdleConstraint_MinimumState({"tagname":"class","name":"com.android.server.deviceidle.IDeviceIdleConstraint.MinimumState","autodetected":{},"files":[{"filename":"MinimumState.js","href":"MinimumState.html#com-android-server-deviceidle-IDeviceIdleConstraint-MinimumState"}],"members":[],"alternateClassNames":[],"aliases":{},"id":"class-com.android.server.deviceidle.IDeviceIdleConstraint.MinimumState","short_doc":"implements java.lang.annotation.Annotation\n\n A state for this constraint to block descent from. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/MinimumState.html#com-android-server-deviceidle-IDeviceIdleConstraint-MinimumState' target='_blank'>MinimumState.js</a></div></pre><div class='doc-contents'><p>implements java.lang.annotation.Annotation</p>\n\n<p> A state for this constraint to block descent from.</p>\n\n<p> <p>These states are a subset of the states in DeviceIdleController that make sense for\n constraints to be able to block on. For example, SENSING_OR_ABOVE clearly has\n defined \"above\" and \"below\" states. However, a hypothetical {@code QUICK_DOZE_OR_ABOVE}\n state would not have clear semantics as to what transitions should be blocked and which\n should be allowed.</p>\n</div><div class='members'></div></div>","meta":{}});