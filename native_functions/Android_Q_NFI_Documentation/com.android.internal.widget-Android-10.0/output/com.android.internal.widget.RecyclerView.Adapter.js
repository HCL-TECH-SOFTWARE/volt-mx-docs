Ext.data.JsonP.com_android_internal_widget_RecyclerView_Adapter({"tagname":"class","name":"com.android.internal.widget.RecyclerView.Adapter","autodetected":{},"files":[{"filename":"Adapter.js","href":"Adapter.html#com-android-internal-widget-RecyclerView-Adapter"}],"extends":"java.lang.Object","params":[{"tagname":"params","doc":"<p><VH> A class that extends ViewHolder that will be used by the adapter.</VH></p>\n"}],"members":[{"name":"bindViewHolder","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-bindViewHolder","meta":{}},{"name":"createViewHolder","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-createViewHolder","meta":{}},{"name":"getItemCount","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-getItemCount","meta":{}},{"name":"getItemId","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-getItemId","meta":{}},{"name":"getItemViewType","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-getItemViewType","meta":{}},{"name":"hasObservers","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-hasObservers","meta":{}},{"name":"hasStableIds","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-hasStableIds","meta":{}},{"name":"notifyDataSetChanged","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-notifyDataSetChanged","meta":{}},{"name":"notifyItemChanged","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-notifyItemChanged","meta":{}},{"name":"notifyItemInserted","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-notifyItemInserted","meta":{}},{"name":"notifyItemMoved","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-notifyItemMoved","meta":{}},{"name":"notifyItemRangeChanged","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-notifyItemRangeChanged","meta":{}},{"name":"notifyItemRangeInserted","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-notifyItemRangeInserted","meta":{}},{"name":"notifyItemRangeRemoved","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-notifyItemRangeRemoved","meta":{}},{"name":"notifyItemRemoved","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-notifyItemRemoved","meta":{}},{"name":"onAttachedToRecyclerView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-onAttachedToRecyclerView","meta":{}},{"name":"onBindViewHolder","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-onBindViewHolder","meta":{}},{"name":"onCreateViewHolder","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-onCreateViewHolder","meta":{}},{"name":"onDetachedFromRecyclerView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-onDetachedFromRecyclerView","meta":{}},{"name":"onFailedToRecycleView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-onFailedToRecycleView","meta":{}},{"name":"onViewAttachedToWindow","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-onViewAttachedToWindow","meta":{}},{"name":"onViewDetachedFromWindow","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-onViewDetachedFromWindow","meta":{}},{"name":"onViewRecycled","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-onViewRecycled","meta":{}},{"name":"registerAdapterDataObserver","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-registerAdapterDataObserver","meta":{}},{"name":"setHasStableIds","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-setHasStableIds","meta":{}},{"name":"unregisterAdapterDataObserver","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Adapter","id":"method-unregisterAdapterDataObserver","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.widget.RecyclerView.Adapter","short_doc":"Base class for an Adapter\n\n Adapters provide a binding from an app-specific data set to views that are displayed\n wit...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.widget.RecyclerView.Adapter</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter' target='_blank'>Adapter.js</a></div></pre><div class='doc-contents'><p>Base class for an Adapter</p>\n\n<p> <p>Adapters provide a binding from an app-specific data set to views that are displayed\n within a <a href=\"#!/api/com.android.internal.widget.RecyclerView\" rel=\"com.android.internal.widget.RecyclerView\" class=\"docClass\">com.android.internal.widget.RecyclerView</a>.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><VH> A class that extends ViewHolder that will be used by the adapter.</VH></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-bindViewHolder' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-bindViewHolder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-bindViewHolder' class='name expandable'>bindViewHolder</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method internally calls int) to update the\n com.android.internal.widget.RecyclerView.ViewHolder contents with th...</div><div class='long'><p>This method internally calls int) to update the\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolder</a> contents with the item at the given position and also sets up some\n private fields to be used by RecyclerView.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onBindViewHolder\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-onBindViewHolder\" class=\"docClass\">onBindViewHolder</a>(ViewHolder, int)</p>\n</div></div></div><div id='method-createViewHolder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-createViewHolder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-createViewHolder' class='name expandable'>createViewHolder</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method calls int) to create a new\n com.android.internal.widget.RecyclerView.ViewHolder and initializes some priv...</div><div class='long'><p>This method calls int) to create a new\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolder</a> and initializes some private fields to be used by RecyclerView.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onCreateViewHolder\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-onCreateViewHolder\" class=\"docClass\">onCreateViewHolder</a>(ViewGroup, int)</p>\n</div></div></div><div id='method-getItemCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-getItemCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-getItemCount' class='name expandable'>getItemCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the total number of items in the data set held by the adapter. ...</div><div class='long'><p>Returns the total number of items in the data set held by the adapter.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total number of items in this adapter.</p>\n</div></li></ul></div></div></div><div id='method-getItemId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-getItemId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-getItemId' class='name expandable'>getItemId</a>( <span class='pre'>position</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the stable ID for the item at position. ...</div><div class='long'><p>Return the stable ID for the item at <code>position</code>. If <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-hasStableIds\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-hasStableIds\" class=\"docClass\">hasStableIds</a>()\n would return false this method should return NO_ID. The default implementation\n of this method returns NO_ID.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Adapter position to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the stable ID of the item at position</p>\n</div></li></ul></div></div></div><div id='method-getItemViewType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-getItemViewType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-getItemViewType' class='name expandable'>getItemViewType</a>( <span class='pre'>position</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the view type of the item at position for the purposes\n of view recycling. ...</div><div class='long'><p>Return the view type of the item at <code>position</code> for the purposes\n of view recycling.</p>\n\n<p> <p>The default implementation of this method returns 0, making the assumption of\n a single view type for the adapter. Unlike ListView adapters, types need not\n be contiguous. Consider using id resources to uniquely identify item view types.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>position to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>integer value identifying the type of the view needed to represent the item at\n                 <code>position</code>. Type codes need not be contiguous.</p>\n</div></li></ul></div></div></div><div id='method-hasObservers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-hasObservers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-hasObservers' class='name expandable'>hasObservers</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if one or more observers are attached to this adapter. ...</div><div class='long'><p>Returns true if one or more observers are attached to this adapter.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this adapter has observers</p>\n</div></li></ul></div></div></div><div id='method-hasStableIds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-hasStableIds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-hasStableIds' class='name expandable'>hasStableIds</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this adapter publishes a unique long value that can\n act as a key for the item at a given position in...</div><div class='long'><p>Returns true if this adapter publishes a unique <code>long</code> value that can\n act as a key for the item at a given position in the data set. If that item is relocated\n in the data set, the ID returned for that item should be the same.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this adapter's items have stable IDs</p>\n</div></li></ul></div></div></div><div id='method-notifyDataSetChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-notifyDataSetChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyDataSetChanged' class='name expandable'>notifyDataSetChanged</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify any registered observers that the data set has changed. ...</div><div class='long'><p>Notify any registered observers that the data set has changed.</p>\n\n<p> <p>There are two different classes of data change events, item changes and structural\n changes. Item changes are when a single item has its data updated but no positional\n changes have occurred. Structural changes are when items are inserted, removed or moved\n within the data set.</p></p>\n\n<p> <p>This event does not specify what about the data set has changed, forcing\n any observers to assume that all existing items and structure may no longer be valid.\n LayoutManagers will be forced to fully rebind and relayout all visible views.</p></p>\n\n<p> <p><code>RecyclerView</code> will attempt to synthesize visible structural change events\n for adapters that report that they have stable IDs when\n this method is used. This can help for the purposes of animation and visual\n object persistence but individual item views will still need to be rebound\n and relaid out.</p></p>\n\n<p> <p>If you are writing an adapter it will always be more efficient to use the more\n specific change events if you can. Rely on <code>notifyDataSetChanged()</code>\n as a last resort.</p>\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemChanged\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemChanged\" class=\"docClass\">notifyItemChanged</a>(int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemInserted\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemInserted\" class=\"docClass\">notifyItemInserted</a>(int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRemoved\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRemoved\" class=\"docClass\">notifyItemRemoved</a>(int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeChanged\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeChanged\" class=\"docClass\">notifyItemRangeChanged</a>(int, int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeInserted\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeInserted\" class=\"docClass\">notifyItemRangeInserted</a>(int, int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeRemoved\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeRemoved\" class=\"docClass\">notifyItemRangeRemoved</a>(int, int)</p>\n</div></div></div><div id='method-notifyItemChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-notifyItemChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemChanged' class='name expandable'>notifyItemChanged</a>( <span class='pre'>position, payload</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify any registered observers that the item at position has changed with\n an optional payload object. ...</div><div class='long'><p>Notify any registered observers that the item at <code>position</code> has changed with\n an optional payload object.</p>\n\n<p> <p>This is an item change event, not a structural change event. It indicates that any\n reflection of the data at <code>position</code> is out of date and should be updated.\n The item at <code>position</code> retains the same identity.\n </p></p>\n\n<p> <p>\n Client can optionally pass a payload for partial change. These payloads will be merged\n and may be passed to adapter's int, List) if the\n item is already represented by a ViewHolder and it will be rebound to the same\n ViewHolder. A notifyItemRangeChanged() with null payload will clear all existing\n payloads on that item and prevent future payload until\n int, List) is called. Adapter should not assume\n that the payload will always be passed to onBindViewHolder(), e.g. when the view is not\n attached, the payload will be simply dropped.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Position of the item that has changed</p>\n</div></li><li><span class='pre'>payload</span> : Object {Object}<div class='sub-desc'><p>Optional parameter, use null to identify a \"full\" update\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeChanged\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeChanged\" class=\"docClass\">notifyItemRangeChanged</a>(int, int)</p>\n</div></li></ul></div></div></div><div id='method-notifyItemInserted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-notifyItemInserted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemInserted' class='name expandable'>notifyItemInserted</a>( <span class='pre'>position</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify any registered observers that the item reflected at position\n has been newly inserted. ...</div><div class='long'><p>Notify any registered observers that the item reflected at <code>position</code>\n has been newly inserted. The item previously at <code>position</code> is now at\n position <code>position + 1</code>.</p>\n\n<p> <p>This is a structural change event. Representations of other existing items in the\n data set are still considered up to date and will not be rebound, though their\n positions may be altered.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Position of the newly inserted item in the data set\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeInserted\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeInserted\" class=\"docClass\">notifyItemRangeInserted</a>(int, int)</p>\n</div></li></ul></div></div></div><div id='method-notifyItemMoved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-notifyItemMoved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemMoved' class='name expandable'>notifyItemMoved</a>( <span class='pre'>fromPosition, toPosition</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify any registered observers that the item reflected at fromPosition\n has been moved to toPosition. ...</div><div class='long'><p>Notify any registered observers that the item reflected at <code>fromPosition</code>\n has been moved to <code>toPosition</code>.</p>\n\n<p> <p>This is a structural change event. Representations of other existing items in the\n data set are still considered up to date and will not be rebound, though their\n positions may be altered.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fromPosition</span> : Number<div class='sub-desc'><p>Previous position of the item.</p>\n</div></li><li><span class='pre'>toPosition</span> : Number<div class='sub-desc'><p>New position of the item.</p>\n</div></li></ul></div></div></div><div id='method-notifyItemRangeChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-notifyItemRangeChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeChanged' class='name expandable'>notifyItemRangeChanged</a>( <span class='pre'>positionStart, itemCount, payload</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify any registered observers that the itemCount items starting at\n position positionStart have changed. ...</div><div class='long'><p>Notify any registered observers that the <code>itemCount</code> items starting at\n position <code>positionStart</code> have changed. An optional payload can be\n passed to each changed item.</p>\n\n<p> <p>This is an item change event, not a structural change event. It indicates that any\n reflection of the data in the given position range is out of date and should be updated.\n The items in the given range retain the same identity.\n </p></p>\n\n<p> <p>\n Client can optionally pass a payload for partial change. These payloads will be merged\n and may be passed to adapter's int, List) if the\n item is already represented by a ViewHolder and it will be rebound to the same\n ViewHolder. A notifyItemRangeChanged() with null payload will clear all existing\n payloads on that item and prevent future payload until\n int, List) is called. Adapter should not assume\n that the payload will always be passed to onBindViewHolder(), e.g. when the view is not\n attached, the payload will be simply dropped.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>positionStart</span> : Number<div class='sub-desc'><p>Position of the first item that has changed</p>\n</div></li><li><span class='pre'>itemCount</span> : Number<div class='sub-desc'><p>Number of items that have changed</p>\n</div></li><li><span class='pre'>payload</span> : Object {Object}<div class='sub-desc'><p>Optional parameter, use null to identify a \"full\" update\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemChanged\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemChanged\" class=\"docClass\">notifyItemChanged</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-notifyItemRangeInserted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-notifyItemRangeInserted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeInserted' class='name expandable'>notifyItemRangeInserted</a>( <span class='pre'>positionStart, itemCount</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify any registered observers that the currently reflected itemCount\n items starting at positionStart have been new...</div><div class='long'><p>Notify any registered observers that the currently reflected <code>itemCount</code>\n items starting at <code>positionStart</code> have been newly inserted. The items\n previously located at <code>positionStart</code> and beyond can now be found starting\n at position <code>positionStart + itemCount</code>.</p>\n\n<p> <p>This is a structural change event. Representations of other existing items in the\n data set are still considered up to date and will not be rebound, though their positions\n may be altered.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>positionStart</span> : Number<div class='sub-desc'><p>Position of the first item that was inserted</p>\n</div></li><li><span class='pre'>itemCount</span> : Number<div class='sub-desc'><p>Number of items inserted\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemInserted\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemInserted\" class=\"docClass\">notifyItemInserted</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-notifyItemRangeRemoved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-notifyItemRangeRemoved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeRemoved' class='name expandable'>notifyItemRangeRemoved</a>( <span class='pre'>positionStart, itemCount</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify any registered observers that the itemCount items previously\n located at positionStart have been removed from ...</div><div class='long'><p>Notify any registered observers that the <code>itemCount</code> items previously\n located at <code>positionStart</code> have been removed from the data set. The items\n previously located at and after <code>positionStart + itemCount</code> may now be found\n at <code>oldPosition - itemCount</code>.</p>\n\n<p> <p>This is a structural change event. Representations of other existing items in the data\n set are still considered up to date and will not be rebound, though their positions\n may be altered.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>positionStart</span> : Number<div class='sub-desc'><p>Previous position of the first item that was removed</p>\n</div></li><li><span class='pre'>itemCount</span> : Number<div class='sub-desc'><p>Number of items removed from the data set</p>\n</div></li></ul></div></div></div><div id='method-notifyItemRemoved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-notifyItemRemoved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRemoved' class='name expandable'>notifyItemRemoved</a>( <span class='pre'>position</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Notify any registered observers that the item previously located at position\n has been removed from the data set. ...</div><div class='long'><p>Notify any registered observers that the item previously located at <code>position</code>\n has been removed from the data set. The items previously located at and after\n <code>position</code> may now be found at <code>oldPosition - 1</code>.</p>\n\n<p> <p>This is a structural change event. Representations of other existing items in the\n data set are still considered up to date and will not be rebound, though their positions\n may be altered.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Position of the item that has now been removed\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeRemoved\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemRangeRemoved\" class=\"docClass\">notifyItemRangeRemoved</a>(int, int)</p>\n</div></li></ul></div></div></div><div id='method-onAttachedToRecyclerView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-onAttachedToRecyclerView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onAttachedToRecyclerView' class='name expandable'>onAttachedToRecyclerView</a>( <span class='pre'>recyclerView</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by RecyclerView when it starts observing this Adapter. ...</div><div class='long'><p>Called by RecyclerView when it starts observing this Adapter.\n <p>\n Keep in mind that same adapter may be observed by multiple RecyclerViews.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView instance which started observing this adapter.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onDetachedFromRecyclerView\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-onDetachedFromRecyclerView\" class=\"docClass\">onDetachedFromRecyclerView</a>(RecyclerView)</p>\n</div></li></ul></div></div></div><div id='method-onBindViewHolder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-onBindViewHolder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onBindViewHolder' class='name expandable'>onBindViewHolder</a>( <span class='pre'>holder, position, payloads</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by RecyclerView to display the data at the specified position. ...</div><div class='long'><p>Called by RecyclerView to display the data at the specified position. This method\n should update the contents of the <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-property-itemView\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-property-itemView\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolder.itemView</a> to reflect the item at\n the given position.\n <p>\n Note that unlike android.widget.ListView, RecyclerView will not call this method\n again if the position of the item changes in the data set unless the item itself is\n invalidated or the new position cannot be determined. For this reason, you should only\n use the <code>position</code> parameter while acquiring the related data item inside\n this method and should not keep a copy of it. If you need the position of an item later\n on (e.g. in a click listener), use com.android.internal.widget.RecyclerView.ViewHolder.getAdapterPosition() which will\n have the updated adapter position.\n <p>\n Partial bind vs full bind:\n <p>\n The payloads parameter is a merge list from Object) or\n int, Object).  If the payloads list is not empty,\n the ViewHolder is currently bound to old data and Adapter may run an efficient partial\n update using the payload info.  If the payload is empty,  Adapter must run a full bind.\n Adapter should not assume that the payload passed in notify methods will be received by\n onBindViewHolder().  For example when the view is not attached to the screen, the\n payload in notifyItemChange() will be simply dropped.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>holder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which should be updated to represent the contents of the\n               item at the given position in the data set.</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The position of the item within the adapter's data set.</p>\n</div></li><li><span class='pre'>payloads</span> : Object {java.util.List}<div class='sub-desc'><p>A non-null list of merged payloads. Can be empty list if requires full\n                 update.</p>\n</div></li></ul></div></div></div><div id='method-onCreateViewHolder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-onCreateViewHolder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onCreateViewHolder' class='name expandable'>onCreateViewHolder</a>( <span class='pre'>parent, viewType</span> ) : Object {com.android.internal.widget.RecyclerView.ViewHolder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when RecyclerView needs a new com.android.internal.widget.RecyclerView.ViewHolder of the given type to represe...</div><div class='long'><p>Called when RecyclerView needs a new <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolder</a> of the given type to represent\n an item.\n <p>\n This new ViewHolder should be constructed with a new View that can represent the items\n of the given type. You can either create a new View manually or inflate it from an XML\n layout file.\n <p>\n The new ViewHolder will be used to display items of the adapter using\n int, List). Since it will be re-used to display\n different items in the data set, it is a good idea to cache references to sub views of\n the View to avoid unnecessary View.findViewById(int) calls.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parent</span> : Object {ViewGroup}<div class='sub-desc'><p>The ViewGroup into which the new View will be added after it is bound to\n               an adapter position.</p>\n</div></li><li><span class='pre'>viewType</span> : Number<div class='sub-desc'><p>The view type of the new View.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ViewHolder}</span><div class='sub-desc'><p>A new ViewHolder that holds a View of the given view type.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-getItemViewType\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-getItemViewType\" class=\"docClass\">getItemViewType</a>(int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onBindViewHolder\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-onBindViewHolder\" class=\"docClass\">onBindViewHolder</a>(ViewHolder, int)</p>\n</div></li></ul></div></div></div><div id='method-onDetachedFromRecyclerView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-onDetachedFromRecyclerView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onDetachedFromRecyclerView' class='name expandable'>onDetachedFromRecyclerView</a>( <span class='pre'>recyclerView</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by RecyclerView when it stops observing this Adapter. ...</div><div class='long'><p>Called by RecyclerView when it stops observing this Adapter.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView instance which stopped observing this adapter.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onAttachedToRecyclerView\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-onAttachedToRecyclerView\" class=\"docClass\">onAttachedToRecyclerView</a>(RecyclerView)</p>\n</div></li></ul></div></div></div><div id='method-onFailedToRecycleView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-onFailedToRecycleView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onFailedToRecycleView' class='name expandable'>onFailedToRecycleView</a>( <span class='pre'>holder</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the RecyclerView if a ViewHolder created by this Adapter cannot be recycled\n due to its transient state. ...</div><div class='long'><p>Called by the RecyclerView if a ViewHolder created by this Adapter cannot be recycled\n due to its transient state. Upon receiving this callback, Adapter can clear the\n animation(s) that effect the View's transient state and return <code>true</code> so that\n the View can be recycled. Keep in mind that the View in question is already removed from\n the RecyclerView.\n <p>\n In some cases, it is acceptable to recycle a View although it has transient state. Most\n of the time, this is a case where the transient state will be cleared in\n int) call when View is rebound to a new position.\n For this reason, RecyclerView leaves the decision to the Adapter and uses the return\n value of this method to decide whether the View should be recycled or not.\n <p>\n Note that when all animations are created by <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemAnimator</a>, you\n should never receive this callback because RecyclerView keeps those Views as children\n until their animations are complete. This callback is useful when children of the item\n views create animations which may not be easy to implement using an <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemAnimator</a>.\n <p>\n You should <em>never</em> fix this issue by calling\n <code>holder.itemView.setHasTransientState(false);</code> unless you've previously called\n <code>holder.itemView.setHasTransientState(true);</code>. Each\n <code>View.setHasTransientState(true)</code> call must be matched by a\n <code>View.setHasTransientState(false)</code> call, otherwise, the state of the View\n may become inconsistent. You should always prefer to end or cancel animations that are\n triggering the transient state instead of handling it manually.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>holder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder containing the View that could not be recycled due to its\n               transient state.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the View should be recycled, false otherwise. Note that if this method\n returns <code>true</code>, RecyclerView <em>will ignore</em> the transient state of\n the View and recycle it regardless. If this method returns <code>false</code>,\n RecyclerView will check the View's transient state again before giving a final decision.\n Default implementation returns false.</p>\n</div></li></ul></div></div></div><div id='method-onViewAttachedToWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-onViewAttachedToWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onViewAttachedToWindow' class='name expandable'>onViewAttachedToWindow</a>( <span class='pre'>holder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a view created by this adapter has been attached to a window. ...</div><div class='long'><p>Called when a view created by this adapter has been attached to a window.</p>\n\n<p> <p>This can be used as a reasonable signal that the view is about to be seen\n by the user. If the adapter previously freed any resources in\n onViewDetachedFromWindow\n those resources should be restored here.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>holder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>Holder of the view being attached</p>\n</div></li></ul></div></div></div><div id='method-onViewDetachedFromWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-onViewDetachedFromWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onViewDetachedFromWindow' class='name expandable'>onViewDetachedFromWindow</a>( <span class='pre'>holder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a view created by this adapter has been detached from its window. ...</div><div class='long'><p>Called when a view created by this adapter has been detached from its window.</p>\n\n<p> <p>Becoming detached from the window is not necessarily a permanent condition;\n the consumer of an Adapter's views may choose to cache views offscreen while they\n are not visible, attaching and detaching them as appropriate.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>holder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>Holder of the view being detached</p>\n</div></li></ul></div></div></div><div id='method-onViewRecycled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-onViewRecycled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-onViewRecycled' class='name expandable'>onViewRecycled</a>( <span class='pre'>holder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a view created by this adapter has been recycled. ...</div><div class='long'><p>Called when a view created by this adapter has been recycled.</p>\n\n<p> <p>A view is recycled when a <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> decides that it no longer\n needs to be attached to its parent <a href=\"#!/api/com.android.internal.widget.RecyclerView\" rel=\"com.android.internal.widget.RecyclerView\" class=\"docClass\">com.android.internal.widget.RecyclerView</a>. This can be because it has\n fallen out of visibility or a set of cached views represented by views still\n attached to the parent RecyclerView. If an item view has large or expensive data\n bound to it such as large bitmaps, this may be a good place to release those\n resources.</p>\n <p>\n RecyclerView calls this method right before clearing ViewHolder's internal data and\n sending it to RecycledViewPool. This way, if ViewHolder was holding valid information\n before being recycled, you can call com.android.internal.widget.RecyclerView.ViewHolder.getAdapterPosition() to get\n its adapter position.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>holder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder for the view being recycled</p>\n</div></li></ul></div></div></div><div id='method-registerAdapterDataObserver' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-registerAdapterDataObserver' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-registerAdapterDataObserver' class='name expandable'>registerAdapterDataObserver</a>( <span class='pre'>observer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a new observer to listen for data changes. ...</div><div class='long'><p>Register a new observer to listen for data changes.</p>\n\n<p> <p>The adapter may publish a variety of events describing specific changes.\n Not all adapters may support all change types and some may fall back to a generic\n \"something changed\" event if more specific data is not available.</p></p>\n\n<p> <p>Components registering observers with an adapter are responsible for\n unregistering those observers when finished.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>observer</span> : Object {RecyclerView.AdapterDataObserver}<div class='sub-desc'><p>Observer to register\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-unregisterAdapterDataObserver\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-unregisterAdapterDataObserver\" class=\"docClass\">unregisterAdapterDataObserver</a>(RecyclerView.AdapterDataObserver)</p>\n</div></li></ul></div></div></div><div id='method-setHasStableIds' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-setHasStableIds' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-setHasStableIds' class='name expandable'>setHasStableIds</a>( <span class='pre'>hasStableIds</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Indicates whether each item in the data set can be represented with a unique identifier\n of type java.lang.Long. ...</div><div class='long'><p>Indicates whether each item in the data set can be represented with a unique identifier\n of type java.lang.Long.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hasStableIds</span> : Boolean<div class='sub-desc'><p>Whether items in data set have unique identifiers or not.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-hasStableIds\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-hasStableIds\" class=\"docClass\">hasStableIds</a>()\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-getItemId\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-getItemId\" class=\"docClass\">getItemId</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-unregisterAdapterDataObserver' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Adapter'>com.android.internal.widget.RecyclerView.Adapter</span><br/><a href='source/Adapter.html#com-android-internal-widget-RecyclerView-Adapter-method-unregisterAdapterDataObserver' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Adapter-method-unregisterAdapterDataObserver' class='name expandable'>unregisterAdapterDataObserver</a>( <span class='pre'>observer</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Unregister an observer currently listening for data changes. ...</div><div class='long'><p>Unregister an observer currently listening for data changes.</p>\n\n<p> <p>The unregistered observer will no longer receive events about changes\n to the adapter.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>observer</span> : Object {RecyclerView.AdapterDataObserver}<div class='sub-desc'><p>Observer to unregister\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-registerAdapterDataObserver\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-registerAdapterDataObserver\" class=\"docClass\">registerAdapterDataObserver</a>(RecyclerView.AdapterDataObserver)</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});