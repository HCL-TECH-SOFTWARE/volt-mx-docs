Ext.data.JsonP.com_android_internal_widget_RecyclerView_LayoutManager({"tagname":"class","name":"com.android.internal.widget.RecyclerView.LayoutManager","autodetected":{},"files":[{"filename":"LayoutManager.js","href":"LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager"}],"extends":"java.lang.Object","members":[{"name":"addDisappearingView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-addDisappearingView","meta":{}},{"name":"addView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-addView","meta":{}},{"name":"assertInLayoutOrScroll","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-assertInLayoutOrScroll","meta":{}},{"name":"assertNotInLayoutOrScroll","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-assertNotInLayoutOrScroll","meta":{}},{"name":"attachView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-attachView","meta":{}},{"name":"calculateItemDecorationsForChild","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-calculateItemDecorationsForChild","meta":{}},{"name":"canScrollHorizontally","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-canScrollHorizontally","meta":{}},{"name":"canScrollVertically","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-canScrollVertically","meta":{}},{"name":"checkLayoutParams","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-checkLayoutParams","meta":{}},{"name":"chooseSize","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-chooseSize","meta":{}},{"name":"collectAdjacentPrefetchPositions","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-collectAdjacentPrefetchPositions","meta":{}},{"name":"collectInitialPrefetchPositions","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-collectInitialPrefetchPositions","meta":{}},{"name":"computeHorizontalScrollExtent","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-computeHorizontalScrollExtent","meta":{}},{"name":"computeHorizontalScrollOffset","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-computeHorizontalScrollOffset","meta":{}},{"name":"computeHorizontalScrollRange","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-computeHorizontalScrollRange","meta":{}},{"name":"computeVerticalScrollExtent","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-computeVerticalScrollExtent","meta":{}},{"name":"computeVerticalScrollOffset","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-computeVerticalScrollOffset","meta":{}},{"name":"computeVerticalScrollRange","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-computeVerticalScrollRange","meta":{}},{"name":"detachAndScrapAttachedViews","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-detachAndScrapAttachedViews","meta":{}},{"name":"detachAndScrapView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-detachAndScrapView","meta":{}},{"name":"detachAndScrapViewAt","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-detachAndScrapViewAt","meta":{}},{"name":"detachView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-detachView","meta":{}},{"name":"detachViewAt","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-detachViewAt","meta":{}},{"name":"endAnimation","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-endAnimation","meta":{}},{"name":"findContainingItemView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-findContainingItemView","meta":{}},{"name":"findViewByPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-findViewByPosition","meta":{}},{"name":"generateDefaultLayoutParams","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-generateDefaultLayoutParams","meta":{}},{"name":"generateLayoutParams","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-generateLayoutParams","meta":{}},{"name":"getBaseline","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getBaseline","meta":{}},{"name":"getBottomDecorationHeight","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getBottomDecorationHeight","meta":{}},{"name":"getChildAt","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getChildAt","meta":{}},{"name":"getChildCount","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getChildCount","meta":{}},{"name":"getChildMeasureSpec","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getChildMeasureSpec","meta":{}},{"name":"getClipToPadding","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getClipToPadding","meta":{}},{"name":"getColumnCountForAccessibility","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getColumnCountForAccessibility","meta":{}},{"name":"getDecoratedBottom","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getDecoratedBottom","meta":{}},{"name":"getDecoratedBoundsWithMargins","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getDecoratedBoundsWithMargins","meta":{}},{"name":"getDecoratedLeft","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getDecoratedLeft","meta":{}},{"name":"getDecoratedMeasuredHeight","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getDecoratedMeasuredHeight","meta":{}},{"name":"getDecoratedMeasuredWidth","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getDecoratedMeasuredWidth","meta":{}},{"name":"getDecoratedRight","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getDecoratedRight","meta":{}},{"name":"getDecoratedTop","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getDecoratedTop","meta":{}},{"name":"getFocusedChild","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getFocusedChild","meta":{}},{"name":"getHeight","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getHeight","meta":{}},{"name":"getHeightMode","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getHeightMode","meta":{}},{"name":"getItemCount","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getItemCount","meta":{}},{"name":"getItemViewType","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getItemViewType","meta":{}},{"name":"getLayoutDirection","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getLayoutDirection","meta":{}},{"name":"getLeftDecorationWidth","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getLeftDecorationWidth","meta":{}},{"name":"getMinimumHeight","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getMinimumHeight","meta":{}},{"name":"getMinimumWidth","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getMinimumWidth","meta":{}},{"name":"getPaddingBottom","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getPaddingBottom","meta":{}},{"name":"getPaddingEnd","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getPaddingEnd","meta":{}},{"name":"getPaddingLeft","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getPaddingLeft","meta":{}},{"name":"getPaddingRight","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getPaddingRight","meta":{}},{"name":"getPaddingStart","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getPaddingStart","meta":{}},{"name":"getPaddingTop","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getPaddingTop","meta":{}},{"name":"getPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getPosition","meta":{}},{"name":"getProperties","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getProperties","meta":{}},{"name":"getRightDecorationWidth","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getRightDecorationWidth","meta":{}},{"name":"getRowCountForAccessibility","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getRowCountForAccessibility","meta":{}},{"name":"getSelectionModeForAccessibility","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getSelectionModeForAccessibility","meta":{}},{"name":"getTopDecorationHeight","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getTopDecorationHeight","meta":{}},{"name":"getTransformedBoundingBox","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getTransformedBoundingBox","meta":{}},{"name":"getWidth","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getWidth","meta":{}},{"name":"getWidthMode","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-getWidthMode","meta":{}},{"name":"hasFocus","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-hasFocus","meta":{}},{"name":"ignoreView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-ignoreView","meta":{}},{"name":"isAttachedToWindow","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-isAttachedToWindow","meta":{}},{"name":"isAutoMeasureEnabled","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-isAutoMeasureEnabled","meta":{}},{"name":"isFocused","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-isFocused","meta":{}},{"name":"isItemPrefetchEnabled","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-isItemPrefetchEnabled","meta":{}},{"name":"isLayoutHierarchical","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-isLayoutHierarchical","meta":{}},{"name":"isMeasurementCacheEnabled","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-isMeasurementCacheEnabled","meta":{}},{"name":"isSmoothScrolling","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-isSmoothScrolling","meta":{}},{"name":"layoutDecorated","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-layoutDecorated","meta":{}},{"name":"layoutDecoratedWithMargins","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-layoutDecoratedWithMargins","meta":{}},{"name":"measureChild","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-measureChild","meta":{}},{"name":"measureChildWithMargins","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-measureChildWithMargins","meta":{}},{"name":"moveView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-moveView","meta":{}},{"name":"offsetChildrenHorizontal","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-offsetChildrenHorizontal","meta":{}},{"name":"offsetChildrenVertical","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-offsetChildrenVertical","meta":{}},{"name":"onAdapterChanged","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onAdapterChanged","meta":{}},{"name":"onAddFocusables","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onAddFocusables","meta":{}},{"name":"onAttachedToWindow","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onAttachedToWindow","meta":{}},{"name":"onDetachedFromWindow","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onDetachedFromWindow","meta":{}},{"name":"onFocusSearchFailed","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onFocusSearchFailed","meta":{}},{"name":"onInitializeAccessibilityEvent","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onInitializeAccessibilityEvent","meta":{}},{"name":"onInitializeAccessibilityNodeInfo","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onInitializeAccessibilityNodeInfo","meta":{}},{"name":"onInitializeAccessibilityNodeInfoForItem","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onInitializeAccessibilityNodeInfoForItem","meta":{}},{"name":"onInterceptFocusSearch","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onInterceptFocusSearch","meta":{}},{"name":"onItemsAdded","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onItemsAdded","meta":{}},{"name":"onItemsChanged","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onItemsChanged","meta":{}},{"name":"onItemsMoved","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onItemsMoved","meta":{}},{"name":"onItemsRemoved","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onItemsRemoved","meta":{}},{"name":"onItemsUpdated","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onItemsUpdated","meta":{}},{"name":"onLayoutChildren","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onLayoutChildren","meta":{}},{"name":"onLayoutCompleted","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onLayoutCompleted","meta":{}},{"name":"onMeasure","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onMeasure","meta":{}},{"name":"onRequestChildFocus","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onRequestChildFocus","meta":{}},{"name":"onRestoreInstanceState","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onRestoreInstanceState","meta":{}},{"name":"onSaveInstanceState","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onSaveInstanceState","meta":{}},{"name":"onScrollStateChanged","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-onScrollStateChanged","meta":{}},{"name":"performAccessibilityAction","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-performAccessibilityAction","meta":{}},{"name":"performAccessibilityActionForItem","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-performAccessibilityActionForItem","meta":{}},{"name":"postOnAnimation","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-postOnAnimation","meta":{}},{"name":"removeAllViews","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-removeAllViews","meta":{}},{"name":"removeAndRecycleAllViews","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-removeAndRecycleAllViews","meta":{}},{"name":"removeAndRecycleView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-removeAndRecycleView","meta":{}},{"name":"removeAndRecycleViewAt","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-removeAndRecycleViewAt","meta":{}},{"name":"removeCallbacks","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-removeCallbacks","meta":{}},{"name":"removeDetachedView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-removeDetachedView","meta":{}},{"name":"removeView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-removeView","meta":{}},{"name":"removeViewAt","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-removeViewAt","meta":{}},{"name":"requestChildRectangleOnScreen","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-requestChildRectangleOnScreen","meta":{}},{"name":"requestLayout","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-requestLayout","meta":{}},{"name":"requestSimpleAnimationsInNextLayout","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-requestSimpleAnimationsInNextLayout","meta":{}},{"name":"scrollHorizontallyBy","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-scrollHorizontallyBy","meta":{}},{"name":"scrollToPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-scrollToPosition","meta":{}},{"name":"scrollVerticallyBy","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-scrollVerticallyBy","meta":{}},{"name":"setAutoMeasureEnabled","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-setAutoMeasureEnabled","meta":{}},{"name":"setItemPrefetchEnabled","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-setItemPrefetchEnabled","meta":{}},{"name":"setMeasuredDimension","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-setMeasuredDimension","meta":{}},{"name":"setMeasurementCacheEnabled","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-setMeasurementCacheEnabled","meta":{}},{"name":"smoothScrollToPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-smoothScrollToPosition","meta":{}},{"name":"startSmoothScroll","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-startSmoothScroll","meta":{}},{"name":"stopIgnoringView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-stopIgnoringView","meta":{}},{"name":"supportsPredictiveItemAnimations","tagname":"method","owner":"com.android.internal.widget.RecyclerView.LayoutManager","id":"method-supportsPredictiveItemAnimations","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.widget.RecyclerView.LayoutManager","short_doc":"A LayoutManager is responsible for measuring and positioning item views\n within a RecyclerView as well as determining...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["com.android.internal.widget.LinearLayoutManager"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.widget.RecyclerView.LayoutManager</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/com.android.internal.widget.LinearLayoutManager' rel='com.android.internal.widget.LinearLayoutManager' class='docClass'>com.android.internal.widget.LinearLayoutManager</a></div><h4>Files</h4><div class='dependency'><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager' target='_blank'>LayoutManager.js</a></div></pre><div class='doc-contents'><p>A <code>LayoutManager</code> is responsible for measuring and positioning item views\n within a <code>RecyclerView</code> as well as determining the policy for when to recycle\n item views that are no longer visible to the user. By changing the <code>LayoutManager</code>\n a <code>RecyclerView</code> can be used to implement a standard vertically scrolling list,\n a uniform grid, staggered grids, horizontally scrolling collections and more. Several stock\n layout managers are provided for general use.\n <p/>\n If the LayoutManager specifies a default constructor or one with the signature\n (Context, AttributeSet, {@code int}, {@code int}), RecyclerView will\n instantiate and set the LayoutManager when being inflated. Most used properties can\n be then obtained from AttributeSet, int, int). In case\n a LayoutManager specifies both constructors, the non-default constructor will take\n precedence.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addDisappearingView' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-addDisappearingView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-addDisappearingView' class='name expandable'>addDisappearingView</a>( <span class='pre'>child, index</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>To be called only during com.android.internal.widget.RecyclerView.State) to add a view\n to the layout that is known t...</div><div class='long'><p>To be called only during com.android.internal.widget.RecyclerView.State) to add a view\n to the layout that is known to be going away, either because it has been\n removed or because it is actually not in the\n visible portion of the container but is being laid out in order to inform RecyclerView\n in how to animate the item out of view.\n <p>\n Views added via this method are going to be invisible to LayoutManager after the\n dispatchLayout pass is complete. They cannot be retrieved via <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getChildAt\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getChildAt\" class=\"docClass\">getChildAt</a>(int)\n or won't be included in <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getChildCount\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getChildCount\" class=\"docClass\">getChildCount</a>() method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>View to add and then remove with animation.</p>\n</div></li><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index of the view.</p>\n</div></li></ul></div></div></div><div id='method-addView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-addView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-addView' class='name expandable'>addView</a>( <span class='pre'>child, index</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a view to the currently attached RecyclerView if needed. ...</div><div class='long'><p>Add a view to the currently attached RecyclerView if needed. LayoutManagers should\n use this method to add views obtained from a <a href=\"#!/api/com.android.internal.widget.RecyclerView.Recycler\" rel=\"com.android.internal.widget.RecyclerView.Recycler\" class=\"docClass\">com.android.internal.widget.RecyclerView.Recycler</a> using\n com.android.internal.widget.RecyclerView.Recycler.getViewForPosition(int).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>View to add</p>\n</div></li><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index to add child at</p>\n</div></li></ul></div></div></div><div id='method-assertInLayoutOrScroll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-assertInLayoutOrScroll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-assertInLayoutOrScroll' class='name expandable'>assertInLayoutOrScroll</a>( <span class='pre'>message</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if RecyclerView is in the middle of a layout or scroll and throws an\n IllegalStateException if it is not. ...</div><div class='long'><p>Checks if RecyclerView is in the middle of a layout or scroll and throws an\n IllegalStateException if it <b>is not</b>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>message</span> : String<div class='sub-desc'><p>The message for the exception. Can be null.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-assertNotInLayoutOrScroll\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-assertNotInLayoutOrScroll\" class=\"docClass\">assertNotInLayoutOrScroll</a>(String)</p>\n</div></li></ul></div></div></div><div id='method-assertNotInLayoutOrScroll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-assertNotInLayoutOrScroll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-assertNotInLayoutOrScroll' class='name expandable'>assertNotInLayoutOrScroll</a>( <span class='pre'>message</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if RecyclerView is in the middle of a layout or scroll and throws an\n IllegalStateException if it is. ...</div><div class='long'><p>Checks if RecyclerView is in the middle of a layout or scroll and throws an\n IllegalStateException if it <b>is</b>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>message</span> : String<div class='sub-desc'><p>The message for the exception. Can be null.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-assertInLayoutOrScroll\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-assertInLayoutOrScroll\" class=\"docClass\">assertInLayoutOrScroll</a>(String)</p>\n</div></li></ul></div></div></div><div id='method-attachView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-attachView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-attachView' class='name expandable'>attachView</a>( <span class='pre'>child</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reattach a previously detached view. ...</div><div class='long'><p>Reattach a previously detached view.\n This method should not be used to reattach views that were previously\n com.android.internal.widget.RecyclerView.Recycler)  scrapped}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to reattach</p>\n</div></li></ul></div></div></div><div id='method-calculateItemDecorationsForChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-calculateItemDecorationsForChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild' class='name expandable'>calculateItemDecorationsForChild</a>( <span class='pre'>child, outRect</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Calculates the item decor insets applied to the given child and updates the provided\n Rect instance with the inset va...</div><div class='long'><p>Calculates the item decor insets applied to the given child and updates the provided\n Rect instance with the inset values.\n <ul>\n     <li>The Rect's left is set to the total width of left decorations.</li>\n     <li>The Rect's top is set to the total height of top decorations.</li>\n     <li>The Rect's right is set to the total width of right decorations.</li>\n     <li>The Rect's bottom is set to total height of bottom decorations.</li>\n </ul>\n <p>\n Note that item decorations are automatically calculated when one of the LayoutManager's\n measure child methods is called. If you need to measure the child with custom specs via\n int), you can use this method to get decorations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>The child view whose decorations should be calculated</p>\n</div></li><li><span class='pre'>outRect</span> : Object {Rect}<div class='sub-desc'><p>The Rect to hold result values</p>\n</div></li></ul></div></div></div><div id='method-canScrollHorizontally' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-canScrollHorizontally' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-canScrollHorizontally' class='name expandable'>canScrollHorizontally</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Query if horizontal scrolling is currently supported. ...</div><div class='long'><p>Query if horizontal scrolling is currently supported. The default implementation\n returns false.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if this LayoutManager can scroll the current contents horizontally</p>\n</div></li></ul></div></div></div><div id='method-canScrollVertically' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-canScrollVertically' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-canScrollVertically' class='name expandable'>canScrollVertically</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Query if vertical scrolling is currently supported. ...</div><div class='long'><p>Query if vertical scrolling is currently supported. The default implementation\n returns false.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if this LayoutManager can scroll the current contents vertically</p>\n</div></li></ul></div></div></div><div id='method-checkLayoutParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-checkLayoutParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-checkLayoutParams' class='name expandable'>checkLayoutParams</a>( <span class='pre'>lp</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Determines the validity of the supplied LayoutParams object. ...</div><div class='long'><p>Determines the validity of the supplied LayoutParams object.</p>\n\n<p> <p>This should check to make sure that the object is of the correct type\n and all values are within acceptable ranges. The default implementation\n returns <code>true</code> for non-null params.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lp</span> : Object {RecyclerView.LayoutParams}<div class='sub-desc'><p>LayoutParams object to check</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this LayoutParams object is valid, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-chooseSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-chooseSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-chooseSize' class='name expandable'>chooseSize</a>( <span class='pre'>spec, desired, min</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Chooses a size from the given specs and parameters that is closest to the desired size\n and also complies with the spec. ...</div><div class='long'><p>Chooses a size from the given specs and parameters that is closest to the desired size\n and also complies with the spec.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>spec</span> : Number<div class='sub-desc'><p>The measureSpec</p>\n</div></li><li><span class='pre'>desired</span> : Number<div class='sub-desc'><p>The preferred measurement</p>\n</div></li><li><span class='pre'>min</span> : Number<div class='sub-desc'><p>The minimum value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>A size that fits to the given specs</p>\n</div></li></ul></div></div></div><div id='method-collectAdjacentPrefetchPositions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-collectAdjacentPrefetchPositions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-collectAdjacentPrefetchPositions' class='name expandable'>collectAdjacentPrefetchPositions</a>( <span class='pre'>dx, dy, state, layoutPrefetchRegistry</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gather all positions from the LayoutManager to be prefetched, given specified momentum. ...</div><div class='long'><p>Gather all positions from the LayoutManager to be prefetched, given specified momentum.</p>\n\n<p> <p>If item prefetch is enabled, this method is called in between traversals to gather\n which positions the LayoutManager will soon need, given upcoming movement in subsequent\n traversals.</p></p>\n\n<p> <p>The LayoutManager should call int) for\n each item to be prepared, and these positions will have their ViewHolders created and\n bound, if there is sufficient time available, in advance of being needed by a\n scroll or layout.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dx</span> : Number<div class='sub-desc'><p>X movement component.</p>\n</div></li><li><span class='pre'>dy</span> : Number<div class='sub-desc'><p>Y movement component.</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>State of RecyclerView</p>\n</div></li><li><span class='pre'>layoutPrefetchRegistry</span> : Object {RecyclerView.LayoutManager.LayoutPrefetchRegistry}<div class='sub-desc'><p>PrefetchRegistry to add prefetch entries into.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isItemPrefetchEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-isItemPrefetchEnabled\" class=\"docClass\">isItemPrefetchEnabled</a>()\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-collectInitialPrefetchPositions\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-collectInitialPrefetchPositions\" class=\"docClass\">collectInitialPrefetchPositions</a>(int, LayoutPrefetchRegistry)</p>\n</div></li></ul></div></div></div><div id='method-collectInitialPrefetchPositions' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-collectInitialPrefetchPositions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-collectInitialPrefetchPositions' class='name expandable'>collectInitialPrefetchPositions</a>( <span class='pre'>adapterItemCount, layoutPrefetchRegistry</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gather all positions from the LayoutManager to be prefetched in preperation for its\n RecyclerView to come on screen, ...</div><div class='long'><p>Gather all positions from the LayoutManager to be prefetched in preperation for its\n RecyclerView to come on screen, due to the movement of another, containing RecyclerView.</p>\n\n<p> <p>This method is only called when a RecyclerView is nested in another RecyclerView.</p></p>\n\n<p> <p>If item prefetch is enabled for this LayoutManager, as well in another containing\n LayoutManager, this method is called in between draw traversals to gather\n which positions this LayoutManager will first need, once it appears on the screen.</p></p>\n\n<p> <p>For example, if this LayoutManager represents a horizontally scrolling list within a\n vertically scrolling LayoutManager, this method would be called when the horizontal list\n is about to come onscreen.</p></p>\n\n<p> <p>The LayoutManager should call int) for\n each item to be prepared, and these positions will have their ViewHolders created and\n bound, if there is sufficient time available, in advance of being needed by a\n scroll or layout.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>adapterItemCount</span> : Number<div class='sub-desc'><p>number of items in the associated adapter.</p>\n</div></li><li><span class='pre'>layoutPrefetchRegistry</span> : Object {RecyclerView.LayoutManager.LayoutPrefetchRegistry}<div class='sub-desc'><p>PrefetchRegistry to add prefetch entries into.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isItemPrefetchEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-isItemPrefetchEnabled\" class=\"docClass\">isItemPrefetchEnabled</a>()\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-collectAdjacentPrefetchPositions\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-collectAdjacentPrefetchPositions\" class=\"docClass\">collectAdjacentPrefetchPositions</a>(int, int, State, LayoutPrefetchRegistry)</p>\n</div></li></ul></div></div></div><div id='method-computeHorizontalScrollExtent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-computeHorizontalScrollExtent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-computeHorizontalScrollExtent' class='name expandable'>computeHorizontalScrollExtent</a>( <span class='pre'>state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Override this method if you want to support scroll bars. ...</div><div class='long'><p>Override this method if you want to support scroll bars.</p>\n\n\n<p> <p>Read com.android.internal.widget.RecyclerView.computeHorizontalScrollExtent() for details.</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Current state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The horizontal extent of the scrollbar's thumb\n@see RecyclerView#computeHorizontalScrollExtent()</p>\n</div></li></ul></div></div></div><div id='method-computeHorizontalScrollOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-computeHorizontalScrollOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-computeHorizontalScrollOffset' class='name expandable'>computeHorizontalScrollOffset</a>( <span class='pre'>state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Override this method if you want to support scroll bars. ...</div><div class='long'><p>Override this method if you want to support scroll bars.</p>\n\n\n<p> <p>Read com.android.internal.widget.RecyclerView.computeHorizontalScrollOffset() for details.</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Current State of RecyclerView where you can find total item count</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The horizontal offset of the scrollbar's thumb\n@see RecyclerView#computeHorizontalScrollOffset()</p>\n</div></li></ul></div></div></div><div id='method-computeHorizontalScrollRange' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-computeHorizontalScrollRange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-computeHorizontalScrollRange' class='name expandable'>computeHorizontalScrollRange</a>( <span class='pre'>state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Override this method if you want to support scroll bars. ...</div><div class='long'><p>Override this method if you want to support scroll bars.</p>\n\n\n<p> <p>Read com.android.internal.widget.RecyclerView.computeHorizontalScrollRange() for details.</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Current State of RecyclerView where you can find total item count</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total horizontal range represented by the vertical scrollbar\n@see RecyclerView#computeHorizontalScrollRange()</p>\n</div></li></ul></div></div></div><div id='method-computeVerticalScrollExtent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-computeVerticalScrollExtent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-computeVerticalScrollExtent' class='name expandable'>computeVerticalScrollExtent</a>( <span class='pre'>state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Override this method if you want to support scroll bars. ...</div><div class='long'><p>Override this method if you want to support scroll bars.</p>\n\n\n<p> <p>Read com.android.internal.widget.RecyclerView.computeVerticalScrollExtent() for details.</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Current state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The vertical extent of the scrollbar's thumb\n@see RecyclerView#computeVerticalScrollExtent()</p>\n</div></li></ul></div></div></div><div id='method-computeVerticalScrollOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-computeVerticalScrollOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-computeVerticalScrollOffset' class='name expandable'>computeVerticalScrollOffset</a>( <span class='pre'>state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Override this method if you want to support scroll bars. ...</div><div class='long'><p>Override this method if you want to support scroll bars.</p>\n\n\n<p> <p>Read com.android.internal.widget.RecyclerView.computeVerticalScrollOffset() for details.</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Current State of RecyclerView where you can find total item count</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The vertical offset of the scrollbar's thumb\n@see RecyclerView#computeVerticalScrollOffset()</p>\n</div></li></ul></div></div></div><div id='method-computeVerticalScrollRange' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-computeVerticalScrollRange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-computeVerticalScrollRange' class='name expandable'>computeVerticalScrollRange</a>( <span class='pre'>state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Override this method if you want to support scroll bars. ...</div><div class='long'><p>Override this method if you want to support scroll bars.</p>\n\n\n<p> <p>Read com.android.internal.widget.RecyclerView.computeVerticalScrollRange() for details.</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Current State of RecyclerView where you can find total item count</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total vertical range represented by the vertical scrollbar\n@see RecyclerView#computeVerticalScrollRange()</p>\n</div></li></ul></div></div></div><div id='method-detachAndScrapAttachedViews' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-detachAndScrapAttachedViews' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-detachAndScrapAttachedViews' class='name expandable'>detachAndScrapAttachedViews</a>( <span class='pre'>recycler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Temporarily detach and scrap all currently attached child views. ...</div><div class='long'><p>Temporarily detach and scrap all currently attached child views. Views will be scrapped\n into the given Recycler. The Recycler may prefer to reuse scrap views before\n other views that were previously recycled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to scrap views into</p>\n</div></li></ul></div></div></div><div id='method-detachAndScrapView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-detachAndScrapView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-detachAndScrapView' class='name expandable'>detachAndScrapView</a>( <span class='pre'>child, recycler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Detach a child view and add it to a com.android.internal.widget.RecyclerView.Recycler's scrap heap. ...</div><div class='long'><p>Detach a child view and add it to a <a href=\"#!/api/com.android.internal.widget.RecyclerView.Recycler\" rel=\"com.android.internal.widget.RecyclerView.Recycler\" class=\"docClass\">com.android.internal.widget.RecyclerView.Recycler's</a> scrap heap.</p>\n\n<p> <p>Scrapping a view allows it to be rebound and reused to show updated or\n different data.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to detach and scrap</p>\n</div></li><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to deposit the new scrap view into</p>\n</div></li></ul></div></div></div><div id='method-detachAndScrapViewAt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-detachAndScrapViewAt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-detachAndScrapViewAt' class='name expandable'>detachAndScrapViewAt</a>( <span class='pre'>index, recycler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Detach a child view and add it to a com.android.internal.widget.RecyclerView.Recycler's scrap heap. ...</div><div class='long'><p>Detach a child view and add it to a <a href=\"#!/api/com.android.internal.widget.RecyclerView.Recycler\" rel=\"com.android.internal.widget.RecyclerView.Recycler\" class=\"docClass\">com.android.internal.widget.RecyclerView.Recycler's</a> scrap heap.</p>\n\n<p> <p>Scrapping a view allows it to be rebound and reused to show updated or\n different data.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index of child to detach and scrap</p>\n</div></li><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to deposit the new scrap view into</p>\n</div></li></ul></div></div></div><div id='method-detachView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-detachView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-detachView' class='name expandable'>detachView</a>( <span class='pre'>child</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Temporarily detach a child view. ...</div><div class='long'><p>Temporarily detach a child view.</p>\n\n<p> <p>LayoutManagers may want to perform a lightweight detach operation to rearrange\n views currently attached to the RecyclerView. Generally LayoutManager implementations\n will want to use com.android.internal.widget.RecyclerView.Recycler)\n so that the detached view may be rebound and reused.</p></p>\n\n<p> <p>If a LayoutManager uses this method to detach a view, it <em>must</em>\n int, com.android.internal.widget.RecyclerView.LayoutParams) reattach\n or fully remove the detached view\n before the LayoutManager entry point method called by RecyclerView returns.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to detach</p>\n</div></li></ul></div></div></div><div id='method-detachViewAt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-detachViewAt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-detachViewAt' class='name expandable'>detachViewAt</a>( <span class='pre'>index</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Temporarily detach a child view. ...</div><div class='long'><p>Temporarily detach a child view.</p>\n\n<p> <p>LayoutManagers may want to perform a lightweight detach operation to rearrange\n views currently attached to the RecyclerView. Generally LayoutManager implementations\n will want to use com.android.internal.widget.RecyclerView.Recycler)\n so that the detached view may be rebound and reused.</p></p>\n\n<p> <p>If a LayoutManager uses this method to detach a view, it <em>must</em>\n int, com.android.internal.widget.RecyclerView.LayoutParams) reattach\n or fully remove the detached view\n before the LayoutManager entry point method called by RecyclerView returns.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index of the child to detach</p>\n</div></li></ul></div></div></div><div id='method-endAnimation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-endAnimation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-endAnimation' class='name expandable'>endAnimation</a>( <span class='pre'>view</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ends all animations on the view created by the com.android.internal.widget.RecyclerView.ItemAnimator. ...</div><div class='long'><p>Ends all animations on the view created by the <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemAnimator</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The View for which the animations should be ended.\n@see RecyclerView.ItemAnimator#endAnimations()</p>\n</div></li></ul></div></div></div><div id='method-findContainingItemView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-findContainingItemView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-findContainingItemView' class='name expandable'>findContainingItemView</a>( <span class='pre'>view</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Traverses the ancestors of the given view and returns the item view that contains it\n and also a direct child of the ...</div><div class='long'><p>Traverses the ancestors of the given view and returns the item view that contains it\n and also a direct child of the LayoutManager.\n <p>\n Note that this method may return null if the view is a child of the RecyclerView but\n not a child of the LayoutManager (e.g. running a disappear animation).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view that is a descendant of the LayoutManager.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>The direct child of the LayoutManager which contains the given view or null if\n the provided view is not a descendant of this LayoutManager.\n@see RecyclerView#getChildViewHolder(View)\n@see RecyclerView#findContainingViewHolder(View)</p>\n</div></li></ul></div></div></div><div id='method-findViewByPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-findViewByPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-findViewByPosition' class='name expandable'>findViewByPosition</a>( <span class='pre'>position</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Finds the view which represents the given adapter position. ...</div><div class='long'><p>Finds the view which represents the given adapter position.\n <p>\n This method traverses each child since it has no information about child order.\n Override this method to improve performance if your LayoutManager keeps data about\n child views.\n <p>\n If a view is ignored via <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-ignoreView\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-ignoreView\" class=\"docClass\">ignoreView</a>(View), it is also ignored by this method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Position of the item in adapter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>The child view that represents the given position or null if the position is not\n laid out</p>\n</div></li></ul></div></div></div><div id='method-generateDefaultLayoutParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-generateDefaultLayoutParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-generateDefaultLayoutParams' class='name expandable'>generateDefaultLayoutParams</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerView.LayoutParams}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a default LayoutParams object for a child of the RecyclerView. ...</div><div class='long'><p>Create a default <code>LayoutParams</code> object for a child of the RecyclerView.</p>\n\n<p> <p>LayoutManagers will often want to use a custom <code>LayoutParams</code> type\n to store extra information specific to the layout. Client code should subclass\n com.android.internal.widget.RecyclerView.LayoutParams for this purpose.</p></p>\n\n<p> <p><em>Important:</em> if you use your own custom <code>LayoutParams</code> type\n you must also override\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-checkLayoutParams\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-checkLayoutParams\" class=\"docClass\">checkLayoutParams</a>(LayoutParams),\n generateLayoutParams(android.view.ViewGroup.LayoutParams) and\n android.util.AttributeSet).</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.LayoutParams}</span><div class='sub-desc'><p>A new LayoutParams for a child view</p>\n</div></li></ul></div></div></div><div id='method-generateLayoutParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-generateLayoutParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-generateLayoutParams' class='name expandable'>generateLayoutParams</a>( <span class='pre'>c, attrs</span> ) : Object {com.android.internal.widget.RecyclerView.LayoutParams}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a LayoutParams object suitable for this LayoutManager from\n an inflated layout resource. ...</div><div class='long'><p>Create a LayoutParams object suitable for this LayoutManager from\n an inflated layout resource.</p>\n\n<p> <p><em>Important:</em> if you use your own custom <code>LayoutParams</code> type\n you must also override\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-checkLayoutParams\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-checkLayoutParams\" class=\"docClass\">checkLayoutParams</a>(LayoutParams),\n generateLayoutParams(android.view.ViewGroup.LayoutParams) and\n android.util.AttributeSet).</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : Object {Context}<div class='sub-desc'><p>Context for obtaining styled attributes</p>\n</div></li><li><span class='pre'>attrs</span> : Object {AttributeSet}<div class='sub-desc'><p>AttributeSet describing the supplied arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.LayoutParams}</span><div class='sub-desc'><p>a new LayoutParams object</p>\n</div></li></ul></div></div></div><div id='method-getBaseline' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getBaseline' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getBaseline' class='name expandable'>getBaseline</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns offset of the RecyclerView's text baseline from the its top boundary. ...</div><div class='long'><p>Returns offset of the RecyclerView's text baseline from the its top boundary.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The offset of the RecyclerView's text baseline from the its top boundary; -1 if\n there is no baseline.</p>\n</div></li></ul></div></div></div><div id='method-getBottomDecorationHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getBottomDecorationHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getBottomDecorationHeight' class='name expandable'>getBottomDecorationHeight</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the total height of item decorations applied to child's bottom. ...</div><div class='long'><p>Returns the total height of item decorations applied to child's bottom.\n <p>\n Note that this value is not updated until the View is measured or\n Rect) is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total height of item decorations applied to the child's bottom.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedBottom\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedBottom\" class=\"docClass\">getDecoratedBottom</a>(View)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild\" class=\"docClass\">calculateItemDecorationsForChild</a>(View, Rect)</p>\n</div></li></ul></div></div></div><div id='method-getChildAt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getChildAt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getChildAt' class='name expandable'>getChildAt</a>( <span class='pre'>index</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the child view at the given index ...</div><div class='long'><p>Return the child view at the given index</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index of child to return</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>Child view at index</p>\n</div></li></ul></div></div></div><div id='method-getChildCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getChildCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getChildCount' class='name expandable'>getChildCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the current number of child views attached to the parent RecyclerView. ...</div><div class='long'><p>Return the current number of child views attached to the parent RecyclerView.\n This does not include child views that were temporarily detached and/or scrapped.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Number of attached children</p>\n</div></li></ul></div></div></div><div id='method-getChildMeasureSpec' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getChildMeasureSpec' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getChildMeasureSpec' class='name expandable'>getChildMeasureSpec</a>( <span class='pre'>parentSize, parentMode, padding, childDimension, canScroll</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Calculate a MeasureSpec value for measuring a child view in one dimension. ...</div><div class='long'><p>Calculate a MeasureSpec value for measuring a child view in one dimension.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parentSize</span> : Number<div class='sub-desc'><p>Size of the parent view where the child will be placed</p>\n</div></li><li><span class='pre'>parentMode</span> : Number<div class='sub-desc'><p>The measurement spec mode of the parent</p>\n</div></li><li><span class='pre'>padding</span> : Number<div class='sub-desc'><p>Total space currently consumed by other elements of parent</p>\n</div></li><li><span class='pre'>childDimension</span> : Number<div class='sub-desc'><p>Desired size of the child view, or MATCH_PARENT/WRAP_CONTENT.\n                       Generally obtained from the child view's LayoutParams</p>\n</div></li><li><span class='pre'>canScroll</span> : Boolean<div class='sub-desc'><p>true if the parent RecyclerView can scroll in this dimension</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a MeasureSpec value for the child view</p>\n</div></li></ul></div></div></div><div id='method-getClipToPadding' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getClipToPadding' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getClipToPadding' class='name expandable'>getClipToPadding</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Check if the RecyclerView is configured to clip child views to its padding. ...</div><div class='long'><p>Check if the RecyclerView is configured to clip child views to its padding.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this RecyclerView clips children to its padding, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-getColumnCountForAccessibility' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getColumnCountForAccessibility' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getColumnCountForAccessibility' class='name expandable'>getColumnCountForAccessibility</a>( <span class='pre'>recycler, state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of columns for accessibility. ...</div><div class='long'><p>Returns the number of columns for accessibility.\n <p>\n Default implementation returns the number of items in the adapter if LayoutManager\n supports horizontal scrolling or 1 if LayoutManager does not support horizontal\n scrolling.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                 positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of rows in LayoutManager for accessibility.</p>\n</div></li></ul></div></div></div><div id='method-getDecoratedBottom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getDecoratedBottom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedBottom' class='name expandable'>getDecoratedBottom</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the bottom edge of the given child view within its parent, offset by any applied\n com.android.internal.widget...</div><div class='long'><p>Returns the bottom edge of the given child view within its parent, offset by any applied\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecorations</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Child bottom edge with offsets applied\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getBottomDecorationHeight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getBottomDecorationHeight\" class=\"docClass\">getBottomDecorationHeight</a>(View)</p>\n</div></li></ul></div></div></div><div id='method-getDecoratedBoundsWithMargins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getDecoratedBoundsWithMargins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedBoundsWithMargins' class='name expandable'>getDecoratedBoundsWithMargins</a>( <span class='pre'>view, outBounds</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the bounds of the view including its decoration and margins. ...</div><div class='long'><p>Returns the bounds of the view including its decoration and margins.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view element to check</p>\n</div></li><li><span class='pre'>outBounds</span> : Object {Rect}<div class='sub-desc'><p>A rect that will receive the bounds of the element including its\n                  decoration and margins.</p>\n</div></li></ul></div></div></div><div id='method-getDecoratedLeft' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getDecoratedLeft' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedLeft' class='name expandable'>getDecoratedLeft</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the left edge of the given child view within its parent, offset by any applied\n com.android.internal.widget.R...</div><div class='long'><p>Returns the left edge of the given child view within its parent, offset by any applied\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecorations</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Child left edge with offsets applied\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getLeftDecorationWidth\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getLeftDecorationWidth\" class=\"docClass\">getLeftDecorationWidth</a>(View)</p>\n</div></li></ul></div></div></div><div id='method-getDecoratedMeasuredHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getDecoratedMeasuredHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredHeight' class='name expandable'>getDecoratedMeasuredHeight</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the measured height of the given child, plus the additional size of\n any insets applied by com.android.intern...</div><div class='long'><p>Returns the measured height of the given child, plus the additional size of\n any insets applied by <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecorations</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child view to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>child's measured height plus <code>ItemDecoration</code> insets\n@see View#getMeasuredHeight()</p>\n</div></li></ul></div></div></div><div id='method-getDecoratedMeasuredWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getDecoratedMeasuredWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredWidth' class='name expandable'>getDecoratedMeasuredWidth</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the measured width of the given child, plus the additional size of\n any insets applied by com.android.interna...</div><div class='long'><p>Returns the measured width of the given child, plus the additional size of\n any insets applied by <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecorations</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child view to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>child's measured width plus <code>ItemDecoration</code> insets\n@see View#getMeasuredWidth()</p>\n</div></li></ul></div></div></div><div id='method-getDecoratedRight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getDecoratedRight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedRight' class='name expandable'>getDecoratedRight</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the right edge of the given child view within its parent, offset by any applied\n com.android.internal.widget....</div><div class='long'><p>Returns the right edge of the given child view within its parent, offset by any applied\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecorations</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Child right edge with offsets applied\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getRightDecorationWidth\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getRightDecorationWidth\" class=\"docClass\">getRightDecorationWidth</a>(View)</p>\n</div></li></ul></div></div></div><div id='method-getDecoratedTop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getDecoratedTop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedTop' class='name expandable'>getDecoratedTop</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the top edge of the given child view within its parent, offset by any applied\n com.android.internal.widget.Re...</div><div class='long'><p>Returns the top edge of the given child view within its parent, offset by any applied\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecorations</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Child top edge with offsets applied\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getTopDecorationHeight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getTopDecorationHeight\" class=\"docClass\">getTopDecorationHeight</a>(View)</p>\n</div></li></ul></div></div></div><div id='method-getFocusedChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getFocusedChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getFocusedChild' class='name expandable'>getFocusedChild</a>( <span class='pre'></span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the item View which has or contains focus. ...</div><div class='long'><p>Returns the item View which has or contains focus.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>A direct child of RecyclerView which has focus or contains the focused child.</p>\n</div></li></ul></div></div></div><div id='method-getHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getHeight' class='name expandable'>getHeight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the height of the parent RecyclerView ...</div><div class='long'><p>Return the height of the parent RecyclerView</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Height in pixels</p>\n</div></li></ul></div></div></div><div id='method-getHeightMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getHeightMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getHeightMode' class='name expandable'>getHeightMode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the height measurement spec mode of the RecyclerView. ...</div><div class='long'><p>Return the height measurement spec mode of the RecyclerView.\n <p>\n This value is set only if the LayoutManager opts into the auto measure api via\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setAutoMeasureEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-setAutoMeasureEnabled\" class=\"docClass\">setAutoMeasureEnabled</a>(boolean).\n <p>\n When RecyclerView is running a layout, this value is always set to\n View.MeasureSpec.EXACTLY even if it was measured with a different spec mode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Height measure spec mode.\n@see View.MeasureSpec#getMode(int)\n@see View#onMeasure(int, int)</p>\n</div></li></ul></div></div></div><div id='method-getItemCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getItemCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getItemCount' class='name expandable'>getItemCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of items in the adapter bound to the parent RecyclerView. ...</div><div class='long'><p>Returns the number of items in the adapter bound to the parent RecyclerView.\n <p>\n Note that this number is not necessarily equal to\n com.android.internal.widget.RecyclerView.State#getItemCount(). In methods where <a href=\"#!/api/com.android.internal.widget.RecyclerView.State\" rel=\"com.android.internal.widget.RecyclerView.State\" class=\"docClass\">com.android.internal.widget.RecyclerView.State</a> is\n available, you should use com.android.internal.widget.RecyclerView.State#getItemCount() instead.\n For more details, check the documentation for\n com.android.internal.widget.RecyclerView.State#getItemCount().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of items in the bound adapter\n@see State#getItemCount()</p>\n</div></li></ul></div></div></div><div id='method-getItemViewType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getItemViewType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getItemViewType' class='name expandable'>getItemViewType</a>( <span class='pre'>view</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the View type defined by the adapter. ...</div><div class='long'><p>Returns the View type defined by the adapter.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The type of the view assigned by the adapter.</p>\n</div></li></ul></div></div></div><div id='method-getLayoutDirection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getLayoutDirection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getLayoutDirection' class='name expandable'>getLayoutDirection</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the resolved layout direction for this RecyclerView. ...</div><div class='long'><p>Returns the resolved layout direction for this RecyclerView.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>android.view.View.LAYOUT_DIRECTION_RTL if the layout\n direction is RTL or returns\n android.view.View.LAYOUT_DIRECTION_LTR if the layout direction\n is not RTL.</p>\n</div></li></ul></div></div></div><div id='method-getLeftDecorationWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getLeftDecorationWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getLeftDecorationWidth' class='name expandable'>getLeftDecorationWidth</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the total width of item decorations applied to child's left. ...</div><div class='long'><p>Returns the total width of item decorations applied to child's left.\n <p>\n Note that this value is not updated until the View is measured or\n Rect) is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total width of item decorations applied to the child's left.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedLeft\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedLeft\" class=\"docClass\">getDecoratedLeft</a>(View)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild\" class=\"docClass\">calculateItemDecorationsForChild</a>(View, Rect)</p>\n</div></li></ul></div></div></div><div id='method-getMinimumHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getMinimumHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getMinimumHeight' class='name expandable'>getMinimumHeight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The host RecyclerView's View.getMinimumHeight()</p>\n</div></li></ul></div></div></div><div id='method-getMinimumWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getMinimumWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getMinimumWidth' class='name expandable'>getMinimumWidth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The host RecyclerView's View.getMinimumWidth()</p>\n</div></li></ul></div></div></div><div id='method-getPaddingBottom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getPaddingBottom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getPaddingBottom' class='name expandable'>getPaddingBottom</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the bottom padding of the parent RecyclerView ...</div><div class='long'><p>Return the bottom padding of the parent RecyclerView</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Padding in pixels</p>\n</div></li></ul></div></div></div><div id='method-getPaddingEnd' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getPaddingEnd' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getPaddingEnd' class='name expandable'>getPaddingEnd</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the end padding of the parent RecyclerView ...</div><div class='long'><p>Return the end padding of the parent RecyclerView</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Padding in pixels</p>\n</div></li></ul></div></div></div><div id='method-getPaddingLeft' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getPaddingLeft' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getPaddingLeft' class='name expandable'>getPaddingLeft</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the left padding of the parent RecyclerView ...</div><div class='long'><p>Return the left padding of the parent RecyclerView</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Padding in pixels</p>\n</div></li></ul></div></div></div><div id='method-getPaddingRight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getPaddingRight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getPaddingRight' class='name expandable'>getPaddingRight</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the right padding of the parent RecyclerView ...</div><div class='long'><p>Return the right padding of the parent RecyclerView</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Padding in pixels</p>\n</div></li></ul></div></div></div><div id='method-getPaddingStart' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getPaddingStart' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getPaddingStart' class='name expandable'>getPaddingStart</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the start padding of the parent RecyclerView ...</div><div class='long'><p>Return the start padding of the parent RecyclerView</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Padding in pixels</p>\n</div></li></ul></div></div></div><div id='method-getPaddingTop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getPaddingTop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getPaddingTop' class='name expandable'>getPaddingTop</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the top padding of the parent RecyclerView ...</div><div class='long'><p>Return the top padding of the parent RecyclerView</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Padding in pixels</p>\n</div></li></ul></div></div></div><div id='method-getPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getPosition' class='name expandable'>getPosition</a>( <span class='pre'>view</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the adapter position of the item represented by the given View. ...</div><div class='long'><p>Returns the adapter position of the item represented by the given View. This does not\n contain any adapter changes that might have happened after the last layout.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The adapter position of the item which is rendered by this View.</p>\n</div></li></ul></div></div></div><div id='method-getProperties' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getProperties' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getProperties' class='name expandable'>getProperties</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerView.LayoutManager.Properties}<span class=\"signature\"></span></div><div class='description'><div class='short'>Parse the xml attributes to get the most common properties used by layout managers. ...</div><div class='long'><p>Parse the xml attributes to get the most common properties used by layout managers.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.LayoutManager.Properties}</span><div class='sub-desc'><p>an object containing the properties as specified in the attrs.</p>\n</div></li></ul></div></div></div><div id='method-getRightDecorationWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getRightDecorationWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getRightDecorationWidth' class='name expandable'>getRightDecorationWidth</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the total width of item decorations applied to child's right. ...</div><div class='long'><p>Returns the total width of item decorations applied to child's right.\n <p>\n Note that this value is not updated until the View is measured or\n Rect) is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total width of item decorations applied to the child's right.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedRight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedRight\" class=\"docClass\">getDecoratedRight</a>(View)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild\" class=\"docClass\">calculateItemDecorationsForChild</a>(View, Rect)</p>\n</div></li></ul></div></div></div><div id='method-getRowCountForAccessibility' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getRowCountForAccessibility' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getRowCountForAccessibility' class='name expandable'>getRowCountForAccessibility</a>( <span class='pre'>recycler, state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of rows for accessibility. ...</div><div class='long'><p>Returns the number of rows for accessibility.\n <p>\n Default implementation returns the number of items in the adapter if LayoutManager\n supports vertical scrolling or 1 if LayoutManager does not support vertical\n scrolling.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                 positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of rows in LayoutManager for accessibility.</p>\n</div></li></ul></div></div></div><div id='method-getSelectionModeForAccessibility' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getSelectionModeForAccessibility' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getSelectionModeForAccessibility' class='name expandable'>getSelectionModeForAccessibility</a>( <span class='pre'>recycler, state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the selection mode for accessibility. ...</div><div class='long'><p>Returns the selection mode for accessibility. Should be\n AccessibilityNodeInfo.CollectionInfo.SELECTION_MODE_NONE,\n AccessibilityNodeInfo.CollectionInfo.SELECTION_MODE_SINGLE or\n AccessibilityNodeInfo.CollectionInfo.SELECTION_MODE_MULTIPLE.\n <p>\n Default implementation returns\n AccessibilityNodeInfo.CollectionInfo.SELECTION_MODE_NONE.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                 positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Selection mode for accessibility. Default implementation returns\n AccessibilityNodeInfo.CollectionInfo.SELECTION_MODE_NONE.</p>\n</div></li></ul></div></div></div><div id='method-getTopDecorationHeight' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getTopDecorationHeight' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getTopDecorationHeight' class='name expandable'>getTopDecorationHeight</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the total height of item decorations applied to child's top. ...</div><div class='long'><p>Returns the total height of item decorations applied to child's top.\n <p>\n Note that this value is not updated until the View is measured or\n Rect) is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total height of item decorations applied to the child's top.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedTop\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedTop\" class=\"docClass\">getDecoratedTop</a>(View)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-calculateItemDecorationsForChild\" class=\"docClass\">calculateItemDecorationsForChild</a>(View, Rect)</p>\n</div></li></ul></div></div></div><div id='method-getTransformedBoundingBox' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getTransformedBoundingBox' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getTransformedBoundingBox' class='name expandable'>getTransformedBoundingBox</a>( <span class='pre'>child, includeDecorInsets, out</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Calculates the bounding box of the View while taking into account its matrix changes\n (translation, scale etc) with r...</div><div class='long'><p>Calculates the bounding box of the View while taking into account its matrix changes\n (translation, scale etc) with respect to the RecyclerView.\n <p>\n If {@code includeDecorInsets} is {@code true}, they are applied first before applying\n the View's matrix so that the decor offsets also go through the same transformation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>The ItemView whose bounding box should be calculated.</p>\n</div></li><li><span class='pre'>includeDecorInsets</span> : Boolean<div class='sub-desc'><p>True if the decor insets should be included in the bounding box</p>\n</div></li><li><span class='pre'>out</span> : Object {Rect}<div class='sub-desc'><p>The rectangle into which the output will be written.</p>\n</div></li></ul></div></div></div><div id='method-getWidth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getWidth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getWidth' class='name expandable'>getWidth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the width of the parent RecyclerView ...</div><div class='long'><p>Return the width of the parent RecyclerView</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Width in pixels</p>\n</div></li></ul></div></div></div><div id='method-getWidthMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-getWidthMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getWidthMode' class='name expandable'>getWidthMode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the width measurement spec mode of the RecyclerView. ...</div><div class='long'><p>Return the width measurement spec mode of the RecyclerView.\n <p>\n This value is set only if the LayoutManager opts into the auto measure api via\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setAutoMeasureEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-setAutoMeasureEnabled\" class=\"docClass\">setAutoMeasureEnabled</a>(boolean).\n <p>\n When RecyclerView is running a layout, this value is always set to\n View.MeasureSpec.EXACTLY even if it was measured with a different spec mode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Width measure spec mode.\n@see View.MeasureSpec#getMode(int)\n@see View#onMeasure(int, int)</p>\n</div></li></ul></div></div></div><div id='method-hasFocus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-hasFocus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-hasFocus' class='name expandable'>hasFocus</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the RecyclerView this LayoutManager is bound to has or contains focus. ...</div><div class='long'><p>Returns true if the RecyclerView this LayoutManager is bound to has or contains focus.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the RecyclerView has or contains focus\n@see View#hasFocus()</p>\n</div></li></ul></div></div></div><div id='method-ignoreView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-ignoreView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-ignoreView' class='name expandable'>ignoreView</a>( <span class='pre'>view</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Flags a view so that it will not be scrapped or recycled. ...</div><div class='long'><p>Flags a view so that it will not be scrapped or recycled.\n <p>\n Scope of ignoring a child is strictly restricted to position tracking, scrapping and\n recyling. Methods like <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleAllViews\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleAllViews\" class=\"docClass\">removeAndRecycleAllViews</a>(Recycler) will ignore the child\n whereas <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeAllViews\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-removeAllViews\" class=\"docClass\">removeAllViews</a>() or <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-offsetChildrenHorizontal\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-offsetChildrenHorizontal\" class=\"docClass\">offsetChildrenHorizontal</a>(int) will not\n ignore the child.\n <p>\n Before this child can be recycled again, you have to call\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-stopIgnoringView\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-stopIgnoringView\" class=\"docClass\">stopIgnoringView</a>(View).\n <p>\n You can call this method only if your LayoutManger is in onLayout or onScroll callback.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>View to ignore.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-stopIgnoringView\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-stopIgnoringView\" class=\"docClass\">stopIgnoringView</a>(View)</p>\n</div></li></ul></div></div></div><div id='method-isAttachedToWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-isAttachedToWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isAttachedToWindow' class='name expandable'>isAttachedToWindow</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether LayoutManager is currently attached to a RecyclerView which is attached\n to a window. ...</div><div class='long'><p>Returns whether LayoutManager is currently attached to a RecyclerView which is attached\n to a window.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if this LayoutManager is controlling a RecyclerView and the RecyclerView\n is attached to window.</p>\n</div></li></ul></div></div></div><div id='method-isAutoMeasureEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-isAutoMeasureEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isAutoMeasureEnabled' class='name expandable'>isAutoMeasureEnabled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether the LayoutManager uses the automatic measurement API or not. ...</div><div class='long'><p>Returns whether the LayoutManager uses the automatic measurement API or not.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>True</code> if the LayoutManager is measured by the RecyclerView or\n <code>false</code> if it measures itself.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setAutoMeasureEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-setAutoMeasureEnabled\" class=\"docClass\">setAutoMeasureEnabled</a>(boolean)</p>\n</div></li></ul></div></div></div><div id='method-isFocused' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-isFocused' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isFocused' class='name expandable'>isFocused</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the RecyclerView this LayoutManager is bound to has focus. ...</div><div class='long'><p>Returns true if the RecyclerView this LayoutManager is bound to has focus.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the RecyclerView has focus, false otherwise.\n@see View#isFocused()</p>\n</div></li></ul></div></div></div><div id='method-isItemPrefetchEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-isItemPrefetchEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isItemPrefetchEnabled' class='name expandable'>isItemPrefetchEnabled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether the LayoutManager should be queried for views outside of\n its viewport while the UI thread is idle betwe...</div><div class='long'><p>Sets whether the LayoutManager should be queried for views outside of\n its viewport while the UI thread is idle between frames.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setItemPrefetchEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-setItemPrefetchEnabled\" class=\"docClass\">setItemPrefetchEnabled</a>(boolean)</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if item prefetch is enabled, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-isLayoutHierarchical' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-isLayoutHierarchical' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isLayoutHierarchical' class='name expandable'>isLayoutHierarchical</a>( <span class='pre'>recycler, state</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether layout is hierarchical or not to be used for accessibility. ...</div><div class='long'><p>Returns whether layout is hierarchical or not to be used for accessibility.\n <p>\n Default implementation returns false.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                 positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if layout is hierarchical.</p>\n</div></li></ul></div></div></div><div id='method-isMeasurementCacheEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-isMeasurementCacheEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isMeasurementCacheEnabled' class='name expandable'>isMeasurementCacheEnabled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>In addition to the View Framework's measurement cache, RecyclerView uses its own\n additional measurement cache for it...</div><div class='long'><p>In addition to the View Framework's measurement cache, RecyclerView uses its own\n additional measurement cache for its children to avoid re-measuring them when not\n necessary. It is on by default but it can be turned off via\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setMeasurementCacheEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-setMeasurementCacheEnabled\" class=\"docClass\">setMeasurementCacheEnabled</a>(boolean).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if measurement cache is enabled, false otherwise.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setMeasurementCacheEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-setMeasurementCacheEnabled\" class=\"docClass\">setMeasurementCacheEnabled</a>(boolean)</p>\n</div></li></ul></div></div></div><div id='method-isSmoothScrolling' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-isSmoothScrolling' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isSmoothScrolling' class='name expandable'>isSmoothScrolling</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if RecycylerView is currently in the state of smooth scrolling.</p>\n</div></li></ul></div></div></div><div id='method-layoutDecorated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-layoutDecorated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-layoutDecorated' class='name expandable'>layoutDecorated</a>( <span class='pre'>child, left, top, right, bottom</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Lay out the given child view within the RecyclerView using coordinates that\n include any current com.android.internal...</div><div class='long'><p>Lay out the given child view within the RecyclerView using coordinates that\n include any current <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecorations</a>.</p>\n\n<p> <p>LayoutManagers should prefer working in sizes and coordinates that include\n item decoration insets whenever possible. This allows the LayoutManager to effectively\n ignore decoration insets within measurement and layout code. See the following\n methods:</p>\n <ul>\n     <li>int, int, int, int)</li>\n     <li>Rect)</li>\n     <li>int, int)</li>\n     <li>int, int)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedLeft\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedLeft\" class=\"docClass\">getDecoratedLeft</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedTop\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedTop\" class=\"docClass\">getDecoratedTop</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedRight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedRight\" class=\"docClass\">getDecoratedRight</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedBottom\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedBottom\" class=\"docClass\">getDecoratedBottom</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredWidth\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredWidth\" class=\"docClass\">getDecoratedMeasuredWidth</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredHeight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredHeight\" class=\"docClass\">getDecoratedMeasuredHeight</a>(View)</li>\n </ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to lay out</p>\n</div></li><li><span class='pre'>left</span> : Number<div class='sub-desc'><p>Left edge, with item decoration insets included</p>\n</div></li><li><span class='pre'>top</span> : Number<div class='sub-desc'><p>Top edge, with item decoration insets included</p>\n</div></li><li><span class='pre'>right</span> : Number<div class='sub-desc'><p>Right edge, with item decoration insets included</p>\n</div></li><li><span class='pre'>bottom</span> : Number<div class='sub-desc'><p>Bottom edge, with item decoration insets included\n@see View#layout(int, int, int, int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-layoutDecoratedWithMargins\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-layoutDecoratedWithMargins\" class=\"docClass\">layoutDecoratedWithMargins</a>(View, int, int, int, int)</p>\n</div></li></ul></div></div></div><div id='method-layoutDecoratedWithMargins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-layoutDecoratedWithMargins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-layoutDecoratedWithMargins' class='name expandable'>layoutDecoratedWithMargins</a>( <span class='pre'>child, left, top, right, bottom</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Lay out the given child view within the RecyclerView using coordinates that\n include any current com.android.internal...</div><div class='long'><p>Lay out the given child view within the RecyclerView using coordinates that\n include any current <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecorations</a> and margins.</p>\n\n<p> <p>LayoutManagers should prefer working in sizes and coordinates that include\n item decoration insets whenever possible. This allows the LayoutManager to effectively\n ignore decoration insets within measurement and layout code. See the following\n methods:</p>\n <ul>\n     <li>int, int, int, int)</li>\n     <li>int, int)</li>\n     <li>int, int)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedLeft\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedLeft\" class=\"docClass\">getDecoratedLeft</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedTop\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedTop\" class=\"docClass\">getDecoratedTop</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedRight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedRight\" class=\"docClass\">getDecoratedRight</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedBottom\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedBottom\" class=\"docClass\">getDecoratedBottom</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredWidth\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredWidth\" class=\"docClass\">getDecoratedMeasuredWidth</a>(View)</li>\n     <li><a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredHeight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getDecoratedMeasuredHeight\" class=\"docClass\">getDecoratedMeasuredHeight</a>(View)</li>\n </ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to lay out</p>\n</div></li><li><span class='pre'>left</span> : Number<div class='sub-desc'><p>Left edge, with item decoration insets and left margin included</p>\n</div></li><li><span class='pre'>top</span> : Number<div class='sub-desc'><p>Top edge, with item decoration insets and top margin included</p>\n</div></li><li><span class='pre'>right</span> : Number<div class='sub-desc'><p>Right edge, with item decoration insets and right margin included</p>\n</div></li><li><span class='pre'>bottom</span> : Number<div class='sub-desc'><p>Bottom edge, with item decoration insets and bottom margin included\n@see View#layout(int, int, int, int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-layoutDecorated\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-layoutDecorated\" class=\"docClass\">layoutDecorated</a>(View, int, int, int, int)</p>\n</div></li></ul></div></div></div><div id='method-measureChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-measureChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-measureChild' class='name expandable'>measureChild</a>( <span class='pre'>child, widthUsed, heightUsed</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Measure a child view using standard measurement policy, taking the padding\n of the parent RecyclerView and any added ...</div><div class='long'><p>Measure a child view using standard measurement policy, taking the padding\n of the parent RecyclerView and any added item decorations into account.</p>\n\n<p> <p>If the RecyclerView can be scrolled in either dimension the caller may\n pass 0 as the widthUsed or heightUsed parameters as they will be irrelevant.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child view to measure</p>\n</div></li><li><span class='pre'>widthUsed</span> : Number<div class='sub-desc'><p>Width in pixels currently consumed by other views, if relevant</p>\n</div></li><li><span class='pre'>heightUsed</span> : Number<div class='sub-desc'><p>Height in pixels currently consumed by other views, if relevant</p>\n</div></li></ul></div></div></div><div id='method-measureChildWithMargins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-measureChildWithMargins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-measureChildWithMargins' class='name expandable'>measureChildWithMargins</a>( <span class='pre'>child, widthUsed, heightUsed</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Measure a child view using standard measurement policy, taking the padding\n of the parent RecyclerView, any added ite...</div><div class='long'><p>Measure a child view using standard measurement policy, taking the padding\n of the parent RecyclerView, any added item decorations and the child margins\n into account.</p>\n\n<p> <p>If the RecyclerView can be scrolled in either dimension the caller may\n pass 0 as the widthUsed or heightUsed parameters as they will be irrelevant.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child view to measure</p>\n</div></li><li><span class='pre'>widthUsed</span> : Number<div class='sub-desc'><p>Width in pixels currently consumed by other views, if relevant</p>\n</div></li><li><span class='pre'>heightUsed</span> : Number<div class='sub-desc'><p>Height in pixels currently consumed by other views, if relevant</p>\n</div></li></ul></div></div></div><div id='method-moveView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-moveView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-moveView' class='name expandable'>moveView</a>( <span class='pre'>fromIndex, toIndex</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Moves a View from one position to another. ...</div><div class='long'><p>Moves a View from one position to another.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fromIndex</span> : Number<div class='sub-desc'><p>The View's initial index</p>\n</div></li><li><span class='pre'>toIndex</span> : Number<div class='sub-desc'><p>The View's target index</p>\n</div></li></ul></div></div></div><div id='method-offsetChildrenHorizontal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-offsetChildrenHorizontal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-offsetChildrenHorizontal' class='name expandable'>offsetChildrenHorizontal</a>( <span class='pre'>dx</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Offset all child views attached to the parent RecyclerView by dx pixels along\n the horizontal axis. ...</div><div class='long'><p>Offset all child views attached to the parent RecyclerView by dx pixels along\n the horizontal axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dx</span> : Number<div class='sub-desc'><p>Pixels to offset by</p>\n</div></li></ul></div></div></div><div id='method-offsetChildrenVertical' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-offsetChildrenVertical' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-offsetChildrenVertical' class='name expandable'>offsetChildrenVertical</a>( <span class='pre'>dy</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Offset all child views attached to the parent RecyclerView by dy pixels along\n the vertical axis. ...</div><div class='long'><p>Offset all child views attached to the parent RecyclerView by dy pixels along\n the vertical axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dy</span> : Number<div class='sub-desc'><p>Pixels to offset by</p>\n</div></li></ul></div></div></div><div id='method-onAdapterChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onAdapterChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onAdapterChanged' class='name expandable'>onAdapterChanged</a>( <span class='pre'>oldAdapter, newAdapter</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called if the RecyclerView this LayoutManager is bound to has a different adapter set. ...</div><div class='long'><p>Called if the RecyclerView this LayoutManager is bound to has a different adapter set.\n The LayoutManager may use this opportunity to clear caches and configure state such\n that it can relayout appropriately with the new data and potentially new view types.</p>\n\n<p> <p>The default implementation removes all currently attached views.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>oldAdapter</span> : Object {com.android.internal.widget.RecyclerView.Adapter}<div class='sub-desc'><p>The previous adapter instance. Will be null if there was previously no\n                   adapter.</p>\n</div></li><li><span class='pre'>newAdapter</span> : Object {com.android.internal.widget.RecyclerView.Adapter}<div class='sub-desc'><p>The new adapter instance. Might be null if\n                   setAdapter(RecyclerView.Adapter) is called with {@code null}.</p>\n</div></li></ul></div></div></div><div id='method-onAddFocusables' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onAddFocusables' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onAddFocusables' class='name expandable'>onAddFocusables</a>( <span class='pre'>recyclerView, views, direction, focusableMode</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to populate focusable views within the RecyclerView. ...</div><div class='long'><p>Called to populate focusable views within the RecyclerView.</p>\n\n<p> <p>The LayoutManager implementation should return <code>true</code> if the default\n behavior of int) should be\n suppressed.</p></p>\n\n<p> <p>The default implementation returns <code>false</code> to trigger RecyclerView\n to fall back to the default ViewGroup behavior.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView hosting this LayoutManager</p>\n</div></li><li><span class='pre'>views</span> : Object {java.util.ArrayList}<div class='sub-desc'><p>List of output views. This method should add valid focusable views\n              to this list.</p>\n</div></li><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p>One of View.FOCUS_UP, View.FOCUS_DOWN,\n                  View.FOCUS_LEFT, View.FOCUS_RIGHT,\n                  View.FOCUS_BACKWARD, View.FOCUS_FORWARD</p>\n</div></li><li><span class='pre'>focusableMode</span> : Number<div class='sub-desc'><p>The type of focusables to be added.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true to suppress the default behavior, false to add default focusables after\n         this method returns.\n@see #FOCUSABLES_ALL\n@see #FOCUSABLES_TOUCH_MODE</p>\n</div></li></ul></div></div></div><div id='method-onAttachedToWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onAttachedToWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onAttachedToWindow' class='name expandable'>onAttachedToWindow</a>( <span class='pre'>view</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when this LayoutManager is both attached to a RecyclerView and that RecyclerView\n is attached to a window. ...</div><div class='long'><p>Called when this LayoutManager is both attached to a RecyclerView and that RecyclerView\n is attached to a window.\n <p>\n If the RecyclerView is re-attached with the same LayoutManager and Adapter, it may not\n call com.android.internal.widget.RecyclerView.State) if nothing has changed and a layout was\n not requested on the RecyclerView while it was detached.\n <p>\n Subclass implementations should always call through to the superclass implementation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView this LayoutManager is bound to\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onDetachedFromWindow\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-onDetachedFromWindow\" class=\"docClass\">onDetachedFromWindow</a>(RecyclerView, Recycler)</p>\n</div></li></ul></div></div></div><div id='method-onDetachedFromWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onDetachedFromWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onDetachedFromWindow' class='name expandable'>onDetachedFromWindow</a>( <span class='pre'>view, recycler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when this LayoutManager is detached from its parent RecyclerView or when\n its parent RecyclerView is detached ...</div><div class='long'><p>Called when this LayoutManager is detached from its parent RecyclerView or when\n its parent RecyclerView is detached from its window.\n <p>\n LayoutManager should clear all of its View references as another LayoutManager might be\n assigned to the RecyclerView.\n <p>\n If the RecyclerView is re-attached with the same LayoutManager and Adapter, it may not\n call com.android.internal.widget.RecyclerView.State) if nothing has changed and a layout was\n not requested on the RecyclerView while it was detached.\n <p>\n If your LayoutManager has View references that it cleans in on-detach, it should also\n call com.android.internal.widget.RecyclerView.requestLayout() to ensure that it is re-laid out when\n RecyclerView is re-attached.\n <p>\n Subclass implementations should always call through to the superclass implementation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView this LayoutManager is bound to</p>\n</div></li><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The recycler to use if you prefer to recycle your children instead of\n                 keeping them around.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onAttachedToWindow\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-onAttachedToWindow\" class=\"docClass\">onAttachedToWindow</a>(RecyclerView)</p>\n</div></li></ul></div></div></div><div id='method-onFocusSearchFailed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onFocusSearchFailed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onFocusSearchFailed' class='name expandable'>onFocusSearchFailed</a>( <span class='pre'>focused, direction, recycler, state</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when searching for a focusable view in the given direction has failed\n for the current content of the Recycler...</div><div class='long'><p>Called when searching for a focusable view in the given direction has failed\n for the current content of the RecyclerView.</p>\n\n<p> <p>This is the LayoutManager's opportunity to populate views in the given direction\n to fulfill the request if it can. The LayoutManager should attach and return\n the view to be focused. The default implementation returns null.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>focused</span> : Object {View}<div class='sub-desc'><p>The currently focused view</p>\n</div></li><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p>One of View.FOCUS_UP, View.FOCUS_DOWN,\n                  View.FOCUS_LEFT, View.FOCUS_RIGHT,\n                  View.FOCUS_BACKWARD, View.FOCUS_FORWARD\n                  or 0 for not applicable</p>\n</div></li><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The recycler to use for obtaining views for currently offscreen items</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Transient state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>The chosen view to be focused</p>\n</div></li></ul></div></div></div><div id='method-onInitializeAccessibilityEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onInitializeAccessibilityEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onInitializeAccessibilityEvent' class='name expandable'>onInitializeAccessibilityEvent</a>( <span class='pre'>recycler, state, event</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the accessibility delegate to initialize an accessibility event. ...</div><div class='long'><p>Called by the accessibility delegate to initialize an accessibility event.\n <p>\n Default implementation adds item count and scroll information to the event.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                 positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li><li><span class='pre'>event</span> : Object {AccessibilityEvent}<div class='sub-desc'><p>The event instance to initialize\n@see View#onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)</p>\n</div></li></ul></div></div></div><div id='method-onInitializeAccessibilityNodeInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onInitializeAccessibilityNodeInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onInitializeAccessibilityNodeInfo' class='name expandable'>onInitializeAccessibilityNodeInfo</a>( <span class='pre'>recycler, state, info</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the AccessibilityDelegate when the information about the current layout should\n be populated. ...</div><div class='long'><p>Called by the AccessibilityDelegate when the information about the current layout should\n be populated.\n <p>\n Default implementation adds a android.view.accessibility.AccessibilityNodeInfo.CollectionInfo.\n <p>\n You should override\n com.android.internal.widget.RecyclerView.State),\n com.android.internal.widget.RecyclerView.State),\n com.android.internal.widget.RecyclerView.State) and\n com.android.internal.widget.RecyclerView.State) for\n more accurate accessibility information.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                 positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li><li><span class='pre'>info</span> : Object {AccessibilityNodeInfo}<div class='sub-desc'><p>The info that should be filled by the LayoutManager\n@see View#onInitializeAccessibilityNodeInfo(\nandroid.view.accessibility.AccessibilityNodeInfo)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getRowCountForAccessibility\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getRowCountForAccessibility\" class=\"docClass\">getRowCountForAccessibility</a>(RecyclerView.Recycler, RecyclerView.State)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getColumnCountForAccessibility\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getColumnCountForAccessibility\" class=\"docClass\">getColumnCountForAccessibility</a>(RecyclerView.Recycler, RecyclerView.State)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isLayoutHierarchical\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-isLayoutHierarchical\" class=\"docClass\">isLayoutHierarchical</a>(RecyclerView.Recycler, RecyclerView.State)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getSelectionModeForAccessibility\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getSelectionModeForAccessibility\" class=\"docClass\">getSelectionModeForAccessibility</a>(RecyclerView.Recycler, RecyclerView.State)</p>\n</div></li></ul></div></div></div><div id='method-onInitializeAccessibilityNodeInfoForItem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onInitializeAccessibilityNodeInfoForItem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onInitializeAccessibilityNodeInfoForItem' class='name expandable'>onInitializeAccessibilityNodeInfoForItem</a>( <span class='pre'>recycler, state, host, info</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the AccessibilityDelegate when the accessibility information for a specific\n item should be populated. ...</div><div class='long'><p>Called by the AccessibilityDelegate when the accessibility information for a specific\n item should be populated.\n <p>\n Default implementation adds basic positioning information about the item.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                 positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li><li><span class='pre'>host</span> : Object {View}<div class='sub-desc'><p>The child for which accessibility node info should be populated</p>\n</div></li><li><span class='pre'>info</span> : Object {AccessibilityNodeInfo}<div class='sub-desc'><p>The info to fill out about the item\n@see android.widget.AbsListView#onInitializeAccessibilityNodeInfoForItem(View, int,\n android.view.accessibility.AccessibilityNodeInfo)</p>\n</div></li></ul></div></div></div><div id='method-onInterceptFocusSearch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onInterceptFocusSearch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onInterceptFocusSearch' class='name expandable'>onInterceptFocusSearch</a>( <span class='pre'>focused, direction</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>This method gives a LayoutManager an opportunity to intercept the initial focus search\n before the default behavior o...</div><div class='long'><p>This method gives a LayoutManager an opportunity to intercept the initial focus search\n before the default behavior of FocusFinder is used. If this method returns\n null FocusFinder will attempt to find a focusable child view. If it fails\n then int, com.android.internal.widget.RecyclerView.Recycler, com.android.internal.widget.RecyclerView.State)\n will be called to give the LayoutManager an opportunity to add new views for items\n that did not have attached views representing them. The LayoutManager should not add\n or remove views from this method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>focused</span> : Object {View}<div class='sub-desc'><p>The currently focused view</p>\n</div></li><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p>One of View.FOCUS_UP, View.FOCUS_DOWN,\n                  View.FOCUS_LEFT, View.FOCUS_RIGHT,\n                  View.FOCUS_BACKWARD, View.FOCUS_FORWARD</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>A descendant view to focus or null to fall back to default behavior.\n         The default implementation returns null.</p>\n</div></li></ul></div></div></div><div id='method-onItemsAdded' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onItemsAdded' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onItemsAdded' class='name expandable'>onItemsAdded</a>( <span class='pre'>recyclerView, positionStart, itemCount</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when items have been added to the adapter. ...</div><div class='long'><p>Called when items have been added to the adapter. The LayoutManager may choose to\n requestLayout if the inserted items would require refreshing the currently visible set\n of child views. (e.g. currently empty space would be filled by appended items, etc.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'>\n</div></li><li><span class='pre'>positionStart</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>itemCount</span> : Number<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-onItemsChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onItemsChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onItemsChanged' class='name expandable'>onItemsChanged</a>( <span class='pre'>recyclerView</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() is triggered instead of giving\n d...</div><div class='long'><p>Called when com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() is triggered instead of giving\n detailed information on what has actually changed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-onItemsMoved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onItemsMoved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onItemsMoved' class='name expandable'>onItemsMoved</a>( <span class='pre'>recyclerView, from, to, itemCount</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when an item is moved withing the adapter. ...</div><div class='long'><p>Called when an item is moved withing the adapter.\n <p>\n Note that, an item may also change position in response to another ADD/REMOVE/MOVE\n operation. This callback is only called if and only if <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter-method-notifyItemMoved\" rel=\"com.android.internal.widget.RecyclerView.Adapter-method-notifyItemMoved\" class=\"docClass\">com.android.internal.widget.RecyclerView.Adapter.notifyItemMoved</a>\n is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'>\n</div></li><li><span class='pre'>from</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>to</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>itemCount</span> : Number<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-onItemsRemoved' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onItemsRemoved' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onItemsRemoved' class='name expandable'>onItemsRemoved</a>( <span class='pre'>recyclerView, positionStart, itemCount</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when items have been removed from the adapter. ...</div><div class='long'><p>Called when items have been removed from the adapter.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'>\n</div></li><li><span class='pre'>positionStart</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>itemCount</span> : Number<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-onItemsUpdated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onItemsUpdated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onItemsUpdated' class='name expandable'>onItemsUpdated</a>( <span class='pre'>recyclerView, positionStart, itemCount, payload</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when items have been changed in the adapter and with optional payload. ...</div><div class='long'><p>Called when items have been changed in the adapter and with optional payload.\n Default implementation calls int, int).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'>\n</div></li><li><span class='pre'>positionStart</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>itemCount</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>payload</span> : Object {Object}<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-onLayoutChildren' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onLayoutChildren' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onLayoutChildren' class='name expandable'>onLayoutChildren</a>( <span class='pre'>recycler, state</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Lay out all relevant child views from the given adapter. ...</div><div class='long'><p>Lay out all relevant child views from the given adapter.</p>\n\n<p> The LayoutManager is in charge of the behavior of item animations. By default,\n RecyclerView has a non-null com.android.internal.widget.RecyclerView.ItemAnimator, and simple\n item animations are enabled. This means that add/remove operations on the\n adapter will result in animations to add new or appearing items, removed or\n disappearing items, and moved items. If a LayoutManager returns false from\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-supportsPredictiveItemAnimations\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-supportsPredictiveItemAnimations\" class=\"docClass\">supportsPredictiveItemAnimations</a>(), which is the default, and runs a\n normal layout operation during com.android.internal.widget.RecyclerView.State), the\n RecyclerView will have enough information to run those animations in a simple\n way. For example, the default ItemAnimator, <a href=\"#!/api/com.android.internal.widget.DefaultItemAnimator\" rel=\"com.android.internal.widget.DefaultItemAnimator\" class=\"docClass\">com.android.internal.widget.DefaultItemAnimator</a>, will\n simply fade views in and out, whether they are actually added/removed or whether\n they are moved on or off the screen due to other add/remove operations.</p>\n\n<p> <p>A LayoutManager wanting a better item animation experience, where items can be\n animated onto and off of the screen according to where the items exist when they\n are not on screen, then the LayoutManager should return true from\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-supportsPredictiveItemAnimations\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-supportsPredictiveItemAnimations\" class=\"docClass\">supportsPredictiveItemAnimations</a>() and add additional logic to\n com.android.internal.widget.RecyclerView.State). Supporting predictive animations\n means that com.android.internal.widget.RecyclerView.State) will be called twice;\n once as a \"pre\" layout step to determine where items would have been prior to\n a real layout, and again to do the \"real\" layout. In the pre-layout phase,\n items will remember their pre-layout positions to allow them to be laid out\n appropriately. Also, removed items will\n be returned from the scrap to help determine correct placement of other items.\n These removed items should not be added to the child list, but should be used\n to help calculate correct positioning of other views, including views that\n were not previously onscreen (referred to as APPEARING views), but whose\n pre-layout offscreen position can be determined given the extra\n information about the pre-layout removed views.</p></p>\n\n<p> <p>The second layout pass is the real layout in which only non-removed views\n will be used. The only additional requirement during this pass is, if\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-supportsPredictiveItemAnimations\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-supportsPredictiveItemAnimations\" class=\"docClass\">supportsPredictiveItemAnimations</a>() returns true, to note which\n views exist in the child list prior to layout and which are not there after\n layout (referred to as DISAPPEARING views), and to position/layout those views\n appropriately, without regard to the actual bounds of the RecyclerView. This allows\n the animation system to know the location to which to animate these disappearing\n views.</p></p>\n\n<p> <p>The default LayoutManager implementations for RecyclerView handle all of these\n requirements for animations already. Clients of RecyclerView can either use one\n of these layout managers directly or look at their implementations of\n onLayoutChildren() to see how they account for the APPEARING and\n DISAPPEARING views.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to use for fetching potentially cached views for a\n                         position</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Transient state of RecyclerView</p>\n</div></li></ul></div></div></div><div id='method-onLayoutCompleted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onLayoutCompleted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onLayoutCompleted' class='name expandable'>onLayoutCompleted</a>( <span class='pre'>state</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called after a full layout calculation is finished. ...</div><div class='long'><p>Called after a full layout calculation is finished. The layout calculation may include\n multiple com.android.internal.widget.RecyclerView.State) calls due to animations or\n layout measurement but it will include only one <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onLayoutCompleted\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-onLayoutCompleted\" class=\"docClass\">onLayoutCompleted</a>(State) call.\n This method will be called at the end of int, int, int) call.\n <p>\n This is a good place for the LayoutManager to do some cleanup like pending scroll\n position, saved state etc.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Transient state of RecyclerView</p>\n</div></li></ul></div></div></div><div id='method-onMeasure' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onMeasure' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onMeasure' class='name expandable'>onMeasure</a>( <span class='pre'>recycler, state, widthSpec, heightSpec</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Measure the attached RecyclerView. ...</div><div class='long'><p>Measure the attached RecyclerView. Implementations must call\n int) before returning.</p>\n\n<p> <p>The default implementation will handle EXACTLY measurements and respect\n the minimum width and height properties of the host RecyclerView if measured\n as UNSPECIFIED. AT_MOST measurements will be treated as EXACTLY and the RecyclerView\n will consume all available space.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Transient state of RecyclerView</p>\n</div></li><li><span class='pre'>widthSpec</span> : Number<div class='sub-desc'><p>Width android.view.View.MeasureSpec</p>\n</div></li><li><span class='pre'>heightSpec</span> : Number<div class='sub-desc'><p>Height android.view.View.MeasureSpec</p>\n</div></li></ul></div></div></div><div id='method-onRequestChildFocus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onRequestChildFocus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onRequestChildFocus' class='name expandable'>onRequestChildFocus</a>( <span class='pre'>parent, state, child, focused</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a descendant view of the RecyclerView requests focus. ...</div><div class='long'><p>Called when a descendant view of the RecyclerView requests focus.</p>\n\n<p> <p>A LayoutManager wishing to keep focused views aligned in a specific\n portion of the view may implement that behavior in an override of this method.</p></p>\n\n<p> <p>If the LayoutManager executes different behavior that should override the default\n behavior of scrolling the focused child on screen instead of running alongside it,\n this method should return true.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>parent</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView hosting this LayoutManager</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Current state of RecyclerView</p>\n</div></li><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Direct child of the RecyclerView containing the newly focused view</p>\n</div></li><li><span class='pre'>focused</span> : Object {View}<div class='sub-desc'><p>The newly focused view. This may be the same view as child or it may be\n                null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the default scroll behavior should be suppressed</p>\n</div></li></ul></div></div></div><div id='method-onRestoreInstanceState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onRestoreInstanceState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onRestoreInstanceState' class='name expandable'>onRestoreInstanceState</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onSaveInstanceState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onSaveInstanceState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onSaveInstanceState' class='name expandable'>onSaveInstanceState</a>( <span class='pre'></span> ) : Object {android.os.Parcelable}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the LayoutManager should save its state. ...</div><div class='long'><p>Called when the LayoutManager should save its state. This is a good time to save your\n scroll position, configuration and anything else that may be required to restore the same\n layout state if the LayoutManager is recreated.</p>\n\n\n<p> <p>RecyclerView does NOT verify if the LayoutManager has changed between state save and\n restore. This will let you share information between your LayoutManagers but it is also\n your responsibility to make sure they use the same parcelable class.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.Parcelable}</span><div class='sub-desc'><p>Necessary information for LayoutManager to be able to restore its state</p>\n</div></li></ul></div></div></div><div id='method-onScrollStateChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-onScrollStateChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-onScrollStateChanged' class='name expandable'>onScrollStateChanged</a>( <span class='pre'>state</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>RecyclerView calls this method to notify LayoutManager that scroll state has changed. ...</div><div class='long'><p>RecyclerView calls this method to notify LayoutManager that scroll state has changed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Number<div class='sub-desc'><p>The new scroll state for RecyclerView</p>\n</div></li></ul></div></div></div><div id='method-performAccessibilityAction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-performAccessibilityAction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-performAccessibilityAction' class='name expandable'>performAccessibilityAction</a>( <span class='pre'>recycler, state, action, args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by AccessibilityDelegate when an action is requested from the RecyclerView. ...</div><div class='long'><p>Called by AccessibilityDelegate when an action is requested from the RecyclerView.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                  positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li><li><span class='pre'>action</span> : Number<div class='sub-desc'><p>The action to perform</p>\n</div></li><li><span class='pre'>args</span> : Object {Bundle}<div class='sub-desc'><p>Optional action arguments\n@see View#performAccessibilityAction(int, android.os.Bundle)</p>\n</div></li></ul></div></div></div><div id='method-performAccessibilityActionForItem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-performAccessibilityActionForItem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-performAccessibilityActionForItem' class='name expandable'>performAccessibilityActionForItem</a>( <span class='pre'>recycler, state, view, action, args</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by AccessibilityDelegate when an accessibility action is requested on one of the\n children of LayoutManager. ...</div><div class='long'><p>Called by AccessibilityDelegate when an accessibility action is requested on one of the\n children of LayoutManager.\n <p>\n Default implementation does not do anything.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>The Recycler that can be used to convert view positions into adapter\n                 positions</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current state of RecyclerView</p>\n</div></li><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The child view on which the action is performed</p>\n</div></li><li><span class='pre'>action</span> : Number<div class='sub-desc'><p>The action to perform</p>\n</div></li><li><span class='pre'>args</span> : Object {Bundle}<div class='sub-desc'><p>Optional action arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if action is handled\n@see View#performAccessibilityAction(int, android.os.Bundle)</p>\n</div></li></ul></div></div></div><div id='method-postOnAnimation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-postOnAnimation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-postOnAnimation' class='name expandable'>postOnAnimation</a>( <span class='pre'>action</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes the Runnable to execute on the next animation time step. ...</div><div class='long'><p>Causes the Runnable to execute on the next animation time step.\n The runnable will be run on the user interface thread.\n <p>\n Calling this method when LayoutManager is not attached to a RecyclerView has no effect.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {Runnable}<div class='sub-desc'><p>The Runnable that will be executed.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeCallbacks\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-removeCallbacks\" class=\"docClass\">removeCallbacks</a></p>\n</div></li></ul></div></div></div><div id='method-removeAllViews' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-removeAllViews' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeAllViews' class='name expandable'>removeAllViews</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove all views from the currently attached RecyclerView. ...</div><div class='long'><p>Remove all views from the currently attached RecyclerView. This will not recycle\n any of the affected views; the LayoutManager is responsible for doing so if desired.</p>\n</div></div></div><div id='method-removeAndRecycleAllViews' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-removeAndRecycleAllViews' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleAllViews' class='name expandable'>removeAndRecycleAllViews</a>( <span class='pre'>recycler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes all views and recycles them using the given recycler. ...</div><div class='long'><p>Removes all views and recycles them using the given recycler.\n <p>\n If you want to clean cached views as well, you should call com.android.internal.widget.RecyclerView.Recycler.clear() too.\n <p>\n If a View is marked as \"ignored\", it is not removed nor recycled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to use to recycle children\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleView\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleView\" class=\"docClass\">removeAndRecycleView</a>(View, Recycler)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleViewAt\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleViewAt\" class=\"docClass\">removeAndRecycleViewAt</a>(int, Recycler)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-ignoreView\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-ignoreView\" class=\"docClass\">ignoreView</a>(View)</p>\n</div></li></ul></div></div></div><div id='method-removeAndRecycleView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-removeAndRecycleView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleView' class='name expandable'>removeAndRecycleView</a>( <span class='pre'>child, recycler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a child view and recycle it using the given Recycler. ...</div><div class='long'><p>Remove a child view and recycle it using the given Recycler.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child to remove and recycle</p>\n</div></li><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to use to recycle child</p>\n</div></li></ul></div></div></div><div id='method-removeAndRecycleViewAt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-removeAndRecycleViewAt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeAndRecycleViewAt' class='name expandable'>removeAndRecycleViewAt</a>( <span class='pre'>index, recycler</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a child view and recycle it using the given Recycler. ...</div><div class='long'><p>Remove a child view and recycle it using the given Recycler.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index of child to remove and recycle</p>\n</div></li><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to use to recycle child</p>\n</div></li></ul></div></div></div><div id='method-removeCallbacks' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-removeCallbacks' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeCallbacks' class='name expandable'>removeCallbacks</a>( <span class='pre'>action</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the specified Runnable from the message queue. ...</div><div class='long'><p>Removes the specified Runnable from the message queue.\n <p>\n Calling this method when LayoutManager is not attached to a RecyclerView has no effect.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : Object {Runnable}<div class='sub-desc'><p>The Runnable to remove from the message handling queue</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if RecyclerView could ask the Handler to remove the Runnable,\n         false otherwise. When the returned value is true, the Runnable\n         may or may not have been actually removed from the message queue\n         (for instance, if the Runnable was not in the queue already.)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-postOnAnimation\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-postOnAnimation\" class=\"docClass\">postOnAnimation</a></p>\n</div></li></ul></div></div></div><div id='method-removeDetachedView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-removeDetachedView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeDetachedView' class='name expandable'>removeDetachedView</a>( <span class='pre'>child</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Finish removing a view that was previously temporarily\n detached. ...</div><div class='long'><p>Finish removing a view that was previously temporarily\n detached.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Detached child to remove</p>\n</div></li></ul></div></div></div><div id='method-removeView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-removeView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeView' class='name expandable'>removeView</a>( <span class='pre'>child</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a view from the currently attached RecyclerView if needed. ...</div><div class='long'><p>Remove a view from the currently attached RecyclerView if needed. LayoutManagers should\n use this method to completely remove a child view that is no longer needed.\n LayoutManagers should strongly consider recycling removed views using\n com.android.internal.widget.RecyclerView.Recycler.recycleView(android.view.View).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>View to remove</p>\n</div></li></ul></div></div></div><div id='method-removeViewAt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-removeViewAt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-removeViewAt' class='name expandable'>removeViewAt</a>( <span class='pre'>index</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a view from the currently attached RecyclerView if needed. ...</div><div class='long'><p>Remove a view from the currently attached RecyclerView if needed. LayoutManagers should\n use this method to completely remove a child view that is no longer needed.\n LayoutManagers should strongly consider recycling removed views using\n com.android.internal.widget.RecyclerView.Recycler.recycleView(android.view.View).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index of the child view to remove</p>\n</div></li></ul></div></div></div><div id='method-requestChildRectangleOnScreen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-requestChildRectangleOnScreen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-requestChildRectangleOnScreen' class='name expandable'>requestChildRectangleOnScreen</a>( <span class='pre'>child, rect, immediate</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a child of the RecyclerView wants a particular rectangle to be positioned\n onto the screen. ...</div><div class='long'><p>Called when a child of the RecyclerView wants a particular rectangle to be positioned\n onto the screen. See android.graphics.Rect, boolean) for more details.</p>\n\n<p> <p>The base implementation will attempt to perform a standard programmatic scroll\n to bring the given rect into view, within the padded area of the RecyclerView.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {RecyclerView}<div class='sub-desc'><p>The direct child making the request.</p>\n</div></li><li><span class='pre'>rect</span> : Object {View}<div class='sub-desc'><p>The rectangle in the child's coordinates the child\n              wishes to be on the screen.</p>\n</div></li><li><span class='pre'>immediate</span> : Object {Rect}<div class='sub-desc'><p>True to forbid animated or delayed scrolling,\n                  false otherwise</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether the group scrolled to handle the operation</p>\n</div></li></ul></div></div></div><div id='method-requestLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-requestLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-requestLayout' class='name expandable'>requestLayout</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Calls {@code RecyclerView#requestLayout} on the underlying RecyclerView ...</div><div class='long'><p>Calls {@code RecyclerView#requestLayout} on the underlying RecyclerView</p>\n</div></div></div><div id='method-requestSimpleAnimationsInNextLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-requestSimpleAnimationsInNextLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-requestSimpleAnimationsInNextLayout' class='name expandable'>requestSimpleAnimationsInNextLayout</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>A LayoutManager can call this method to force RecyclerView to run simple animations in\n the next layout pass, even if...</div><div class='long'><p>A LayoutManager can call this method to force RecyclerView to run simple animations in\n the next layout pass, even if there is not any trigger to do so. (e.g. adapter data\n change).\n <p>\n Note that, calling this method will not guarantee that RecyclerView will run animations\n at all. For example, if there is not any <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemAnimator</a> set, RecyclerView will\n not run any animations but will still clear this flag after the layout is complete.</p>\n</div></div></div><div id='method-scrollHorizontallyBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-scrollHorizontallyBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-scrollHorizontallyBy' class='name expandable'>scrollHorizontallyBy</a>( <span class='pre'>dx, recycler, state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Scroll horizontally by dx pixels in screen coordinates and return the distance traveled. ...</div><div class='long'><p>Scroll horizontally by dx pixels in screen coordinates and return the distance traveled.\n The default implementation does nothing and returns 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dx</span> : Number<div class='sub-desc'><p>distance to scroll by in pixels. X increases as scroll position\n                      approaches the right.</p>\n</div></li><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to use for fetching potentially cached views for a\n                      position</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Transient state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The actual distance scrolled. The return value will be negative if dx was\n negative and scrolling proceeeded in that direction.\n <code>Math.abs(result)</code> may be less than dx if a boundary was reached.</p>\n</div></li></ul></div></div></div><div id='method-scrollToPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-scrollToPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-scrollToPosition' class='name expandable'>scrollToPosition</a>( <span class='pre'>position</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Scroll to the specified adapter position. ...</div><div class='long'><p>Scroll to the specified adapter position.</p>\n\n<p> Actual position of the item on the screen depends on the LayoutManager implementation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Scroll to this adapter position.</p>\n</div></li></ul></div></div></div><div id='method-scrollVerticallyBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-scrollVerticallyBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-scrollVerticallyBy' class='name expandable'>scrollVerticallyBy</a>( <span class='pre'>dy, recycler, state</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Scroll vertically by dy pixels in screen coordinates and return the distance traveled. ...</div><div class='long'><p>Scroll vertically by dy pixels in screen coordinates and return the distance traveled.\n The default implementation does nothing and returns 0.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dy</span> : Number<div class='sub-desc'><p>distance to scroll in pixels. Y increases as scroll position\n                      approaches the bottom.</p>\n</div></li><li><span class='pre'>recycler</span> : Object {RecyclerView.Recycler}<div class='sub-desc'><p>Recycler to use for fetching potentially cached views for a\n                      position</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Transient state of RecyclerView</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The actual distance scrolled. The return value will be negative if dy was\n negative and scrolling proceeeded in that direction.\n <code>Math.abs(result)</code> may be less than dy if a boundary was reached.</p>\n</div></li></ul></div></div></div><div id='method-setAutoMeasureEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-setAutoMeasureEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setAutoMeasureEnabled' class='name expandable'>setAutoMeasureEnabled</a>( <span class='pre'>enabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines whether the layout should be measured by the RecyclerView or the LayoutManager\n wants to handle the layout me...</div><div class='long'><p>Defines whether the layout should be measured by the RecyclerView or the LayoutManager\n wants to handle the layout measurements itself.\n <p>\n This method is usually called by the LayoutManager with value {@code true} if it wants\n to support WRAP_CONTENT. If you are using a public LayoutManager but want to customize\n the measurement logic, you can call this method with {@code false} and override\n int) to implement your custom measurement logic.\n <p>\n AutoMeasure is a convenience mechanism for LayoutManagers to easily wrap their content or\n handle various specs provided by the RecyclerView's parent.\n It works by calling State) during an\n int) call, then calculating desired dimensions based\n on children's positions. It does this while supporting all existing animation\n capabilities of the RecyclerView.\n <p>\n AutoMeasure works as follows:\n <ol>\n <li>LayoutManager should call {@code setAutoMeasureEnabled(true)} to enable it. All of\n the framework LayoutManagers use {@code auto-measure}.</li>\n <li>When int) is called, if the provided specs are\n exact, RecyclerView will only call LayoutManager's {@code onMeasure} and return without\n doing any layout calculation.</li>\n <li>If one of the layout specs is not {@code EXACT}, the RecyclerView will start the\n layout process in {@code onMeasure} call. It will process all pending Adapter updates and\n decide whether to run a predictive layout or not. If it decides to do so, it will first\n call com.android.internal.widget.RecyclerView.State) with com.android.internal.widget.RecyclerView.State.isPreLayout() set to\n {@code true}. At this stage, <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getWidth\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getWidth\" class=\"docClass\">getWidth</a>() and <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getHeight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getHeight\" class=\"docClass\">getHeight</a>() will still\n return the width and height of the RecyclerView as of the last layout calculation.\n <p>\n After handling the predictive case, RecyclerView will call\n com.android.internal.widget.RecyclerView.State) with com.android.internal.widget.RecyclerView.State.isMeasuring() set to\n {@code true} and com.android.internal.widget.RecyclerView.State.isPreLayout() set to {@code false}. The LayoutManager can\n access the measurement specs via <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getHeight\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getHeight\" class=\"docClass\">getHeight</a>(), <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getHeightMode\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getHeightMode\" class=\"docClass\">getHeightMode</a>(),\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getWidth\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getWidth\" class=\"docClass\">getWidth</a>() and <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-getWidthMode\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-getWidthMode\" class=\"docClass\">getWidthMode</a>().</p></li>\n <li>After the layout calculation, RecyclerView sets the measured width &amp; height by\n calculating the bounding box for the children (+ RecyclerView's padding). The\n LayoutManagers can override int, int) to choose\n different values. For instance, GridLayoutManager overrides this value to handle the case\n where if it is vertical and has 3 columns but only 2 items, it should still measure its\n width to fit 3 items, not 2.</li>\n <li>Any following on measure call to the RecyclerView will run\n com.android.internal.widget.RecyclerView.State) with com.android.internal.widget.RecyclerView.State.isMeasuring() set to\n {@code true} and com.android.internal.widget.RecyclerView.State.isPreLayout() set to {@code false}. RecyclerView will\n take care of which views are actually added / removed / moved / changed for animations so\n that the LayoutManager should not worry about them and handle each\n com.android.internal.widget.RecyclerView.State) call as if it is the last one.\n </li>\n <li>When measure is complete and RecyclerView's\n int, int, int, int) method is called, RecyclerView checks\n whether it already did layout calculations during the measure pass and if so, it re-uses\n that information. It may still decide to call com.android.internal.widget.RecyclerView.State)\n if the last measure spec was different from the final dimensions or adapter contents\n have changed between the measure call and the layout call.</li>\n <li>Finally, animations are calculated and run as usual.</li>\n </ol></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p><code>True</code> if the Layout should be measured by the\n                             RecyclerView, <code>false</code> if the LayoutManager wants\n                             to measure itself.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setMeasuredDimension\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-setMeasuredDimension\" class=\"docClass\">setMeasuredDimension</a>(Rect, int, int)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isAutoMeasureEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-isAutoMeasureEnabled\" class=\"docClass\">isAutoMeasureEnabled</a>()</p>\n</div></li></ul></div></div></div><div id='method-setItemPrefetchEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-setItemPrefetchEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setItemPrefetchEnabled' class='name expandable'>setItemPrefetchEnabled</a>( <span class='pre'>enabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether the LayoutManager should be queried for views outside of\n its viewport while the UI thread is idle betwe...</div><div class='long'><p>Sets whether the LayoutManager should be queried for views outside of\n its viewport while the UI thread is idle between frames.</p>\n\n<p> <p>If enabled, the LayoutManager will be queried for items to inflate/bind in between\n view system traversals on devices running API 21 or greater. Default value is true.</p></p>\n\n<p> <p>On platforms API level 21 and higher, the UI thread is idle between passing a frame\n to RenderThread and the starting up its next frame at the next VSync pulse. By\n prefetching out of window views in this time period, delays from inflation and view\n binding are much less likely to cause jank and stuttering during scrolls and flings.</p></p>\n\n<p> <p>While prefetch is enabled, it will have the side effect of expanding the effective\n size of the View cache to hold prefetched views.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>enabled</span> : Boolean<div class='sub-desc'><p><code>True</code> if items should be prefetched in between traversals.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isItemPrefetchEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-isItemPrefetchEnabled\" class=\"docClass\">isItemPrefetchEnabled</a>()</p>\n</div></li></ul></div></div></div><div id='method-setMeasuredDimension' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-setMeasuredDimension' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setMeasuredDimension' class='name expandable'>setMeasuredDimension</a>( <span class='pre'>widthSize, heightSize</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>int) Set the measured dimensions of the\n host RecyclerView. ...</div><div class='long'><p>int) Set the measured dimensions of the\n host RecyclerView.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>widthSize</span> : Number<div class='sub-desc'><p>Measured width</p>\n</div></li><li><span class='pre'>heightSize</span> : Number<div class='sub-desc'><p>Measured height</p>\n</div></li></ul></div></div></div><div id='method-setMeasurementCacheEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-setMeasurementCacheEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-setMeasurementCacheEnabled' class='name expandable'>setMeasurementCacheEnabled</a>( <span class='pre'>measurementCacheEnabled</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets whether RecyclerView should use its own measurement cache for the children. ...</div><div class='long'><p>Sets whether RecyclerView should use its own measurement cache for the children. This is\n a more aggressive cache than the framework uses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>measurementCacheEnabled</span> : Boolean<div class='sub-desc'><p>True to enable the measurement cache, false otherwise.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-isMeasurementCacheEnabled\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-isMeasurementCacheEnabled\" class=\"docClass\">isMeasurementCacheEnabled</a>()</p>\n</div></li></ul></div></div></div><div id='method-smoothScrollToPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-smoothScrollToPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-smoothScrollToPosition' class='name expandable'>smoothScrollToPosition</a>( <span class='pre'>recyclerView, state, position</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Smooth scroll to the specified adapter position. ...</div><div class='long'><p>Smooth scroll to the specified adapter position.</p>\n\n\n<p> <p>To support smooth scrolling, override this method, create your <a href=\"#!/api/com.android.internal.widget.RecyclerView.SmoothScroller\" rel=\"com.android.internal.widget.RecyclerView.SmoothScroller\" class=\"docClass\">com.android.internal.widget.RecyclerView.SmoothScroller</a>\n instance and call <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-startSmoothScroll\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-startSmoothScroll\" class=\"docClass\">startSmoothScroll</a>(SmoothScroller).\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclerView</span> : Object {RecyclerView}<div class='sub-desc'><p>The RecyclerView to which this layout manager is attached</p>\n</div></li><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>Current State of RecyclerView</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Scroll to this adapter position.</p>\n</div></li></ul></div></div></div><div id='method-startSmoothScroll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-startSmoothScroll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-startSmoothScroll' class='name expandable'>startSmoothScroll</a>( <span class='pre'>smoothScroller</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts a smooth scroll using the provided SmoothScroller. ...</div><div class='long'><p>Starts a smooth scroll using the provided SmoothScroller.</p>\n\n\n<p> <p>Calling this method will cancel any previous smooth scroll request.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>smoothScroller</span> : Object {RecyclerView.SmoothScroller}<div class='sub-desc'><p>Instance which defines how smooth scroll should be animated</p>\n</div></li></ul></div></div></div><div id='method-stopIgnoringView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-stopIgnoringView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-stopIgnoringView' class='name expandable'>stopIgnoringView</a>( <span class='pre'>view</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>View can be scrapped and recycled again. ...</div><div class='long'><p>View can be scrapped and recycled again.\n <p>\n Note that calling this method removes all information in the view holder.\n <p>\n You can call this method only if your LayoutManger is in onLayout or onScroll callback.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>View to ignore.</p>\n</div></li></ul></div></div></div><div id='method-supportsPredictiveItemAnimations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.LayoutManager'>com.android.internal.widget.RecyclerView.LayoutManager</span><br/><a href='source/LayoutManager.html#com-android-internal-widget-RecyclerView-LayoutManager-method-supportsPredictiveItemAnimations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-supportsPredictiveItemAnimations' class='name expandable'>supportsPredictiveItemAnimations</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether this LayoutManager supports automatic item animations. ...</div><div class='long'><p>Returns whether this LayoutManager supports automatic item animations.\n A LayoutManager wishing to support item animations should obey certain\n rules as outlined in com.android.internal.widget.RecyclerView.State).\n The default return value is <code>false</code>, so subclasses of LayoutManager\n will not get predictive item animations by default.</p>\n\n<p> <p>Whether item animations are enabled in a RecyclerView is determined both\n by the return value from this method and the\n ItemAnimator set on the\n RecyclerView itself. If the RecyclerView has a non-null ItemAnimator but this\n method returns false, then simple item animations will be enabled, in which\n views that are moving onto or off of the screen are simply faded in/out. If\n the RecyclerView has a non-null ItemAnimator and this method returns true,\n then there will be two calls to com.android.internal.widget.RecyclerView.State) to\n setup up the information needed to more intelligently predict where appearing\n and disappearing views should be animated from/to.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if predictive item animations should be enabled, false otherwise</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});