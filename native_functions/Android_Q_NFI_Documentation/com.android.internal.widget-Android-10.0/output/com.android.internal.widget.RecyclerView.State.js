Ext.data.JsonP.com_android_internal_widget_RecyclerView_State({"tagname":"class","name":"com.android.internal.widget.RecyclerView.State","autodetected":{},"files":[{"filename":"State.js","href":"State.html#com-android-internal-widget-RecyclerView-State"}],"extends":"java.lang.Object","members":[{"name":"didStructureChange","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-didStructureChange","meta":{}},{"name":"get","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-get","meta":{}},{"name":"getItemCount","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-getItemCount","meta":{}},{"name":"getTargetScrollPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-getTargetScrollPosition","meta":{}},{"name":"hasTargetScrollPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-hasTargetScrollPosition","meta":{}},{"name":"isMeasuring","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-isMeasuring","meta":{}},{"name":"isPreLayout","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-isPreLayout","meta":{}},{"name":"put","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-put","meta":{}},{"name":"remove","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-remove","meta":{}},{"name":"toString","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-toString","meta":{}},{"name":"willRunPredictiveAnimations","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-willRunPredictiveAnimations","meta":{}},{"name":"willRunSimpleAnimations","tagname":"method","owner":"com.android.internal.widget.RecyclerView.State","id":"method-willRunSimpleAnimations","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.widget.RecyclerView.State","short_doc":"Contains useful information about the current RecyclerView state like target scroll\n position or view focus. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.widget.RecyclerView.State</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/State.html#com-android-internal-widget-RecyclerView-State' target='_blank'>State.js</a></div></pre><div class='doc-contents'><p>Contains useful information about the current RecyclerView state like target scroll\n position or view focus. State object can also keep arbitrary data, identified by resource\n ids.</p>\n\n\n<p> <p>Often times, RecyclerView components will need to pass information between each other.\n To provide a well defined data bus between components, RecyclerView passes the same State\n object to component callbacks and these components can use it to exchange data.</p>\n <p>If you implement custom components, you can use State's put/get/remove methods to pass\n data between your components without needing to manage their lifecycles.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-didStructureChange' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-didStructureChange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-didStructureChange' class='name expandable'>didStructureChange</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the structure of the data set has changed since the last call to\n         onLayoutChildren, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-get' class='name expandable'>get</a>( <span class='pre'>resourceId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the Object mapped from the specified id, or null\n if no such data exists. ...</div><div class='long'><p>Gets the Object mapped from the specified id, or <code>null</code>\n if no such data exists.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>resourceId</span> : Number<div class='sub-desc'><p>Id of the resource you want to remove. It is suggested to use R.id.*\n                   to\n                   preserve cross functionality and avoid conflicts.</p>\n</div></li></ul></div></div></div><div id='method-getItemCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-getItemCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-getItemCount' class='name expandable'>getItemCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the total number of items that can be laid out. ...</div><div class='long'><p>Returns the total number of items that can be laid out. Note that this number is not\n necessarily equal to the number of items in the adapter, so you should always use this\n number for your position calculations and never access the adapter directly.\n <p>\n RecyclerView listens for Adapter's notify events and calculates the effects of adapter\n data changes on existing Views. These calculations are used to decide which animations\n should be run.\n <p>\n To support predictive animations, RecyclerView may rewrite or reorder Adapter changes to\n present the correct state to LayoutManager in pre-layout pass.\n <p>\n For example, a newly added item is not included in pre-layout item count because\n pre-layout reflects the contents of the adapter before the item is added. Behind the\n scenes, RecyclerView offsets com.android.internal.widget.RecyclerView.Recycler.getViewForPosition(int) calls such that\n LayoutManager does not know about the new item's existence in pre-layout. The item will\n be available in second layout pass and will be included in the item count. Similar\n adjustments are made for moved and removed items as well.\n <p>\n You can get the adapter's item count via com.android.internal.widget.RecyclerView.LayoutManager.getItemCount() method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of items currently available\n@see LayoutManager#getItemCount()</p>\n</div></li></ul></div></div></div><div id='method-getTargetScrollPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-getTargetScrollPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-getTargetScrollPosition' class='name expandable'>getTargetScrollPosition</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>If scroll is triggered to make a certain item visible, this value will return the\n adapter index of that item. ...</div><div class='long'><p>If scroll is triggered to make a certain item visible, this value will return the\n adapter index of that item.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Adapter index of the target item or\n RecyclerView.NO_POSITION if there is no target\n position.</p>\n</div></li></ul></div></div></div><div id='method-hasTargetScrollPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-hasTargetScrollPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-hasTargetScrollPosition' class='name expandable'>hasTargetScrollPosition</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns if current scroll has a target position. ...</div><div class='long'><p>Returns if current scroll has a target position.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if scroll is being triggered to make a certain position visible\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.State-method-getTargetScrollPosition\" rel=\"com.android.internal.widget.RecyclerView.State-method-getTargetScrollPosition\" class=\"docClass\">getTargetScrollPosition</a>()</p>\n</div></li></ul></div></div></div><div id='method-isMeasuring' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-isMeasuring' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-isMeasuring' class='name expandable'>isMeasuring</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the RecyclerView is currently measuring the layout. ...</div><div class='long'><p>Returns true if the RecyclerView is currently measuring the layout. This value is\n {@code true} only if the LayoutManager opted into the auto measure API and RecyclerView\n has non-exact measurement specs.\n <p>\n Note that if the LayoutManager supports predictive animations and it is calculating the\n pre-layout step, this value will be {@code false} even if the RecyclerView is in\n {@code onMeasure} call. This is because pre-layout means the previous state of the\n RecyclerView and measurements made for that state cannot change the RecyclerView's size.\n LayoutManager is always guaranteed to receive another call to\n State) when this happens.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the RecyclerView is currently calculating its bounds, false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-isPreLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-isPreLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-isPreLayout' class='name expandable'>isPreLayout</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if ...</div><div class='long'><p>Returns true if</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-put' class='name expandable'>put</a>( <span class='pre'>resourceId, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds a mapping from the specified id to the specified value, replacing the previous\n mapping from the specified key i...</div><div class='long'><p>Adds a mapping from the specified id to the specified value, replacing the previous\n mapping from the specified key if there was one.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>resourceId</span> : Number<div class='sub-desc'><p>Id of the resource you want to add. It is suggested to use R.id.* to\n                   preserve cross functionality and avoid conflicts.</p>\n</div></li><li><span class='pre'>data</span> : Object {Object}<div class='sub-desc'><p>The data you want to associate with the resourceId.</p>\n</div></li></ul></div></div></div><div id='method-remove' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-remove' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-remove' class='name expandable'>remove</a>( <span class='pre'>resourceId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the mapping from the specified id, if there was any. ...</div><div class='long'><p>Removes the mapping from the specified id, if there was any.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>resourceId</span> : Number<div class='sub-desc'><p>Id of the resource you want to remove. It is suggested to use R.id.* to\n                   preserve cross functionality and avoid conflicts.</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-willRunPredictiveAnimations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-willRunPredictiveAnimations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-willRunPredictiveAnimations' class='name expandable'>willRunPredictiveAnimations</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether RecyclerView will run predictive animations in this layout pass\n or not. ...</div><div class='long'><p>Returns whether RecyclerView will run predictive animations in this layout pass\n or not.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if RecyclerView is calculating predictive animations to be run at the end\n         of the layout pass.</p>\n</div></li></ul></div></div></div><div id='method-willRunSimpleAnimations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.State'>com.android.internal.widget.RecyclerView.State</span><br/><a href='source/State.html#com-android-internal-widget-RecyclerView-State-method-willRunSimpleAnimations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.State-method-willRunSimpleAnimations' class='name expandable'>willRunSimpleAnimations</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether RecyclerView will run simple animations in this layout pass\n or not. ...</div><div class='long'><p>Returns whether RecyclerView will run simple animations in this layout pass\n or not.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if RecyclerView is calculating simple animations to be run at the end of\n         the layout pass.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});