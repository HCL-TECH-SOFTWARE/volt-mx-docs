Ext.data.JsonP.com_android_internal_widget_RecyclerView_ViewHolder({"tagname":"class","name":"com.android.internal.widget.RecyclerView.ViewHolder","autodetected":{},"files":[{"filename":"ViewHolder.js","href":"ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder"}],"extends":"java.lang.Object","members":[{"name":"itemView","tagname":"property","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"property-itemView","meta":{}},{"name":"getAdapterPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-getAdapterPosition","meta":{}},{"name":"getItemId","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-getItemId","meta":{}},{"name":"getItemViewType","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-getItemViewType","meta":{}},{"name":"getLayoutPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-getLayoutPosition","meta":{}},{"name":"getOldPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-getOldPosition","meta":{}},{"name":"getPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-getPosition","meta":{"deprecated":{"text":"<p>This method is deprecated because its meaning is ambiguous due to the async\n handling of adapter updates. Please use getLayoutPosition() or\n getAdapterPosition() depending on your use case.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getLayoutPosition\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-getLayoutPosition\" class=\"docClass\">getLayoutPosition</a>()\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition\" class=\"docClass\">getAdapterPosition</a>()</p>\n"}}},{"name":"isRecyclable","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-isRecyclable","meta":{}},{"name":"setIsRecyclable","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-setIsRecyclable","meta":{}},{"name":"toString","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ViewHolder","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.widget.RecyclerView.ViewHolder","short_doc":"A ViewHolder describes an item view and metadata about its place within the RecyclerView. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.widget.RecyclerView.ViewHolder</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder' target='_blank'>ViewHolder.js</a></div></pre><div class='doc-contents'><p>A ViewHolder describes an item view and metadata about its place within the RecyclerView.</p>\n\n<p> <p><a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter\" rel=\"com.android.internal.widget.RecyclerView.Adapter\" class=\"docClass\">com.android.internal.widget.RecyclerView.Adapter</a> implementations should subclass ViewHolder and add fields for caching\n potentially expensive View.findViewById(int) results.</p></p>\n\n<p> <p>While <a href=\"#!/api/com.android.internal.widget.ActionBarOverlayLayout.LayoutParams\" rel=\"com.android.internal.widget.ActionBarOverlayLayout.LayoutParams\" class=\"docClass\">com.android.internal.widget.ActionBarOverlayLayout.LayoutParams</a> belong to the <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a>,\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolders</a> belong to the adapter. Adapters should feel free to use\n their own custom ViewHolder implementations to store data that makes binding view contents\n easier. Implementations should assume that individual item views will hold strong references\n to <code>ViewHolder</code> objects and that <code>RecyclerView</code> instances may hold\n strong references to extra off-screen item views for caching purposes</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-itemView' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-property-itemView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-property-itemView' class='name expandable'>itemView</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getAdapterPosition' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-getAdapterPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition' class='name expandable'>getAdapterPosition</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the Adapter position of the item represented by this ViewHolder. ...</div><div class='long'><p>Returns the Adapter position of the item represented by this ViewHolder.\n <p>\n Note that this might be different than the <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getLayoutPosition\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-getLayoutPosition\" class=\"docClass\">getLayoutPosition</a>() if there are\n pending adapter updates but a new layout pass has not happened yet.\n <p>\n RecyclerView does not handle any adapter updates until the next layout traversal. This\n may create temporary inconsistencies between what user sees on the screen and what\n adapter contents have. This inconsistency is not important since it will be less than\n 16ms but it might be a problem if you want to use ViewHolder position to access the\n adapter. Sometimes, you may need to get the exact adapter position to do\n some actions in response to user events. In that case, you should use this method which\n will calculate the Adapter position of the ViewHolder.\n <p>\n Note that if you've called com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged(), until the\n next layout pass, the return value of this method will be NO_POSITION.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The adapter position of the item if it still exists in the adapter.\n RecyclerView.NO_POSITION if item has been removed from the adapter,\n RecyclerView.Adapter.notifyDataSetChanged() has been called after the last\n layout pass or the ViewHolder has already been recycled.</p>\n</div></li></ul></div></div></div><div id='method-getItemId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-getItemId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getItemId' class='name expandable'>getItemId</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns The itemId represented by this ViewHolder. ...</div><div class='long'><p>Returns The itemId represented by this ViewHolder.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The item's id if adapter has stable ids, RecyclerView.NO_ID\n otherwise</p>\n</div></li></ul></div></div></div><div id='method-getItemViewType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-getItemViewType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getItemViewType' class='name expandable'>getItemViewType</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The view type of this ViewHolder.</p>\n</div></li></ul></div></div></div><div id='method-getLayoutPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-getLayoutPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getLayoutPosition' class='name expandable'>getLayoutPosition</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the position of the ViewHolder in terms of the latest layout pass. ...</div><div class='long'><p>Returns the position of the ViewHolder in terms of the latest layout pass.\n <p>\n This position is mostly used by RecyclerView components to be consistent while\n RecyclerView lazily processes adapter updates.\n <p>\n For performance and animation reasons, RecyclerView batches all adapter updates until the\n next layout pass. This may cause mismatches between the Adapter position of the item and\n the position it had in the latest layout calculations.\n <p>\n LayoutManagers should always call this method while doing calculations based on item\n positions. All methods in <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a>, <a href=\"#!/api/com.android.internal.widget.RecyclerView.State\" rel=\"com.android.internal.widget.RecyclerView.State\" class=\"docClass\">com.android.internal.widget.RecyclerView.State</a>,\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.Recycler\" rel=\"com.android.internal.widget.RecyclerView.Recycler\" class=\"docClass\">com.android.internal.widget.RecyclerView.Recycler</a> that receive a position expect it to be the layout position\n of the item.\n <p>\n If LayoutManager needs to call an external method that requires the adapter position of\n the item, it can use <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition\" class=\"docClass\">getAdapterPosition</a>() or\n com.android.internal.widget.RecyclerView.Recycler.convertPreLayoutPositionToPostLayout(int).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the adapter position of the ViewHolder in the latest layout pass.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition\" class=\"docClass\">getAdapterPosition</a>()</p>\n</div></li></ul></div></div></div><div id='method-getOldPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-getOldPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getOldPosition' class='name expandable'>getOldPosition</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>When LayoutManager supports animations, RecyclerView tracks 3 positions for ViewHolders\n to perform animations. ...</div><div class='long'><p>When LayoutManager supports animations, RecyclerView tracks 3 positions for ViewHolders\n to perform animations.\n <p>\n If a ViewHolder was laid out in the previous onLayout call, old position will keep its\n adapter index in the previous layout.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The previous adapter index of the Item represented by this ViewHolder or\n NO_POSITION if old position does not exists or cleared (pre-layout is\n complete).</p>\n</div></li></ul></div></div></div><div id='method-getPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-getPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getPosition' class='name expandable'>getPosition</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This method is deprecated because its meaning is ambiguous due to the async\n handling of adapter updates. Please use getLayoutPosition() or\n getAdapterPosition() depending on your use case.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getLayoutPosition\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-getLayoutPosition\" class=\"docClass\">getLayoutPosition</a>()\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-getAdapterPosition\" class=\"docClass\">getAdapterPosition</a>()</p>\n\n        </div>\n</div></div></div><div id='method-isRecyclable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-isRecyclable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-isRecyclable' class='name expandable'>isRecyclable</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this item is available to be recycled, false otherwise.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-setIsRecyclable\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-setIsRecyclable\" class=\"docClass\">setIsRecyclable</a>(boolean)</p>\n</div></li></ul></div></div></div><div id='method-setIsRecyclable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-setIsRecyclable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-setIsRecyclable' class='name expandable'>setIsRecyclable</a>( <span class='pre'>recyclable</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Informs the recycler whether this item can be recycled. ...</div><div class='long'><p>Informs the recycler whether this item can be recycled. Views which are not\n recyclable will not be reused for other items until setIsRecyclable() is\n later set to true. Calls to setIsRecyclable() should always be paired (one\n call to setIsRecyclabe(false) should always be matched with a later call to\n setIsRecyclable(true)). Pairs of calls may be nested, as the state is internally\n reference-counted.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>recyclable</span> : Boolean<div class='sub-desc'><p>Whether this item is available to be recycled. Default value\n is true.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-isRecyclable\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder-method-isRecyclable\" class=\"docClass\">isRecyclable</a>()</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ViewHolder'>com.android.internal.widget.RecyclerView.ViewHolder</span><br/><a href='source/ViewHolder.html#com-android-internal-widget-RecyclerView-ViewHolder-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ViewHolder-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});