Ext.data.JsonP.com_android_internal_widget_RecyclerView_ItemAnimator({"tagname":"class","name":"com.android.internal.widget.RecyclerView.ItemAnimator","autodetected":{},"files":[{"filename":"ItemAnimator.js","href":"ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator"}],"extends":"java.lang.Object","members":[{"name":"FLAG_APPEARED_IN_PRE_LAYOUT","tagname":"property","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"property-FLAG_APPEARED_IN_PRE_LAYOUT","meta":{}},{"name":"FLAG_CHANGED","tagname":"property","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"property-FLAG_CHANGED","meta":{}},{"name":"FLAG_INVALIDATED","tagname":"property","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"property-FLAG_INVALIDATED","meta":{}},{"name":"FLAG_MOVED","tagname":"property","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"property-FLAG_MOVED","meta":{}},{"name":"FLAG_REMOVED","tagname":"property","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"property-FLAG_REMOVED","meta":{}},{"name":"animateAppearance","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-animateAppearance","meta":{}},{"name":"animateChange","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-animateChange","meta":{}},{"name":"animateDisappearance","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-animateDisappearance","meta":{}},{"name":"animatePersistence","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-animatePersistence","meta":{}},{"name":"canReuseUpdatedViewHolder","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-canReuseUpdatedViewHolder","meta":{}},{"name":"dispatchAnimationFinished","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-dispatchAnimationFinished","meta":{}},{"name":"dispatchAnimationStarted","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-dispatchAnimationStarted","meta":{}},{"name":"dispatchAnimationsFinished","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-dispatchAnimationsFinished","meta":{}},{"name":"endAnimation","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-endAnimation","meta":{}},{"name":"endAnimations","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-endAnimations","meta":{}},{"name":"getAddDuration","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-getAddDuration","meta":{}},{"name":"getChangeDuration","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-getChangeDuration","meta":{}},{"name":"getMoveDuration","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-getMoveDuration","meta":{}},{"name":"getRemoveDuration","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-getRemoveDuration","meta":{}},{"name":"isRunning","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-isRunning","meta":{}},{"name":"obtainHolderInfo","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-obtainHolderInfo","meta":{}},{"name":"onAnimationFinished","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-onAnimationFinished","meta":{}},{"name":"onAnimationStarted","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-onAnimationStarted","meta":{}},{"name":"recordPostLayoutInformation","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-recordPostLayoutInformation","meta":{}},{"name":"recordPreLayoutInformation","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-recordPreLayoutInformation","meta":{}},{"name":"runPendingAnimations","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-runPendingAnimations","meta":{}},{"name":"setAddDuration","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-setAddDuration","meta":{}},{"name":"setChangeDuration","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-setChangeDuration","meta":{}},{"name":"setMoveDuration","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-setMoveDuration","meta":{}},{"name":"setRemoveDuration","tagname":"method","owner":"com.android.internal.widget.RecyclerView.ItemAnimator","id":"method-setRemoveDuration","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.widget.RecyclerView.ItemAnimator","short_doc":"This class defines the animations that take place on items as changes are made\n to the adapter. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["com.android.internal.widget.SimpleItemAnimator"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.widget.RecyclerView.ItemAnimator</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/com.android.internal.widget.SimpleItemAnimator' rel='com.android.internal.widget.SimpleItemAnimator' class='docClass'>com.android.internal.widget.SimpleItemAnimator</a></div><h4>Files</h4><div class='dependency'><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator' target='_blank'>ItemAnimator.js</a></div></pre><div class='doc-contents'><p>This class defines the animations that take place on items as changes are made\n to the adapter.</p>\n\n<p> Subclasses of ItemAnimator can be used to implement custom animations for actions on\n ViewHolder items. The RecyclerView will manage retaining these items while they\n are being animated, but implementors must call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder)\n when a ViewHolder's animation is finished. In other words, there must be a matching\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) call for each\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo) animateAppearance(),\n com.android.internal.widget.RecyclerView.ViewHolder, com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateChange()\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo) animatePersistence(),\n and\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateDisappearance() call.</p>\n\n<p> <p>By default, RecyclerView uses <a href=\"#!/api/com.android.internal.widget.DefaultItemAnimator\" rel=\"com.android.internal.widget.DefaultItemAnimator\" class=\"docClass\">com.android.internal.widget.DefaultItemAnimator</a>.</p></p>\n\n<p> @see #setItemAnimator(ItemAnimator)</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-FLAG_APPEARED_IN_PRE_LAYOUT' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-property-FLAG_APPEARED_IN_PRE_LAYOUT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-property-FLAG_APPEARED_IN_PRE_LAYOUT' class='name expandable'>FLAG_APPEARED_IN_PRE_LAYOUT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>This ViewHolder was not laid out but has been added to the layout in pre-layout state\nby the com.android.internal.wid...</div><div class='long'><p>This ViewHolder was not laid out but has been added to the layout in pre-layout state\nby the <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a>. This means that the item was already in the Adapter but\ninvisible and it may become visible in the post layout phase. LayoutManagers may prefer\nto add new items in pre-layout to specify their virtual location when they are invisible\n(e.g. to specify the item should <i>animate in</i> from below the visible area).</p>\n\n<p><p>\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" class=\"docClass\">recordPreLayoutInformation</a>(State, ViewHolder, int, List)</p>\n<p>Defaults to: <code>&quot;4096&quot;</code></p></div></div></div><div id='property-FLAG_CHANGED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-property-FLAG_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-property-FLAG_CHANGED' class='name expandable'>FLAG_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The Item represented by this ViewHolder is updated. ...</div><div class='long'><p>The Item represented by this ViewHolder is updated.</p>\n\n<p><p>\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" class=\"docClass\">recordPreLayoutInformation</a>(State, ViewHolder, int, List)</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-FLAG_INVALIDATED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-property-FLAG_INVALIDATED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-property-FLAG_INVALIDATED' class='name expandable'>FLAG_INVALIDATED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Adapter com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() has been called and the content\nrepre...</div><div class='long'><p>Adapter com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() has been called and the content\nrepresented by this ViewHolder is invalid.</p>\n\n<p><p>\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" class=\"docClass\">recordPreLayoutInformation</a>(State, ViewHolder, int, List)</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-FLAG_MOVED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-property-FLAG_MOVED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-property-FLAG_MOVED' class='name expandable'>FLAG_MOVED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The position of the Item represented by this ViewHolder has been changed. ...</div><div class='long'><p>The position of the Item represented by this ViewHolder has been changed. This flag is\nnot bound to int). It might be set in response to\nany adapter change that may have a side effect on this item. (e.g. The item before this\none has been removed from the Adapter).</p>\n\n<p><p>\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" class=\"docClass\">recordPreLayoutInformation</a>(State, ViewHolder, int, List)</p>\n<p>Defaults to: <code>&quot;2048&quot;</code></p></div></div></div><div id='property-FLAG_REMOVED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-property-FLAG_REMOVED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-property-FLAG_REMOVED' class='name expandable'>FLAG_REMOVED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The Item represented by this ViewHolder is removed from the adapter. ...</div><div class='long'><p>The Item represented by this ViewHolder is removed from the adapter.</p>\n\n<p><p>\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" class=\"docClass\">recordPreLayoutInformation</a>(State, ViewHolder, int, List)</p>\n<p>Defaults to: <code>&quot;8&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-animateAppearance' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-animateAppearance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateAppearance' class='name expandable'>animateAppearance</a>( <span class='pre'>viewHolder, preLayoutInfo, postLayoutInfo</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the RecyclerView when a ViewHolder is added to the layout. ...</div><div class='long'><p>Called by the RecyclerView when a ViewHolder is added to the layout.\n <p>\n In detail, this means that the ViewHolder was <b>not</b> a child when the layout started\n but has  been added by the LayoutManager. It might be newly added to the adapter or\n simply become visible due to other factors.\n <p>\n ItemAnimator must call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) when the animation\n is complete (or instantly call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) if it\n decides not to animate the view).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which should be animated</p>\n</div></li><li><span class='pre'>preLayoutInfo</span> : Object {RecyclerView.ItemAnimator.ItemHolderInfo}<div class='sub-desc'><p>The information that was returned from\n                       ViewHolder, int, List).\n                       Might be null if Item was just added to the adapter or\n                       LayoutManager does not support predictive animations or it could\n                       not predict that this ViewHolder will become visible.</p>\n</div></li><li><span class='pre'>postLayoutInfo</span> : Object {RecyclerView.ItemAnimator.ItemHolderInfo}<div class='sub-desc'><p>The information that was returned from ViewHolder, int, List).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if a later call to runPendingAnimations() is requested,\n false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-animateChange' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-animateChange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateChange' class='name expandable'>animateChange</a>( <span class='pre'>oldHolder, newHolder, preLayoutInfo, postLayoutInfo</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the RecyclerView when an adapter item is present both before and after the\n layout and RecyclerView has rec...</div><div class='long'><p>Called by the RecyclerView when an adapter item is present both before and after the\n layout and RecyclerView has received a com.android.internal.widget.RecyclerView.Adapter.notifyItemChanged(int) call\n for it. This method may also be called when\n com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() is called and adapter has stable ids so that\n RecyclerView could still rebind views to the same ViewHolders. If viewType changes when\n com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() is called, this method <b>will not</b> be called,\n instead, com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo) will be\n called for the new ViewHolder and the old one will be recycled.\n <p>\n If this method is called due to a com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() call, there is\n a good possibility that item contents didn't really change but it is rebound from the\n adapter. <a href=\"#!/api/com.android.internal.widget.DefaultItemAnimator\" rel=\"com.android.internal.widget.DefaultItemAnimator\" class=\"docClass\">com.android.internal.widget.DefaultItemAnimator</a> will skip animating the View if its location on the\n screen didn't change and your animator should handle this case as well and avoid creating\n unnecessary animations.\n <p>\n When an item is updated, ItemAnimator has a chance to ask RecyclerView to keep the\n previous presentation of the item as-is and supply a new ViewHolder for the updated\n presentation (see: List).\n This is useful if you don't know the contents of the Item and would like\n to cross-fade the old and the new one (<a href=\"#!/api/com.android.internal.widget.DefaultItemAnimator\" rel=\"com.android.internal.widget.DefaultItemAnimator\" class=\"docClass\">com.android.internal.widget.DefaultItemAnimator</a> uses this technique).\n <p>\n When you are writing a custom item animator for your layout, it might be more performant\n and elegant to re-use the same ViewHolder and animate the content changes manually.\n <p>\n When com.android.internal.widget.RecyclerView.Adapter.notifyItemChanged(int) is called, the Item's view type may change.\n If the Item's view type has changed or ItemAnimator returned <code>false</code> for\n this ViewHolder when List) was called, the\n <code>oldHolder</code> and <code>newHolder</code> will be different ViewHolder instances\n which represent the same Item. In that case, only the new ViewHolder is visible\n to the LayoutManager but RecyclerView keeps old ViewHolder attached for animations.\n <p>\n ItemAnimator must call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) for each distinct\n ViewHolder when their animation is complete\n (or instantly call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) if it decides not to\n animate the view).\n <p>\n  If oldHolder and newHolder are the same instance, you should call\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) <b>only once</b>.\n <p>\n Note that when a ViewHolder both changes and disappears in the same layout pass, the\n animation callback method which will be called by the RecyclerView depends on the\n ItemAnimator's decision whether to re-use the same ViewHolder or not, and also the\n LayoutManager's decision whether to layout the changed version of a disappearing\n ViewHolder or not. RecyclerView will call\n {@code animateChange} instead of\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateDisappearance if and only if the ItemAnimator returns {@code false} from\n canReuseUpdatedViewHolder and the\n LayoutManager lays out a new disappearing view that holds the updated information.\n Built-in LayoutManagers try to avoid laying out updated versions of disappearing views.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>oldHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder before the layout is started, might be the same\n                      instance with newHolder.</p>\n</div></li><li><span class='pre'>newHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder after the layout is finished, might be the same\n                      instance with oldHolder.</p>\n</div></li><li><span class='pre'>preLayoutInfo</span> : Object {RecyclerView.ItemAnimator.ItemHolderInfo}<div class='sub-desc'><p>The information that was returned from\n                       ViewHolder, int, List).</p>\n</div></li><li><span class='pre'>postLayoutInfo</span> : Object {RecyclerView.ItemAnimator.ItemHolderInfo}<div class='sub-desc'><p>The information that was returned from ViewHolder, int, List).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if a later call to runPendingAnimations() is requested,\n false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-animateDisappearance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-animateDisappearance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateDisappearance' class='name expandable'>animateDisappearance</a>( <span class='pre'>viewHolder, preLayoutInfo, postLayoutInfo</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the RecyclerView when a ViewHolder has disappeared from the layout. ...</div><div class='long'><p>Called by the RecyclerView when a ViewHolder has disappeared from the layout.\n <p>\n This means that the View was a child of the LayoutManager when layout started but has\n been removed by the LayoutManager. It might have been removed from the adapter or simply\n become invisible due to other factors. You can distinguish these two cases by checking\n the change flags that were passed to\n com.android.internal.widget.RecyclerView.ViewHolder, int, List).\n <p>\n Note that when a ViewHolder both changes and disappears in the same layout pass, the\n animation callback method which will be called by the RecyclerView depends on the\n ItemAnimator's decision whether to re-use the same ViewHolder or not, and also the\n LayoutManager's decision whether to layout the changed version of a disappearing\n ViewHolder or not. RecyclerView will call\n com.android.internal.widget.RecyclerView.ViewHolder, com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateChange instead of {@code animateDisappearance} if and only if the ItemAnimator\n returns {@code false} from\n canReuseUpdatedViewHolder and the\n LayoutManager lays out a new disappearing view that holds the updated information.\n Built-in LayoutManagers try to avoid laying out updated versions of disappearing views.\n <p>\n If LayoutManager supports predictive animations, it might provide a target disappear\n location for the View by laying it out in that location. When that happens,\n RecyclerView will call com.android.internal.widget.RecyclerView.ViewHolder) and the\n response of that call will be passed to this method as the <code>postLayoutInfo</code>.\n <p>\n ItemAnimator must call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) when the animation\n is complete (or instantly call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) if it\n decides not to animate the view).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which should be animated</p>\n</div></li><li><span class='pre'>preLayoutInfo</span> : Object {RecyclerView.ItemAnimator.ItemHolderInfo}<div class='sub-desc'><p>The information that was returned from\n                      ViewHolder, int, List).</p>\n</div></li><li><span class='pre'>postLayoutInfo</span> : Object {RecyclerView.ItemAnimator.ItemHolderInfo}<div class='sub-desc'><p>The information that was returned from\n                       ViewHolder). Might be\n                       null if the LayoutManager did not layout the item.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if a later call to runPendingAnimations() is requested,\n false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-animatePersistence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-animatePersistence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animatePersistence' class='name expandable'>animatePersistence</a>( <span class='pre'>viewHolder, preLayoutInfo, postLayoutInfo</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the RecyclerView when a ViewHolder is present in both before and after the\n layout and RecyclerView has not...</div><div class='long'><p>Called by the RecyclerView when a ViewHolder is present in both before and after the\n layout and RecyclerView has not received a com.android.internal.widget.RecyclerView.Adapter.notifyItemChanged(int) call\n for it or a com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() call.\n <p>\n This ViewHolder still represents the same data that it was representing when the layout\n started but its position / size may be changed by the LayoutManager.\n <p>\n If the Item's layout position didn't change, RecyclerView still calls this method because\n it does not track this information (or does not necessarily know that an animation is\n not required). Your ItemAnimator should handle this case and if there is nothing to\n animate, it should call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) and return\n <code>false</code>.\n <p>\n ItemAnimator must call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) when the animation\n is complete (or instantly call <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) if it\n decides not to animate the view).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which should be animated</p>\n</div></li><li><span class='pre'>preLayoutInfo</span> : Object {RecyclerView.ItemAnimator.ItemHolderInfo}<div class='sub-desc'><p>The information that was returned from\n                       ViewHolder, int, List).</p>\n</div></li><li><span class='pre'>postLayoutInfo</span> : Object {RecyclerView.ItemAnimator.ItemHolderInfo}<div class='sub-desc'><p>The information that was returned from ViewHolder, int, List).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if a later call to runPendingAnimations() is requested,\n false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-canReuseUpdatedViewHolder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-canReuseUpdatedViewHolder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-canReuseUpdatedViewHolder' class='name expandable'>canReuseUpdatedViewHolder</a>( <span class='pre'>viewHolder, payloads</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>When an item is changed, ItemAnimator can decide whether it wants to re-use\n the same ViewHolder for animations or Re...</div><div class='long'><p>When an item is changed, ItemAnimator can decide whether it wants to re-use\n the same ViewHolder for animations or RecyclerView should create a copy of the\n item and ItemAnimator will use both to run the animation (e.g. cross-fade).\n <p>\n Note that this method will only be called if the <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolder</a> still has the same\n type (com.android.internal.widget.RecyclerView.Adapter.getItemViewType(int)). Otherwise, ItemAnimator will always receive\n both <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolder</a>s in the\n com.android.internal.widget.RecyclerView.ViewHolder, com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo) method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which represents the changed item's old content.</p>\n</div></li><li><span class='pre'>payloads</span> : Object {java.util.List}<div class='sub-desc'><p>A non-null list of merged payloads that were sent with change\n                 notifications. Can be empty if the adapter is invalidated via\n                 RecyclerView.Adapter.notifyDataSetChanged(). The same list of\n                 payloads will be passed into\n                 int, List)\n                 method <b>if</b> this method returns <code>true</code>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if RecyclerView should just rebind to the same ViewHolder or false if\n         RecyclerView should create a new ViewHolder and pass this ViewHolder to the\n         ItemAnimator to animate. Default implementation calls\n         canReuseUpdatedViewHolder(ViewHolder).\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-canReuseUpdatedViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-canReuseUpdatedViewHolder\" class=\"docClass\">canReuseUpdatedViewHolder</a>(ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-dispatchAnimationFinished' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-dispatchAnimationFinished' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished' class='name expandable'>dispatchAnimationFinished</a>( <span class='pre'>viewHolder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Method to be called by subclasses when an animation is finished. ...</div><div class='long'><p>Method to be called by subclasses when an animation is finished.\n <p>\n For each call RecyclerView makes to\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateAppearance(),\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animatePersistence(), or\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateDisappearance(), there\n should\n be a matching <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) call by the subclass.\n <p>\n For com.android.internal.widget.RecyclerView.ViewHolder, com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateChange(), subclass should call this method for both the <code>oldHolder</code>\n and <code>newHolder</code>  (if they are not the same instance).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder whose animation is finished.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-onAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-onAnimationFinished\" class=\"docClass\">onAnimationFinished</a>(ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-dispatchAnimationStarted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-dispatchAnimationStarted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationStarted' class='name expandable'>dispatchAnimationStarted</a>( <span class='pre'>viewHolder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Method to be called by subclasses when an animation is started. ...</div><div class='long'><p>Method to be called by subclasses when an animation is started.\n <p>\n For each call RecyclerView makes to\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateAppearance(),\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animatePersistence(), or\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateDisappearance(), there should be a matching\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationStarted\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationStarted\" class=\"docClass\">dispatchAnimationStarted</a>(ViewHolder) call by the subclass.\n <p>\n For com.android.internal.widget.RecyclerView.ViewHolder, com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateChange(), subclass should call this method for both the <code>oldHolder</code>\n and <code>newHolder</code> (if they are not the same instance).\n <p>\n If your ItemAnimator decides not to animate a ViewHolder, it should call\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) <b>without</b> calling\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationStarted\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationStarted\" class=\"docClass\">dispatchAnimationStarted</a>(ViewHolder).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder whose animation is starting.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-onAnimationStarted\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-onAnimationStarted\" class=\"docClass\">onAnimationStarted</a>(ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-dispatchAnimationsFinished' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-dispatchAnimationsFinished' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationsFinished' class='name expandable'>dispatchAnimationsFinished</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This method should be called by ItemAnimator implementations to notify\n any listeners that all pending and active ite...</div><div class='long'><p>This method should be called by ItemAnimator implementations to notify\n any listeners that all pending and active item animations are finished.</p>\n</div></div></div><div id='method-endAnimation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-endAnimation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-endAnimation' class='name expandable'>endAnimation</a>( <span class='pre'>item</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Method called when an animation on a view should be ended immediately. ...</div><div class='long'><p>Method called when an animation on a view should be ended immediately.\n This could happen when other events, like scrolling, occur, so that\n animating views can be quickly put into their proper end locations.\n Implementations should ensure that any animations running on the item\n are canceled and affected properties are set to their end values.\n Also, <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) should be called for each finished\n animation since the animations are effectively done when this method is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>item</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The item for which an animation should be stopped.</p>\n</div></li></ul></div></div></div><div id='method-endAnimations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-endAnimations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-endAnimations' class='name expandable'>endAnimations</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Method called when all item animations should be ended immediately. ...</div><div class='long'><p>Method called when all item animations should be ended immediately.\n This could happen when other events, like scrolling, occur, so that\n animating views can be quickly put into their proper end locations.\n Implementations should ensure that any animations running on any items\n are canceled and affected properties are set to their end values.\n Also, <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) should be called for each finished\n animation since the animations are effectively done when this method is called.</p>\n</div></div></div><div id='method-getAddDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-getAddDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-getAddDuration' class='name expandable'>getAddDuration</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current duration for which all add animations will run. ...</div><div class='long'><p>Gets the current duration for which all add animations will run.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current add duration</p>\n</div></li></ul></div></div></div><div id='method-getChangeDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-getChangeDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-getChangeDuration' class='name expandable'>getChangeDuration</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current duration for which all change animations will run. ...</div><div class='long'><p>Gets the current duration for which all change animations will run.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current change duration</p>\n</div></li></ul></div></div></div><div id='method-getMoveDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-getMoveDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-getMoveDuration' class='name expandable'>getMoveDuration</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current duration for which all move animations will run. ...</div><div class='long'><p>Gets the current duration for which all move animations will run.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current move duration</p>\n</div></li></ul></div></div></div><div id='method-getRemoveDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-getRemoveDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-getRemoveDuration' class='name expandable'>getRemoveDuration</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current duration for which all remove animations will run. ...</div><div class='long'><p>Gets the current duration for which all remove animations will run.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current remove duration</p>\n</div></li></ul></div></div></div><div id='method-isRunning' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-isRunning' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-isRunning' class='name expandable'>isRunning</a>( <span class='pre'>listener</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Like isRunning(), this method returns whether there are any item\n animations currently running. ...</div><div class='long'><p>Like <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-isRunning\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-isRunning\" class=\"docClass\">isRunning</a>(), this method returns whether there are any item\n animations currently running. Additionally, the listener passed in will be called\n when there are no item animations running, either immediately (before the method\n returns) if no animations are currently running, or when the currently running\n animations are finished.</p>\n\n<p> <p>Note that the listener is transient - it is either called immediately and not\n stored at all, or stored only until it is called when running animations\n are finished sometime later.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.ItemAnimator.ItemAnimatorFinishedListener}<div class='sub-desc'><p>A listener to be called immediately if no animations are running\n or later when currently-running animations have finished. A null listener is\n equivalent to calling isRunning().</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if there are any item animations currently running, false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-obtainHolderInfo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-obtainHolderInfo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-obtainHolderInfo' class='name expandable'>obtainHolderInfo</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerView.ItemAnimator.ItemHolderInfo}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a new com.android.internal.widget.ItemAnimator.ItemHolderInfo which will be used to store information about t...</div><div class='long'><p>Returns a new com.android.internal.widget.ItemAnimator.ItemHolderInfo which will be used to store information about the\n ViewHolder. This information will later be passed into <code>animate**</code> methods.\n <p>\n You can override this method if you want to extend com.android.internal.widget.ItemAnimator.ItemHolderInfo and provide\n your own instances.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ItemAnimator.ItemHolderInfo}</span><div class='sub-desc'><p>A new ItemHolderInfo.</p>\n</div></li></ul></div></div></div><div id='method-onAnimationFinished' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-onAnimationFinished' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-onAnimationFinished' class='name expandable'>onAnimationFinished</a>( <span class='pre'>viewHolder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called after dispatchAnimationFinished(ViewHolder) is called by the\n ItemAnimator. ...</div><div class='long'><p>Called after <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder) is called by the\n ItemAnimator.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder whose animation is finished. There might still be other\n                   animations running on this ViewHolder.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationFinished\" class=\"docClass\">dispatchAnimationFinished</a>(ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-onAnimationStarted' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-onAnimationStarted' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-onAnimationStarted' class='name expandable'>onAnimationStarted</a>( <span class='pre'>viewHolder</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when a new animation is started on the given ViewHolder. ...</div><div class='long'><p>Called when a new animation is started on the given ViewHolder.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder which started animating. Note that the ViewHolder\n                   might already be animating and this might be another animation.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationStarted\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-dispatchAnimationStarted\" class=\"docClass\">dispatchAnimationStarted</a>(ViewHolder)</p>\n</div></li></ul></div></div></div><div id='method-recordPostLayoutInformation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-recordPostLayoutInformation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPostLayoutInformation' class='name expandable'>recordPostLayoutInformation</a>( <span class='pre'>state, viewHolder</span> ) : Object {com.android.internal.widget.RecyclerView.ItemAnimator.ItemHolderInfo}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the RecyclerView after the layout is complete. ...</div><div class='long'><p>Called by the RecyclerView after the layout is complete. Item animator should record\n necessary information about the View's final state.\n <p>\n The data returned from this method will be passed to the related <code>animate**</code>\n methods.\n <p>\n The default implementation returns an com.android.internal.widget.ItemAnimator.ItemHolderInfo which holds the bounds of\n the View.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current State of RecyclerView which includes some useful data about\n                   the layout that will be calculated.</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder whose information should be recorded.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ItemAnimator.ItemHolderInfo}</span><div class='sub-desc'><p>An ItemHolderInfo that preserves necessary information about the ViewHolder.\n This object will be passed back to related <code>animate**</code> methods when\n RecyclerView decides how items should be animated.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation\" class=\"docClass\">recordPreLayoutInformation</a>(State, ViewHolder, int, List)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateAppearance\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-animateAppearance\" class=\"docClass\">animateAppearance</a>(ViewHolder, ItemHolderInfo, ItemHolderInfo)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateDisappearance\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-animateDisappearance\" class=\"docClass\">animateDisappearance</a>(ViewHolder, ItemHolderInfo, ItemHolderInfo)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateChange\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-animateChange\" class=\"docClass\">animateChange</a>(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animatePersistence\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-animatePersistence\" class=\"docClass\">animatePersistence</a>(ViewHolder, ItemHolderInfo, ItemHolderInfo)</p>\n</div></li></ul></div></div></div><div id='method-recordPreLayoutInformation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-recordPreLayoutInformation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPreLayoutInformation' class='name expandable'>recordPreLayoutInformation</a>( <span class='pre'>state, viewHolder, changeFlags, payloads</span> ) : Object {com.android.internal.widget.RecyclerView.ItemAnimator.ItemHolderInfo}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the RecyclerView before the layout begins. ...</div><div class='long'><p>Called by the RecyclerView before the layout begins. Item animator should record\n necessary information about the View before it is potentially rebound, moved or removed.\n <p>\n The data returned from this method will be passed to the related <code>animate**</code>\n methods.\n <p>\n Note that this method may be called after pre-layout phase if LayoutManager adds new\n Views to the layout in pre-layout pass.\n <p>\n The default implementation returns an com.android.internal.widget.ItemAnimator.ItemHolderInfo which holds the bounds of\n the View and the adapter change flags.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Object {RecyclerView.State}<div class='sub-desc'><p>The current State of RecyclerView which includes some useful data\n                    about the layout that will be calculated.</p>\n</div></li><li><span class='pre'>viewHolder</span> : Object {RecyclerView.ViewHolder}<div class='sub-desc'><p>The ViewHolder whose information should be recorded.</p>\n</div></li><li><span class='pre'>changeFlags</span> : Number<div class='sub-desc'><p>Additional information about what changes happened in the Adapter\n                    about the Item represented by this ViewHolder. For instance, if\n                    item is deleted from the adapter, <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-property-FLAG_REMOVED\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-property-FLAG_REMOVED\" class=\"docClass\">FLAG_REMOVED</a> will be set.</p>\n</div></li><li><span class='pre'>payloads</span> : Object {java.util.List}<div class='sub-desc'><p>The payload list that was previously passed to\n                    Object) or\n                    int, Object).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ItemAnimator.ItemHolderInfo}</span><div class='sub-desc'><p>An ItemHolderInfo instance that preserves necessary information about the\n ViewHolder. This object will be passed back to related <code>animate**</code> methods\n after layout is complete.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPostLayoutInformation\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-recordPostLayoutInformation\" class=\"docClass\">recordPostLayoutInformation</a>(State, ViewHolder)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateAppearance\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-animateAppearance\" class=\"docClass\">animateAppearance</a>(ViewHolder, ItemHolderInfo, ItemHolderInfo)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateDisappearance\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-animateDisappearance\" class=\"docClass\">animateDisappearance</a>(ViewHolder, ItemHolderInfo, ItemHolderInfo)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animateChange\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-animateChange\" class=\"docClass\">animateChange</a>(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-animatePersistence\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator-method-animatePersistence\" class=\"docClass\">animatePersistence</a>(ViewHolder, ItemHolderInfo, ItemHolderInfo)</p>\n</div></li></ul></div></div></div><div id='method-runPendingAnimations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-runPendingAnimations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-runPendingAnimations' class='name expandable'>runPendingAnimations</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when there are pending animations waiting to be started. ...</div><div class='long'><p>Called when there are pending animations waiting to be started. This state\n is governed by the return values from\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateAppearance(),\n com.android.internal.widget.RecyclerView.ViewHolder, com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateChange()\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animatePersistence(), and\n com.android.internal.widget.ItemAnimator.ItemHolderInfo, com.android.internal.widget.ItemAnimator.ItemHolderInfo)\n animateDisappearance(), which inform the RecyclerView that the ItemAnimator wants to be\n called later to start the associated animations. runPendingAnimations() will be scheduled\n to be run on the next frame.</p>\n</div></div></div><div id='method-setAddDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-setAddDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-setAddDuration' class='name expandable'>setAddDuration</a>( <span class='pre'>addDuration</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the duration for which all add animations will run. ...</div><div class='long'><p>Sets the duration for which all add animations will run.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>addDuration</span> : Number<div class='sub-desc'><p>The add duration</p>\n</div></li></ul></div></div></div><div id='method-setChangeDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-setChangeDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-setChangeDuration' class='name expandable'>setChangeDuration</a>( <span class='pre'>changeDuration</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the duration for which all change animations will run. ...</div><div class='long'><p>Sets the duration for which all change animations will run.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>changeDuration</span> : Number<div class='sub-desc'><p>The change duration</p>\n</div></li></ul></div></div></div><div id='method-setMoveDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-setMoveDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-setMoveDuration' class='name expandable'>setMoveDuration</a>( <span class='pre'>moveDuration</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the duration for which all move animations will run. ...</div><div class='long'><p>Sets the duration for which all move animations will run.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>moveDuration</span> : Number<div class='sub-desc'><p>The move duration</p>\n</div></li></ul></div></div></div><div id='method-setRemoveDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.ItemAnimator'>com.android.internal.widget.RecyclerView.ItemAnimator</span><br/><a href='source/ItemAnimator.html#com-android-internal-widget-RecyclerView-ItemAnimator-method-setRemoveDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.ItemAnimator-method-setRemoveDuration' class='name expandable'>setRemoveDuration</a>( <span class='pre'>removeDuration</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the duration for which all remove animations will run. ...</div><div class='long'><p>Sets the duration for which all remove animations will run.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>removeDuration</span> : Number<div class='sub-desc'><p>The remove duration</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});