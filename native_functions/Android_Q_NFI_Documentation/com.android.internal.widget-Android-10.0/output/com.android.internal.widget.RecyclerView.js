Ext.data.JsonP.com_android_internal_widget_RecyclerView({"tagname":"class","name":"com.android.internal.widget.RecyclerView","autodetected":{},"files":[{"filename":"RecyclerView.js","href":"RecyclerView.html#com-android-internal-widget-RecyclerView"}],"extends":"android.view.ViewGroup","members":[{"name":"HORIZONTAL","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-HORIZONTAL","meta":{}},{"name":"INVALID_TYPE","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-INVALID_TYPE","meta":{}},{"name":"NO_ID","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-NO_ID","meta":{}},{"name":"NO_POSITION","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-NO_POSITION","meta":{}},{"name":"SCROLL_STATE_DRAGGING","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-SCROLL_STATE_DRAGGING","meta":{}},{"name":"SCROLL_STATE_IDLE","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-SCROLL_STATE_IDLE","meta":{}},{"name":"SCROLL_STATE_SETTLING","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-SCROLL_STATE_SETTLING","meta":{}},{"name":"TOUCH_SLOP_DEFAULT","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-TOUCH_SLOP_DEFAULT","meta":{}},{"name":"TOUCH_SLOP_PAGING","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-TOUCH_SLOP_PAGING","meta":{}},{"name":"VERTICAL","tagname":"property","owner":"com.android.internal.widget.RecyclerView","id":"property-VERTICAL","meta":{}},{"name":"addFocusables","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-addFocusables","meta":{}},{"name":"addItemDecoration","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-addItemDecoration","meta":{}},{"name":"addOnChildAttachStateChangeListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-addOnChildAttachStateChangeListener","meta":{}},{"name":"addOnItemTouchListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-addOnItemTouchListener","meta":{}},{"name":"addOnScrollListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-addOnScrollListener","meta":{}},{"name":"clearOnChildAttachStateChangeListeners","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-clearOnChildAttachStateChangeListeners","meta":{}},{"name":"clearOnScrollListeners","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-clearOnScrollListeners","meta":{}},{"name":"computeHorizontalScrollExtent","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-computeHorizontalScrollExtent","meta":{}},{"name":"computeHorizontalScrollOffset","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-computeHorizontalScrollOffset","meta":{}},{"name":"computeHorizontalScrollRange","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-computeHorizontalScrollRange","meta":{}},{"name":"computeVerticalScrollExtent","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-computeVerticalScrollExtent","meta":{}},{"name":"computeVerticalScrollOffset","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-computeVerticalScrollOffset","meta":{}},{"name":"computeVerticalScrollRange","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-computeVerticalScrollRange","meta":{}},{"name":"draw","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-draw","meta":{}},{"name":"drawChild","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-drawChild","meta":{}},{"name":"findChildViewUnder","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-findChildViewUnder","meta":{}},{"name":"findContainingItemView","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-findContainingItemView","meta":{}},{"name":"findContainingViewHolder","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-findContainingViewHolder","meta":{}},{"name":"findViewHolderForAdapterPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-findViewHolderForAdapterPosition","meta":{}},{"name":"findViewHolderForItemId","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-findViewHolderForItemId","meta":{}},{"name":"findViewHolderForLayoutPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-findViewHolderForLayoutPosition","meta":{}},{"name":"findViewHolderForPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-findViewHolderForPosition","meta":{"deprecated":{"text":"<p>use findViewHolderForLayoutPosition(int) or\n findViewHolderForAdapterPosition(int)</p>\n"}}},{"name":"fling","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-fling","meta":{}},{"name":"focusSearch","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-focusSearch","meta":{}},{"name":"generateLayoutParams","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-generateLayoutParams","meta":{}},{"name":"getAdapter","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getAdapter","meta":{}},{"name":"getBaseline","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getBaseline","meta":{}},{"name":"getChildAdapterPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getChildAdapterPosition","meta":{}},{"name":"getChildItemId","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getChildItemId","meta":{}},{"name":"getChildLayoutPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getChildLayoutPosition","meta":{}},{"name":"getChildPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getChildPosition","meta":{"deprecated":{"text":"<p>use getChildAdapterPosition(View) or\n getChildLayoutPosition(View).</p>\n"}}},{"name":"getChildViewHolder","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getChildViewHolder","meta":{}},{"name":"getClipToPadding","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getClipToPadding","meta":{}},{"name":"getCompatAccessibilityDelegate","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getCompatAccessibilityDelegate","meta":{}},{"name":"getDecoratedBoundsWithMargins","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getDecoratedBoundsWithMargins","meta":{}},{"name":"getItemAnimator","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getItemAnimator","meta":{}},{"name":"getLayoutManager","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getLayoutManager","meta":{}},{"name":"getMaxFlingVelocity","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getMaxFlingVelocity","meta":{}},{"name":"getMinFlingVelocity","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getMinFlingVelocity","meta":{}},{"name":"getOnFlingListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getOnFlingListener","meta":{}},{"name":"getPreserveFocusAfterLayout","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getPreserveFocusAfterLayout","meta":{}},{"name":"getRecycledViewPool","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getRecycledViewPool","meta":{}},{"name":"getScrollState","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-getScrollState","meta":{}},{"name":"hasFixedSize","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-hasFixedSize","meta":{}},{"name":"hasPendingAdapterUpdates","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-hasPendingAdapterUpdates","meta":{}},{"name":"invalidateItemDecorations","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-invalidateItemDecorations","meta":{}},{"name":"isAnimating","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-isAnimating","meta":{}},{"name":"isAttachedToWindow","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-isAttachedToWindow","meta":{}},{"name":"isComputingLayout","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-isComputingLayout","meta":{}},{"name":"isLayoutFrozen","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-isLayoutFrozen","meta":{}},{"name":"offsetChildrenHorizontal","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-offsetChildrenHorizontal","meta":{}},{"name":"offsetChildrenVertical","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-offsetChildrenVertical","meta":{}},{"name":"onChildAttachedToWindow","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-onChildAttachedToWindow","meta":{}},{"name":"onChildDetachedFromWindow","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-onChildDetachedFromWindow","meta":{}},{"name":"onDraw","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-onDraw","meta":{}},{"name":"onGenericMotionEvent","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-onGenericMotionEvent","meta":{}},{"name":"onInterceptTouchEvent","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-onInterceptTouchEvent","meta":{}},{"name":"onScrollStateChanged","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-onScrollStateChanged","meta":{}},{"name":"onScrolled","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-onScrolled","meta":{}},{"name":"onTouchEvent","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-onTouchEvent","meta":{}},{"name":"removeItemDecoration","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-removeItemDecoration","meta":{}},{"name":"removeOnChildAttachStateChangeListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-removeOnChildAttachStateChangeListener","meta":{}},{"name":"removeOnItemTouchListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-removeOnItemTouchListener","meta":{}},{"name":"removeOnScrollListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-removeOnScrollListener","meta":{}},{"name":"requestChildFocus","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-requestChildFocus","meta":{}},{"name":"requestChildRectangleOnScreen","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-requestChildRectangleOnScreen","meta":{}},{"name":"requestDisallowInterceptTouchEvent","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-requestDisallowInterceptTouchEvent","meta":{}},{"name":"requestLayout","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-requestLayout","meta":{}},{"name":"scrollBy","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-scrollBy","meta":{}},{"name":"scrollTo","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-scrollTo","meta":{}},{"name":"scrollToPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-scrollToPosition","meta":{}},{"name":"sendAccessibilityEventUnchecked","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-sendAccessibilityEventUnchecked","meta":{}},{"name":"setAccessibilityDelegateCompat","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setAccessibilityDelegateCompat","meta":{}},{"name":"setAdapter","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setAdapter","meta":{}},{"name":"setChildDrawingOrderCallback","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setChildDrawingOrderCallback","meta":{}},{"name":"setClipToPadding","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setClipToPadding","meta":{}},{"name":"setHasFixedSize","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setHasFixedSize","meta":{}},{"name":"setItemAnimator","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setItemAnimator","meta":{}},{"name":"setItemViewCacheSize","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setItemViewCacheSize","meta":{}},{"name":"setLayoutFrozen","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setLayoutFrozen","meta":{}},{"name":"setLayoutManager","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setLayoutManager","meta":{}},{"name":"setOnFlingListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setOnFlingListener","meta":{}},{"name":"setOnScrollListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setOnScrollListener","meta":{"deprecated":{"text":"<p>Use addOnScrollListener(OnScrollListener) and\n             removeOnScrollListener(OnScrollListener)</p>\n"}}},{"name":"setPreserveFocusAfterLayout","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setPreserveFocusAfterLayout","meta":{}},{"name":"setRecycledViewPool","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setRecycledViewPool","meta":{}},{"name":"setRecyclerListener","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setRecyclerListener","meta":{}},{"name":"setScrollingTouchSlop","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setScrollingTouchSlop","meta":{}},{"name":"setViewCacheExtension","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-setViewCacheExtension","meta":{}},{"name":"smoothScrollBy","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-smoothScrollBy","meta":{}},{"name":"smoothScrollToPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-smoothScrollToPosition","meta":{}},{"name":"stopScroll","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-stopScroll","meta":{}},{"name":"swapAdapter","tagname":"method","owner":"com.android.internal.widget.RecyclerView","id":"method-swapAdapter","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.widget.RecyclerView","short_doc":"implements com.android.internal.widget.ScrollingView\n\n implements com.android.internal.widget.NestedScrollingChild\n\nA...","classIcon":"icon-class","superclasses":["android.view.ViewGroup"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>android.view.ViewGroup<div class='subclass '><strong>com.android.internal.widget.RecyclerView</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView' target='_blank'>RecyclerView.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/com.android.internal.widget.ScrollingView\" rel=\"com.android.internal.widget.ScrollingView\" class=\"docClass\">com.android.internal.widget.ScrollingView</a></p>\n\n<p> implements <a href=\"#!/api/com.android.internal.widget.NestedScrollingChild\" rel=\"com.android.internal.widget.NestedScrollingChild\" class=\"docClass\">com.android.internal.widget.NestedScrollingChild</a></p>\n\n<p>A flexible view for providing a limited window into a large data set.</p>\n\n<p> <h3>Glossary of terms:</h3></p>\n\n<p> <ul>\n     <li><em>Adapter:</em> A subclass of <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter\" rel=\"com.android.internal.widget.RecyclerView.Adapter\" class=\"docClass\">com.android.internal.widget.RecyclerView.Adapter</a> responsible for providing views\n     that represent items in a data set.</li>\n     <li><em>Position:</em> The position of a data item within an <em>Adapter</em>.</li>\n     <li><em>Index:</em> The index of an attached child view as used in a call to\n     ViewGroup.getChildAt. Contrast with <em>Position.</em></li>\n     <li><em>Binding:</em> The process of preparing a child view to display data corresponding\n     to a <em>position</em> within the adapter.</li>\n     <li><em>Recycle (view):</em> A view previously used to display data for a specific adapter\n     position may be placed in a cache for later reuse to display the same type of data again\n     later. This can drastically improve performance by skipping initial layout inflation\n     or construction.</li>\n     <li><em>Scrap (view):</em> A child view that has entered into a temporarily detached\n     state during layout. Scrap views may be reused without becoming fully detached\n     from the parent RecyclerView, either unmodified if no rebinding is required or modified\n     by the adapter if the view was considered <em>dirty</em>.</li>\n     <li><em>Dirty (view):</em> A child view that must be rebound by the adapter before\n     being displayed.</li>\n </ul></p>\n\n<p> <h4>Positions in RecyclerView:</h4>\n <p>\n RecyclerView introduces an additional level of abstraction between the <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter\" rel=\"com.android.internal.widget.RecyclerView.Adapter\" class=\"docClass\">com.android.internal.widget.RecyclerView.Adapter</a> and\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> to be able to detect data set changes in batches during a layout\n calculation. This saves LayoutManager from tracking adapter changes to calculate animations.\n It also helps with performance because all view bindings happen at the same time and unnecessary\n bindings are avoided.\n <p>\n For this reason, there are two types of <code>position</code> related methods in RecyclerView:\n <ul>\n     <li>layout position: Position of an item in the latest layout calculation. This is the\n     position from the LayoutManager's perspective.</li>\n     <li>adapter position: Position of an item in the adapter. This is the position from\n     the Adapter's perspective.</li>\n </ul>\n <p>\n These two positions are the same except the time between dispatching <code>adapter.notify<em>\n </em></code> events and calculating the updated layout.\n <p>\n Methods that return or receive <code>LayoutPosition<em></em></code> use position as of the latest\n layout calculation (e.g. com.android.internal.widget.RecyclerView.ViewHolder.getLayoutPosition(),\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-findViewHolderForLayoutPosition\" rel=\"com.android.internal.widget.RecyclerView-method-findViewHolderForLayoutPosition\" class=\"docClass\">findViewHolderForLayoutPosition</a>(int)). These positions include all changes until the\n last layout calculation. You can rely on these positions to be consistent with what user is\n currently seeing on the screen. For example, if you have a list of items on the screen and user\n asks for the 5<sup>th</sup> element, you should use these methods as they'll match what user\n is seeing.\n <p>\n The other set of position related methods are in the form of\n <code>AdapterPosition*</code>. (e.g. com.android.internal.widget.RecyclerView.ViewHolder.getAdapterPosition(),\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-findViewHolderForAdapterPosition\" rel=\"com.android.internal.widget.RecyclerView-method-findViewHolderForAdapterPosition\" class=\"docClass\">findViewHolderForAdapterPosition</a>(int)) You should use these methods when you need to\n work with up-to-date adapter positions even if they may not have been reflected to layout yet.\n For example, if you want to access the item in the adapter on a ViewHolder click, you should use\n com.android.internal.widget.RecyclerView.ViewHolder.getAdapterPosition(). Beware that these methods may not be able to calculate\n adapter positions if com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() has been called and new layout has\n not yet been calculated. For this reasons, you should carefully handle <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-NO_POSITION\" rel=\"com.android.internal.widget.RecyclerView-property-NO_POSITION\" class=\"docClass\">NO_POSITION</a> or\n <code>null</code> results from these methods.\n <p>\n When writing a <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> you almost always want to use layout positions whereas when\n writing an <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter\" rel=\"com.android.internal.widget.RecyclerView.Adapter\" class=\"docClass\">com.android.internal.widget.RecyclerView.Adapter</a>, you probably want to use adapter positions.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-HORIZONTAL' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-HORIZONTAL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-HORIZONTAL' class='name expandable'>HORIZONTAL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-INVALID_TYPE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-INVALID_TYPE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-INVALID_TYPE' class='name expandable'>INVALID_TYPE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;-1&quot;</code></p></div></div></div><div id='property-NO_ID' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-NO_ID' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-NO_ID' class='name expandable'>NO_ID</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;-1&quot;</code></p></div></div></div><div id='property-NO_POSITION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-NO_POSITION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-NO_POSITION' class='name expandable'>NO_POSITION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;-1&quot;</code></p></div></div></div><div id='property-SCROLL_STATE_DRAGGING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-SCROLL_STATE_DRAGGING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_DRAGGING' class='name expandable'>SCROLL_STATE_DRAGGING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The RecyclerView is currently being dragged by outside input such as user touch input. ...</div><div class='long'><p>The RecyclerView is currently being dragged by outside input such as user touch input.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-getScrollState\" rel=\"com.android.internal.widget.RecyclerView-method-getScrollState\" class=\"docClass\">getScrollState</a>()</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-SCROLL_STATE_IDLE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-SCROLL_STATE_IDLE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_IDLE' class='name expandable'>SCROLL_STATE_IDLE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The RecyclerView is not currently scrolling. ...</div><div class='long'><p>The RecyclerView is not currently scrolling.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-getScrollState\" rel=\"com.android.internal.widget.RecyclerView-method-getScrollState\" class=\"docClass\">getScrollState</a>()</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-SCROLL_STATE_SETTLING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-SCROLL_STATE_SETTLING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_SETTLING' class='name expandable'>SCROLL_STATE_SETTLING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The RecyclerView is currently animating to a final position while not under\noutside control. ...</div><div class='long'><p>The RecyclerView is currently animating to a final position while not under\noutside control.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-getScrollState\" rel=\"com.android.internal.widget.RecyclerView-method-getScrollState\" class=\"docClass\">getScrollState</a>()</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-TOUCH_SLOP_DEFAULT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-TOUCH_SLOP_DEFAULT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-TOUCH_SLOP_DEFAULT' class='name expandable'>TOUCH_SLOP_DEFAULT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for use with setScrollingTouchSlop(int). ...</div><div class='long'><p>Constant for use with <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setScrollingTouchSlop\" rel=\"com.android.internal.widget.RecyclerView-method-setScrollingTouchSlop\" class=\"docClass\">setScrollingTouchSlop</a>(int). Indicates\nthat the RecyclerView should use the standard touch slop for smooth,\ncontinuous scrolling.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-TOUCH_SLOP_PAGING' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-TOUCH_SLOP_PAGING' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-TOUCH_SLOP_PAGING' class='name expandable'>TOUCH_SLOP_PAGING</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Constant for use with setScrollingTouchSlop(int). ...</div><div class='long'><p>Constant for use with <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setScrollingTouchSlop\" rel=\"com.android.internal.widget.RecyclerView-method-setScrollingTouchSlop\" class=\"docClass\">setScrollingTouchSlop</a>(int). Indicates\nthat the RecyclerView should use the standard touch slop for scrolling\nwidgets that snap to a page or other coarse-grained barrier.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-VERTICAL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-property-VERTICAL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-property-VERTICAL' class='name expandable'>VERTICAL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addFocusables' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-addFocusables' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-addFocusables' class='name expandable'>addFocusables</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-addItemDecoration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-addItemDecoration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-addItemDecoration' class='name expandable'>addItemDecoration</a>( <span class='pre'>decor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add an com.android.internal.widget.RecyclerView.ItemDecoration to this RecyclerView. ...</div><div class='long'><p>Add an <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecoration</a> to this RecyclerView. Item decorations can\n affect both measurement and drawing of individual item views.</p>\n\n<p> <p>Item decorations are ordered. Decorations placed earlier in the list will\n be run/queried/drawn first for their effects on item views. Padding added to views\n will be nested; a padding added by an earlier decoration will mean further\n item decorations in the list will be asked to draw/pad within the previous decoration's\n given area.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>decor</span> : Object {RecyclerView.ItemDecoration}<div class='sub-desc'><p>Decoration to add</p>\n</div></li></ul></div></div></div><div id='method-addOnChildAttachStateChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-addOnChildAttachStateChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-addOnChildAttachStateChangeListener' class='name expandable'>addOnChildAttachStateChangeListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a listener that will be notified whenever a child view is attached to or detached\n from RecyclerView. ...</div><div class='long'><p>Register a listener that will be notified whenever a child view is attached to or detached\n from RecyclerView.</p>\n\n<p> <p>This listener will be called when a LayoutManager or the RecyclerView decides\n that a child view is no longer needed. If an application associates expensive\n or heavyweight data with item views, this may be a good place to release\n or free those resources.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.OnChildAttachStateChangeListener}<div class='sub-desc'><p>Listener to register</p>\n</div></li></ul></div></div></div><div id='method-addOnItemTouchListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-addOnItemTouchListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-addOnItemTouchListener' class='name expandable'>addOnItemTouchListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add an com.android.internal.widget.RecyclerView.OnItemTouchListener to intercept touch events before they are dispatc...</div><div class='long'><p>Add an <a href=\"#!/api/com.android.internal.widget.RecyclerView.OnItemTouchListener\" rel=\"com.android.internal.widget.RecyclerView.OnItemTouchListener\" class=\"docClass\">com.android.internal.widget.RecyclerView.OnItemTouchListener</a> to intercept touch events before they are dispatched\n to child views or this view's standard scrolling behavior.</p>\n\n<p> <p>Client code may use listeners to implement item manipulation behavior. Once a listener\n returns true from\n MotionEvent) its\n MotionEvent) method will be called\n for each incoming MotionEvent until the end of the gesture.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.OnItemTouchListener}<div class='sub-desc'><p>Listener to add\n@see SimpleOnItemTouchListener</p>\n</div></li></ul></div></div></div><div id='method-addOnScrollListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-addOnScrollListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-addOnScrollListener' class='name expandable'>addOnScrollListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a listener that will be notified of any changes in scroll state or position. ...</div><div class='long'><p>Add a listener that will be notified of any changes in scroll state or position.</p>\n\n<p> <p>Components that add a listener should take care to remove it when finished.\n Other components that take ownership of a view may call <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-clearOnScrollListeners\" rel=\"com.android.internal.widget.RecyclerView-method-clearOnScrollListeners\" class=\"docClass\">clearOnScrollListeners</a>()\n to remove all attached listeners.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.OnScrollListener}<div class='sub-desc'><p>listener to set or null to clear</p>\n</div></li></ul></div></div></div><div id='method-clearOnChildAttachStateChangeListeners' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-clearOnChildAttachStateChangeListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-clearOnChildAttachStateChangeListeners' class='name expandable'>clearOnChildAttachStateChangeListeners</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes all listeners that were added via\n addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener). ...</div><div class='long'><p>Removes all listeners that were added via\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-addOnChildAttachStateChangeListener\" rel=\"com.android.internal.widget.RecyclerView-method-addOnChildAttachStateChangeListener\" class=\"docClass\">addOnChildAttachStateChangeListener</a>(OnChildAttachStateChangeListener).</p>\n</div></div></div><div id='method-clearOnScrollListeners' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-clearOnScrollListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-clearOnScrollListeners' class='name expandable'>clearOnScrollListeners</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove all secondary listener that were notified of any changes in scroll state or position. ...</div><div class='long'><p>Remove all secondary listener that were notified of any changes in scroll state or position.</p>\n</div></div></div><div id='method-computeHorizontalScrollExtent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-computeHorizontalScrollExtent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollExtent' class='name expandable'>computeHorizontalScrollExtent</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compute the horizontal extent of the horizontal scrollbar's thumb within the\n horizontal range. ...</div><div class='long'><p>Compute the horizontal extent of the horizontal scrollbar's thumb within the\n horizontal range. This value is used to compute the length of the thumb within the\n scrollbar's track.</p>\n\n\n<p> <p>The range is expressed in arbitrary units that must be the same as the units used by\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollRange\" rel=\"com.android.internal.widget.RecyclerView-method-computeHorizontalScrollRange\" class=\"docClass\">computeHorizontalScrollRange</a>() and <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollOffset\" rel=\"com.android.internal.widget.RecyclerView-method-computeHorizontalScrollOffset\" class=\"docClass\">computeHorizontalScrollOffset</a>().</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n\n<p> <p>If you want to support scroll bars, override\n com.android.internal.widget.RecyclerView.LayoutManager.computeHorizontalScrollExtent(com.android.internal.widget.RecyclerView.State) in your\n LayoutManager.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The horizontal extent of the scrollbar's thumb\n@see RecyclerView.LayoutManager#computeHorizontalScrollExtent(RecyclerView.State)</p>\n</div></li></ul></div></div></div><div id='method-computeHorizontalScrollOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-computeHorizontalScrollOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollOffset' class='name expandable'>computeHorizontalScrollOffset</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal\n range. ...</div><div class='long'><p>Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal\n range. This value is used to compute the length of the thumb within the scrollbar's track.\n </p>\n\n\n<p> <p>The range is expressed in arbitrary units that must be the same as the units used by\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollRange\" rel=\"com.android.internal.widget.RecyclerView-method-computeHorizontalScrollRange\" class=\"docClass\">computeHorizontalScrollRange</a>() and <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollExtent\" rel=\"com.android.internal.widget.RecyclerView-method-computeHorizontalScrollExtent\" class=\"docClass\">computeHorizontalScrollExtent</a>().</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n\n<p> <p>If you want to support scroll bars, override\n com.android.internal.widget.RecyclerView.LayoutManager.computeHorizontalScrollOffset(com.android.internal.widget.RecyclerView.State) in your\n LayoutManager. </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The horizontal offset of the scrollbar's thumb\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-computeHorizontalScrollOffset\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-computeHorizontalScrollOffset\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager.computeHorizontalScrollOffset</a>\n (RecyclerView.State)</p>\n</div></li></ul></div></div></div><div id='method-computeHorizontalScrollRange' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-computeHorizontalScrollRange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollRange' class='name expandable'>computeHorizontalScrollRange</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compute the horizontal range that the horizontal scrollbar represents. ...</div><div class='long'><p>Compute the horizontal range that the horizontal scrollbar represents.</p>\n\n\n<p> <p>The range is expressed in arbitrary units that must be the same as the units used by\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollExtent\" rel=\"com.android.internal.widget.RecyclerView-method-computeHorizontalScrollExtent\" class=\"docClass\">computeHorizontalScrollExtent</a>() and <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeHorizontalScrollOffset\" rel=\"com.android.internal.widget.RecyclerView-method-computeHorizontalScrollOffset\" class=\"docClass\">computeHorizontalScrollOffset</a>().</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n\n<p> <p>If you want to support scroll bars, override\n com.android.internal.widget.RecyclerView.LayoutManager.computeHorizontalScrollRange(com.android.internal.widget.RecyclerView.State) in your\n LayoutManager.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total horizontal range represented by the vertical scrollbar\n@see RecyclerView.LayoutManager#computeHorizontalScrollRange(RecyclerView.State)</p>\n</div></li></ul></div></div></div><div id='method-computeVerticalScrollExtent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-computeVerticalScrollExtent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollExtent' class='name expandable'>computeVerticalScrollExtent</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. ...</div><div class='long'><p>Compute the vertical extent of the vertical scrollbar's thumb within the vertical range.\n This value is used to compute the length of the thumb within the scrollbar's track.</p>\n\n\n<p> <p>The range is expressed in arbitrary units that must be the same as the units used by\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollRange\" rel=\"com.android.internal.widget.RecyclerView-method-computeVerticalScrollRange\" class=\"docClass\">computeVerticalScrollRange</a>() and <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollOffset\" rel=\"com.android.internal.widget.RecyclerView-method-computeVerticalScrollOffset\" class=\"docClass\">computeVerticalScrollOffset</a>().</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n\n<p> <p>If you want to support scroll bars, override\n com.android.internal.widget.RecyclerView.LayoutManager.computeVerticalScrollExtent(com.android.internal.widget.RecyclerView.State) in your\n LayoutManager.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The vertical extent of the scrollbar's thumb\n@see RecyclerView.LayoutManager#computeVerticalScrollExtent(RecyclerView.State)</p>\n</div></li></ul></div></div></div><div id='method-computeVerticalScrollOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-computeVerticalScrollOffset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollOffset' class='name expandable'>computeVerticalScrollOffset</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compute the vertical offset of the vertical scrollbar's thumb within the vertical range. ...</div><div class='long'><p>Compute the vertical offset of the vertical scrollbar's thumb within the vertical range.\n This value is used to compute the length of the thumb within the scrollbar's track. </p>\n\n\n<p> <p>The range is expressed in arbitrary units that must be the same as the units used by\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollRange\" rel=\"com.android.internal.widget.RecyclerView-method-computeVerticalScrollRange\" class=\"docClass\">computeVerticalScrollRange</a>() and <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollExtent\" rel=\"com.android.internal.widget.RecyclerView-method-computeVerticalScrollExtent\" class=\"docClass\">computeVerticalScrollExtent</a>().</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n\n<p> <p>If you want to support scroll bars, override\n com.android.internal.widget.RecyclerView.LayoutManager.computeVerticalScrollOffset(com.android.internal.widget.RecyclerView.State) in your\n LayoutManager.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The vertical offset of the scrollbar's thumb\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-computeVerticalScrollOffset\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-computeVerticalScrollOffset\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager.computeVerticalScrollOffset</a>\n (RecyclerView.State)</p>\n</div></li></ul></div></div></div><div id='method-computeVerticalScrollRange' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-computeVerticalScrollRange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollRange' class='name expandable'>computeVerticalScrollRange</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compute the vertical range that the vertical scrollbar represents. ...</div><div class='long'><p>Compute the vertical range that the vertical scrollbar represents.</p>\n\n\n<p> <p>The range is expressed in arbitrary units that must be the same as the units used by\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollExtent\" rel=\"com.android.internal.widget.RecyclerView-method-computeVerticalScrollExtent\" class=\"docClass\">computeVerticalScrollExtent</a>() and <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-computeVerticalScrollOffset\" rel=\"com.android.internal.widget.RecyclerView-method-computeVerticalScrollOffset\" class=\"docClass\">computeVerticalScrollOffset</a>().</p></p>\n\n<p> <p>Default implementation returns 0.</p></p>\n\n<p> <p>If you want to support scroll bars, override\n com.android.internal.widget.RecyclerView.LayoutManager.computeVerticalScrollRange(com.android.internal.widget.RecyclerView.State) in your\n LayoutManager.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The total vertical range represented by the vertical scrollbar\n@see RecyclerView.LayoutManager#computeVerticalScrollRange(RecyclerView.State)</p>\n</div></li></ul></div></div></div><div id='method-draw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-draw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-draw' class='name expandable'>draw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-drawChild' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-drawChild' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-drawChild' class='name expandable'>drawChild</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-findChildViewUnder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-findChildViewUnder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-findChildViewUnder' class='name expandable'>findChildViewUnder</a>( <span class='pre'>x, y</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Find the topmost view under the given point. ...</div><div class='long'><p>Find the topmost view under the given point.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>Horizontal position in pixels to search</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>Vertical position in pixels to search</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>The child view under (x, y) or null if no matching child is found</p>\n</div></li></ul></div></div></div><div id='method-findContainingItemView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-findContainingItemView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-findContainingItemView' class='name expandable'>findContainingItemView</a>( <span class='pre'>view</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Traverses the ancestors of the given view and returns the item view that contains it and\n also a direct child of the ...</div><div class='long'><p>Traverses the ancestors of the given view and returns the item view that contains it and\n also a direct child of the RecyclerView. This returned view can be used to get the\n ViewHolder by calling <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-getChildViewHolder\" rel=\"com.android.internal.widget.RecyclerView-method-getChildViewHolder\" class=\"docClass\">getChildViewHolder</a>(View).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view that is a descendant of the RecyclerView.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>The direct child of the RecyclerView which contains the given view or null if the\n provided view is not a descendant of this RecyclerView.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-getChildViewHolder\" rel=\"com.android.internal.widget.RecyclerView-method-getChildViewHolder\" class=\"docClass\">getChildViewHolder</a>(View)\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-findContainingViewHolder\" rel=\"com.android.internal.widget.RecyclerView-method-findContainingViewHolder\" class=\"docClass\">findContainingViewHolder</a>(View)</p>\n</div></li></ul></div></div></div><div id='method-findContainingViewHolder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-findContainingViewHolder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-findContainingViewHolder' class='name expandable'>findContainingViewHolder</a>( <span class='pre'>view</span> ) : Object {com.android.internal.widget.RecyclerView.ViewHolder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the ViewHolder that contains the given view. ...</div><div class='long'><p>Returns the ViewHolder that contains the given view.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view that is a descendant of the RecyclerView.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ViewHolder}</span><div class='sub-desc'><p>The ViewHolder that contains the given view or null if the provided view is not a\n descendant of this RecyclerView.</p>\n</div></li></ul></div></div></div><div id='method-findViewHolderForAdapterPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-findViewHolderForAdapterPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-findViewHolderForAdapterPosition' class='name expandable'>findViewHolderForAdapterPosition</a>( <span class='pre'>position</span> ) : Object {com.android.internal.widget.RecyclerView.ViewHolder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the ViewHolder for the item in the given position of the data set. ...</div><div class='long'><p>Return the ViewHolder for the item in the given position of the data set. Unlike\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-findViewHolderForLayoutPosition\" rel=\"com.android.internal.widget.RecyclerView-method-findViewHolderForLayoutPosition\" class=\"docClass\">findViewHolderForLayoutPosition</a>(int) this method takes into account any pending\n adapter changes that may not be reflected to the layout yet. On the other hand, if\n com.android.internal.widget.RecyclerView.Adapter.notifyDataSetChanged() has been called but the new layout has not been\n calculated yet, this method will return <code>null</code> since the new positions of views\n are unknown until the layout is calculated.\n <p>\n This method checks only the children of RecyclerView. If the item at the given\n <code>position</code> is not laid out, it <em>will not</em> create a new one.\n <p>\n When the ItemAnimator is running a change animation, there might be 2 ViewHolders\n representing the same Item. In this case, the updated ViewHolder will be returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The position of the item in the data set of the adapter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ViewHolder}</span><div class='sub-desc'><p>The ViewHolder at <code>position</code> or null if there is no such item</p>\n</div></li></ul></div></div></div><div id='method-findViewHolderForItemId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-findViewHolderForItemId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-findViewHolderForItemId' class='name expandable'>findViewHolderForItemId</a>( <span class='pre'>id</span> ) : Object {com.android.internal.widget.RecyclerView.ViewHolder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the ViewHolder for the item with the given id. ...</div><div class='long'><p>Return the ViewHolder for the item with the given id. The RecyclerView must\n use an Adapter with stableIds to\n return a non-null value.\n <p>\n This method checks only the children of RecyclerView. If the item with the given\n <code>id</code> is not laid out, it <em>will not</em> create a new one.</p>\n\n<p> When the ItemAnimator is running a change animation, there might be 2 ViewHolders with the\n same id. In this case, the updated ViewHolder will be returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>id</span> : Number<div class='sub-desc'><p>The id for the requested item</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ViewHolder}</span><div class='sub-desc'><p>The ViewHolder with the given <code>id</code> or null if there is no such item</p>\n</div></li></ul></div></div></div><div id='method-findViewHolderForLayoutPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-findViewHolderForLayoutPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-findViewHolderForLayoutPosition' class='name expandable'>findViewHolderForLayoutPosition</a>( <span class='pre'>position</span> ) : Object {com.android.internal.widget.RecyclerView.ViewHolder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the ViewHolder for the item in the given position of the data set as of the latest\n layout pass. ...</div><div class='long'><p>Return the ViewHolder for the item in the given position of the data set as of the latest\n layout pass.\n <p>\n This method checks only the children of RecyclerView. If the item at the given\n <code>position</code> is not laid out, it <em>will not</em> create a new one.\n <p>\n Note that when Adapter contents change, ViewHolder positions are not updated until the\n next layout calculation. If there are pending adapter updates, the return value of this\n method may not match your adapter contents. You can use\n #com.android.internal.widget.RecyclerView.ViewHolder.getAdapterPosition() to get the current adapter position of a ViewHolder.\n <p>\n When the ItemAnimator is running a change animation, there might be 2 ViewHolders\n with the same layout position representing the same Item. In this case, the updated\n ViewHolder will be returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The position of the item in the data set of the adapter</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ViewHolder}</span><div class='sub-desc'><p>The ViewHolder at <code>position</code> or null if there is no such item</p>\n</div></li></ul></div></div></div><div id='method-findViewHolderForPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-findViewHolderForPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-findViewHolderForPosition' class='name expandable'>findViewHolderForPosition</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>use findViewHolderForLayoutPosition(int) or\n findViewHolderForAdapterPosition(int)</p>\n\n        </div>\n</div></div></div><div id='method-fling' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-fling' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-fling' class='name expandable'>fling</a>( <span class='pre'>velocityX, velocityY</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Begin a standard fling with an initial velocity along each axis in pixels per second. ...</div><div class='long'><p>Begin a standard fling with an initial velocity along each axis in pixels per second.\n If the velocity given is below the system-defined minimum this method will return false\n and no fling will occur.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>velocityX</span> : Number<div class='sub-desc'><p>Initial horizontal velocity in pixels per second</p>\n</div></li><li><span class='pre'>velocityY</span> : Number<div class='sub-desc'><p>Initial vertical velocity in pixels per second</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the fling was started, false if the velocity was too low to fling or\n LayoutManager does not support scrolling in the axis fling is issued.\n@see LayoutManager#canScrollVertically()\n@see LayoutManager#canScrollHorizontally()</p>\n</div></li></ul></div></div></div><div id='method-focusSearch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-focusSearch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-focusSearch' class='name expandable'>focusSearch</a>( <span class='pre'>focused, direction</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Since RecyclerView is a collection ViewGroup that includes virtual children (items that are\n in the Adapter but not v...</div><div class='long'><p>Since RecyclerView is a collection ViewGroup that includes virtual children (items that are\n in the Adapter but not visible in the UI), it employs a more involved focus search strategy\n that differs from other ViewGroups.\n <p>\n It first does a focus search within the RecyclerView. If this search finds a View that is in\n the focus direction with respect to the currently focused View, RecyclerView returns that\n child as the next focus target. When it cannot find such child, it calls\n int, Recycler, State) to layout more Views\n in the focus search direction. If LayoutManager adds a View that matches the\n focus search criteria, it will be returned as the focus search result. Otherwise,\n RecyclerView will call parent to handle the focus search like a regular ViewGroup.\n <p>\n When the direction is View.FOCUS_FORWARD or View.FOCUS_BACKWARD, a View that\n is not in the focus direction is still valid focus target which may not be the desired\n behavior if the Adapter has more children in the focus direction. To handle this case,\n RecyclerView converts the focus direction to an absolute direction and makes a preliminary\n focus search in that direction. If there are no Views to gain focus, it will call\n int, Recycler, State) before running a\n focus search with the original (relative) direction. This allows RecyclerView to provide\n better candidates to the focus search while still allowing the view system to take focus from\n the RecyclerView and give it to a more suitable child if such child exists.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>focused</span> : Object {View}<div class='sub-desc'><p>The view that currently has focus</p>\n</div></li><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p>One of View.FOCUS_UP, View.FOCUS_DOWN,\n View.FOCUS_LEFT, View.FOCUS_RIGHT, View.FOCUS_FORWARD,\n View.FOCUS_BACKWARD or 0 for not applicable.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>A new View that can be the next focus after the focused View</p>\n</div></li></ul></div></div></div><div id='method-generateLayoutParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-generateLayoutParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-generateLayoutParams' class='name expandable'>generateLayoutParams</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getAdapter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getAdapter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getAdapter' class='name expandable'>getAdapter</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerView.Adapter}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the previously set adapter or null if no adapter is set. ...</div><div class='long'><p>Retrieves the previously set adapter or null if no adapter is set.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.Adapter}</span><div class='sub-desc'><p>The previously set adapter\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setAdapter\" rel=\"com.android.internal.widget.RecyclerView-method-setAdapter\" class=\"docClass\">setAdapter</a>(Adapter)</p>\n</div></li></ul></div></div></div><div id='method-getBaseline' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getBaseline' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getBaseline' class='name expandable'>getBaseline</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the offset of the RecyclerView's text baseline from the its top\n boundary. ...</div><div class='long'><p>Return the offset of the RecyclerView's text baseline from the its top\n boundary. If the LayoutManager of this RecyclerView does not support baseline alignment,\n this method returns -1.</p>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the offset of the baseline within the RecyclerView's bounds or -1\n         if baseline alignment is not supported</p>\n</div></li></ul></div></div></div><div id='method-getChildAdapterPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getChildAdapterPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getChildAdapterPosition' class='name expandable'>getChildAdapterPosition</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the adapter position that the given child view corresponds to. ...</div><div class='long'><p>Return the adapter position that the given child view corresponds to.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child View to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Adapter position corresponding to the given view or <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-NO_POSITION\" rel=\"com.android.internal.widget.RecyclerView-property-NO_POSITION\" class=\"docClass\">NO_POSITION</a></p>\n</div></li></ul></div></div></div><div id='method-getChildItemId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getChildItemId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getChildItemId' class='name expandable'>getChildItemId</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the stable item id that the given child view corresponds to. ...</div><div class='long'><p>Return the stable item id that the given child view corresponds to.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child View to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Item id corresponding to the given view or <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-NO_ID\" rel=\"com.android.internal.widget.RecyclerView-property-NO_ID\" class=\"docClass\">NO_ID</a></p>\n</div></li></ul></div></div></div><div id='method-getChildLayoutPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getChildLayoutPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getChildLayoutPosition' class='name expandable'>getChildLayoutPosition</a>( <span class='pre'>child</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the adapter position of the given child view as of the latest completed layout pass. ...</div><div class='long'><p>Return the adapter position of the given child view as of the latest completed layout pass.\n <p>\n This position may not be equal to Item's adapter position if there are pending changes\n in the adapter which have not been reflected to the layout yet.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child View to query</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Adapter position of the given View as of last layout pass or <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-NO_POSITION\" rel=\"com.android.internal.widget.RecyclerView-property-NO_POSITION\" class=\"docClass\">NO_POSITION</a> if\n the View is representing a removed item.</p>\n</div></li></ul></div></div></div><div id='method-getChildPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getChildPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getChildPosition' class='name expandable'>getChildPosition</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>use getChildAdapterPosition(View) or\n getChildLayoutPosition(View).</p>\n\n        </div>\n</div></div></div><div id='method-getChildViewHolder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getChildViewHolder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getChildViewHolder' class='name expandable'>getChildViewHolder</a>( <span class='pre'>child</span> ) : Object {com.android.internal.widget.RecyclerView.ViewHolder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the com.android.internal.widget.RecyclerView.ViewHolder for the given child view. ...</div><div class='long'><p>Retrieve the <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolder</a> for the given child view.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child of this RecyclerView to query for its ViewHolder</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ViewHolder}</span><div class='sub-desc'><p>The child view's ViewHolder</p>\n</div></li></ul></div></div></div><div id='method-getClipToPadding' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getClipToPadding' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getClipToPadding' class='name expandable'>getClipToPadding</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether this RecyclerView will clip its children to its padding, and resize (but\n not clip) any EdgeEffect to...</div><div class='long'><p>Returns whether this RecyclerView will clip its children to its padding, and resize (but\n not clip) any EdgeEffect to the padded region, if padding is present.\n <p>\n By default, children are clipped to the padding of their parent\n RecyclerView. This clipping behavior is only enabled if padding is non-zero.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this RecyclerView clips children to its padding and resizes (but doesn't\n         clip) any EdgeEffect to the padded region, false otherwise.\n@attr name android:clipToPadding</p>\n</div></li></ul></div></div></div><div id='method-getCompatAccessibilityDelegate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getCompatAccessibilityDelegate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getCompatAccessibilityDelegate' class='name expandable'>getCompatAccessibilityDelegate</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerViewAccessibilityDelegate}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the accessibility delegate compatibility implementation used by the RecyclerView. ...</div><div class='long'><p>Returns the accessibility delegate compatibility implementation used by the RecyclerView.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerViewAccessibilityDelegate}</span><div class='sub-desc'><p>An instance of AccessibilityDelegateCompat used by RecyclerView</p>\n</div></li></ul></div></div></div><div id='method-getDecoratedBoundsWithMargins' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getDecoratedBoundsWithMargins' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getDecoratedBoundsWithMargins' class='name expandable'>getDecoratedBoundsWithMargins</a>( <span class='pre'>view, outBounds</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the bounds of the view including its decoration and margins. ...</div><div class='long'><p>Returns the bounds of the view including its decoration and margins.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view element to check</p>\n</div></li><li><span class='pre'>outBounds</span> : Object {Rect}<div class='sub-desc'><p>A rect that will receive the bounds of the element including its\n                  decoration and margins.</p>\n</div></li></ul></div></div></div><div id='method-getItemAnimator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getItemAnimator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getItemAnimator' class='name expandable'>getItemAnimator</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerView.ItemAnimator}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current ItemAnimator for this RecyclerView. ...</div><div class='long'><p>Gets the current ItemAnimator for this RecyclerView. A null return value\n indicates that there is no animator and that item changes will happen without\n any animations. By default, RecyclerView instantiates and\n uses an instance of <a href=\"#!/api/com.android.internal.widget.DefaultItemAnimator\" rel=\"com.android.internal.widget.DefaultItemAnimator\" class=\"docClass\">com.android.internal.widget.DefaultItemAnimator</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.ItemAnimator}</span><div class='sub-desc'><p>ItemAnimator The current ItemAnimator. If null, no animations will occur\n when changes occur to the items in this RecyclerView.</p>\n</div></li></ul></div></div></div><div id='method-getLayoutManager' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getLayoutManager' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getLayoutManager' class='name expandable'>getLayoutManager</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerView.LayoutManager}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the com.android.internal.widget.RecyclerView.LayoutManager currently responsible for\n layout policy for this R...</div><div class='long'><p>Return the <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> currently responsible for\n layout policy for this RecyclerView.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.LayoutManager}</span><div class='sub-desc'><p>The currently bound LayoutManager</p>\n</div></li></ul></div></div></div><div id='method-getMaxFlingVelocity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getMaxFlingVelocity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getMaxFlingVelocity' class='name expandable'>getMaxFlingVelocity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the maximum fling velocity used by this RecyclerView. ...</div><div class='long'><p>Returns the maximum fling velocity used by this RecyclerView.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The maximum fling velocity used by this RecyclerView.</p>\n</div></li></ul></div></div></div><div id='method-getMinFlingVelocity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getMinFlingVelocity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getMinFlingVelocity' class='name expandable'>getMinFlingVelocity</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the minimum velocity to start a fling. ...</div><div class='long'><p>Returns the minimum velocity to start a fling.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The minimum velocity to start a fling</p>\n</div></li></ul></div></div></div><div id='method-getOnFlingListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getOnFlingListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getOnFlingListener' class='name expandable'>getOnFlingListener</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerView.OnFlingListener}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the current com.android.internal.widget.RecyclerView.OnFlingListener from this com.android.internal.widget.Recycl...</div><div class='long'><p>Get the current <a href=\"#!/api/com.android.internal.widget.RecyclerView.OnFlingListener\" rel=\"com.android.internal.widget.RecyclerView.OnFlingListener\" class=\"docClass\">com.android.internal.widget.RecyclerView.OnFlingListener</a> from this <a href=\"#!/api/com.android.internal.widget.RecyclerView\" rel=\"com.android.internal.widget.RecyclerView\" class=\"docClass\">com.android.internal.widget.RecyclerView</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.OnFlingListener}</span><div class='sub-desc'><p>The OnFlingListener instance currently set (can be null).</p>\n</div></li></ul></div></div></div><div id='method-getPreserveFocusAfterLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getPreserveFocusAfterLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getPreserveFocusAfterLayout' class='name expandable'>getPreserveFocusAfterLayout</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the RecyclerView should attempt to preserve currently focused Adapter Item's\n focus even if the View ...</div><div class='long'><p>Returns true if the RecyclerView should attempt to preserve currently focused Adapter Item's\n focus even if the View representing the Item is replaced during a layout calculation.\n <p>\n By default, this value is {@code true}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the RecyclerView will try to preserve focused Item after a layout if it loses\n focus.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setPreserveFocusAfterLayout\" rel=\"com.android.internal.widget.RecyclerView-method-setPreserveFocusAfterLayout\" class=\"docClass\">setPreserveFocusAfterLayout</a>(boolean)</p>\n</div></li></ul></div></div></div><div id='method-getRecycledViewPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getRecycledViewPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getRecycledViewPool' class='name expandable'>getRecycledViewPool</a>( <span class='pre'></span> ) : Object {com.android.internal.widget.RecyclerView.RecycledViewPool}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve this RecyclerView's com.android.internal.widget.RecyclerView.RecycledViewPool. ...</div><div class='long'><p>Retrieve this RecyclerView's <a href=\"#!/api/com.android.internal.widget.RecyclerView.RecycledViewPool\" rel=\"com.android.internal.widget.RecyclerView.RecycledViewPool\" class=\"docClass\">com.android.internal.widget.RecyclerView.RecycledViewPool</a>. This method will never return null;\n if no pool is set for this view a new one will be created. See\n setRecycledViewPool for more information.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.internal.widget.RecyclerView.RecycledViewPool}</span><div class='sub-desc'><p>The pool used to store recycled item views for reuse.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setRecycledViewPool\" rel=\"com.android.internal.widget.RecyclerView-method-setRecycledViewPool\" class=\"docClass\">setRecycledViewPool</a>(RecycledViewPool)</p>\n</div></li></ul></div></div></div><div id='method-getScrollState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-getScrollState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-getScrollState' class='name expandable'>getScrollState</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the current scrolling state of the RecyclerView. ...</div><div class='long'><p>Return the current scrolling state of the RecyclerView.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p><a href=\"#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_IDLE\" rel=\"com.android.internal.widget.RecyclerView-property-SCROLL_STATE_IDLE\" class=\"docClass\">SCROLL_STATE_IDLE</a>, <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_DRAGGING\" rel=\"com.android.internal.widget.RecyclerView-property-SCROLL_STATE_DRAGGING\" class=\"docClass\">SCROLL_STATE_DRAGGING</a> or\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_SETTLING\" rel=\"com.android.internal.widget.RecyclerView-property-SCROLL_STATE_SETTLING\" class=\"docClass\">SCROLL_STATE_SETTLING</a></p>\n</div></li></ul></div></div></div><div id='method-hasFixedSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-hasFixedSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-hasFixedSize' class='name expandable'>hasFixedSize</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the app has specified that changes in adapter content cannot change\n the size of the RecyclerView itself.</p>\n</div></li></ul></div></div></div><div id='method-hasPendingAdapterUpdates' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-hasPendingAdapterUpdates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-hasPendingAdapterUpdates' class='name expandable'>hasPendingAdapterUpdates</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether there are pending adapter updates which are not yet applied to the layout. ...</div><div class='long'><p>Returns whether there are pending adapter updates which are not yet applied to the layout.\n <p>\n If this method returns <code>true</code>, it means that what user is currently seeing may not\n reflect them adapter contents (depending on what has changed).\n You may use this information to defer or cancel some operations.\n <p>\n This method returns true if RecyclerView has not yet calculated the first layout after it is\n attached to the Window or the Adapter has been replaced.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if there are some adapter updates which are not yet reflected to layout or false\n if layout is up to date.</p>\n</div></li></ul></div></div></div><div id='method-invalidateItemDecorations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-invalidateItemDecorations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-invalidateItemDecorations' class='name expandable'>invalidateItemDecorations</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Invalidates all ItemDecorations. ...</div><div class='long'><p>Invalidates all ItemDecorations. If RecyclerView has item decorations, calling this method\n will trigger a <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-requestLayout\" rel=\"com.android.internal.widget.RecyclerView-method-requestLayout\" class=\"docClass\">requestLayout</a>() call.</p>\n</div></div></div><div id='method-isAnimating' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-isAnimating' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-isAnimating' class='name expandable'>isAnimating</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if RecyclerView is currently running some animations. ...</div><div class='long'><p>Returns true if RecyclerView is currently running some animations.\n <p>\n If you want to be notified when animations are finished, use\n com.android.internal.widget.RecyclerView.ItemAnimator.isRunning(com.android.internal.widget.RecyclerView.ItemAnimator.com.android.internal.widget.RecyclerView.ItemAnimatorFinishedListener).</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if there are some item animations currently running or waiting to be started.</p>\n</div></li></ul></div></div></div><div id='method-isAttachedToWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-isAttachedToWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-isAttachedToWindow' class='name expandable'>isAttachedToWindow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if RecyclerView is attached to window. ...</div><div class='long'><p>Returns true if RecyclerView is attached to window.</p>\n</div></div></div><div id='method-isComputingLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-isComputingLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-isComputingLayout' class='name expandable'>isComputingLayout</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns whether RecyclerView is currently computing a layout. ...</div><div class='long'><p>Returns whether RecyclerView is currently computing a layout.\n <p>\n If this method returns true, it means that RecyclerView is in a lockdown state and any\n attempt to update adapter contents will result in an exception because adapter contents\n cannot be changed while RecyclerView is trying to compute the layout.\n <p>\n It is very unlikely that your code will be running during this state as it is\n called by the framework when a layout traversal happens or RecyclerView starts to scroll\n in response to system events (touch, accessibility etc).\n <p>\n This case may happen if you have some custom logic to change adapter contents in\n response to a View callback (e.g. focus change callback) which might be triggered during a\n layout calculation. In these cases, you should just postpone the change using a Handler or a\n similar mechanism.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if RecyclerView is currently computing a layout, <code>false</code>\n         otherwise</p>\n</div></li></ul></div></div></div><div id='method-isLayoutFrozen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-isLayoutFrozen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-isLayoutFrozen' class='name expandable'>isLayoutFrozen</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if layout and scroll are frozen. ...</div><div class='long'><p>Returns true if layout and scroll are frozen.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if layout and scroll are frozen\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setLayoutFrozen\" rel=\"com.android.internal.widget.RecyclerView-method-setLayoutFrozen\" class=\"docClass\">setLayoutFrozen</a>(boolean)</p>\n</div></li></ul></div></div></div><div id='method-offsetChildrenHorizontal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-offsetChildrenHorizontal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-offsetChildrenHorizontal' class='name expandable'>offsetChildrenHorizontal</a>( <span class='pre'>dx</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Offset the bounds of all child views by dx pixels. ...</div><div class='long'><p>Offset the bounds of all child views by <code>dx</code> pixels.\n Useful for implementing simple scrolling in <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManagers</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dx</span> : Number<div class='sub-desc'><p>Horizontal pixel offset to apply to the bounds of all child views</p>\n</div></li></ul></div></div></div><div id='method-offsetChildrenVertical' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-offsetChildrenVertical' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-offsetChildrenVertical' class='name expandable'>offsetChildrenVertical</a>( <span class='pre'>dy</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Offset the bounds of all child views by dy pixels. ...</div><div class='long'><p>Offset the bounds of all child views by <code>dy</code> pixels.\n Useful for implementing simple scrolling in <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManagers</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dy</span> : Number<div class='sub-desc'><p>Vertical pixel offset to apply to the bounds of all child views</p>\n</div></li></ul></div></div></div><div id='method-onChildAttachedToWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-onChildAttachedToWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-onChildAttachedToWindow' class='name expandable'>onChildAttachedToWindow</a>( <span class='pre'>child</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when an item view is attached to this RecyclerView. ...</div><div class='long'><p>Called when an item view is attached to this RecyclerView.</p>\n\n<p> <p>Subclasses of RecyclerView may want to perform extra bookkeeping or modifications\n of child views as they become attached. This will be called before a\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> measures or lays out the view and is a good time to perform these\n changes.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child view that is now attached to this RecyclerView and its associated window</p>\n</div></li></ul></div></div></div><div id='method-onChildDetachedFromWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-onChildDetachedFromWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-onChildDetachedFromWindow' class='name expandable'>onChildDetachedFromWindow</a>( <span class='pre'>child</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when an item view is detached from this RecyclerView. ...</div><div class='long'><p>Called when an item view is detached from this RecyclerView.</p>\n\n<p> <p>Subclasses of RecyclerView may want to perform extra bookkeeping or modifications\n of child views as they become detached. This will be called as a\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> fully detaches the child view from the parent and its window.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>child</span> : Object {View}<div class='sub-desc'><p>Child view that is now detached from this RecyclerView and its associated window</p>\n</div></li></ul></div></div></div><div id='method-onDraw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-onDraw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-onDraw' class='name expandable'>onDraw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onGenericMotionEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-onGenericMotionEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-onGenericMotionEvent' class='name expandable'>onGenericMotionEvent</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onInterceptTouchEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-onInterceptTouchEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-onInterceptTouchEvent' class='name expandable'>onInterceptTouchEvent</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-onScrollStateChanged' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-onScrollStateChanged' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-onScrollStateChanged' class='name expandable'>onScrollStateChanged</a>( <span class='pre'>state</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the scroll state of this RecyclerView changes. ...</div><div class='long'><p>Called when the scroll state of this RecyclerView changes. Subclasses should use this\n method to respond to state changes instead of an explicit listener.</p>\n\n<p> <p>This method will always be invoked before listeners, but after the LayoutManager\n responds to the scroll state change.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>state</span> : Number<div class='sub-desc'><p>the new scroll state, one of <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_IDLE\" rel=\"com.android.internal.widget.RecyclerView-property-SCROLL_STATE_IDLE\" class=\"docClass\">SCROLL_STATE_IDLE</a>,\n              <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_DRAGGING\" rel=\"com.android.internal.widget.RecyclerView-property-SCROLL_STATE_DRAGGING\" class=\"docClass\">SCROLL_STATE_DRAGGING</a> or <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-SCROLL_STATE_SETTLING\" rel=\"com.android.internal.widget.RecyclerView-property-SCROLL_STATE_SETTLING\" class=\"docClass\">SCROLL_STATE_SETTLING</a></p>\n</div></li></ul></div></div></div><div id='method-onScrolled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-onScrolled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-onScrolled' class='name expandable'>onScrolled</a>( <span class='pre'>dx, dy</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the scroll position of this RecyclerView changes. ...</div><div class='long'><p>Called when the scroll position of this RecyclerView changes. Subclasses should use\n this method to respond to scrolling within the adapter's data set instead of an explicit\n listener.</p>\n\n<p> <p>This method will always be invoked before listeners. If a subclass needs to perform\n any additional upkeep or bookkeeping after scrolling but before listeners run,\n this is a good place to do so.</p></p>\n\n<p> <p>This differs from int, int, int) in that it receives\n the distance scrolled in either direction within the adapter's data set instead of absolute\n scroll coordinates. Since RecyclerView cannot compute the absolute scroll position from\n any arbitrary point in the data set, <code>onScrollChanged</code> will always receive\n the current View.getScrollX() and View.getScrollY() values which\n do not correspond to the data set scroll position. However, some subclasses may choose\n to use these fields as special offsets.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dx</span> : Number<div class='sub-desc'><p>horizontal distance scrolled in pixels</p>\n</div></li><li><span class='pre'>dy</span> : Number<div class='sub-desc'><p>vertical distance scrolled in pixels</p>\n</div></li></ul></div></div></div><div id='method-onTouchEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-onTouchEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-onTouchEvent' class='name expandable'>onTouchEvent</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-removeItemDecoration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-removeItemDecoration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-removeItemDecoration' class='name expandable'>removeItemDecoration</a>( <span class='pre'>decor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove an com.android.internal.widget.RecyclerView.ItemDecoration from this RecyclerView. ...</div><div class='long'><p>Remove an <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemDecoration\" rel=\"com.android.internal.widget.RecyclerView.ItemDecoration\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemDecoration</a> from this RecyclerView.</p>\n\n<p> <p>The given decoration will no longer impact the measurement and drawing of\n item views.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>decor</span> : Object {RecyclerView.ItemDecoration}<div class='sub-desc'><p>Decoration to remove\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-addItemDecoration\" rel=\"com.android.internal.widget.RecyclerView-method-addItemDecoration\" class=\"docClass\">addItemDecoration</a>(ItemDecoration)</p>\n</div></li></ul></div></div></div><div id='method-removeOnChildAttachStateChangeListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-removeOnChildAttachStateChangeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-removeOnChildAttachStateChangeListener' class='name expandable'>removeOnChildAttachStateChangeListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Removes the provided listener from child attached state listeners list. ...</div><div class='long'><p>Removes the provided listener from child attached state listeners list.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.OnChildAttachStateChangeListener}<div class='sub-desc'><p>Listener to unregister</p>\n</div></li></ul></div></div></div><div id='method-removeOnItemTouchListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-removeOnItemTouchListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-removeOnItemTouchListener' class='name expandable'>removeOnItemTouchListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove an com.android.internal.widget.RecyclerView.OnItemTouchListener. ...</div><div class='long'><p>Remove an <a href=\"#!/api/com.android.internal.widget.RecyclerView.OnItemTouchListener\" rel=\"com.android.internal.widget.RecyclerView.OnItemTouchListener\" class=\"docClass\">com.android.internal.widget.RecyclerView.OnItemTouchListener</a>. It will no longer be able to intercept touch events.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.OnItemTouchListener}<div class='sub-desc'><p>Listener to remove</p>\n</div></li></ul></div></div></div><div id='method-removeOnScrollListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-removeOnScrollListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-removeOnScrollListener' class='name expandable'>removeOnScrollListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a listener that was notified of any changes in scroll state or position. ...</div><div class='long'><p>Remove a listener that was notified of any changes in scroll state or position.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.OnScrollListener}<div class='sub-desc'><p>listener to set or null to clear</p>\n</div></li></ul></div></div></div><div id='method-requestChildFocus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-requestChildFocus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-requestChildFocus' class='name expandable'>requestChildFocus</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-requestChildRectangleOnScreen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-requestChildRectangleOnScreen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-requestChildRectangleOnScreen' class='name expandable'>requestChildRectangleOnScreen</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-requestDisallowInterceptTouchEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-requestDisallowInterceptTouchEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-requestDisallowInterceptTouchEvent' class='name expandable'>requestDisallowInterceptTouchEvent</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-requestLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-requestLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-requestLayout' class='name expandable'>requestLayout</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-scrollBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-scrollBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-scrollBy' class='name expandable'>scrollBy</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-scrollTo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-scrollTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-scrollTo' class='name expandable'>scrollTo</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-scrollToPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-scrollToPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-scrollToPosition' class='name expandable'>scrollToPosition</a>( <span class='pre'>position</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience method to scroll to a certain position. ...</div><div class='long'><p>Convenience method to scroll to a certain position.</p>\n\n<p> RecyclerView does not implement scrolling logic, rather forwards the call to\n com.android.internal.widget.RecyclerView.LayoutManager.scrollToPosition(int)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Scroll to this adapter position\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager-method-scrollToPosition\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager-method-scrollToPosition\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager.scrollToPosition</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-sendAccessibilityEventUnchecked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-sendAccessibilityEventUnchecked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-sendAccessibilityEventUnchecked' class='name expandable'>sendAccessibilityEventUnchecked</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-setAccessibilityDelegateCompat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setAccessibilityDelegateCompat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setAccessibilityDelegateCompat' class='name expandable'>setAccessibilityDelegateCompat</a>( <span class='pre'>accessibilityDelegate</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the accessibility delegate compatibility implementation used by RecyclerView. ...</div><div class='long'><p>Sets the accessibility delegate compatibility implementation used by RecyclerView.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>accessibilityDelegate</span> : Object {RecyclerViewAccessibilityDelegate}<div class='sub-desc'><p>The accessibility delegate to be used by RecyclerView.</p>\n</div></li></ul></div></div></div><div id='method-setAdapter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setAdapter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setAdapter' class='name expandable'>setAdapter</a>( <span class='pre'>adapter</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a new adapter to provide child views on demand. ...</div><div class='long'><p>Set a new adapter to provide child views on demand.\n <p>\n When adapter is changed, all existing views are recycled back to the pool. If the pool has\n only one adapter, it will be cleared.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>adapter</span> : Object {com.android.internal.widget.RecyclerView.Adapter}<div class='sub-desc'><p>The new adapter to set, or null to set no adapter.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-swapAdapter\" rel=\"com.android.internal.widget.RecyclerView-method-swapAdapter\" class=\"docClass\">swapAdapter</a>(Adapter, boolean)</p>\n</div></li></ul></div></div></div><div id='method-setChildDrawingOrderCallback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setChildDrawingOrderCallback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setChildDrawingOrderCallback' class='name expandable'>setChildDrawingOrderCallback</a>( <span class='pre'>childDrawingOrderCallback</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the com.android.internal.widget.RecyclerView.ChildDrawingOrderCallback to be used for drawing children. ...</div><div class='long'><p>Sets the <a href=\"#!/api/com.android.internal.widget.RecyclerView.ChildDrawingOrderCallback\" rel=\"com.android.internal.widget.RecyclerView.ChildDrawingOrderCallback\" class=\"docClass\">com.android.internal.widget.RecyclerView.ChildDrawingOrderCallback</a> to be used for drawing children.\n <p>\n See int) for details. Calling this method will\n always call ViewGroup.setChildrenDrawingOrderEnabled(boolean). The parameter will be\n true if childDrawingOrderCallback is not null, false otherwise.\n <p>\n Note that child drawing order may be overridden by View's elevation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>childDrawingOrderCallback</span> : Object {RecyclerView.ChildDrawingOrderCallback}<div class='sub-desc'><p>The ChildDrawingOrderCallback to be used by the drawing\n                                  system.</p>\n</div></li></ul></div></div></div><div id='method-setClipToPadding' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setClipToPadding' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setClipToPadding' class='name expandable'>setClipToPadding</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-setHasFixedSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setHasFixedSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setHasFixedSize' class='name expandable'>setHasFixedSize</a>( <span class='pre'>hasFixedSize</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>RecyclerView can perform several optimizations if it can know in advance that RecyclerView's\n size is not affected by...</div><div class='long'><p>RecyclerView can perform several optimizations if it can know in advance that RecyclerView's\n size is not affected by the adapter contents. RecyclerView can still change its size based\n on other factors (e.g. its parent's size) but this size calculation cannot depend on the\n size of its children or contents of its adapter (except the number of items in the adapter).\n <p>\n If your use of RecyclerView falls into this category, set this to {@code true}. It will allow\n RecyclerView to avoid invalidating the whole layout when its adapter contents change.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>hasFixedSize</span> : Boolean<div class='sub-desc'><p>true if adapter changes cannot affect the size of the RecyclerView.</p>\n</div></li></ul></div></div></div><div id='method-setItemAnimator' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setItemAnimator' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setItemAnimator' class='name expandable'>setItemAnimator</a>( <span class='pre'>animator</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the com.android.internal.widget.RecyclerView.ItemAnimator that will handle animations involving changes\n to the ...</div><div class='long'><p>Sets the <a href=\"#!/api/com.android.internal.widget.RecyclerView.ItemAnimator\" rel=\"com.android.internal.widget.RecyclerView.ItemAnimator\" class=\"docClass\">com.android.internal.widget.RecyclerView.ItemAnimator</a> that will handle animations involving changes\n to the items in this RecyclerView. By default, RecyclerView instantiates and\n uses an instance of <a href=\"#!/api/com.android.internal.widget.DefaultItemAnimator\" rel=\"com.android.internal.widget.DefaultItemAnimator\" class=\"docClass\">com.android.internal.widget.DefaultItemAnimator</a>. Whether item animations are\n enabled for the RecyclerView depends on the ItemAnimator and whether\n the LayoutManager supports item animations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>animator</span> : Object {RecyclerView.ItemAnimator}<div class='sub-desc'><p>The ItemAnimator being set. If null, no animations will occur\n when changes occur to the items in this RecyclerView.</p>\n</div></li></ul></div></div></div><div id='method-setItemViewCacheSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setItemViewCacheSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setItemViewCacheSize' class='name expandable'>setItemViewCacheSize</a>( <span class='pre'>size</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the number of offscreen views to retain before adding them to the potentially shared\n recycled view pool. ...</div><div class='long'><p>Set the number of offscreen views to retain before adding them to the potentially shared\n recycled view pool.</p>\n\n<p> <p>The offscreen view cache stays aware of changes in the attached adapter, allowing\n a LayoutManager to reuse those views unmodified without needing to return to the adapter\n to rebind them.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>size</span> : Number<div class='sub-desc'><p>Number of views to cache offscreen before returning them to the general\n             recycled view pool</p>\n</div></li></ul></div></div></div><div id='method-setLayoutFrozen' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setLayoutFrozen' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setLayoutFrozen' class='name expandable'>setLayoutFrozen</a>( <span class='pre'>frozen</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Enable or disable layout and scroll. ...</div><div class='long'><p>Enable or disable layout and scroll.  After <code>setLayoutFrozen(true)</code> is called,\n Layout requests will be postponed until <code>setLayoutFrozen(false)</code> is called;\n child views are not updated when RecyclerView is frozen, int),\n int), <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-scrollToPosition\" rel=\"com.android.internal.widget.RecyclerView-method-scrollToPosition\" class=\"docClass\">scrollToPosition</a>(int) and\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-smoothScrollToPosition\" rel=\"com.android.internal.widget.RecyclerView-method-smoothScrollToPosition\" class=\"docClass\">smoothScrollToPosition</a>(int) are dropped; TouchEvents and GenericMotionEvents are\n dropped; int, Recycler, State) will not be\n called.</p>\n\n<p> <p>\n <code>setLayoutFrozen(true)</code> does not prevent app from directly calling com.android.internal.widget.RecyclerView.LayoutManager.scrollToPosition(int), RecyclerView, State, int).\n <p>\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setAdapter\" rel=\"com.android.internal.widget.RecyclerView-method-setAdapter\" class=\"docClass\">setAdapter</a>(Adapter) and boolean) will automatically\n stop frozen.\n <p>\n Note: Running ItemAnimator is not stopped automatically,  it's caller's\n responsibility to call ItemAnimator.end().</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>frozen</span> : Boolean<div class='sub-desc'><p>true to freeze layout and scroll, false to re-enable.</p>\n</div></li></ul></div></div></div><div id='method-setLayoutManager' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setLayoutManager' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setLayoutManager' class='name expandable'>setLayoutManager</a>( <span class='pre'>layout</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the com.android.internal.widget.RecyclerView.LayoutManager that this RecyclerView will use. ...</div><div class='long'><p>Set the <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> that this RecyclerView will use.</p>\n\n<p> <p>In contrast to other adapter-backed views such as android.widget.ListView\n or android.widget.GridView, RecyclerView allows client code to provide custom\n layout arrangements for child views. These arrangements are controlled by the\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a>. A LayoutManager must be provided for RecyclerView to function.</p></p>\n\n<p> <p>Several default strategies are provided for common uses such as lists and grids.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>layout</span> : Object {RecyclerView.LayoutManager}<div class='sub-desc'><p>LayoutManager to use</p>\n</div></li></ul></div></div></div><div id='method-setOnFlingListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setOnFlingListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setOnFlingListener' class='name expandable'>setOnFlingListener</a>( <span class='pre'>onFlingListener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set a com.android.internal.widget.RecyclerView.OnFlingListener for this com.android.internal.widget.RecyclerView. ...</div><div class='long'><p>Set a <a href=\"#!/api/com.android.internal.widget.RecyclerView.OnFlingListener\" rel=\"com.android.internal.widget.RecyclerView.OnFlingListener\" class=\"docClass\">com.android.internal.widget.RecyclerView.OnFlingListener</a> for this <a href=\"#!/api/com.android.internal.widget.RecyclerView\" rel=\"com.android.internal.widget.RecyclerView\" class=\"docClass\">com.android.internal.widget.RecyclerView</a>.\n <p>\n If the <a href=\"#!/api/com.android.internal.widget.RecyclerView.OnFlingListener\" rel=\"com.android.internal.widget.RecyclerView.OnFlingListener\" class=\"docClass\">com.android.internal.widget.RecyclerView.OnFlingListener</a> is set then it will receive\n calls to fling(int,int) and will be able to intercept them.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>onFlingListener</span> : Object {RecyclerView.OnFlingListener}<div class='sub-desc'><p>The OnFlingListener instance.</p>\n</div></li></ul></div></div></div><div id='method-setOnScrollListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setOnScrollListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setOnScrollListener' class='name expandable'>setOnScrollListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Set a listener that will be notified of any changes in scroll state or position. ...</div><div class='long'><p>Set a listener that will be notified of any changes in scroll state or position.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use addOnScrollListener(OnScrollListener) and\n             removeOnScrollListener(OnScrollListener)</p>\n\n        </div>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.OnScrollListener}<div class='sub-desc'><p>Listener to set or null to clear</p>\n</div></li></ul></div></div></div><div id='method-setPreserveFocusAfterLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setPreserveFocusAfterLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setPreserveFocusAfterLayout' class='name expandable'>setPreserveFocusAfterLayout</a>( <span class='pre'>preserveFocusAfterLayout</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set whether the RecyclerView should try to keep the same Item focused after a layout\n calculation or not. ...</div><div class='long'><p>Set whether the RecyclerView should try to keep the same Item focused after a layout\n calculation or not.\n <p>\n Usually, LayoutManagers keep focused views visible before and after layout but sometimes,\n views may lose focus during a layout calculation as their state changes or they are replaced\n with another view due to type change or animation. In these cases, RecyclerView can request\n focus on the new view automatically.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>preserveFocusAfterLayout</span> : Boolean<div class='sub-desc'><p>Whether RecyclerView should preserve focused Item during a\n                                 layout calculations. Defaults to true.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-getPreserveFocusAfterLayout\" rel=\"com.android.internal.widget.RecyclerView-method-getPreserveFocusAfterLayout\" class=\"docClass\">getPreserveFocusAfterLayout</a>()</p>\n</div></li></ul></div></div></div><div id='method-setRecycledViewPool' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setRecycledViewPool' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setRecycledViewPool' class='name expandable'>setRecycledViewPool</a>( <span class='pre'>pool</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Recycled view pools allow multiple RecyclerViews to share a common pool of scrap views. ...</div><div class='long'><p>Recycled view pools allow multiple RecyclerViews to share a common pool of scrap views.\n This can be useful if you have multiple RecyclerViews with adapters that use the same\n view types, for example if you have several data sets with the same kinds of item views\n displayed by a com.android.internal.widget.ViewPager.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>pool</span> : Object {RecyclerView.RecycledViewPool}<div class='sub-desc'><p>Pool to set. If this parameter is null a new pool will be created and used.</p>\n</div></li></ul></div></div></div><div id='method-setRecyclerListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setRecyclerListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setRecyclerListener' class='name expandable'>setRecyclerListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register a listener that will be notified whenever a child view is recycled. ...</div><div class='long'><p>Register a listener that will be notified whenever a child view is recycled.</p>\n\n<p> <p>This listener will be called when a LayoutManager or the RecyclerView decides\n that a child view is no longer needed. If an application associates expensive\n or heavyweight data with item views, this may be a good place to release\n or free those resources.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {RecyclerView.RecyclerListener}<div class='sub-desc'><p>Listener to register, or null to clear</p>\n</div></li></ul></div></div></div><div id='method-setScrollingTouchSlop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setScrollingTouchSlop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setScrollingTouchSlop' class='name expandable'>setScrollingTouchSlop</a>( <span class='pre'>slopConstant</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Configure the scrolling touch slop for a specific use case. ...</div><div class='long'><p>Configure the scrolling touch slop for a specific use case.</p>\n\n<p> Set up the RecyclerView's scrolling motion threshold based on common usages.\n Valid arguments are <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-TOUCH_SLOP_DEFAULT\" rel=\"com.android.internal.widget.RecyclerView-property-TOUCH_SLOP_DEFAULT\" class=\"docClass\">TOUCH_SLOP_DEFAULT</a> and <a href=\"#!/api/com.android.internal.widget.RecyclerView-property-TOUCH_SLOP_PAGING\" rel=\"com.android.internal.widget.RecyclerView-property-TOUCH_SLOP_PAGING\" class=\"docClass\">TOUCH_SLOP_PAGING</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>slopConstant</span> : Number<div class='sub-desc'><p>One of the <code>TOUCH_SLOP_</code> constants representing\n                     the intended usage of this RecyclerView</p>\n</div></li></ul></div></div></div><div id='method-setViewCacheExtension' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-setViewCacheExtension' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-setViewCacheExtension' class='name expandable'>setViewCacheExtension</a>( <span class='pre'>extension</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets a new com.android.internal.widget.RecyclerView.ViewCacheExtension to be used by the Recycler. ...</div><div class='long'><p>Sets a new <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewCacheExtension\" rel=\"com.android.internal.widget.RecyclerView.ViewCacheExtension\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewCacheExtension</a> to be used by the Recycler.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>extension</span> : Object {RecyclerView.ViewCacheExtension}<div class='sub-desc'><p>ViewCacheExtension to be used or null if you want to clear the existing one.\n@see int, int)</p>\n</div></li></ul></div></div></div><div id='method-smoothScrollBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-smoothScrollBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-smoothScrollBy' class='name expandable'>smoothScrollBy</a>( <span class='pre'>dx, dy, interpolator</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Animate a scroll by the given amount of pixels along either axis. ...</div><div class='long'><p>Animate a scroll by the given amount of pixels along either axis.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>dx</span> : Number<div class='sub-desc'><p>Pixels to scroll horizontally</p>\n</div></li><li><span class='pre'>dy</span> : Number<div class='sub-desc'><p>Pixels to scroll vertically</p>\n</div></li><li><span class='pre'>interpolator</span> : Object {Interpolator}<div class='sub-desc'><p>Interpolator to be used for scrolling. If it is\n                     {@code null}, RecyclerView is going to use the default interpolator.</p>\n</div></li></ul></div></div></div><div id='method-smoothScrollToPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-smoothScrollToPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-smoothScrollToPosition' class='name expandable'>smoothScrollToPosition</a>( <span class='pre'>position</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts a smooth scroll to an adapter position. ...</div><div class='long'><p>Starts a smooth scroll to an adapter position.\n <p>\n To support smooth scrolling, you must override\n State, int) and create a\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.SmoothScroller\" rel=\"com.android.internal.widget.RecyclerView.SmoothScroller\" class=\"docClass\">com.android.internal.widget.RecyclerView.SmoothScroller</a>.\n <p>\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> is responsible for creating the actual scroll action. If you want to\n provide a custom smooth scroll logic, override\n State, int) in your\n LayoutManager.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The adapter position to scroll to\n@see LayoutManager#smoothScrollToPosition(RecyclerView, State, int)</p>\n</div></li></ul></div></div></div><div id='method-stopScroll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-stopScroll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-stopScroll' class='name expandable'>stopScroll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stop any current scroll in progress, such as one started by\n int), int) or a touch-initiated fling. ...</div><div class='long'><p>Stop any current scroll in progress, such as one started by\n int), int) or a touch-initiated fling.</p>\n</div></div></div><div id='method-swapAdapter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView'>com.android.internal.widget.RecyclerView</span><br/><a href='source/RecyclerView.html#com-android-internal-widget-RecyclerView-method-swapAdapter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView-method-swapAdapter' class='name expandable'>swapAdapter</a>( <span class='pre'>adapter, removeAndRecycleExistingViews</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Swaps the current adapter with the provided one. ...</div><div class='long'><p>Swaps the current adapter with the provided one. It is similar to\n <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setAdapter\" rel=\"com.android.internal.widget.RecyclerView-method-setAdapter\" class=\"docClass\">setAdapter</a>(Adapter) but assumes existing adapter and the new adapter uses the same\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.ViewHolder\" rel=\"com.android.internal.widget.RecyclerView.ViewHolder\" class=\"docClass\">com.android.internal.widget.RecyclerView.ViewHolder</a> and does not clear the RecycledViewPool.\n <p>\n Note that it still calls onAdapterChanged callbacks.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>adapter</span> : Object {com.android.internal.widget.RecyclerView.Adapter}<div class='sub-desc'><p>The new adapter to set, or null to set no adapter.</p>\n</div></li><li><span class='pre'>removeAndRecycleExistingViews</span> : Boolean<div class='sub-desc'><p>If set to true, RecyclerView will recycle all existing\n                                      Views. If adapters have stable ids and/or you want to\n                                      animate the disappearing views, you may prefer to set\n                                      this to false.\n@see <a href=\"#!/api/com.android.internal.widget.RecyclerView-method-setAdapter\" rel=\"com.android.internal.widget.RecyclerView-method-setAdapter\" class=\"docClass\">setAdapter</a>(Adapter)</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});