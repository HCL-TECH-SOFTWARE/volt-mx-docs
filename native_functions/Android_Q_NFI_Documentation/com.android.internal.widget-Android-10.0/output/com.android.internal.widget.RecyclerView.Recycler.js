Ext.data.JsonP.com_android_internal_widget_RecyclerView_Recycler({"tagname":"class","name":"com.android.internal.widget.RecyclerView.Recycler","autodetected":{},"files":[{"filename":"Recycler.js","href":"Recycler.html#com-android-internal-widget-RecyclerView-Recycler"}],"extends":"java.lang.Object","members":[{"name":"bindViewToPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Recycler","id":"method-bindViewToPosition","meta":{}},{"name":"clear","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Recycler","id":"method-clear","meta":{}},{"name":"convertPreLayoutPositionToPostLayout","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Recycler","id":"method-convertPreLayoutPositionToPostLayout","meta":{}},{"name":"getScrapList","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Recycler","id":"method-getScrapList","meta":{}},{"name":"getViewForPosition","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Recycler","id":"method-getViewForPosition","meta":{}},{"name":"recycleView","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Recycler","id":"method-recycleView","meta":{}},{"name":"setViewCacheSize","tagname":"method","owner":"com.android.internal.widget.RecyclerView.Recycler","id":"method-setViewCacheSize","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.internal.widget.RecyclerView.Recycler","short_doc":"A Recycler is responsible for managing scrapped or detached item views for reuse. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>com.android.internal.widget.RecyclerView.Recycler</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Recycler.html#com-android-internal-widget-RecyclerView-Recycler' target='_blank'>Recycler.js</a></div></pre><div class='doc-contents'><p>A Recycler is responsible for managing scrapped or detached item views for reuse.</p>\n\n<p> <p>A \"scrapped\" view is a view that is still attached to its parent RecyclerView but\n that has been marked for removal or reuse.</p></p>\n\n<p> <p>Typical use of a Recycler by a <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> will be to obtain views for\n an adapter's data set representing the data at a given position or item ID.\n If the view to be reused is considered \"dirty\" the adapter will be asked to rebind it.\n If not, the view can be quickly reused by the LayoutManager with no further work.\n Clean views that have not requested layout\n may be repositioned by a LayoutManager without remeasurement.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-bindViewToPosition' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Recycler'>com.android.internal.widget.RecyclerView.Recycler</span><br/><a href='source/Recycler.html#com-android-internal-widget-RecyclerView-Recycler-method-bindViewToPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Recycler-method-bindViewToPosition' class='name expandable'>bindViewToPosition</a>( <span class='pre'>view, position</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Binds the given View to the position. ...</div><div class='long'><p>Binds the given View to the position. The View can be a View previously retrieved via\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition\" rel=\"com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition\" class=\"docClass\">getViewForPosition</a>(int) or created by\n int).\n <p>\n Generally, a LayoutManager should acquire its views via <a href=\"#!/api/com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition\" rel=\"com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition\" class=\"docClass\">getViewForPosition</a>(int)\n and let the RecyclerView handle caching. This is a helper method for LayoutManager who\n wants to handle its own recycling logic.\n <p>\n Note that, <a href=\"#!/api/com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition\" rel=\"com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition\" class=\"docClass\">getViewForPosition</a>(int) already binds the View to the position so\n you don't need to call this method unless you want to bind this View to another position.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>The view to update.</p>\n</div></li><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The position of the item to bind to this View.</p>\n</div></li></ul></div></div></div><div id='method-clear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Recycler'>com.android.internal.widget.RecyclerView.Recycler</span><br/><a href='source/Recycler.html#com-android-internal-widget-RecyclerView-Recycler-method-clear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Recycler-method-clear' class='name expandable'>clear</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clear scrap views out of this recycler. ...</div><div class='long'><p>Clear scrap views out of this recycler. Detached views contained within a\n recycled view pool will remain.</p>\n</div></div></div><div id='method-convertPreLayoutPositionToPostLayout' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Recycler'>com.android.internal.widget.RecyclerView.Recycler</span><br/><a href='source/Recycler.html#com-android-internal-widget-RecyclerView-Recycler-method-convertPreLayoutPositionToPostLayout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Recycler-method-convertPreLayoutPositionToPostLayout' class='name expandable'>convertPreLayoutPositionToPostLayout</a>( <span class='pre'>position</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>RecyclerView provides artificial position range (item count) in pre-layout state and\n automatically maps these positi...</div><div class='long'><p>RecyclerView provides artificial position range (item count) in pre-layout state and\n automatically maps these positions to <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter\" rel=\"com.android.internal.widget.RecyclerView.Adapter\" class=\"docClass\">com.android.internal.widget.RecyclerView.Adapter</a> positions when\n <a href=\"#!/api/com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition\" rel=\"com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition\" class=\"docClass\">getViewForPosition</a>(int) or int) is called.\n <p>\n Usually, LayoutManager does not need to worry about this. However, in some cases, your\n LayoutManager may need to call some custom component with item positions in which\n case you need the actual adapter position instead of the pre layout position. You\n can use this method to convert a pre-layout position to adapter (post layout) position.\n <p>\n Note that if the provided position belongs to a deleted ViewHolder, this method will\n return -1.\n <p>\n Calling this method in post-layout state returns the same value back.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>The pre-layout position to convert. Must be greater or equal to 0 and\n                 less than State.getItemCount().</p>\n</div></li></ul></div></div></div><div id='method-getScrapList' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Recycler'>com.android.internal.widget.RecyclerView.Recycler</span><br/><a href='source/Recycler.html#com-android-internal-widget-RecyclerView-Recycler-method-getScrapList' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Recycler-method-getScrapList' class='name expandable'>getScrapList</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an unmodifiable list of ViewHolders that are currently in the scrap list. ...</div><div class='long'><p>Returns an unmodifiable list of ViewHolders that are currently in the scrap list.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>List of ViewHolders in the scrap list.</p>\n</div></li></ul></div></div></div><div id='method-getViewForPosition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Recycler'>com.android.internal.widget.RecyclerView.Recycler</span><br/><a href='source/Recycler.html#com-android-internal-widget-RecyclerView-Recycler-method-getViewForPosition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Recycler-method-getViewForPosition' class='name expandable'>getViewForPosition</a>( <span class='pre'>position</span> ) : Object {android.view.View}<span class=\"signature\"></span></div><div class='description'><div class='short'>Obtain a view initialized for the given position. ...</div><div class='long'><p>Obtain a view initialized for the given position.</p>\n\n<p> This method should be used by <a href=\"#!/api/com.android.internal.widget.RecyclerView.LayoutManager\" rel=\"com.android.internal.widget.RecyclerView.LayoutManager\" class=\"docClass\">com.android.internal.widget.RecyclerView.LayoutManager</a> implementations to obtain\n views to represent data from an <a href=\"#!/api/com.android.internal.widget.RecyclerView.Adapter\" rel=\"com.android.internal.widget.RecyclerView.Adapter\" class=\"docClass\">com.android.internal.widget.RecyclerView.Adapter</a>.\n <p>\n The Recycler may reuse a scrap or detached view from a shared pool if one is\n available for the correct view type. If the adapter has not indicated that the\n data at the given position has changed, the Recycler will attempt to hand back\n a scrap view that was previously initialized for that data without rebinding.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>position</span> : Number<div class='sub-desc'><p>Position to obtain a view for</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.View}</span><div class='sub-desc'><p>A view representing the data at <code>position</code> from <code>adapter</code></p>\n</div></li></ul></div></div></div><div id='method-recycleView' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Recycler'>com.android.internal.widget.RecyclerView.Recycler</span><br/><a href='source/Recycler.html#com-android-internal-widget-RecyclerView-Recycler-method-recycleView' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Recycler-method-recycleView' class='name expandable'>recycleView</a>( <span class='pre'>view</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Recycle a detached view. ...</div><div class='long'><p>Recycle a detached view. The specified view will be added to a pool of views\n for later rebinding and reuse.</p>\n\n<p> <p>A view must be fully detached (removed from parent) before it may be recycled. If the\n View is scrapped, it will be removed from scrap list.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>view</span> : Object {View}<div class='sub-desc'><p>Removed view for recycling\n@see LayoutManager#removeAndRecycleView(View, Recycler)</p>\n</div></li></ul></div></div></div><div id='method-setViewCacheSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.internal.widget.RecyclerView.Recycler'>com.android.internal.widget.RecyclerView.Recycler</span><br/><a href='source/Recycler.html#com-android-internal-widget-RecyclerView-Recycler-method-setViewCacheSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.internal.widget.RecyclerView.Recycler-method-setViewCacheSize' class='name expandable'>setViewCacheSize</a>( <span class='pre'>viewCount</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the maximum number of detached, valid views we should retain for later use. ...</div><div class='long'><p>Set the maximum number of detached, valid views we should retain for later use.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>viewCount</span> : Number<div class='sub-desc'><p>Number of views to keep before sending views to the shared pool</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});