Ext.data.JsonP.com_android_server_policy_WindowManagerPolicy_WindowState({"tagname":"class","name":"com.android.server.policy.WindowManagerPolicy.WindowState","autodetected":{},"files":[{"filename":"WindowState.js","href":"WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState"}],"members":[{"name":"canAcquireSleepToken","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-canAcquireSleepToken","meta":{}},{"name":"canAddInternalSystemWindow","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-canAddInternalSystemWindow","meta":{}},{"name":"canAffectSystemUiFlags","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-canAffectSystemUiFlags","meta":{}},{"name":"canReceiveKeys","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-canReceiveKeys","meta":{}},{"name":"canShowWhenLocked","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-canShowWhenLocked","meta":{}},{"name":"computeFrameLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-computeFrameLw","meta":{}},{"name":"getActivityType","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getActivityType","meta":{}},{"name":"getAppToken","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getAppToken","meta":{}},{"name":"getAttrs","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getAttrs","meta":{}},{"name":"getBaseType","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getBaseType","meta":{}},{"name":"getContentFrameLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getContentFrameLw","meta":{}},{"name":"getDisplayFrameLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getDisplayFrameLw","meta":{}},{"name":"getDisplayId","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getDisplayId","meta":{}},{"name":"getFrameLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getFrameLw","meta":{}},{"name":"getGivenContentInsetsLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getGivenContentInsetsLw","meta":{}},{"name":"getGivenInsetsPendingLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getGivenInsetsPendingLw","meta":{}},{"name":"getGivenVisibleInsetsLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getGivenVisibleInsetsLw","meta":{}},{"name":"getNeedsMenuLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getNeedsMenuLw","meta":{}},{"name":"getOverscanFrameLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getOverscanFrameLw","meta":{}},{"name":"getOwningPackage","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getOwningPackage","meta":{}},{"name":"getOwningUid","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getOwningUid","meta":{}},{"name":"getRotationAnimationHint","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getRotationAnimationHint","meta":{}},{"name":"getSurfaceLayer","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getSurfaceLayer","meta":{}},{"name":"getSystemUiVisibility","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getSystemUiVisibility","meta":{}},{"name":"getVisibleFrameLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getVisibleFrameLw","meta":{}},{"name":"getWindowFrames","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getWindowFrames","meta":{}},{"name":"getWindowingMode","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-getWindowingMode","meta":{}},{"name":"hasAppShownWindows","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-hasAppShownWindows","meta":{}},{"name":"hasDrawnLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-hasDrawnLw","meta":{"deprecated":{"text":"<p>Use <a href=\"#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isDrawnLw\" rel=\"com.android.server.policy.WindowManagerPolicy.WindowState-method-isDrawnLw\" class=\"docClass\">isDrawnLw</a> or any of the other drawn/visibility methods.</p>\n"}}},{"name":"hideLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-hideLw","meta":{}},{"name":"inMultiWindowMode","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-inMultiWindowMode","meta":{}},{"name":"isAlive","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isAlive","meta":{}},{"name":"isAnimatingLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isAnimatingLw","meta":{}},{"name":"isDefaultDisplay","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isDefaultDisplay","meta":{}},{"name":"isDimming","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isDimming","meta":{}},{"name":"isDisplayedLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isDisplayedLw","meta":{}},{"name":"isDrawnLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isDrawnLw","meta":{}},{"name":"isGoneForLayoutLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isGoneForLayoutLw","meta":{}},{"name":"isInputMethodTarget","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isInputMethodTarget","meta":{}},{"name":"isInputMethodWindow","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isInputMethodWindow","meta":{}},{"name":"isLetterboxedForDisplayCutoutLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isLetterboxedForDisplayCutoutLw","meta":{}},{"name":"isLetterboxedOverlappingWith","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isLetterboxedOverlappingWith","meta":{}},{"name":"isVisibleLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isVisibleLw","meta":{}},{"name":"isVoiceInteraction","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-isVoiceInteraction","meta":{}},{"name":"showLw","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-showLw","meta":{}},{"name":"writeIdentifierToProto","tagname":"method","owner":"com.android.server.policy.WindowManagerPolicy.WindowState","id":"method-writeIdentifierToProto","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-com.android.server.policy.WindowManagerPolicy.WindowState","short_doc":"Interface to the Window Manager state associated with a particular\n window. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState' target='_blank'>WindowState.js</a></div></pre><div class='doc-contents'><p>Interface to the Window Manager state associated with a particular\n window.  You can hold on to an instance of this interface from the call\n to prepareAddWindow() until removeWindow().</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-canAcquireSleepToken' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-canAcquireSleepToken' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-canAcquireSleepToken' class='name expandable'>canAcquireSleepToken</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the window owner has the permission to acquire a sleep token when it's\n visible. ...</div><div class='long'><p>Returns true if the window owner has the permission to acquire a sleep token when it's\n visible. That is, they have the permission Manifest.permission.DEVICE_POWER.</p>\n</div></div></div><div id='method-canAddInternalSystemWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-canAddInternalSystemWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-canAddInternalSystemWindow' class='name expandable'>canAddInternalSystemWindow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the window owner can add internal system windows. ...</div><div class='long'><p>Returns true if the window owner can add internal system windows.\n That is, they have Manifest.permission.INTERNAL_SYSTEM_WINDOW.</p>\n</div></div></div><div id='method-canAffectSystemUiFlags' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-canAffectSystemUiFlags' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-canAffectSystemUiFlags' class='name expandable'>canAffectSystemUiFlags</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Whether the window can affect SystemUI flags, meaning that SystemUI (system bars,\n         for example) will be  affected by the flags specified in this window. This is the\n         case when the surface is on screen but not exiting.</p>\n</div></li></ul></div></div></div><div id='method-canReceiveKeys' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-canReceiveKeys' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-canReceiveKeys' class='name expandable'>canReceiveKeys</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this window desires key events.</p>\n</div></li></ul></div></div></div><div id='method-canShowWhenLocked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-canShowWhenLocked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-canShowWhenLocked' class='name expandable'>canShowWhenLocked</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the window can show over keyguard.</p>\n</div></li></ul></div></div></div><div id='method-computeFrameLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-computeFrameLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-computeFrameLw' class='name expandable'>computeFrameLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Perform standard frame computation. ...</div><div class='long'><p>Perform standard frame computation.  The result can be obtained with\n getFrame() if so desired.  Must be called with the window manager\n lock held.</p>\n</div></div></div><div id='method-getActivityType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getActivityType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getActivityType' class='name expandable'>getActivityType</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the WindowConfiguration.ActivityType associated with the configuration\n of this window. ...</div><div class='long'><p>Returns the WindowConfiguration.ActivityType associated with the configuration\n of this window.</p>\n</div></div></div><div id='method-getAppToken' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getAppToken' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getAppToken' class='name expandable'>getAppToken</a>( <span class='pre'></span> ) : Object {IApplicationToken}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the token for the application (actually activity) that owns\n this window. ...</div><div class='long'><p>Return the token for the application (actually activity) that owns\n this window.  May return null for system windows.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {IApplicationToken}</span><div class='sub-desc'><p>An IApplicationToken identifying the owning activity.</p>\n</div></li></ul></div></div></div><div id='method-getAttrs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getAttrs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getAttrs' class='name expandable'>getAttrs</a>( <span class='pre'></span> ) : Object {android.view.WindowManager.LayoutParams}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the current LayoutParams of the window. ...</div><div class='long'><p>Retrieve the current LayoutParams of the window.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.WindowManager.LayoutParams}</span><div class='sub-desc'><p>WindowManager.LayoutParams The window's internal LayoutParams\n         instance.</p>\n</div></li></ul></div></div></div><div id='method-getBaseType' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getBaseType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getBaseType' class='name expandable'>getBaseType</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the type of the top-level window. ...</div><div class='long'><p>Retrieve the type of the top-level window.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the base type of the parent window if attached or its own type otherwise</p>\n</div></li></ul></div></div></div><div id='method-getContentFrameLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getContentFrameLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getContentFrameLw' class='name expandable'>getContentFrameLw</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the frame of the content area that this window was last\n laid out in. ...</div><div class='long'><p>Retrieve the frame of the content area that this window was last\n laid out in.  This is the area in which the content of the window\n should be placed.  It will be smaller than the display frame to\n account for screen decorations such as a status bar or soft\n keyboard.  Must be called with the\n window manager lock held.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>Rect The rectangle holding the content frame.</p>\n</div></li></ul></div></div></div><div id='method-getDisplayFrameLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getDisplayFrameLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getDisplayFrameLw' class='name expandable'>getDisplayFrameLw</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the frame of the display that this window was last\n laid out in. ...</div><div class='long'><p>Retrieve the frame of the display that this window was last\n laid out in.  Must be called with the\n window manager lock held.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>Rect The rectangle holding the display frame.</p>\n</div></li></ul></div></div></div><div id='method-getDisplayId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getDisplayId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getDisplayId' class='name expandable'>getDisplayId</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getFrameLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getFrameLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getFrameLw' class='name expandable'>getFrameLw</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the current frame of the window that has been assigned by\n the window manager. ...</div><div class='long'><p>Retrieve the current frame of the window that has been assigned by\n the window manager.  Must be called with the window manager lock held.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>Rect The rectangle holding the window frame.</p>\n</div></li></ul></div></div></div><div id='method-getGivenContentInsetsLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getGivenContentInsetsLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getGivenContentInsetsLw' class='name expandable'>getGivenContentInsetsLw</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the insets given by this window's client for the content\n area of windows behind it. ...</div><div class='long'><p>Retrieve the insets given by this window's client for the content\n area of windows behind it.  Must be called with the\n window manager lock held.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>Rect The left, top, right, and bottom insets, relative\n to the window's frame, of the actual contents.</p>\n</div></li></ul></div></div></div><div id='method-getGivenInsetsPendingLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getGivenInsetsPendingLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getGivenInsetsPendingLw' class='name expandable'>getGivenInsetsPendingLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this window is waiting to receive its given\n internal insets from the client app, and so should not i...</div><div class='long'><p>Returns true if this window is waiting to receive its given\n internal insets from the client app, and so should not impact the\n layout of other windows.</p>\n</div></div></div><div id='method-getGivenVisibleInsetsLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getGivenVisibleInsetsLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getGivenVisibleInsetsLw' class='name expandable'>getGivenVisibleInsetsLw</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the insets given by this window's client for the visible\n area of windows behind it. ...</div><div class='long'><p>Retrieve the insets given by this window's client for the visible\n area of windows behind it.  Must be called with the\n window manager lock held.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>Rect The left, top, right, and bottom insets, relative\n to the window's frame, of the actual visible area.</p>\n</div></li></ul></div></div></div><div id='method-getNeedsMenuLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getNeedsMenuLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getNeedsMenuLw' class='name expandable'>getNeedsMenuLw</a>( <span class='pre'>bottom</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return whether this window needs the menu key shown. ...</div><div class='long'><p>Return whether this window needs the menu key shown.  Must be called\n with window lock held, because it may need to traverse down through\n window list to determine the result.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>bottom</span> : Object {WindowManagerPolicy.WindowState}<div class='sub-desc'><p>The bottom-most window to consider when determining this.</p>\n</div></li></ul></div></div></div><div id='method-getOverscanFrameLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getOverscanFrameLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getOverscanFrameLw' class='name expandable'>getOverscanFrameLw</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the frame of the area inside the overscan region of the\n display that this window was last laid out in. ...</div><div class='long'><p>Retrieve the frame of the area inside the overscan region of the\n display that this window was last laid out in.  Must be called with the\n window manager lock held.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>Rect The rectangle holding the display overscan frame.</p>\n</div></li></ul></div></div></div><div id='method-getOwningPackage' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getOwningPackage' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getOwningPackage' class='name expandable'>getOwningPackage</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the package name of the app that owns this window. ...</div><div class='long'><p>Return the package name of the app that owns this window.</p>\n</div></div></div><div id='method-getOwningUid' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getOwningUid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getOwningUid' class='name expandable'>getOwningUid</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the uid of the app that owns this window. ...</div><div class='long'><p>Return the uid of the app that owns this window.</p>\n</div></div></div><div id='method-getRotationAnimationHint' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getRotationAnimationHint' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getRotationAnimationHint' class='name expandable'>getRotationAnimationHint</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getSurfaceLayer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getSurfaceLayer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getSurfaceLayer' class='name expandable'>getSurfaceLayer</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the layer at which this window's surface will be Z-ordered. ...</div><div class='long'><p>Get the layer at which this window's surface will be Z-ordered.</p>\n</div></div></div><div id='method-getSystemUiVisibility' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getSystemUiVisibility' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getSystemUiVisibility' class='name expandable'>getSystemUiVisibility</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the current system UI visibility flags associated with\n this window. ...</div><div class='long'><p>Retrieve the current system UI visibility flags associated with\n this window.</p>\n</div></div></div><div id='method-getVisibleFrameLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getVisibleFrameLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getVisibleFrameLw' class='name expandable'>getVisibleFrameLw</a>( <span class='pre'></span> ) : Object {android.graphics.Rect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the frame of the visible area that this window was last\n laid out in. ...</div><div class='long'><p>Retrieve the frame of the visible area that this window was last\n laid out in.  This is the area of the screen in which the window\n will actually be fully visible.  It will be smaller than the\n content frame to account for transient UI elements blocking it\n such as an input method's candidates UI.  Must be called with the\n window manager lock held.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.graphics.Rect}</span><div class='sub-desc'><p>Rect The rectangle holding the visible frame.</p>\n</div></li></ul></div></div></div><div id='method-getWindowFrames' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getWindowFrames' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getWindowFrames' class='name expandable'>getWindowFrames</a>( <span class='pre'></span> ) : Object {com.android.server.wm.WindowFrames}<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {com.android.server.wm.WindowFrames}</span><div class='sub-desc'><p>The WindowFrames associated with this WindowState</p>\n</div></li></ul></div></div></div><div id='method-getWindowingMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-getWindowingMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-getWindowingMode' class='name expandable'>getWindowingMode</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current windowing mode of this window.</p>\n</div></li></ul></div></div></div><div id='method-hasAppShownWindows' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-hasAppShownWindows' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-hasAppShownWindows' class='name expandable'>hasAppShownWindows</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return true if, at any point, the application token associated with\n this window has actually displayed any windows. ...</div><div class='long'><p>Return true if, at any point, the application token associated with\n this window has actually displayed any windows.  This is most useful\n with the \"starting up\" window to determine if any windows were\n displayed when it is closed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if one or more windows have been displayed,\n         else false.</p>\n</div></li></ul></div></div></div><div id='method-hasDrawnLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-hasDrawnLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-hasDrawnLw' class='name expandable'>hasDrawnLw</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Returns true if this window has been shown on screen at some time in\n the past. ...</div><div class='long'><p>Returns true if this window has been shown on screen at some time in\n the past.  Must be called with the window manager lock held.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use <a href=\"#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isDrawnLw\" rel=\"com.android.server.policy.WindowManagerPolicy.WindowState-method-isDrawnLw\" class=\"docClass\">isDrawnLw</a> or any of the other drawn/visibility methods.</p>\n\n        </div>\n</div></div></div><div id='method-hideLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-hideLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-hideLw' class='name expandable'>hideLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Can be called by the policy to force a window to be hidden,\n regardless of whether the client or window manager would...</div><div class='long'><p>Can be called by the policy to force a window to be hidden,\n regardless of whether the client or window manager would like\n it shown.  Must be called with the window manager lock held.\n Returns true if <a href=\"#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-showLw\" rel=\"com.android.server.policy.WindowManagerPolicy.WindowState-method-showLw\" class=\"docClass\">showLw</a> was last called for the window.</p>\n</div></div></div><div id='method-inMultiWindowMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-inMultiWindowMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-inMultiWindowMode' class='name expandable'>inMultiWindowMode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the window is current in multi-windowing mode. ...</div><div class='long'><p>Returns true if the window is current in multi-windowing mode. i.e. it shares the\n screen with other application windows.</p>\n</div></div></div><div id='method-isAlive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isAlive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isAlive' class='name expandable'>isAlive</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Check whether the process hosting this window is currently alive. ...</div><div class='long'><p>Check whether the process hosting this window is currently alive.</p>\n</div></div></div><div id='method-isAnimatingLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isAnimatingLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isAnimatingLw' class='name expandable'>isAnimatingLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return true if this window (or a window it is attached to, but not\n considering its app token) is currently animating. ...</div><div class='long'><p>Return true if this window (or a window it is attached to, but not\n considering its app token) is currently animating.</p>\n</div></div></div><div id='method-isDefaultDisplay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isDefaultDisplay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isDefaultDisplay' class='name expandable'>isDefaultDisplay</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Check if window is on Display.DEFAULT_DISPLAY. ...</div><div class='long'><p>Check if window is on Display.DEFAULT_DISPLAY.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if window is on default display.</p>\n</div></li></ul></div></div></div><div id='method-isDimming' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isDimming' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isDimming' class='name expandable'>isDimming</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Check whether the window is currently dimming. ...</div><div class='long'><p>Check whether the window is currently dimming.</p>\n</div></div></div><div id='method-isDisplayedLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isDisplayedLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isDisplayedLw' class='name expandable'>isDisplayedLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Is this window currently visible to the user on-screen?  It is\n displayed either if it is visible or it is currently ...</div><div class='long'><p>Is this window currently visible to the user on-screen?  It is\n displayed either if it is visible or it is currently running an\n animation before no longer being visible.  Must be called with the\n window manager lock held.</p>\n</div></div></div><div id='method-isDrawnLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isDrawnLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isDrawnLw' class='name expandable'>isDrawnLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the window has a surface that it has drawn a\n complete UI in to. ...</div><div class='long'><p>Returns true if the window has a surface that it has drawn a\n complete UI in to. Note that this is different from <a href=\"#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-hasDrawnLw\" rel=\"com.android.server.policy.WindowManagerPolicy.WindowState-method-hasDrawnLw\" class=\"docClass\">hasDrawnLw</a>()\n in that it also returns true if the window is READY_TO_SHOW, but was not yet\n promoted to HAS_DRAWN.</p>\n</div></div></div><div id='method-isGoneForLayoutLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isGoneForLayoutLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isGoneForLayoutLw' class='name expandable'>isGoneForLayoutLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Is this window considered to be gone for purposes of layout? ...</div><div class='long'><p>Is this window considered to be gone for purposes of layout?</p>\n</div></div></div><div id='method-isInputMethodTarget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isInputMethodTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isInputMethodTarget' class='name expandable'>isInputMethodTarget</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isInputMethodWindow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isInputMethodWindow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isInputMethodWindow' class='name expandable'>isInputMethodWindow</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isLetterboxedForDisplayCutoutLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isLetterboxedForDisplayCutoutLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isLetterboxedForDisplayCutoutLw' class='name expandable'>isLetterboxedForDisplayCutoutLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the window is letterboxed for the display cutout. ...</div><div class='long'><p>Returns true if the window is letterboxed for the display cutout.</p>\n</div></div></div><div id='method-isLetterboxedOverlappingWith' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isLetterboxedOverlappingWith' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isLetterboxedOverlappingWith' class='name expandable'>isLetterboxedOverlappingWith</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the window has a letterbox and any part of that letterbox overlaps with\n the given {@code rect}. ...</div><div class='long'><p>Returns true if the window has a letterbox and any part of that letterbox overlaps with\n the given {@code rect}.</p>\n</div></div></div><div id='method-isVisibleLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isVisibleLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isVisibleLw' class='name expandable'>isVisibleLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Is this window visible?  It is not visible if there is no\n surface, or we are in the process of running an exit anima...</div><div class='long'><p>Is this window visible?  It is not visible if there is no\n surface, or we are in the process of running an exit animation\n that will remove the surface.</p>\n</div></div></div><div id='method-isVoiceInteraction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-isVoiceInteraction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-isVoiceInteraction' class='name expandable'>isVoiceInteraction</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return true if this window is participating in voice interaction. ...</div><div class='long'><p>Return true if this window is participating in voice interaction.</p>\n</div></div></div><div id='method-showLw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-showLw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-showLw' class='name expandable'>showLw</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Can be called to undo the effect of hideLw, allowing a\n window to be shown as long as the window manager and client w...</div><div class='long'><p>Can be called to undo the effect of <a href=\"#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-hideLw\" rel=\"com.android.server.policy.WindowManagerPolicy.WindowState-method-hideLw\" class=\"docClass\">hideLw</a>, allowing a\n window to be shown as long as the window manager and client would\n also like it to be shown.  Must be called with the window manager\n lock held.\n Returns true if <a href=\"#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-hideLw\" rel=\"com.android.server.policy.WindowManagerPolicy.WindowState-method-hideLw\" class=\"docClass\">hideLw</a> was last called for the window.</p>\n</div></div></div><div id='method-writeIdentifierToProto' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='com.android.server.policy.WindowManagerPolicy.WindowState'>com.android.server.policy.WindowManagerPolicy.WindowState</span><br/><a href='source/WindowState.html#com-android-server-policy-WindowManagerPolicy-WindowState-method-writeIdentifierToProto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/com.android.server.policy.WindowManagerPolicy.WindowState-method-writeIdentifierToProto' class='name expandable'>writeIdentifierToProto</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes com.android.server.wm.IdentifierProto to stream. ...</div><div class='long'><p>Writes com.android.server.wm.IdentifierProto to stream.</p>\n</div></div></div></div></div></div></div>","meta":{}});