Ext.data.JsonP.android_hardware_camera2_CameraCaptureSession({"tagname":"class","name":"android.hardware.camera2.CameraCaptureSession","autodetected":{},"files":[{"filename":"CameraCaptureSession.js","href":"CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession"}],"extends":"java.lang.Object","members":[{"name":"abortCaptures","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-abortCaptures","meta":{}},{"name":"capture","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-capture","meta":{}},{"name":"captureBurst","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-captureBurst","meta":{}},{"name":"captureBurstRequests","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-captureBurstRequests","meta":{}},{"name":"captureSingleRequest","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-captureSingleRequest","meta":{}},{"name":"close","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-close","meta":{}},{"name":"finalizeOutputConfigurations","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-finalizeOutputConfigurations","meta":{}},{"name":"getDevice","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-getDevice","meta":{}},{"name":"getInputSurface","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-getInputSurface","meta":{}},{"name":"isReprocessable","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-isReprocessable","meta":{}},{"name":"setRepeatingBurst","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-setRepeatingBurst","meta":{}},{"name":"setRepeatingBurstRequests","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-setRepeatingBurstRequests","meta":{}},{"name":"setRepeatingRequest","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-setRepeatingRequest","meta":{}},{"name":"setSingleRepeatingRequest","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-setSingleRepeatingRequest","meta":{}},{"name":"stopRepeating","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-stopRepeating","meta":{}},{"name":"updateOutputConfiguration","tagname":"method","owner":"android.hardware.camera2.CameraCaptureSession","id":"method-updateOutputConfiguration","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.hardware.camera2.CameraCaptureSession","short_doc":"implements java.lang.AutoCloseable\n\nA configured capture session for a android.hardware.camera2.CameraDevice, used fo...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.hardware.camera2.CameraCaptureSession</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession' rel='android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession' class='docClass'>android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession</a></div><h4>Files</h4><div class='dependency'><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession' target='_blank'>CameraCaptureSession.js</a></div></pre><div class='doc-contents'><p>implements java.lang.AutoCloseable</p>\n\n<p>A configured capture session for a <a href=\"#!/api/android.hardware.camera2.CameraDevice\" rel=\"android.hardware.camera2.CameraDevice\" class=\"docClass\">android.hardware.camera2.CameraDevice</a>, used for capturing images from the\n camera or reprocessing images captured from the camera in the same session previously.</p>\n\n<p> <p>A CameraCaptureSession is created by providing a set of target output surfaces to\n <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createCaptureSession\" class=\"docClass\">createCaptureSession</a>, or by providing an\n android.hardware.camera2.params.InputConfiguration and a set of target output surfaces to\n <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" class=\"docClass\">createReprocessableCaptureSession</a> for a\n reprocessable capture session. Once created, the session is active until a new session is\n created by the camera device, or the camera device is closed.</p></p>\n\n<p> <p>All capture sessions can be used for capturing images from the camera but only reprocessable\n capture sessions can reprocess images captured from the camera in the same session previously.\n </p></p>\n\n<p> <p>Creating a session is an expensive operation and can take several hundred milliseconds, since\n it requires configuring the camera device's internal pipelines and allocating memory buffers for\n sending images to the desired targets. Therefore the setup is done asynchronously, and\n <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createCaptureSession\" class=\"docClass\">createCaptureSession</a> and\n <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" class=\"docClass\">createReprocessableCaptureSession</a> will\n send the ready-to-use CameraCaptureSession to the provided listener's\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onConfigured\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onConfigured\" class=\"docClass\">onConfigured</a> callback. If configuration\n cannot be completed, then the\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onConfigureFailed\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onConfigureFailed\" class=\"docClass\">onConfigureFailed</a> is called, and the\n session will not become active.</p></p>\n\n<!--\n <p>Any capture requests (repeating or non-repeating) submitted before the session is ready will\n be queued up and will begin capture once the session becomes ready. In case the session cannot be\n configured and <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onConfigureFailed\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onConfigureFailed\" class=\"docClass\">onConfigureFailed</a> is called, all queued\n capture requests are discarded.</p>\n-->\n\n\n<p> <p>If a new session is created by the camera device, then the previous session is closed, and its\n associated <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onClosed\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onClosed\" class=\"docClass\">onClosed</a> callback will be invoked.  All\n of the session methods will throw an IllegalStateException if called once the session is\n closed.</p></p>\n\n<p> <p>A closed session clears any repeating requests (as if <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" rel=\"android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" class=\"docClass\">stopRepeating</a> had been called),\n but will still complete all of its in-progress capture requests as normal, before a newly\n created session takes over and reconfigures the camera device.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-abortCaptures' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-abortCaptures' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures' class='name expandable'>abortCaptures</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Discard all captures currently pending and in-progress as fast as possible. ...</div><div class='long'><p>Discard all captures currently pending and in-progress as fast as possible.</p>\n\n<p> <p>The camera device will discard all of its current work as fast as possible. Some in-flight\n captures may complete successfully and call <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.CaptureCallback-method-onCaptureCompleted\" rel=\"android.hardware.camera2.CameraCaptureSession.CaptureCallback-method-onCaptureCompleted\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession.CaptureCallback.onCaptureCompleted</a>, while\n others will trigger their <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.CaptureCallback-method-onCaptureFailed\" rel=\"android.hardware.camera2.CameraCaptureSession.CaptureCallback-method-onCaptureFailed\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession.CaptureCallback.onCaptureFailed</a> callbacks. If a repeating\n request or a repeating burst is set, it will be cleared.</p></p>\n\n<p> <p>This method is the fastest way to switch the camera device to a new session with\n <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createCaptureSession\" class=\"docClass\">android.hardware.camera2.CameraDevice.createCaptureSession</a> or\n <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" class=\"docClass\">android.hardware.camera2.CameraDevice.createReprocessableCaptureSession</a>, at the cost of discarding in-progress\n work. It must be called before the new session is created. Once all pending requests are\n either completed or thrown away, the <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onReady\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onReady\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession.StateCallback.onReady</a> callback will be called,\n if the session has not been closed. Otherwise, the <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onClosed\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onClosed\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession.StateCallback.onClosed</a>\n callback will be fired when a new session is created by the camera device.</p></p>\n\n<p> <p>Cancelling will introduce at least a brief pause in the stream of data from the camera\n device, since once the camera device is emptied, the first new request has to make it through\n the entire camera pipeline before new output buffers are produced.</p></p>\n\n<p> <p>This means that using {@code abortCaptures()} to simply remove pending requests is not\n recommended; it's best used for quickly switching output configurations, or for cancelling\n long in-progress requests (such as a multi-second capture).</p></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>\n@see CameraDevice#createCaptureSession\n@see CameraDevice#createReprocessableCaptureSession</p>\n</div></li></ul></div></div></div><div id='method-capture' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-capture' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-capture' class='name expandable'>capture</a>( <span class='pre'>request, listener, handler</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Submit a request for an image to be captured by the camera device. ...</div><div class='long'><p>Submit a request for an image to be captured by the camera device.</p>\n\n\n<p> <p>The request defines all the parameters for capturing the single image,\n including sensor, lens, flash, and post-processing settings.</p></p>\n\n<p> <p>Each request will produce one <a href=\"#!/api/android.hardware.camera2.CaptureResult\" rel=\"android.hardware.camera2.CaptureResult\" class=\"docClass\">android.hardware.camera2.CaptureResult</a> and produce new frames for one or more\n target Surfaces, set with the CaptureRequest builder's\n <a href=\"#!/api/android.hardware.camera2.CaptureRequest.Builder-method-addTarget\" rel=\"android.hardware.camera2.CaptureRequest.Builder-method-addTarget\" class=\"docClass\">android.hardware.camera2.CaptureRequest.Builder.addTarget</a> method. The target surfaces (set with\n <a href=\"#!/api/android.hardware.camera2.CaptureRequest.Builder-method-addTarget\" rel=\"android.hardware.camera2.CaptureRequest.Builder-method-addTarget\" class=\"docClass\">android.hardware.camera2.CaptureRequest.Builder.addTarget</a>) must be a subset of the surfaces provided when this\n capture session was created.</p></p>\n\n<p> <p>Multiple regular and reprocess requests can be in progress at once. If there are only\n regular requests or reprocess requests in progress, they are processed in first-in,\n first-out order. If there are both regular and reprocess requests in progress, regular\n requests are processed in first-in, first-out order and reprocess requests are processed in\n first-in, first-out order, respectively. However, the processing order of a regular request\n and a reprocess request in progress is not specified. In other words, a regular request\n will always be processed before regular requets that are submitted later. A reprocess request\n will always be processed before reprocess requests that are submitted later. However, a\n regular request may not be processed before reprocess requests that are submitted later.<p></p>\n\n<p> <p>Requests submitted through this method have higher priority than\n those submitted through <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a> or\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>, and will be processed as soon as the current\n repeat/repeatBurst processing completes.</p></p>\n\n<p> <p>All capture sessions can be used for capturing images from the camera but only capture\n sessions created by\n <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" class=\"docClass\">createReprocessableCaptureSession</a>\n can submit reprocess capture requests. Submitting a reprocess request to a regular capture\n session will result in an IllegalArgumentException.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>request</span> : Object {CaptureRequest}<div class='sub-desc'><p>the settings for this capture</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraCaptureSession.CaptureCallback}<div class='sub-desc'><p>The callback object to notify once this request has been\n processed. If null, no metadata will be produced for this capture,\n although image data will still be produced.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>the handler on which the listener should be invoked, or\n {@code null} to use the current thread's looper.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int A unique capture sequence ID used by\n             CaptureCallback.onCaptureSequenceCompleted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the request targets no Surfaces or Surfaces that are not\n                                  configured as outputs for this session; or the request\n                                  targets a set of Surfaces that cannot be submitted\n                                  simultaneously in a reprocessable capture session; or a\n                                  reprocess capture request is submitted in a\n                                  non-reprocessable capture session; or the reprocess capture\n                                  request was created with a TotalCaptureResult from\n                                  a different session; or the capture targets a Surface in\n                                  the middle of being prepared; or the\n                                  handler is null, the listener is not null, and the calling\n                                  thread has no looper.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a>\n@see CameraDevice#createReprocessableCaptureSession</p>\n</div></li></ul></div></div></div><div id='method-captureBurst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-captureBurst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst' class='name expandable'>captureBurst</a>( <span class='pre'>requests, listener, handler</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Submit a list of requests to be captured in sequence as a burst. ...</div><div class='long'><p>Submit a list of requests to be captured in sequence as a burst. The\n burst will be captured in the minimum amount of time possible, and will\n not be interleaved with requests submitted by other capture or repeat\n calls.</p>\n\n<p> <p>Regular and reprocess requests can be mixed together in a single burst. Regular requests\n will be captured in order and reprocess requests will be processed in order, respectively.\n However, the processing order between a regular request and a reprocess request is not\n specified. Each capture produces one <a href=\"#!/api/android.hardware.camera2.CaptureResult\" rel=\"android.hardware.camera2.CaptureResult\" class=\"docClass\">android.hardware.camera2.CaptureResult</a> and image buffers for one or more\n target surfaces. The target surfaces (set with\n <a href=\"#!/api/android.hardware.camera2.CaptureRequest.Builder-method-addTarget\" rel=\"android.hardware.camera2.CaptureRequest.Builder-method-addTarget\" class=\"docClass\">android.hardware.camera2.CaptureRequest.Builder.addTarget</a>) must be a subset of the surfaces provided when\n this capture session was created.</p></p>\n\n<p> <p>The main difference between this method and simply calling\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a> repeatedly is that this method guarantees that no\n other requests will be interspersed with the burst.</p></p>\n\n<p> <p>All capture sessions can be used for capturing images from the camera but only capture\n sessions created by\n <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createReprocessableCaptureSession\" class=\"docClass\">createReprocessableCaptureSession</a>\n can submit reprocess capture requests. Submitting a reprocess request to a regular\n capture session will result in an IllegalArgumentException.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>requests</span> : Object {java.util.List}<div class='sub-desc'><p>the list of settings for this burst capture</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraCaptureSession.CaptureCallback}<div class='sub-desc'><p>The callback object to notify each time one of the\n requests in the burst has been processed. If null, no metadata will be\n produced for any requests in this burst, although image data will still\n be produced.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>the handler on which the listener should be invoked, or\n {@code null} to use the current thread's looper.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int A unique capture sequence ID used by\n             CaptureCallback.onCaptureSequenceCompleted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the requests target no Surfaces, or the requests target\n                                  Surfaces not currently configured as outputs; or one of the\n                                  requests targets a set of Surfaces that cannot be submitted\n                                  simultaneously in a reprocessable capture session; or a\n                                  reprocess capture request is submitted in a\n                                  non-reprocessable capture session; or one of the reprocess\n                                  capture requests was created with a\n                                  TotalCaptureResult from a different session; or one\n                                  of the captures targets a Surface in the middle of being\n                                  prepared; or if the handler is null, the\n                                  listener is not null, and the calling thread has no looper.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a></p>\n</div></li></ul></div></div></div><div id='method-captureBurstRequests' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-captureBurstRequests' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurstRequests' class='name expandable'>captureBurstRequests</a>( <span class='pre'>requests, executor, listener</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Submit a list of requests to be captured in sequence as a burst. ...</div><div class='long'><p>Submit a list of requests to be captured in sequence as a burst. The\n burst will be captured in the minimum amount of time possible, and will\n not be interleaved with requests submitted by other capture or repeat\n calls.</p>\n\n<p> <p>The behavior of this method matches that of\n android.hardware.camera2.CameraCaptureSession.CaptureCallback, Handler),\n except that it uses java.util.concurrent.Executor as an argument\n instead of android.os.Handler.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>requests</span> : Object {java.util.List}<div class='sub-desc'><p>the list of settings for this burst capture</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor which will be used for invoking the listener.</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraCaptureSession.CaptureCallback}<div class='sub-desc'><p>The callback object to notify each time one of the\n requests in the burst has been processed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int A unique capture sequence ID used by\n             CaptureCallback.onCaptureSequenceCompleted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the requests target no Surfaces, or the requests target\n                                  Surfaces not currently configured as outputs; or one of the\n                                  requests targets a set of Surfaces that cannot be submitted\n                                  simultaneously in a reprocessable capture session; or a\n                                  reprocess capture request is submitted in a\n                                  non-reprocessable capture session; or one of the reprocess\n                                  capture requests was created with a\n                                  TotalCaptureResult from a different session; or one\n                                  of the captures targets a Surface in the middle of being\n                                  prepared; or if the executor is null; or if\n                                  the listener is null.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a></p>\n</div></li></ul></div></div></div><div id='method-captureSingleRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-captureSingleRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-captureSingleRequest' class='name expandable'>captureSingleRequest</a>( <span class='pre'>request, executor, listener</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Submit a request for an image to be captured by the camera device. ...</div><div class='long'><p>Submit a request for an image to be captured by the camera device.</p>\n\n\n<p> <p>The behavior of this method matches that of\n android.hardware.camera2.CameraCaptureSession.CaptureCallback, Handler),\n except that it uses java.util.concurrent.Executor as an argument\n instead of android.os.Handler.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>request</span> : Object {CaptureRequest}<div class='sub-desc'><p>the settings for this capture</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor which will be used for invoking the listener.</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraCaptureSession.CaptureCallback}<div class='sub-desc'><p>The callback object to notify once this request has been\n processed.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int A unique capture sequence ID used by\n             CaptureCallback.onCaptureSequenceCompleted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the request targets no Surfaces or Surfaces that are not\n                                  configured as outputs for this session; or the request\n                                  targets a set of Surfaces that cannot be submitted\n                                  simultaneously in a reprocessable capture session; or a\n                                  reprocess capture request is submitted in a\n                                  non-reprocessable capture session; or the reprocess capture\n                                  request was created with a TotalCaptureResult from\n                                  a different session; or the capture targets a Surface in\n                                  the middle of being prepared; or the\n                                  executor is null, or the listener is not null.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a>\n@see CameraDevice#createReprocessableCaptureSession</p>\n</div></li></ul></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Close this capture session asynchronously. ...</div><div class='long'><p>Close this capture session asynchronously.</p>\n\n<p> <p>Closing a session frees up the target output Surfaces of the session for reuse with either\n a new session, or to other APIs that can draw to Surfaces.</p></p>\n\n<p> <p>Note that creating a new capture session with <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createCaptureSession\" class=\"docClass\">android.hardware.camera2.CameraDevice.createCaptureSession</a>\n will close any existing capture session automatically, and call the older session listener's\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onClosed\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onClosed\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession.StateCallback.onClosed</a> callback. Using <a href=\"#!/api/android.hardware.camera2.CameraDevice-method-createCaptureSession\" rel=\"android.hardware.camera2.CameraDevice-method-createCaptureSession\" class=\"docClass\">android.hardware.camera2.CameraDevice.createCaptureSession</a>\n directly without closing is the recommended approach for quickly switching to a new session,\n since unchanged target outputs can be reused more efficiently.</p></p>\n\n<p> <p>Once a session is closed, all methods on it will throw an IllegalStateException, and any\n repeating requests or bursts are stopped (as if <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" rel=\"android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" class=\"docClass\">stopRepeating</a>() was called).\n However, any in-progress capture requests submitted to the session will be completed as\n normal; once all captures have completed and the session has been torn down,\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onClosed\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onClosed\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession.StateCallback.onClosed</a> will be called.</p></p>\n\n<p> <p>Closing a session is idempotent; closing more than once has no effect.</p></p>\n</div></div></div><div id='method-finalizeOutputConfigurations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-finalizeOutputConfigurations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-finalizeOutputConfigurations' class='name expandable'>finalizeOutputConfigurations</a>( <span class='pre'>outputConfigs</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Finalize the output configurations that now have their deferred and/or extra Surfaces\n included. ...</div><div class='long'><p>Finalize the output configurations that now have their deferred and/or extra Surfaces\n included.</p>\n\n\n<p> <p>For camera use cases where a preview and other output configurations need to be\n configured, it can take some time for the preview Surface to be ready. For example, if the\n preview Surface is obtained from android.view.SurfaceView, the SurfaceView will only\n be ready after the UI layout is done, potentially delaying camera startup.</p></p>\n\n<p> <p>To speed up camera startup time, the application can configure the\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession\" rel=\"android.hardware.camera2.CameraCaptureSession\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession</a> with the eventual preview size (via\n a deferred OutputConfiguration),\n and defer the preview output configuration until the Surface is ready. After the\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession\" rel=\"android.hardware.camera2.CameraCaptureSession\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession</a> is created successfully with this deferred output and other\n normal outputs, the application can start submitting requests as long as they do not include\n deferred output Surfaces. Once a deferred Surface is ready, the application can add the\n Surface to the deferred output configuration with the\n OutputConfiguration.addSurface method, and then update the deferred output\n configuration via this method, before it can submit capture requests with this output\n target.</p></p>\n\n<p> <p>This function can also be called in case where multiple surfaces share the same\n OutputConfiguration, and one of the surfaces becomes available after the <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession\" rel=\"android.hardware.camera2.CameraCaptureSession\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession</a> is created. In that case, the application must first create the\n OutputConfiguration with the available Surface, then enable further surface sharing via\n OutputConfiguration.enableSurfaceSharing, before creating the CameraCaptureSession.\n After the CameraCaptureSession is created, and once the extra Surface becomes available, the\n application must then call OutputConfiguration.addSurface before finalizing the\n configuration with this method.</p></p>\n\n<p> <p>If the provided OutputConfigurations are unchanged from session creation, this function\n call has no effect. This function must only be called once for a particular output\n configuration. </p></p>\n\n<p> <p>The output Surfaces included by this list of\n OutputConfigurations can be used as <a href=\"#!/api/android.hardware.camera2.CaptureRequest\" rel=\"android.hardware.camera2.CaptureRequest\" class=\"docClass\">android.hardware.camera2.CaptureRequest</a>\n targets as soon as this call returns.</p></p>\n\n<p> <p>This method is not supported by\n <a href=\"#!/api/android.hardware.camera2.CameraCharacteristics-property-INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY\" rel=\"android.hardware.camera2.CameraCharacteristics-property-INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY\" class=\"docClass\">LEGACY</a>-level devices.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>outputConfigs</span> : Object {java.util.List}<div class='sub-desc'><p>a list of OutputConfigurations that\n            have had addSurface invoked with a valid\n            output Surface after CameraDevice.createCaptureSessionByOutputConfigurations.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has encountered\n             a fatal error.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n             was explicitly closed, a new session has been created, or the camera device has\n             been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException for invalid output configurations, including ones where the\n             source of the Surface is no longer valid or the Surface is from a unsupported\n             source. Or if one of the output configuration was already finished with an\n             included surface in a prior call.</p>\n</div></li></ul></div></div></div><div id='method-getDevice' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-getDevice' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-getDevice' class='name expandable'>getDevice</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the camera device that this session is created for. ...</div><div class='long'><p>Get the camera device that this session is created for.</p>\n</div></div></div><div id='method-getInputSurface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-getInputSurface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-getInputSurface' class='name expandable'>getInputSurface</a>( <span class='pre'></span> ) : Object {android.view.Surface}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the input Surface associated with a reprocessable capture session. ...</div><div class='long'><p>Get the input Surface associated with a reprocessable capture session.</p>\n\n<p> <p>Each reprocessable capture session has an input Surface where the reprocess\n capture requests get the input images from, rather than the camera device. The application\n can create a ImageWriter with this input Surface\n and use it to provide input images for reprocess capture requests. When the reprocessable\n capture session is closed, the input Surface is abandoned and becomes invalid.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.Surface}</span><div class='sub-desc'><p>The Surface where reprocessing capture requests get the input images from. If\n         this is not a reprocess capture session, {@code null} will be returned.\n@see CameraDevice#createReprocessableCaptureSession\n@see android.media.ImageWriter\n@see android.media.ImageReader</p>\n</div></li></ul></div></div></div><div id='method-isReprocessable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-isReprocessable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-isReprocessable' class='name expandable'>isReprocessable</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Return if the application can submit reprocess capture requests with this camera capture\n session. ...</div><div class='long'><p>Return if the application can submit reprocess capture requests with this camera capture\n session.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the application can submit reprocess capture requests with this\n         camera capture session. {@code false} otherwise.\n@see CameraDevice#createReprocessableCaptureSession</p>\n</div></li></ul></div></div></div><div id='method-setRepeatingBurst' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-setRepeatingBurst' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst' class='name expandable'>setRepeatingBurst</a>( <span class='pre'>requests, listener, handler</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Request endlessly repeating capture of a sequence of images by this\n capture session. ...</div><div class='long'><p>Request endlessly repeating capture of a sequence of images by this\n capture session.</p>\n\n\n<p> <p>With this method, the camera device will continually capture images,\n cycling through the settings in the provided list of\n <a href=\"#!/api/android.hardware.camera2.CaptureRequest\" rel=\"android.hardware.camera2.CaptureRequest\" class=\"docClass\">android.hardware.camera2.CaptureRequests</a>, at the maximum rate possible.</p></p>\n\n<p> <p>If a request is submitted through <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a> or\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>, the current repetition of the request list will be\n completed before the higher-priority request is handled. This guarantees\n that the application always receives a complete repeat burst captured in\n minimal time, instead of bursts interleaved with higher-priority\n captures, or incomplete captures.</p></p>\n\n<p> <p>Repeating burst requests are a simple way for an application to\n maintain a preview or other continuous stream of frames where each\n request is different in a predicatable way, without having to continually\n submit requests through <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>.</p></p>\n\n<p> <p>To stop the repeating capture, call <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" rel=\"android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" class=\"docClass\">stopRepeating</a>. Any\n ongoing burst will still be completed, however. Calling\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a> will also clear the request.</p></p>\n\n<p> <p>Calling this method will replace a previously-set repeating request or\n burst set up by this method or <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>, although any\n in-progress burst will be completed before the new repeat burst will be\n used.</p></p>\n\n<p> <p>This method does not support reprocess capture requests because each reprocess\n <a href=\"#!/api/android.hardware.camera2.CaptureRequest\" rel=\"android.hardware.camera2.CaptureRequest\" class=\"docClass\">android.hardware.camera2.CaptureRequest</a> must be created from the <a href=\"#!/api/android.hardware.camera2.TotalCaptureResult\" rel=\"android.hardware.camera2.TotalCaptureResult\" class=\"docClass\">android.hardware.camera2.TotalCaptureResult</a> that matches\n the input image to be reprocessed. This is either the <a href=\"#!/api/android.hardware.camera2.TotalCaptureResult\" rel=\"android.hardware.camera2.TotalCaptureResult\" class=\"docClass\">android.hardware.camera2.TotalCaptureResult</a> of capture\n that is sent for reprocessing, or one of the <a href=\"#!/api/android.hardware.camera2.TotalCaptureResult\" rel=\"android.hardware.camera2.TotalCaptureResult\" class=\"docClass\">android.hardware.camera2.TotalCaptureResults</a>\n of a set of captures, when data from the whole set is combined by the application into a\n single reprocess input image. The request must be capturing images from the camera. If a\n reprocess capture request is submitted, this method will throw IllegalArgumentException.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>requests</span> : Object {java.util.List}<div class='sub-desc'><p>the list of requests to cycle through indefinitely</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraCaptureSession.CaptureCallback}<div class='sub-desc'><p>The callback object to notify each time one of the\n requests in the repeating bursts has finished processing. If null, no\n metadata will be produced for this stream of requests, although image\n data will still be produced.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>the handler on which the listener should be invoked, or\n {@code null} to use the current thread's looper.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int A unique capture sequence ID used by\n             CaptureCallback.onCaptureSequenceCompleted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the requests reference no Surfaces or reference Surfaces\n                                  not currently configured as outputs; or one of the requests\n                                  is a reprocess capture request; or one of the captures\n                                  targets a Surface in the middle of being\n                                  prepared; or the handler is null, the\n                                  listener is not null, and the calling thread has no looper;\n                                  or no requests were passed in.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" rel=\"android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" class=\"docClass\">stopRepeating</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a></p>\n</div></li></ul></div></div></div><div id='method-setRepeatingBurstRequests' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-setRepeatingBurstRequests' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurstRequests' class='name expandable'>setRepeatingBurstRequests</a>( <span class='pre'>requests, executor, listener</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Request endlessly repeating capture of a sequence of images by this\n capture session. ...</div><div class='long'><p>Request endlessly repeating capture of a sequence of images by this\n capture session.</p>\n\n\n<p> <p>The behavior of this method matches that of\n android.hardware.camera2.CameraCaptureSession.CaptureCallback, Handler),\n except that it uses java.util.concurrent.Executor as an argument\n instead of android.os.Handler.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>requests</span> : Object {java.util.List}<div class='sub-desc'><p>the list of requests to cycle through indefinitely</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor which will be used for invoking the listener.</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraCaptureSession.CaptureCallback}<div class='sub-desc'><p>The callback object to notify each time one of the\n requests in the repeating bursts has finished processing.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int A unique capture sequence ID used by\n             CaptureCallback.onCaptureSequenceCompleted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the requests reference no Surfaces or reference Surfaces\n                                  not currently configured as outputs; or one of the requests\n                                  is a reprocess capture request; or one of the captures\n                                  targets a Surface in the middle of being\n                                  prepared; or the executor is null; or the\n                                  listener is null.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" rel=\"android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" class=\"docClass\">stopRepeating</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a></p>\n</div></li></ul></div></div></div><div id='method-setRepeatingRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-setRepeatingRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest' class='name expandable'>setRepeatingRequest</a>( <span class='pre'>request, listener, handler</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Request endlessly repeating capture of images by this capture session. ...</div><div class='long'><p>Request endlessly repeating capture of images by this capture session.</p>\n\n<p> <p>With this method, the camera device will continually capture images\n using the settings in the provided <a href=\"#!/api/android.hardware.camera2.CaptureRequest\" rel=\"android.hardware.camera2.CaptureRequest\" class=\"docClass\">android.hardware.camera2.CaptureRequest</a>, at the maximum\n rate possible.</p></p>\n\n<p> <p>Repeating requests are a simple way for an application to maintain a\n preview or other continuous stream of frames, without having to\n continually submit identical requests through <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a>.</p></p>\n\n<p> <p>Repeat requests have lower priority than those submitted\n through <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a> or <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>, so if\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a> is called when a repeating request is active, the\n capture request will be processed before any further repeating\n requests are processed.<p></p>\n\n<p> <p>To stop the repeating capture, call <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" rel=\"android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" class=\"docClass\">stopRepeating</a>. Calling\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a> will also clear the request.</p></p>\n\n<p> <p>Calling this method will replace any earlier repeating request or\n burst set up by this method or <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>, although any\n in-progress burst will be completed before the new repeat request will be\n used.</p></p>\n\n<p> <p>This method does not support reprocess capture requests because each reprocess\n <a href=\"#!/api/android.hardware.camera2.CaptureRequest\" rel=\"android.hardware.camera2.CaptureRequest\" class=\"docClass\">android.hardware.camera2.CaptureRequest</a> must be created from the <a href=\"#!/api/android.hardware.camera2.TotalCaptureResult\" rel=\"android.hardware.camera2.TotalCaptureResult\" class=\"docClass\">android.hardware.camera2.TotalCaptureResult</a> that matches\n the input image to be reprocessed. This is either the <a href=\"#!/api/android.hardware.camera2.TotalCaptureResult\" rel=\"android.hardware.camera2.TotalCaptureResult\" class=\"docClass\">android.hardware.camera2.TotalCaptureResult</a> of capture\n that is sent for reprocessing, or one of the <a href=\"#!/api/android.hardware.camera2.TotalCaptureResult\" rel=\"android.hardware.camera2.TotalCaptureResult\" class=\"docClass\">android.hardware.camera2.TotalCaptureResults</a>\n of a set of captures, when data from the whole set is combined by the application into a\n single reprocess input image. The request must be capturing images from the camera. If a\n reprocess capture request is submitted, this method will throw IllegalArgumentException.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>request</span> : Object {CaptureRequest}<div class='sub-desc'><p>the request to repeat indefinitely</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraCaptureSession.CaptureCallback}<div class='sub-desc'><p>The callback object to notify every time the\n request finishes processing. If null, no metadata will be\n produced for this stream of requests, although image data will\n still be produced.</p>\n</div></li><li><span class='pre'>handler</span> : Object {Handler}<div class='sub-desc'><p>the handler on which the listener should be invoked, or\n {@code null} to use the current thread's looper.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int A unique capture sequence ID used by\n             CaptureCallback.onCaptureSequenceCompleted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the request references no Surfaces or references Surfaces\n                                  that are not currently configured as outputs; or the request\n                                  is a reprocess capture request; or the capture targets a\n                                  Surface in the middle of being prepared; or\n                                  the handler is null, the listener is not null, and the\n                                  calling thread has no looper; or no requests were passed in.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" rel=\"android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" class=\"docClass\">stopRepeating</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a></p>\n</div></li></ul></div></div></div><div id='method-setSingleRepeatingRequest' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-setSingleRepeatingRequest' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-setSingleRepeatingRequest' class='name expandable'>setSingleRepeatingRequest</a>( <span class='pre'>request, executor, listener</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Request endlessly repeating capture of images by this capture session. ...</div><div class='long'><p>Request endlessly repeating capture of images by this capture session.</p>\n\n<p> <p>The behavior of this method matches that of\n android.hardware.camera2.CameraCaptureSession.CaptureCallback, Handler),\n except that it uses java.util.concurrent.Executor as an argument\n instead of android.os.Handler.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>request</span> : Object {CaptureRequest}<div class='sub-desc'><p>the request to repeat indefinitely</p>\n</div></li><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor which will be used for invoking the listener.</p>\n</div></li><li><span class='pre'>listener</span> : Object {CameraCaptureSession.CaptureCallback}<div class='sub-desc'><p>The callback object to notify every time the\n request finishes processing.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int A unique capture sequence ID used by\n             CaptureCallback.onCaptureSequenceCompleted.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException If the request references no Surfaces or references Surfaces\n                                  that are not currently configured as outputs; or the request\n                                  is a reprocess capture request; or the capture targets a\n                                  Surface in the middle of being prepared; or\n                                  the executor is null; or the listener is null.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" rel=\"android.hardware.camera2.CameraCaptureSession-method-stopRepeating\" class=\"docClass\">stopRepeating</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" rel=\"android.hardware.camera2.CameraCaptureSession-method-abortCaptures\" class=\"docClass\">abortCaptures</a></p>\n</div></li></ul></div></div></div><div id='method-stopRepeating' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-stopRepeating' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-stopRepeating' class='name expandable'>stopRepeating</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancel any ongoing repeating capture set by either\n setRepeatingRequest or\n setRepeatingBurst. ...</div><div class='long'><p>Cancel any ongoing repeating capture set by either\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a> or\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>. Has no effect on requests submitted through\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-capture\" rel=\"android.hardware.camera2.CameraCaptureSession-method-capture\" class=\"docClass\">capture</a> or <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-captureBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-captureBurst\" class=\"docClass\">captureBurst</a>.</p>\n\n\n<p> <p>Any currently in-flight captures will still complete, as will any burst that is\n mid-capture. To ensure that the device has finished processing all of its capture requests\n and is in ready state, wait for the <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.StateCallback-method-onReady\" rel=\"android.hardware.camera2.CameraCaptureSession.StateCallback-method-onReady\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession.StateCallback.onReady</a> callback after\n calling this method.</p></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a>\n@see <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a>\n@see StateCallback#onReady</p>\n</div></li></ul></div></div></div><div id='method-updateOutputConfiguration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.hardware.camera2.CameraCaptureSession'>android.hardware.camera2.CameraCaptureSession</span><br/><a href='source/CameraCaptureSession.html#android-hardware-camera2-CameraCaptureSession-method-updateOutputConfiguration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.hardware.camera2.CameraCaptureSession-method-updateOutputConfiguration' class='name expandable'>updateOutputConfiguration</a>( <span class='pre'>config</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Update OutputConfiguration after configuration finalization see\n finalizeOutputConfigurations. ...</div><div class='long'><p>Update OutputConfiguration after configuration finalization see\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-finalizeOutputConfigurations\" rel=\"android.hardware.camera2.CameraCaptureSession-method-finalizeOutputConfigurations\" class=\"docClass\">finalizeOutputConfigurations</a>.</p>\n\n<p> <p>Any OutputConfiguration that has been modified via calls to\n OutputConfiguration.addSurface or OutputConfiguration.removeSurface must be\n updated. After the update call returns without throwing exceptions any newly added surfaces\n can be referenced in subsequent capture requests.</p></p>\n\n<p> <p>Surfaces that get removed must not be part of any active repeating or single/burst\n request or have any pending results. Consider updating any repeating requests first via\n <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingRequest\" class=\"docClass\">setRepeatingRequest</a> or <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" rel=\"android.hardware.camera2.CameraCaptureSession-method-setRepeatingBurst\" class=\"docClass\">setRepeatingBurst</a> and then wait for the last frame\n number when the sequence completes <a href=\"#!/api/android.hardware.camera2.CameraCaptureSession.CaptureCallback-method-onCaptureSequenceCompleted\" rel=\"android.hardware.camera2.CameraCaptureSession.CaptureCallback-method-onCaptureSequenceCompleted\" class=\"docClass\">android.hardware.camera2.CameraCaptureSession.CaptureCallback.onCaptureSequenceCompleted</a>\n before calling updateOutputConfiguration to remove a previously active Surface.</p></p>\n\n<p> <p>Surfaces that get added must not be part of any other registered\n OutputConfiguration.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object {OutputConfiguration}<div class='sub-desc'><p>Modified output configuration.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CameraAccessException if the camera device is no longer connected or has\n                               encountered a fatal error.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if an attempt was made to add a Surface already\n                               in use by another buffer-producing API, such as MediaCodec or\n                               a different camera device or OutputConfiguration; or\n                               new surfaces are not compatible (see\n                               OutputConfiguration.enableSurfaceSharing); or a\n                               Surface that was removed from the modified\n                               OutputConfiguration still has pending requests.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if this session is no longer active, either because the session\n                               was explicitly closed, a new session has been created\n                               or the camera device has been closed.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});