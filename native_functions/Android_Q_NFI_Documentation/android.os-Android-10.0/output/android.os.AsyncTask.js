Ext.data.JsonP.android_os_AsyncTask({"tagname":"class","name":"android.os.AsyncTask","autodetected":{},"files":[{"filename":"AsyncTask.js","href":"AsyncTask.html#android-os-AsyncTask"}],"extends":"java.lang.Object","members":[{"name":"SERIAL_EXECUTOR","tagname":"property","owner":"android.os.AsyncTask","id":"property-SERIAL_EXECUTOR","meta":{}},{"name":"THREAD_POOL_EXECUTOR","tagname":"property","owner":"android.os.AsyncTask","id":"property-THREAD_POOL_EXECUTOR","meta":{}},{"name":"cancel","tagname":"method","owner":"android.os.AsyncTask","id":"method-cancel","meta":{}},{"name":"execute","tagname":"method","owner":"android.os.AsyncTask","id":"method-execute","meta":{}},{"name":"executeOnExecutor","tagname":"method","owner":"android.os.AsyncTask","id":"method-executeOnExecutor","meta":{}},{"name":"get","tagname":"method","owner":"android.os.AsyncTask","id":"method-get","meta":{}},{"name":"getStatus","tagname":"method","owner":"android.os.AsyncTask","id":"method-getStatus","meta":{}},{"name":"isCancelled","tagname":"method","owner":"android.os.AsyncTask","id":"method-isCancelled","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.os.AsyncTask","short_doc":"AsyncTask enables proper and easy use of the UI thread. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.os.AsyncTask</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AsyncTask.html#android-os-AsyncTask' target='_blank'>AsyncTask.js</a></div></pre><div class='doc-contents'><p>AsyncTask enables proper and easy use of the UI thread. This class allows you\n to perform background operations and publish results on the UI thread without\n having to manipulate threads and/or handlers.</p>\n\n\n<p> <p>AsyncTask is designed to be a helper class around Thread and <a href=\"#!/api/android.os.Handler\" rel=\"android.os.Handler\" class=\"docClass\">android.os.Handler</a>\n and does not constitute a generic threading framework. AsyncTasks should ideally be\n used for short operations (a few seconds at the most.) If you need to keep threads\n running for long periods of time, it is highly recommended you use the various APIs\n provided by the <code>java.util.concurrent</code> package such as Executor,\n ThreadPoolExecutor and FutureTask.</p></p>\n\n<p> <p>An asynchronous task is defined by a computation that runs on a background thread and\n whose result is published on the UI thread. An asynchronous task is defined by 3 generic\n types, called <code>Params</code>, <code>Progress</code> and <code>Result</code>,\n and 4 steps, called <code>onPreExecute</code>, <code>doInBackground</code>,\n <code>onProgressUpdate</code> and <code>onPostExecute</code>.</p></p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about using tasks and threads, read the\n <a href=\"{@docRoot}guide/components/processes-and-threads.html\">Processes and\n Threads</a> developer guide.</p>\n </div></p>\n\n<p> <h2>Usage</h2>\n <p>AsyncTask must be subclassed to be used. The subclass will override at least\n one method (doInBackground), and most often will override a\n second one (onPostExecute.)</p></p>\n\n<p> <p>Here is an example of subclassing:</p>\n <pre class=\"prettyprint\">\n private class DownloadFilesTask extends AsyncTask&lt;URL, Integer, Long&gt; {\n     protected Long doInBackground(URL... urls) {\n         int count = urls.length;\n         long totalSize = 0;\n         for (int i = 0; i &lt; count; i++) {\n             totalSize += Downloader.downloadFile(urls[i]);\n             publishProgress((int) ((i / (float) count) * 100));\n             // Escape early if cancel() is called\n             if (isCancelled()) break;\n         }\n         return totalSize;\n     }</pre></p>\n\n<pre><code> protected void onProgressUpdate(Integer... progress) {\n     setProgressPercent(progress[0]);\n }\n\n protected void onPostExecute(Long result) {\n     showDialog(\"Downloaded \" + result + \" bytes\");\n }\n</code></pre>\n\n<p> }\n </p>\n\n<p> <p>Once created, a task is executed very simply:</p>\n <pre class=\"prettyprint\">\n new DownloadFilesTask().execute(url1, url2, url3);\n </pre></p>\n\n<p> <h2>AsyncTask's generic types</h2>\n <p>The three types used by an asynchronous task are the following:</p>\n <ol>\n     <li><code>Params</code>, the type of the parameters sent to the task upon\n     execution.</li>\n     <li><code>Progress</code>, the type of the progress units published during\n     the background computation.</li>\n     <li><code>Result</code>, the type of the result of the background\n     computation.</li>\n </ol>\n <p>Not all types are always used by an asynchronous task. To mark a type as unused,\n simply use the type Void:</p></p>\n\n<pre> private class MyTask extends AsyncTask&lt;Void, Void, Void&gt; { ... }\n </pre>\n\n\n<p> <h2>The 4 steps</h2>\n <p>When an asynchronous task is executed, the task goes through 4 steps:</p>\n <ol>\n     <li>onPreExecute(), invoked on the UI thread before the task\n     is executed. This step is normally used to setup the task, for instance by\n     showing a progress bar in the user interface.</li>\n     <li>doInBackground, invoked on the background thread\n     immediately after onPreExecute() finishes executing. This step is used\n     to perform background computation that can take a long time. The parameters\n     of the asynchronous task are passed to this step. The result of the computation must\n     be returned by this step and will be passed back to the last step. This step\n     can also use publishProgress to publish one or more units\n     of progress. These values are published on the UI thread, in the\n     onProgressUpdate step.</li>\n     <li>onProgressUpdate, invoked on the UI thread after a\n     call to publishProgress. The timing of the execution is\n     undefined. This method is used to display any form of progress in the user\n     interface while the background computation is still executing. For instance,\n     it can be used to animate a progress bar or show logs in a text field.</li>\n     <li>onPostExecute, invoked on the UI thread after the background\n     computation finishes. The result of the background computation is passed to\n     this step as a parameter.</li>\n </ol></p>\n\n<p> <h2>Cancelling a task</h2>\n <p>A task can be cancelled at any time by invoking <a href=\"#!/api/android.os.AsyncTask-method-cancel\" rel=\"android.os.AsyncTask-method-cancel\" class=\"docClass\">cancel</a>(boolean). Invoking\n this method will cause subsequent calls to <a href=\"#!/api/android.os.AsyncTask-method-isCancelled\" rel=\"android.os.AsyncTask-method-isCancelled\" class=\"docClass\">isCancelled</a>() to return true.\n After invoking this method, onCancelled(Object), instead of\n onPostExecute(Object) will be invoked after doInBackground(Object[])\n returns. To ensure that a task is cancelled as quickly as possible, you should always\n check the return value of <a href=\"#!/api/android.os.AsyncTask-method-isCancelled\" rel=\"android.os.AsyncTask-method-isCancelled\" class=\"docClass\">isCancelled</a>() periodically from\n doInBackground(Object[]), if possible (inside a loop for instance.)</p></p>\n\n<p> <h2>Threading rules</h2>\n <p>There are a few threading rules that must be followed for this class to\n work properly:</p>\n <ul>\n     <li>The AsyncTask class must be loaded on the UI thread. This is done\n     automatically as of <a href=\"#!/api/android.os.Build.VERSION_CODES-property-JELLY_BEAN\" rel=\"android.os.Build.VERSION_CODES-property-JELLY_BEAN\" class=\"docClass\">android.os.Build.VERSION_CODES.JELLY_BEAN</a>.</li>\n     <li>The task instance must be created on the UI thread.</li>\n     <li><a href=\"#!/api/android.os.AsyncTask-method-execute\" rel=\"android.os.AsyncTask-method-execute\" class=\"docClass\">execute</a> must be invoked on the UI thread.</li>\n     <li>Do not call onPreExecute(), onPostExecute,\n     doInBackground, onProgressUpdate manually.</li>\n     <li>The task can be executed only once (an exception will be thrown if\n     a second execution is attempted.)</li>\n </ul></p>\n\n<p> <h2>Memory observability</h2>\n <p>AsyncTask guarantees that all callback calls are synchronized to ensure the following\n without explicit synchronizations.</p>\n <ul>\n     <li>The memory effects of onPreExecute, and anything else\n     executed before the call to <a href=\"#!/api/android.os.AsyncTask-method-execute\" rel=\"android.os.AsyncTask-method-execute\" class=\"docClass\">execute</a>, including the construction\n     of the AsyncTask object, are visible to doInBackground.\n     <li>The memory effects of doInBackground are visible to\n     onPostExecute.\n     <li>Any memory effects of doInBackground preceding a call\n     to publishProgress are visible to the corresponding\n     onProgressUpdate call. (But doInBackground continues to\n     run, and care needs to be taken that later updates in doInBackground\n     do not interfere with an in-progress onProgressUpdate call.)\n     <li>Any memory effects preceding a call to <a href=\"#!/api/android.os.AsyncTask-method-cancel\" rel=\"android.os.AsyncTask-method-cancel\" class=\"docClass\">cancel</a> are visible\n     after a call to <a href=\"#!/api/android.os.AsyncTask-method-isCancelled\" rel=\"android.os.AsyncTask-method-isCancelled\" class=\"docClass\">isCancelled</a> that returns true as a result, or\n     during and after a resulting call to onCancelled.\n </li></li></li></li></ul></p>\n\n<p> <h2>Order of execution</h2>\n <p>When first introduced, AsyncTasks were executed serially on a single background\n thread. Starting with <a href=\"#!/api/android.os.Build.VERSION_CODES-property-DONUT\" rel=\"android.os.Build.VERSION_CODES-property-DONUT\" class=\"docClass\">android.os.Build.VERSION_CODES.DONUT</a>, this was changed\n to a pool of threads allowing multiple tasks to operate in parallel. Starting with\n <a href=\"#!/api/android.os.Build.VERSION_CODES-property-HONEYCOMB\" rel=\"android.os.Build.VERSION_CODES-property-HONEYCOMB\" class=\"docClass\">android.os.Build.VERSION_CODES.HONEYCOMB</a>, tasks are executed on a single\n thread to avoid common application errors caused by parallel execution.</p>\n <p>If you truly want parallel execution, you can invoke\n Object[]) with\n <a href=\"#!/api/android.os.AsyncTask-property-THREAD_POOL_EXECUTOR\" rel=\"android.os.AsyncTask-property-THREAD_POOL_EXECUTOR\" class=\"docClass\">THREAD_POOL_EXECUTOR</a>.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-SERIAL_EXECUTOR' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.AsyncTask'>android.os.AsyncTask</span><br/><a href='source/AsyncTask.html#android-os-AsyncTask-property-SERIAL_EXECUTOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.AsyncTask-property-SERIAL_EXECUTOR' class='name expandable'>SERIAL_EXECUTOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An Executor that executes tasks one at a time in serial\norder. ...</div><div class='long'><p>An Executor that executes tasks one at a time in serial\norder.  This serialization is global to a particular process.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-THREAD_POOL_EXECUTOR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.AsyncTask'>android.os.AsyncTask</span><br/><a href='source/AsyncTask.html#android-os-AsyncTask-property-THREAD_POOL_EXECUTOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.AsyncTask-property-THREAD_POOL_EXECUTOR' class='name expandable'>THREAD_POOL_EXECUTOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>An Executor that can be used to execute tasks in parallel. ...</div><div class='long'><p>An Executor that can be used to execute tasks in parallel.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cancel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.AsyncTask'>android.os.AsyncTask</span><br/><a href='source/AsyncTask.html#android-os-AsyncTask-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.AsyncTask-method-cancel' class='name expandable'>cancel</a>( <span class='pre'>mayInterruptIfRunning</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempts to cancel execution of this task. ...</div><div class='long'><p>Attempts to cancel execution of this task.  This attempt will\n fail if the task has already completed, already been cancelled,\n or could not be cancelled for some other reason. If successful,\n and this task has not started when <tt>cancel</tt> is called,\n this task should never run. If the task has already started,\n then the <tt>mayInterruptIfRunning</tt> parameter determines\n whether the thread executing this task should be interrupted in\n an attempt to stop the task.</p>\n\n\n<p> <p>Calling this method will result in onCancelled(Object) being\n invoked on the UI thread after doInBackground(Object[]) returns.\n Calling this method guarantees that onPostExecute(Object) is never\n subsequently invoked, even if <tt>cancel</tt> returns false, but\n onPostExecute has not yet run.  To finish the\n task as early as possible, check <a href=\"#!/api/android.os.AsyncTask-method-isCancelled\" rel=\"android.os.AsyncTask-method-isCancelled\" class=\"docClass\">isCancelled</a>() periodically from\n doInBackground(Object[]).</p></p>\n\n<p> <p>This only requests cancellation. It never waits for a running\n background task to terminate, even if <tt>mayInterruptIfRunning</tt> is\n true.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mayInterruptIfRunning</span> : Boolean<div class='sub-desc'><p><tt>true</tt> if the thread executing this\n        task should be interrupted; otherwise, in-progress tasks are allowed\n        to complete.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>false</tt> if the task could not be cancelled,\n         typically because it has already completed normally;\n         <tt>true</tt> otherwise\n@see <a href=\"#!/api/android.os.AsyncTask-method-isCancelled\" rel=\"android.os.AsyncTask-method-isCancelled\" class=\"docClass\">isCancelled</a>()\n@see #onCancelled(Object)</p>\n</div></li></ul></div></div></div><div id='method-execute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.AsyncTask'>android.os.AsyncTask</span><br/><a href='source/AsyncTask.html#android-os-AsyncTask-method-execute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.AsyncTask-method-execute' class='name expandable'>execute</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenience version of execute(Object...) for use with\n a simple Runnable object. ...</div><div class='long'><p>Convenience version of execute(Object...) for use with\n a simple Runnable object. See execute(Object[]) for more\n information on the order of execution.\n@see <a href=\"#!/api/android.os.AsyncTask-method-execute\" rel=\"android.os.AsyncTask-method-execute\" class=\"docClass\">execute</a>(Object[])\n@see <a href=\"#!/api/android.os.AsyncTask-method-executeOnExecutor\" rel=\"android.os.AsyncTask-method-executeOnExecutor\" class=\"docClass\">executeOnExecutor</a>(java.util.concurrent.Executor, Object[])</p>\n</div></div></div><div id='method-executeOnExecutor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.AsyncTask'>android.os.AsyncTask</span><br/><a href='source/AsyncTask.html#android-os-AsyncTask-method-executeOnExecutor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.AsyncTask-method-executeOnExecutor' class='name expandable'>executeOnExecutor</a>( <span class='pre'>exec, params</span> ) : Object {android.os.AsyncTask}<span class=\"signature\"></span></div><div class='description'><div class='short'>Executes the task with the specified parameters. ...</div><div class='long'><p>Executes the task with the specified parameters. The task returns\n itself (this) so that the caller can keep a reference to it.</p>\n\n<p> <p>This method is typically used with <a href=\"#!/api/android.os.AsyncTask-property-THREAD_POOL_EXECUTOR\" rel=\"android.os.AsyncTask-property-THREAD_POOL_EXECUTOR\" class=\"docClass\">THREAD_POOL_EXECUTOR</a> to\n allow multiple tasks to run in parallel on a pool of threads managed by\n AsyncTask, however you can also use your own Executor for custom\n behavior.</p>\n\n<p> <p><em>Warning:</em> Allowing multiple tasks to run in parallel from\n a thread pool is generally <em>not</em> what one wants, because the order\n of their operation is not defined.  For example, if these tasks are used\n to modify any state in common (such as writing a file due to a button click),\n there are no guarantees on the order of the modifications.\n Without careful work it is possible in rare cases for the newer version\n of the data to be over-written by an older one, leading to obscure data\n loss and stability issues.  Such changes are best\n executed in serial; to guarantee such work is serialized regardless of\n platform version you can use this function with <a href=\"#!/api/android.os.AsyncTask-property-SERIAL_EXECUTOR\" rel=\"android.os.AsyncTask-property-SERIAL_EXECUTOR\" class=\"docClass\">SERIAL_EXECUTOR</a>.</p>\n\n<p> <p>This method must be invoked on the UI thread.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>exec</span> : Object {Executor}<div class='sub-desc'><p>The executor to use.  <a href=\"#!/api/android.os.AsyncTask-property-THREAD_POOL_EXECUTOR\" rel=\"android.os.AsyncTask-property-THREAD_POOL_EXECUTOR\" class=\"docClass\">THREAD_POOL_EXECUTOR</a> is available as a\n              convenient process-wide thread pool for tasks that are loosely coupled.</p>\n</div></li><li><span class='pre'>params</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>The parameters of the task.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.AsyncTask}</span><div class='sub-desc'><p>This instance of AsyncTask.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException If getStatus() returns either\n         AsyncTask.Status.RUNNING or AsyncTask.Status.FINISHED.\n@see <a href=\"#!/api/android.os.AsyncTask-method-execute\" rel=\"android.os.AsyncTask-method-execute\" class=\"docClass\">execute</a>(Object[])</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.AsyncTask'>android.os.AsyncTask</span><br/><a href='source/AsyncTask.html#android-os-AsyncTask-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.AsyncTask-method-get' class='name expandable'>get</a>( <span class='pre'>timeout, unit</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result. ...</div><div class='long'><p>Waits if necessary for at most the given time for the computation\n to complete, and then retrieves its result.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>Time to wait before cancelling the operation.</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>The time unit for the timeout.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>The computed result.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>CancellationException If the computation was cancelled.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ExecutionException If the computation threw an exception.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException If the current thread was interrupted\n         while waiting.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>TimeoutException If the wait timed out.</p>\n</div></li></ul></div></div></div><div id='method-getStatus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.AsyncTask'>android.os.AsyncTask</span><br/><a href='source/AsyncTask.html#android-os-AsyncTask-method-getStatus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.AsyncTask-method-getStatus' class='name expandable'>getStatus</a>( <span class='pre'></span> ) : Object {android.os.AsyncTask.Status}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current status of this task. ...</div><div class='long'><p>Returns the current status of this task.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.AsyncTask.Status}</span><div class='sub-desc'><p>The current status.</p>\n</div></li></ul></div></div></div><div id='method-isCancelled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.AsyncTask'>android.os.AsyncTask</span><br/><a href='source/AsyncTask.html#android-os-AsyncTask-method-isCancelled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.AsyncTask-method-isCancelled' class='name expandable'>isCancelled</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if this task was cancelled before it completed\n normally. ...</div><div class='long'><p>Returns <tt>true</tt> if this task was cancelled before it completed\n normally. If you are calling <a href=\"#!/api/android.os.AsyncTask-method-cancel\" rel=\"android.os.AsyncTask-method-cancel\" class=\"docClass\">cancel</a>(boolean) on the task,\n the value returned by this method should be checked periodically from\n doInBackground(Object[]) to end the task as soon as possible.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><tt>true</tt> if task was cancelled before it completed\n@see <a href=\"#!/api/android.os.AsyncTask-method-cancel\" rel=\"android.os.AsyncTask-method-cancel\" class=\"docClass\">cancel</a>(boolean)</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});