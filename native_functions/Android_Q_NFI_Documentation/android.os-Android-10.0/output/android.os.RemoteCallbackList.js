Ext.data.JsonP.android_os_RemoteCallbackList({"tagname":"class","name":"android.os.RemoteCallbackList","autodetected":{},"files":[{"filename":"RemoteCallbackList.js","href":"RemoteCallbackList.html#android-os-RemoteCallbackList"}],"extends":"java.lang.Object","members":[{"name":"beginBroadcast","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-beginBroadcast","meta":{}},{"name":"finishBroadcast","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-finishBroadcast","meta":{}},{"name":"getBroadcastCookie","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-getBroadcastCookie","meta":{}},{"name":"getBroadcastItem","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-getBroadcastItem","meta":{}},{"name":"getRegisteredCallbackCookie","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-getRegisteredCallbackCookie","meta":{}},{"name":"getRegisteredCallbackCount","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-getRegisteredCallbackCount","meta":{}},{"name":"getRegisteredCallbackItem","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-getRegisteredCallbackItem","meta":{}},{"name":"kill","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-kill","meta":{}},{"name":"onCallbackDied","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-onCallbackDied","meta":{}},{"name":"register","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-register","meta":{}},{"name":"unregister","tagname":"method","owner":"android.os.RemoteCallbackList","id":"method-unregister","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.os.RemoteCallbackList","short_doc":"Takes care of the grunt work of maintaining a list of remote interfaces,\n typically for the use of performing callbac...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.os.RemoteCallbackList</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList' target='_blank'>RemoteCallbackList.js</a></div></pre><div class='doc-contents'><p>Takes care of the grunt work of maintaining a list of remote interfaces,\n typically for the use of performing callbacks from a\n android.app.Service to its clients.  In particular, this:</p>\n\n<p> <ul>\n <li> Keeps track of a set of registered <a href=\"#!/api/android.os.IInterface\" rel=\"android.os.IInterface\" class=\"docClass\">android.os.IInterface</a> callbacks,\n taking care to identify them through their underlying unique <a href=\"#!/api/android.os.IBinder\" rel=\"android.os.IBinder\" class=\"docClass\">android.os.IBinder</a>\n (by calling <a href=\"#!/api/android.os.IInterface-method-asBinder\" rel=\"android.os.IInterface-method-asBinder\" class=\"docClass\">android.os.IInterface.asBinder()</a>.\n <li> Attaches a <a href=\"#!/api/android.os.IBinder.DeathRecipient\" rel=\"android.os.IBinder.DeathRecipient\" class=\"docClass\">android.os.IBinder.DeathRecipient</a> to\n each registered interface, so that it can be cleaned out of the list if its\n process goes away.\n <li> Performs locking of the underlying list of interfaces to deal with\n multithreaded incoming calls, and a thread-safe way to iterate over a\n snapshot of the list without holding its lock.\n </li></li></li></ul></p>\n\n<p> <p>To use this class, simply create a single instance along with your\n service, and call its <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a> and <a href=\"#!/api/android.os.RemoteCallbackList-method-unregister\" rel=\"android.os.RemoteCallbackList-method-unregister\" class=\"docClass\">unregister</a> methods\n as client register and unregister with your service.  To call back on to\n the registered clients, use <a href=\"#!/api/android.os.RemoteCallbackList-method-beginBroadcast\" rel=\"android.os.RemoteCallbackList-method-beginBroadcast\" class=\"docClass\">beginBroadcast</a>,\n <a href=\"#!/api/android.os.RemoteCallbackList-method-getBroadcastItem\" rel=\"android.os.RemoteCallbackList-method-getBroadcastItem\" class=\"docClass\">getBroadcastItem</a>, and <a href=\"#!/api/android.os.RemoteCallbackList-method-finishBroadcast\" rel=\"android.os.RemoteCallbackList-method-finishBroadcast\" class=\"docClass\">finishBroadcast</a>.</p>\n\n<p> <p>If a registered callback's process goes away, this class will take\n care of automatically removing it from the list.  If you want to do\n additional work in this situation, you can create a subclass that\n implements the <a href=\"#!/api/android.os.RemoteCallbackList-method-onCallbackDied\" rel=\"android.os.RemoteCallbackList-method-onCallbackDied\" class=\"docClass\">onCallbackDied</a> method.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-beginBroadcast' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-beginBroadcast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-beginBroadcast' class='name expandable'>beginBroadcast</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Prepare to start making calls to the currently registered callbacks. ...</div><div class='long'><p>Prepare to start making calls to the currently registered callbacks.\n This creates a copy of the callback list, which you can retrieve items\n from using <a href=\"#!/api/android.os.RemoteCallbackList-method-getBroadcastItem\" rel=\"android.os.RemoteCallbackList-method-getBroadcastItem\" class=\"docClass\">getBroadcastItem</a>.  Note that only one broadcast can\n be active at a time, so you must be sure to always call this from the\n same thread (usually by scheduling with <a href=\"#!/api/android.os.Handler\" rel=\"android.os.Handler\" class=\"docClass\">android.os.Handler</a>) or\n do your own synchronization.  You must call <a href=\"#!/api/android.os.RemoteCallbackList-method-finishBroadcast\" rel=\"android.os.RemoteCallbackList-method-finishBroadcast\" class=\"docClass\">finishBroadcast</a>\n when done.</p>\n\n<p> <p>A typical loop delivering a broadcast looks like this:</p>\n\n<pre> int i = callbacks.beginBroadcast();\n while (i &gt; 0) {\n     i--;\n     try {\n         callbacks.getBroadcastItem(i).somethingHappened();\n     } catch (RemoteException e) {\n         // The RemoteCallbackList will take care of removing\n         // the dead object for us.\n     }\n }\n callbacks.finishBroadcast();</pre>\n\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the number of callbacks in the broadcast, to be used\n with <a href=\"#!/api/android.os.RemoteCallbackList-method-getBroadcastItem\" rel=\"android.os.RemoteCallbackList-method-getBroadcastItem\" class=\"docClass\">getBroadcastItem</a> to determine the range of indices you\n can supply.\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-getBroadcastItem\" rel=\"android.os.RemoteCallbackList-method-getBroadcastItem\" class=\"docClass\">getBroadcastItem</a>\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-finishBroadcast\" rel=\"android.os.RemoteCallbackList-method-finishBroadcast\" class=\"docClass\">finishBroadcast</a></p>\n</div></li></ul></div></div></div><div id='method-finishBroadcast' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-finishBroadcast' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-finishBroadcast' class='name expandable'>finishBroadcast</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clean up the state of a broadcast previously initiated by calling\n beginBroadcast. ...</div><div class='long'><p>Clean up the state of a broadcast previously initiated by calling\n <a href=\"#!/api/android.os.RemoteCallbackList-method-beginBroadcast\" rel=\"android.os.RemoteCallbackList-method-beginBroadcast\" class=\"docClass\">beginBroadcast</a>.  This must always be called when you are done\n with a broadcast.\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-beginBroadcast\" rel=\"android.os.RemoteCallbackList-method-beginBroadcast\" class=\"docClass\">beginBroadcast</a></p>\n</div></div></div><div id='method-getBroadcastCookie' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-getBroadcastCookie' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-getBroadcastCookie' class='name expandable'>getBroadcastCookie</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the cookie associated with the item\n returned by getBroadcastItem(int). ...</div><div class='long'><p>Retrieve the cookie associated with the item\n returned by <a href=\"#!/api/android.os.RemoteCallbackList-method-getBroadcastItem\" rel=\"android.os.RemoteCallbackList-method-getBroadcastItem\" class=\"docClass\">getBroadcastItem</a>(int).\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-getBroadcastItem\" rel=\"android.os.RemoteCallbackList-method-getBroadcastItem\" class=\"docClass\">getBroadcastItem</a></p>\n</div></div></div><div id='method-getBroadcastItem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-getBroadcastItem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-getBroadcastItem' class='name expandable'>getBroadcastItem</a>( <span class='pre'>index</span> ) : Object {android.os.IInterface}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve an item in the active broadcast that was previously started\n with beginBroadcast. ...</div><div class='long'><p>Retrieve an item in the active broadcast that was previously started\n with <a href=\"#!/api/android.os.RemoteCallbackList-method-beginBroadcast\" rel=\"android.os.RemoteCallbackList-method-beginBroadcast\" class=\"docClass\">beginBroadcast</a>.  This can <em>only</em> be called after\n the broadcast is started, and its data is no longer valid after\n calling <a href=\"#!/api/android.os.RemoteCallbackList-method-finishBroadcast\" rel=\"android.os.RemoteCallbackList-method-finishBroadcast\" class=\"docClass\">finishBroadcast</a>.</p>\n\n<p> <p>Note that it is possible for the process of one of the returned\n callbacks to go away before you call it, so you will need to catch\n <a href=\"#!/api/android.os.RemoteException\" rel=\"android.os.RemoteException\" class=\"docClass\">android.os.RemoteException</a> when calling on to the returned object.\n The callback list itself, however, will take care of unregistering\n these objects once it detects that it is no longer valid, so you can\n handle such an exception by simply ignoring it.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Which of the registered callbacks you would like to\n retrieve.  Ranges from 0 to 1-<a href=\"#!/api/android.os.RemoteCallbackList-method-beginBroadcast\" rel=\"android.os.RemoteCallbackList-method-beginBroadcast\" class=\"docClass\">beginBroadcast</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.IInterface}</span><div class='sub-desc'><p>Returns the callback interface that you can call.  This will\n always be non-null.\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-beginBroadcast\" rel=\"android.os.RemoteCallbackList-method-beginBroadcast\" class=\"docClass\">beginBroadcast</a></p>\n</div></li></ul></div></div></div><div id='method-getRegisteredCallbackCookie' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-getRegisteredCallbackCookie' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-getRegisteredCallbackCookie' class='name expandable'>getRegisteredCallbackCookie</a>( <span class='pre'>index</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return any cookie associated with a currently registered callback. ...</div><div class='long'><p>Return any cookie associated with a currently registered callback.  Note that this is\n <em>not</em> the same as <a href=\"#!/api/android.os.RemoteCallbackList-method-getBroadcastCookie\" rel=\"android.os.RemoteCallbackList-method-getBroadcastCookie\" class=\"docClass\">getBroadcastCookie</a> and should not be used\n interchangeably with it.  This method returns the current cookie registered at the given\n index, not the current broadcast state.  This means that it is not itself thread-safe:\n any call to <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a> or <a href=\"#!/api/android.os.RemoteCallbackList-method-unregister\" rel=\"android.os.RemoteCallbackList-method-unregister\" class=\"docClass\">unregister</a> will change these indices, so you\n must do your own thread safety between these to protect from such changes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index of which registration cookie to return, from 0 to\n getRegisteredCallbackCount() - 1.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>Returns whatever cookie object is associated with this index, or null if\n kill() has been called.</p>\n</div></li></ul></div></div></div><div id='method-getRegisteredCallbackCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-getRegisteredCallbackCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-getRegisteredCallbackCount' class='name expandable'>getRegisteredCallbackCount</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of registered callbacks. ...</div><div class='long'><p>Returns the number of registered callbacks. Note that the number of registered\n callbacks may differ from the value returned by <a href=\"#!/api/android.os.RemoteCallbackList-method-beginBroadcast\" rel=\"android.os.RemoteCallbackList-method-beginBroadcast\" class=\"docClass\">beginBroadcast</a>() since\n the former returns the number of callbacks registered at the time of the call\n and the second the number of callback to which the broadcast will be delivered.\n <p>\n This function is useful to decide whether to schedule a broadcast if this\n requires doing some work which otherwise would not be performed.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The size.</p>\n</div></li></ul></div></div></div><div id='method-getRegisteredCallbackItem' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-getRegisteredCallbackItem' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-getRegisteredCallbackItem' class='name expandable'>getRegisteredCallbackItem</a>( <span class='pre'>index</span> ) : Object {android.os.IInterface}<span class=\"signature\"></span></div><div class='description'><div class='short'>Return a currently registered callback. ...</div><div class='long'><p>Return a currently registered callback.  Note that this is\n <em>not</em> the same as <a href=\"#!/api/android.os.RemoteCallbackList-method-getBroadcastItem\" rel=\"android.os.RemoteCallbackList-method-getBroadcastItem\" class=\"docClass\">getBroadcastItem</a> and should not be used\n interchangeably with it.  This method returns the registered callback at the given\n index, not the current broadcast state.  This means that it is not itself thread-safe:\n any call to <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a> or <a href=\"#!/api/android.os.RemoteCallbackList-method-unregister\" rel=\"android.os.RemoteCallbackList-method-unregister\" class=\"docClass\">unregister</a> will change these indices, so you\n must do your own thread safety between these to protect from such changes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>index</span> : Number<div class='sub-desc'><p>Index of which callback registration to return, from 0 to\n getRegisteredCallbackCount() - 1.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.IInterface}</span><div class='sub-desc'><p>Returns whatever callback is associated with this index, or null if\n kill() has been called.</p>\n</div></li></ul></div></div></div><div id='method-kill' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-kill' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-kill' class='name expandable'>kill</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Disable this callback list. ...</div><div class='long'><p>Disable this callback list.  All registered callbacks are unregistered,\n and the list is disabled so that future calls to <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a> will\n fail.  This should be used when a Service is stopping, to prevent clients\n from registering callbacks after it is stopped.\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a></p>\n</div></div></div><div id='method-onCallbackDied' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-onCallbackDied' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-onCallbackDied' class='name expandable'>onCallbackDied</a>( <span class='pre'>callback, cookie</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called when the process hosting a callback in the list has gone away. ...</div><div class='long'><p>Called when the process hosting a callback in the list has gone away.\n The default implementation calls <a href=\"#!/api/android.os.RemoteCallbackList-method-onCallbackDied\" rel=\"android.os.RemoteCallbackList-method-onCallbackDied\" class=\"docClass\">onCallbackDied</a>(E)\n for backwards compatibility.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callback</span> : Object {IInterface}<div class='sub-desc'><p>The callback whose process has died.  Note that, since\n its process has died, you can not make any calls on to this interface.\n You can, however, retrieve its IBinder and compare it with another\n IBinder to see if it is the same object.</p>\n</div></li><li><span class='pre'>cookie</span> : Object {Object}<div class='sub-desc'><p>The cookie object original provided to\n Object).\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a></p>\n</div></li></ul></div></div></div><div id='method-register' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-register' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-register' class='name expandable'>register</a>( <span class='pre'>callback, cookie</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Add a new callback to the list. ...</div><div class='long'><p>Add a new callback to the list.  This callback will remain in the list\n until a corresponding call to <a href=\"#!/api/android.os.RemoteCallbackList-method-unregister\" rel=\"android.os.RemoteCallbackList-method-unregister\" class=\"docClass\">unregister</a> or its hosting process\n goes away.  If the callback was already registered (determined by\n checking to see if the <a href=\"#!/api/android.os.IInterface-method-asBinder\" rel=\"android.os.IInterface-method-asBinder\" class=\"docClass\">callback.asBinder()</a>\n object is already in the list), then it will be left as-is.\n Registrations are not counted; a single call to <a href=\"#!/api/android.os.RemoteCallbackList-method-unregister\" rel=\"android.os.RemoteCallbackList-method-unregister\" class=\"docClass\">unregister</a>\n will remove a callback after any number calls to register it.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callback</span> : Object {IInterface}<div class='sub-desc'><p>The callback interface to be added to the list.  Must\n not be null -- passing null here will cause a NullPointerException.\n Most services will want to check for null before calling this with\n an object given from a client, so that clients can't crash the\n service with bad data.</p>\n</div></li><li><span class='pre'>cookie</span> : Object {Object}<div class='sub-desc'><p>Optional additional data to be associated with this\n callback.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if the callback was successfully added to the list.\n Returns false if it was not added, either because <a href=\"#!/api/android.os.RemoteCallbackList-method-kill\" rel=\"android.os.RemoteCallbackList-method-kill\" class=\"docClass\">kill</a> had\n previously been called or the callback's process has gone away.\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-unregister\" rel=\"android.os.RemoteCallbackList-method-unregister\" class=\"docClass\">unregister</a>\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-kill\" rel=\"android.os.RemoteCallbackList-method-kill\" class=\"docClass\">kill</a>\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-onCallbackDied\" rel=\"android.os.RemoteCallbackList-method-onCallbackDied\" class=\"docClass\">onCallbackDied</a></p>\n</div></li></ul></div></div></div><div id='method-unregister' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.RemoteCallbackList'>android.os.RemoteCallbackList</span><br/><a href='source/RemoteCallbackList.html#android-os-RemoteCallbackList-method-unregister' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.RemoteCallbackList-method-unregister' class='name expandable'>unregister</a>( <span class='pre'>callback</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove from the list a callback that was previously added with\n register. ...</div><div class='long'><p>Remove from the list a callback that was previously added with\n <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a>.  This uses the\n <a href=\"#!/api/android.os.IInterface-method-asBinder\" rel=\"android.os.IInterface-method-asBinder\" class=\"docClass\">callback.asBinder()</a> object to correctly\n find the previous registration.\n Registrations are not counted; a single unregister call will remove\n a callback after any number calls to <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a> for it.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callback</span> : Object {IInterface}<div class='sub-desc'><p>The callback to be removed from the list.  Passing\n null here will cause a NullPointerException, so you will generally want\n to check for null before calling.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if the callback was found and unregistered.  Returns\n false if the given callback was not found on the list.\n@see <a href=\"#!/api/android.os.RemoteCallbackList-method-register\" rel=\"android.os.RemoteCallbackList-method-register\" class=\"docClass\">register</a></p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});