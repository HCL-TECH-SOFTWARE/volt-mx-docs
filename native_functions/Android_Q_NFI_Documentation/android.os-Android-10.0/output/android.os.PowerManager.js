Ext.data.JsonP.android_os_PowerManager({"tagname":"class","name":"android.os.PowerManager","autodetected":{},"files":[{"filename":"PowerManager.js","href":"PowerManager.html#android-os-PowerManager"}],"extends":"java.lang.Object","members":[{"name":"ACQUIRE_CAUSES_WAKEUP","tagname":"property","owner":"android.os.PowerManager","id":"property-ACQUIRE_CAUSES_WAKEUP","meta":{}},{"name":"ACTION_DEVICE_IDLE_MODE_CHANGED","tagname":"property","owner":"android.os.PowerManager","id":"property-ACTION_DEVICE_IDLE_MODE_CHANGED","meta":{}},{"name":"ACTION_POWER_SAVE_MODE_CHANGED","tagname":"property","owner":"android.os.PowerManager","id":"property-ACTION_POWER_SAVE_MODE_CHANGED","meta":{}},{"name":"DOZE_WAKE_LOCK","tagname":"property","owner":"android.os.PowerManager","id":"property-DOZE_WAKE_LOCK","meta":{}},{"name":"DRAW_WAKE_LOCK","tagname":"property","owner":"android.os.PowerManager","id":"property-DRAW_WAKE_LOCK","meta":{}},{"name":"FULL_WAKE_LOCK","tagname":"property","owner":"android.os.PowerManager","id":"property-FULL_WAKE_LOCK","meta":{"deprecated":{"text":"<p>Most applications should use\nandroid.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead\nof this type of wake lock, as it will be correctly managed by the platform\nas the user moves between applications and doesn't require a special permission.</p>\n"}}},{"name":"LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF","tagname":"property","owner":"android.os.PowerManager","id":"property-LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF","meta":{}},{"name":"LOCATION_MODE_FOREGROUND_ONLY","tagname":"property","owner":"android.os.PowerManager","id":"property-LOCATION_MODE_FOREGROUND_ONLY","meta":{}},{"name":"LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF","tagname":"property","owner":"android.os.PowerManager","id":"property-LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF","meta":{}},{"name":"LOCATION_MODE_NO_CHANGE","tagname":"property","owner":"android.os.PowerManager","id":"property-LOCATION_MODE_NO_CHANGE","meta":{}},{"name":"LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF","tagname":"property","owner":"android.os.PowerManager","id":"property-LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF","meta":{}},{"name":"ON_AFTER_RELEASE","tagname":"property","owner":"android.os.PowerManager","id":"property-ON_AFTER_RELEASE","meta":{}},{"name":"PARTIAL_WAKE_LOCK","tagname":"property","owner":"android.os.PowerManager","id":"property-PARTIAL_WAKE_LOCK","meta":{}},{"name":"PROXIMITY_SCREEN_OFF_WAKE_LOCK","tagname":"property","owner":"android.os.PowerManager","id":"property-PROXIMITY_SCREEN_OFF_WAKE_LOCK","meta":{}},{"name":"RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY","tagname":"property","owner":"android.os.PowerManager","id":"property-RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY","meta":{}},{"name":"SCREEN_BRIGHT_WAKE_LOCK","tagname":"property","owner":"android.os.PowerManager","id":"property-SCREEN_BRIGHT_WAKE_LOCK","meta":{"deprecated":{"text":"<p>Most applications should use\nandroid.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead\nof this type of wake lock, as it will be correctly managed by the platform\nas the user moves between applications and doesn't require a special permission.</p>\n"}}},{"name":"SCREEN_DIM_WAKE_LOCK","tagname":"property","owner":"android.os.PowerManager","id":"property-SCREEN_DIM_WAKE_LOCK","meta":{"deprecated":{"text":"<p>Most applications should use\nandroid.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead\nof this type of wake lock, as it will be correctly managed by the platform\nas the user moves between applications and doesn't require a special permission.</p>\n"}}},{"name":"THERMAL_STATUS_CRITICAL","tagname":"property","owner":"android.os.PowerManager","id":"property-THERMAL_STATUS_CRITICAL","meta":{}},{"name":"THERMAL_STATUS_EMERGENCY","tagname":"property","owner":"android.os.PowerManager","id":"property-THERMAL_STATUS_EMERGENCY","meta":{}},{"name":"THERMAL_STATUS_LIGHT","tagname":"property","owner":"android.os.PowerManager","id":"property-THERMAL_STATUS_LIGHT","meta":{}},{"name":"THERMAL_STATUS_MODERATE","tagname":"property","owner":"android.os.PowerManager","id":"property-THERMAL_STATUS_MODERATE","meta":{}},{"name":"THERMAL_STATUS_NONE","tagname":"property","owner":"android.os.PowerManager","id":"property-THERMAL_STATUS_NONE","meta":{}},{"name":"THERMAL_STATUS_SEVERE","tagname":"property","owner":"android.os.PowerManager","id":"property-THERMAL_STATUS_SEVERE","meta":{}},{"name":"THERMAL_STATUS_SHUTDOWN","tagname":"property","owner":"android.os.PowerManager","id":"property-THERMAL_STATUS_SHUTDOWN","meta":{}},{"name":"addThermalStatusListener","tagname":"method","owner":"android.os.PowerManager","id":"method-addThermalStatusListener","meta":{}},{"name":"getCurrentThermalStatus","tagname":"method","owner":"android.os.PowerManager","id":"method-getCurrentThermalStatus","meta":{}},{"name":"getLocationPowerSaveMode","tagname":"method","owner":"android.os.PowerManager","id":"method-getLocationPowerSaveMode","meta":{}},{"name":"isDeviceIdleMode","tagname":"method","owner":"android.os.PowerManager","id":"method-isDeviceIdleMode","meta":{}},{"name":"isIgnoringBatteryOptimizations","tagname":"method","owner":"android.os.PowerManager","id":"method-isIgnoringBatteryOptimizations","meta":{}},{"name":"isInteractive","tagname":"method","owner":"android.os.PowerManager","id":"method-isInteractive","meta":{}},{"name":"isPowerSaveMode","tagname":"method","owner":"android.os.PowerManager","id":"method-isPowerSaveMode","meta":{}},{"name":"isScreenOn","tagname":"method","owner":"android.os.PowerManager","id":"method-isScreenOn","meta":{"deprecated":{"text":"<p>Use <a href=\"#!/api/android.os.PowerManager-method-isInteractive\" rel=\"android.os.PowerManager-method-isInteractive\" class=\"docClass\">isInteractive</a> instead.</p>\n"}}},{"name":"isSustainedPerformanceModeSupported","tagname":"method","owner":"android.os.PowerManager","id":"method-isSustainedPerformanceModeSupported","meta":{}},{"name":"isWakeLockLevelSupported","tagname":"method","owner":"android.os.PowerManager","id":"method-isWakeLockLevelSupported","meta":{}},{"name":"newWakeLock","tagname":"method","owner":"android.os.PowerManager","id":"method-newWakeLock","meta":{}},{"name":"reboot","tagname":"method","owner":"android.os.PowerManager","id":"method-reboot","meta":{}},{"name":"removeThermalStatusListener","tagname":"method","owner":"android.os.PowerManager","id":"method-removeThermalStatusListener","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.os.PowerManager","short_doc":"This class gives you control of the power state of the device. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.os.PowerManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/PowerManager.html#android-os-PowerManager' target='_blank'>PowerManager.js</a></div></pre><div class='doc-contents'><p>This class gives you control of the power state of the device.</p>\n\n<p> <p>\n <b>Device battery life will be significantly affected by the use of this API.</b>\n Do not acquire android.os.PowerManager.WakeLocks unless you really need them, use the minimum levels\n possible, and be sure to release them as soon as possible.\n </p><p>\n The primary API you'll use is String) newWakeLock().\n This will create a android.os.PowerManager.WakeLock object.  You can then use methods\n on the wake lock object to control the power state of the device.\n </p><p>\n In practice it's quite simple:\n {@samplecode\n PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, \"My Tag\");\n wl.acquire();\n   ..screen will stay on during this section..\n wl.release();\n }\n </p><p>\n The following wake lock levels are defined, with varying effects on system power.\n <i>These levels are mutually exclusive - you may only specify one of them.</i></p>\n\n<p> <table>\n     <tr><th>Flag Value</th>\n     <th>CPU</th> <th>Screen</th> <th>Keyboard</th></tr></table></p>\n\n<pre><code> &lt;tr&gt;&lt;td&gt;<a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>&lt;/td&gt;\n     &lt;td&gt;On*&lt;/td&gt; &lt;td&gt;Off&lt;/td&gt; &lt;td&gt;Off&lt;/td&gt;\n &lt;/tr&gt;\n\n &lt;tr&gt;&lt;td&gt;<a href=\"#!/api/android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" class=\"docClass\">SCREEN_DIM_WAKE_LOCK</a>&lt;/td&gt;\n     &lt;td&gt;On&lt;/td&gt; &lt;td&gt;Dim&lt;/td&gt; &lt;td&gt;Off&lt;/td&gt;\n &lt;/tr&gt;\n\n &lt;tr&gt;&lt;td&gt;<a href=\"#!/api/android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" class=\"docClass\">SCREEN_BRIGHT_WAKE_LOCK</a>&lt;/td&gt;\n     &lt;td&gt;On&lt;/td&gt; &lt;td&gt;Bright&lt;/td&gt; &lt;td&gt;Off&lt;/td&gt;\n &lt;/tr&gt;\n\n &lt;tr&gt;&lt;td&gt;<a href=\"#!/api/android.os.PowerManager-property-FULL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-FULL_WAKE_LOCK\" class=\"docClass\">FULL_WAKE_LOCK</a>&lt;/td&gt;\n     &lt;td&gt;On&lt;/td&gt; &lt;td&gt;Bright&lt;/td&gt; &lt;td&gt;Bright&lt;/td&gt;\n &lt;/tr&gt;\n</code></pre>\n\n<p> \n </p><p>\n<i>If you hold a partial wake lock, the CPU will continue to run, regardless of any\n display timeouts or the state of the screen and even after the user presses the power button.\n In all other wake locks, the CPU will run, but the user can still put the device to sleep\n using the power button.</i>\n </p><p>\n In addition, you can add two more flags, which affect behavior of the screen only.\n <i>These flags have no effect when combined with a <a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>.</i></p></p>\n\n<p> <table>\n     <tr><th>Flag Value</th> <th>Description</th></tr></table></p>\n\n<pre><code> &lt;tr&gt;&lt;td&gt;<a href=\"#!/api/android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" rel=\"android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" class=\"docClass\">ACQUIRE_CAUSES_WAKEUP</a>&lt;/td&gt;\n     &lt;td&gt;Normal wake locks don't actually turn on the illumination.  Instead, they cause\n     the illumination to remain on once it turns on (e.g. from user activity).  This flag\n     will force the screen and/or keyboard to turn on immediately, when the WakeLock is\n     acquired.  A typical use would be for notifications which are important for the user to\n     see immediately.&lt;/td&gt;\n &lt;/tr&gt;\n\n &lt;tr&gt;&lt;td&gt;<a href=\"#!/api/android.os.PowerManager-property-ON_AFTER_RELEASE\" rel=\"android.os.PowerManager-property-ON_AFTER_RELEASE\" class=\"docClass\">ON_AFTER_RELEASE</a>&lt;/td&gt;\n     &lt;td&gt;If this flag is set, the user activity timer will be reset when the WakeLock is\n     released, causing the illumination to remain on a bit longer.  This can be used to\n     reduce flicker if you are cycling between wake lock conditions.&lt;/td&gt;\n &lt;/tr&gt;\n</code></pre>\n\n<p> \n <p>\n Any application using a WakeLock must request the {@code android.permission.WAKE_LOCK}\n permission in an {@code <uses-permission>} element of the application's manifest.\n </uses></p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ACQUIRE_CAUSES_WAKEUP' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-ACQUIRE_CAUSES_WAKEUP' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP' class='name expandable'>ACQUIRE_CAUSES_WAKEUP</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Wake lock flag: Turn the screen on when the wake lock is acquired. ...</div><div class='long'><p>Wake lock flag: Turn the screen on when the wake lock is acquired.</p>\n\n<p>\nNormally wake locks don't actually wake the device, they just cause\nthe screen to remain on once it's already on.  Think of the video player\napplication as the normal behavior.  Notifications that pop up and want\nthe device to be on are the exception; use this flag to be like them.\n</p>\n\n\n<p>\nCannot be used with <a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>.\n</p>\n\n<p>Defaults to: <code>&quot;268435456&quot;</code></p></div></div></div><div id='property-ACTION_DEVICE_IDLE_MODE_CHANGED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-ACTION_DEVICE_IDLE_MODE_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-ACTION_DEVICE_IDLE_MODE_CHANGED' class='name expandable'>ACTION_DEVICE_IDLE_MODE_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Intent that is broadcast when the state of isDeviceIdleMode() changes. ...</div><div class='long'><p>Intent that is broadcast when the state of <a href=\"#!/api/android.os.PowerManager-method-isDeviceIdleMode\" rel=\"android.os.PowerManager-method-isDeviceIdleMode\" class=\"docClass\">isDeviceIdleMode</a>() changes.\nThis broadcast is only sent to registered receivers.</p>\n<p>Defaults to: <code>&quot;android.os.action.DEVICE_IDLE_MODE_CHANGED&quot;</code></p></div></div></div><div id='property-ACTION_POWER_SAVE_MODE_CHANGED' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-ACTION_POWER_SAVE_MODE_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-ACTION_POWER_SAVE_MODE_CHANGED' class='name expandable'>ACTION_POWER_SAVE_MODE_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Intent that is broadcast when the state of isPowerSaveMode() changes. ...</div><div class='long'><p>Intent that is broadcast when the state of <a href=\"#!/api/android.os.PowerManager-method-isPowerSaveMode\" rel=\"android.os.PowerManager-method-isPowerSaveMode\" class=\"docClass\">isPowerSaveMode</a>() changes.\nThis broadcast is only sent to registered receivers.</p>\n<p>Defaults to: <code>&quot;android.os.action.POWER_SAVE_MODE_CHANGED&quot;</code></p></div></div></div><div id='property-DOZE_WAKE_LOCK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-DOZE_WAKE_LOCK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-DOZE_WAKE_LOCK' class='name expandable'>DOZE_WAKE_LOCK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Wake lock level: Put the screen in a low power state and allow the CPU to suspend\nif no other wake locks are held. ...</div><div class='long'><p>Wake lock level: Put the screen in a low power state and allow the CPU to suspend\nif no other wake locks are held.</p>\n\n<p>\nThis is used by the dream manager to implement doze mode.  It currently\nhas no effect unless the power manager is in the dozing state.\n</p>\n\n\n<p>\nRequires the android.Manifest.permission.DEVICE_POWER permission.\n</p>\n\n\n<p>{@hide}</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-DRAW_WAKE_LOCK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-DRAW_WAKE_LOCK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-DRAW_WAKE_LOCK' class='name expandable'>DRAW_WAKE_LOCK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Wake lock level: Keep the device awake enough to allow drawing to occur. ...</div><div class='long'><p>Wake lock level: Keep the device awake enough to allow drawing to occur.</p>\n\n<p>\nThis is used by the window manager to allow applications to draw while the\nsystem is dozing.  It currently has no effect unless the power manager is in\nthe dozing state.\n</p>\n\n\n<p>\nRequires the android.Manifest.permission.DEVICE_POWER permission.\n</p>\n\n\n<p>{@hide}</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-FULL_WAKE_LOCK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-FULL_WAKE_LOCK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-FULL_WAKE_LOCK' class='name expandable'>FULL_WAKE_LOCK</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Wake lock level: Ensures that the screen and keyboard backlight are on at\nfull brightness. ...</div><div class='long'><p>Wake lock level: Ensures that the screen and keyboard backlight are on at\nfull brightness.</p>\n\n<p>\nIf the user presses the power button, then the <a href=\"#!/api/android.os.PowerManager-property-FULL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-FULL_WAKE_LOCK\" class=\"docClass\">FULL_WAKE_LOCK</a> will be\nimplicitly released by the system, causing both the screen and the CPU to be turned off.\nContrast with <a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>.\n</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>Most applications should use\nandroid.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead\nof this type of wake lock, as it will be correctly managed by the platform\nas the user moves between applications and doesn't require a special permission.</p>\n\n        </div>\n</div></div></div><div id='property-LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF' class='name expandable'>LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>All location providers should be disabled when battery saver is on and\nthe device is non-interactive. ...</div><div class='long'><p>All location providers should be disabled when battery saver is on and\nthe device is non-interactive.</p>\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-LOCATION_MODE_FOREGROUND_ONLY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-LOCATION_MODE_FOREGROUND_ONLY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-LOCATION_MODE_FOREGROUND_ONLY' class='name expandable'>LOCATION_MODE_FOREGROUND_ONLY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>In this mode, all the location providers will be kept available, but location fixes\nshould only be provided to foregr...</div><div class='long'><p>In this mode, all the location providers will be kept available, but location fixes\nshould only be provided to foreground apps.</p>\n<p>Defaults to: <code>&quot;3&quot;</code></p></div></div></div><div id='property-LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF' class='name expandable'>LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>In this mode, the GPS based location provider should be disabled when battery saver is on and\nthe device is non-inter...</div><div class='long'><p>In this mode, the GPS based location provider should be disabled when battery saver is on and\nthe device is non-interactive.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-LOCATION_MODE_NO_CHANGE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-LOCATION_MODE_NO_CHANGE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-LOCATION_MODE_NO_CHANGE' class='name expandable'>LOCATION_MODE_NO_CHANGE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Either the location providers shouldn't be affected by battery saver,\nor battery saver is off. ...</div><div class='long'><p>Either the location providers shouldn't be affected by battery saver,\nor battery saver is off.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF' class='name expandable'>LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>In this mode, location will not be turned off, but LocationManager will throttle all\nrequests to providers when the d...</div><div class='long'><p>In this mode, location will not be turned off, but LocationManager will throttle all\nrequests to providers when the device is non-interactive.</p>\n<p>Defaults to: <code>&quot;4&quot;</code></p></div></div></div><div id='property-ON_AFTER_RELEASE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-ON_AFTER_RELEASE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-ON_AFTER_RELEASE' class='name expandable'>ON_AFTER_RELEASE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Wake lock flag: When this wake lock is released, poke the user activity timer\nso the screen stays on for a little lon...</div><div class='long'><p>Wake lock flag: When this wake lock is released, poke the user activity timer\nso the screen stays on for a little longer.</p>\n\n<p>\nWill not turn the screen on if it is not already on.\nSee <a href=\"#!/api/android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" rel=\"android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" class=\"docClass\">ACQUIRE_CAUSES_WAKEUP</a> if you want that.\n</p>\n\n\n<p>\nCannot be used with <a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>.\n</p>\n\n<p>Defaults to: <code>&quot;536870912&quot;</code></p></div></div></div><div id='property-PARTIAL_WAKE_LOCK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-PARTIAL_WAKE_LOCK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK' class='name expandable'>PARTIAL_WAKE_LOCK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Wake lock level: Ensures that the CPU is running; the screen and keyboard\nbacklight will be allowed to go off. ...</div><div class='long'><p>Wake lock level: Ensures that the CPU is running; the screen and keyboard\nbacklight will be allowed to go off.</p>\n\n<p>\nIf the user presses the power button, then the screen will be turned off\nbut the CPU will be kept on until all partial wake locks have been released.\n</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-PROXIMITY_SCREEN_OFF_WAKE_LOCK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-PROXIMITY_SCREEN_OFF_WAKE_LOCK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-PROXIMITY_SCREEN_OFF_WAKE_LOCK' class='name expandable'>PROXIMITY_SCREEN_OFF_WAKE_LOCK</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Wake lock level: Turns the screen off when the proximity sensor activates. ...</div><div class='long'><p>Wake lock level: Turns the screen off when the proximity sensor activates.</p>\n\n<p>\nIf the proximity sensor detects that an object is nearby, the screen turns off\nimmediately.  Shortly after the object moves away, the screen turns on again.\n</p>\n\n\n<p>\nA proximity wake lock does not prevent the device from falling asleep\nunlike <a href=\"#!/api/android.os.PowerManager-property-FULL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-FULL_WAKE_LOCK\" class=\"docClass\">FULL_WAKE_LOCK</a>, <a href=\"#!/api/android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" class=\"docClass\">SCREEN_BRIGHT_WAKE_LOCK</a> and\n<a href=\"#!/api/android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" class=\"docClass\">SCREEN_DIM_WAKE_LOCK</a>.  If there is no user activity and no other\nwake locks are held, then the device will fall asleep (and lock) as usual.\nHowever, the device will not fall asleep while the screen has been turned off\nby the proximity sensor because it effectively counts as ongoing user activity.\n</p>\n\n\n<p>\nSince not all devices have proximity sensors, use <a href=\"#!/api/android.os.PowerManager-method-isWakeLockLevelSupported\" rel=\"android.os.PowerManager-method-isWakeLockLevelSupported\" class=\"docClass\">isWakeLockLevelSupported</a>\nto determine whether this wake lock level is supported.\n</p>\n\n\n<p>\nCannot be used with <a href=\"#!/api/android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" rel=\"android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" class=\"docClass\">ACQUIRE_CAUSES_WAKEUP</a>.\n</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY' class='name expandable'>RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for android.os.PowerManager.WakeLock.release(int): Defer releasing a\nPROXIMITY_SCREEN_OFF_WAKE_LOCK wake lock un...</div><div class='long'><p>Flag for android.os.PowerManager.WakeLock.release(int): Defer releasing a\n<a href=\"#!/api/android.os.PowerManager-property-PROXIMITY_SCREEN_OFF_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PROXIMITY_SCREEN_OFF_WAKE_LOCK\" class=\"docClass\">PROXIMITY_SCREEN_OFF_WAKE_LOCK</a> wake lock until the proximity sensor\nindicates that an object is not in close proximity.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-SCREEN_BRIGHT_WAKE_LOCK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK' class='name expandable'>SCREEN_BRIGHT_WAKE_LOCK</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Wake lock level: Ensures that the screen is on at full brightness;\nthe keyboard backlight will be allowed to go off. ...</div><div class='long'><p>Wake lock level: Ensures that the screen is on at full brightness;\nthe keyboard backlight will be allowed to go off.</p>\n\n<p>\nIf the user presses the power button, then the <a href=\"#!/api/android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" class=\"docClass\">SCREEN_BRIGHT_WAKE_LOCK</a> will be\nimplicitly released by the system, causing both the screen and the CPU to be turned off.\nContrast with <a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>.\n</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>Most applications should use\nandroid.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead\nof this type of wake lock, as it will be correctly managed by the platform\nas the user moves between applications and doesn't require a special permission.</p>\n\n        </div>\n</div></div></div><div id='property-SCREEN_DIM_WAKE_LOCK' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-SCREEN_DIM_WAKE_LOCK' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK' class='name expandable'>SCREEN_DIM_WAKE_LOCK</a> : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Wake lock level: Ensures that the screen is on (but may be dimmed);\nthe keyboard backlight will be allowed to go off. ...</div><div class='long'><p>Wake lock level: Ensures that the screen is on (but may be dimmed);\nthe keyboard backlight will be allowed to go off.</p>\n\n<p>\nIf the user presses the power button, then the <a href=\"#!/api/android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" class=\"docClass\">SCREEN_DIM_WAKE_LOCK</a> will be\nimplicitly released by the system, causing both the screen and the CPU to be turned off.\nContrast with <a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>.\n</p>\n\n<p>Defaults to: <code>&quot;null&quot;</code></p>        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This property has been <strong>deprecated</strong> </p>\n        <p>Most applications should use\nandroid.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead\nof this type of wake lock, as it will be correctly managed by the platform\nas the user moves between applications and doesn't require a special permission.</p>\n\n        </div>\n</div></div></div><div id='property-THERMAL_STATUS_CRITICAL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-THERMAL_STATUS_CRITICAL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-THERMAL_STATUS_CRITICAL' class='name expandable'>THERMAL_STATUS_CRITICAL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Thermal status code: Platform has done everything to reduce power. ...</div><div class='long'><p>Thermal status code: Platform has done everything to reduce power.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-THERMAL_STATUS_EMERGENCY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-THERMAL_STATUS_EMERGENCY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-THERMAL_STATUS_EMERGENCY' class='name expandable'>THERMAL_STATUS_EMERGENCY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Thermal status code: Key components in platform are shutting down due to thermal condition. ...</div><div class='long'><p>Thermal status code: Key components in platform are shutting down due to thermal condition.\nDevice functionalities will be limited.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-THERMAL_STATUS_LIGHT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-THERMAL_STATUS_LIGHT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-THERMAL_STATUS_LIGHT' class='name expandable'>THERMAL_STATUS_LIGHT</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Thermal status code: Light throttling where UX is not impacted. ...</div><div class='long'><p>Thermal status code: Light throttling where UX is not impacted.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-THERMAL_STATUS_MODERATE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-THERMAL_STATUS_MODERATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-THERMAL_STATUS_MODERATE' class='name expandable'>THERMAL_STATUS_MODERATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Thermal status code: Moderate throttling where UX is not largely impacted. ...</div><div class='long'><p>Thermal status code: Moderate throttling where UX is not largely impacted.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-THERMAL_STATUS_NONE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-THERMAL_STATUS_NONE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-THERMAL_STATUS_NONE' class='name expandable'>THERMAL_STATUS_NONE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Thermal status code: Not under throttling. ...</div><div class='long'><p>Thermal status code: Not under throttling.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-THERMAL_STATUS_SEVERE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-THERMAL_STATUS_SEVERE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-THERMAL_STATUS_SEVERE' class='name expandable'>THERMAL_STATUS_SEVERE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Thermal status code: Severe throttling where UX is largely impacted. ...</div><div class='long'><p>Thermal status code: Severe throttling where UX is largely impacted.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-THERMAL_STATUS_SHUTDOWN' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-property-THERMAL_STATUS_SHUTDOWN' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-property-THERMAL_STATUS_SHUTDOWN' class='name expandable'>THERMAL_STATUS_SHUTDOWN</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Thermal status code: Need shutdown immediately. ...</div><div class='long'><p>Thermal status code: Need shutdown immediately.</p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addThermalStatusListener' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-addThermalStatusListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-addThermalStatusListener' class='name expandable'>addThermalStatusListener</a>( <span class='pre'>executor, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This function adds a listener for thermal status change. ...</div><div class='long'><p>This function adds a listener for thermal status change.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>Executor to handle listener callback.</p>\n</div></li><li><span class='pre'>listener</span> : Object {PowerManager.OnThermalStatusChangedListener}<div class='sub-desc'><p>listener to be added.</p>\n</div></li></ul></div></div></div><div id='method-getCurrentThermalStatus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-getCurrentThermalStatus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-getCurrentThermalStatus' class='name expandable'>getCurrentThermalStatus</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>This function returns the current thermal status of the device. ...</div><div class='long'><p>This function returns the current thermal status of the device.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>thermal status as int, <a href=\"#!/api/android.os.PowerManager-property-THERMAL_STATUS_NONE\" rel=\"android.os.PowerManager-property-THERMAL_STATUS_NONE\" class=\"docClass\">THERMAL_STATUS_NONE</a> if device in not under\n thermal throttling.</p>\n</div></li></ul></div></div></div><div id='method-getLocationPowerSaveMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-getLocationPowerSaveMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-getLocationPowerSaveMode' class='name expandable'>getLocationPowerSaveMode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns how location features should behave when battery saver is on. ...</div><div class='long'><p>Returns how location features should behave when battery saver is on. When battery saver\n is off, this will always return <a href=\"#!/api/android.os.PowerManager-property-LOCATION_MODE_NO_CHANGE\" rel=\"android.os.PowerManager-property-LOCATION_MODE_NO_CHANGE\" class=\"docClass\">LOCATION_MODE_NO_CHANGE</a>.</p>\n\n<p> <p>This API is normally only useful for components that provide location features.\n@see <a href=\"#!/api/android.os.PowerManager-method-isPowerSaveMode\" rel=\"android.os.PowerManager-method-isPowerSaveMode\" class=\"docClass\">isPowerSaveMode</a>()\n@see <a href=\"#!/api/android.os.PowerManager-property-ACTION_POWER_SAVE_MODE_CHANGED\" rel=\"android.os.PowerManager-property-ACTION_POWER_SAVE_MODE_CHANGED\" class=\"docClass\">ACTION_POWER_SAVE_MODE_CHANGED</a></p>\n</div></div></div><div id='method-isDeviceIdleMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-isDeviceIdleMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-isDeviceIdleMode' class='name expandable'>isDeviceIdleMode</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the device is currently in idle mode. ...</div><div class='long'><p>Returns true if the device is currently in idle mode.  This happens when a device\n has been sitting unused and unmoving for a sufficiently long period of time, so that\n it decides to go into a lower power-use state.  This may involve things like turning\n off network access to apps.  You can monitor for changes to this state with\n <a href=\"#!/api/android.os.PowerManager-property-ACTION_DEVICE_IDLE_MODE_CHANGED\" rel=\"android.os.PowerManager-property-ACTION_DEVICE_IDLE_MODE_CHANGED\" class=\"docClass\">ACTION_DEVICE_IDLE_MODE_CHANGED</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if currently in active device idle mode, else false.  This is\n when idle mode restrictions are being actively applied; it will return false if the\n device is in a long-term idle mode but currently running a maintenance window where\n restrictions have been lifted.</p>\n</div></li></ul></div></div></div><div id='method-isIgnoringBatteryOptimizations' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-isIgnoringBatteryOptimizations' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-isIgnoringBatteryOptimizations' class='name expandable'>isIgnoringBatteryOptimizations</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Return whether the given application package name is on the device's power whitelist. ...</div><div class='long'><p>Return whether the given application package name is on the device's power whitelist.\n Apps can be placed on the whitelist through the settings UI invoked by\n android.provider.Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS.</p>\n</div></div></div><div id='method-isInteractive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-isInteractive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-isInteractive' class='name expandable'>isInteractive</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the device is in an interactive state. ...</div><div class='long'><p>Returns true if the device is in an interactive state.\n <p>\n When this method returns true, the device is awake and ready to interact\n with the user (although this is not a guarantee that the user is actively\n interacting with the device just this moment).  The main screen is usually\n turned on while in this state.  Certain features, such as the proximity\n sensor, may temporarily turn off the screen while still leaving the device in an\n interactive state.  Note in particular that the device is still considered\n to be interactive while dreaming (since dreams can be interactive) but not\n when it is dozing or asleep.\n </p><p>\n When this method returns false, the device is dozing or asleep and must\n be awoken before it will become ready to interact with the user again.  The\n main screen is usually turned off while in this state.  Certain features,\n such as \"ambient mode\" may cause the main screen to remain on (albeit in a\n low power state) to display system-provided content while the device dozes.\n </p><p>\n The system will send a screen on\n or screen off broadcast\n whenever the interactive state of the device changes.  For historical reasons,\n the names of these broadcasts refer to the power state of the screen\n but they are actually sent in response to changes in the overall interactive\n state of the device, as described by this method.\n </p><p>\n Services may use the non-interactive state as a hint to conserve power\n since the user is not present.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the device is in an interactive state.\n@see android.content.Intent#ACTION_SCREEN_ON\n@see android.content.Intent#ACTION_SCREEN_OFF</p>\n</div></li></ul></div></div></div><div id='method-isPowerSaveMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-isPowerSaveMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-isPowerSaveMode' class='name expandable'>isPowerSaveMode</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the device is currently in power save mode. ...</div><div class='long'><p>Returns true if the device is currently in power save mode.  When in this mode,\n applications should reduce their functionality in order to conserve battery as\n much as possible.  You can monitor for changes to this state with\n <a href=\"#!/api/android.os.PowerManager-property-ACTION_POWER_SAVE_MODE_CHANGED\" rel=\"android.os.PowerManager-property-ACTION_POWER_SAVE_MODE_CHANGED\" class=\"docClass\">ACTION_POWER_SAVE_MODE_CHANGED</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if currently in low power mode, else false.</p>\n</div></li></ul></div></div></div><div id='method-isScreenOn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-isScreenOn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-isScreenOn' class='name expandable'>isScreenOn</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Returns true if the device is in an interactive state. ...</div><div class='long'><p>Returns true if the device is in an interactive state.\n <p>\n For historical reasons, the name of this method refers to the power state of\n the screen but it actually describes the overall interactive state of\n the device.  This method has been replaced by <a href=\"#!/api/android.os.PowerManager-method-isInteractive\" rel=\"android.os.PowerManager-method-isInteractive\" class=\"docClass\">isInteractive</a>.\n </p><p>\n The value returned by this method only indicates whether the device is\n in an interactive state which may have nothing to do with the screen being\n on or off.  To determine the actual state of the screen,\n use android.view.Display.getState.\n </p></p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>Use <a href=\"#!/api/android.os.PowerManager-method-isInteractive\" rel=\"android.os.PowerManager-method-isInteractive\" class=\"docClass\">isInteractive</a> instead.</p>\n\n        </div>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the device is in an interactive state.</p>\n</div></li></ul></div></div></div><div id='method-isSustainedPerformanceModeSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-isSustainedPerformanceModeSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-isSustainedPerformanceModeSupported' class='name expandable'>isSustainedPerformanceModeSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>This function checks if the device has implemented Sustained Performance\n Mode. ...</div><div class='long'><p>This function checks if the device has implemented Sustained Performance\n Mode. This needs to be checked only once and is constant for a particular\n device/release.</p>\n\n<p> Sustained Performance Mode is intended to provide a consistent level of\n performance for prolonged amount of time.</p>\n\n<p> Applications should check if the device supports this mode, before using\n android.view.Window.setSustainedPerformanceMode.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns True if the device supports it, false otherwise.\n@see android.view.Window#setSustainedPerformanceMode</p>\n</div></li></ul></div></div></div><div id='method-isWakeLockLevelSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-isWakeLockLevelSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-isWakeLockLevelSupported' class='name expandable'>isWakeLockLevelSupported</a>( <span class='pre'>level</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the specified wake lock level is supported. ...</div><div class='long'><p>Returns true if the specified wake lock level is supported.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>level</span> : Number<div class='sub-desc'><p>The wake lock level to check.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the specified wake lock level is supported.</p>\n</div></li></ul></div></div></div><div id='method-newWakeLock' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-newWakeLock' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-newWakeLock' class='name expandable'>newWakeLock</a>( <span class='pre'>levelAndFlags, tag</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new wake lock with the specified level and flags. ...</div><div class='long'><p>Creates a new wake lock with the specified level and flags.\n <p>\n The {@code levelAndFlags} parameter specifies a wake lock level and optional flags\n combined using the logical OR operator.\n </p><p>\n The wake lock levels are: <a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>,\n <a href=\"#!/api/android.os.PowerManager-property-FULL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-FULL_WAKE_LOCK\" class=\"docClass\">FULL_WAKE_LOCK</a>, <a href=\"#!/api/android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" class=\"docClass\">SCREEN_DIM_WAKE_LOCK</a>\n and <a href=\"#!/api/android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" class=\"docClass\">SCREEN_BRIGHT_WAKE_LOCK</a>.  Exactly one wake lock level must be\n specified as part of the {@code levelAndFlags} parameter.\n </p><p>\n The wake lock flags are: <a href=\"#!/api/android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" rel=\"android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" class=\"docClass\">ACQUIRE_CAUSES_WAKEUP</a>\n and <a href=\"#!/api/android.os.PowerManager-property-ON_AFTER_RELEASE\" rel=\"android.os.PowerManager-property-ON_AFTER_RELEASE\" class=\"docClass\">ON_AFTER_RELEASE</a>.  Multiple flags can be combined as part of the\n {@code levelAndFlags} parameters.\n </p><p>\n Call acquire() on the object to acquire the\n wake lock, and release() when you are done.\n </p><p>\n {@samplecode\n PowerManager pm = (PowerManager)mContext.getSystemService(\n                                          Context.POWER_SERVICE);\n PowerManager.WakeLock wl = pm.newWakeLock(\n                                      PowerManager.SCREEN_DIM_WAKE_LOCK\n                                      | PowerManager.ON_AFTER_RELEASE,\n                                      TAG);\n wl.acquire();\n // ... do work...\n wl.release();\n }\n </p><p>\n Although a wake lock can be created without special permissions,\n the android.Manifest.permission.WAKE_LOCK permission is\n required to actually acquire or release the wake lock that is returned.\n </p><p class=\"note\">\n If using this to keep the screen on, you should strongly consider using\n android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead.\n This window flag will be correctly managed by the platform\n as the user moves between applications and doesn't require a special permission.\n </p></p>\n\n<p> <p>\n Recommended naming conventions for tags to make debugging easier:\n <ul>\n <li>use a unique prefix delimited by a colon for your app/library (e.g.\n gmail:mytag) to make it easier to understand where the wake locks comes\n from. This namespace will also avoid collision for tags inside your app\n coming from different libraries which will make debugging easier.\n <li>use constants (e.g. do not include timestamps in the tag) to make it\n easier for tools to aggregate similar wake locks. When collecting\n debugging data, the platform only monitors a finite number of tags,\n using constants will help tools to provide better debugging data.\n <li>avoid using Class#getName() or similar method since this class name\n can be transformed by java optimizer and obfuscator tools.\n <li>avoid wrapping the tag or a prefix to avoid collision with wake lock\n tags from the platform (e.g. <em>alarm</em>).\n <li>never include personnally identifiable information for privacy\n reasons.\n </li></li></li></li></li></ul>\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>levelAndFlags</span> : Number<div class='sub-desc'><p>Combination of wake lock level and flag values defining\n the requested behavior of the WakeLock.</p>\n</div></li><li><span class='pre'>tag</span> : String<div class='sub-desc'><p>Your class name (or other tag) for debugging purposes.\n@see WakeLock#acquire()\n@see WakeLock#release()\n@see <a href=\"#!/api/android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PARTIAL_WAKE_LOCK\" class=\"docClass\">PARTIAL_WAKE_LOCK</a>\n@see <a href=\"#!/api/android.os.PowerManager-property-FULL_WAKE_LOCK\" rel=\"android.os.PowerManager-property-FULL_WAKE_LOCK\" class=\"docClass\">FULL_WAKE_LOCK</a>\n@see <a href=\"#!/api/android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_DIM_WAKE_LOCK\" class=\"docClass\">SCREEN_DIM_WAKE_LOCK</a>\n@see <a href=\"#!/api/android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" rel=\"android.os.PowerManager-property-SCREEN_BRIGHT_WAKE_LOCK\" class=\"docClass\">SCREEN_BRIGHT_WAKE_LOCK</a>\n@see <a href=\"#!/api/android.os.PowerManager-property-PROXIMITY_SCREEN_OFF_WAKE_LOCK\" rel=\"android.os.PowerManager-property-PROXIMITY_SCREEN_OFF_WAKE_LOCK\" class=\"docClass\">PROXIMITY_SCREEN_OFF_WAKE_LOCK</a>\n@see <a href=\"#!/api/android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" rel=\"android.os.PowerManager-property-ACQUIRE_CAUSES_WAKEUP\" class=\"docClass\">ACQUIRE_CAUSES_WAKEUP</a>\n@see <a href=\"#!/api/android.os.PowerManager-property-ON_AFTER_RELEASE\" rel=\"android.os.PowerManager-property-ON_AFTER_RELEASE\" class=\"docClass\">ON_AFTER_RELEASE</a></p>\n</div></li></ul></div></div></div><div id='method-reboot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-reboot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-reboot' class='name expandable'>reboot</a>( <span class='pre'>reason</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reboot the device. ...</div><div class='long'><p>Reboot the device.  Will not return if the reboot is successful.\n <p>\n Requires the android.Manifest.permission.REBOOT permission.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>reason</span> : String<div class='sub-desc'><p>code to pass to the kernel (e.g., \"recovery\") to\n               request special boot modes, or null.</p>\n</div></li></ul></div></div></div><div id='method-removeThermalStatusListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.PowerManager'>android.os.PowerManager</span><br/><a href='source/PowerManager.html#android-os-PowerManager-method-removeThermalStatusListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.PowerManager-method-removeThermalStatusListener' class='name expandable'>removeThermalStatusListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This function removes a listener for thermal status change ...</div><div class='long'><p>This function removes a listener for thermal status change</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {PowerManager.OnThermalStatusChangedListener}<div class='sub-desc'><p>listener to be removed</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});