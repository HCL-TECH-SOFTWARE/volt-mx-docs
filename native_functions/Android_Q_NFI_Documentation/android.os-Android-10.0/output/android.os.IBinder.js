Ext.data.JsonP.android_os_IBinder({"tagname":"class","name":"android.os.IBinder","autodetected":{},"files":[{"filename":"IBinder.js","href":"IBinder.html#android-os-IBinder"}],"members":[{"name":"DUMP_TRANSACTION","tagname":"property","owner":"android.os.IBinder","id":"property-DUMP_TRANSACTION","meta":{}},{"name":"FIRST_CALL_TRANSACTION","tagname":"property","owner":"android.os.IBinder","id":"property-FIRST_CALL_TRANSACTION","meta":{}},{"name":"FLAG_ONEWAY","tagname":"property","owner":"android.os.IBinder","id":"property-FLAG_ONEWAY","meta":{}},{"name":"INTERFACE_TRANSACTION","tagname":"property","owner":"android.os.IBinder","id":"property-INTERFACE_TRANSACTION","meta":{}},{"name":"LAST_CALL_TRANSACTION","tagname":"property","owner":"android.os.IBinder","id":"property-LAST_CALL_TRANSACTION","meta":{}},{"name":"LIKE_TRANSACTION","tagname":"property","owner":"android.os.IBinder","id":"property-LIKE_TRANSACTION","meta":{}},{"name":"PING_TRANSACTION","tagname":"property","owner":"android.os.IBinder","id":"property-PING_TRANSACTION","meta":{}},{"name":"TWEET_TRANSACTION","tagname":"property","owner":"android.os.IBinder","id":"property-TWEET_TRANSACTION","meta":{}},{"name":"dump","tagname":"method","owner":"android.os.IBinder","id":"method-dump","meta":{}},{"name":"dumpAsync","tagname":"method","owner":"android.os.IBinder","id":"method-dumpAsync","meta":{}},{"name":"getInterfaceDescriptor","tagname":"method","owner":"android.os.IBinder","id":"method-getInterfaceDescriptor","meta":{}},{"name":"isBinderAlive","tagname":"method","owner":"android.os.IBinder","id":"method-isBinderAlive","meta":{}},{"name":"linkToDeath","tagname":"method","owner":"android.os.IBinder","id":"method-linkToDeath","meta":{}},{"name":"pingBinder","tagname":"method","owner":"android.os.IBinder","id":"method-pingBinder","meta":{}},{"name":"queryLocalInterface","tagname":"method","owner":"android.os.IBinder","id":"method-queryLocalInterface","meta":{}},{"name":"transact","tagname":"method","owner":"android.os.IBinder","id":"method-transact","meta":{}},{"name":"unlinkToDeath","tagname":"method","owner":"android.os.IBinder","id":"method-unlinkToDeath","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.os.IBinder","short_doc":"Base interface for a remotable object, the core part of a lightweight\n remote procedure call mechanism designed for h...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/IBinder.html#android-os-IBinder' target='_blank'>IBinder.js</a></div></pre><div class='doc-contents'><p>Base interface for a remotable object, the core part of a lightweight\n remote procedure call mechanism designed for high performance when\n performing in-process and cross-process calls.  This\n interface describes the abstract protocol for interacting with a\n remotable object.  Do not implement this interface directly, instead\n extend from <a href=\"#!/api/android.os.Binder\" rel=\"android.os.Binder\" class=\"docClass\">android.os.Binder</a>.</p>\n\n<p> <p>The key IBinder API is <a href=\"#!/api/android.os.IBinder-method-transact\" rel=\"android.os.IBinder-method-transact\" class=\"docClass\">transact()</a> matched by\n android.os.Binder.onTransact().  These\n methods allow you to send a call to an IBinder object and receive a\n call coming in to a Binder object, respectively.  This transaction API\n is synchronous, such that a call to <a href=\"#!/api/android.os.IBinder-method-transact\" rel=\"android.os.IBinder-method-transact\" class=\"docClass\">transact()</a> does not\n return until the target has returned from\n android.os.Binder.onTransact(); this is the\n expected behavior when calling an object that exists in the local\n process, and the underlying inter-process communication (IPC) mechanism\n ensures that these same semantics apply when going across processes.</p>\n\n<p> <p>The data sent through transact() is a <a href=\"#!/api/android.os.Parcel\" rel=\"android.os.Parcel\" class=\"docClass\">android.os.Parcel</a>, a generic buffer\n of data that also maintains some meta-data about its contents.  The meta\n data is used to manage IBinder object references in the buffer, so that those\n references can be maintained as the buffer moves across processes.  This\n mechanism ensures that when an IBinder is written into a Parcel and sent to\n another process, if that other process sends a reference to that same IBinder\n back to the original process, then the original process will receive the\n same IBinder object back.  These semantics allow IBinder/Binder objects to\n be used as a unique identity (to serve as a token or for other purposes)\n that can be managed across processes.</p>\n\n<p> <p>The system maintains a pool of transaction threads in each process that\n it runs in.  These threads are used to dispatch all\n IPCs coming in from other processes.  For example, when an IPC is made from\n process A to process B, the calling thread in A blocks in transact() as\n it sends the transaction to process B.  The next available pool thread in\n B receives the incoming transaction, calls Binder.onTransact() on the target\n object, and replies with the result Parcel.  Upon receiving its result, the\n thread in process A returns to allow its execution to continue.  In effect,\n other processes appear to use as additional threads that you did not create\n executing in your own process.</p>\n\n<p> <p>The Binder system also supports recursion across processes.  For example\n if process A performs a transaction to process B, and process B while\n handling that transaction calls transact() on an IBinder that is implemented\n in A, then the thread in A that is currently waiting for the original\n transaction to finish will take care of calling Binder.onTransact() on the\n object being called by B.  This ensures that the recursion semantics when\n calling remote binder object are the same as when calling local objects.</p>\n\n<p> <p>When working with remote objects, you often want to find out when they\n are no longer valid.  There are three ways this can be determined:\n <ul>\n <li> The <a href=\"#!/api/android.os.IBinder-method-transact\" rel=\"android.os.IBinder-method-transact\" class=\"docClass\">transact()</a> method will throw a\n <a href=\"#!/api/android.os.RemoteException\" rel=\"android.os.RemoteException\" class=\"docClass\">android.os.RemoteException</a> exception if you try to call it on an IBinder\n whose process no longer exists.\n <li> The <a href=\"#!/api/android.os.IBinder-method-pingBinder\" rel=\"android.os.IBinder-method-pingBinder\" class=\"docClass\">pingBinder</a>() method can be called, and will return false\n if the remote process no longer exists.\n <li> The <a href=\"#!/api/android.os.IBinder-method-linkToDeath\" rel=\"android.os.IBinder-method-linkToDeath\" class=\"docClass\">linkToDeath()</a> method can be used to register\n a <a href=\"#!/api/android.os.IBinder.DeathRecipient\" rel=\"android.os.IBinder.DeathRecipient\" class=\"docClass\">android.os.IBinder.DeathRecipient</a> with the IBinder, which will be called when its\n containing process goes away.\n </li></li></li></ul></p>\n\n<p> @see Binder</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-DUMP_TRANSACTION' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-property-DUMP_TRANSACTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-property-DUMP_TRANSACTION' class='name expandable'>DUMP_TRANSACTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>IBinder protocol transaction code: dump internal state. ...</div><div class='long'><p>IBinder protocol transaction code: dump internal state.</p>\n<p>Defaults to: <code>&quot;1598311760&quot;</code></p></div></div></div><div id='property-FIRST_CALL_TRANSACTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-property-FIRST_CALL_TRANSACTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-property-FIRST_CALL_TRANSACTION' class='name expandable'>FIRST_CALL_TRANSACTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The first transaction code available for user commands. ...</div><div class='long'><p>The first transaction code available for user commands.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-FLAG_ONEWAY' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-property-FLAG_ONEWAY' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-property-FLAG_ONEWAY' class='name expandable'>FLAG_ONEWAY</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag to transact: this is a one-way call, meaning that the\ncaller returns immediately, without waiting for a result f...</div><div class='long'><p>Flag to <a href=\"#!/api/android.os.IBinder-method-transact\" rel=\"android.os.IBinder-method-transact\" class=\"docClass\">transact</a>: this is a one-way call, meaning that the\ncaller returns immediately, without waiting for a result from the\ncallee. Applies only if the caller and callee are in different\nprocesses.</p>\n\n<p>The system provides special ordering semantics for multiple oneway calls\nbeing made to the same IBinder object: these calls will be dispatched in the\nother process one at a time, with the same order as the original calls.  These\nare still dispatched by the IPC thread pool, so may execute on different threads,\nbut the next one will not be dispatched until the previous one completes.  This\nordering is not guaranteed for calls on different IBinder objects or when mixing\noneway and non-oneway calls on the same IBinder object.</p>\n\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-INTERFACE_TRANSACTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-property-INTERFACE_TRANSACTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-property-INTERFACE_TRANSACTION' class='name expandable'>INTERFACE_TRANSACTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>IBinder protocol transaction code: interrogate the recipient side\nof the transaction for its canonical interface desc...</div><div class='long'><p>IBinder protocol transaction code: interrogate the recipient side\nof the transaction for its canonical interface descriptor.</p>\n<p>Defaults to: <code>&quot;1598968902&quot;</code></p></div></div></div><div id='property-LAST_CALL_TRANSACTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-property-LAST_CALL_TRANSACTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-property-LAST_CALL_TRANSACTION' class='name expandable'>LAST_CALL_TRANSACTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The last transaction code available for user commands. ...</div><div class='long'><p>The last transaction code available for user commands.</p>\n<p>Defaults to: <code>&quot;16777215&quot;</code></p></div></div></div><div id='property-LIKE_TRANSACTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-property-LIKE_TRANSACTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-property-LIKE_TRANSACTION' class='name expandable'>LIKE_TRANSACTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>IBinder protocol transaction code: tell an app asynchronously that the\ncaller likes it. ...</div><div class='long'><p>IBinder protocol transaction code: tell an app asynchronously that the\ncaller likes it.  The app is responsible for incrementing and maintaining\nits own like counter, and may display this value to the user to indicate the\nquality of the app.  This is an optional command that applications do not\nneed to handle, so the default implementation is to do nothing.</p>\n\n<p><p>There is no response returned and nothing about the\nsystem will be functionally affected by it, but it will improve the\napp's self-esteem.</p>\n<p>Defaults to: <code>&quot;1598835019&quot;</code></p></div></div></div><div id='property-PING_TRANSACTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-property-PING_TRANSACTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-property-PING_TRANSACTION' class='name expandable'>PING_TRANSACTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>IBinder protocol transaction code: pingBinder(). ...</div><div class='long'><p>IBinder protocol transaction code: pingBinder().</p>\n<p>Defaults to: <code>&quot;1599098439&quot;</code></p></div></div></div><div id='property-TWEET_TRANSACTION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-property-TWEET_TRANSACTION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-property-TWEET_TRANSACTION' class='name expandable'>TWEET_TRANSACTION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>IBinder protocol transaction code: send a tweet to the target\nobject. ...</div><div class='long'><p>IBinder protocol transaction code: send a tweet to the target\nobject.  The data in the parcel is intended to be delivered to\na shared messaging service associated with the object; it can be\nanything, as long as it is not more than 130 UTF-8 characters to\nconservatively fit within common messaging services.  As part of\n<a href=\"#!/api/android.os.Build.VERSION_CODES-property-HONEYCOMB_MR2\" rel=\"android.os.Build.VERSION_CODES-property-HONEYCOMB_MR2\" class=\"docClass\">android.os.Build.VERSION_CODES.HONEYCOMB_MR2</a>, all Binder objects are\nexpected to support this protocol for fully integrated tweeting\nacross the platform.  To support older code, the default implementation\nlogs the tweet to the main log as a simple emulation of broadcasting\nit publicly over the Internet.</p>\n\n<p><p>Also, upon completing the dispatch, the object must make a cup\nof tea, return it to the caller, and exclaim \"jolly good message\nold boy!\".</p>\n<p>Defaults to: <code>&quot;1599362900&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-dump' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-dump' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-dump' class='name expandable'>dump</a>( <span class='pre'>fd, args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Print the object's state into the given stream. ...</div><div class='long'><p>Print the object's state into the given stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fd</span> : Object {FileDescriptor}<div class='sub-desc'><p>The raw file descriptor that the dump is being sent to.</p>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.String[]}<div class='sub-desc'><p>additional arguments to the dump request.</p>\n</div></li></ul></div></div></div><div id='method-dumpAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-dumpAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-dumpAsync' class='name expandable'>dumpAsync</a>( <span class='pre'>fd, args</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Like String[]) but always executes\n asynchronously. ...</div><div class='long'><p>Like String[]) but always executes\n asynchronously.  If the object is local, a new thread is created\n to perform the dump.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fd</span> : Object {FileDescriptor}<div class='sub-desc'><p>The raw file descriptor that the dump is being sent to.</p>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.String[]}<div class='sub-desc'><p>additional arguments to the dump request.</p>\n</div></li></ul></div></div></div><div id='method-getInterfaceDescriptor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-getInterfaceDescriptor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-getInterfaceDescriptor' class='name expandable'>getInterfaceDescriptor</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the canonical name of the interface supported by this binder. ...</div><div class='long'><p>Get the canonical name of the interface supported by this binder.</p>\n</div></div></div><div id='method-isBinderAlive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-isBinderAlive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-isBinderAlive' class='name expandable'>isBinderAlive</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Check to see if the process that the binder is in is still alive. ...</div><div class='long'><p>Check to see if the process that the binder is in is still alive.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>false if the process is not alive.  Note that if it returns\n true, the process may have died while the call is returning.</p>\n</div></li></ul></div></div></div><div id='method-linkToDeath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-linkToDeath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-linkToDeath' class='name expandable'>linkToDeath</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register the recipient for a notification if this binder\n goes away. ...</div><div class='long'><p>Register the recipient for a notification if this binder\n goes away.  If this binder object unexpectedly goes away\n (typically because its hosting process has been killed),\n then the given <a href=\"#!/api/android.os.IBinder.DeathRecipient\" rel=\"android.os.IBinder.DeathRecipient\" class=\"docClass\">android.os.IBinder.DeathRecipient</a>'s\n <a href=\"#!/api/android.os.IBinder.DeathRecipient-method-binderDied\" rel=\"android.os.IBinder.DeathRecipient-method-binderDied\" class=\"docClass\">android.os.IBinder.DeathRecipient.binderDied()</a> method\n will be called.</p>\n\n<p> <p>You will only receive death notifications for remote binders,\n as local binders by definition can't die without you dying as well.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>RemoteException if the target IBinder's\n process has already died.\n@see <a href=\"#!/api/android.os.IBinder-method-unlinkToDeath\" rel=\"android.os.IBinder-method-unlinkToDeath\" class=\"docClass\">unlinkToDeath</a></p>\n</div></li></ul></div></div></div><div id='method-pingBinder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-pingBinder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-pingBinder' class='name expandable'>pingBinder</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Check to see if the object still exists. ...</div><div class='long'><p>Check to see if the object still exists.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns false if the\n hosting process is gone, otherwise the result (always by default\n true) returned by the pingBinder() implementation on the other\n side.</p>\n</div></li></ul></div></div></div><div id='method-queryLocalInterface' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-queryLocalInterface' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-queryLocalInterface' class='name expandable'>queryLocalInterface</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Attempt to retrieve a local implementation of an interface\n for this Binder object. ...</div><div class='long'><p>Attempt to retrieve a local implementation of an interface\n for this Binder object.  If null is returned, you will need\n to instantiate a proxy class to marshall calls through\n the transact() method.</p>\n</div></div></div><div id='method-transact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-transact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-transact' class='name expandable'>transact</a>( <span class='pre'>code, data, reply, flags</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Perform a generic operation with the object. ...</div><div class='long'><p>Perform a generic operation with the object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>code</span> : Number<div class='sub-desc'><p>The action to perform.  This should\n be a number between <a href=\"#!/api/android.os.IBinder-property-FIRST_CALL_TRANSACTION\" rel=\"android.os.IBinder-property-FIRST_CALL_TRANSACTION\" class=\"docClass\">FIRST_CALL_TRANSACTION</a> and\n <a href=\"#!/api/android.os.IBinder-property-LAST_CALL_TRANSACTION\" rel=\"android.os.IBinder-property-LAST_CALL_TRANSACTION\" class=\"docClass\">LAST_CALL_TRANSACTION</a>.</p>\n</div></li><li><span class='pre'>data</span> : Object {Parcel}<div class='sub-desc'><p>Marshalled data to send to the target.  Must not be null.\n If you are not sending any data, you must create an empty Parcel\n that is given here.</p>\n</div></li><li><span class='pre'>reply</span> : Object {Parcel}<div class='sub-desc'><p>Marshalled data to be received from the target.  May be\n null if you are not interested in the return value.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Additional operation flags.  Either 0 for a normal\n RPC, or <a href=\"#!/api/android.os.IBinder-property-FLAG_ONEWAY\" rel=\"android.os.IBinder-property-FLAG_ONEWAY\" class=\"docClass\">FLAG_ONEWAY</a> for a one-way RPC.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns the result from Binder.onTransact.  A successful call\n generally returns true; false generally means the transaction code was not\n understood.</p>\n</div></li></ul></div></div></div><div id='method-unlinkToDeath' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.IBinder'>android.os.IBinder</span><br/><a href='source/IBinder.html#android-os-IBinder-method-unlinkToDeath' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.IBinder-method-unlinkToDeath' class='name expandable'>unlinkToDeath</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Remove a previously registered death notification. ...</div><div class='long'><p>Remove a previously registered death notification.\n The recipient will no longer be called if this object\n dies.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the <var>recipient</var> is successfully\n unlinked, assuring you that its\n DeathRecipient.binderDied() method\n will not be called;  {@code false} if the target IBinder has already\n died, meaning the method has been (or soon will be) called.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>java.util.NoSuchElementException if the given\n <var>recipient</var> has not been registered with the IBinder, and\n the IBinder is still alive.  Note that if the <var>recipient</var>\n was never registered, but the IBinder has already died, then this\n exception will <em>not</em> be thrown, and you will receive a false\n return value instead.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});