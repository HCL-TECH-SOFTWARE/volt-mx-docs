Ext.data.JsonP.android_os_HandlerThread({"tagname":"class","name":"android.os.HandlerThread","autodetected":{},"files":[{"filename":"HandlerThread.js","href":"HandlerThread.html#android-os-HandlerThread"}],"extends":"java.lang.Thread","members":[{"name":"getLooper","tagname":"method","owner":"android.os.HandlerThread","id":"method-getLooper","meta":{}},{"name":"getThreadId","tagname":"method","owner":"android.os.HandlerThread","id":"method-getThreadId","meta":{}},{"name":"quit","tagname":"method","owner":"android.os.HandlerThread","id":"method-quit","meta":{}},{"name":"quitSafely","tagname":"method","owner":"android.os.HandlerThread","id":"method-quitSafely","meta":{}},{"name":"run","tagname":"method","owner":"android.os.HandlerThread","id":"method-run","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.os.HandlerThread","short_doc":"A Thread that has a android.os.Looper. ...","classIcon":"icon-class","superclasses":["java.lang.Thread"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Thread<div class='subclass '><strong>android.os.HandlerThread</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/HandlerThread.html#android-os-HandlerThread' target='_blank'>HandlerThread.js</a></div></pre><div class='doc-contents'><p>A Thread that has a <a href=\"#!/api/android.os.Looper\" rel=\"android.os.Looper\" class=\"docClass\">android.os.Looper</a>.\n The <a href=\"#!/api/android.os.Looper\" rel=\"android.os.Looper\" class=\"docClass\">android.os.Looper</a> can then be used to create <a href=\"#!/api/android.os.Handler\" rel=\"android.os.Handler\" class=\"docClass\">android.os.Handler</a>s.\n <p>\n Note that just like with a regular Thread, start() must still be called.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getLooper' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.HandlerThread'>android.os.HandlerThread</span><br/><a href='source/HandlerThread.html#android-os-HandlerThread-method-getLooper' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.HandlerThread-method-getLooper' class='name expandable'>getLooper</a>( <span class='pre'></span> ) : Object {android.os.Looper}<span class=\"signature\"></span></div><div class='description'><div class='short'>This method returns the Looper associated with this thread. ...</div><div class='long'><p>This method returns the Looper associated with this thread. If this thread not been started\n or for any reason isAlive() returns false, this method will return null. If this thread\n has been started, this method will block until the looper has been initialized.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.Looper}</span><div class='sub-desc'><p>The looper.</p>\n</div></li></ul></div></div></div><div id='method-getThreadId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.HandlerThread'>android.os.HandlerThread</span><br/><a href='source/HandlerThread.html#android-os-HandlerThread-method-getThreadId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.HandlerThread-method-getThreadId' class='name expandable'>getThreadId</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the identifier of this thread. ...</div><div class='long'><p>Returns the identifier of this thread. See Process.myTid().</p>\n</div></div></div><div id='method-quit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.HandlerThread'>android.os.HandlerThread</span><br/><a href='source/HandlerThread.html#android-os-HandlerThread-method-quit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.HandlerThread-method-quit' class='name expandable'>quit</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Quits the handler thread's looper. ...</div><div class='long'><p>Quits the handler thread's looper.\n <p>\n Causes the handler thread's looper to terminate without processing any\n more messages in the message queue.\n </p><p>\n Any attempt to post messages to the queue after the looper is asked to quit will fail.\n For example, the android.os.Handler.sendMessage(Message) method will return false.\n </p><p class=\"note\">\n Using this method may be unsafe because some messages may not be delivered\n before the looper terminates.  Consider using <a href=\"#!/api/android.os.HandlerThread-method-quitSafely\" rel=\"android.os.HandlerThread-method-quitSafely\" class=\"docClass\">quitSafely</a> instead to ensure\n that all pending work is completed in an orderly manner.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the looper looper has been asked to quit or false if the\n thread had not yet started running.\n@see <a href=\"#!/api/android.os.HandlerThread-method-quitSafely\" rel=\"android.os.HandlerThread-method-quitSafely\" class=\"docClass\">quitSafely</a></p>\n</div></li></ul></div></div></div><div id='method-quitSafely' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.HandlerThread'>android.os.HandlerThread</span><br/><a href='source/HandlerThread.html#android-os-HandlerThread-method-quitSafely' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.HandlerThread-method-quitSafely' class='name expandable'>quitSafely</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Quits the handler thread's looper safely. ...</div><div class='long'><p>Quits the handler thread's looper safely.\n <p>\n Causes the handler thread's looper to terminate as soon as all remaining messages\n in the message queue that are already due to be delivered have been handled.\n Pending delayed messages with due times in the future will not be delivered.\n </p><p>\n Any attempt to post messages to the queue after the looper is asked to quit will fail.\n For example, the android.os.Handler.sendMessage(Message) method will return false.\n </p><p>\n If the thread has not been started or has finished (that is if\n <a href=\"#!/api/android.os.HandlerThread-method-getLooper\" rel=\"android.os.HandlerThread-method-getLooper\" class=\"docClass\">getLooper</a> returns null), then false is returned.\n Otherwise the looper is asked to quit and true is returned.\n </p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the looper looper has been asked to quit or false if the\n thread had not yet started running.</p>\n</div></li></ul></div></div></div><div id='method-run' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.os.HandlerThread'>android.os.HandlerThread</span><br/><a href='source/HandlerThread.html#android-os-HandlerThread-method-run' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.os.HandlerThread-method-run' class='name expandable'>run</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});