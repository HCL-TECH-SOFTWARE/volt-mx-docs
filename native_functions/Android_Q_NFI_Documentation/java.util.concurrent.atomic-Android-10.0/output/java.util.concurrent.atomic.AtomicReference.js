Ext.data.JsonP.java_util_concurrent_atomic_AtomicReference({"tagname":"class","name":"java.util.concurrent.atomic.AtomicReference","autodetected":{},"files":[{"filename":"AtomicReference.js","href":"AtomicReference.html#java-util-concurrent-atomic-AtomicReference"}],"extends":"java.lang.Object","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><V> The type of object referred to by this reference</V></p>\n"}],"members":[{"name":"accumulateAndGet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-accumulateAndGet","meta":{}},{"name":"compareAndSet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-compareAndSet","meta":{}},{"name":"get","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-get","meta":{}},{"name":"getAndAccumulate","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-getAndAccumulate","meta":{}},{"name":"getAndSet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-getAndSet","meta":{}},{"name":"getAndUpdate","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-getAndUpdate","meta":{}},{"name":"lazySet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-lazySet","meta":{}},{"name":"set","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-set","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-toString","meta":{}},{"name":"updateAndGet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-updateAndGet","meta":{}},{"name":"weakCompareAndSet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReference","id":"method-weakCompareAndSet","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.atomic.AtomicReference","short_doc":"implements java.io.Serializable\n\nAn object reference that may be updated atomically. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.atomic.AtomicReference</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference' target='_blank'>AtomicReference.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p>An object reference that may be updated atomically. See the java.util.concurrent.atomic package specification for description\n of the properties of atomic variables.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><V> The type of object referred to by this reference</V></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-accumulateAndGet' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-accumulateAndGet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-accumulateAndGet' class='name expandable'>accumulateAndGet</a>( <span class='pre'>x, accumulatorFunction</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically updates the current value with the results of\n applying the given function to the current and given values...</div><div class='long'><p>Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the updated value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function\n is applied with the current value as its first argument,\n and the given update as the second argument.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Object {Object}<div class='sub-desc'><p>the update value</p>\n</div></li><li><span class='pre'>accumulatorFunction</span> : Object {java.util.function.BinaryOperator}<div class='sub-desc'><p>a side-effect-free function of two arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the updated value</p>\n</div></li></ul></div></div></div><div id='method-compareAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-compareAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-compareAndSet' class='name expandable'>compareAndSet</a>( <span class='pre'>expect, update</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value. ...</div><div class='long'><p>Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expect</span> : Object {Object}<div class='sub-desc'><p>the expected value</p>\n</div></li><li><span class='pre'>update</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful. False return indicates that\n the actual value was not equal to the expected value.</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-get' class='name expandable'>get</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current value. ...</div><div class='long'><p>Gets the current value.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the current value</p>\n</div></li></ul></div></div></div><div id='method-getAndAccumulate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-getAndAccumulate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-getAndAccumulate' class='name expandable'>getAndAccumulate</a>( <span class='pre'>x, accumulatorFunction</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically updates the current value with the results of\n applying the given function to the current and given values...</div><div class='long'><p>Atomically updates the current value with the results of\n applying the given function to the current and given values,\n returning the previous value. The function should be\n side-effect-free, since it may be re-applied when attempted\n updates fail due to contention among threads.  The function\n is applied with the current value as its first argument,\n and the given update as the second argument.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Object {Object}<div class='sub-desc'><p>the update value</p>\n</div></li><li><span class='pre'>accumulatorFunction</span> : Object {java.util.function.BinaryOperator}<div class='sub-desc'><p>a side-effect-free function of two arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the previous value</p>\n</div></li></ul></div></div></div><div id='method-getAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-getAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-getAndSet' class='name expandable'>getAndSet</a>( <span class='pre'>newValue</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets to the given value and returns the old value. ...</div><div class='long'><p>Atomically sets to the given value and returns the old value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newValue</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the previous value</p>\n</div></li></ul></div></div></div><div id='method-getAndUpdate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-getAndUpdate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-getAndUpdate' class='name expandable'>getAndUpdate</a>( <span class='pre'>updateFunction</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically updates the current value with the results of\n applying the given function, returning the previous value. ...</div><div class='long'><p>Atomically updates the current value with the results of\n applying the given function, returning the previous value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>updateFunction</span> : Object {java.util.function.UnaryOperator}<div class='sub-desc'><p>a side-effect-free function</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the previous value</p>\n</div></li></ul></div></div></div><div id='method-lazySet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-lazySet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-lazySet' class='name expandable'>lazySet</a>( <span class='pre'>newValue</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Eventually sets to the given value. ...</div><div class='long'><p>Eventually sets to the given value.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newValue</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul></div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-set' class='name expandable'>set</a>( <span class='pre'>newValue</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets to the given value. ...</div><div class='long'><p>Sets to the given value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newValue</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the String representation of the current value. ...</div><div class='long'><p>Returns the String representation of the current value.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the String representation of the current value</p>\n</div></li></ul></div></div></div><div id='method-updateAndGet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-updateAndGet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-updateAndGet' class='name expandable'>updateAndGet</a>( <span class='pre'>updateFunction</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically updates the current value with the results of\n applying the given function, returning the updated value. ...</div><div class='long'><p>Atomically updates the current value with the results of\n applying the given function, returning the updated value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>updateFunction</span> : Object {java.util.function.UnaryOperator}<div class='sub-desc'><p>a side-effect-free function</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the updated value</p>\n</div></li></ul></div></div></div><div id='method-weakCompareAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReference'>java.util.concurrent.atomic.AtomicReference</span><br/><a href='source/AtomicReference.html#java-util-concurrent-atomic-AtomicReference-method-weakCompareAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReference-method-weakCompareAndSet' class='name expandable'>weakCompareAndSet</a>( <span class='pre'>expect, update</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value. ...</div><div class='long'><p>Atomically sets the value to the given updated value\n if the current value {@code ==} the expected value.</p>\n\n<p> <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n spuriously and does not provide ordering guarantees</a>, so is\n only rarely an appropriate alternative to {@code compareAndSet}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expect</span> : Object {Object}<div class='sub-desc'><p>the expected value</p>\n</div></li><li><span class='pre'>update</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});