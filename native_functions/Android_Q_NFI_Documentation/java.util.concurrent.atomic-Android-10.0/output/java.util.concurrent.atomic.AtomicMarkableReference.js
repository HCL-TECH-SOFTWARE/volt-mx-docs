Ext.data.JsonP.java_util_concurrent_atomic_AtomicMarkableReference({"tagname":"class","name":"java.util.concurrent.atomic.AtomicMarkableReference","autodetected":{},"files":[{"filename":"AtomicMarkableReference.js","href":"AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference"}],"extends":"java.lang.Object","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><V> The type of object referred to by this reference</V></p>\n"}],"members":[{"name":"attemptMark","tagname":"method","owner":"java.util.concurrent.atomic.AtomicMarkableReference","id":"method-attemptMark","meta":{}},{"name":"compareAndSet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicMarkableReference","id":"method-compareAndSet","meta":{}},{"name":"get","tagname":"method","owner":"java.util.concurrent.atomic.AtomicMarkableReference","id":"method-get","meta":{}},{"name":"getReference","tagname":"method","owner":"java.util.concurrent.atomic.AtomicMarkableReference","id":"method-getReference","meta":{}},{"name":"isMarked","tagname":"method","owner":"java.util.concurrent.atomic.AtomicMarkableReference","id":"method-isMarked","meta":{}},{"name":"set","tagname":"method","owner":"java.util.concurrent.atomic.AtomicMarkableReference","id":"method-set","meta":{}},{"name":"weakCompareAndSet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicMarkableReference","id":"method-weakCompareAndSet","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.atomic.AtomicMarkableReference","short_doc":"An {@code AtomicMarkableReference} maintains an object reference\n along with a mark bit, that can be updated atomically. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.atomic.AtomicMarkableReference</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference' target='_blank'>AtomicMarkableReference.js</a></div></pre><div class='doc-contents'><p>An {@code AtomicMarkableReference} maintains an object reference\n along with a mark bit, that can be updated atomically.</p>\n\n<p> <p>Implementation note: This implementation maintains markable\n references by creating internal objects representing \"boxed\"\n [reference, boolean] pairs.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><V> The type of object referred to by this reference</V></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-attemptMark' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicMarkableReference'>java.util.concurrent.atomic.AtomicMarkableReference</span><br/><a href='source/AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference-method-attemptMark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicMarkableReference-method-attemptMark' class='name expandable'>attemptMark</a>( <span class='pre'>expectedReference, newMark</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of the mark to the given update value\n if the current reference is {@code ==} to the expect...</div><div class='long'><p>Atomically sets the value of the mark to the given update value\n if the current reference is {@code ==} to the expected\n reference.  Any given invocation of this operation may fail\n (return {@code false}) spuriously, but repeated invocation\n when the current value holds the expected value and no other\n thread is also attempting to set the value will eventually\n succeed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expectedReference</span> : Object {Object}<div class='sub-desc'><p>the expected value of the reference</p>\n</div></li><li><span class='pre'>newMark</span> : Boolean<div class='sub-desc'><p>the new value for the mark</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful</p>\n</div></li></ul></div></div></div><div id='method-compareAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicMarkableReference'>java.util.concurrent.atomic.AtomicMarkableReference</span><br/><a href='source/AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference-method-compareAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicMarkableReference-method-compareAndSet' class='name expandable'>compareAndSet</a>( <span class='pre'>expectedReference, newReference, expectedMark, newMark</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is {@c...</div><div class='long'><p>Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is {@code ==} to the expected reference\n and the current mark is equal to the expected mark.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expectedReference</span> : Object {Object}<div class='sub-desc'><p>the expected value of the reference</p>\n</div></li><li><span class='pre'>newReference</span> : Object {Object}<div class='sub-desc'><p>the new value for the reference</p>\n</div></li><li><span class='pre'>expectedMark</span> : Boolean<div class='sub-desc'><p>the expected value of the mark</p>\n</div></li><li><span class='pre'>newMark</span> : Boolean<div class='sub-desc'><p>the new value for the mark</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicMarkableReference'>java.util.concurrent.atomic.AtomicMarkableReference</span><br/><a href='source/AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicMarkableReference-method-get' class='name expandable'>get</a>( <span class='pre'>markHolder</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current values of both the reference and the mark. ...</div><div class='long'><p>Returns the current values of both the reference and the mark.\n Typical usage is {@code boolean[1] holder; ref = v.get(holder); }.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>markHolder</span> : Object {boolean[]}<div class='sub-desc'><p>an array of size of at least one. On return,\n {@code markHolder[0]} will hold the value of the mark.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the current value of the reference</p>\n</div></li></ul></div></div></div><div id='method-getReference' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicMarkableReference'>java.util.concurrent.atomic.AtomicMarkableReference</span><br/><a href='source/AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference-method-getReference' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicMarkableReference-method-getReference' class='name expandable'>getReference</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current value of the reference. ...</div><div class='long'><p>Returns the current value of the reference.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the current value of the reference</p>\n</div></li></ul></div></div></div><div id='method-isMarked' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicMarkableReference'>java.util.concurrent.atomic.AtomicMarkableReference</span><br/><a href='source/AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference-method-isMarked' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicMarkableReference-method-isMarked' class='name expandable'>isMarked</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current value of the mark. ...</div><div class='long'><p>Returns the current value of the mark.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the current value of the mark</p>\n</div></li></ul></div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicMarkableReference'>java.util.concurrent.atomic.AtomicMarkableReference</span><br/><a href='source/AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicMarkableReference-method-set' class='name expandable'>set</a>( <span class='pre'>newReference, newMark</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Unconditionally sets the value of both the reference and mark. ...</div><div class='long'><p>Unconditionally sets the value of both the reference and mark.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newReference</span> : Object {Object}<div class='sub-desc'><p>the new value for the reference</p>\n</div></li><li><span class='pre'>newMark</span> : Boolean<div class='sub-desc'><p>the new value for the mark</p>\n</div></li></ul></div></div></div><div id='method-weakCompareAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicMarkableReference'>java.util.concurrent.atomic.AtomicMarkableReference</span><br/><a href='source/AtomicMarkableReference.html#java-util-concurrent-atomic-AtomicMarkableReference-method-weakCompareAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicMarkableReference-method-weakCompareAndSet' class='name expandable'>weakCompareAndSet</a>( <span class='pre'>expectedReference, newReference, expectedMark, newMark</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is {@c...</div><div class='long'><p>Atomically sets the value of both the reference and mark\n to the given update values if the\n current reference is {@code ==} to the expected reference\n and the current mark is equal to the expected mark.</p>\n\n<p> <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n spuriously and does not provide ordering guarantees</a>, so is\n only rarely an appropriate alternative to {@code compareAndSet}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>expectedReference</span> : Object {Object}<div class='sub-desc'><p>the expected value of the reference</p>\n</div></li><li><span class='pre'>newReference</span> : Object {Object}<div class='sub-desc'><p>the new value for the reference</p>\n</div></li><li><span class='pre'>expectedMark</span> : Boolean<div class='sub-desc'><p>the expected value of the mark</p>\n</div></li><li><span class='pre'>newMark</span> : Boolean<div class='sub-desc'><p>the new value for the mark</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});