Ext.data.JsonP.java_util_concurrent_atomic_LongAccumulator({"tagname":"class","name":"java.util.concurrent.atomic.LongAccumulator","autodetected":{},"files":[{"filename":"LongAccumulator.js","href":"LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator"}],"extends":"java.util.concurrent.atomic.Striped64","since":"1.8","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"accumulate","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-accumulate","meta":{}},{"name":"doubleValue","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-doubleValue","meta":{}},{"name":"floatValue","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-floatValue","meta":{}},{"name":"get","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-get","meta":{}},{"name":"getThenReset","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-getThenReset","meta":{}},{"name":"intValue","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-intValue","meta":{}},{"name":"longValue","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-longValue","meta":{}},{"name":"reset","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-reset","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.atomic.LongAccumulator","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.atomic.LongAccumulator","short_doc":"implements java.io.Serializable\n\nOne or more variables that together maintain a running {@code long}\n value updated u...","classIcon":"icon-class","superclasses":["java.util.concurrent.atomic.Striped64"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.util.concurrent.atomic.Striped64<div class='subclass '><strong>java.util.concurrent.atomic.LongAccumulator</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator' target='_blank'>LongAccumulator.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p>One or more variables that together maintain a running {@code long}\n value updated using a supplied function.  When updates (method\n <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-accumulate\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-accumulate\" class=\"docClass\">accumulate</a>) are contended across threads, the set of variables\n may grow dynamically to reduce contention.  Method <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-get\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-get\" class=\"docClass\">get</a>\n (or, equivalently, <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-longValue\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-longValue\" class=\"docClass\">longValue</a>) returns the current value\n across the variables maintaining updates.</p>\n\n<p> <p>This class is usually preferable to <a href=\"#!/api/java.util.concurrent.atomic.AtomicLong\" rel=\"java.util.concurrent.atomic.AtomicLong\" class=\"docClass\">java.util.concurrent.atomic.AtomicLong</a> when\n multiple threads update a common value that is used for purposes such\n as collecting statistics, not for fine-grained synchronization\n control.  Under low update contention, the two classes have similar\n characteristics. But under high contention, expected throughput of\n this class is significantly higher, at the expense of higher space\n consumption.</p>\n\n<p> <p>The order of accumulation within or across threads is not\n guaranteed and cannot be depended upon, so this class is only\n applicable to functions for which the order of accumulation does\n not matter. The supplied accumulator function should be\n side-effect-free, since it may be re-applied when attempted updates\n fail due to contention among threads. The function is applied with\n the current value as its first argument, and the given update as\n the second argument.  For example, to maintain a running maximum\n value, you could supply {@code Long::max} along with {@code\n Long.MIN_VALUE} as the identity.</p>\n\n<p> <p>Class <a href=\"#!/api/java.util.concurrent.atomic.LongAdder\" rel=\"java.util.concurrent.atomic.LongAdder\" class=\"docClass\">java.util.concurrent.atomic.LongAdder</a> provides analogs of the functionality of\n this class for the common special case of maintaining counts and\n sums.  The call {@code new LongAdder()} is equivalent to {@code new\n LongAccumulator((x, y) -> x + y, 0L}.</p>\n\n<p> <p>This class extends Number, but does <em>not</em> define\n methods such as {@code equals}, {@code hashCode} and {@code\n compareTo} because instances are expected to be mutated, and so are\n not useful as collection keys.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-accumulate' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-accumulate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-accumulate' class='name expandable'>accumulate</a>( <span class='pre'>x</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Updates with the given value. ...</div><div class='long'><p>Updates with the given value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the value</p>\n</div></li></ul></div></div></div><div id='method-doubleValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-doubleValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-doubleValue' class='name expandable'>doubleValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the {@linkplain get current value} as a {@code double}\n after a widening primitive conversion. ...</div><div class='long'><p>Returns the {@linkplain <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-get\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-get\" class=\"docClass\">get</a> current value} as a {@code double}\n after a widening primitive conversion.</p>\n</div></div></div><div id='method-floatValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-floatValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-floatValue' class='name expandable'>floatValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the {@linkplain get current value} as a {@code float}\n after a widening primitive conversion. ...</div><div class='long'><p>Returns the {@linkplain <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-get\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-get\" class=\"docClass\">get</a> current value} as a {@code float}\n after a widening primitive conversion.</p>\n</div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-get' class='name expandable'>get</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current value. ...</div><div class='long'><p>Returns the current value.  The returned value is <em>NOT</em>\n an atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the value is being calculated might not be\n incorporated.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current value</p>\n</div></li></ul></div></div></div><div id='method-getThenReset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-getThenReset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-getThenReset' class='name expandable'>getThenReset</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent in effect to get followed by reset. ...</div><div class='long'><p>Equivalent in effect to <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-get\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-get\" class=\"docClass\">get</a> followed by <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-reset\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-reset\" class=\"docClass\">reset</a>. This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n <em>not</em> guaranteed to be the final value occurring before\n the reset.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value before reset</p>\n</div></li></ul></div></div></div><div id='method-intValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-intValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-intValue' class='name expandable'>intValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the {@linkplain get current value} as an {@code int}\n after a narrowing primitive conversion. ...</div><div class='long'><p>Returns the {@linkplain <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-get\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-get\" class=\"docClass\">get</a> current value} as an {@code int}\n after a narrowing primitive conversion.</p>\n</div></div></div><div id='method-longValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-longValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-longValue' class='name expandable'>longValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent to get. ...</div><div class='long'><p>Equivalent to <a href=\"#!/api/java.util.concurrent.atomic.LongAccumulator-method-get\" rel=\"java.util.concurrent.atomic.LongAccumulator-method-get\" class=\"docClass\">get</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current value</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets variables maintaining updates to the identity value. ...</div><div class='long'><p>Resets variables maintaining updates to the identity value.\n This method may be a useful alternative to creating a new\n updater, but is only effective if there are no concurrent\n updates.  Because this method is intrinsically racy, it should\n only be used when it is known that no threads are concurrently\n updating.</p>\n</div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAccumulator'>java.util.concurrent.atomic.LongAccumulator</span><br/><a href='source/LongAccumulator.html#java-util-concurrent-atomic-LongAccumulator-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAccumulator-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the String representation of the current value. ...</div><div class='long'><p>Returns the String representation of the current value.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the String representation of the current value</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});