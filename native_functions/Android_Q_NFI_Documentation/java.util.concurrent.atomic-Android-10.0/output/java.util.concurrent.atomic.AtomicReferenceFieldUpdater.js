Ext.data.JsonP.java_util_concurrent_atomic_AtomicReferenceFieldUpdater({"tagname":"class","name":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","autodetected":{},"files":[{"filename":"AtomicReferenceFieldUpdater.js","href":"AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater"}],"extends":"java.lang.Object","since":"1.5","author":[{"tagname":"author","name":"Doug Lea","email":null}],"params":[{"tagname":"params","doc":"<p><T> The type of the object holding the updatable field</T></p>\n"},{"tagname":"params","doc":"<p><V> The type of the field</V></p>\n"}],"members":[{"name":"accumulateAndGet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-accumulateAndGet","meta":{}},{"name":"compareAndSet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-compareAndSet","meta":{}},{"name":"get","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-get","meta":{}},{"name":"getAndAccumulate","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-getAndAccumulate","meta":{}},{"name":"getAndSet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-getAndSet","meta":{}},{"name":"getAndUpdate","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-getAndUpdate","meta":{}},{"name":"lazySet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-lazySet","meta":{}},{"name":"newUpdater","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-newUpdater","meta":{}},{"name":"set","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-set","meta":{}},{"name":"updateAndGet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-updateAndGet","meta":{}},{"name":"weakCompareAndSet","tagname":"method","owner":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","id":"method-weakCompareAndSet","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.atomic.AtomicReferenceFieldUpdater","short_doc":"A reflection-based utility that enables atomic updates to\n designated {@code volatile} reference fields of designated...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater' target='_blank'>AtomicReferenceFieldUpdater.js</a></div></pre><div class='doc-contents'><p>A reflection-based utility that enables atomic updates to\n designated {@code volatile} reference fields of designated\n classes.  This class is designed for use in atomic data structures\n in which several reference fields of the same node are\n independently subject to atomic updates. For example, a tree node\n might be declared as</p>\n\n<p> <pre> {@code\n class Node {\n   private volatile Node left, right;</pre></p>\n\n<p>   private static final AtomicReferenceFieldUpdater&lt;Node, Node> leftUpdater =\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"left\");\n   private static AtomicReferenceFieldUpdater&lt;Node, Node> rightUpdater =\n     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"right\");</p>\n\n<p>   Node getLeft() { return left; }\n   boolean compareAndSetLeft(Node expect, Node update) {\n     return leftUpdater.compareAndSet(this, expect, update);\n   }\n   // ... and so on\n }}</p>\n\n<p> <p>Note that the guarantees of the {@code compareAndSet}\n method in this class are weaker than in other atomic classes.\n Because this class cannot ensure that all uses of the field\n are appropriate for purposes of atomic access, it can\n guarantee atomicity only with respect to other invocations of\n {@code compareAndSet} and {@code set} on the same updater.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> The type of the object holding the updatable field</T></p>\n</div></li><li><span class='pre'></span> : <div class='sub-desc'><p><V> The type of the field</V></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-accumulateAndGet' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-accumulateAndGet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-accumulateAndGet' class='name expandable'>accumulateAndGet</a>( <span class='pre'>obj, x, accumulatorFunction</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically updates the field of the given object managed by this\n updater with the results of applying the given func...</div><div class='long'><p>Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the updated value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.  The\n function is applied with the current value as its first argument,\n and the given update as the second argument.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to get and set</p>\n</div></li><li><span class='pre'>x</span> : Object {Object}<div class='sub-desc'><p>the update value</p>\n</div></li><li><span class='pre'>accumulatorFunction</span> : Object {java.util.function.BinaryOperator}<div class='sub-desc'><p>a side-effect-free function of two arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the updated value</p>\n</div></li></ul></div></div></div><div id='method-compareAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-compareAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-compareAndSet' class='name expandable'>compareAndSet</a>( <span class='pre'>obj, expect, update</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the field of the given object managed by this updater\n to the given updated value if the current valu...</div><div class='long'><p>Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to conditionally set</p>\n</div></li><li><span class='pre'>expect</span> : Object {Object}<div class='sub-desc'><p>the expected value</p>\n</div></li><li><span class='pre'>update</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-get' class='name expandable'>get</a>( <span class='pre'>obj</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the current value held in the field of the given object managed\n by this updater. ...</div><div class='long'><p>Gets the current value held in the field of the given object managed\n by this updater.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to get</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the current value</p>\n</div></li></ul></div></div></div><div id='method-getAndAccumulate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-getAndAccumulate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-getAndAccumulate' class='name expandable'>getAndAccumulate</a>( <span class='pre'>obj, x, accumulatorFunction</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically updates the field of the given object managed by this\n updater with the results of applying the given func...</div><div class='long'><p>Atomically updates the field of the given object managed by this\n updater with the results of applying the given function to the\n current and given values, returning the previous value. The\n function should be side-effect-free, since it may be re-applied\n when attempted updates fail due to contention among threads.  The\n function is applied with the current value as its first argument,\n and the given update as the second argument.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to get and set</p>\n</div></li><li><span class='pre'>x</span> : Object {Object}<div class='sub-desc'><p>the update value</p>\n</div></li><li><span class='pre'>accumulatorFunction</span> : Object {java.util.function.BinaryOperator}<div class='sub-desc'><p>a side-effect-free function of two arguments</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the previous value</p>\n</div></li></ul></div></div></div><div id='method-getAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-getAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-getAndSet' class='name expandable'>getAndSet</a>( <span class='pre'>obj, newValue</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value. ...</div><div class='long'><p>Atomically sets the field of the given object managed by this updater\n to the given value and returns the old value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to get and set</p>\n</div></li><li><span class='pre'>newValue</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the previous value</p>\n</div></li></ul></div></div></div><div id='method-getAndUpdate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-getAndUpdate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-getAndUpdate' class='name expandable'>getAndUpdate</a>( <span class='pre'>obj, updateFunction</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically updates the field of the given object managed by this updater\n with the results of applying the given func...</div><div class='long'><p>Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the previous\n value. The function should be side-effect-free, since it may be\n re-applied when attempted updates fail due to contention among threads.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to get and set</p>\n</div></li><li><span class='pre'>updateFunction</span> : Object {java.util.function.UnaryOperator}<div class='sub-desc'><p>a side-effect-free function</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the previous value</p>\n</div></li></ul></div></div></div><div id='method-lazySet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-lazySet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-lazySet' class='name expandable'>lazySet</a>( <span class='pre'>obj, newValue</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Eventually sets the field of the given object managed by this\n updater to the given updated value. ...</div><div class='long'><p>Eventually sets the field of the given object managed by this\n updater to the given updated value.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to set</p>\n</div></li><li><span class='pre'>newValue</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul></div></div></div><div id='method-newUpdater' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-newUpdater' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-newUpdater' class='name expandable'>newUpdater</a>( <span class='pre'>tclass, vclass, fieldName, , </span> ) : Object {java.util.concurrent.atomic.AtomicReferenceFieldUpdater}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates and returns an updater for objects with the given field. ...</div><div class='long'><p>Creates and returns an updater for objects with the given field.\n The Class arguments are needed to check that reflective types and\n generic types match.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tclass</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class of the objects holding the field</p>\n</div></li><li><span class='pre'>vclass</span> : Object {java.lang.Class}<div class='sub-desc'><p>the class of the field</p>\n</div></li><li><span class='pre'>fieldName</span> : String<div class='sub-desc'><p>the name of the field to be updated</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><U> the type of instances of tclass</U></p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><W> the type of instances of vclass</W></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.concurrent.atomic.AtomicReferenceFieldUpdater}</span><div class='sub-desc'><p>the updater</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the field is of the wrong type</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the field is not volatile</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>RuntimeException with a nested reflection-based\n exception if the class does not hold field or is the wrong type,\n or the field is inaccessible to the caller according to Java language\n access control</p>\n</div></li></ul></div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-set' class='name expandable'>set</a>( <span class='pre'>obj, newValue</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the field of the given object managed by this updater to the\n given updated value. ...</div><div class='long'><p>Sets the field of the given object managed by this updater to the\n given updated value. This operation is guaranteed to act as a volatile\n store with respect to subsequent invocations of {@code compareAndSet}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to set</p>\n</div></li><li><span class='pre'>newValue</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul></div></div></div><div id='method-updateAndGet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-updateAndGet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-updateAndGet' class='name expandable'>updateAndGet</a>( <span class='pre'>obj, updateFunction</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically updates the field of the given object managed by this updater\n with the results of applying the given func...</div><div class='long'><p>Atomically updates the field of the given object managed by this updater\n with the results of applying the given function, returning the updated\n value. The function should be side-effect-free, since it may be\n re-applied when attempted updates fail due to contention among threads.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to get and set</p>\n</div></li><li><span class='pre'>updateFunction</span> : Object {java.util.function.UnaryOperator}<div class='sub-desc'><p>a side-effect-free function</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the updated value</p>\n</div></li></ul></div></div></div><div id='method-weakCompareAndSet' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.AtomicReferenceFieldUpdater'>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</span><br/><a href='source/AtomicReferenceFieldUpdater.html#java-util-concurrent-atomic-AtomicReferenceFieldUpdater-method-weakCompareAndSet' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.AtomicReferenceFieldUpdater-method-weakCompareAndSet' class='name expandable'>weakCompareAndSet</a>( <span class='pre'>obj, expect, update</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Atomically sets the field of the given object managed by this updater\n to the given updated value if the current valu...</div><div class='long'><p>Atomically sets the field of the given object managed by this updater\n to the given updated value if the current value {@code ==} the\n expected value. This method is guaranteed to be atomic with respect to\n other calls to {@code compareAndSet} and {@code set}, but not\n necessarily with respect to other changes in the field.</p>\n\n<p> <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n spuriously and does not provide ordering guarantees</a>, so is\n only rarely an appropriate alternative to {@code compareAndSet}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>An object whose field to conditionally set</p>\n</div></li><li><span class='pre'>expect</span> : Object {Object}<div class='sub-desc'><p>the expected value</p>\n</div></li><li><span class='pre'>update</span> : Object {Object}<div class='sub-desc'><p>the new value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if successful</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});