Ext.data.JsonP.java_util_concurrent_atomic_LongAdder({"tagname":"class","name":"java.util.concurrent.atomic.LongAdder","autodetected":{},"files":[{"filename":"LongAdder.js","href":"LongAdder.html#java-util-concurrent-atomic-LongAdder"}],"extends":"java.util.concurrent.atomic.Striped64","since":"1.8","author":[{"tagname":"author","name":"Doug Lea","email":null}],"members":[{"name":"add","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-add","meta":{}},{"name":"decrement","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-decrement","meta":{}},{"name":"doubleValue","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-doubleValue","meta":{}},{"name":"floatValue","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-floatValue","meta":{}},{"name":"increment","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-increment","meta":{}},{"name":"intValue","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-intValue","meta":{}},{"name":"longValue","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-longValue","meta":{}},{"name":"reset","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-reset","meta":{}},{"name":"sum","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-sum","meta":{}},{"name":"sumThenReset","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-sumThenReset","meta":{}},{"name":"toString","tagname":"method","owner":"java.util.concurrent.atomic.LongAdder","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.util.concurrent.atomic.LongAdder","short_doc":"implements java.io.Serializable\n\nOne or more variables that together maintain an initially zero\n {@code long} sum. ...","classIcon":"icon-class","superclasses":["java.util.concurrent.atomic.Striped64"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.util.concurrent.atomic.Striped64<div class='subclass '><strong>java.util.concurrent.atomic.LongAdder</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder' target='_blank'>LongAdder.js</a></div></pre><div class='doc-contents'><p>implements java.io.Serializable</p>\n\n<p>One or more variables that together maintain an initially zero\n {@code long} sum.  When updates (method <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-add\" rel=\"java.util.concurrent.atomic.LongAdder-method-add\" class=\"docClass\">add</a>) are contended\n across threads, the set of variables may grow dynamically to reduce\n contention. Method <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-sum\" rel=\"java.util.concurrent.atomic.LongAdder-method-sum\" class=\"docClass\">sum</a> (or, equivalently, <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-longValue\" rel=\"java.util.concurrent.atomic.LongAdder-method-longValue\" class=\"docClass\">longValue</a>) returns the current total combined across the\n variables maintaining the sum.</p>\n\n<p> <p>This class is usually preferable to <a href=\"#!/api/java.util.concurrent.atomic.AtomicLong\" rel=\"java.util.concurrent.atomic.AtomicLong\" class=\"docClass\">java.util.concurrent.atomic.AtomicLong</a> when\n multiple threads update a common sum that is used for purposes such\n as collecting statistics, not for fine-grained synchronization\n control.  Under low update contention, the two classes have similar\n characteristics. But under high contention, expected throughput of\n this class is significantly higher, at the expense of higher space\n consumption.</p>\n\n<p> <p>LongAdders can be used with a java.util.concurrent.ConcurrentHashMap to maintain a scalable\n frequency map (a form of histogram or multiset). For example, to\n add a count to a {@code ConcurrentHashMap&lt;String,LongAdder> freqs},\n initializing if not already present, you can use {@code\n freqs.computeIfAbsent(key, k -> new LongAdder()).increment();}</p>\n\n<p> <p>This class extends Number, but does <em>not</em> define\n methods such as {@code equals}, {@code hashCode} and {@code\n compareTo} because instances are expected to be mutated, and so are\n not useful as collection keys.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-add' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-add' class='name expandable'>add</a>( <span class='pre'>x</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds the given value. ...</div><div class='long'><p>Adds the given value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the value to add</p>\n</div></li></ul></div></div></div><div id='method-decrement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-decrement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-decrement' class='name expandable'>decrement</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent to {@code add(-1)}. ...</div><div class='long'><p>Equivalent to {@code add(-1)}.</p>\n</div></div></div><div id='method-doubleValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-doubleValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-doubleValue' class='name expandable'>doubleValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the sum as a {@code double} after a widening\n primitive conversion. ...</div><div class='long'><p>Returns the <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-sum\" rel=\"java.util.concurrent.atomic.LongAdder-method-sum\" class=\"docClass\">sum</a> as a {@code double} after a widening\n primitive conversion.</p>\n</div></div></div><div id='method-floatValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-floatValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-floatValue' class='name expandable'>floatValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the sum as a {@code float}\n after a widening primitive conversion. ...</div><div class='long'><p>Returns the <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-sum\" rel=\"java.util.concurrent.atomic.LongAdder-method-sum\" class=\"docClass\">sum</a> as a {@code float}\n after a widening primitive conversion.</p>\n</div></div></div><div id='method-increment' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-increment' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-increment' class='name expandable'>increment</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent to {@code add(1)}. ...</div><div class='long'><p>Equivalent to {@code add(1)}.</p>\n</div></div></div><div id='method-intValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-intValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-intValue' class='name expandable'>intValue</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the sum as an {@code int} after a narrowing\n primitive conversion. ...</div><div class='long'><p>Returns the <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-sum\" rel=\"java.util.concurrent.atomic.LongAdder-method-sum\" class=\"docClass\">sum</a> as an {@code int} after a narrowing\n primitive conversion.</p>\n</div></div></div><div id='method-longValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-longValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-longValue' class='name expandable'>longValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent to sum. ...</div><div class='long'><p>Equivalent to <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-sum\" rel=\"java.util.concurrent.atomic.LongAdder-method-sum\" class=\"docClass\">sum</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the sum</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets variables maintaining the sum to zero. ...</div><div class='long'><p>Resets variables maintaining the sum to zero.  This method may\n be a useful alternative to creating a new adder, but is only\n effective if there are no concurrent updates.  Because this\n method is intrinsically racy, it should only be used when it is\n known that no threads are concurrently updating.</p>\n</div></div></div><div id='method-sum' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-sum' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-sum' class='name expandable'>sum</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current sum. ...</div><div class='long'><p>Returns the current sum.  The returned value is <em>NOT</em> an\n atomic snapshot; invocation in the absence of concurrent\n updates returns an accurate result, but concurrent updates that\n occur while the sum is being calculated might not be\n incorporated.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the sum</p>\n</div></li></ul></div></div></div><div id='method-sumThenReset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-sumThenReset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-sumThenReset' class='name expandable'>sumThenReset</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Equivalent in effect to sum followed by reset. ...</div><div class='long'><p>Equivalent in effect to <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-sum\" rel=\"java.util.concurrent.atomic.LongAdder-method-sum\" class=\"docClass\">sum</a> followed by <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-reset\" rel=\"java.util.concurrent.atomic.LongAdder-method-reset\" class=\"docClass\">reset</a>. This method may apply for example during quiescent\n points between multithreaded computations.  If there are\n updates concurrent with this method, the returned value is\n <em>not</em> guaranteed to be the final value occurring before\n the reset.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the sum</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.util.concurrent.atomic.LongAdder'>java.util.concurrent.atomic.LongAdder</span><br/><a href='source/LongAdder.html#java-util-concurrent-atomic-LongAdder-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.util.concurrent.atomic.LongAdder-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the String representation of the sum. ...</div><div class='long'><p>Returns the String representation of the <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-sum\" rel=\"java.util.concurrent.atomic.LongAdder-method-sum\" class=\"docClass\">sum</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the String representation of the <a href=\"#!/api/java.util.concurrent.atomic.LongAdder-method-sum\" rel=\"java.util.concurrent.atomic.LongAdder-method-sum\" class=\"docClass\">sum</a></p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});