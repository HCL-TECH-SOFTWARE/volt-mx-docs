Ext.data.JsonP.android_app_job_JobService({"tagname":"class","name":"android.app.job.JobService","autodetected":{},"files":[{"filename":"JobService.js","href":"JobService.html#android-app-job-JobService"}],"extends":"android.app.Service","members":[{"name":"PERMISSION_BIND","tagname":"property","owner":"android.app.job.JobService","id":"property-PERMISSION_BIND","meta":{}},{"name":"jobFinished","tagname":"method","owner":"android.app.job.JobService","id":"method-jobFinished","meta":{}},{"name":"onStartJob","tagname":"method","owner":"android.app.job.JobService","id":"method-onStartJob","meta":{}},{"name":"onStopJob","tagname":"method","owner":"android.app.job.JobService","id":"method-onStopJob","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.app.job.JobService","short_doc":"Entry point for the callback from the android.app.job.JobScheduler. ...","classIcon":"icon-class","superclasses":["android.app.Service"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>android.app.Service<div class='subclass '><strong>android.app.job.JobService</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/JobService.html#android-app-job-JobService' target='_blank'>JobService.js</a></div></pre><div class='doc-contents'><p>Entry point for the callback from the <a href=\"#!/api/android.app.job.JobScheduler\" rel=\"android.app.job.JobScheduler\" class=\"docClass\">android.app.job.JobScheduler</a>.</p>\n\n\n<p> <p>This is the base class that handles asynchronous requests that were previously scheduled. You\n are responsible for overriding onStartJob(JobParameters), which is where\n you will implement your job logic.</p>\n <p>This service executes each incoming job on a android.os.Handler running on your\n application's main thread. This means that you <b>must</b> offload your execution logic to\n another thread/handler/android.os.AsyncTask of your choosing. Not doing so will result\n in blocking any future callbacks from the JobManager - specifically\n onStopJob(android.app.job.JobParameters), which is meant to inform you that the\n scheduling requirements are no longer being met.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-PERMISSION_BIND' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobService'>android.app.job.JobService</span><br/><a href='source/JobService.html#android-app-job-JobService-property-PERMISSION_BIND' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobService-property-PERMISSION_BIND' class='name expandable'>PERMISSION_BIND</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Job services must be protected with this permission:\n\n\n    &#60;service android:name=\"MyJobService\"\n             andr...</div><div class='long'><p>Job services must be protected with this permission:</p>\n\n<pre class=\"prettyprint\">\n    &#60;service android:name=\"MyJobService\"\n             android:permission=\"android.permission.BIND_JOB_SERVICE\" &#62;\n        ...\n    &#60;/service&#62;\n</pre>\n\n\n\n\n<p><p>If a job service is declared in the manifest but not protected with this\npermission, that service will be ignored by the system.</p>\n<p>Defaults to: <code>&quot;android.permission.BIND_JOB_SERVICE&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-jobFinished' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobService'>android.app.job.JobService</span><br/><a href='source/JobService.html#android-app-job-JobService-method-jobFinished' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobService-method-jobFinished' class='name expandable'>jobFinished</a>( <span class='pre'>params, wantsReschedule</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Call this to inform the JobScheduler that the job has finished its work. ...</div><div class='long'><p>Call this to inform the JobScheduler that the job has finished its work.  When the\n system receives this message, it releases the wakelock being held for the job.\n <p>\n You can request that the job be scheduled again by passing {@code true} as\n the <code>wantsReschedule</code> parameter. This will apply back-off policy\n for the job; this policy can be adjusted through the\n int) method\n when the job is originally scheduled.  The job's initial\n requirements are preserved when jobs are rescheduled, regardless of backed-off\n policy.\n <p class=\"note\">\n A job running while the device is dozing will not be rescheduled with the normal back-off\n policy.  Instead, the job will be re-added to the queue and executed again during\n a future idle maintenance window.\n </p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {JobParameters}<div class='sub-desc'><p>The parameters identifying this job, as supplied to\n               the job in the onStartJob(JobParameters) callback.</p>\n</div></li><li><span class='pre'>wantsReschedule</span> : Boolean<div class='sub-desc'><p>{@code true} if this job should be rescheduled according\n     to the back-off criteria specified when it was first scheduled; {@code false}\n     otherwise.</p>\n</div></li></ul></div></div></div><div id='method-onStartJob' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobService'>android.app.job.JobService</span><br/><a href='source/JobService.html#android-app-job-JobService-method-onStartJob' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobService-method-onStartJob' class='name expandable'>onStartJob</a>( <span class='pre'>params</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called to indicate that the job has begun executing. ...</div><div class='long'><p>Called to indicate that the job has begun executing.  Override this method with the\n logic for your job.  Like all other component lifecycle callbacks, this method executes\n on your application's main thread.\n <p>\n Return {@code true} from this method if your job needs to continue running.  If you\n do this, the job remains active until you call\n boolean) to tell the system that it has completed\n its work, or until the job's required constraints are no longer satisfied.  For\n example, if the job was scheduled using\n setRequiresCharging(true),\n it will be immediately halted by the system if the user unplugs the device from power,\n the job's <a href=\"#!/api/android.app.job.JobService-method-onStopJob\" rel=\"android.app.job.JobService-method-onStopJob\" class=\"docClass\">onStopJob</a>(JobParameters) callback will be invoked, and the app\n will be expected to shut down all ongoing work connected with that job.\n <p>\n The system holds a wakelock on behalf of your app as long as your job is executing.\n This wakelock is acquired before this method is invoked, and is not released until either\n you call boolean), or after the system invokes\n <a href=\"#!/api/android.app.job.JobService-method-onStopJob\" rel=\"android.app.job.JobService-method-onStopJob\" class=\"docClass\">onStopJob</a>(JobParameters) to notify your job that it is being shut down\n prematurely.\n <p>\n Returning {@code false} from this method means your job is already finished.  The\n system's wakelock for the job will be released, and <a href=\"#!/api/android.app.job.JobService-method-onStopJob\" rel=\"android.app.job.JobService-method-onStopJob\" class=\"docClass\">onStopJob</a>(JobParameters)\n will not be invoked.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {JobParameters}<div class='sub-desc'><p>Parameters specifying info about this job, including the optional\n     extras configured with This object serves to identify this specific running job instance when calling\n     {@link #jobFinished(JobParameters, boolean).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if your service will continue running, using a separate thread\n     when appropriate.  {@code false} means that this job has completed its work.</p>\n</div></li></ul></div></div></div><div id='method-onStopJob' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobService'>android.app.job.JobService</span><br/><a href='source/JobService.html#android-app-job-JobService-method-onStopJob' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobService-method-onStopJob' class='name expandable'>onStopJob</a>( <span class='pre'>params</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>This method is called if the system has determined that you must stop execution of your job\n even before you've had a...</div><div class='long'><p>This method is called if the system has determined that you must stop execution of your job\n even before you've had a chance to call boolean).</p>\n\n<p> <p>This will happen if the requirements specified at schedule time are no longer met. For\n example you may have requested WiFi with\n android.app.job.JobInfo.Builder.setRequiredNetworkType(int), yet while your\n job was executing the user toggled WiFi. Another example is if you had specified\n android.app.job.JobInfo.Builder.setRequiresDeviceIdle(boolean), and the phone left its\n idle maintenance window. You are solely responsible for the behavior of your application\n upon receipt of this message; your app will likely start to misbehave if you ignore it.\n <p>\n Once this method returns, the system releases the wakelock that it is holding on\n behalf of the job.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object {JobParameters}<div class='sub-desc'><p>The parameters identifying this job, as supplied to\n               the job in the onStartJob(JobParameters) callback.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} to indicate to the JobManager whether you'd like to reschedule\n this job based on the retry criteria provided at job creation-time; or {@code false}\n to end the job entirely.  Regardless of the value returned, your job must stop executing.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});