Ext.data.JsonP.android_app_job_JobScheduler({"tagname":"class","name":"android.app.job.JobScheduler","autodetected":{},"files":[{"filename":"JobScheduler.js","href":"JobScheduler.html#android-app-job-JobScheduler"}],"extends":"java.lang.Object","members":[{"name":"RESULT_FAILURE","tagname":"property","owner":"android.app.job.JobScheduler","id":"property-RESULT_FAILURE","meta":{}},{"name":"RESULT_SUCCESS","tagname":"property","owner":"android.app.job.JobScheduler","id":"property-RESULT_SUCCESS","meta":{}},{"name":"cancel","tagname":"method","owner":"android.app.job.JobScheduler","id":"method-cancel","meta":{}},{"name":"cancelAll","tagname":"method","owner":"android.app.job.JobScheduler","id":"method-cancelAll","meta":{}},{"name":"enqueue","tagname":"method","owner":"android.app.job.JobScheduler","id":"method-enqueue","meta":{}},{"name":"getAllPendingJobs","tagname":"method","owner":"android.app.job.JobScheduler","id":"method-getAllPendingJobs","meta":{}},{"name":"getPendingJob","tagname":"method","owner":"android.app.job.JobScheduler","id":"method-getPendingJob","meta":{}},{"name":"schedule","tagname":"method","owner":"android.app.job.JobScheduler","id":"method-schedule","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.app.job.JobScheduler","short_doc":"This is an API for scheduling various types of jobs against the framework that will be executed\n in your application'...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.app.job.JobScheduler</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/JobScheduler.html#android-app-job-JobScheduler' target='_blank'>JobScheduler.js</a></div></pre><div class='doc-contents'><p>This is an API for scheduling various types of jobs against the framework that will be executed\n in your application's own process.\n <p>\n See <a href=\"#!/api/android.app.job.JobInfo\" rel=\"android.app.job.JobInfo\" class=\"docClass\">android.app.job.JobInfo</a> for more description of the types of jobs that can be run\n and how to construct them. You will construct these JobInfo objects and pass them to the\n JobScheduler with <a href=\"#!/api/android.app.job.JobScheduler-method-schedule\" rel=\"android.app.job.JobScheduler-method-schedule\" class=\"docClass\">schedule</a>(JobInfo). When the criteria declared are met, the\n system will execute this job on your application's <a href=\"#!/api/android.app.job.JobService\" rel=\"android.app.job.JobService\" class=\"docClass\">android.app.job.JobService</a>.\n You identify the service component that implements the logic for your job when you\n construct the JobInfo using\n android.app.job.JobInfo.Builder.JobInfo.Builder(int,android.content.ComponentName).\n </p>\n <p>\n The framework will be intelligent about when it executes jobs, and attempt to batch\n and defer them as much as possible. Typically if you don't specify a deadline on a job, it\n can be run at any moment depending on the current state of the JobScheduler's internal queue.\n <p>\n While a job is running, the system holds a wakelock on behalf of your app.  For this reason,\n you do not need to take any action to guarantee that the device stays awake for the\n duration of the job.\n </p>\n <p>You do not\n instantiate this class directly; instead, retrieve it through\n Context.getSystemService(Context.JOB_SCHEDULER_SERVICE).</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-RESULT_FAILURE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobScheduler'>android.app.job.JobScheduler</span><br/><a href='source/JobScheduler.html#android-app-job-JobScheduler-property-RESULT_FAILURE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobScheduler-property-RESULT_FAILURE' class='name expandable'>RESULT_FAILURE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returned from schedule(JobInfo) when an invalid parameter was supplied. ...</div><div class='long'><p>Returned from <a href=\"#!/api/android.app.job.JobScheduler-method-schedule\" rel=\"android.app.job.JobScheduler-method-schedule\" class=\"docClass\">schedule</a>(JobInfo) when an invalid parameter was supplied. This can occur\nif the run-time for your job is too short, or perhaps the system can't resolve the\nrequisite <a href=\"#!/api/android.app.job.JobService\" rel=\"android.app.job.JobService\" class=\"docClass\">android.app.job.JobService</a> in your package.</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-RESULT_SUCCESS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobScheduler'>android.app.job.JobScheduler</span><br/><a href='source/JobScheduler.html#android-app-job-JobScheduler-property-RESULT_SUCCESS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobScheduler-property-RESULT_SUCCESS' class='name expandable'>RESULT_SUCCESS</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returned from schedule(JobInfo) if this job has been successfully scheduled. ...</div><div class='long'><p>Returned from <a href=\"#!/api/android.app.job.JobScheduler-method-schedule\" rel=\"android.app.job.JobScheduler-method-schedule\" class=\"docClass\">schedule</a>(JobInfo) if this job has been successfully scheduled.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cancel' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobScheduler'>android.app.job.JobScheduler</span><br/><a href='source/JobScheduler.html#android-app-job-JobScheduler-method-cancel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobScheduler-method-cancel' class='name expandable'>cancel</a>( <span class='pre'>jobId</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancel the specified job. ...</div><div class='long'><p>Cancel the specified job.  If the job is currently executing, it is stopped\n immediately and the return value from its android.app.job.JobService.onStopJob(JobParameters)\n method is ignored.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>jobId</span> : Number<div class='sub-desc'><p>unique identifier for the job to be canceled, as supplied to\n     android.content.ComponentName)\n     JobInfo.Builder(int, android.content.ComponentName).</p>\n</div></li></ul></div></div></div><div id='method-cancelAll' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobScheduler'>android.app.job.JobScheduler</span><br/><a href='source/JobScheduler.html#android-app-job-JobScheduler-method-cancelAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobScheduler-method-cancelAll' class='name expandable'>cancelAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancel all jobs that have been scheduled by the calling application. ...</div><div class='long'><p>Cancel <em>all</em> jobs that have been scheduled by the calling application.</p>\n</div></div></div><div id='method-enqueue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobScheduler'>android.app.job.JobScheduler</span><br/><a href='source/JobScheduler.html#android-app-job-JobScheduler-method-enqueue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobScheduler-method-enqueue' class='name expandable'>enqueue</a>( <span class='pre'>job, work</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Similar to schedule, but allows you to enqueue work for a new or existing\n job. ...</div><div class='long'><p>Similar to <a href=\"#!/api/android.app.job.JobScheduler-method-schedule\" rel=\"android.app.job.JobScheduler-method-schedule\" class=\"docClass\">schedule</a>, but allows you to enqueue work for a new <em>or existing</em>\n job.  If a job with the same ID is already scheduled, it will be replaced with the\n new <a href=\"#!/api/android.app.job.JobInfo\" rel=\"android.app.job.JobInfo\" class=\"docClass\">android.app.job.JobInfo</a>, but any previously enqueued work will remain and be dispatched the\n next time it runs.  If a job with the same ID is already running, the new work will be\n enqueued for it.</p>\n\n<p> <p>The work you enqueue is later retrieved through\n android.app.job.JobParameters.dequeueWork.  Be sure to see there\n about how to process work; the act of enqueueing work changes how you should handle the\n overall lifecycle of an executing job.</p></p>\n\n<p> <p>It is strongly encouraged that you use the same <a href=\"#!/api/android.app.job.JobInfo\" rel=\"android.app.job.JobInfo\" class=\"docClass\">android.app.job.JobInfo</a> for all work you\n enqueue.  This will allow the system to optimally schedule work along with any pending\n and/or currently running work.  If the JobInfo changes from the last time the job was\n enqueued, the system will need to update the associated JobInfo, which can cause a disruption\n in execution.  In particular, this can result in any currently running job that is processing\n previous work to be stopped and restarted with the new JobInfo.</p></p>\n\n<p> <p>It is recommended that you avoid using\n android.app.job.JobInfo.Builder.setExtras(PersistableBundle) or\n android.app.job.JobInfo.Builder.setTransientExtras(Bundle) with a JobInfo you are using to\n enqueue work.  The system will try to compare these extras with the previous JobInfo,\n but there are situations where it may get this wrong and count the JobInfo as changing.\n (That said, you should be relatively safe with a simple set of consistent data in these\n fields.)  You should never use int) with\n work you are enqueue, since currently this will always be treated as a different JobInfo,\n even if the ClipData contents are exactly the same.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>job</span> : Object {JobInfo}<div class='sub-desc'><p>The job you wish to enqueue work for. See\n <a href=\"#!/api/android.app.job.JobInfo.Builder\" rel=\"android.app.job.JobInfo.Builder\" class=\"docClass\">JobInfo.Builder</a> for more detail on the sorts of jobs\n you can schedule.</p>\n</div></li><li><span class='pre'>work</span> : Object {JobWorkItem}<div class='sub-desc'><p>New work to enqueue.  This will be available later when the job starts running.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the result of the enqueue request.</p>\n</div></li></ul></div></div></div><div id='method-getAllPendingJobs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobScheduler'>android.app.job.JobScheduler</span><br/><a href='source/JobScheduler.html#android-app-job-JobScheduler-method-getAllPendingJobs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobScheduler-method-getAllPendingJobs' class='name expandable'>getAllPendingJobs</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve all jobs that have been scheduled by the calling application. ...</div><div class='long'><p>Retrieve all jobs that have been scheduled by the calling application.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>a list of all of the app's scheduled jobs.  This includes jobs that are\n     currently started as well as those that are still waiting to run.</p>\n</div></li></ul></div></div></div><div id='method-getPendingJob' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobScheduler'>android.app.job.JobScheduler</span><br/><a href='source/JobScheduler.html#android-app-job-JobScheduler-method-getPendingJob' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobScheduler-method-getPendingJob' class='name expandable'>getPendingJob</a>( <span class='pre'></span> ) : Object {android.app.job.JobInfo}<span class=\"signature\"></span></div><div class='description'><div class='short'>Look up the description of a scheduled job. ...</div><div class='long'><p>Look up the description of a scheduled job.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.app.job.JobInfo}</span><div class='sub-desc'><p>The JobInfo description of the given scheduled job, or {@code null}\n     if the supplied job ID does not correspond to any job.</p>\n</div></li></ul></div></div></div><div id='method-schedule' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.app.job.JobScheduler'>android.app.job.JobScheduler</span><br/><a href='source/JobScheduler.html#android-app-job-JobScheduler-method-schedule' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.app.job.JobScheduler-method-schedule' class='name expandable'>schedule</a>( <span class='pre'>job</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Schedule a job to be executed. ...</div><div class='long'><p>Schedule a job to be executed.  Will replace any currently scheduled job with the same\n ID with the new information in the <a href=\"#!/api/android.app.job.JobInfo\" rel=\"android.app.job.JobInfo\" class=\"docClass\">android.app.job.JobInfo</a>.  If a job with the given ID is currently\n running, it will be stopped.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>job</span> : Object {JobInfo}<div class='sub-desc'><p>The job you wish scheduled. See\n <a href=\"#!/api/android.app.job.JobInfo.Builder\" rel=\"android.app.job.JobInfo.Builder\" class=\"docClass\">JobInfo.Builder</a> for more detail on the sorts of jobs\n you can schedule.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the result of the schedule request.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});