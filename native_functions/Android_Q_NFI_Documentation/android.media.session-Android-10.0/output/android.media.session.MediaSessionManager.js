Ext.data.JsonP.android_media_session_MediaSessionManager({"tagname":"class","name":"android.media.session.MediaSessionManager","autodetected":{},"files":[{"filename":"MediaSessionManager.js","href":"MediaSessionManager.html#android-media-session-MediaSessionManager"}],"extends":"java.lang.Object","members":[{"name":"getActiveSessions","tagname":"method","owner":"android.media.session.MediaSessionManager","id":"method-getActiveSessions","meta":{}},{"name":"isTrustedForMediaControl","tagname":"method","owner":"android.media.session.MediaSessionManager","id":"method-isTrustedForMediaControl","meta":{}},{"name":"notifySession2Created","tagname":"method","owner":"android.media.session.MediaSessionManager","id":"method-notifySession2Created","meta":{}},{"name":"removeOnActiveSessionsChangedListener","tagname":"method","owner":"android.media.session.MediaSessionManager","id":"method-removeOnActiveSessionsChangedListener","meta":{}},{"name":"removeOnSession2TokensChangedListener","tagname":"method","owner":"android.media.session.MediaSessionManager","id":"method-removeOnSession2TokensChangedListener","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.media.session.MediaSessionManager","short_doc":"Provides support for interacting with media sessions\n that applications have published to express their ongoing media...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.media.session.MediaSessionManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/MediaSessionManager.html#android-media-session-MediaSessionManager' target='_blank'>MediaSessionManager.js</a></div></pre><div class='doc-contents'><p>Provides support for interacting with <a href=\"#!/api/android.media.session.MediaSession\" rel=\"android.media.session.MediaSession\" class=\"docClass\">media sessions</a>\n that applications have published to express their ongoing media playback\n state.</p>\n\n<p> @see MediaSession\n @see MediaController</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getActiveSessions' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.session.MediaSessionManager'>android.media.session.MediaSessionManager</span><br/><a href='source/MediaSessionManager.html#android-media-session-MediaSessionManager-method-getActiveSessions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.session.MediaSessionManager-method-getActiveSessions' class='name expandable'>getActiveSessions</a>( <span class='pre'>notificationListener</span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get a list of controllers for all ongoing sessions. ...</div><div class='long'><p>Get a list of controllers for all ongoing sessions. The controllers will\n be provided in priority order with the most important controller at index\n 0.\n <p>\n This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL\n permission be held by the calling app. You may also retrieve this list if\n your app is an enabled notification listener using the\n NotificationListenerService APIs, in which case you must pass the\n ComponentName of your enabled listener.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>notificationListener</span> : Object {ComponentName}<div class='sub-desc'><p>The enabled notification listener component.\n            May be null.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>A list of controllers for ongoing sessions.</p>\n</div></li></ul></div></div></div><div id='method-isTrustedForMediaControl' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.session.MediaSessionManager'>android.media.session.MediaSessionManager</span><br/><a href='source/MediaSessionManager.html#android-media-session-MediaSessionManager-method-isTrustedForMediaControl' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.session.MediaSessionManager-method-isTrustedForMediaControl' class='name expandable'>isTrustedForMediaControl</a>( <span class='pre'>userInfo</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks whether the remote user is a trusted app. ...</div><div class='long'><p>Checks whether the remote user is a trusted app.\n <p>\n An app is trusted if the app holds the android.Manifest.permission.MEDIA_CONTENT_CONTROL\n permission or has an enabled notification listener.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>userInfo</span> : Object {MediaSessionManager.RemoteUserInfo}<div class='sub-desc'><p>The remote user info from either\n            MediaSession.getCurrentControllerInfo() or\n            MediaBrowserService.getCurrentBrowserInfo().</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the remote user is trusted and its package name matches with the UID.\n            {@code false} otherwise.</p>\n</div></li></ul></div></div></div><div id='method-notifySession2Created' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.session.MediaSessionManager'>android.media.session.MediaSessionManager</span><br/><a href='source/MediaSessionManager.html#android-media-session-MediaSessionManager-method-notifySession2Created' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.session.MediaSessionManager-method-notifySession2Created' class='name expandable'>notifySession2Created</a>( <span class='pre'>token</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This API is not generally intended for third party application developers. ...</div><div class='long'><p>This API is not generally intended for third party application developers.\n Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n Library</a> for consistent behavior across all devices.\n <p>\n Notifies that a new android.media.session.MediaSession2 with type Session2Token.TYPE_SESSION is\n created.\n <p>\n Do not use this API directly, but create a new instance through the\n android.media.session.MediaSession2.Builder instead.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>token</span> : Object {Session2Token}<div class='sub-desc'><p>newly created session2 token</p>\n</div></li></ul></div></div></div><div id='method-removeOnActiveSessionsChangedListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.session.MediaSessionManager'>android.media.session.MediaSessionManager</span><br/><a href='source/MediaSessionManager.html#android-media-session-MediaSessionManager-method-removeOnActiveSessionsChangedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.session.MediaSessionManager-method-removeOnActiveSessionsChangedListener' class='name expandable'>removeOnActiveSessionsChangedListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Stop receiving active sessions updates on the specified listener. ...</div><div class='long'><p>Stop receiving active sessions updates on the specified listener.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaSessionManager.OnActiveSessionsChangedListener}<div class='sub-desc'><p>The listener to remove.</p>\n</div></li></ul></div></div></div><div id='method-removeOnSession2TokensChangedListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.media.session.MediaSessionManager'>android.media.session.MediaSessionManager</span><br/><a href='source/MediaSessionManager.html#android-media-session-MediaSessionManager-method-removeOnSession2TokensChangedListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.media.session.MediaSessionManager-method-removeOnSession2TokensChangedListener' class='name expandable'>removeOnSession2TokensChangedListener</a>( <span class='pre'>listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>This API is not generally intended for third party application developers. ...</div><div class='long'><p>This API is not generally intended for third party application developers.\n Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n Library</a> for consistent behavior across all devices.\n <p>\n Removes the <a href=\"#!/api/android.media.session.MediaSessionManager.OnSession2TokensChangedListener\" rel=\"android.media.session.MediaSessionManager.OnSession2TokensChangedListener\" class=\"docClass\">android.media.session.MediaSessionManager.OnSession2TokensChangedListener</a> to stop receiving session token updates.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>listener</span> : Object {MediaSessionManager.OnSession2TokensChangedListener}<div class='sub-desc'><p>The listener to remove.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});