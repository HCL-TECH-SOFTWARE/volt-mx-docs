Ext.data.JsonP.android_view_contentcapture_ContentCaptureManager({"tagname":"class","name":"android.view.contentcapture.ContentCaptureManager","autodetected":{},"files":[{"filename":"ContentCaptureManager.js","href":"ContentCaptureManager.html#android-view-contentcapture-ContentCaptureManager"}],"extends":"java.lang.Object","members":[{"name":"getContentCaptureConditions","tagname":"method","owner":"android.view.contentcapture.ContentCaptureManager","id":"method-getContentCaptureConditions","meta":{}},{"name":"getServiceComponentName","tagname":"method","owner":"android.view.contentcapture.ContentCaptureManager","id":"method-getServiceComponentName","meta":{}},{"name":"isContentCaptureEnabled","tagname":"method","owner":"android.view.contentcapture.ContentCaptureManager","id":"method-isContentCaptureEnabled","meta":{}},{"name":"removeData","tagname":"method","owner":"android.view.contentcapture.ContentCaptureManager","id":"method-removeData","meta":{}},{"name":"setContentCaptureEnabled","tagname":"method","owner":"android.view.contentcapture.ContentCaptureManager","id":"method-setContentCaptureEnabled","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.view.contentcapture.ContentCaptureManager","short_doc":"Content capture is mechanism used to let apps notify the Android system of events associated with\n views. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.view.contentcapture.ContentCaptureManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ContentCaptureManager.html#android-view-contentcapture-ContentCaptureManager' target='_blank'>ContentCaptureManager.js</a></div></pre><div class='doc-contents'><p>Content capture is mechanism used to let apps notify the Android system of events associated with\n views.</p>\n\n<p> <p>Before using this manager, you should check if it's available. Example:</p>\n\n<pre><code>  ContentCaptureManager mgr = context.getSystemService(ContentCaptureManager.class);\n  if (mgr != null && mgr.isContentCaptureEnabled()) {\n    // ...\n  }\n  </code></pre>\n\n\n<p> <p>To support content capture, you must notifiy the Android system of the following events:</p>\n\n<p> <ul>\n   <li>When a visible view is laid out, call\n   android.view.contentcapture.ContentCaptureSession.notifyViewAppeared(ViewStructure).\n   <li>When a view becomes invisible or is removed from the view hierarchy, call\n   android.view.contentcapture.ContentCaptureSession.notifyViewDisappeared(android.view.autofill.AutofillId).\n   <li>When the view represents text and the text value changed, call CharSequence).\n </li></li></li></ul></p>\n\n<p> <p>You can get a blank content capture structure using\n android.view.contentcapture.ContentCaptureSession.newViewStructure(View), then populate its relevant fields.\n Here's an example of the relevant methods for an {@code EditText}-like view:</p>\n\n<pre><code> public class MyEditText extends View {\n\n private void populateContentCaptureStructure(@NonNull ViewStructure structure) {\n   structure.setText(getText(), getSelectionStart(), getSelectionEnd());\n   structure.setHint(getHint());\n   structure.setInputType(getInputType());\n   // set other properties like setTextIdEntry(), setTextLines(), setTextStyle(),\n   // setMinTextEms(), setMaxTextEms(), setMaxTextLength()\n }\n\n private void onTextChanged() {\n   if (isLaidOut() && isTextEditable()) {\n     ContentCaptureManager mgr = mContext.getSystemService(ContentCaptureManager.class);\n     if (cm != null && cm.isContentCaptureEnabled()) {\n        ContentCaptureSession session = getContentCaptureSession();\n        if (session != null) {\n          session.notifyViewTextChanged(getAutofillId(), getText());\n        }\n   }\n }\n </code></pre>\n\n\n<p> <p>The main integration point with content capture is the <a href=\"#!/api/android.view.contentcapture.ContentCaptureSession\" rel=\"android.view.contentcapture.ContentCaptureSession\" class=\"docClass\">android.view.contentcapture.ContentCaptureSession</a>. A \"main\"\n session is automatically created by the Android system when content capture is enabled for the\n activity. The session could have a <a href=\"#!/api/android.view.contentcapture.ContentCaptureContext\" rel=\"android.view.contentcapture.ContentCaptureContext\" class=\"docClass\">android.view.contentcapture.ContentCaptureContext</a> to provide more contextual info\n about it, such as the locus associated with the view hierarchy\n (see android.content.LocusId for more info about locus). By default, the main session\n doesn't have a {@code ContentCaptureContext}, but you can change it after its created. Example:</p>\n\n<pre><code> protected void onCreate(Bundle savedInstanceState) {\n   // Initialize view structure\n   ContentCaptureSession session = rootView.getContentCaptureSession();\n   if (session != null) {\n     session.setContentCaptureContext(ContentCaptureContext.forLocusId(\"chat_UserA_UserB\"));\n   }\n }\n </code></pre>\n\n\n<p> <p>If your activity contains view hierarchies with a different contextual meaning, you should\n created child sessions for each view hierarchy root. For example, if your activity is a browser,\n you could use the main session for the main URL being rendered, then child sessions for each\n {@code IFRAME}:</p>\n\n<pre><code> ContentCaptureSession mMainSession;\n\n protected void onCreate(Bundle savedInstanceState) {\n    // Initialize view structure...\n    mMainSession = rootView.getContentCaptureSession();\n    if (mMainSession != null) {\n      mMainSession.setContentCaptureContext(\n          ContentCaptureContext.forLocusId(\"https://example.com\"));\n    }\n }\n\n private void loadIFrame(View iframeRootView, String url) {\n   if (mMainSession != null) {\n      ContentCaptureSession iFrameSession = mMainSession.newChild(\n          ContentCaptureContext.forLocusId(url));\n      }\n      iframeRootView.setContentCaptureSession(iFrameSession);\n   }\n   // Load iframe...\n }\n </code></pre>\n\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getContentCaptureConditions' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.contentcapture.ContentCaptureManager'>android.view.contentcapture.ContentCaptureManager</span><br/><a href='source/ContentCaptureManager.html#android-view-contentcapture-ContentCaptureManager-method-getContentCaptureConditions' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.contentcapture.ContentCaptureManager-method-getContentCaptureConditions' class='name expandable'>getContentCaptureConditions</a>( <span class='pre'></span> ) : Object {java.util.Set}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the list of conditions for when content capture should be allowed. ...</div><div class='long'><p>Gets the list of conditions for when content capture should be allowed.</p>\n\n<p> <p>This method is typically used by web browsers so they don't generate unnecessary content\n capture events for some websites.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Set}</span><div class='sub-desc'><p>list of conditions, or {@code null} if there isn't any restriction\n (in which case content capture events should always be generated). If the list is empty,\n then it should not generate any event at all.</p>\n</div></li></ul></div></div></div><div id='method-getServiceComponentName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.contentcapture.ContentCaptureManager'>android.view.contentcapture.ContentCaptureManager</span><br/><a href='source/ContentCaptureManager.html#android-view-contentcapture-ContentCaptureManager-method-getServiceComponentName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.contentcapture.ContentCaptureManager-method-getServiceComponentName' class='name expandable'>getServiceComponentName</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the component name of the system service that is consuming the captured events for\n the current user. ...</div><div class='long'><p>Returns the component name of the system service that is consuming the captured events for\n the current user.</p>\n</div></div></div><div id='method-isContentCaptureEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.contentcapture.ContentCaptureManager'>android.view.contentcapture.ContentCaptureManager</span><br/><a href='source/ContentCaptureManager.html#android-view-contentcapture-ContentCaptureManager-method-isContentCaptureEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.contentcapture.ContentCaptureManager-method-isContentCaptureEnabled' class='name expandable'>isContentCaptureEnabled</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks whether content capture is enabled for this activity. ...</div><div class='long'><p>Checks whether content capture is enabled for this activity.</p>\n</div></div></div><div id='method-removeData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.contentcapture.ContentCaptureManager'>android.view.contentcapture.ContentCaptureManager</span><br/><a href='source/ContentCaptureManager.html#android-view-contentcapture-ContentCaptureManager-method-removeData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.contentcapture.ContentCaptureManager-method-removeData' class='name expandable'>removeData</a>( <span class='pre'>request</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the app to remove content capture data associated with some context. ...</div><div class='long'><p>Called by the app to remove content capture data associated with some context.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>request</span> : Object {DataRemovalRequest}<div class='sub-desc'><p>object specifying what data should be removed.</p>\n</div></li></ul></div></div></div><div id='method-setContentCaptureEnabled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.contentcapture.ContentCaptureManager'>android.view.contentcapture.ContentCaptureManager</span><br/><a href='source/ContentCaptureManager.html#android-view-contentcapture-ContentCaptureManager-method-setContentCaptureEnabled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.contentcapture.ContentCaptureManager-method-setContentCaptureEnabled' class='name expandable'>setContentCaptureEnabled</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by apps to explicitly enable or disable content capture. ...</div><div class='long'><p>Called by apps to explicitly enable or disable content capture.</p>\n\n<p> <p><b>Note: </b> this call is not persisted accross reboots, so apps should typically call\n it on android.os.PersistableBundle).</p>\n</div></div></div></div></div></div></div>","meta":{}});