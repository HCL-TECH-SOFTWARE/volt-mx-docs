Ext.data.JsonP.android_net_wifi_aware_WifiAwareManager({"tagname":"class","name":"android.net.wifi.aware.WifiAwareManager","autodetected":{},"files":[{"filename":"WifiAwareManager.js","href":"WifiAwareManager.html#android-net-wifi-aware-WifiAwareManager"}],"extends":"java.lang.Object","members":[{"name":"ACTION_WIFI_AWARE_STATE_CHANGED","tagname":"property","owner":"android.net.wifi.aware.WifiAwareManager","id":"property-ACTION_WIFI_AWARE_STATE_CHANGED","meta":{}},{"name":"WIFI_AWARE_DATA_PATH_ROLE_INITIATOR","tagname":"property","owner":"android.net.wifi.aware.WifiAwareManager","id":"property-WIFI_AWARE_DATA_PATH_ROLE_INITIATOR","meta":{}},{"name":"WIFI_AWARE_DATA_PATH_ROLE_RESPONDER","tagname":"property","owner":"android.net.wifi.aware.WifiAwareManager","id":"property-WIFI_AWARE_DATA_PATH_ROLE_RESPONDER","meta":{}},{"name":"getCharacteristics","tagname":"method","owner":"android.net.wifi.aware.WifiAwareManager","id":"method-getCharacteristics","meta":{}},{"name":"isAvailable","tagname":"method","owner":"android.net.wifi.aware.WifiAwareManager","id":"method-isAvailable","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.net.wifi.aware.WifiAwareManager","short_doc":"This class provides the primary API for managing Wi-Fi Aware operations:\n discovery and peer-to-peer data connections. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.net.wifi.aware.WifiAwareManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/WifiAwareManager.html#android-net-wifi-aware-WifiAwareManager' target='_blank'>WifiAwareManager.js</a></div></pre><div class='doc-contents'><p>This class provides the primary API for managing Wi-Fi Aware operations:\n discovery and peer-to-peer data connections.\n <p>\n The class provides access to:\n <ul>\n <li>Initialize a Aware cluster (peer-to-peer synchronization). Refer to\n Handler).\n <li>Create discovery sessions (publish or subscribe sessions). Refer to\n android.net.wifi.aware.DiscoverySessionCallback, Handler) and\n android.net.wifi.aware.DiscoverySessionCallback, Handler).\n <li>Create a Aware network specifier to be used with\n ConnectivityManager.NetworkCallback)\n to set-up a Aware connection with a peer. Refer to android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder.\n </li></li></li></ul>\n <p>\n     Aware may not be usable when Wi-Fi is disabled (and other conditions). To validate that\n     the functionality is available use the <a href=\"#!/api/android.net.wifi.aware.WifiAwareManager-method-isAvailable\" rel=\"android.net.wifi.aware.WifiAwareManager-method-isAvailable\" class=\"docClass\">isAvailable</a>() function. To track\n     changes in Aware usability register for the <a href=\"#!/api/android.net.wifi.aware.WifiAwareManager-property-ACTION_WIFI_AWARE_STATE_CHANGED\" rel=\"android.net.wifi.aware.WifiAwareManager-property-ACTION_WIFI_AWARE_STATE_CHANGED\" class=\"docClass\">ACTION_WIFI_AWARE_STATE_CHANGED</a>\n     broadcast. Note that this broadcast is not sticky - you should register for it and then\n     check the above API to avoid a race condition.\n <p>\n     An application must use Handler) to initialize a\n     Aware cluster - before making any other Aware operation. Aware cluster membership is a\n     device-wide operation - the API guarantees that the device is in a cluster or joins a\n     Aware cluster (or starts one if none can be found). Information about attach success (or\n     failure) are returned in callbacks of <a href=\"#!/api/android.net.wifi.aware.AttachCallback\" rel=\"android.net.wifi.aware.AttachCallback\" class=\"docClass\">android.net.wifi.aware.AttachCallback</a>. Proceed with Aware\n     discovery or connection setup only after receiving confirmation that Aware attach\n     succeeded - android.net.wifi.aware.AttachCallback.onAttached(WifiAwareSession). When an\n     application is finished using Aware it <b>must</b> use the\n     android.net.wifi.aware.WifiAwareSession.close() API to indicate to the Aware service that the device\n     may detach from the Aware cluster. The device will actually disable Aware once the last\n     application detaches.\n <p>\n     Once a Aware attach is confirmed use the\n     android.net.wifi.aware.DiscoverySessionCallback, Handler)\n     or\n     android.net.wifi.aware.DiscoverySessionCallback,\n     Handler) to create publish or subscribe Aware discovery sessions. Events are called on the\n     provided callback object <a href=\"#!/api/android.net.wifi.aware.DiscoverySessionCallback\" rel=\"android.net.wifi.aware.DiscoverySessionCallback\" class=\"docClass\">android.net.wifi.aware.DiscoverySessionCallback</a>. Specifically, the\n     android.net.wifi.aware.DiscoverySessionCallback.onPublishStarted(Publishandroid.net.wifi.aware.DiscoverySession)\n     and\n     Subscribeandroid.net.wifi.aware.DiscoverySession)\n     return <a href=\"#!/api/android.net.wifi.aware.PublishDiscoverySession\" rel=\"android.net.wifi.aware.PublishDiscoverySession\" class=\"docClass\">android.net.wifi.aware.PublishDiscoverySession</a> and\n     <a href=\"#!/api/android.net.wifi.aware.SubscribeDiscoverySession\" rel=\"android.net.wifi.aware.SubscribeDiscoverySession\" class=\"docClass\">android.net.wifi.aware.SubscribeDiscoverySession</a>\n     objects respectively on which additional session operations can be performed, e.g. updating\n     the session android.net.wifi.aware.PublishDiscoverySession.updatePublish(PublishConfig) and\n     android.net.wifi.aware.SubscribeDiscoverySession.updateSubscribe(SubscribeConfig). Sessions can\n     also be used to send messages using the\n     int, byte[]) APIs. When an\n     application is finished with a discovery session it <b>must</b> terminate it using the\n     android.net.wifi.aware.DiscoverySession.close() API.\n <p>\n    Creating connections between Aware devices is managed by the standard\n    ConnectivityManager.NetworkCallback).\n    The NetworkRequest object should be constructed with:\n    <ul>\n        <li>NetworkRequest.Builder.addTransportType(int) of\n        android.net.NetworkCapabilities.TRANSPORT_WIFI_AWARE.\n        <li>NetworkRequest.Builder.setNetworkSpecifier(String) using\n        android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder.\n    </li></li></ul></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-ACTION_WIFI_AWARE_STATE_CHANGED' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.wifi.aware.WifiAwareManager'>android.net.wifi.aware.WifiAwareManager</span><br/><a href='source/WifiAwareManager.html#android-net-wifi-aware-WifiAwareManager-property-ACTION_WIFI_AWARE_STATE_CHANGED' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.wifi.aware.WifiAwareManager-property-ACTION_WIFI_AWARE_STATE_CHANGED' class='name expandable'>ACTION_WIFI_AWARE_STATE_CHANGED</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Broadcast intent action to indicate that the state of Wi-Fi Aware availability has changed. ...</div><div class='long'><p>Broadcast intent action to indicate that the state of Wi-Fi Aware availability has changed.\nUse the <a href=\"#!/api/android.net.wifi.aware.WifiAwareManager-method-isAvailable\" rel=\"android.net.wifi.aware.WifiAwareManager-method-isAvailable\" class=\"docClass\">isAvailable</a>() to query the current status.\nThis broadcast is <b>not</b> sticky, use the <a href=\"#!/api/android.net.wifi.aware.WifiAwareManager-method-isAvailable\" rel=\"android.net.wifi.aware.WifiAwareManager-method-isAvailable\" class=\"docClass\">isAvailable</a>() API after registering\nthe broadcast to check the current state of Wi-Fi Aware.</p>\n\n<p><p>Note: The broadcast is only delivered to registered receivers - no manifest registered\ncomponents will be launched.</p>\n<p>Defaults to: <code>&quot;android.net.wifi.aware.action.WIFI_AWARE_STATE_CHANGED&quot;</code></p></div></div></div><div id='property-WIFI_AWARE_DATA_PATH_ROLE_INITIATOR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.wifi.aware.WifiAwareManager'>android.net.wifi.aware.WifiAwareManager</span><br/><a href='source/WifiAwareManager.html#android-net-wifi-aware-WifiAwareManager-property-WIFI_AWARE_DATA_PATH_ROLE_INITIATOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.wifi.aware.WifiAwareManager-property-WIFI_AWARE_DATA_PATH_ROLE_INITIATOR' class='name expandable'>WIFI_AWARE_DATA_PATH_ROLE_INITIATOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Connection creation role is that of INITIATOR. ...</div><div class='long'><p>Connection creation role is that of INITIATOR. Used to create a network specifier string\nwhen requesting a Aware network.</p>\n\n<p>@see WifiAwareSession#createNetworkSpecifierOpen(int, byte[])\n@see WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)</p>\n<p>Defaults to: <code>&quot;0&quot;</code></p></div></div></div><div id='property-WIFI_AWARE_DATA_PATH_ROLE_RESPONDER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.wifi.aware.WifiAwareManager'>android.net.wifi.aware.WifiAwareManager</span><br/><a href='source/WifiAwareManager.html#android-net-wifi-aware-WifiAwareManager-property-WIFI_AWARE_DATA_PATH_ROLE_RESPONDER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.wifi.aware.WifiAwareManager-property-WIFI_AWARE_DATA_PATH_ROLE_RESPONDER' class='name expandable'>WIFI_AWARE_DATA_PATH_ROLE_RESPONDER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Connection creation role is that of RESPONDER. ...</div><div class='long'><p>Connection creation role is that of RESPONDER. Used to create a network specifier string\nwhen requesting a Aware network.</p>\n\n<p>@see WifiAwareSession#createNetworkSpecifierOpen(int, byte[])\n@see WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getCharacteristics' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.wifi.aware.WifiAwareManager'>android.net.wifi.aware.WifiAwareManager</span><br/><a href='source/WifiAwareManager.html#android-net-wifi-aware-WifiAwareManager-method-getCharacteristics' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.wifi.aware.WifiAwareManager-method-getCharacteristics' class='name expandable'>getCharacteristics</a>( <span class='pre'></span> ) : Object {android.net.wifi.aware.Characteristics}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the characteristics of the Wi-Fi Aware interface: a set of parameters which specify\n limitations on configura...</div><div class='long'><p>Returns the characteristics of the Wi-Fi Aware interface: a set of parameters which specify\n limitations on configurations, e.g. the maximum service name length.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.wifi.aware.Characteristics}</span><div class='sub-desc'><p>An object specifying configuration limitations of Aware.</p>\n</div></li></ul></div></div></div><div id='method-isAvailable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.wifi.aware.WifiAwareManager'>android.net.wifi.aware.WifiAwareManager</span><br/><a href='source/WifiAwareManager.html#android-net-wifi-aware-WifiAwareManager-method-isAvailable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.wifi.aware.WifiAwareManager-method-isAvailable' class='name expandable'>isAvailable</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current status of Aware API: whether or not Aware is available. ...</div><div class='long'><p>Returns the current status of Aware API: whether or not Aware is available. To track\n changes in the state of Aware API register for the\n <a href=\"#!/api/android.net.wifi.aware.WifiAwareManager-property-ACTION_WIFI_AWARE_STATE_CHANGED\" rel=\"android.net.wifi.aware.WifiAwareManager-property-ACTION_WIFI_AWARE_STATE_CHANGED\" class=\"docClass\">ACTION_WIFI_AWARE_STATE_CHANGED</a> broadcast.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>A boolean indicating whether the app can use the Aware API at this time (true) or\n not (false).</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});