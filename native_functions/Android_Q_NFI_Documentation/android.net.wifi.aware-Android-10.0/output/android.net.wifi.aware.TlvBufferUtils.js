Ext.data.JsonP.android_net_wifi_aware_TlvBufferUtils({"tagname":"class","name":"android.net.wifi.aware.TlvBufferUtils","autodetected":{},"files":[{"filename":"TlvBufferUtils.js","href":"TlvBufferUtils.html#android-net-wifi-aware-TlvBufferUtils"}],"extends":"java.lang.Object","hide":true,"members":[{"name":"isValid","tagname":"method","owner":"android.net.wifi.aware.TlvBufferUtils","id":"method-isValid","meta":{}},{"name":"isValidEndian","tagname":"method","owner":"android.net.wifi.aware.TlvBufferUtils","id":"method-isValidEndian","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.net.wifi.aware.TlvBufferUtils","short_doc":"Utility class to construct and parse byte arrays using the TLV format -\n Type/Length/Value format. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.net.wifi.aware.TlvBufferUtils</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/TlvBufferUtils.html#android-net-wifi-aware-TlvBufferUtils' target='_blank'>TlvBufferUtils.js</a></div></pre><div class='doc-contents'><p>Utility class to construct and parse byte arrays using the TLV format -\n Type/Length/Value format. The utilities accept a configuration of the size of\n the Type field and the Length field. A Type field size of 0 is allowed -\n allowing usage for LV (no T) array formats.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-isValid' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.wifi.aware.TlvBufferUtils'>android.net.wifi.aware.TlvBufferUtils</span><br/><a href='source/TlvBufferUtils.html#android-net-wifi-aware-TlvBufferUtils-method-isValid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.wifi.aware.TlvBufferUtils-method-isValid' class='name expandable'>isValid</a>( <span class='pre'>array, typeSize, lengthSize</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Validates that a (T)LV array is constructed correctly. ...</div><div class='long'><p>Validates that a (T)LV array is constructed correctly. I.e. that its specified Length\n fields correctly fill the specified length (and do not overshoot). Uses big-endian\n byte ordering.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>array</span> : Object {byte[]}<div class='sub-desc'><p>The (T)LV array to verify.</p>\n</div></li><li><span class='pre'>typeSize</span> : Number<div class='sub-desc'><p>The size (in bytes) of the type field. Valid values are 0, 1, or 2.</p>\n</div></li><li><span class='pre'>lengthSize</span> : Number<div class='sub-desc'><p>The size (in bytes) of the length field. Valid values are 1 or 2.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>A boolean indicating whether the array is valid (true) or invalid (false).</p>\n</div></li></ul></div></div></div><div id='method-isValidEndian' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.wifi.aware.TlvBufferUtils'>android.net.wifi.aware.TlvBufferUtils</span><br/><a href='source/TlvBufferUtils.html#android-net-wifi-aware-TlvBufferUtils-method-isValidEndian' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.wifi.aware.TlvBufferUtils-method-isValidEndian' class='name expandable'>isValidEndian</a>( <span class='pre'>array, typeSize, lengthSize, byteOrder</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Validates that a (T)LV array is constructed correctly. ...</div><div class='long'><p>Validates that a (T)LV array is constructed correctly. I.e. that its specified Length\n fields correctly fill the specified length (and do not overshoot).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>array</span> : Object {byte[]}<div class='sub-desc'><p>The (T)LV array to verify.</p>\n</div></li><li><span class='pre'>typeSize</span> : Number<div class='sub-desc'><p>The size (in bytes) of the type field. Valid values are 0, 1, or 2.</p>\n</div></li><li><span class='pre'>lengthSize</span> : Number<div class='sub-desc'><p>The size (in bytes) of the length field. Valid values are 1 or 2.</p>\n</div></li><li><span class='pre'>byteOrder</span> : Object {ByteOrder}<div class='sub-desc'><p>The endianness of the byte array: ByteOrder.BIG_ENDIAN or\n                  ByteOrder.LITTLE_ENDIAN.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>A boolean indicating whether the array is valid (true) or invalid (false).</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});