Ext.data.JsonP.android_net_http_HttpResponseCache({"tagname":"class","name":"android.net.http.HttpResponseCache","autodetected":{},"files":[{"filename":"HttpResponseCache.js","href":"HttpResponseCache.html#android-net-http-HttpResponseCache"}],"extends":"java.net.ResponseCache","members":[{"name":"close","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-close","meta":{}},{"name":"delete","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-delete","meta":{}},{"name":"flush","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-flush","meta":{}},{"name":"get","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-get","meta":{}},{"name":"getHitCount","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-getHitCount","meta":{}},{"name":"getInstalled","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-getInstalled","meta":{}},{"name":"getNetworkCount","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-getNetworkCount","meta":{}},{"name":"getRequestCount","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-getRequestCount","meta":{}},{"name":"install","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-install","meta":{}},{"name":"maxSize","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-maxSize","meta":{}},{"name":"put","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-put","meta":{}},{"name":"size","tagname":"method","owner":"android.net.http.HttpResponseCache","id":"method-size","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.net.http.HttpResponseCache","short_doc":"implements java.io.Closeable\n\nCaches HTTP and HTTPS responses to the filesystem so they may be reused,\n saving time a...","classIcon":"icon-class","superclasses":["java.net.ResponseCache"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.net.ResponseCache<div class='subclass '><strong>android.net.http.HttpResponseCache</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache' target='_blank'>HttpResponseCache.js</a></div></pre><div class='doc-contents'><p>implements java.io.Closeable</p>\n\n<p>Caches HTTP and HTTPS responses to the filesystem so they may be reused,\n saving time and bandwidth. This class supports java.net.HttpURLConnection and javax.net.ssl.HttpsURLConnection;\n there is no platform-provided cache for {@code DefaultHttpClient} or\n {@code AndroidHttpClient}. Installation and instances are thread\n safe.</p>\n\n<p> <h3>Installing an HTTP response cache</h3>\n Enable caching of all of your application's HTTP requests by installing the\n cache at application startup. For example, this code installs a 10 MiB cache\n in the application-specific\n cache directory of the filesystem}: <pre>   {@code\n   protected void onCreate(Bundle savedInstanceState) {\n       ...</pre></p>\n\n<pre><code>   try {\n       File httpCacheDir = new File(context.getCacheDir(), \"http\");\n       long httpCacheSize = 10 * 1024 * 1024; // 10 MiB\n       HttpResponseCache.install(httpCacheDir, httpCacheSize);\n   } catch (IOException e) {\n       Log.i(TAG, \"HTTP response cache installation failed:\" + e);\n   }\n</code></pre>\n\n<p>   }</p>\n\n<p>   protected void onStop() {\n       ...</p>\n\n<pre><code>   HttpResponseCache cache = HttpResponseCache.getInstalled();\n   if (cache != null) {\n       cache.flush();\n   }\n</code></pre>\n\n<p>   }}\n This cache will evict entries as necessary to keep its size from exceeding\n 10 MiB. The best cache size is application specific and depends on the size\n and frequency of the files being downloaded. Increasing the limit may improve\n the hit rate, but it may also just waste filesystem space!</p>\n\n<p> <p>For some applications it may be preferable to create the cache in the\n external storage directory. <strong>There are no access controls on the\n external storage directory so it should not be used for caches that could\n contain private data.</strong> Although it often has more free space,\n external storage is optional and&#8212;even if available&#8212;can disappear\n during use. Retrieve the external cache directory using android.content.Context.getExternalCacheDir(). If this method returns null,\n your application should fall back to either not caching or caching on\n non-external storage. If the external storage is removed during use, the\n cache hit rate will drop to zero and ongoing cache reads will fail.</p>\n\n<p> <p>Flushing the cache forces its data to the filesystem. This ensures that\n all responses written to the cache will be readable the next time the\n activity starts.</p>\n\n<p> <h3>Cache Optimization</h3>\n To measure cache effectiveness, this class tracks three statistics:\n <ul>\n     <li><strong>Request Count:</strong> the number\n         of HTTP requests issued since this cache was created.\n     <li><strong>Network Count:</strong> the\n         number of those requests that required network use.\n     <li><strong>Hit Count:</strong> the number of\n         those requests whose responses were served by the cache.\n </li></li></li></ul>\n Sometimes a request will result in a conditional cache hit. If the cache\n contains a stale copy of the response, the client will issue a conditional\n {@code GET}. The server will then send either the updated response if it has\n changed, or a short 'not modified' response if the client's copy is still\n valid. Such responses increment both the network count and hit count.</p>\n\n<p> <p>The best way to improve the cache hit rate is by configuring the web\n server to return cacheable responses. Although this client honors all <a\n href=\"http://www.ietf.org/rfc/rfc2616.txt\">HTTP/1.1 (RFC 2068)</a> cache\n headers, it doesn't cache partial responses.</p>\n\n<p> <h3>Force a Network Response</h3>\n In some situations, such as after a user clicks a 'refresh' button, it may be\n necessary to skip the cache, and fetch data directly from the server. To force\n a full refresh, add the {@code no-cache} directive: <pre>   {@code\n         connection.addRequestProperty(\"Cache-Control\", \"no-cache\");\n }</pre>\n If it is only necessary to force a cached response to be validated by the\n server, use the more efficient {@code max-age=0} instead: <pre>   {@code\n         connection.addRequestProperty(\"Cache-Control\", \"max-age=0\");\n }</pre></p>\n\n<p> <h3>Force a Cache Response</h3>\n Sometimes you'll want to show resources if they are available immediately,\n but not otherwise. This can be used so your application can show\n <i>something</i> while waiting for the latest data to be downloaded. To\n restrict a request to locally-cached resources, add the {@code\n only-if-cached} directive: <pre>   {@code\n     try {\n         connection.addRequestProperty(\"Cache-Control\", \"only-if-cached\");\n         InputStream cached = connection.getInputStream();\n         // the resource was cached! show it\n     } catch (FileNotFoundException e) {\n         // the resource was not cached\n     }\n }</pre>\n This technique works even better in situations where a stale response is\n better than no response. To permit stale cached responses, use the {@code\n max-stale} directive with the maximum staleness in seconds: <pre>   {@code\n         int maxStale = 60 * 60 * 24 * 28; // tolerate 4-weeks stale\n         connection.addRequestProperty(\"Cache-Control\", \"max-stale=\" + maxStale);\n }</pre></p>\n\n<p> <h3>Working With Earlier Releases</h3>\n This class was added in Android 4.0 (Ice Cream Sandwich). Use reflection to\n enable the response cache without impacting earlier releases: <pre>   {@code\n       try {\n           File httpCacheDir = new File(context.getCacheDir(), \"http\");\n           long httpCacheSize = 10 * 1024 * 1024; // 10 MiB\n           Class.forName(\"<a href=\"#!/api/android.net.http.HttpResponseCache\" rel=\"android.net.http.HttpResponseCache\" class=\"docClass\">android.net.http.HttpResponseCache</a>\")\n                   .getMethod(\"install\", File.class, long.class)\n                   .invoke(null, httpCacheDir, httpCacheSize);\n       } catch (Exception httpResponseCacheNotAvailable) {\n       }}</pre></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Uninstalls the cache and releases any active resources. ...</div><div class='long'><p>Uninstalls the cache and releases any active resources. Stored contents\n will remain on the filesystem.</p>\n</div></div></div><div id='method-delete' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-delete' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-delete' class='name expandable'>delete</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Uninstalls the cache and deletes all of its stored contents. ...</div><div class='long'><p>Uninstalls the cache and deletes all of its stored contents.</p>\n</div></div></div><div id='method-flush' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Force buffered operations to the filesystem. ...</div><div class='long'><p>Force buffered operations to the filesystem. This ensures that responses\n written to the cache will be available the next time the cache is opened,\n even if this process is killed.</p>\n</div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-get' class='name expandable'>get</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getHitCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-getHitCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-getHitCount' class='name expandable'>getHitCount</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of HTTP requests whose response was provided by the\n cache. ...</div><div class='long'><p>Returns the number of HTTP requests whose response was provided by the\n cache. This may include conditional {@code GET} requests that were\n validated over the network.</p>\n</div></div></div><div id='method-getInstalled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-getInstalled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-getInstalled' class='name expandable'>getInstalled</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the currently-installed {@code HttpResponseCache}, or null if\n there is no cache installed or it is not a {@c...</div><div class='long'><p>Returns the currently-installed {@code HttpResponseCache}, or null if\n there is no cache installed or it is not a {@code HttpResponseCache}.</p>\n</div></div></div><div id='method-getNetworkCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-getNetworkCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-getNetworkCount' class='name expandable'>getNetworkCount</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of HTTP requests that required the network to either\n supply a response or validate a locally cach...</div><div class='long'><p>Returns the number of HTTP requests that required the network to either\n supply a response or validate a locally cached response.</p>\n</div></div></div><div id='method-getRequestCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-getRequestCount' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-getRequestCount' class='name expandable'>getRequestCount</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the total number of HTTP requests that were made. ...</div><div class='long'><p>Returns the total number of HTTP requests that were made. This includes\n both client requests and requests that were made on the client's behalf\n to handle a redirects and retries.</p>\n</div></div></div><div id='method-install' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-install' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-install' class='name expandable'>install</a>( <span class='pre'>directory, maxSize</span> ) : Object {android.net.http.HttpResponseCache}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new HTTP response cache and sets it as the system default cache. ...</div><div class='long'><p>Creates a new HTTP response cache and sets it as the system default cache.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>directory</span> : Object {File}<div class='sub-desc'><p>the directory to hold cache data.</p>\n</div></li><li><span class='pre'>maxSize</span> : Number<div class='sub-desc'><p>the maximum size of the cache in bytes.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.http.HttpResponseCache}</span><div class='sub-desc'><p>the newly-installed cache</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if {@code directory} cannot be used for this cache.\n     Most applications should respond to this exception by logging a\n     warning.</p>\n</div></li></ul></div></div></div><div id='method-maxSize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-maxSize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-maxSize' class='name expandable'>maxSize</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the maximum number of bytes that this cache should use to store\n its data. ...</div><div class='long'><p>Returns the maximum number of bytes that this cache should use to store\n its data.</p>\n</div></div></div><div id='method-put' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-put' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-put' class='name expandable'>put</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-size' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.http.HttpResponseCache'>android.net.http.HttpResponseCache</span><br/><a href='source/HttpResponseCache.html#android-net-http-HttpResponseCache-method-size' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.http.HttpResponseCache-method-size' class='name expandable'>size</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of bytes currently being used to store the values in\n this cache. ...</div><div class='long'><p>Returns the number of bytes currently being used to store the values in\n this cache. This may be greater than the <a href=\"#!/api/android.net.http.HttpResponseCache-method-maxSize\" rel=\"android.net.http.HttpResponseCache-method-maxSize\" class=\"docClass\">maxSize</a> if a background\n deletion is pending. {@code -1} is returned if the size cannot be determined.</p>\n</div></div></div></div></div></div></div>","meta":{}});