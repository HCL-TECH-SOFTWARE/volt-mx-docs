Ext.data.JsonP.java_time_chrono_Era({"tagname":"class","name":"java.time.chrono.Era","autodetected":{},"files":[{"filename":"Era.js","href":"Era.html#java-time-chrono-Era"}],"since":"1.8","members":[{"name":"adjustInto","tagname":"method","owner":"java.time.chrono.Era","id":"method-adjustInto","meta":{}},{"name":"get","tagname":"method","owner":"java.time.chrono.Era","id":"method-get","meta":{}},{"name":"getDisplayName","tagname":"method","owner":"java.time.chrono.Era","id":"method-getDisplayName","meta":{}},{"name":"getLong","tagname":"method","owner":"java.time.chrono.Era","id":"method-getLong","meta":{}},{"name":"getValue","tagname":"method","owner":"java.time.chrono.Era","id":"method-getValue","meta":{}},{"name":"isSupported","tagname":"method","owner":"java.time.chrono.Era","id":"method-isSupported","meta":{}},{"name":"query","tagname":"method","owner":"java.time.chrono.Era","id":"method-query","meta":{}},{"name":"range","tagname":"method","owner":"java.time.chrono.Era","id":"method-range","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.chrono.Era","short_doc":"implements java.time.temporal.TemporalAccessor\n\n implements java.time.temporal.TemporalAdjuster\n\n An era of the time-...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Era.html#java-time-chrono-Era' target='_blank'>Era.js</a></div></pre><div class='doc-contents'><p>implements java.time.temporal.TemporalAccessor</p>\n\n<p> implements java.time.temporal.TemporalAdjuster</p>\n\n<p> An era of the time-line.\n <p>\n Most calendar systems have a single epoch dividing the time-line into two eras.\n However, some calendar systems, have multiple eras, such as one for the reign\n of each leader.\n In all cases, the era is conceptually the largest division of the time-line.\n Each chronology defines the Era's that are known Eras and a\n <a href=\"#!/api/java.time.chrono.Chronology-method-eras\" rel=\"java.time.chrono.Chronology-method-eras\" class=\"docClass\">java.time.chrono.Chronology.eras</a> to get the valid eras.\n <p>\n For example, the Thai Buddhist calendar system divides time into two eras,\n before and after a single date. By contrast, the Japanese calendar system\n has one era for the reign of each Emperor.\n <p>\n Instances of {@code Era} may be compared using the {@code ==} operator.</p>\n\n<p> @implSpec\n This interface must be implemented with care to ensure other classes operate correctly.\n All implementations must be singletons - final, immutable and thread-safe.\n It is recommended to use an enum whenever possible.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-adjustInto' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.chrono.Era'>java.time.chrono.Era</span><br/><a href='source/Era.html#java-time-chrono-Era-method-adjustInto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.chrono.Era-method-adjustInto' class='name expandable'>adjustInto</a>( <span class='pre'>temporal</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adjusts the specified temporal object to have the same era as this object. ...</div><div class='long'><p>Adjusts the specified temporal object to have the same era as this object.\n <p>\n This returns a temporal object of the same observable type as the input\n with the era changed to be the same as this.\n <p>\n The adjustment is equivalent to using long)\n passing ChronoField.ERA as the field.\n <p>\n In most cases, it is clearer to reverse the calling pattern by using\n Temporal.with(TemporalAdjuster):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisEra.adjustInto(temporal);\n   temporal = temporal.with(thisEra);\n </pre>\n\n\n<p> <p>\n This instance is immutable and unaffected by this method call.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the target object to be adjusted, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>the adjusted object, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to make the adjustment</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.chrono.Era'>java.time.chrono.Era</span><br/><a href='source/Era.html#java-time-chrono-Era-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.chrono.Era-method-get' class='name expandable'>get</a>( <span class='pre'>field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field from this era as an {@code int}. ...</div><div class='long'><p>Gets the value of the specified field from this era as an {@code int}.\n <p>\n This queries this era for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The {@code ERA} field returns the value of the era.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained or\n         the value is outside the range of valid values for the field</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported or\n         the range of values exceeds an {@code int}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getDisplayName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.chrono.Era'>java.time.chrono.Era</span><br/><a href='source/Era.html#java-time-chrono-Era-method-getDisplayName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.chrono.Era-method-getDisplayName' class='name expandable'>getDisplayName</a>( <span class='pre'>style, locale</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the textual representation of this era. ...</div><div class='long'><p>Gets the textual representation of this era.\n <p>\n This returns the textual name used to identify the era,\n suitable for presentation to the user.\n The parameters control the style of the returned text and the locale.\n <p>\n If no textual mapping is found then the numeric value is returned.\n <p>\n This default implementation is suitable for all implementations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>style</span> : Object {TextStyle}<div class='sub-desc'><p>the style of the text required, not null</p>\n</div></li><li><span class='pre'>locale</span> : Object {Locale}<div class='sub-desc'><p>the locale to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the text value of the era, not null</p>\n</div></li></ul></div></div></div><div id='method-getLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.chrono.Era'>java.time.chrono.Era</span><br/><a href='source/Era.html#java-time-chrono-Era-method-getLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.chrono.Era-method-getLong' class='name expandable'>getLong</a>( <span class='pre'>field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field from this era as a {@code long}. ...</div><div class='long'><p>Gets the value of the specified field from this era as a {@code long}.\n <p>\n This queries this era for the value of the specified field.\n If it is not possible to return the value, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The {@code ERA} field returns the value of the era.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n passing {@code this} as the argument. Whether the value can be obtained,\n and what the value represents, is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.chrono.Era'>java.time.chrono.Era</span><br/><a href='source/Era.html#java-time-chrono-Era-method-getValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.chrono.Era-method-getValue' class='name expandable'>getValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the numeric value associated with the era as defined by the chronology. ...</div><div class='long'><p>Gets the numeric value associated with the era as defined by the chronology.\n Each chronology defines the predefined Eras and methods to list the Eras\n of the chronology.\n <p>\n All fields, including eras, have an associated numeric value.\n The meaning of the numeric value for era is determined by the chronology\n according to these principles:\n <ul>\n <li>The era in use at the epoch 1970-01-01 (ISO) has the value 1.\n <li>Later eras have sequentially higher values.\n <li>Earlier eras have sequentially lower values, which may be negative.\n </li></li></li></ul></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the numeric era value</p>\n</div></li></ul></div></div></div><div id='method-isSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.chrono.Era'>java.time.chrono.Era</span><br/><a href='source/Era.html#java-time-chrono-Era-method-isSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.chrono.Era-method-isSupported' class='name expandable'>isSupported</a>( <span class='pre'>field</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the specified field is supported. ...</div><div class='long'><p>Checks if the specified field is supported.\n <p>\n This checks if this era can be queried for the specified field.\n If false, then calling the range and\n get methods will throw an exception.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The {@code ERA} field returns true.\n All other {@code ChronoField} instances will return false.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the field is supported is determined by the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the field is supported on this era, false if not</p>\n</div></li></ul></div></div></div><div id='method-query' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.chrono.Era'>java.time.chrono.Era</span><br/><a href='source/Era.html#java-time-chrono-Era-method-query' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.chrono.Era-method-query' class='name expandable'>query</a>( <span class='pre'>query, query</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries this era using the specified query. ...</div><div class='long'><p>Queries this era using the specified query.\n <p>\n This queries this era using the specified query strategy object.\n The {@code TemporalQuery} object defines the logic to be used to\n obtain the result. Read the documentation of the query to understand\n what the result of this method will be.\n <p>\n The result of this method is obtained by invoking the\n TemporalQuery.queryFrom(TemporalAccessor) method on the\n specified query passing {@code this} as the argument.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>query</span> : Object {java.time.temporal.TemporalQuery}<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li><li><span class='pre'>query</span> : Object<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the query result, null may be returned (defined by the query)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to query (defined by the query)</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs (defined by the query)</p>\n</div></li></ul></div></div></div><div id='method-range' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.chrono.Era'>java.time.chrono.Era</span><br/><a href='source/Era.html#java-time-chrono-Era-method-range' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.chrono.Era-method-range' class='name expandable'>range</a>( <span class='pre'>field</span> ) : Object {java.time.temporal.ValueRange}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the range of valid values for the specified field. ...</div><div class='long'><p>Gets the range of valid values for the specified field.\n <p>\n The range object expresses the minimum and maximum valid values for a field.\n This era is used to enhance the accuracy of the returned range.\n If it is not possible to return the range, because the field is not supported\n or for some other reason, an exception is thrown.\n <p>\n If the field is a ChronoField then the query is implemented here.\n The {@code ERA} field returns the range.\n All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n <p>\n If the field is not a {@code ChronoField}, then the result of this method\n is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n passing {@code this} as the argument.\n Whether the range can be obtained is determined by the field.\n <p>\n The default implementation must return a range for {@code ERA} from\n zero to one, suitable for two era calendar systems such as ISO.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to query the range for, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.ValueRange}</span><div class='sub-desc'><p>the range of valid values for the field, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the range for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});