Ext.data.JsonP.java_lang_ref_WeakReference({"tagname":"class","name":"java.lang.ref.WeakReference","autodetected":{},"files":[{"filename":"WeakReference.js","href":"WeakReference.html#java-lang-ref-WeakReference"}],"extends":"java.lang.ref.Reference","author":[{"tagname":"author","name":"Mark Reinhold","email":null}],"since":"1.2","members":[{"name":"clear","tagname":"method","owner":"java.lang.ref.Reference","id":"method-clear","meta":{}},{"name":"enqueue","tagname":"method","owner":"java.lang.ref.Reference","id":"method-enqueue","meta":{}},{"name":"get","tagname":"method","owner":"java.lang.ref.Reference","id":"method-get","meta":{}},{"name":"isEnqueued","tagname":"method","owner":"java.lang.ref.Reference","id":"method-isEnqueued","meta":{}},{"name":"reachabilityFence","tagname":"method","owner":"java.lang.ref.Reference","id":"method-reachabilityFence","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.ref.WeakReference","short_doc":"Weak reference objects, which do not prevent their referents from being\n made finalizable, finalized, and then reclai...","classIcon":"icon-class","superclasses":["java.lang.Object","java.lang.ref.Reference"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.lang.ref.Reference' rel='java.lang.ref.Reference' class='docClass'>java.lang.ref.Reference</a><div class='subclass '><strong>java.lang.ref.WeakReference</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/WeakReference.html#java-lang-ref-WeakReference' target='_blank'>WeakReference.js</a></div></pre><div class='doc-contents'><p>Weak reference objects, which do not prevent their referents from being\n made finalizable, finalized, and then reclaimed.  Weak references are most\n often used to implement canonicalizing mappings.</p>\n\n<p> <p> Suppose that the garbage collector determines at a certain point in time\n that an object is <a href=\"package-summary.html#reachability\">weakly\n reachable</a>.  At that time it will atomically clear all weak references to\n that object and all weak references to any other weakly-reachable objects\n from which that object is reachable through a chain of strong and soft\n references.  At the same time it will declare all of the formerly\n weakly-reachable objects to be finalizable.  At the same time or at some\n later time it will enqueue those newly-cleared weak references that are\n registered with reference queues.</p>\n        <p>Available since: <b>1.2</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-clear' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.ref.Reference' rel='java.lang.ref.Reference' class='defined-in docClass'>java.lang.ref.Reference</a><br/><a href='source/Reference.html#java-lang-ref-Reference-method-clear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ref.Reference-method-clear' class='name expandable'>clear</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Clears this reference object. ...</div><div class='long'><p>Clears this reference object.  Invoking this method will not cause this\n object to be enqueued.</p>\n\n<p> <p> This method is invoked only by Java code; when the garbage collector\n clears references it does so directly, without invoking this method.</p>\n</div></div></div><div id='method-enqueue' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.ref.Reference' rel='java.lang.ref.Reference' class='defined-in docClass'>java.lang.ref.Reference</a><br/><a href='source/Reference.html#java-lang-ref-Reference-method-enqueue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ref.Reference-method-enqueue' class='name expandable'>enqueue</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds this reference object to the queue with which it is registered,\n if any. ...</div><div class='long'><p>Adds this reference object to the queue with which it is registered,\n if any.</p>\n\n<p> <p> This method is invoked only by Java code; when the garbage collector\n enqueues references it does so directly, without invoking this method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if this reference object was successfully\n           enqueued; <code>false</code> if it was already enqueued or if\n           it was not registered with a queue when it was created</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.ref.Reference' rel='java.lang.ref.Reference' class='defined-in docClass'>java.lang.ref.Reference</a><br/><a href='source/Reference.html#java-lang-ref-Reference-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ref.Reference-method-get' class='name expandable'>get</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this reference object's referent. ...</div><div class='long'><p>Returns this reference object's referent.  If this reference object has\n been cleared, either by the program or by the garbage collector, then\n this method returns <code>null</code>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>The object to which this reference refers, or\n           <code>null</code> if this reference object has been cleared</p>\n</div></li></ul></div></div></div><div id='method-isEnqueued' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.ref.Reference' rel='java.lang.ref.Reference' class='defined-in docClass'>java.lang.ref.Reference</a><br/><a href='source/Reference.html#java-lang-ref-Reference-method-isEnqueued' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ref.Reference-method-isEnqueued' class='name expandable'>isEnqueued</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether or not this reference object has been enqueued, either by\n the program or by the garbage collector. ...</div><div class='long'><p>Tells whether or not this reference object has been enqueued, either by\n the program or by the garbage collector.  If this reference object was\n not registered with a queue when it was created, then this method will\n always return <code>false</code>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if and only if this reference object has\n           been enqueued</p>\n</div></li></ul></div></div></div><div id='method-reachabilityFence' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.ref.Reference' rel='java.lang.ref.Reference' class='defined-in docClass'>java.lang.ref.Reference</a><br/><a href='source/Reference.html#java-lang-ref-Reference-method-reachabilityFence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ref.Reference-method-reachabilityFence' class='name expandable'>reachabilityFence</a>( <span class='pre'>ref, ref</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Ensures that the object referenced by the given reference remains\n strongly reachable,\n regardless of any prior actio...</div><div class='long'><p>Ensures that the object referenced by the given reference remains\n <a href=\"package-summary.html#reachability\"><em>strongly reachable</em></a>,\n regardless of any prior actions of the program that might otherwise cause\n the object to become unreachable; thus, the referenced object is not\n reclaimable by garbage collection at least until after the invocation of\n this method.  Invocation of this method does not itself initiate garbage\n collection or finalization.</p>\n\n<p> <p> This method establishes an ordering for\n <a href=\"package-summary.html#reachability\"><em>strong reachability</em></a>\n with respect to garbage collection.  It controls relations that are\n otherwise only implicit in a program -- the reachability conditions\n triggering garbage collection.  This method is designed for use in\n uncommon situations of premature finalization where using\n {@code synchronized} blocks or methods, or using other synchronization\n facilities are not possible or do not provide the desired control.  This\n method is applicable only when reclamation may have visible effects,\n which is possible for objects with finalizers (See\n <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.6\">\n Section 12.6 17 of <cite>The Java&trade; Language Specification</cite></a>)\n that are implemented in ways that rely on ordering control for correctness.</p>\n        <p>Available since: <b>9</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ref</span> : Object {Object}<div class='sub-desc'><p>the reference. If {@code null}, this method has no effect.</p>\n</div></li><li><span class='pre'>ref</span> : Object<div class='sub-desc'><p>the reference. If {@code null}, this method has no effect.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});