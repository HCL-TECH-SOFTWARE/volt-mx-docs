Ext.data.JsonP.android_view_inputmethod_InputConnection({"tagname":"class","name":"android.view.inputmethod.InputConnection","autodetected":{},"files":[{"filename":"InputConnection.js","href":"InputConnection.html#android-view-inputmethod-InputConnection"}],"members":[{"name":"CURSOR_UPDATE_IMMEDIATE","tagname":"property","owner":"android.view.inputmethod.InputConnection","id":"property-CURSOR_UPDATE_IMMEDIATE","meta":{}},{"name":"CURSOR_UPDATE_MONITOR","tagname":"property","owner":"android.view.inputmethod.InputConnection","id":"property-CURSOR_UPDATE_MONITOR","meta":{}},{"name":"GET_EXTRACTED_TEXT_MONITOR","tagname":"property","owner":"android.view.inputmethod.InputConnection","id":"property-GET_EXTRACTED_TEXT_MONITOR","meta":{}},{"name":"GET_TEXT_WITH_STYLES","tagname":"property","owner":"android.view.inputmethod.InputConnection","id":"property-GET_TEXT_WITH_STYLES","meta":{}},{"name":"INPUT_CONTENT_GRANT_READ_URI_PERMISSION","tagname":"property","owner":"android.view.inputmethod.InputConnection","id":"property-INPUT_CONTENT_GRANT_READ_URI_PERMISSION","meta":{}},{"name":"beginBatchEdit","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-beginBatchEdit","meta":{}},{"name":"clearMetaKeyStates","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-clearMetaKeyStates","meta":{}},{"name":"closeConnection","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-closeConnection","meta":{}},{"name":"commitCompletion","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-commitCompletion","meta":{}},{"name":"commitContent","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-commitContent","meta":{}},{"name":"commitCorrection","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-commitCorrection","meta":{}},{"name":"commitText","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-commitText","meta":{}},{"name":"deleteSurroundingText","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-deleteSurroundingText","meta":{}},{"name":"deleteSurroundingTextInCodePoints","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-deleteSurroundingTextInCodePoints","meta":{}},{"name":"endBatchEdit","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-endBatchEdit","meta":{}},{"name":"finishComposingText","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-finishComposingText","meta":{}},{"name":"getCursorCapsMode","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-getCursorCapsMode","meta":{}},{"name":"getExtractedText","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-getExtractedText","meta":{}},{"name":"getHandler","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-getHandler","meta":{}},{"name":"getSelectedText","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-getSelectedText","meta":{}},{"name":"getTextAfterCursor","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-getTextAfterCursor","meta":{}},{"name":"getTextBeforeCursor","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-getTextBeforeCursor","meta":{}},{"name":"performContextMenuAction","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-performContextMenuAction","meta":{}},{"name":"performEditorAction","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-performEditorAction","meta":{}},{"name":"performPrivateCommand","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-performPrivateCommand","meta":{}},{"name":"reportFullscreenMode","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-reportFullscreenMode","meta":{}},{"name":"requestCursorUpdates","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-requestCursorUpdates","meta":{}},{"name":"sendKeyEvent","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-sendKeyEvent","meta":{}},{"name":"setComposingRegion","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-setComposingRegion","meta":{}},{"name":"setComposingText","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-setComposingText","meta":{}},{"name":"setSelection","tagname":"method","owner":"android.view.inputmethod.InputConnection","id":"method-setSelection","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.view.inputmethod.InputConnection","short_doc":"The InputConnection interface is the communication channel from an\n android.view.inputmethod.InputMethod back to the ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/InputConnection.html#android-view-inputmethod-InputConnection' target='_blank'>InputConnection.js</a></div></pre><div class='doc-contents'><p>The InputConnection interface is the communication channel from an\n <a href=\"#!/api/android.view.inputmethod.InputMethod\" rel=\"android.view.inputmethod.InputMethod\" class=\"docClass\">android.view.inputmethod.InputMethod</a> back to the application that is receiving its\n input. It is used to perform such things as reading text around the\n cursor, committing text to the text box, and sending raw key events\n to the application.</p>\n\n<p> <p>Starting from API Level android.os.Build.VERSION_CODES.N,\n the system can deal with the situation where the application directly\n implements this class but one or more of the following methods are\n not implemented.</p>\n <ul>\n     <li><a href=\"#!/api/android.view.inputmethod.InputConnection-method-getSelectedText\" rel=\"android.view.inputmethod.InputConnection-method-getSelectedText\" class=\"docClass\">getSelectedText</a>(int), which was introduced in\n     android.os.Build.VERSION_CODES.GINGERBREAD.</li>\n     <li>int), which was introduced\n     in android.os.Build.VERSION_CODES.GINGERBREAD.</li>\n     <li><a href=\"#!/api/android.view.inputmethod.InputConnection-method-commitCorrection\" rel=\"android.view.inputmethod.InputConnection-method-commitCorrection\" class=\"docClass\">commitCorrection</a>(CorrectionInfo), which was introduced\n     in android.os.Build.VERSION_CODES.HONEYCOMB.</li>\n     <li><a href=\"#!/api/android.view.inputmethod.InputConnection-method-requestCursorUpdates\" rel=\"android.view.inputmethod.InputConnection-method-requestCursorUpdates\" class=\"docClass\">requestCursorUpdates</a>(int), which was introduced in\n     android.os.Build.VERSION_CODES.LOLLIPOP.</li>\n     <li>int), which\n     was introduced in android.os.Build.VERSION_CODES.N.</li>\n     <li><a href=\"#!/api/android.view.inputmethod.InputConnection-method-getHandler\" rel=\"android.view.inputmethod.InputConnection-method-getHandler\" class=\"docClass\">getHandler</a>(), which was introduced in\n     android.os.Build.VERSION_CODES.N.</li>\n     <li><a href=\"#!/api/android.view.inputmethod.InputConnection-method-closeConnection\" rel=\"android.view.inputmethod.InputConnection-method-closeConnection\" class=\"docClass\">closeConnection</a>(), which was introduced in\n     android.os.Build.VERSION_CODES.N.</li>\n     <li>int, Bundle), which was\n     introduced in android.os.Build.VERSION_CODES.N_MR1.</li>\n </ul></p>\n\n<p> <h3>Implementing an IME or an editor</h3>\n <p>Text input is the result of the synergy of two essential components:\n an Input Method Engine (IME) and an editor. The IME can be a\n software keyboard, a handwriting interface, an emoji palette, a\n speech-to-text engine, and so on. There are typically several IMEs\n installed on any given Android device. In Android, IMEs extend\n android.inputmethodservice.InputMethodService.\n For more information about how to create an IME, see the\n <a href=\"{@docRoot}guide/topics/text/creating-input-method.html\">\n Creating an input method</a> guide.</p>\n\n<p> The editor is the component that receives text and displays it.\n Typically, this is an android.widget.EditText instance, but\n some applications may choose to implement their own editor for\n various reasons. This is a large and complicated task, and an\n application that does this needs to make sure the behavior is\n consistent with standard EditText behavior in Android. An editor\n needs to interact with the IME, receiving commands through\n this InputConnection interface, and sending commands through\n <a href=\"#!/api/android.view.inputmethod.InputMethodManager\" rel=\"android.view.inputmethod.InputMethodManager\" class=\"docClass\">android.view.inputmethod.InputMethodManager</a>. An editor\n should start by implementing\n android.view.View.onCreateInputConnection(EditorInfo)\n to return its own input connection.</p></p>\n\n<p> <p>If you are implementing your own IME, you will need to call the\n methods in this interface to interact with the application. Be sure\n to test your IME with a wide range of applications, including\n browsers and rich text editors, as some may have peculiarities you\n need to deal with. Remember your IME may not be the only source of\n changes on the text, and try to be as conservative as possible in\n the data you send and as liberal as possible in the data you\n receive.</p></p>\n\n<p> <p>If you are implementing your own editor, you will probably need\n to provide your own subclass of <a href=\"#!/api/android.view.inputmethod.BaseInputConnection\" rel=\"android.view.inputmethod.BaseInputConnection\" class=\"docClass\">android.view.inputmethod.BaseInputConnection</a> to\n answer to the commands from IMEs. Please be sure to test your\n editor with as many IMEs as you can as their behavior can vary a\n lot. Also be sure to test with various languages, including CJK\n languages and right-to-left languages like Arabic, as these may\n have different input requirements. When in doubt about the\n behavior you should adopt for a particular call, please mimic the\n default TextView implementation in the latest Android version, and\n if you decide to drift from it, please consider carefully that\n inconsistencies in text editor behavior is almost universally felt\n as a bad thing by users.</p></p>\n\n<p> <h3>Cursors, selections and compositions</h3>\n <p>In Android, the cursor and the selection are one and the same\n thing. A \"cursor\" is just the special case of a zero-sized\n selection. As such, this documentation uses them\n interchangeably. Any method acting \"before the cursor\" would act\n before the start of the selection if there is one, and any method\n acting \"after the cursor\" would act after the end of the\n selection.</p></p>\n\n<p> <p>An editor needs to be able to keep track of a currently\n \"composing\" region, like the standard edition widgets do. The\n composition is marked in a specific style: see\n android.text.Spanned.SPAN_COMPOSING. IMEs use this to help\n the user keep track of what part of the text they are currently\n focusing on, and interact with the editor using\n int),\n int) and\n finishComposingText().\n The composing region and the selection are completely independent\n of each other, and the IME may use them however they see fit.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-CURSOR_UPDATE_IMMEDIATE' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-property-CURSOR_UPDATE_IMMEDIATE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_IMMEDIATE' class='name expandable'>CURSOR_UPDATE_IMMEDIATE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The editor is requested to call\nCursorAnchorInfo) at\nonce, as soon as possible, regardless of cursor/anchor position ...</div><div class='long'><p>The editor is requested to call\nCursorAnchorInfo) at\nonce, as soon as possible, regardless of cursor/anchor position changes. This flag can be\nused together with <a href=\"#!/api/android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_MONITOR\" rel=\"android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_MONITOR\" class=\"docClass\">CURSOR_UPDATE_MONITOR</a>.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-CURSOR_UPDATE_MONITOR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-property-CURSOR_UPDATE_MONITOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_MONITOR' class='name expandable'>CURSOR_UPDATE_MONITOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The editor is requested to call\nCursorAnchorInfo)\nwhenever cursor/anchor position is changed. ...</div><div class='long'><p>The editor is requested to call\nCursorAnchorInfo)\nwhenever cursor/anchor position is changed. To disable monitoring, call\nrequestCursorUpdates(int) again with this flag off.</p>\n\n<p>\nThis flag can be used together with <a href=\"#!/api/android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_IMMEDIATE\" rel=\"android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_IMMEDIATE\" class=\"docClass\">CURSOR_UPDATE_IMMEDIATE</a>.\n</p>\n\n<p>Defaults to: <code>&quot;2&quot;</code></p></div></div></div><div id='property-GET_EXTRACTED_TEXT_MONITOR' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-property-GET_EXTRACTED_TEXT_MONITOR' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-property-GET_EXTRACTED_TEXT_MONITOR' class='name expandable'>GET_EXTRACTED_TEXT_MONITOR</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for use with getExtractedText to indicate you\nwould like to receive updates when the extracted text changes. ...</div><div class='long'><p>Flag for use with <a href=\"#!/api/android.view.inputmethod.InputConnection-method-getExtractedText\" rel=\"android.view.inputmethod.InputConnection-method-getExtractedText\" class=\"docClass\">getExtractedText</a> to indicate you\nwould like to receive updates when the extracted text changes.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-GET_TEXT_WITH_STYLES' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-property-GET_TEXT_WITH_STYLES' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES' class='name expandable'>GET_TEXT_WITH_STYLES</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Flag for use with getTextAfterCursor and\ngetTextBeforeCursor to have style information returned\nalong with the text. ...</div><div class='long'><p>Flag for use with <a href=\"#!/api/android.view.inputmethod.InputConnection-method-getTextAfterCursor\" rel=\"android.view.inputmethod.InputConnection-method-getTextAfterCursor\" class=\"docClass\">getTextAfterCursor</a> and\n<a href=\"#!/api/android.view.inputmethod.InputConnection-method-getTextBeforeCursor\" rel=\"android.view.inputmethod.InputConnection-method-getTextBeforeCursor\" class=\"docClass\">getTextBeforeCursor</a> to have style information returned\nalong with the text. If not set, <a href=\"#!/api/android.view.inputmethod.InputConnection-method-getTextAfterCursor\" rel=\"android.view.inputmethod.InputConnection-method-getTextAfterCursor\" class=\"docClass\">getTextAfterCursor</a>\nsends only the raw text, without style or other spans. If set,\nit may return a complex CharSequence of both text and style\nspans. <strong>Editor authors</strong>: you should strive to\nsend text with styles if possible, but it is not required.</p>\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div><div id='property-INPUT_CONTENT_GRANT_READ_URI_PERMISSION' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-property-INPUT_CONTENT_GRANT_READ_URI_PERMISSION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-property-INPUT_CONTENT_GRANT_READ_URI_PERMISSION' class='name expandable'>INPUT_CONTENT_GRANT_READ_URI_PERMISSION</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>When this flag is used, the editor will be able to request read access to the content URI\ncontained in the android.vi...</div><div class='long'><p>When this flag is used, the editor will be able to request read access to the content URI\ncontained in the <a href=\"#!/api/android.view.inputmethod.InputContentInfo\" rel=\"android.view.inputmethod.InputContentInfo\" class=\"docClass\">android.view.inputmethod.InputContentInfo</a> object.</p>\n\n<p>Make sure that the content provider owning the Uri sets the\ngrantUriPermissions attribute in its manifest or included the\n&lt;grant-uri-permissions&gt; tag. Otherwise android.view.inputmethod.InputContentInfo.requestPermission()\ncan fail.</p>\n\n\n\n\n<p>Although calling this API is allowed only for the IME that is currently selected, the\nclient is able to request a temporary read-only access even after the current IME is switched\nto any other IME as long as the client keeps <a href=\"#!/api/android.view.inputmethod.InputContentInfo\" rel=\"android.view.inputmethod.InputContentInfo\" class=\"docClass\">android.view.inputmethod.InputContentInfo</a> object.</p>\n\n<p>Defaults to: <code>&quot;1&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-beginBatchEdit' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-beginBatchEdit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-beginBatchEdit' class='name expandable'>beginBatchEdit</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tell the editor that you are starting a batch of editor\n operations. ...</div><div class='long'><p>Tell the editor that you are starting a batch of editor\n operations. The editor will try to avoid sending you updates\n about its state until <a href=\"#!/api/android.view.inputmethod.InputConnection-method-endBatchEdit\" rel=\"android.view.inputmethod.InputConnection-method-endBatchEdit\" class=\"docClass\">endBatchEdit</a> is called. Batch\n edits nest.</p>\n\n<p> <p><strong>IME authors:</strong> use this to avoid getting\n calls to\n int, int, int,\n int, int) corresponding to intermediate state. Also, use this to avoid\n flickers that may arise from displaying intermediate state. Be\n sure to call <a href=\"#!/api/android.view.inputmethod.InputConnection-method-endBatchEdit\" rel=\"android.view.inputmethod.InputConnection-method-endBatchEdit\" class=\"docClass\">endBatchEdit</a> for each call to this, or\n you may block updates in the editor.</p></p>\n\n<p> <p><strong>Editor authors:</strong> while a batch edit is in\n progress, take care not to send updates to the input method and\n not to update the display. IMEs use this intensively to this\n effect. Also please note that batch edits need to nest\n correctly.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if a batch edit is now in progress, false otherwise. Since\n this method starts a batch edit, that means it will always return true\n unless the input connection is no longer valid.</p>\n</div></li></ul></div></div></div><div id='method-clearMetaKeyStates' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-clearMetaKeyStates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-clearMetaKeyStates' class='name expandable'>clearMetaKeyStates</a>( <span class='pre'>states</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Clear the given meta key pressed states in the given input\n connection. ...</div><div class='long'><p>Clear the given meta key pressed states in the given input\n connection.</p>\n\n<p> <p>This can be used by the IME to clear the meta key states set\n by a hardware keyboard with latched meta keys, if the editor\n keeps track of these.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>states</span> : Number<div class='sub-desc'><p>The states to be cleared, may be one or more bits as\n per KeyEvent.getMetaState().</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer\n valid.</p>\n</div></li></ul></div></div></div><div id='method-closeConnection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-closeConnection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-closeConnection' class='name expandable'>closeConnection</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the system up to only once to notify that the system is about to invalidate\n connection between the input m...</div><div class='long'><p>Called by the system up to only once to notify that the system is about to invalidate\n connection between the input method and the application.</p>\n\n<p> <p><strong>Editor authors</strong>: You can clear all the nested batch edit right now and\n you no longer need to handle subsequent callbacks on this connection, including\n <a href=\"#!/api/android.view.inputmethod.InputConnection-method-beginBatchEdit\" rel=\"android.view.inputmethod.InputConnection-method-beginBatchEdit\" class=\"docClass\">beginBatchEdit</a>()}.  Note that although the system tries to call this method whenever\n possible, there may be a chance that this method is not called in some exceptional\n situations.</p></p>\n\n<p> <p>Note: This does nothing when called from input methods.</p></p>\n</div></div></div><div id='method-commitCompletion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-commitCompletion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-commitCompletion' class='name expandable'>commitCompletion</a>( <span class='pre'>text</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Commit a completion the user has selected from the possible ones\n previously reported to android.view.inputmethod.Inp...</div><div class='long'><p>Commit a completion the user has selected from the possible ones\n previously reported to <a href=\"#!/api/android.view.inputmethod.InputMethodSession-method-displayCompletions\" rel=\"android.view.inputmethod.InputMethodSession-method-displayCompletions\" class=\"docClass\">android.view.inputmethod.InputMethodSession#displayCompletions(CompletionInfo[])</a> or\n <a href=\"#!/api/android.view.inputmethod.InputMethodManager-method-displayCompletions\" rel=\"android.view.inputmethod.InputMethodManager-method-displayCompletions\" class=\"docClass\">android.view.inputmethod.InputMethodManager#displayCompletions(View, CompletionInfo[])</a>.\n This will result in the same behavior as if the user had\n selected the completion from the actual UI. In all other\n respects, this behaves like int).</p>\n\n<p> <p><strong>IME authors:</strong> please take care to send the\n same object that you received through\n android.inputmethodservice.InputMethodService.onDisplayCompletions(CompletionInfo[]).\n </p></p>\n\n<p> <p><strong>Editor authors:</strong> if you never call\n android.view.inputmethod.InputMethodSession.displayCompletions(CompletionInfo[]) or\n CompletionInfo[]) then\n a well-behaved IME should never call this on your input\n connection, but be ready to deal with misbehaving IMEs without\n crashing.</p></p>\n\n<p> <p>Calling this method (with a valid <a href=\"#!/api/android.view.inputmethod.CompletionInfo\" rel=\"android.view.inputmethod.CompletionInfo\" class=\"docClass\">android.view.inputmethod.CompletionInfo</a> object)\n will cause the editor to call\n int, int, int,\n int, int) on the current IME after the batch input is over.\n <strong>Editor authors</strong>, for this to happen you need to\n make the changes known to the input method by calling\n int, int, int, int),\n but be careful to wait until the batch edit is over if one is\n in progress.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : Object {CompletionInfo}<div class='sub-desc'><p>The committed completion.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer\n valid.</p>\n</div></li></ul></div></div></div><div id='method-commitContent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-commitContent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-commitContent' class='name expandable'>commitContent</a>( <span class='pre'>inputContentInfo, flags, opts</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the input method to commit content such as a PNG image to the editor. ...</div><div class='long'><p>Called by the input method to commit content such as a PNG image to the editor.</p>\n\n<p> <p>In order to avoid a variety of compatibility issues, this focuses on a simple use case,\n where editors and IMEs are expected to work cooperatively as follows:</p>\n <ul>\n     <li>Editor must keep <a href=\"#!/api/android.view.inputmethod.EditorInfo-property-contentMimeTypes\" rel=\"android.view.inputmethod.EditorInfo-property-contentMimeTypes\" class=\"docClass\">android.view.inputmethod.EditorInfo.contentMimeTypes</a> equal to {@code null} if it does\n     not support this method at all.</li>\n     <li>Editor can ignore this request when the MIME type specified in\n     {@code inputContentInfo} does not match any of <a href=\"#!/api/android.view.inputmethod.EditorInfo-property-contentMimeTypes\" rel=\"android.view.inputmethod.EditorInfo-property-contentMimeTypes\" class=\"docClass\">android.view.inputmethod.EditorInfo.contentMimeTypes</a>.\n     </li>\n     <li>Editor can ignore the cursor position when inserting the provided content.</li>\n     <li>Editor can return {@code true} asynchronously, even before it starts loading the\n     content.</li>\n     <li>Editor should provide a way to delete the content inserted by this method or to\n     revert the effect caused by this method.</li>\n     <li>IME should not call this method when there is any composing text, in case calling\n     this method causes a focus change.</li>\n     <li>IME should grant a permission for the editor to read the content. See\n     <a href=\"#!/api/android.view.inputmethod.EditorInfo-property-packageName\" rel=\"android.view.inputmethod.EditorInfo-property-packageName\" class=\"docClass\">android.view.inputmethod.EditorInfo.packageName</a> about how to obtain the package name of the editor.</li>\n </ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>inputContentInfo</span> : Object {InputContentInfo}<div class='sub-desc'><p>Content to be inserted.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p><a href=\"#!/api/android.view.inputmethod.InputConnection-property-INPUT_CONTENT_GRANT_READ_URI_PERMISSION\" rel=\"android.view.inputmethod.InputConnection-property-INPUT_CONTENT_GRANT_READ_URI_PERMISSION\" class=\"docClass\">INPUT_CONTENT_GRANT_READ_URI_PERMISSION</a> if the content provider\n allows grantUriPermissions or {@code 0} if the application does not need to call\n InputContentInfo.requestPermission().</p>\n</div></li><li><span class='pre'>opts</span> : Object {Bundle}<div class='sub-desc'><p>optional bundle data. This can be {@code null}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if this request is accepted by the application, whether the request\n is already handled or still being handled in background, {@code false} otherwise.</p>\n</div></li></ul></div></div></div><div id='method-commitCorrection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-commitCorrection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-commitCorrection' class='name expandable'>commitCorrection</a>( <span class='pre'>correctionInfo</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Commit a correction automatically performed on the raw user's input. ...</div><div class='long'><p>Commit a correction automatically performed on the raw user's input. A\n typical example would be to correct typos using a dictionary.</p>\n\n<p> <p>Calling this method will cause the editor to call\n int, int, int,\n int, int) on the current IME after the batch input is over.\n <strong>Editor authors</strong>, for this to happen you need to\n make the changes known to the input method by calling\n int, int, int, int),\n but be careful to wait until the batch edit is over if one is\n in progress.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>correctionInfo</span> : Object {CorrectionInfo}<div class='sub-desc'><p>Detailed information about the correction.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer valid.\n In android.os.Build.VERSION_CODES.N and later, returns false\n when the target application does not implement this method.</p>\n</div></li></ul></div></div></div><div id='method-commitText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-commitText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-commitText' class='name expandable'>commitText</a>( <span class='pre'>text, newCursorPosition</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Commit text to the text box and set the new cursor position. ...</div><div class='long'><p>Commit text to the text box and set the new cursor position.</p>\n\n<p> <p>This method removes the contents of the currently composing\n text and replaces it with the passed CharSequence, and then\n moves the cursor according to {@code newCursorPosition}. If there\n is no composing text when this method is called, the new text is\n inserted at the cursor position, removing text inside the selection\n if any. This behaves like calling\n int) setComposingText(text, newCursorPosition)\n then <a href=\"#!/api/android.view.inputmethod.InputConnection-method-finishComposingText\" rel=\"android.view.inputmethod.InputConnection-method-finishComposingText\" class=\"docClass\">finishComposingText</a>().</p></p>\n\n<p> <p>Calling this method will cause the editor to call\n int, int, int,\n int, int) on the current IME after the batch input is over.\n <strong>Editor authors</strong>, for this to happen you need to\n make the changes known to the input method by calling\n int, int, int, int),\n but be careful to wait until the batch edit is over if one is\n in progress.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>The text to commit. This may include styles.</p>\n</div></li><li><span class='pre'>newCursorPosition</span> : Number<div class='sub-desc'><p>The new cursor position around the text,\n        in Java characters. If > 0, this is relative to the end\n        of the text - 1; if &lt;= 0, this is relative to the start\n        of the text. So a value of 1 will always advance the cursor\n        to the position after the full text being inserted. Note that\n        this means you can't position the cursor within the text,\n        because the editor can make modifications to the text\n        you are providing so it is not possible to correctly specify\n        locations there.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer\n valid.</p>\n</div></li></ul></div></div></div><div id='method-deleteSurroundingText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-deleteSurroundingText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-deleteSurroundingText' class='name expandable'>deleteSurroundingText</a>( <span class='pre'>beforeLength, afterLength</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Delete beforeLength characters of text before the\n current cursor position, and delete afterLength\n characters of tex...</div><div class='long'><p>Delete <var>beforeLength</var> characters of text before the\n current cursor position, and delete <var>afterLength</var>\n characters of text after the current cursor position, excluding\n the selection. Before and after refer to the order of the\n characters in the string, not to their visual representation:\n this means you don't have to figure out the direction of the\n text and can just use the indices as-is.</p>\n\n<p> <p>The lengths are supplied in Java chars, not in code points\n or in glyphs.</p></p>\n\n<p> <p>Since this method only operates on text before and after the\n selection, it can't affect the contents of the selection. This\n may affect the composing span if the span includes characters\n that are to be deleted, but otherwise will not change it. If\n some characters in the composing span are deleted, the\n composing span will persist but get shortened by however many\n chars inside it have been removed.</p></p>\n\n<p> <p><strong>IME authors:</strong> please be careful not to\n delete only half of a surrogate pair. Also take care not to\n delete more characters than are in the editor, as that may have\n ill effects on the application. Calling this method will cause\n the editor to call\n int, int, int,\n int, int) on your service after the batch input is over.</p></p>\n\n<p> <p><strong>Editor authors:</strong> please be careful of race\n conditions in implementing this call. An IME can make a change\n to the text or change the selection position and use this\n method right away; you need to make sure the effects are\n consistent with the results of the latest edits. Also, although\n the IME should not send lengths bigger than the contents of the\n string, you should check the values for overflows and trim the\n indices to the size of the contents to avoid crashes. Since\n this changes the contents of the editor, you need to make the\n changes known to the input method by calling\n int, int, int, int),\n but be careful to wait until the batch edit is over if one is\n in progress.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>beforeLength</span> : Number<div class='sub-desc'><p>The number of characters before the cursor to be deleted, in code unit.\n        If this is greater than the number of existing characters between the beginning of the\n        text and the cursor, then this method does not fail but deletes all the characters in\n        that range.</p>\n</div></li><li><span class='pre'>afterLength</span> : Number<div class='sub-desc'><p>The number of characters after the cursor to be deleted, in code unit.\n        If this is greater than the number of existing characters between the cursor and\n        the end of the text, then this method does not fail but deletes all the characters in\n        that range.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer valid.</p>\n</div></li></ul></div></div></div><div id='method-deleteSurroundingTextInCodePoints' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-deleteSurroundingTextInCodePoints' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-deleteSurroundingTextInCodePoints' class='name expandable'>deleteSurroundingTextInCodePoints</a>( <span class='pre'>beforeLength, afterLength, afterLength</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>A variant of int). ...</div><div class='long'><p>A variant of int). Major differences are:</p>\n\n<p> <ul>\n     <li>The lengths are supplied in code points, not in Java chars or in glyphs.</>\n     <li>This method does nothing if there are one or more invalid surrogate pairs in the\n     requested range.</li>\n </li></ul></p>\n\n<p> <p><strong>Editor authors:</strong> In addition to the requirement in\n int), make sure to do nothing when one ore more invalid\n surrogate pairs are found in the requested range.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>beforeLength</span> : Number<div class='sub-desc'><p>The number of characters before the cursor to be deleted, in code points.\n        If this is greater than the number of existing characters between the beginning of the\n        text and the cursor, then this method does not fail but deletes all the characters in\n        that range.</p>\n</div></li><li><span class='pre'>afterLength</span> : Number<div class='sub-desc'><p>The number of characters after the cursor to be deleted, in code points.\n        If this is greater than the number of existing characters between the cursor and\n        the end of the text, then this method does not fail but deletes all the characters in\n        that range.</p>\n</div></li><li><span class='pre'>afterLength</span> : Object<div class='sub-desc'><p>The number of characters after the cursor to be deleted, in code points.\n        If this is greater than the number of existing characters between the cursor and\n        the end of the text, then this method does not fail but deletes all the characters in\n        that range.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer valid.  Returns\n {@code false} when the target application does not implement this method.</p>\n</div></li></ul></div></div></div><div id='method-endBatchEdit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-endBatchEdit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-endBatchEdit' class='name expandable'>endBatchEdit</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tell the editor that you are done with a batch edit previously\n initiated with beginBatchEdit. ...</div><div class='long'><p>Tell the editor that you are done with a batch edit previously\n initiated with <a href=\"#!/api/android.view.inputmethod.InputConnection-method-beginBatchEdit\" rel=\"android.view.inputmethod.InputConnection-method-beginBatchEdit\" class=\"docClass\">beginBatchEdit</a>. This ends the latest\n batch only.</p>\n\n<p> <p><strong>IME authors:</strong> make sure you call this\n exactly once for each call to <a href=\"#!/api/android.view.inputmethod.InputConnection-method-beginBatchEdit\" rel=\"android.view.inputmethod.InputConnection-method-beginBatchEdit\" class=\"docClass\">beginBatchEdit</a>.</p></p>\n\n<p> <p><strong>Editor authors:</strong> please be careful about\n batch edit nesting. Updates still to be held back until the end\n of the last batch edit.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if there is still a batch edit in progress after closing\n the latest one (in other words, if the nesting count is > 0), false\n otherwise or if the input connection is no longer valid.</p>\n</div></li></ul></div></div></div><div id='method-finishComposingText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-finishComposingText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-finishComposingText' class='name expandable'>finishComposingText</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Have the text editor finish whatever composing text is\n currently active. ...</div><div class='long'><p>Have the text editor finish whatever composing text is\n currently active. This simply leaves the text as-is, removing\n any special composing styling or other state that was around\n it. The cursor position remains unchanged.</p>\n\n<p> <p><strong>IME authors:</strong> be aware that this call may be\n expensive with some editors.</p></p>\n\n<p> <p><strong>Editor authors:</strong> please note that the cursor\n may be anywhere in the contents when this is called, including\n in the middle of the composing span or in a completely\n unrelated place. It must not move.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection\n is no longer valid.</p>\n</div></li></ul></div></div></div><div id='method-getCursorCapsMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-getCursorCapsMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-getCursorCapsMode' class='name expandable'>getCursorCapsMode</a>( <span class='pre'>reqModes</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the current capitalization mode in effect at the\n current cursor position in the text. ...</div><div class='long'><p>Retrieve the current capitalization mode in effect at the\n current cursor position in the text. See\n TextUtils.getCapsMode\n for more information.</p>\n\n<p> <p>This method may fail either if the input connection has\n become invalid (such as its process crashing) or the client is\n taking too long to respond with the text (it is given a couple\n seconds to return). In either case, 0 is returned.</p></p>\n\n<p> <p>This method does not affect the text in the editor in any\n way, nor does it affect the selection or composing spans.</p></p>\n\n<p> <p><strong>Editor authors:</strong> please be careful of race\n conditions in implementing this call. An IME can change the\n cursor position and use this method right away; you need to make\n sure the returned value is consistent with the results of the\n latest edits and changes to the cursor position.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>reqModes</span> : Number<div class='sub-desc'><p>The desired modes to retrieve, as defined by\n TextUtils.getCapsMode. These\n constants are defined so that you can simply pass the current\n TextBoxAttribute.contentType value\n directly in to here.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the caps mode flags that are in effect at the current\n cursor position. See TYPE_TEXT_FLAG_CAPS_* in android.text.InputType.</p>\n</div></li></ul></div></div></div><div id='method-getExtractedText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-getExtractedText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-getExtractedText' class='name expandable'>getExtractedText</a>( <span class='pre'>request, flags</span> ) : Object {android.view.inputmethod.ExtractedText}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the current text in the input connection's editor, and\n monitor for any changes to it. ...</div><div class='long'><p>Retrieve the current text in the input connection's editor, and\n monitor for any changes to it. This function returns with the\n current text, and optionally the input connection can send\n updates to the input method when its text changes.</p>\n\n<p> <p>This method may fail either if the input connection has\n become invalid (such as its process crashing) or the client is\n taking too long to respond with the text (it is given a couple\n seconds to return). In either case, null is returned.</p></p>\n\n<p> <p>Editor authors: as a general rule, try to comply with the\n fields in <code>request</code> for how many chars to return,\n but if performance or convenience dictates otherwise, please\n feel free to do what is most appropriate for your case. Also,\n if the\n <a href=\"#!/api/android.view.inputmethod.InputConnection-property-GET_EXTRACTED_TEXT_MONITOR\" rel=\"android.view.inputmethod.InputConnection-property-GET_EXTRACTED_TEXT_MONITOR\" class=\"docClass\">GET_EXTRACTED_TEXT_MONITOR</a> flag is set, you should be\n calling\n int, ExtractedText)\n whenever you call\n int, int, int, int).</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>request</span> : Object {ExtractedTextRequest}<div class='sub-desc'><p>Description of how the text should be returned.\n <a href=\"#!/api/android.view.inputmethod.ExtractedTextRequest\" rel=\"android.view.inputmethod.ExtractedTextRequest\" class=\"docClass\">android.view.inputmethod.ExtractedTextRequest</a></p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Additional options to control the client, either 0 or\n <a href=\"#!/api/android.view.inputmethod.InputConnection-property-GET_EXTRACTED_TEXT_MONITOR\" rel=\"android.view.inputmethod.InputConnection-property-GET_EXTRACTED_TEXT_MONITOR\" class=\"docClass\">GET_EXTRACTED_TEXT_MONITOR</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.view.inputmethod.ExtractedText}</span><div class='sub-desc'><p>an <a href=\"#!/api/android.view.inputmethod.ExtractedText\" rel=\"android.view.inputmethod.ExtractedText\" class=\"docClass\">android.view.inputmethod.ExtractedText</a>\n object describing the state of the text view and containing the\n extracted text itself, or null if the input connection is no\n longer valid of the editor can't comply with the request for\n some reason.</p>\n</div></li></ul></div></div></div><div id='method-getHandler' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-getHandler' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-getHandler' class='name expandable'>getHandler</a>( <span class='pre'></span> ) : Object {android.os.Handler}<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the android.view.inputmethod.InputMethodManager to enable application developers to specify a\n dedicated Ha...</div><div class='long'><p>Called by the <a href=\"#!/api/android.view.inputmethod.InputMethodManager\" rel=\"android.view.inputmethod.InputMethodManager\" class=\"docClass\">android.view.inputmethod.InputMethodManager</a> to enable application developers to specify a\n dedicated Handler on which incoming IPC method calls from input methods will be\n dispatched.</p>\n\n<p> <p>Note: This does nothing when called from input methods.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.os.Handler}</span><div class='sub-desc'><p>{@code null} to use the default Handler.</p>\n</div></li></ul></div></div></div><div id='method-getSelectedText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-getSelectedText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-getSelectedText' class='name expandable'>getSelectedText</a>( <span class='pre'>flags</span> ) : Object {java.lang.CharSequence}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the selected text, if any. ...</div><div class='long'><p>Gets the selected text, if any.</p>\n\n<p> <p>This method may fail if either the input connection has\n become invalid (such as its process crashing) or the client is\n taking too long to respond with the text (it is given a couple\n of seconds to return). In either case, null is returned.</p></p>\n\n<p> <p>This method must not cause any changes in the editor's\n state.</p></p>\n\n<p> <p>If <a href=\"#!/api/android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" rel=\"android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" class=\"docClass\">GET_TEXT_WITH_STYLES</a> is supplied as flags, the\n editor should return a android.text.SpannableString\n with all the spans set on the text.</p></p>\n\n<p> <p><strong>IME authors:</strong> please consider this will\n trigger an IPC round-trip that will take some time. Assume this\n method consumes a lot of time.</p></p>\n\n<p> <p><strong>Editor authors:</strong> please be careful of race\n conditions in implementing this call. An IME can make a change\n to the text or change the selection position and use this\n method right away; you need to make sure the returned value is\n consistent with the results of the latest edits.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Supplies additional options controlling how the text is\n returned. May be either 0 or <a href=\"#!/api/android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" rel=\"android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" class=\"docClass\">GET_TEXT_WITH_STYLES</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.CharSequence}</span><div class='sub-desc'><p>the text that is currently selected, if any, or null if\n no text is selected. In android.os.Build.VERSION_CODES.N and\n later, returns false when the target application does not implement\n this method.</p>\n</div></li></ul></div></div></div><div id='method-getTextAfterCursor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-getTextAfterCursor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-getTextAfterCursor' class='name expandable'>getTextAfterCursor</a>( <span class='pre'>n, flags</span> ) : Object {java.lang.CharSequence}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get n characters of text after the current cursor\n position. ...</div><div class='long'><p>Get <var>n</var> characters of text after the current cursor\n position.</p>\n\n<p> <p>This method may fail either if the input connection has\n become invalid (such as its process crashing) or the client is\n taking too long to respond with the text (it is given a couple\n seconds to return). In either case, null is returned.</p>\n\n<p> <p>This method does not affect the text in the editor in any\n way, nor does it affect the selection or composing spans.</p></p>\n\n<p> <p>If <a href=\"#!/api/android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" rel=\"android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" class=\"docClass\">GET_TEXT_WITH_STYLES</a> is supplied as flags, the\n editor should return a android.text.SpannableString\n with all the spans set on the text.</p></p>\n\n<p> <p><strong>IME authors:</strong> please consider this will\n trigger an IPC round-trip that will take some time. Assume this\n method consumes a lot of time.</p></p>\n\n<p> <p><strong>Editor authors:</strong> please be careful of race\n conditions in implementing this call. An IME can make a change\n to the text and use this method right away; you need to make\n sure the returned value is consistent with the result of the\n latest edits. Also, you may return less than n characters if performance\n dictates so, but keep in mind IMEs are relying on this for many\n functions: you should not, for example, limit the returned value to\n the current line, and specifically do not return 0 characters unless\n the cursor is really at the end of the text.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>The expected length of the text.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Supplies additional options controlling how the text is\n returned. May be either 0 or <a href=\"#!/api/android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" rel=\"android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" class=\"docClass\">GET_TEXT_WITH_STYLES</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.CharSequence}</span><div class='sub-desc'><p>the text after the cursor position; the length of the\n returned text might be less than <var>n</var>.</p>\n</div></li></ul></div></div></div><div id='method-getTextBeforeCursor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-getTextBeforeCursor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-getTextBeforeCursor' class='name expandable'>getTextBeforeCursor</a>( <span class='pre'>n, flags</span> ) : Object {java.lang.CharSequence}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get n characters of text before the current cursor\n position. ...</div><div class='long'><p>Get <var>n</var> characters of text before the current cursor\n position.</p>\n\n<p> <p>This method may fail either if the input connection has\n become invalid (such as its process crashing) or the editor is\n taking too long to respond with the text (it is given a couple\n seconds to return). In either case, null is returned. This\n method does not affect the text in the editor in any way, nor\n does it affect the selection or composing spans.</p></p>\n\n<p> <p>If <a href=\"#!/api/android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" rel=\"android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" class=\"docClass\">GET_TEXT_WITH_STYLES</a> is supplied as flags, the\n editor should return a android.text.SpannableString\n with all the spans set on the text.</p></p>\n\n<p> <p><strong>IME authors:</strong> please consider this will\n trigger an IPC round-trip that will take some time. Assume this\n method consumes a lot of time. Also, please keep in mind the\n Editor may choose to return less characters than requested even\n if they are available for performance reasons.</p></p>\n\n<p> <p><strong>Editor authors:</strong> please be careful of race\n conditions in implementing this call. An IME can make a change\n to the text and use this method right away; you need to make\n sure the returned value is consistent with the result of the\n latest edits. Also, you may return less than n characters if performance\n dictates so, but keep in mind IMEs are relying on this for many\n functions: you should not, for example, limit the returned value to\n the current line, and specifically do not return 0 characters unless\n the cursor is really at the start of the text.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>The expected length of the text.</p>\n</div></li><li><span class='pre'>flags</span> : Number<div class='sub-desc'><p>Supplies additional options controlling how the text is\n returned. May be either 0 or <a href=\"#!/api/android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" rel=\"android.view.inputmethod.InputConnection-property-GET_TEXT_WITH_STYLES\" class=\"docClass\">GET_TEXT_WITH_STYLES</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.CharSequence}</span><div class='sub-desc'><p>the text before the cursor position; the length of the\n returned text might be less than <var>n</var>.</p>\n</div></li></ul></div></div></div><div id='method-performContextMenuAction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-performContextMenuAction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-performContextMenuAction' class='name expandable'>performContextMenuAction</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Perform a context menu action on the field. ...</div><div class='long'><p>Perform a context menu action on the field. The given id may be one of:\n android.R.id.selectAll,\n android.R.id.startSelectingText, android.R.id.stopSelectingText,\n android.R.id.cut, android.R.id.copy,\n android.R.id.paste, android.R.id.copyUrl,\n or android.R.id.switchInputMethod</p>\n</div></div></div><div id='method-performEditorAction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-performEditorAction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-performEditorAction' class='name expandable'>performEditorAction</a>( <span class='pre'>editorAction</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Have the editor perform an action it has said it can do. ...</div><div class='long'><p>Have the editor perform an action it has said it can do.</p>\n\n<p> <p>This is typically used by IMEs when the user presses the key\n associated with the action.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>editorAction</span> : Number<div class='sub-desc'><p>This must be one of the action constants for\n EditorInfo.editorType, such as\n EditorInfo.EDITOR_ACTION_GO.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer\n valid.</p>\n</div></li></ul></div></div></div><div id='method-performPrivateCommand' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-performPrivateCommand' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-performPrivateCommand' class='name expandable'>performPrivateCommand</a>( <span class='pre'>action, data</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>API to send private commands from an input method to its\n connected editor. ...</div><div class='long'><p>API to send private commands from an input method to its\n connected editor. This can be used to provide domain-specific\n features that are only known between certain input methods and\n their clients. Note that because the InputConnection protocol\n is asynchronous, you have no way to get a result back or know\n if the client understood the command; you can use the\n information in <a href=\"#!/api/android.view.inputmethod.EditorInfo\" rel=\"android.view.inputmethod.EditorInfo\" class=\"docClass\">android.view.inputmethod.EditorInfo</a> to determine if a client\n supports a particular command.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : String<div class='sub-desc'><p>Name of the command to be performed. This <em>must</em>\n be a scoped name, i.e. prefixed with a package name you own, so that\n different developers will not create conflicting commands.</p>\n</div></li><li><span class='pre'>data</span> : Object {Bundle}<div class='sub-desc'><p>Any data to include with the command.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the command was sent (whether or not the\n associated editor understood it), false if the input connection is no longer\n valid.</p>\n</div></li></ul></div></div></div><div id='method-reportFullscreenMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-reportFullscreenMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-reportFullscreenMode' class='name expandable'>reportFullscreenMode</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called back when the connected IME switches between fullscreen and normal modes. ...</div><div class='long'><p>Called back when the connected IME switches between fullscreen and normal modes.</p>\n\n<p> <p>Note: On android.os.Build.VERSION_CODES.O and later devices, input methods are no\n longer allowed to directly call this method at any time. To signal this event in the target\n application, input methods should always call\n android.view.inputmethod.InputMethodService.updateFullscreenMode() instead. This approach should work on API\n android.os.Build.VERSION_CODES.N_MR1 and prior devices.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>For editor authors, the return value will always be ignored. For IME authors, this\n         always returns {@code true} on android.os.Build.VERSION_CODES.N_MR1 and prior\n         devices and {@code false} on android.os.Build.VERSION_CODES.O and later\n         devices.\n@see InputMethodManager#isFullscreenMode()</p>\n</div></li></ul></div></div></div><div id='method-requestCursorUpdates' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-requestCursorUpdates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-requestCursorUpdates' class='name expandable'>requestCursorUpdates</a>( <span class='pre'>cursorUpdateMode</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Called by the input method to ask the editor for calling back\n CursorAnchorInfo) to\n notify cursor/anchor locations. ...</div><div class='long'><p>Called by the input method to ask the editor for calling back\n CursorAnchorInfo) to\n notify cursor/anchor locations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cursorUpdateMode</span> : Number<div class='sub-desc'><p><a href=\"#!/api/android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_IMMEDIATE\" rel=\"android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_IMMEDIATE\" class=\"docClass\">CURSOR_UPDATE_IMMEDIATE</a> and/or\n <a href=\"#!/api/android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_MONITOR\" rel=\"android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_MONITOR\" class=\"docClass\">CURSOR_UPDATE_MONITOR</a>. Pass {@code 0} to disable the effect of\n <a href=\"#!/api/android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_MONITOR\" rel=\"android.view.inputmethod.InputConnection-property-CURSOR_UPDATE_MONITOR\" class=\"docClass\">CURSOR_UPDATE_MONITOR</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the request is scheduled. {@code false} to indicate that when the\n application will not call\n CursorAnchorInfo).\n In android.os.Build.VERSION_CODES.N and later, returns {@code false} also when the\n target application does not implement this method.</p>\n</div></li></ul></div></div></div><div id='method-sendKeyEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-sendKeyEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-sendKeyEvent' class='name expandable'>sendKeyEvent</a>( <span class='pre'>event</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Send a key event to the process that is currently attached\n through this input connection. ...</div><div class='long'><p>Send a key event to the process that is currently attached\n through this input connection. The event will be dispatched\n like a normal key event, to the currently focused view; this\n generally is the view that is providing this InputConnection,\n but due to the asynchronous nature of this protocol that can\n not be guaranteed and the focus may have changed by the time\n the event is received.</p>\n\n<p> <p>This method can be used to send key events to the\n application. For example, an on-screen keyboard may use this\n method to simulate a hardware keyboard. There are three types\n of standard keyboards, numeric (12-key), predictive (20-key)\n and ALPHA (QWERTY). You can specify the keyboard type by\n specify the device id of the key event.</p></p>\n\n<p> <p>You will usually want to set the flag\n KeyEvent.FLAG_SOFT_KEYBOARD\n on all key event objects you give to this API; the flag will\n not be set for you.</p></p>\n\n<p> <p>Note that it's discouraged to send such key events in normal\n operation; this is mainly for use with\n android.text.InputType.TYPE_NULL type text fields. Use\n the <a href=\"#!/api/android.view.inputmethod.InputConnection-method-commitText\" rel=\"android.view.inputmethod.InputConnection-method-commitText\" class=\"docClass\">commitText</a> family of methods to send text to the\n application instead.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>event</span> : Object {KeyEvent}<div class='sub-desc'><p>The key event.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer\n valid.\n@see KeyEvent\n@see KeyCharacterMap#NUMERIC\n@see KeyCharacterMap#PREDICTIVE\n@see KeyCharacterMap#ALPHA</p>\n</div></li></ul></div></div></div><div id='method-setComposingRegion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-setComposingRegion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-setComposingRegion' class='name expandable'>setComposingRegion</a>( <span class='pre'>start, end</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Mark a certain region of text as composing text. ...</div><div class='long'><p>Mark a certain region of text as composing text. If there was a\n composing region, the characters are left as they were and the\n composing span removed, as if <a href=\"#!/api/android.view.inputmethod.InputConnection-method-finishComposingText\" rel=\"android.view.inputmethod.InputConnection-method-finishComposingText\" class=\"docClass\">finishComposingText</a>()\n has been called. The default style for composing text is used.</p>\n\n<p> <p>The passed indices are clipped to the contents bounds. If\n the resulting region is zero-sized, no region is marked and the\n effect is the same as that of calling <a href=\"#!/api/android.view.inputmethod.InputConnection-method-finishComposingText\" rel=\"android.view.inputmethod.InputConnection-method-finishComposingText\" class=\"docClass\">finishComposingText</a>().\n The order of start and end is not important. In effect, the\n region from start to end and the region from end to start is\n the same. Editor authors, be ready to accept a start that is\n greater than end.</p></p>\n\n<p> <p>Since this does not change the contents of the text, editors should not call\n int, int, int, int) and\n IMEs should not receive\n int, int, int,\n int, int).</p></p>\n\n<p> <p>This has no impact on the cursor/selection position. It may\n result in the cursor being anywhere inside or outside the\n composing region, including cases where the selection and the\n composing region overlap partially or entirely.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>start</span> : Number<div class='sub-desc'><p>the position in the text at which the composing region begins</p>\n</div></li><li><span class='pre'>end</span> : Number<div class='sub-desc'><p>the position in the text at which the composing region ends</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer\n valid. In android.os.Build.VERSION_CODES.N and later, false is returned when the\n target application does not implement this method.</p>\n</div></li></ul></div></div></div><div id='method-setComposingText' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-setComposingText' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-setComposingText' class='name expandable'>setComposingText</a>( <span class='pre'>text, newCursorPosition</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Replace the currently composing text with the given text, and\n set the new cursor position. ...</div><div class='long'><p>Replace the currently composing text with the given text, and\n set the new cursor position. Any composing text set previously\n will be removed automatically.</p>\n\n<p> <p>If there is any composing span currently active, all\n characters that it comprises are removed. The passed text is\n added in its place, and a composing span is added to this\n text. If there is no composing span active, the passed text is\n added at the cursor position (removing selected characters\n first if any), and a composing span is added on the new text.\n Finally, the cursor is moved to the location specified by\n <code>newCursorPosition</code>.</p></p>\n\n<p> <p>This is usually called by IMEs to add or remove or change\n characters in the composing span. Calling this method will\n cause the editor to call\n int, int, int,\n int, int) on the current IME after the batch input is over.</p></p>\n\n<p> <p><strong>Editor authors:</strong> please keep in mind the\n text may be very similar or completely different than what was\n in the composing span at call time, or there may not be a\n composing span at all. Please note that although it's not\n typical use, the string may be empty. Treat this normally,\n replacing the currently composing text with an empty string.\n Also, be careful with the cursor position. IMEs rely on this\n working exactly as described above. Since this changes the\n contents of the editor, you need to make the changes known to\n the input method by calling\n int, int, int, int),\n but be careful to wait until the batch edit is over if one is\n in progress. Note that this method can set the cursor position\n on either edge of the composing text or entirely outside it,\n but the IME may also go on to move the cursor position to\n within the composing text in a subsequent call so you should\n make no assumption at all: the composing text and the selection\n are entirely independent.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : Object {CharSequence}<div class='sub-desc'><p>The composing text with styles if necessary. If no style\n        object attached to the text, the default style for composing text\n        is used. See android.text.Spanned for how to attach style\n        object to the text. android.text.SpannableString and\n        android.text.SpannableStringBuilder are two\n        implementations of the interface android.text.Spanned.</p>\n</div></li><li><span class='pre'>newCursorPosition</span> : Number<div class='sub-desc'><p>The new cursor position around the text. If\n        > 0, this is relative to the end of the text - 1; if &lt;= 0, this\n        is relative to the start of the text. So a value of 1 will\n        always advance you to the position after the full text being\n        inserted. Note that this means you can't position the cursor\n        within the text, because the editor can make modifications to\n        the text you are providing so it is not possible to correctly\n        specify locations there.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer\n valid.</p>\n</div></li></ul></div></div></div><div id='method-setSelection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.view.inputmethod.InputConnection'>android.view.inputmethod.InputConnection</span><br/><a href='source/InputConnection.html#android-view-inputmethod-InputConnection-method-setSelection' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.view.inputmethod.InputConnection-method-setSelection' class='name expandable'>setSelection</a>( <span class='pre'>start, end</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the selection of the text editor. ...</div><div class='long'><p>Set the selection of the text editor. To set the cursor\n position, start and end should have the same value.</p>\n\n<p> <p>Since this moves the cursor, calling this method will cause\n the editor to call\n int, int, int,\n int, int) on the current IME after the batch input is over.\n <strong>Editor authors</strong>, for this to happen you need to\n make the changes known to the input method by calling\n int, int, int, int),\n but be careful to wait until the batch edit is over if one is\n in progress.</p></p>\n\n<p> <p>This has no effect on the composing region which must stay\n unchanged. The order of start and end is not important. In\n effect, the region from start to end and the region from end to\n start is the same. Editor authors, be ready to accept a start\n that is greater than end.</p></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>start</span> : Number<div class='sub-desc'><p>the character index where the selection should start.</p>\n</div></li><li><span class='pre'>end</span> : Number<div class='sub-desc'><p>the character index where the selection should end.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true on success, false if the input connection is no longer\n valid.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});