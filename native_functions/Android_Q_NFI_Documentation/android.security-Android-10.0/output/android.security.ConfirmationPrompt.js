Ext.data.JsonP.android_security_ConfirmationPrompt({"tagname":"class","name":"android.security.ConfirmationPrompt","autodetected":{},"files":[{"filename":"ConfirmationPrompt.js","href":"ConfirmationPrompt.html#android-security-ConfirmationPrompt"}],"extends":"java.lang.Object","members":[{"name":"cancelPrompt","tagname":"method","owner":"android.security.ConfirmationPrompt","id":"method-cancelPrompt","meta":{}},{"name":"isSupported","tagname":"method","owner":"android.security.ConfirmationPrompt","id":"method-isSupported","meta":{}},{"name":"presentPrompt","tagname":"method","owner":"android.security.ConfirmationPrompt","id":"method-presentPrompt","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.security.ConfirmationPrompt","short_doc":"Class used for displaying confirmation prompts. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.security.ConfirmationPrompt</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ConfirmationPrompt.html#android-security-ConfirmationPrompt' target='_blank'>ConfirmationPrompt.js</a></div></pre><div class='doc-contents'><p>Class used for displaying confirmation prompts.</p>\n\n<p> <p>Confirmation prompts are prompts shown to the user to confirm a given text and are\n implemented in a way that a positive response indicates with high confidence that the user has\n seen the given text, even if the Android framework (including the kernel) was\n compromised. Implementing confirmation prompts with these guarantees requires dedicated\n hardware-support and may not always be available.</p>\n\n<p> <p>Confirmation prompts are typically used with an external entitity - the <i>Relying Party</i> -\n in the following way. The setup steps are as follows:\n <ul>\n <li> Before first use, the application generates a key-pair with the\n CONFIRMATION tag set. Device attestation,\n e.g. getCertificateChain(), is used to\n generate a certificate chain that includes the public key (<code>Kpub</code> in the following)\n of the newly generated key.\n <li> The application sends <code>Kpub</code> and the certificate chain resulting from device\n attestation to the <i>Relying Party</i>.\n <li> The <i>Relying Party</i> validates the certificate chain which involves checking the root\n certificate is what is expected (e.g. a certificate from Google), each certificate signs the\n next one in the chain, ending with <code>Kpub</code>, and that the attestation certificate\n asserts that <code>Kpub</code> has the\n CONFIRMATION tag set.\n Additionally the relying party stores <code>Kpub</code> and associates it with the device\n it was received from.\n </li></li></li></ul></p>\n\n<p> <p>The <i>Relying Party</i> is typically an external device (for example connected via\n Bluetooth) or application server.</p>\n\n<p> <p>Before executing a transaction which requires a high assurance of user content, the\n application does the following:\n <ul>\n <li> The application gets a cryptographic nonce from the <i>Relying Party</i> and passes this as\n the <code>extraData</code> (via the Builder helper class) to the\n <a href=\"#!/api/android.security.ConfirmationPrompt-method-presentPrompt\" rel=\"android.security.ConfirmationPrompt-method-presentPrompt\" class=\"docClass\">presentPrompt()</a> method. The <i>Relying Party</i> stores the nonce locally\n since it'll use it in a later step.\n <li> If the user approves the prompt a <i>Confirmation Response</i> is returned in the\n <a href=\"#!/api/android.security.ConfirmationCallback-method-onConfirmed\" rel=\"android.security.ConfirmationCallback-method-onConfirmed\" class=\"docClass\">onConfirmed(byte[])</a> callback as the\n <code>dataThatWasConfirmed</code> parameter. This blob contains the text that was shown to the\n user, the <code>extraData</code> parameter, and possibly other data.\n <li> The application signs the <i>Confirmation Response</i> with the previously created key and\n sends the blob and the signature to the <i>Relying Party</i>.\n <li> The <i>Relying Party</i> checks that the signature was made with <code>Kpub</code> and then\n extracts <code>promptText</code> matches what is expected and <code>extraData</code> matches the\n previously created nonce. If all checks passes, the transaction is executed.\n </li></li></li></li></ul></p>\n\n<p> <p>A common way of implementing the \"<code>promptText</code> is what is expected\" check in the\n last bullet, is to have the <i>Relying Party</i> generate <code>promptText</code> and store it\n along the nonce in the <code>extraData</code> blob.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cancelPrompt' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.ConfirmationPrompt'>android.security.ConfirmationPrompt</span><br/><a href='source/ConfirmationPrompt.html#android-security-ConfirmationPrompt-method-cancelPrompt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.ConfirmationPrompt-method-cancelPrompt' class='name expandable'>cancelPrompt</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Cancels a prompt currently being displayed. ...</div><div class='long'><p>Cancels a prompt currently being displayed.</p>\n\n<p> On success, the\n <a href=\"#!/api/android.security.ConfirmationCallback-method-onCanceled\" rel=\"android.security.ConfirmationCallback-method-onCanceled\" class=\"docClass\">onCanceled()</a> method on\n the supplied callback object will be called asynchronously.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if no prompt is currently being presented.</p>\n</div></li></ul></div></div></div><div id='method-isSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.ConfirmationPrompt'>android.security.ConfirmationPrompt</span><br/><a href='source/ConfirmationPrompt.html#android-security-ConfirmationPrompt-method-isSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.ConfirmationPrompt-method-isSupported' class='name expandable'>isSupported</a>( <span class='pre'>context</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the device supports confirmation prompts. ...</div><div class='long'><p>Checks if the device supports confirmation prompts.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>the application context.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if confirmation prompts are supported by the device.</p>\n</div></li></ul></div></div></div><div id='method-presentPrompt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.security.ConfirmationPrompt'>android.security.ConfirmationPrompt</span><br/><a href='source/ConfirmationPrompt.html#android-security-ConfirmationPrompt-method-presentPrompt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.security.ConfirmationPrompt-method-presentPrompt' class='name expandable'>presentPrompt</a>( <span class='pre'>executor, callback</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Requests a confirmation prompt to be presented to the user. ...</div><div class='long'><p>Requests a confirmation prompt to be presented to the user.</p>\n\n<p> When the prompt is no longer being presented, one of the methods in\n <a href=\"#!/api/android.security.ConfirmationCallback\" rel=\"android.security.ConfirmationCallback\" class=\"docClass\">android.security.ConfirmationCallback</a> is called on the supplied callback object.</p>\n\n<p> Confirmation prompts may not be available when accessibility services are running so this\n may fail with a <a href=\"#!/api/android.security.ConfirmationNotAvailableException\" rel=\"android.security.ConfirmationNotAvailableException\" class=\"docClass\">android.security.ConfirmationNotAvailableException</a> exception even if\n <a href=\"#!/api/android.security.ConfirmationPrompt-method-isSupported\" rel=\"android.security.ConfirmationPrompt-method-isSupported\" class=\"docClass\">isSupported</a> returns {@code true}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>executor</span> : Object {Executor}<div class='sub-desc'><p>the executor identifying the thread that will receive the callback.</p>\n</div></li><li><span class='pre'>callback</span> : Object {ConfirmationCallback}<div class='sub-desc'><p>the callback to use when the prompt is done showing.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if the prompt text is too long or malfomed.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ConfirmationAlreadyPresentingException if another prompt is being presented.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ConfirmationNotAvailableException if confirmation prompts are not supported.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});