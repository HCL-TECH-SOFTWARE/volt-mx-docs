Ext.data.JsonP.java_time_temporal_TemporalAdjuster({"tagname":"class","name":"java.time.temporal.TemporalAdjuster","autodetected":{},"files":[{"filename":"TemporalAdjuster.js","href":"TemporalAdjuster.html#java-time-temporal-TemporalAdjuster"}],"since":"1.8","members":[{"name":"adjustInto","tagname":"method","owner":"java.time.temporal.TemporalAdjuster","id":"method-adjustInto","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.temporal.TemporalAdjuster","short_doc":"Strategy for adjusting a temporal object. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/TemporalAdjuster.html#java-time-temporal-TemporalAdjuster' target='_blank'>TemporalAdjuster.js</a></div></pre><div class='doc-contents'><p>Strategy for adjusting a temporal object.\n <p>\n Adjusters are a key tool for modifying temporal objects.\n They exist to externalize the process of adjustment, permitting different\n approaches, as per the strategy design pattern.\n Examples might be an adjuster that sets the date avoiding weekends, or one that\n sets the date to the last day of the month.\n <p>\n There are two equivalent ways of using a {@code TemporalAdjuster}.\n The first is to invoke the method on this interface directly.\n The second is to use java.time.temporal.Temporal.with(java.time.temporal.TemporalAdjuster):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisAdjuster.adjustInto(temporal);\n   temporal = temporal.with(thisAdjuster);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code with(TemporalAdjuster)},\n as it is a lot clearer to read in code.\n <p>\n The <a href=\"#!/api/java.time.temporal.TemporalAdjusters\" rel=\"java.time.temporal.TemporalAdjusters\" class=\"docClass\">java.time.temporal.TemporalAdjusters</a> class contains a standard set of adjusters,\n available as static methods.\n These include:\n <ul>\n <li>finding the first or last day of the month\n <li>finding the first day of next month\n <li>finding the first or last day of the year\n <li>finding the first day of next year\n <li>finding the first or last day-of-week within a month, such as \"first Wednesday in June\"\n <li>finding the next or previous day-of-week, such as \"next Thursday\"\n </li></li></li></li></li></li></ul></p>\n\n<p> @implSpec\n This interface places no restrictions on the mutability of implementations,\n however immutability is strongly recommended.</p>\n\n<p> @see TemporalAdjusters</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-adjustInto' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAdjuster'>java.time.temporal.TemporalAdjuster</span><br/><a href='source/TemporalAdjuster.html#java-time-temporal-TemporalAdjuster-method-adjustInto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAdjuster-method-adjustInto' class='name expandable'>adjustInto</a>( <span class='pre'>temporal, temporal</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adjusts the specified temporal object. ...</div><div class='long'><p>Adjusts the specified temporal object.\n <p>\n This adjusts the specified temporal object using the logic\n encapsulated in the implementing class.\n Examples might be an adjuster that sets the date avoiding weekends, or one that\n sets the date to the last day of the month.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.Temporal.with(java.time.temporal.TemporalAdjuster):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisAdjuster.adjustInto(temporal);\n   temporal = temporal.with(thisAdjuster);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code with(TemporalAdjuster)},\n as it is a lot clearer to read in code.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the temporal object to adjust, not null</p>\n</div></li><li><span class='pre'>temporal</span> : Object<div class='sub-desc'><p>the temporal object to adjust, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>an object of the same observable type with the adjustment made, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to make the adjustment</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});