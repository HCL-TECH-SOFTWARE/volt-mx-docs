Ext.data.JsonP.java_time_temporal_TemporalQuery({"tagname":"class","name":"java.time.temporal.TemporalQuery","autodetected":{},"files":[{"filename":"TemporalQuery.js","href":"TemporalQuery.html#java-time-temporal-TemporalQuery"}],"params":[{"tagname":"params","doc":"<p><R> the type returned from the query</R></p>\n"}],"since":"1.8","members":[{"name":"queryFrom","tagname":"method","owner":"java.time.temporal.TemporalQuery","id":"method-queryFrom","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.temporal.TemporalQuery","short_doc":"Strategy for querying a temporal object. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/TemporalQuery.html#java-time-temporal-TemporalQuery' target='_blank'>TemporalQuery.js</a></div></pre><div class='doc-contents'><p>Strategy for querying a temporal object.\n <p>\n Queries are a key tool for extracting information from temporal objects.\n They exist to externalize the process of querying, permitting different\n approaches, as per the strategy design pattern.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday.\n <p>\n The <a href=\"#!/api/java.time.temporal.TemporalField\" rel=\"java.time.temporal.TemporalField\" class=\"docClass\">java.time.temporal.TemporalField</a> interface provides another mechanism for querying\n temporal objects. That interface is limited to returning a {@code long}.\n By contrast, queries can return any type.\n <p>\n There are two equivalent ways of using a {@code TemporalQuery}.\n The first is to invoke the method on this interface directly.\n The second is to use java.time.temporal.TemporalAccessor.query(TemporalQuery):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisQuery.queryFrom(temporal);\n   temporal = temporal.query(thisQuery);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code query(TemporalQuery)},\n as it is a lot clearer to read in code.\n <p>\n The most common implementations are method references, such as\n {@code LocalDate::from} and {@code ZoneId::from}.\n Additional common queries are provided as static methods in <a href=\"#!/api/java.time.temporal.TemporalQueries\" rel=\"java.time.temporal.TemporalQueries\" class=\"docClass\">java.time.temporal.TemporalQueries</a>.</p>\n\n<p> @implSpec\n This interface places no restrictions on the mutability of implementations,\n however immutability is strongly recommended.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><R> the type returned from the query</R></p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-queryFrom' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalQuery'>java.time.temporal.TemporalQuery</span><br/><a href='source/TemporalQuery.html#java-time-temporal-TemporalQuery-method-queryFrom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalQuery-method-queryFrom' class='name expandable'>queryFrom</a>( <span class='pre'>temporal, temporal</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries the specified temporal object. ...</div><div class='long'><p>Queries the specified temporal object.\n <p>\n This queries the specified temporal object to return an object using the logic\n encapsulated in the implementing class.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.TemporalAccessor.query(TemporalQuery):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisQuery.queryFrom(temporal);\n   temporal = temporal.query(thisQuery);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code query(TemporalQuery)},\n as it is a lot clearer to read in code.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {TemporalAccessor}<div class='sub-desc'><p>the temporal object to query, not null</p>\n</div></li><li><span class='pre'>temporal</span> : Object<div class='sub-desc'><p>the temporal object to query, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the queried value, may return null to indicate not found</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to query</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});