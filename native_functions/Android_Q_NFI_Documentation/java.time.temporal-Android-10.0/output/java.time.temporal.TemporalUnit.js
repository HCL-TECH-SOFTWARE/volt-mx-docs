Ext.data.JsonP.java_time_temporal_TemporalUnit({"tagname":"class","name":"java.time.temporal.TemporalUnit","autodetected":{},"files":[{"filename":"TemporalUnit.js","href":"TemporalUnit.html#java-time-temporal-TemporalUnit"}],"since":"1.8","members":[{"name":"addTo","tagname":"method","owner":"java.time.temporal.TemporalUnit","id":"method-addTo","meta":{}},{"name":"between","tagname":"method","owner":"java.time.temporal.TemporalUnit","id":"method-between","meta":{}},{"name":"getDuration","tagname":"method","owner":"java.time.temporal.TemporalUnit","id":"method-getDuration","meta":{}},{"name":"isDateBased","tagname":"method","owner":"java.time.temporal.TemporalUnit","id":"method-isDateBased","meta":{}},{"name":"isDurationEstimated","tagname":"method","owner":"java.time.temporal.TemporalUnit","id":"method-isDurationEstimated","meta":{}},{"name":"isSupportedBy","tagname":"method","owner":"java.time.temporal.TemporalUnit","id":"method-isSupportedBy","meta":{}},{"name":"isTimeBased","tagname":"method","owner":"java.time.temporal.TemporalUnit","id":"method-isTimeBased","meta":{}},{"name":"toString","tagname":"method","owner":"java.time.temporal.TemporalUnit","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.temporal.TemporalUnit","short_doc":"A unit of date-time, such as Days or Hours. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit' target='_blank'>TemporalUnit.js</a></div></pre><div class='doc-contents'><p>A unit of date-time, such as Days or Hours.\n <p>\n Measurement of time is built on units, such as years, months, days, hours, minutes and seconds.\n Implementations of this interface represent those units.\n <p>\n An instance of this interface represents the unit itself, rather than an amount of the unit.\n See Period for a class that represents an amount in terms of the common units.\n <p>\n The most commonly used units are defined in <a href=\"#!/api/java.time.temporal.ChronoUnit\" rel=\"java.time.temporal.ChronoUnit\" class=\"docClass\">java.time.temporal.ChronoUnit</a>.\n Further units are supplied in <a href=\"#!/api/java.time.temporal.IsoFields\" rel=\"java.time.temporal.IsoFields\" class=\"docClass\">java.time.temporal.IsoFields</a>.\n Units can also be written by application code by implementing this interface.\n <p>\n The unit works using double dispatch. Client code calls methods on a date-time like\n {@code LocalDateTime} which check if the unit is a {@code ChronoUnit}.\n If it is, then the date-time must handle it.\n Otherwise, the method call is re-dispatched to the matching method in this interface.</p>\n\n<p> @implSpec\n This interface must be implemented with care to ensure other classes operate correctly.\n All implementations that can be instantiated must be final, immutable and thread-safe.\n It is recommended to use an enum where possible.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addTo' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalUnit'>java.time.temporal.TemporalUnit</span><br/><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit-method-addTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalUnit-method-addTo' class='name expandable'>addTo</a>( <span class='pre'>temporal, amount, amount</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of the specified temporal object with the specified period added. ...</div><div class='long'><p>Returns a copy of the specified temporal object with the specified period added.\n <p>\n The period added is a multiple of this unit. For example, this method\n could be used to add \"3 days\" to a date by calling this method on the\n instance representing \"days\", passing the date and the period \"3\".\n The period to be added may be negative, which is equivalent to subtraction.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.TemporalUnit):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisUnit.addTo(temporal);\n   temporal = temporal.plus(thisUnit);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code plus(TemporalUnit)},\n as it is a lot clearer to read in code.\n <p>\n Implementations should perform any queries or calculations using the units\n available in <a href=\"#!/api/java.time.temporal.ChronoUnit\" rel=\"java.time.temporal.ChronoUnit\" class=\"docClass\">java.time.temporal.ChronoUnit</a> or the fields available in <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a>.\n If the unit is not supported an {@code UnsupportedTemporalTypeException} must be thrown.\n <p>\n Implementations must not alter the specified temporal object.\n Instead, an adjusted copy of the original must be returned.\n This provides equivalent, safe behavior for immutable and mutable implementations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the temporal object to adjust, not null</p>\n</div></li><li><span class='pre'>amount</span> : Number<div class='sub-desc'><p>the amount of this unit to add, positive or negative</p>\n</div></li><li><span class='pre'>amount</span> : Object<div class='sub-desc'><p>the amount of this unit to add, positive or negative</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>the adjusted temporal object, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the amount cannot be added</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported by the temporal</p>\n</div></li></ul></div></div></div><div id='method-between' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalUnit'>java.time.temporal.TemporalUnit</span><br/><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit-method-between' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalUnit-method-between' class='name expandable'>between</a>( <span class='pre'>temporal1Inclusive, temporal2Exclusive, temporal2Exclusive</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Calculates the amount of time between two temporal objects. ...</div><div class='long'><p>Calculates the amount of time between two temporal objects.\n <p>\n This calculates the amount in terms of this unit. The start and end\n points are supplied as temporal objects and must be of compatible types.\n The implementation will convert the second type to be an instance of the\n first type before the calculating the amount.\n The result will be negative if the end is before the start.\n For example, the amount in hours between two temporal objects can be\n calculated using {@code HOURS.between(startTime, endTime)}.\n <p>\n The calculation returns a whole number, representing the number of\n complete units between the two temporals.\n For example, the amount in hours between the times 11:30 and 13:29\n will only be one hour as it is one minute short of two hours.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.TemporalUnit):</p>\n\n<pre>   // these two lines are equivalent\n   between = thisUnit.between(start, end);\n   between = start.until(end, thisUnit);\n </pre>\n\n\n<p> The choice should be made based on which makes the code more readable.\n <p>\n For example, this method allows the number of days between two dates to\n be calculated:</p>\n\n<pre>  long daysBetween = DAYS.between(start, end);\n  // or alternatively\n  long daysBetween = start.until(end, DAYS);\n </pre>\n\n\n<p> <p>\n Implementations should perform any queries or calculations using the units\n available in <a href=\"#!/api/java.time.temporal.ChronoUnit\" rel=\"java.time.temporal.ChronoUnit\" class=\"docClass\">java.time.temporal.ChronoUnit</a> or the fields available in <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a>.\n If the unit is not supported an {@code UnsupportedTemporalTypeException} must be thrown.\n Implementations must not alter the specified temporal objects.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal1Inclusive</span> : Object {Temporal}<div class='sub-desc'><p>the base temporal object, not null</p>\n</div></li><li><span class='pre'>temporal2Exclusive</span> : Object {Temporal}<div class='sub-desc'><p>the other temporal object, exclusive, not null</p>\n</div></li><li><span class='pre'>temporal2Exclusive</span> : Object<div class='sub-desc'><p>the other temporal object, exclusive, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the amount of time between temporal1Inclusive and temporal2Exclusive\n  in terms of this unit; positive if temporal2Exclusive is later than\n  temporal1Inclusive, negative if earlier</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the amount cannot be calculated, or the end\n  temporal cannot be converted to the same type as the start temporal</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported by the temporal</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getDuration' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalUnit'>java.time.temporal.TemporalUnit</span><br/><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit-method-getDuration' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalUnit-method-getDuration' class='name expandable'>getDuration</a>( <span class='pre'></span> ) : Object {java.time.Duration}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the duration of this unit, which may be an estimate. ...</div><div class='long'><p>Gets the duration of this unit, which may be an estimate.\n <p>\n All units return a duration measured in standard nanoseconds from this method.\n The duration will be positive and non-zero.\n For example, an hour has a duration of {@code 60 * 60 * 1,000,000,000ns}.\n <p>\n Some units may return an accurate duration while others return an estimate.\n For example, days have an estimated duration due to the possibility of\n daylight saving time changes.\n To determine if the duration is an estimate, use <a href=\"#!/api/java.time.temporal.TemporalUnit-method-isDurationEstimated\" rel=\"java.time.temporal.TemporalUnit-method-isDurationEstimated\" class=\"docClass\">isDurationEstimated</a>().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.Duration}</span><div class='sub-desc'><p>the duration of this unit, which may be an estimate, not null</p>\n</div></li></ul></div></div></div><div id='method-isDateBased' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalUnit'>java.time.temporal.TemporalUnit</span><br/><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit-method-isDateBased' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalUnit-method-isDateBased' class='name expandable'>isDateBased</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this unit represents a component of a date. ...</div><div class='long'><p>Checks if this unit represents a component of a date.\n <p>\n A date is time-based if it can be used to imply meaning from a date.\n It must have a {@linkplain <a href=\"#!/api/java.time.temporal.TemporalUnit-method-getDuration\" rel=\"java.time.temporal.TemporalUnit-method-getDuration\" class=\"docClass\">getDuration</a>() duration} that is an integral\n multiple of the length of a standard day.\n Note that it is valid for both {@code isDateBased()} and {@code isTimeBased()}\n to return false, such as when representing a unit like 36 hours.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this unit is a component of a date</p>\n</div></li></ul></div></div></div><div id='method-isDurationEstimated' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalUnit'>java.time.temporal.TemporalUnit</span><br/><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit-method-isDurationEstimated' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalUnit-method-isDurationEstimated' class='name expandable'>isDurationEstimated</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the duration of the unit is an estimate. ...</div><div class='long'><p>Checks if the duration of the unit is an estimate.\n <p>\n All units have a duration, however the duration is not always accurate.\n For example, days have an estimated duration due to the possibility of\n daylight saving time changes.\n This method returns true if the duration is an estimate and false if it is\n accurate. Note that accurate/estimated ignores leap seconds.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the duration is estimated, false if accurate</p>\n</div></li></ul></div></div></div><div id='method-isSupportedBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalUnit'>java.time.temporal.TemporalUnit</span><br/><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit-method-isSupportedBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalUnit-method-isSupportedBy' class='name expandable'>isSupportedBy</a>( <span class='pre'>temporal</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this unit is supported by the specified temporal object. ...</div><div class='long'><p>Checks if this unit is supported by the specified temporal object.\n <p>\n This checks that the implementing date-time can add/subtract this unit.\n This can be used to avoid throwing an exception.\n <p>\n This default implementation derives the value using\n java.time.temporal.TemporalUnit).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the temporal object to check, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the unit is supported</p>\n</div></li></ul></div></div></div><div id='method-isTimeBased' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalUnit'>java.time.temporal.TemporalUnit</span><br/><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit-method-isTimeBased' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalUnit-method-isTimeBased' class='name expandable'>isTimeBased</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this unit represents a component of a time. ...</div><div class='long'><p>Checks if this unit represents a component of a time.\n <p>\n A unit is time-based if it can be used to imply meaning from a time.\n It must have a {@linkplain <a href=\"#!/api/java.time.temporal.TemporalUnit-method-getDuration\" rel=\"java.time.temporal.TemporalUnit-method-getDuration\" class=\"docClass\">getDuration</a>() duration} that divides into\n the length of a standard day without remainder.\n Note that it is valid for both {@code isDateBased()} and {@code isTimeBased()}\n to return false, such as when representing a unit like 36 hours.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this unit is a component of a time</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalUnit'>java.time.temporal.TemporalUnit</span><br/><a href='source/TemporalUnit.html#java-time-temporal-TemporalUnit-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalUnit-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets a descriptive name for the unit. ...</div><div class='long'><p>Gets a descriptive name for the unit.\n <p>\n This should be in the plural and upper-first camel case, such as 'Days' or 'Minutes'.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the name of this unit, not null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});