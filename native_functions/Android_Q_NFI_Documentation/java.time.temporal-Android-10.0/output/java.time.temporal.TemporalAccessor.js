Ext.data.JsonP.java_time_temporal_TemporalAccessor({"tagname":"class","name":"java.time.temporal.TemporalAccessor","autodetected":{},"files":[{"filename":"TemporalAccessor.js","href":"TemporalAccessor.html#java-time-temporal-TemporalAccessor"}],"since":"1.8","members":[{"name":"get","tagname":"method","owner":"java.time.temporal.TemporalAccessor","id":"method-get","meta":{}},{"name":"getLong","tagname":"method","owner":"java.time.temporal.TemporalAccessor","id":"method-getLong","meta":{}},{"name":"isSupported","tagname":"method","owner":"java.time.temporal.TemporalAccessor","id":"method-isSupported","meta":{}},{"name":"query","tagname":"method","owner":"java.time.temporal.TemporalAccessor","id":"method-query","meta":{}},{"name":"range","tagname":"method","owner":"java.time.temporal.TemporalAccessor","id":"method-range","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.temporal.TemporalAccessor","short_doc":"Framework-level interface defining read-only access to a temporal object,\n such as a date, time, offset or some combi...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/TemporalAccessor.html#java-time-temporal-TemporalAccessor' target='_blank'>TemporalAccessor.js</a></div></pre><div class='doc-contents'><p>Framework-level interface defining read-only access to a temporal object,\n such as a date, time, offset or some combination of these.\n <p>\n This is the base interface type for date, time and offset objects.\n It is implemented by those classes that can provide information\n as {@linkplain <a href=\"#!/api/java.time.temporal.TemporalField\" rel=\"java.time.temporal.TemporalField\" class=\"docClass\">java.time.temporal.TemporalField</a> fields} or {@linkplain <a href=\"#!/api/java.time.temporal.TemporalQuery\" rel=\"java.time.temporal.TemporalQuery\" class=\"docClass\">java.time.temporal.TemporalQuery</a> queries}.\n <p>\n Most date and time information can be represented as a number.\n These are modeled using {@code TemporalField} with the number held using\n a {@code long} to handle large values. Year, month and day-of-month are\n simple examples of fields, but they also include instant and offsets.\n See <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a> for the standard set of fields.\n <p>\n Two pieces of date/time information cannot be represented by numbers,\n the {@linkplain java.time.chrono.Chronology chronology} and the\n {@linkplain java.time.ZoneId time-zone}.\n These can be accessed via {@linkplain <a href=\"#!/api/java.time.temporal.TemporalAccessor-method-query\" rel=\"java.time.temporal.TemporalAccessor-method-query\" class=\"docClass\">query</a>(TemporalQuery) queries} using\n the static methods defined on <a href=\"#!/api/java.time.temporal.TemporalQuery\" rel=\"java.time.temporal.TemporalQuery\" class=\"docClass\">java.time.temporal.TemporalQuery</a>.\n <p>\n A sub-interface, <a href=\"#!/api/java.time.temporal.Temporal\" rel=\"java.time.temporal.Temporal\" class=\"docClass\">java.time.temporal.Temporal</a>, extends this definition to one that also\n supports adjustment and manipulation on more complete temporal objects.\n <p>\n This interface is a framework-level interface that should not be widely\n used in application code. Instead, applications should create and pass\n around instances of concrete types, such as {@code LocalDate}.\n There are many reasons for this, part of which is that implementations\n of this interface may be in calendar systems other than ISO.\n See java.time.chrono.ChronoLocalDate for a fuller discussion of the issues.</p>\n\n<p> @implSpec\n This interface places no restrictions on the mutability of implementations,\n however immutability is strongly recommended.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-get' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAccessor'>java.time.temporal.TemporalAccessor</span><br/><a href='source/TemporalAccessor.html#java-time-temporal-TemporalAccessor-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAccessor-method-get' class='name expandable'>get</a>( <span class='pre'>field, field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field as an {@code int}. ...</div><div class='long'><p>Gets the value of the specified field as an {@code int}.\n <p>\n This queries the date-time for the value of the specified field.\n The returned value will always be within the valid range of values for the field.\n If the date-time cannot return the value, because the field is unsupported or for\n some other reason, an exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li><li><span class='pre'>field</span> : Object<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field, within the valid range of values</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained or\n         the value is outside the range of valid values for the field</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported or\n         the range of values exceeds an {@code int}</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAccessor'>java.time.temporal.TemporalAccessor</span><br/><a href='source/TemporalAccessor.html#java-time-temporal-TemporalAccessor-method-getLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAccessor-method-getLong' class='name expandable'>getLong</a>( <span class='pre'>field, field</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of the specified field as a {@code long}. ...</div><div class='long'><p>Gets the value of the specified field as a {@code long}.\n <p>\n This queries the date-time for the value of the specified field.\n The returned value may be outside the valid range of values for the field.\n If the date-time cannot return the value, because the field is unsupported or for\n some other reason, an exception will be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to get, not null</p>\n</div></li><li><span class='pre'>field</span> : Object<div class='sub-desc'><p>the field to get, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value for the field</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-isSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAccessor'>java.time.temporal.TemporalAccessor</span><br/><a href='source/TemporalAccessor.html#java-time-temporal-TemporalAccessor-method-isSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAccessor-method-isSupported' class='name expandable'>isSupported</a>( <span class='pre'>field, field</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the specified field is supported. ...</div><div class='long'><p>Checks if the specified field is supported.\n <p>\n This checks if the date-time can be queried for the specified field.\n If false, then calling the range and get\n methods will throw an exception.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to check, null returns false</p>\n</div></li><li><span class='pre'>field</span> : Object<div class='sub-desc'><p>the field to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this date-time can be queried for the field, false if not</p>\n</div></li></ul></div></div></div><div id='method-query' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAccessor'>java.time.temporal.TemporalAccessor</span><br/><a href='source/TemporalAccessor.html#java-time-temporal-TemporalAccessor-method-query' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAccessor-method-query' class='name expandable'>query</a>( <span class='pre'>query, , query</span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Queries this date-time. ...</div><div class='long'><p>Queries this date-time.\n <p>\n This queries this date-time using the specified query strategy object.\n <p>\n Queries are a key tool for extracting information from date-times.\n They exists to externalize the process of querying, permitting different\n approaches, as per the strategy design pattern.\n Examples might be a query that checks if the date is the day before February 29th\n in a leap year, or calculates the number of days to your next birthday.\n <p>\n The most common query implementations are method references, such as\n {@code LocalDate::from} and {@code ZoneId::from}.\n Additional implementations are provided as static methods on <a href=\"#!/api/java.time.temporal.TemporalQuery\" rel=\"java.time.temporal.TemporalQuery\" class=\"docClass\">java.time.temporal.TemporalQuery</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>query</span> : Object {java.time.temporal.TemporalQuery}<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li><li><span class='pre'></span> : Object<div class='sub-desc'><p><R> the type of the result</R></p>\n</div></li><li><span class='pre'>query</span> : Object<div class='sub-desc'><p>the query to invoke, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>the query result, null may be returned (defined by the query)</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to query</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-range' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAccessor'>java.time.temporal.TemporalAccessor</span><br/><a href='source/TemporalAccessor.html#java-time-temporal-TemporalAccessor-method-range' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAccessor-method-range' class='name expandable'>range</a>( <span class='pre'>field, field</span> ) : Object {java.time.temporal.ValueRange}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the range of valid values for the specified field. ...</div><div class='long'><p>Gets the range of valid values for the specified field.\n <p>\n All fields can be expressed as a {@code long} integer.\n This method returns an object that describes the valid range for that value.\n The value of this temporal object is used to enhance the accuracy of the returned range.\n If the date-time cannot return the range, because the field is unsupported or for\n some other reason, an exception will be thrown.\n <p>\n Note that the result only describes the minimum and maximum valid values\n and it is important not to read too much into them. For example, there\n could be values within the range that are invalid for the field.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to query the range for, not null</p>\n</div></li><li><span class='pre'>field</span> : Object<div class='sub-desc'><p>the field to query the range for, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.ValueRange}</span><div class='sub-desc'><p>the range of valid values for the field, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the range for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});