Ext.data.JsonP.java_time_temporal_TemporalField({"tagname":"class","name":"java.time.temporal.TemporalField","autodetected":{},"files":[{"filename":"TemporalField.js","href":"TemporalField.html#java-time-temporal-TemporalField"}],"since":"1.8","members":[{"name":"adjustInto","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-adjustInto","meta":{}},{"name":"getBaseUnit","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-getBaseUnit","meta":{}},{"name":"getDisplayName","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-getDisplayName","meta":{}},{"name":"getFrom","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-getFrom","meta":{}},{"name":"getRangeUnit","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-getRangeUnit","meta":{}},{"name":"isDateBased","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-isDateBased","meta":{}},{"name":"isSupportedBy","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-isSupportedBy","meta":{}},{"name":"isTimeBased","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-isTimeBased","meta":{}},{"name":"range","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-range","meta":{}},{"name":"rangeRefinedBy","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-rangeRefinedBy","meta":{}},{"name":"resolve","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-resolve","meta":{}},{"name":"toString","tagname":"method","owner":"java.time.temporal.TemporalField","id":"method-toString","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.temporal.TemporalField","short_doc":"A field of date-time, such as month-of-year or hour-of-minute. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/TemporalField.html#java-time-temporal-TemporalField' target='_blank'>TemporalField.js</a></div></pre><div class='doc-contents'><p>A field of date-time, such as month-of-year or hour-of-minute.\n <p>\n Date and time is expressed using fields which partition the time-line into something\n meaningful for humans. Implementations of this interface represent those fields.\n <p>\n The most commonly used units are defined in <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a>.\n Further fields are supplied in <a href=\"#!/api/java.time.temporal.IsoFields\" rel=\"java.time.temporal.IsoFields\" class=\"docClass\">java.time.temporal.IsoFields</a>, <a href=\"#!/api/java.time.temporal.WeekFields\" rel=\"java.time.temporal.WeekFields\" class=\"docClass\">java.time.temporal.WeekFields</a> and <a href=\"#!/api/java.time.temporal.JulianFields\" rel=\"java.time.temporal.JulianFields\" class=\"docClass\">java.time.temporal.JulianFields</a>.\n Fields can also be written by application code by implementing this interface.\n <p>\n The field works using double dispatch. Client code calls methods on a date-time like\n {@code LocalDateTime} which check if the field is a {@code ChronoField}.\n If it is, then the date-time must handle it.\n Otherwise, the method call is re-dispatched to the matching method in this interface.</p>\n\n<p> @implSpec\n This interface must be implemented with care to ensure other classes operate correctly.\n All implementations that can be instantiated must be final, immutable and thread-safe.\n Implementations should be {@code Serializable} where possible.\n An enum is as effective implementation choice.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-adjustInto' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-adjustInto' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-adjustInto' class='name expandable'>adjustInto</a>( <span class='pre'>temporal, newValue, newValue</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a copy of the specified temporal object with the value of this field set. ...</div><div class='long'><p>Returns a copy of the specified temporal object with the value of this field set.\n <p>\n This returns a new temporal object based on the specified one with the value for\n this field changed. For example, on a {@code LocalDate}, this could be used to\n set the year, month or day-of-month.\n The returned object has the same observable type as the specified object.\n <p>\n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then changing the month to February would be unclear.\n In cases like this, the implementation is responsible for resolving the result.\n Typically it will choose the previous valid date, which would be the last valid\n day of February in this example.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use long):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisField.adjustInto(temporal);\n   temporal = temporal.with(thisField);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code with(TemporalField)},\n as it is a lot clearer to read in code.\n <p>\n Implementations should perform any queries or calculations using the fields\n available in <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a>.\n If the field is not supported an {@code UnsupportedTemporalTypeException} must be thrown.\n <p>\n Implementations must not alter the specified temporal object.\n Instead, an adjusted copy of the original must be returned.\n This provides equivalent, safe behavior for immutable and mutable implementations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the temporal object to adjust, not null</p>\n</div></li><li><span class='pre'>newValue</span> : Number<div class='sub-desc'><p>the new value of the field</p>\n</div></li><li><span class='pre'>newValue</span> : Object<div class='sub-desc'><p>the new value of the field</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>the adjusted temporal object, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the field cannot be set</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported by the temporal</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getBaseUnit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-getBaseUnit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-getBaseUnit' class='name expandable'>getBaseUnit</a>( <span class='pre'></span> ) : Object {java.time.temporal.TemporalUnit}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the unit that the field is measured in. ...</div><div class='long'><p>Gets the unit that the field is measured in.\n <p>\n The unit of the field is the period that varies within the range.\n For example, in the field 'MonthOfYear', the unit is 'Months'.\n See also <a href=\"#!/api/java.time.temporal.TemporalField-method-getRangeUnit\" rel=\"java.time.temporal.TemporalField-method-getRangeUnit\" class=\"docClass\">getRangeUnit</a>().</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.TemporalUnit}</span><div class='sub-desc'><p>the unit defining the base unit of the field, not null</p>\n</div></li></ul></div></div></div><div id='method-getDisplayName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-getDisplayName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-getDisplayName' class='name expandable'>getDisplayName</a>( <span class='pre'>locale</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the display name for the field in the requested locale. ...</div><div class='long'><p>Gets the display name for the field in the requested locale.\n <p>\n If there is no display name for the locale then a suitable default must be returned.\n <p>\n The default implementation must check the locale is not null\n and return {@code toString()}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>locale</span> : Object {Locale}<div class='sub-desc'><p>the locale to use, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the display name for the locale or a suitable default, not null</p>\n</div></li></ul></div></div></div><div id='method-getFrom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-getFrom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-getFrom' class='name expandable'>getFrom</a>( <span class='pre'>temporal</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the value of this field from the specified temporal object. ...</div><div class='long'><p>Gets the value of this field from the specified temporal object.\n <p>\n This queries the temporal object for the value of this field.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.TemporalAccessor.getLong(TemporalField)\n (or java.time.temporal.TemporalAccessor.get(TemporalField)):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisField.getFrom(temporal);\n   temporal = temporal.getLong(thisField);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code getLong(TemporalField)},\n as it is a lot clearer to read in code.\n <p>\n Implementations should perform any queries or calculations using the fields\n available in <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a>.\n If the field is not supported an {@code UnsupportedTemporalTypeException} must be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {TemporalAccessor}<div class='sub-desc'><p>the temporal object to query, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value of this field, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported by the temporal</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-getRangeUnit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-getRangeUnit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-getRangeUnit' class='name expandable'>getRangeUnit</a>( <span class='pre'></span> ) : Object {java.time.temporal.TemporalUnit}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the range that the field is bound by. ...</div><div class='long'><p>Gets the range that the field is bound by.\n <p>\n The range of the field is the period that the field varies within.\n For example, in the field 'MonthOfYear', the range is 'Years'.\n See also <a href=\"#!/api/java.time.temporal.TemporalField-method-getBaseUnit\" rel=\"java.time.temporal.TemporalField-method-getBaseUnit\" class=\"docClass\">getBaseUnit</a>().\n <p>\n The range is never null. For example, the 'Year' field is shorthand for\n 'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.TemporalUnit}</span><div class='sub-desc'><p>the unit defining the range of the field, not null</p>\n</div></li></ul></div></div></div><div id='method-isDateBased' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-isDateBased' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-isDateBased' class='name expandable'>isDateBased</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this field represents a component of a date. ...</div><div class='long'><p>Checks if this field represents a component of a date.\n <p>\n A field is date-based if it can be derived from\n <a href=\"#!/api/java.time.temporal.ChronoField-property-EPOCH_DAY\" rel=\"java.time.temporal.ChronoField-property-EPOCH_DAY\" class=\"docClass\">EPOCH_DAY</a>.\n Note that it is valid for both {@code isDateBased()} and {@code isTimeBased()}\n to return false, such as when representing a field like minute-of-week.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this field is a component of a date</p>\n</div></li></ul></div></div></div><div id='method-isSupportedBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-isSupportedBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-isSupportedBy' class='name expandable'>isSupportedBy</a>( <span class='pre'>temporal</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this field is supported by the temporal object. ...</div><div class='long'><p>Checks if this field is supported by the temporal object.\n <p>\n This determines whether the temporal accessor supports this field.\n If this returns false, then the temporal cannot be queried for this field.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.TemporalAccessor.isSupported(TemporalField):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisField.isSupportedBy(temporal);\n   temporal = temporal.isSupported(thisField);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code isSupported(TemporalField)},\n as it is a lot clearer to read in code.\n <p>\n Implementations should determine whether they are supported using the fields\n available in <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {TemporalAccessor}<div class='sub-desc'><p>the temporal object to query, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the date-time can be queried for this field, false if not</p>\n</div></li></ul></div></div></div><div id='method-isTimeBased' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-isTimeBased' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-isTimeBased' class='name expandable'>isTimeBased</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if this field represents a component of a time. ...</div><div class='long'><p>Checks if this field represents a component of a time.\n <p>\n A field is time-based if it can be derived from\n <a href=\"#!/api/java.time.temporal.ChronoField-property-NANO_OF_DAY\" rel=\"java.time.temporal.ChronoField-property-NANO_OF_DAY\" class=\"docClass\">NANO_OF_DAY</a>.\n Note that it is valid for both {@code isDateBased()} and {@code isTimeBased()}\n to return false, such as when representing a field like minute-of-week.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this field is a component of a time</p>\n</div></li></ul></div></div></div><div id='method-range' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-range' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-range' class='name expandable'>range</a>( <span class='pre'></span> ) : Object {java.time.temporal.ValueRange}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the range of valid values for the field. ...</div><div class='long'><p>Gets the range of valid values for the field.\n <p>\n All fields can be expressed as a {@code long} integer.\n This method returns an object that describes the valid range for that value.\n This method is generally only applicable to the ISO-8601 calendar system.\n <p>\n Note that the result only describes the minimum and maximum valid values\n and it is important not to read too much into them. For example, there\n could be values within the range that are invalid for the field.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.ValueRange}</span><div class='sub-desc'><p>the range of valid values for the field, not null</p>\n</div></li></ul></div></div></div><div id='method-rangeRefinedBy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-rangeRefinedBy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-rangeRefinedBy' class='name expandable'>rangeRefinedBy</a>( <span class='pre'>temporal</span> ) : Object {java.time.temporal.ValueRange}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the range of valid values for this field using the temporal object to\n refine the result. ...</div><div class='long'><p>Get the range of valid values for this field using the temporal object to\n refine the result.\n <p>\n This uses the temporal object to find the range of valid values for the field.\n This is similar to <a href=\"#!/api/java.time.temporal.TemporalField-method-range\" rel=\"java.time.temporal.TemporalField-method-range\" class=\"docClass\">range</a>(), however this method refines the result\n using the temporal. For example, if the field is {@code DAY_OF_MONTH} the\n {@code range} method is not accurate as there are four possible month lengths,\n 28, 29, 30 and 31 days. Using this method with a date allows the range to be\n accurate, returning just one of those four options.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.TemporalAccessor.range(TemporalField):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   temporal = thisField.rangeRefinedBy(temporal);\n   temporal = temporal.range(thisField);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code range(TemporalField)},\n as it is a lot clearer to read in code.\n <p>\n Implementations should perform any queries or calculations using the fields\n available in <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a>.\n If the field is not supported an {@code UnsupportedTemporalTypeException} must be thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {TemporalAccessor}<div class='sub-desc'><p>the temporal object used to refine the result, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.ValueRange}</span><div class='sub-desc'><p>the range of valid values for this field, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the range for the field cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported by the temporal</p>\n</div></li></ul></div></div></div><div id='method-resolve' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-resolve' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-resolve' class='name expandable'>resolve</a>( <span class='pre'>fieldValues, partialTemporal, resolverStyle, resolverStyle</span> ) : Object {java.time.temporal.TemporalAccessor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Resolves this field to provide a simpler alternative or a date. ...</div><div class='long'><p>Resolves this field to provide a simpler alternative or a date.\n <p>\n This method is invoked during the resolve phase of parsing.\n It is designed to allow application defined fields to be simplified into\n more standard fields, such as those on {@code ChronoField}, or into a date.\n <p>\n Applications should not normally invoke this method directly.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fieldValues</span> : Object {java.util.Map}<div class='sub-desc'><p>the map of fields to values, which can be updated, not null</p>\n</div></li><li><span class='pre'>partialTemporal</span> : Object {TemporalAccessor}<div class='sub-desc'><p>the partially complete temporal to query for zone and\n  chronology; querying for other things is undefined and not recommended, not null</p>\n</div></li><li><span class='pre'>resolverStyle</span> : Object {ResolverStyle}<div class='sub-desc'><p>the requested type of resolve, not null</p>\n</div></li><li><span class='pre'>resolverStyle</span> : Object<div class='sub-desc'><p>the requested type of resolve, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.TemporalAccessor}</span><div class='sub-desc'><p>the resolved temporal object; null if resolving only\n  changed the map, or no resolve occurred</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if resolving results in an error. This must not be thrown\n  by querying a field on the temporal without first checking if it is supported</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalField'>java.time.temporal.TemporalField</span><br/><a href='source/TemporalField.html#java-time-temporal-TemporalField-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalField-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets a descriptive name for the field. ...</div><div class='long'><p>Gets a descriptive name for the field.\n <p>\n The should be of the format 'BaseOfRange', such as 'MonthOfYear',\n unless the field has a range of {@code FOREVER}, when only\n the base unit is mentioned, such as 'Year' or 'Era'.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the name of the field, not null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});