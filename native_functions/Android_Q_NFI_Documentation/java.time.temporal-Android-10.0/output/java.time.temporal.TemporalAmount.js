Ext.data.JsonP.java_time_temporal_TemporalAmount({"tagname":"class","name":"java.time.temporal.TemporalAmount","autodetected":{},"files":[{"filename":"TemporalAmount.js","href":"TemporalAmount.html#java-time-temporal-TemporalAmount"}],"since":"1.8","members":[{"name":"addTo","tagname":"method","owner":"java.time.temporal.TemporalAmount","id":"method-addTo","meta":{}},{"name":"get","tagname":"method","owner":"java.time.temporal.TemporalAmount","id":"method-get","meta":{}},{"name":"getUnits","tagname":"method","owner":"java.time.temporal.TemporalAmount","id":"method-getUnits","meta":{}},{"name":"subtractFrom","tagname":"method","owner":"java.time.temporal.TemporalAmount","id":"method-subtractFrom","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.temporal.TemporalAmount","short_doc":"Framework-level interface defining an amount of time, such as\n \"6 hours\", \"8 days\" or \"2 years and 3 months\". ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/TemporalAmount.html#java-time-temporal-TemporalAmount' target='_blank'>TemporalAmount.js</a></div></pre><div class='doc-contents'><p>Framework-level interface defining an amount of time, such as\n \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n <p>\n This is the base interface type for amounts of time.\n An amount is distinct from a date or time-of-day in that it is not tied\n to any specific point on the time-line.\n <p>\n The amount can be thought of as a {@code Map} of <a href=\"#!/api/java.time.temporal.TemporalUnit\" rel=\"java.time.temporal.TemporalUnit\" class=\"docClass\">java.time.temporal.TemporalUnit</a> to\n {@code long}, exposed via <a href=\"#!/api/java.time.temporal.TemporalAmount-method-getUnits\" rel=\"java.time.temporal.TemporalAmount-method-getUnits\" class=\"docClass\">getUnits</a>() and <a href=\"#!/api/java.time.temporal.TemporalAmount-method-get\" rel=\"java.time.temporal.TemporalAmount-method-get\" class=\"docClass\">get</a>(TemporalUnit).\n A simple case might have a single unit-value pair, such as \"6 hours\".\n A more complex case may have multiple unit-value pairs, such as\n \"7 years, 3 months and 5 days\".\n <p>\n There are two common implementations.\n Period is a date-based implementation, storing years, months and days.\n Duration is a time-based implementation, storing seconds and nanoseconds,\n but providing some access using other duration based units such as minutes,\n hours and fixed 24-hour days.\n <p>\n This interface is a framework-level interface that should not be widely\n used in application code. Instead, applications should create and pass\n around instances of concrete types, such as {@code Period} and {@code Duration}.</p>\n\n<p> @implSpec\n This interface places no restrictions on the mutability of implementations,\n however immutability is strongly recommended.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addTo' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAmount'>java.time.temporal.TemporalAmount</span><br/><a href='source/TemporalAmount.html#java-time-temporal-TemporalAmount-method-addTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAmount-method-addTo' class='name expandable'>addTo</a>( <span class='pre'>temporal, temporal</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Adds to the specified temporal object. ...</div><div class='long'><p>Adds to the specified temporal object.\n <p>\n Adds the amount to the specified temporal object using the logic\n encapsulated in the implementing class.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.Temporal.plus(java.time.temporal.TemporalAmount):</p>\n\n<pre>   // These two lines are equivalent, but the second approach is recommended\n   dateTime = amount.addTo(dateTime);\n   dateTime = dateTime.plus(adder);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code plus(TemporalAmount)},\n as it is a lot clearer to read in code.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the temporal object to add the amount to, not null</p>\n</div></li><li><span class='pre'>temporal</span> : Object<div class='sub-desc'><p>the temporal object to add the amount to, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>an object of the same observable type with the addition made, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to add</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAmount'>java.time.temporal.TemporalAmount</span><br/><a href='source/TemporalAmount.html#java-time-temporal-TemporalAmount-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAmount-method-get' class='name expandable'>get</a>( <span class='pre'>unit, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of the requested unit. ...</div><div class='long'><p>Returns the value of the requested unit.\n The units returned from <a href=\"#!/api/java.time.temporal.TemporalAmount-method-getUnits\" rel=\"java.time.temporal.TemporalAmount-method-getUnits\" class=\"docClass\">getUnits</a>() uniquely define the\n value of the {@code TemporalAmount}.  A value must be returned\n for each unit listed in {@code getUnits}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the {@code TemporalUnit} for which to return the value</p>\n</div></li><li><span class='pre'>unit</span> : Object<div class='sub-desc'><p>the {@code TemporalUnit} for which to return the value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the long value of the unit</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if a value for the unit cannot be obtained</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the {@code unit} is not supported</p>\n</div></li></ul></div></div></div><div id='method-getUnits' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAmount'>java.time.temporal.TemporalAmount</span><br/><a href='source/TemporalAmount.html#java-time-temporal-TemporalAmount-method-getUnits' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAmount-method-getUnits' class='name expandable'>getUnits</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the list of units uniquely defining the value of this TemporalAmount. ...</div><div class='long'><p>Returns the list of units uniquely defining the value of this TemporalAmount.\n The list of {@code TemporalUnits} is defined by the implementation class.\n The list is a snapshot of the units at the time {@code getUnits}\n is called and is not mutable.\n The units are ordered from longest duration to the shortest duration\n of the unit.\n@implSpec The list of units completely and uniquely represents the\n state of the object without omissions, overlaps or duplication.\n The units are in order from longest duration to shortest.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>the List of {@code TemporalUnits}; not null</p>\n</div></li></ul></div></div></div><div id='method-subtractFrom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.TemporalAmount'>java.time.temporal.TemporalAmount</span><br/><a href='source/TemporalAmount.html#java-time-temporal-TemporalAmount-method-subtractFrom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.TemporalAmount-method-subtractFrom' class='name expandable'>subtractFrom</a>( <span class='pre'>temporal, temporal</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Subtracts this object from the specified temporal object. ...</div><div class='long'><p>Subtracts this object from the specified temporal object.\n <p>\n Subtracts the amount from the specified temporal object using the logic\n encapsulated in the implementing class.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use java.time.temporal.Temporal.minus(java.time.temporal.TemporalAmount):</p>\n\n<pre>   // these two lines are equivalent, but the second approach is recommended\n   dateTime = amount.subtractFrom(dateTime);\n   dateTime = dateTime.minus(amount);\n </pre>\n\n\n<p> It is recommended to use the second approach, {@code minus(TemporalAmount)},\n as it is a lot clearer to read in code.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>temporal</span> : Object {Temporal}<div class='sub-desc'><p>the temporal object to subtract the amount from, not null</p>\n</div></li><li><span class='pre'>temporal</span> : Object<div class='sub-desc'><p>the temporal object to subtract the amount from, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>an object of the same observable type with the subtraction made, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if unable to subtract</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});