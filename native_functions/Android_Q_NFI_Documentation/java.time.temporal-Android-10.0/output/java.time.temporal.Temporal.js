Ext.data.JsonP.java_time_temporal_Temporal({"tagname":"class","name":"java.time.temporal.Temporal","autodetected":{},"files":[{"filename":"Temporal.js","href":"Temporal.html#java-time-temporal-Temporal"}],"since":"1.8","members":[{"name":"isSupported","tagname":"method","owner":"java.time.temporal.Temporal","id":"method-isSupported","meta":{}},{"name":"minus","tagname":"method","owner":"java.time.temporal.Temporal","id":"method-minus","meta":{}},{"name":"plus","tagname":"method","owner":"java.time.temporal.Temporal","id":"method-plus","meta":{}},{"name":"until","tagname":"method","owner":"java.time.temporal.Temporal","id":"method-until","meta":{}},{"name":"with","tagname":"method","owner":"java.time.temporal.Temporal","id":"method-with","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.time.temporal.Temporal","short_doc":"implements java.time.temporal.TemporalAccessor\n\n Framework-level interface defining read-write access to a temporal o...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Temporal.html#java-time-temporal-Temporal' target='_blank'>Temporal.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.time.temporal.TemporalAccessor\" rel=\"java.time.temporal.TemporalAccessor\" class=\"docClass\">java.time.temporal.TemporalAccessor</a></p>\n\n<p> Framework-level interface defining read-write access to a temporal object,\n such as a date, time, offset or some combination of these.\n <p>\n This is the base interface type for date, time and offset objects that\n are complete enough to be manipulated using plus and minus.\n It is implemented by those classes that can provide and manipulate information\n as {@linkplain <a href=\"#!/api/java.time.temporal.TemporalField\" rel=\"java.time.temporal.TemporalField\" class=\"docClass\">java.time.temporal.TemporalField</a> fields} or {@linkplain <a href=\"#!/api/java.time.temporal.TemporalQuery\" rel=\"java.time.temporal.TemporalQuery\" class=\"docClass\">java.time.temporal.TemporalQuery</a> queries}.\n See <a href=\"#!/api/java.time.temporal.TemporalAccessor\" rel=\"java.time.temporal.TemporalAccessor\" class=\"docClass\">java.time.temporal.TemporalAccessor</a> for the read-only version of this interface.\n <p>\n Most date and time information can be represented as a number.\n These are modeled using {@code TemporalField} with the number held using\n a {@code long} to handle large values. Year, month and day-of-month are\n simple examples of fields, but they also include instant and offsets.\n See <a href=\"#!/api/java.time.temporal.ChronoField\" rel=\"java.time.temporal.ChronoField\" class=\"docClass\">java.time.temporal.ChronoField</a> for the standard set of fields.\n <p>\n Two pieces of date/time information cannot be represented by numbers,\n the {@linkplain java.time.chrono.Chronology chronology} and the\n {@linkplain java.time.ZoneId time-zone}.\n These can be accessed via queries using\n the static methods defined on <a href=\"#!/api/java.time.temporal.TemporalQuery\" rel=\"java.time.temporal.TemporalQuery\" class=\"docClass\">java.time.temporal.TemporalQuery</a>.\n <p>\n This interface is a framework-level interface that should not be widely\n used in application code. Instead, applications should create and pass\n around instances of concrete types, such as {@code LocalDate}.\n There are many reasons for this, part of which is that implementations\n of this interface may be in calendar systems other than ISO.\n See java.time.chrono.ChronoLocalDate for a fuller discussion of the issues.</p>\n\n<p> <h3>When to implement</h3>\n <p>\n A class should implement this interface if it meets three criteria:\n <ul>\n <li>it provides access to date/time/offset information, as per {@code TemporalAccessor}\n <li>the set of fields are contiguous from the largest to the smallest\n <li>the set of fields are complete, such that no other field is needed to define the\n  valid range of values for the fields that are represented\n </li></li></li></ul>\n <p>\n Four examples make this clear:\n <ul>\n <li>{@code LocalDate} implements this interface as it represents a set of fields\n  that are contiguous from days to forever and require no external information to determine\n  the validity of each date. It is therefore able to implement plus/minus correctly.\n <li>{@code LocalTime} implements this interface as it represents a set of fields\n  that are contiguous from nanos to within days and require no external information to determine\n  validity. It is able to implement plus/minus correctly, by wrapping around the day.\n <li>{@code MonthDay}, the combination of month-of-year and day-of-month, does not implement\n  this interface.  While the combination is contiguous, from days to months within years,\n  the combination does not have sufficient information to define the valid range of values\n  for day-of-month.  As such, it is unable to implement plus/minus correctly.\n <li>The combination day-of-week and day-of-month (\"Friday the 13th\") should not implement\n  this interface. It does not represent a contiguous set of fields, as days to weeks overlaps\n  days to months.\n </li></li></li></li></ul></p>\n\n<p> @implSpec\n This interface places no restrictions on the mutability of implementations,\n however immutability is strongly recommended.\n All implementations must be Comparable.</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-isSupported' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.Temporal'>java.time.temporal.Temporal</span><br/><a href='source/Temporal.html#java-time-temporal-Temporal-method-isSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.Temporal-method-isSupported' class='name expandable'>isSupported</a>( <span class='pre'>unit, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the specified unit is supported. ...</div><div class='long'><p>Checks if the specified unit is supported.\n <p>\n This checks if the specified unit can be added to, or subtracted from, this date-time.\n If false, then calling the java.time.temporal.TemporalUnit) and\n java.time.temporal.TemporalUnit) minus methods will throw an exception.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to check, null returns false</p>\n</div></li><li><span class='pre'>unit</span> : Object<div class='sub-desc'><p>the unit to check, null returns false</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the unit can be added/subtracted, false if not</p>\n</div></li></ul></div></div></div><div id='method-minus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.Temporal'>java.time.temporal.Temporal</span><br/><a href='source/Temporal.html#java-time-temporal-Temporal-method-minus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.Temporal-method-minus' class='name expandable'>minus</a>( <span class='pre'>amountToSubtract, unit, unit</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object of the same type as this object with the specified period subtracted. ...</div><div class='long'><p>Returns an object of the same type as this object with the specified period subtracted.\n <p>\n This method returns a new object based on this one with the specified period subtracted.\n For example, on a {@code LocalDate}, this could be used to subtract a number of years, months or days.\n The returned object will have the same observable type as this object.\n <p>\n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st March, then subtracting one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToSubtract</span> : Number<div class='sub-desc'><p>the amount of the specified unit to subtract, may be negative</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit of the amount to subtract, not null</p>\n</div></li><li><span class='pre'>unit</span> : Object<div class='sub-desc'><p>the unit of the amount to subtract, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>an object of the same type with the specified period subtracted, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the unit cannot be subtracted</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-plus' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.Temporal'>java.time.temporal.Temporal</span><br/><a href='source/Temporal.html#java-time-temporal-Temporal-method-plus' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.Temporal-method-plus' class='name expandable'>plus</a>( <span class='pre'>amountToAdd, unit, unit</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object of the same type as this object with the specified period added. ...</div><div class='long'><p>Returns an object of the same type as this object with the specified period added.\n <p>\n This method returns a new object based on this one with the specified period added.\n For example, on a {@code LocalDate}, this could be used to add a number of years, months or days.\n The returned object will have the same observable type as this object.\n <p>\n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then adding one month would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>amountToAdd</span> : Number<div class='sub-desc'><p>the amount of the specified unit to add, may be negative</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit of the amount to add, not null</p>\n</div></li><li><span class='pre'>unit</span> : Object<div class='sub-desc'><p>the unit of the amount to add, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>an object of the same type with the specified period added, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the unit cannot be added</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-until' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.Temporal'>java.time.temporal.Temporal</span><br/><a href='source/Temporal.html#java-time-temporal-Temporal-method-until' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.Temporal-method-until' class='name expandable'>until</a>( <span class='pre'>endExclusive, unit, unit</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Calculates the amount of time until another temporal in terms of the specified unit. ...</div><div class='long'><p>Calculates the amount of time until another temporal in terms of the specified unit.\n <p>\n This calculates the amount of time between two temporal objects\n in terms of a single {@code TemporalUnit}.\n The start and end points are {@code this} and the specified temporal.\n The end point is converted to be of the same type as the start point if different.\n The result will be negative if the end is before the start.\n For example, the amount in hours between two temporal objects can be\n calculated using {@code startTime.until(endTime, HOURS)}.\n <p>\n The calculation returns a whole number, representing the number of\n complete units between the two temporals.\n For example, the amount in hours between the times 11:30 and 13:29\n will only be one hour as it is one minute short of two hours.\n <p>\n There are two equivalent ways of using this method.\n The first is to invoke this method directly.\n The second is to use Temporal):</p>\n\n<pre>   // these two lines are equivalent\n   temporal = start.until(end, unit);\n   temporal = unit.between(start, end);\n </pre>\n\n\n<p> The choice should be made based on which makes the code more readable.\n <p>\n For example, this method allows the number of days between two dates to\n be calculated:</p>\n\n<pre>  long daysBetween = start.until(end, DAYS);\n  // or alternatively\n  long daysBetween = DAYS.between(start, end);\n </pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>endExclusive</span> : Object {Temporal}<div class='sub-desc'><p>the end temporal, exclusive, converted to be of the\n  same type as this object, not null</p>\n</div></li><li><span class='pre'>unit</span> : Object {TemporalUnit}<div class='sub-desc'><p>the unit to measure the amount in, not null</p>\n</div></li><li><span class='pre'>unit</span> : Object<div class='sub-desc'><p>the unit to measure the amount in, not null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the amount of time between this temporal object and the specified one\n  in terms of the unit; positive if the specified object is later than this one,\n  negative if it is earlier than this one</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the amount cannot be calculated, or the end\n  temporal cannot be converted to the same type as this temporal</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the unit is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div><div id='method-with' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.time.temporal.Temporal'>java.time.temporal.Temporal</span><br/><a href='source/Temporal.html#java-time-temporal-Temporal-method-with' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.time.temporal.Temporal-method-with' class='name expandable'>with</a>( <span class='pre'>field, newValue, newValue</span> ) : Object {java.time.temporal.Temporal}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an object of the same type as this object with the specified field altered. ...</div><div class='long'><p>Returns an object of the same type as this object with the specified field altered.\n <p>\n This returns a new object based on this one with the value for the specified field changed.\n For example, on a {@code LocalDate}, this could be used to set the year, month or day-of-month.\n The returned object will have the same observable type as this object.\n <p>\n In some cases, changing a field is not fully defined. For example, if the target object is\n a date representing the 31st January, then changing the month to February would be unclear.\n In cases like this, the field is responsible for resolving the result. Typically it will choose\n the previous valid date, which would be the last valid day of February in this example.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>field</span> : Object {TemporalField}<div class='sub-desc'><p>the field to set in the result, not null</p>\n</div></li><li><span class='pre'>newValue</span> : Number<div class='sub-desc'><p>the new value of the field in the result</p>\n</div></li><li><span class='pre'>newValue</span> : Object<div class='sub-desc'><p>the new value of the field in the result</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.time.temporal.Temporal}</span><div class='sub-desc'><p>an object of the same type with the specified field set, not null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>DateTimeException if the field cannot be set</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UnsupportedTemporalTypeException if the field is not supported</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if numeric overflow occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});