Ext.data.JsonP.java_io_BufferedReader({"tagname":"class","name":"java.io.BufferedReader","autodetected":{},"files":[{"filename":"BufferedReader.js","href":"BufferedReader.html#java-io-BufferedReader"}],"extends":"java.io.Reader","author":[{"tagname":"author","name":"Mark Reinhold","email":null}],"since":"JDK1.1","members":[{"name":"close","tagname":"method","owner":"java.io.BufferedReader","id":"method-close","meta":{}},{"name":"lines","tagname":"method","owner":"java.io.BufferedReader","id":"method-lines","meta":{}},{"name":"mark","tagname":"method","owner":"java.io.BufferedReader","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.io.BufferedReader","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.io.BufferedReader","id":"method-read","meta":{}},{"name":"readLine","tagname":"method","owner":"java.io.BufferedReader","id":"method-readLine","meta":{}},{"name":"ready","tagname":"method","owner":"java.io.BufferedReader","id":"method-ready","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.BufferedReader","id":"method-reset","meta":{}},{"name":"skip","tagname":"method","owner":"java.io.BufferedReader","id":"method-skip","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.BufferedReader","short_doc":"Reads text from a character-input stream, buffering characters so as to\n provide for the efficient reading of charact...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.Reader"],"subclasses":["java.io.LineNumberReader"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.Reader' rel='java.io.Reader' class='docClass'>java.io.Reader</a><div class='subclass '><strong>java.io.BufferedReader</strong></div></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.io.LineNumberReader' rel='java.io.LineNumberReader' class='docClass'>java.io.LineNumberReader</a></div><h4>Files</h4><div class='dependency'><a href='source/BufferedReader.html#java-io-BufferedReader' target='_blank'>BufferedReader.js</a></div></pre><div class='doc-contents'><p>Reads text from a character-input stream, buffering characters so as to\n provide for the efficient reading of characters, arrays, and lines.</p>\n\n<p> <p> The buffer size may be specified, or the default size may be used.  The\n default is large enough for most purposes.</p>\n\n<p> <p> In general, each read request made of a Reader causes a corresponding\n read request to be made of the underlying character or byte stream.  It is\n therefore advisable to wrap a BufferedReader around any Reader whose read()\n operations may be costly, such as FileReaders and InputStreamReaders.  For\n example,</p>\n\n<pre> BufferedReader in\n   = new BufferedReader(new FileReader(\"foo.in\"));\n </pre>\n\n\n<p> will buffer the input from the specified file.  Without buffering, each\n invocation of read() or readLine() could cause bytes to be read from the\n file, converted into characters, and then returned, which can be very\n inefficient.</p>\n\n<p> <p> Programs that use DataInputStreams for textual input can be localized by\n replacing each DataInputStream with an appropriate BufferedReader.</p>\n\n<p> @see FileReader\n @see InputStreamReader\n @see java.nio.file.Files#newBufferedReader</p>\n        <p>Available since: <b>JDK1.1</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-close\" rel=\"java.io.Reader-method-close\" class=\"docClass\">java.io.Reader.close</a></p></div></div></div><div id='method-lines' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-lines' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-lines' class='name expandable'>lines</a>( <span class='pre'></span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Stream}, the elements of which are lines read from\n this {@code BufferedReader}. ...</div><div class='long'><p>Returns a {@code Stream}, the elements of which are lines read from\n this {@code BufferedReader}.  The Stream is lazily populated,\n i.e., read only occurs during the\n <a href=\"../util/stream/package-summary.html#StreamOps\">terminal\n stream operation</a>.</p>\n\n<p> <p> The reader must not be operated on during the execution of the\n terminal stream operation. Otherwise, the result of the terminal stream\n operation is undefined.</p>\n\n<p> <p> After execution of the terminal stream operation there are no\n guarantees that the reader will be at a specific position from which to\n read the next character or line.</p>\n\n<p> <p> If an <a href=\"#!/api/java.io.IOException\" rel=\"java.io.IOException\" class=\"docClass\">java.io.IOException</a> is thrown when accessing the underlying\n {@code BufferedReader}, it is wrapped in an <a href=\"#!/api/java.io.UncheckedIOException\" rel=\"java.io.UncheckedIOException\" class=\"docClass\">java.io.UncheckedIOException</a> which will be thrown from the {@code Stream}\n method that caused the read to take place. This method will return a\n Stream if invoked on a BufferedReader that is closed. Any operation on\n that stream that requires reading from the BufferedReader after it is\n closed, will cause an UncheckedIOException to be thrown.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>a {@code Stream<String>} providing the lines of text\n         described by this {@code BufferedReader}</String></p>\n</div></li></ul></div></div></div><div id='method-mark' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-mark' class='name expandable'>mark</a>( <span class='pre'>readAheadLimit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Marks the present position in the stream. ...</div><div class='long'><p>Marks the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>readAheadLimit</span> : Number<div class='sub-desc'><p>Limit on the number of characters that may be\n                         read while still preserving the mark. An attempt\n                         to reset the stream after reading characters\n                         up to this limit or beyond may fail.\n                         A limit value larger than the size of the input\n                         buffer will cause a new buffer to be allocated\n                         whose size is no smaller than limit.\n                         Therefore large values should be used with care.\n@exception IllegalArgumentException  If {@code readAheadLimit &lt; 0}\n@exception IOException  If an I/O error occurs</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.Reader-method-mark\" rel=\"java.io.Reader-method-mark\" class=\"docClass\">java.io.Reader.mark</a></p></div></div></div><div id='method-markSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether this stream supports the mark() operation, which it does. ...</div><div class='long'><p>Tells whether this stream supports the mark() operation, which it does.</p>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-markSupported\" rel=\"java.io.Reader-method-markSupported\" class=\"docClass\">java.io.Reader.markSupported</a></p></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-read' class='name expandable'>read</a>( <span class='pre'>cbuf, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads characters into a portion of an array. ...</div><div class='long'><p>Reads characters into a portion of an array.</p>\n\n<p> <p> This method implements the general contract of the corresponding\n <code>int, int) read</code> method of the\n <code><a href=\"#!/api/java.io.Reader\" rel=\"java.io.Reader\" class=\"docClass\">java.io.Reader</a></code> class.  As an additional convenience, it\n attempts to read as many characters as possible by repeatedly invoking\n the <code>read</code> method of the underlying stream.  This iterated\n <code>read</code> continues until one of the following conditions becomes\n true: <ul></ul></p>\n\n<p>   <li> The specified number of characters have been read,</li></p>\n\n<p>   <li> The <code>read</code> method of the underlying stream returns\n   <code>-1</code>, indicating end-of-file, or</li></p>\n\n<p>   <li> The <code>ready</code> method of the underlying stream\n   returns <code>false</code>, indicating that further input requests\n   would block.</li></p>\n\n<p>  If the first <code>read</code> on the underlying stream returns\n <code>-1</code> to indicate end-of-file then this method returns\n <code>-1</code>.  Otherwise this method returns the number of characters\n actually read.</p>\n\n<p> <p> Subclasses of this class are encouraged, but not required, to\n attempt to read as many characters as possible in the same fashion.</p>\n\n<p> <p> Ordinarily this method takes characters from this stream's character\n buffer, filling it from the underlying stream as necessary.  If,\n however, the buffer is empty, the mark is not valid, and the requested\n length is at least as large as the buffer, then this method will read\n characters directly from the underlying stream into the given array.\n Thus redundant <code>BufferedReader</code>s will not copy data\n unnecessarily.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cbuf</span> : Object {char[]}<div class='sub-desc'><p>Destination buffer</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>Offset at which to start storing characters</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>Maximum number of characters to read</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of characters read, or -1 if the end of the\n             stream has been reached\n@exception IOException  If an I/O error occurs</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.Reader-method-read\" rel=\"java.io.Reader-method-read\" class=\"docClass\">java.io.Reader.read</a></p></div></div></div><div id='method-readLine' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-readLine' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-readLine' class='name expandable'>readLine</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a line of text. ...</div><div class='long'><p>Reads a line of text.  A line is considered to be terminated by any one\n of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return\n followed immediately by a linefeed.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>A String containing the contents of the line, not including\n             any line-termination characters, or null if the end of the\n             stream has been reached\n@exception IOException  If an I/O error occurs\n@see java.nio.file.Files#readAllLines</p>\n</div></li></ul></div></div></div><div id='method-ready' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-ready' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-ready' class='name expandable'>ready</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether this stream is ready to be read. ...</div><div class='long'><p>Tells whether this stream is ready to be read.  A buffered character\n stream is ready if the buffer is not empty, or if the underlying\n character stream is ready.\n@exception IOException  If an I/O error occurs</p>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-ready\" rel=\"java.io.Reader-method-ready\" class=\"docClass\">java.io.Reader.ready</a></p></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets the stream to the most recent mark. ...</div><div class='long'><p>Resets the stream to the most recent mark.\n@exception IOException  If the stream has never been marked,\n                          or if the mark has been invalidated</p>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-reset\" rel=\"java.io.Reader-method-reset\" class=\"docClass\">java.io.Reader.reset</a></p></div></div></div><div id='method-skip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.BufferedReader'>java.io.BufferedReader</span><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips characters. ...</div><div class='long'><p>Skips characters.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>The number of characters to skip</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of characters actually skipped\n@exception IllegalArgumentException  If <code>n</code> is negative.\n@exception IOException  If an I/O error occurs</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.Reader-method-skip\" rel=\"java.io.Reader-method-skip\" class=\"docClass\">java.io.Reader.skip</a></p></div></div></div></div></div></div></div>","meta":{}});