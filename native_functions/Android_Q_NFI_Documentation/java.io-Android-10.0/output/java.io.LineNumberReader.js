Ext.data.JsonP.java_io_LineNumberReader({"tagname":"class","name":"java.io.LineNumberReader","autodetected":{},"files":[{"filename":"LineNumberReader.js","href":"LineNumberReader.html#java-io-LineNumberReader"}],"extends":"java.io.BufferedReader","author":[{"tagname":"author","name":"Mark Reinhold","email":null}],"since":"JDK1.1","members":[{"name":"close","tagname":"method","owner":"java.io.BufferedReader","id":"method-close","meta":{}},{"name":"getLineNumber","tagname":"method","owner":"java.io.LineNumberReader","id":"method-getLineNumber","meta":{}},{"name":"lines","tagname":"method","owner":"java.io.BufferedReader","id":"method-lines","meta":{}},{"name":"mark","tagname":"method","owner":"java.io.LineNumberReader","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.io.BufferedReader","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.io.LineNumberReader","id":"method-read","meta":{}},{"name":"readLine","tagname":"method","owner":"java.io.LineNumberReader","id":"method-readLine","meta":{}},{"name":"ready","tagname":"method","owner":"java.io.BufferedReader","id":"method-ready","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.LineNumberReader","id":"method-reset","meta":{}},{"name":"setLineNumber","tagname":"method","owner":"java.io.LineNumberReader","id":"method-setLineNumber","meta":{}},{"name":"skip","tagname":"method","owner":"java.io.LineNumberReader","id":"method-skip","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.LineNumberReader","short_doc":"A buffered character-input stream that keeps track of line numbers. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.Reader","java.io.BufferedReader"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.Reader' rel='java.io.Reader' class='docClass'>java.io.Reader</a><div class='subclass '><a href='#!/api/java.io.BufferedReader' rel='java.io.BufferedReader' class='docClass'>java.io.BufferedReader</a><div class='subclass '><strong>java.io.LineNumberReader</strong></div></div></div></div><h4>Files</h4><div class='dependency'><a href='source/LineNumberReader.html#java-io-LineNumberReader' target='_blank'>LineNumberReader.js</a></div></pre><div class='doc-contents'><p>A buffered character-input stream that keeps track of line numbers.  This\n class defines methods <a href=\"#!/api/java.io.LineNumberReader-method-setLineNumber\" rel=\"java.io.LineNumberReader-method-setLineNumber\" class=\"docClass\">setLineNumber</a>(int) and <a href=\"#!/api/java.io.LineNumberReader-method-getLineNumber\" rel=\"java.io.LineNumberReader-method-getLineNumber\" class=\"docClass\">getLineNumber</a>() for setting and getting the current line number\n respectively.</p>\n\n<p> <p> By default, line numbering begins at 0. This number increments at every\n <a href=\"#lt\">line terminator</a> as the data is read, and can be changed\n with a call to <tt>setLineNumber(int)</tt>.  Note however, that\n <tt>setLineNumber(int)</tt> does not actually change the current position in\n the stream; it only changes the value that will be returned by\n <tt>getLineNumber()</tt>.</p>\n\n<p> <p> A line is considered to be <a name=\"lt\">terminated</a> by any one of a\n line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed\n immediately by a linefeed.</p>\n        <p>Available since: <b>JDK1.1</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.BufferedReader' rel='java.io.BufferedReader' class='defined-in docClass'>java.io.BufferedReader</a><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-close\" rel=\"java.io.Reader-method-close\" class=\"docClass\">java.io.Reader.close</a></p></div></div></div><div id='method-getLineNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberReader'>java.io.LineNumberReader</span><br/><a href='source/LineNumberReader.html#java-io-LineNumberReader-method-getLineNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberReader-method-getLineNumber' class='name expandable'>getLineNumber</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the current line number. ...</div><div class='long'><p>Get the current line number.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The current line number\n@see <a href=\"#!/api/java.io.LineNumberReader-method-setLineNumber\" rel=\"java.io.LineNumberReader-method-setLineNumber\" class=\"docClass\">setLineNumber</a></p>\n</div></li></ul></div></div></div><div id='method-lines' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.BufferedReader' rel='java.io.BufferedReader' class='defined-in docClass'>java.io.BufferedReader</a><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-lines' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-lines' class='name expandable'>lines</a>( <span class='pre'></span> ) : Object {java.util.stream.Stream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code Stream}, the elements of which are lines read from\n this {@code BufferedReader}. ...</div><div class='long'><p>Returns a {@code Stream}, the elements of which are lines read from\n this {@code BufferedReader}.  The Stream is lazily populated,\n i.e., read only occurs during the\n <a href=\"../util/stream/package-summary.html#StreamOps\">terminal\n stream operation</a>.</p>\n\n<p> <p> The reader must not be operated on during the execution of the\n terminal stream operation. Otherwise, the result of the terminal stream\n operation is undefined.</p>\n\n<p> <p> After execution of the terminal stream operation there are no\n guarantees that the reader will be at a specific position from which to\n read the next character or line.</p>\n\n<p> <p> If an <a href=\"#!/api/java.io.IOException\" rel=\"java.io.IOException\" class=\"docClass\">java.io.IOException</a> is thrown when accessing the underlying\n {@code BufferedReader}, it is wrapped in an <a href=\"#!/api/java.io.UncheckedIOException\" rel=\"java.io.UncheckedIOException\" class=\"docClass\">java.io.UncheckedIOException</a> which will be thrown from the {@code Stream}\n method that caused the read to take place. This method will return a\n Stream if invoked on a BufferedReader that is closed. Any operation on\n that stream that requires reading from the BufferedReader after it is\n closed, will cause an UncheckedIOException to be thrown.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.stream.Stream}</span><div class='sub-desc'><p>a {@code Stream<String>} providing the lines of text\n         described by this {@code BufferedReader}</String></p>\n</div></li></ul></div></div></div><div id='method-mark' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberReader'>java.io.LineNumberReader</span><br/><a href='source/LineNumberReader.html#java-io-LineNumberReader-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberReader-method-mark' class='name expandable'>mark</a>( <span class='pre'>readAheadLimit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Mark the present position in the stream. ...</div><div class='long'><p>Mark the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point, and will also reset\n the line number appropriately.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>readAheadLimit</span> : Number<div class='sub-desc'><p>Limit on the number of characters that may be read while still\n         preserving the mark.  After reading this many characters,\n         attempting to reset the stream may fail.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.BufferedReader-method-mark\" rel=\"java.io.BufferedReader-method-mark\" class=\"docClass\">java.io.BufferedReader.mark</a></p></div></div></div><div id='method-markSupported' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.BufferedReader' rel='java.io.BufferedReader' class='defined-in docClass'>java.io.BufferedReader</a><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether this stream supports the mark() operation, which it does. ...</div><div class='long'><p>Tells whether this stream supports the mark() operation, which it does.</p>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-markSupported\" rel=\"java.io.Reader-method-markSupported\" class=\"docClass\">java.io.Reader.markSupported</a></p></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberReader'>java.io.LineNumberReader</span><br/><a href='source/LineNumberReader.html#java-io-LineNumberReader-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberReader-method-read' class='name expandable'>read</a>( <span class='pre'>cbuf, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Read characters into a portion of an array. ...</div><div class='long'><p>Read characters into a portion of an array.  Whenever a <a\n href=\"#lt\">line terminator</a> is read the current line number is\n incremented.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cbuf</span> : Object {char[]}<div class='sub-desc'><p>Destination buffer</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>Offset at which to start storing characters</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>Maximum number of characters to read</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of bytes read, or -1 if the end of the stream has\n          already been reached</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.BufferedReader-method-read\" rel=\"java.io.BufferedReader-method-read\" class=\"docClass\">java.io.BufferedReader.read</a></p></div></div></div><div id='method-readLine' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberReader'>java.io.LineNumberReader</span><br/><a href='source/LineNumberReader.html#java-io-LineNumberReader-method-readLine' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberReader-method-readLine' class='name expandable'>readLine</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Read a line of text. ...</div><div class='long'><p>Read a line of text.  Whenever a <a href=\"#lt\">line terminator</a> is\n read the current line number is incremented.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>A String containing the contents of the line, not including\n          any <a href=\"#lt\">line termination characters</a>, or\n          <tt>null</tt> if the end of the stream has been reached</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.BufferedReader-method-readLine\" rel=\"java.io.BufferedReader-method-readLine\" class=\"docClass\">java.io.BufferedReader.readLine</a></p></div></div></div><div id='method-ready' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.BufferedReader' rel='java.io.BufferedReader' class='defined-in docClass'>java.io.BufferedReader</a><br/><a href='source/BufferedReader.html#java-io-BufferedReader-method-ready' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.BufferedReader-method-ready' class='name expandable'>ready</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether this stream is ready to be read. ...</div><div class='long'><p>Tells whether this stream is ready to be read.  A buffered character\n stream is ready if the buffer is not empty, or if the underlying\n character stream is ready.\n@exception IOException  If an I/O error occurs</p>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-ready\" rel=\"java.io.Reader-method-ready\" class=\"docClass\">java.io.Reader.ready</a></p></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberReader'>java.io.LineNumberReader</span><br/><a href='source/LineNumberReader.html#java-io-LineNumberReader-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberReader-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reset the stream to the most recent mark. ...</div><div class='long'><p>Reset the stream to the most recent mark.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If the stream has not been marked, or if the mark has been\n          invalidated</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.BufferedReader-method-reset\" rel=\"java.io.BufferedReader-method-reset\" class=\"docClass\">java.io.BufferedReader.reset</a></p></div></div></div><div id='method-setLineNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberReader'>java.io.LineNumberReader</span><br/><a href='source/LineNumberReader.html#java-io-LineNumberReader-method-setLineNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberReader-method-setLineNumber' class='name expandable'>setLineNumber</a>( <span class='pre'>lineNumber</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Set the current line number. ...</div><div class='long'><p>Set the current line number.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lineNumber</span> : Number<div class='sub-desc'><p>An int specifying the line number\n@see <a href=\"#!/api/java.io.LineNumberReader-method-getLineNumber\" rel=\"java.io.LineNumberReader-method-getLineNumber\" class=\"docClass\">getLineNumber</a></p>\n</div></li></ul></div></div></div><div id='method-skip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberReader'>java.io.LineNumberReader</span><br/><a href='source/LineNumberReader.html#java-io-LineNumberReader-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberReader-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skip characters. ...</div><div class='long'><p>Skip characters.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>The number of characters to skip</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of characters actually skipped</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException\n          If an I/O error occurs</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException\n          If <tt>n</tt> is negative</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.BufferedReader-method-skip\" rel=\"java.io.BufferedReader-method-skip\" class=\"docClass\">java.io.BufferedReader.skip</a></p></div></div></div></div></div></div></div>","meta":{}});