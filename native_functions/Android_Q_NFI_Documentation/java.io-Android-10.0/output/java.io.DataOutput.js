Ext.data.JsonP.java_io_DataOutput({"tagname":"class","name":"java.io.DataOutput","autodetected":{},"files":[{"filename":"DataOutput.js","href":"DataOutput.html#java-io-DataOutput"}],"author":[{"tagname":"author","name":"Frank Yellin","email":null}],"since":"JDK1.0","members":[{"name":"write","tagname":"method","owner":"java.io.DataOutput","id":"method-write","meta":{}},{"name":"writeBoolean","tagname":"method","owner":"java.io.DataOutput","id":"method-writeBoolean","meta":{}},{"name":"writeByte","tagname":"method","owner":"java.io.DataOutput","id":"method-writeByte","meta":{}},{"name":"writeBytes","tagname":"method","owner":"java.io.DataOutput","id":"method-writeBytes","meta":{}},{"name":"writeChar","tagname":"method","owner":"java.io.DataOutput","id":"method-writeChar","meta":{}},{"name":"writeChars","tagname":"method","owner":"java.io.DataOutput","id":"method-writeChars","meta":{}},{"name":"writeDouble","tagname":"method","owner":"java.io.DataOutput","id":"method-writeDouble","meta":{}},{"name":"writeFloat","tagname":"method","owner":"java.io.DataOutput","id":"method-writeFloat","meta":{}},{"name":"writeInt","tagname":"method","owner":"java.io.DataOutput","id":"method-writeInt","meta":{}},{"name":"writeLong","tagname":"method","owner":"java.io.DataOutput","id":"method-writeLong","meta":{}},{"name":"writeShort","tagname":"method","owner":"java.io.DataOutput","id":"method-writeShort","meta":{}},{"name":"writeUTF","tagname":"method","owner":"java.io.DataOutput","id":"method-writeUTF","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.DataOutput","short_doc":"The DataOutput interface provides\n for converting data from any of the Java\n primitive types to a series of bytes and...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/DataOutput.html#java-io-DataOutput' target='_blank'>DataOutput.js</a></div></pre><div class='doc-contents'><p>The <code>DataOutput</code> interface provides\n for converting data from any of the Java\n primitive types to a series of bytes and\n writing these bytes to a binary stream.\n There is  also a facility for converting\n a <code>String</code> into\n <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n format and writing the resulting series\n of bytes.\n <p>\n For all the methods in this interface that\n write bytes, it is generally true that if\n a byte cannot be written for any reason,\n an <code>IOException</code> is thrown.</p>\n\n<p> @see     <a href=\"#!/api/java.io.DataInput\" rel=\"java.io.DataInput\" class=\"docClass\">java.io.DataInput</a>\n @see     <a href=\"#!/api/java.io.DataOutputStream\" rel=\"java.io.DataOutputStream\" class=\"docClass\">java.io.DataOutputStream</a></p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-write' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-write' class='name expandable'>write</a>( <span class='pre'>b, off, len</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes len bytes from array\n b, in order,  to\n the output stream. ...</div><div class='long'><p>Writes <code>len</code> bytes from array\n <code>b</code>, in order,  to\n the output stream.  If <code>b</code>\n is <code>null</code>, a <code>NullPointerException</code>\n is thrown.  If <code>off</code> is negative,\n or <code>len</code> is negative, or <code>off+len</code>\n is greater than the length of the array\n <code>b</code>, then an <code>IndexOutOfBoundsException</code>\n is thrown.  If <code>len</code> is zero,\n then no bytes are written. Otherwise, the\n byte <code>b[off]</code> is written first,\n then <code>b[off+1]</code>, and so on; the\n last byte written is <code>b[off+len-1]</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>the data.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset in the data.</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the number of bytes to write.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeBoolean' class='name expandable'>writeBoolean</a>( <span class='pre'>v</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a boolean value to this output stream. ...</div><div class='long'><p>Writes a <code>boolean</code> value to this output stream.\n If the argument <code>v</code>\n is <code>true</code>, the value <code>(byte)1</code>\n is written; if <code>v</code> is <code>false</code>,\n the  value <code>(byte)0</code> is written.\n The byte written by this method may\n be read by the <code>readBoolean</code>\n method of interface <code>DataInput</code>,\n which will then return a <code>boolean</code>\n equal to <code>v</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>v</span> : Boolean<div class='sub-desc'><p>the boolean to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeByte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeByte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeByte' class='name expandable'>writeByte</a>( <span class='pre'>v</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes to the output stream the eight low-\n order bits of the argument v. ...</div><div class='long'><p>Writes to the output stream the eight low-\n order bits of the argument <code>v</code>.\n The 24 high-order bits of <code>v</code>\n are ignored. (This means  that <code>writeByte</code>\n does exactly the same thing as <code>write</code>\n for an integer argument.) The byte written\n by this method may be read by the <code>readByte</code>\n method of interface <code>DataInput</code>,\n which will then return a <code>byte</code>\n equal to <code>(byte)v</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>v</span> : Number<div class='sub-desc'><p>the byte value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeBytes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeBytes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeBytes' class='name expandable'>writeBytes</a>( <span class='pre'>s</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a string to the output stream. ...</div><div class='long'><p>Writes a string to the output stream.\n For every character in the string\n <code>s</code>,  taken in order, one byte\n is written to the output stream.  If\n <code>s</code> is <code>null</code>, a <code>NullPointerException</code>\n is thrown.<p>  If <code>s.length</code>\n is zero, then no bytes are written. Otherwise,\n the character <code>s[0]</code> is written\n first, then <code>s[1]</code>, and so on;\n the last character written is <code>s[s.length-1]</code>.\n For each character, one byte is written,\n the low-order byte, in exactly the manner\n of the <code>writeByte</code> method . The\n high-order eight bits of each character\n in the string are ignored.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>s</span> : String<div class='sub-desc'><p>the string of bytes to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeChar' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeChar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeChar' class='name expandable'>writeChar</a>( <span class='pre'>v</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a char value, which\n is comprised of two bytes, to the\n output stream. ...</div><div class='long'><p>Writes a <code>char</code> value, which\n is comprised of two bytes, to the\n output stream.\n The byte values to be written, in the  order\n shown, are:\n <pre>{@code\n (byte)(0xff &amp; (v >> 8))\n (byte)(0xff &amp; v)\n }</pre><p>\n The bytes written by this method may be\n read by the <code>readChar</code> method\n of interface <code>DataInput</code> , which\n will then return a <code>char</code> equal\n to <code>(char)v</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>v</span> : Number<div class='sub-desc'><p>the <code>char</code> value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeChars' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeChars' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeChars' class='name expandable'>writeChars</a>( <span class='pre'>s</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes every character in the string s,\n to the output stream, in order,\n two bytes per character. ...</div><div class='long'><p>Writes every character in the string <code>s</code>,\n to the output stream, in order,\n two bytes per character. If <code>s</code>\n is <code>null</code>, a <code>NullPointerException</code>\n is thrown.  If <code>s.length</code>\n is zero, then no characters are written.\n Otherwise, the character <code>s[0]</code>\n is written first, then <code>s[1]</code>,\n and so on; the last character written is\n <code>s[s.length-1]</code>. For each character,\n two bytes are actually written, high-order\n byte first, in exactly the manner of the\n <code>writeChar</code> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>s</span> : String<div class='sub-desc'><p>the string value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeDouble' class='name expandable'>writeDouble</a>( <span class='pre'>v</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a double value,\n which is comprised of eight bytes, to the output stream. ...</div><div class='long'><p>Writes a <code>double</code> value,\n which is comprised of eight bytes, to the output stream.\n It does this as if it first converts this\n <code>double</code> value to a <code>long</code>\n in exactly the manner of the <code>Double.doubleToLongBits</code>\n method  and then writes the <code>long</code>\n value in exactly the manner of the  <code>writeLong</code>\n method. The bytes written by this method\n may be read by the <code>readDouble</code>\n method of interface <code>DataInput</code>,\n which will then return a <code>double</code>\n equal to <code>v</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>v</span> : Number<div class='sub-desc'><p>the <code>double</code> value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeFloat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeFloat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeFloat' class='name expandable'>writeFloat</a>( <span class='pre'>v</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a float value,\n which is comprised of four bytes, to the output stream. ...</div><div class='long'><p>Writes a <code>float</code> value,\n which is comprised of four bytes, to the output stream.\n It does this as if it first converts this\n <code>float</code> value to an <code>int</code>\n in exactly the manner of the <code>Float.floatToIntBits</code>\n method  and then writes the <code>int</code>\n value in exactly the manner of the  <code>writeInt</code>\n method.  The bytes written by this method\n may be read by the <code>readFloat</code>\n method of interface <code>DataInput</code>,\n which will then return a <code>float</code>\n equal to <code>v</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>v</span> : Number<div class='sub-desc'><p>the <code>float</code> value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeInt' class='name expandable'>writeInt</a>( <span class='pre'>v</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes an int value, which is\n comprised of four bytes, to the output stream. ...</div><div class='long'><p>Writes an <code>int</code> value, which is\n comprised of four bytes, to the output stream.\n The byte values to be written, in the  order\n shown, are:\n <pre>{@code\n (byte)(0xff &amp; (v >> 24))\n (byte)(0xff &amp; (v >> 16))\n (byte)(0xff &amp; (v >>  8))\n (byte)(0xff &amp; v)\n }</pre><p>\n The bytes written by this method may be read\n by the <code>readInt</code> method of interface\n <code>DataInput</code> , which will then\n return an <code>int</code> equal to <code>v</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>v</span> : Number<div class='sub-desc'><p>the <code>int</code> value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeLong' class='name expandable'>writeLong</a>( <span class='pre'>v</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a long value, which is\n comprised of eight bytes, to the output stream. ...</div><div class='long'><p>Writes a <code>long</code> value, which is\n comprised of eight bytes, to the output stream.\n The byte values to be written, in the  order\n shown, are:\n <pre>{@code\n (byte)(0xff &amp; (v >> 56))\n (byte)(0xff &amp; (v >> 48))\n (byte)(0xff &amp; (v >> 40))\n (byte)(0xff &amp; (v >> 32))\n (byte)(0xff &amp; (v >> 24))\n (byte)(0xff &amp; (v >> 16))\n (byte)(0xff &amp; (v >>  8))\n (byte)(0xff &amp; v)\n }</pre><p>\n The bytes written by this method may be\n read by the <code>readLong</code> method\n of interface <code>DataInput</code> , which\n will then return a <code>long</code> equal\n to <code>v</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>v</span> : Number<div class='sub-desc'><p>the <code>long</code> value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeShort' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeShort' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeShort' class='name expandable'>writeShort</a>( <span class='pre'>v</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes two bytes to the output\n stream to represent the value of the argument. ...</div><div class='long'><p>Writes two bytes to the output\n stream to represent the value of the argument.\n The byte values to be written, in the  order\n shown, are:\n <pre>{@code\n (byte)(0xff &amp; (v >> 8))\n (byte)(0xff &amp; v)\n }</pre> <p>\n The bytes written by this method may be\n read by the <code>readShort</code> method\n of interface <code>DataInput</code> , which\n will then return a <code>short</code> equal\n to <code>(short)v</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>v</span> : Number<div class='sub-desc'><p>the <code>short</code> value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-writeUTF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataOutput'>java.io.DataOutput</span><br/><a href='source/DataOutput.html#java-io-DataOutput-method-writeUTF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataOutput-method-writeUTF' class='name expandable'>writeUTF</a>( <span class='pre'>s</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes two bytes of length information\n to the output stream, followed\n by the\n modified UTF-8\n representation\n of  e...</div><div class='long'><p>Writes two bytes of length information\n to the output stream, followed\n by the\n <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n representation\n of  every character in the string <code>s</code>.\n If <code>s</code> is <code>null</code>,\n a <code>NullPointerException</code> is thrown.\n Each character in the string <code>s</code>\n is converted to a group of one, two, or\n three bytes, depending on the value of the\n character.<p>\n If a character <code>c</code>\n is in the range <code>&#92;u0001</code> through\n <code>&#92;u007f</code>, it is represented\n by one byte:\n <pre>(byte)c </pre>  <p>\n If a character <code>c</code> is <code>&#92;u0000</code>\n or is in the range <code>&#92;u0080</code>\n through <code>&#92;u07ff</code>, then it is\n represented by two bytes, to be written\n in the order shown: <pre>{@code\n (byte)(0xc0 | (0x1f &amp; (c >> 6)))\n (byte)(0x80 | (0x3f &amp; c))\n }</pre> <p> If a character\n <code>c</code> is in the range <code>&#92;u0800</code>\n through <code>uffff</code>, then it is\n represented by three bytes, to be written\n in the order shown: <pre>{@code\n (byte)(0xe0 | (0x0f &amp; (c >> 12)))\n (byte)(0x80 | (0x3f &amp; (c >>  6)))\n (byte)(0x80 | (0x3f &amp; c))\n }</pre>  <p> First,\n the total number of bytes needed to represent\n all the characters of <code>s</code> is\n calculated. If this number is larger than\n <code>65535</code>, then a <code>UTFDataFormatException</code>\n is thrown. Otherwise, this length is written\n to the output stream in exactly the manner\n of the <code>writeShort</code> method;\n after this, the one-, two-, or three-byte\n representation of each character in the\n string <code>s</code> is written.<p>  The\n bytes written by this method may be read\n by the <code>readUTF</code> method of interface\n <code>DataInput</code> , which will then\n return a <code>String</code> equal to <code>s</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>s</span> : String<div class='sub-desc'><p>the string value to be written.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});