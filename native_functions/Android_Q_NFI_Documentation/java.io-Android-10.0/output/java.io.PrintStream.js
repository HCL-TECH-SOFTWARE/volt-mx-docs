Ext.data.JsonP.java_io_PrintStream({"tagname":"class","name":"java.io.PrintStream","autodetected":{},"files":[{"filename":"PrintStream.js","href":"PrintStream.html#java-io-PrintStream"}],"extends":"java.io.FilterOutputStream","author":[{"tagname":"author","name":"Frank Yellin","email":null},{"tagname":"author","name":"Mark Reinhold","email":null}],"since":"JDK1.0","members":[{"name":"append","tagname":"method","owner":"java.io.PrintStream","id":"method-append","meta":{}},{"name":"checkError","tagname":"method","owner":"java.io.PrintStream","id":"method-checkError","meta":{}},{"name":"close","tagname":"method","owner":"java.io.PrintStream","id":"method-close","meta":{}},{"name":"flush","tagname":"method","owner":"java.io.PrintStream","id":"method-flush","meta":{}},{"name":"format","tagname":"method","owner":"java.io.PrintStream","id":"method-format","meta":{}},{"name":"print","tagname":"method","owner":"java.io.PrintStream","id":"method-print","meta":{}},{"name":"printf","tagname":"method","owner":"java.io.PrintStream","id":"method-printf","meta":{}},{"name":"println","tagname":"method","owner":"java.io.PrintStream","id":"method-println","meta":{}},{"name":"write","tagname":"method","owner":"java.io.PrintStream","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.PrintStream","short_doc":"implements java.lang.Appendable\n\n implements java.io.Closeable\n\nA PrintStream adds functionality to another output st...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.OutputStream","java.io.FilterOutputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.OutputStream' rel='java.io.OutputStream' class='docClass'>java.io.OutputStream</a><div class='subclass '><a href='#!/api/java.io.FilterOutputStream' rel='java.io.FilterOutputStream' class='docClass'>java.io.FilterOutputStream</a><div class='subclass '><strong>java.io.PrintStream</strong></div></div></div></div><h4>Files</h4><div class='dependency'><a href='source/PrintStream.html#java-io-PrintStream' target='_blank'>PrintStream.js</a></div></pre><div class='doc-contents'><p>implements java.lang.Appendable</p>\n\n<p> implements <a href=\"#!/api/java.io.Closeable\" rel=\"java.io.Closeable\" class=\"docClass\">java.io.Closeable</a></p>\n\n<p>A <code>PrintStream</code> adds functionality to another output stream,\n namely the ability to print representations of various data values\n conveniently.  Two other features are provided as well.  Unlike other output\n streams, a <code>PrintStream</code> never throws an\n <code>IOException</code>; instead, exceptional situations merely set an\n internal flag that can be tested via the <code>checkError</code> method.\n Optionally, a <code>PrintStream</code> can be created so as to flush\n automatically; this means that the <code>flush</code> method is\n automatically invoked after a byte array is written, one of the\n <code>println</code> methods is invoked, or a newline character or byte\n (<code>'\\n'</code>) is written.</p>\n\n<p> <p> All characters printed by a <code>PrintStream</code> are converted into\n bytes using the platform's default character encoding.  The <code><a href=\"#!/api/java.io.PrintWriter\" rel=\"java.io.PrintWriter\" class=\"docClass\">java.io.PrintWriter</a></code> class should be used in situations that require writing\n characters rather than bytes.</p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-append' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-append' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-append' class='name expandable'>append</a>( <span class='pre'>c</span> ) : Object {java.io.PrintStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Appends the specified character to this output stream. ...</div><div class='long'><p>Appends the specified character to this output stream.</p>\n\n<p> <p> An invocation of this method of the form <tt>out.append(c)</tt>\n behaves in exactly the same way as the invocation</p>\n\n<pre>     out.print(c) </pre>\n\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>c</span> : String<div class='sub-desc'><p>The 16-bit character to append</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.PrintStream}</span><div class='sub-desc'><p>This output stream</p>\n</div></li></ul></div></div></div><div id='method-checkError' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-checkError' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-checkError' class='name expandable'>checkError</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Flushes the stream and checks its error state. ...</div><div class='long'><p>Flushes the stream and checks its error state. The internal error state\n is set to <code>true</code> when the underlying output stream throws an\n <code>IOException</code> other than <code>InterruptedIOException</code>,\n and when the <code>setError</code> method is invoked.  If an operation\n on the underlying output stream throws an\n <code>InterruptedIOException</code>, then the <code>PrintStream</code>\n converts the exception back into an interrupt by doing:</p>\n\n<pre>     Thread.currentThread().interrupt();\n </pre>\n\n\n<p> or the equivalent.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if and only if this stream has encountered an\n         <code>IOException</code> other than\n         <code>InterruptedIOException</code>, or the\n         <code>setError</code> method has been invoked</p>\n</div></li></ul></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes the stream. ...</div><div class='long'><p>Closes the stream.  This is done by flushing the stream and then closing\n the underlying output stream.\n@see <a href=\"#!/api/java.io.OutputStream-method-close\" rel=\"java.io.OutputStream-method-close\" class=\"docClass\">java.io.OutputStream.close</a>()</p>\n<p>Overrides: <a href=\"#!/api/java.io.FilterOutputStream-method-close\" rel=\"java.io.FilterOutputStream-method-close\" class=\"docClass\">java.io.FilterOutputStream.close</a></p></div></div></div><div id='method-flush' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Flushes the stream. ...</div><div class='long'><p>Flushes the stream.  This is done by writing any buffered output bytes to\n the underlying output stream and then flushing that stream.\n@see <a href=\"#!/api/java.io.OutputStream-method-flush\" rel=\"java.io.OutputStream-method-flush\" class=\"docClass\">java.io.OutputStream.flush</a>()</p>\n<p>Overrides: <a href=\"#!/api/java.io.FilterOutputStream-method-flush\" rel=\"java.io.FilterOutputStream-method-flush\" class=\"docClass\">java.io.FilterOutputStream.flush</a></p></div></div></div><div id='method-format' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-format' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-format' class='name expandable'>format</a>( <span class='pre'>l, format, args</span> ) : Object {java.io.PrintStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a formatted string to this output stream using the specified\n format string and arguments. ...</div><div class='long'><p>Writes a formatted string to this output stream using the specified\n format string and arguments.</p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>l</span> : Object {Locale}<div class='sub-desc'><p>The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.</p>\n</div></li><li><span class='pre'>format</span> : String<div class='sub-desc'><p>A format string as described in <a\n         href=\"../util/Formatter.html#syntax\">Format string syntax</a></p>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         <cite>The Java&trade; Virtual Machine Specification</cite>.\n         The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href=\"../util/Formatter.html#syntax\">conversion</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.PrintStream}</span><div class='sub-desc'><p>This output stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>java.util.IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href=\"../util/Formatter.html#detail\">Details</a> section of the\n          formatter class specification.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n          If the <tt>format</tt> is <tt>null</tt></p>\n</div></li></ul></div></div></div><div id='method-print' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-print' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-print' class='name expandable'>print</a>( <span class='pre'>obj</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Prints an object. ...</div><div class='long'><p>Prints an object.  The string produced by the <code>java.lang.String.valueOf(Object)</code> method is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the\n <code><a href=\"#!/api/java.io.PrintStream-method-write\" rel=\"java.io.PrintStream-method-write\" class=\"docClass\">write</a>(int)</code> method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>The <code>Object</code> to be printed\n@see java.lang.Object#toString()</p>\n</div></li></ul></div></div></div><div id='method-printf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-printf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-printf' class='name expandable'>printf</a>( <span class='pre'>l, format, args</span> ) : Object {java.io.PrintStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>A convenience method to write a formatted string to this output stream\n using the specified format string and arguments. ...</div><div class='long'><p>A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.</p>\n\n<p> <p> An invocation of this method of the form <tt>out.printf(l, format,\n args)</tt> behaves in exactly the same way as the invocation</p>\n\n<pre>     out.format(l, format, args) </pre>\n\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>l</span> : Object {Locale}<div class='sub-desc'><p>The {@linkplain java.util.Locale locale} to apply during\n         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.</p>\n</div></li><li><span class='pre'>format</span> : String<div class='sub-desc'><p>A format string as described in <a\n         href=\"../util/Formatter.html#syntax\">Format string syntax</a></p>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         <cite>The Java&trade; Virtual Machine Specification</cite>.\n         The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href=\"../util/Formatter.html#syntax\">conversion</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.PrintStream}</span><div class='sub-desc'><p>This output stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>java.util.IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href=\"../util/Formatter.html#detail\">Details</a> section of the\n          formatter class specification.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n          If the <tt>format</tt> is <tt>null</tt></p>\n</div></li></ul></div></div></div><div id='method-println' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-println' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-println' class='name expandable'>println</a>( <span class='pre'>x</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Prints an Object and then terminate the line. ...</div><div class='long'><p>Prints an Object and then terminate the line.  This method calls\n at first String.valueOf(x) to get the printed object's string value,\n then behaves as\n though it invokes <code><a href=\"#!/api/java.io.PrintStream-method-print\" rel=\"java.io.PrintStream-method-print\" class=\"docClass\">print</a>(String)</code> and then\n <code><a href=\"#!/api/java.io.PrintStream-method-println\" rel=\"java.io.PrintStream-method-println\" class=\"docClass\">println</a>()</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Object {Object}<div class='sub-desc'><p>The <code>Object</code> to be printed.</p>\n</div></li></ul></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PrintStream'>java.io.PrintStream</span><br/><a href='source/PrintStream.html#java-io-PrintStream-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PrintStream-method-write' class='name expandable'>write</a>( <span class='pre'>buf, off, len</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes len bytes from the specified byte array starting at\n offset off to this stream. ...</div><div class='long'><p>Writes <code>len</code> bytes from the specified byte array starting at\n offset <code>off</code> to this stream.  If automatic flushing is\n enabled then the <code>flush</code> method will be invoked.</p>\n\n<p> <p> Note that the bytes will be written as given; to write characters\n that will be translated according to the platform's default character\n encoding, use the <code>print(char)</code> or <code>println(char)</code>\n methods.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>buf</span> : Object {byte[]}<div class='sub-desc'><p>A byte array</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>Offset from which to start taking bytes</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>Number of bytes to write</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.FilterOutputStream-method-write\" rel=\"java.io.FilterOutputStream-method-write\" class=\"docClass\">java.io.FilterOutputStream.write</a></p></div></div></div></div></div></div></div>","meta":{}});