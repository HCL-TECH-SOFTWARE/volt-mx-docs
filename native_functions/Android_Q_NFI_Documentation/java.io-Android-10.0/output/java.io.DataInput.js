Ext.data.JsonP.java_io_DataInput({"tagname":"class","name":"java.io.DataInput","autodetected":{},"files":[{"filename":"DataInput.js","href":"DataInput.html#java-io-DataInput"}],"author":[{"tagname":"author","name":"Frank Yellin","email":null}],"since":"JDK1.0","members":[{"name":"readBoolean","tagname":"method","owner":"java.io.DataInput","id":"method-readBoolean","meta":{}},{"name":"readByte","tagname":"method","owner":"java.io.DataInput","id":"method-readByte","meta":{}},{"name":"readChar","tagname":"method","owner":"java.io.DataInput","id":"method-readChar","meta":{}},{"name":"readDouble","tagname":"method","owner":"java.io.DataInput","id":"method-readDouble","meta":{}},{"name":"readFloat","tagname":"method","owner":"java.io.DataInput","id":"method-readFloat","meta":{}},{"name":"readFully","tagname":"method","owner":"java.io.DataInput","id":"method-readFully","meta":{}},{"name":"readInt","tagname":"method","owner":"java.io.DataInput","id":"method-readInt","meta":{}},{"name":"readLine","tagname":"method","owner":"java.io.DataInput","id":"method-readLine","meta":{}},{"name":"readLong","tagname":"method","owner":"java.io.DataInput","id":"method-readLong","meta":{}},{"name":"readShort","tagname":"method","owner":"java.io.DataInput","id":"method-readShort","meta":{}},{"name":"readUTF","tagname":"method","owner":"java.io.DataInput","id":"method-readUTF","meta":{}},{"name":"readUnsignedByte","tagname":"method","owner":"java.io.DataInput","id":"method-readUnsignedByte","meta":{}},{"name":"readUnsignedShort","tagname":"method","owner":"java.io.DataInput","id":"method-readUnsignedShort","meta":{}},{"name":"skipBytes","tagname":"method","owner":"java.io.DataInput","id":"method-skipBytes","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.DataInput","short_doc":"The {@code DataInput} interface provides\n for reading bytes from a binary stream and\n reconstructing from them data i...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/DataInput.html#java-io-DataInput' target='_blank'>DataInput.js</a></div></pre><div class='doc-contents'><p>The {@code DataInput} interface provides\n for reading bytes from a binary stream and\n reconstructing from them data in any of\n the Java primitive types. There is also\n a\n facility for reconstructing a {@code String}\n from data in\n <a href=\"#modified-utf-8\">modified UTF-8</a>\n format.\n <p>\n It is generally true of all the reading\n routines in this interface that if end of\n file is reached before the desired number\n of bytes has been read, an {@code EOFException}\n (which is a kind of {@code IOException})\n is thrown. If any byte cannot be read for\n any reason other than end of file, an {@code IOException}\n other than {@code EOFException} is\n thrown. In particular, an {@code IOException}\n may be thrown if the input stream has been\n closed.</p>\n\n<p> <h3><a name=\"modified-utf-8\">Modified UTF-8</a></h3>\n <p>\n Implementations of the DataInput and DataOutput interfaces represent\n Unicode strings in a format that is a slight modification of UTF-8.\n (For information regarding the standard UTF-8 format, see section\n <i>3.9 Unicode Encoding Forms</i> of <i>The Unicode Standard, Version\n 4.0</i>).\n Note that in the following table, the most significant bit appears in the\n far left-hand column.</p>\n\n<p> <blockquote>\n   <table border=\"1\" cellspacing=\"0\" cellpadding=\"8\"\n          summary=\"Bit values and bytes\">\n     <tr>\n       <th colspan=\"9\"><span style=\"font-weight:normal\">\n         All characters in the range {@code '\\u0001'} to\n         {@code '\\u007F'} are represented by a single byte:</span></th>\n     </tr>\n     <tr>\n       <td></td>\n       <th colspan=\"8\" id=\"bit_a\">Bit Values</th>\n     </tr>\n     <tr>\n       <th id=\"byte1_a\">Byte 1</th>\n       <td><center>0</center>\n       <td colspan=\"7\"><center>bits 6-0</center>\n     </td></td></tr>\n     <tr>\n       <th colspan=\"9\"><span style=\"font-weight:normal\">\n         The null character {@code '\\u0000'} and characters\n         in the range {@code '\\u0080'} to {@code '\\u07FF'} are\n         represented by a pair of bytes:</span></th>\n     </tr>\n     <tr>\n       <td></td>\n       <th colspan=\"8\" id=\"bit_b\">Bit Values</th>\n     </tr>\n     <tr>\n       <th id=\"byte1_b\">Byte 1</th>\n       <td><center>1</center>\n       <td><center>1</center>\n       <td><center>0</center>\n       <td colspan=\"5\"><center>bits 10-6</center>\n     </td></td></td></td></tr>\n     <tr>\n       <th id=\"byte2_a\">Byte 2</th>\n       <td><center>1</center>\n       <td><center>0</center>\n       <td colspan=\"6\"><center>bits 5-0</center>\n     </td></td></td></tr>\n     <tr>\n       <th colspan=\"9\"><span style=\"font-weight:normal\">\n         {@code char} values in the range {@code '\\u0800'}\n         to {@code '\\uFFFF'} are represented by three bytes:</span></th>\n     </tr>\n     <tr>\n       <td></td>\n       <th colspan=\"8\"id=\"bit_c\">Bit Values</th>\n     </tr>\n     <tr>\n       <th id=\"byte1_c\">Byte 1</th>\n       <td><center>1</center>\n       <td><center>1</center>\n       <td><center>1</center>\n       <td><center>0</center>\n       <td colspan=\"4\"><center>bits 15-12</center>\n     </td></td></td></td></td></tr>\n     <tr>\n       <th id=\"byte2_b\">Byte 2</th>\n       <td><center>1</center>\n       <td><center>0</center>\n       <td colspan=\"6\"><center>bits 11-6</center>\n     </td></td></td></tr>\n     <tr>\n       <th id=\"byte3\">Byte 3</th>\n       <td><center>1</center>\n       <td><center>0</center>\n       <td colspan=\"6\"><center>bits 5-0</center>\n     </td></td></td></tr>\n   </table>\n </blockquote>\n <p>\n The differences between this format and the\n standard UTF-8 format are the following:\n <ul>\n <li>The null byte {@code '\\u0000'} is encoded in 2-byte format\n     rather than 1-byte, so that the encoded strings never have\n     embedded nulls.\n <li>Only the 1-byte, 2-byte, and 3-byte formats are used.\n <li><a href=\"../lang/Character.html#unicode\">Supplementary characters</a>\n     are represented in the form of surrogate pairs.\n </li></li></li></ul>\n @see     <a href=\"#!/api/java.io.DataInputStream\" rel=\"java.io.DataInputStream\" class=\"docClass\">java.io.DataInputStream</a>\n @see     <a href=\"#!/api/java.io.DataOutput\" rel=\"java.io.DataOutput\" class=\"docClass\">java.io.DataOutput</a></p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-readBoolean' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readBoolean' class='name expandable'>readBoolean</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads one input byte and returns\n {@code true} if that byte is nonzero,\n {@code false} if that byte is zero. ...</div><div class='long'><p>Reads one input byte and returns\n {@code true} if that byte is nonzero,\n {@code false} if that byte is zero.\n This method is suitable for reading\n the byte written by the {@code writeBoolean}\n method of interface {@code DataOutput}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the {@code boolean} value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readByte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readByte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readByte' class='name expandable'>readByte</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads and returns one input byte. ...</div><div class='long'><p>Reads and returns one input byte.\n The byte is treated as a signed value in\n the range {@code -128} through {@code 127},\n inclusive.\n This method is suitable for\n reading the byte written by the {@code writeByte}\n method of interface {@code DataOutput}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 8-bit value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readChar' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readChar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readChar' class='name expandable'>readChar</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads two input bytes and returns a {@code char} value. ...</div><div class='long'><p>Reads two input bytes and returns a {@code char} value.\n Let {@code a}\n be the first byte read and {@code b}\n be the second byte. The value\n returned is:\n <pre>{@code (char)((a &lt;&lt; 8) | (b &amp; 0xff))\n }</pre>\n This method\n is suitable for reading bytes written by\n the {@code writeChar} method of interface\n {@code DataOutput}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the {@code char} value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readDouble' class='name expandable'>readDouble</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads eight input bytes and returns\n a {@code double} value. ...</div><div class='long'><p>Reads eight input bytes and returns\n a {@code double} value. It does this\n by first constructing a {@code long}\n value in exactly the manner\n of the {@code readLong}\n method, then converting this {@code long}\n value to a {@code double} in exactly\n the manner of the method {@code Double.longBitsToDouble}.\n This method is suitable for reading\n bytes written by the {@code writeDouble}\n method of interface {@code DataOutput}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the {@code double} value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readFloat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readFloat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readFloat' class='name expandable'>readFloat</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads four input bytes and returns\n a {@code float} value. ...</div><div class='long'><p>Reads four input bytes and returns\n a {@code float} value. It does this\n by first constructing an {@code int}\n value in exactly the manner\n of the {@code readInt}\n method, then converting this {@code int}\n value to a {@code float} in\n exactly the manner of the method {@code Float.intBitsToFloat}.\n This method is suitable for reading\n bytes written by the {@code writeFloat}\n method of interface {@code DataOutput}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the {@code float} value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readFully' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readFully' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readFully' class='name expandable'>readFully</a>( <span class='pre'>b, off, len</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads {@code len}\n bytes from\n an input stream. ...</div><div class='long'><p>Reads {@code len}\n bytes from\n an input stream.\n <p>\n This method\n blocks until one of the following conditions\n occurs:\n <ul>\n <li>{@code len} bytes\n of input data are available, in which case\n a normal return is made.</li></ul></p>\n\n<p> <li>End of file\n is detected, in which case an {@code EOFException}\n is thrown.</li></p>\n\n<p> <li>An I/O error occurs, in\n which case an {@code IOException} other\n than {@code EOFException} is thrown.\n \n <p>\n If {@code b} is {@code null},\n a {@code NullPointerException} is thrown.\n If {@code off} is negative, or {@code len}\n is negative, or {@code off+len} is\n greater than the length of the array {@code b},\n then an {@code IndexOutOfBoundsException}\n is thrown.\n If {@code len} is zero,\n then no bytes are read. Otherwise, the first\n byte read is stored into element {@code b[off]},\n the next one into {@code b[off+1]},\n and so on. The number of bytes read is,\n at most, equal to {@code len}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>the buffer into which the data is read.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>an int specifying the offset into the data.</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>an int specifying the number of bytes to read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readInt' class='name expandable'>readInt</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads four input bytes and returns an\n {@code int} value. ...</div><div class='long'><p>Reads four input bytes and returns an\n {@code int} value. Let {@code a-d}\n be the first through fourth bytes read. The value returned is:\n <pre>{@code\n (((a &amp; 0xff) &lt;&lt; 24) | ((b &amp; 0xff) &lt;&lt; 16) |\n  ((c &amp; 0xff) &lt;&lt;  8) | (d &amp; 0xff))\n }</pre>\n This method is suitable\n for reading bytes written by the {@code writeInt}\n method of interface {@code DataOutput}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the {@code int} value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readLine' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readLine' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readLine' class='name expandable'>readLine</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads the next line of text from the input stream. ...</div><div class='long'><p>Reads the next line of text from the input stream.\n It reads successive bytes, converting\n each byte separately into a character,\n until it encounters a line terminator or\n end of\n file; the characters read are then\n returned as a {@code String}. Note\n that because this\n method processes bytes,\n it does not support input of the full Unicode\n character set.\n <p>\n If end of file is encountered\n before even one byte can be read, then {@code null}\n is returned. Otherwise, each byte that is\n read is converted to type {@code char}\n by zero-extension. If the character {@code '\\n'}\n is encountered, it is discarded and reading\n ceases. If the character {@code '\\r'}\n is encountered, it is discarded and, if\n the following byte converts &#32;to the\n character {@code '\\n'}, then that is\n discarded also; reading then ceases. If\n end of file is encountered before either\n of the characters {@code '\\n'} and\n {@code '\\r'} is encountered, reading\n ceases. Once reading has ceased, a {@code String}\n is returned that contains all the characters\n read and not discarded, taken in order.\n Note that every character in this string\n will have a value less than {@code \\u0100},\n that is, {@code (char)256}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the next line of text from the input stream,\n         or {@code null} if the end of file is\n         encountered before a byte can be read.\n@exception IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readLong' class='name expandable'>readLong</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads eight input bytes and returns\n a {@code long} value. ...</div><div class='long'><p>Reads eight input bytes and returns\n a {@code long} value. Let {@code a-h}\n be the first through eighth bytes read.\n The value returned is:\n <pre>{@code\n (((long)(a &amp; 0xff) &lt;&lt; 56) |\n  ((long)(b &amp; 0xff) &lt;&lt; 48) |\n  ((long)(c &amp; 0xff) &lt;&lt; 40) |\n  ((long)(d &amp; 0xff) &lt;&lt; 32) |\n  ((long)(e &amp; 0xff) &lt;&lt; 24) |\n  ((long)(f &amp; 0xff) &lt;&lt; 16) |\n  ((long)(g &amp; 0xff) &lt;&lt;  8) |\n  ((long)(h &amp; 0xff)))\n }</pre>\n <p>\n This method is suitable\n for reading bytes written by the {@code writeLong}\n method of interface {@code DataOutput}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the {@code long} value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readShort' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readShort' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readShort' class='name expandable'>readShort</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads two input bytes and returns\n a {@code short} value. ...</div><div class='long'><p>Reads two input bytes and returns\n a {@code short} value. Let {@code a}\n be the first byte read and {@code b}\n be the second byte. The value\n returned\n is:\n <pre>{@code (short)((a &lt;&lt; 8) | (b &amp; 0xff))\n }</pre>\n This method\n is suitable for reading the bytes written\n by the {@code writeShort} method of\n interface {@code DataOutput}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 16-bit value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readUTF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readUTF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readUTF' class='name expandable'>readUTF</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads in a string that has been encoded using a\n modified UTF-8\n format. ...</div><div class='long'><p>Reads in a string that has been encoded using a\n <a href=\"#modified-utf-8\">modified UTF-8</a>\n format.\n The general contract of {@code readUTF}\n is that it reads a representation of a Unicode\n character string encoded in modified\n UTF-8 format; this string of characters\n is then returned as a {@code String}.\n <p>\n First, two bytes are read and used to\n construct an unsigned 16-bit integer in\n exactly the manner of the {@code readUnsignedShort}\n method . This integer value is called the\n <i>UTF length</i> and specifies the number\n of additional bytes to be read. These bytes\n are then converted to characters by considering\n them in groups. The length of each group\n is computed from the value of the first\n byte of the group. The byte following a\n group, if any, is the first byte of the\n next group.\n <p>\n If the first byte of a group\n matches the bit pattern {@code 0xxxxxxx}\n (where {@code x} means \"may be {@code 0}\n or {@code 1}\"), then the group consists\n of just that byte. The byte is zero-extended\n to form a character.\n <p>\n If the first byte\n of a group matches the bit pattern {@code 110xxxxx},\n then the group consists of that byte {@code a}\n and a second byte {@code b}. If there\n is no byte {@code b} (because byte\n {@code a} was the last of the bytes\n to be read), or if byte {@code b} does\n not match the bit pattern {@code 10xxxxxx},\n then a {@code UTFDataFormatException}\n is thrown. Otherwise, the group is converted\n to the character:\n <pre>{@code (char)(((a &amp; 0x1F) &lt;&lt; 6) | (b &amp; 0x3F))\n }</pre>\n If the first byte of a group\n matches the bit pattern {@code 1110xxxx},\n then the group consists of that byte {@code a}\n and two more bytes {@code b} and {@code c}.\n If there is no byte {@code c} (because\n byte {@code a} was one of the last\n two of the bytes to be read), or either\n byte {@code b} or byte {@code c}\n does not match the bit pattern {@code 10xxxxxx},\n then a {@code UTFDataFormatException}\n is thrown. Otherwise, the group is converted\n to the character:\n <pre>{@code\n (char)(((a &amp; 0x0F) &lt;&lt; 12) | ((b &amp; 0x3F) &lt;&lt; 6) | (c &amp; 0x3F))\n }</pre>\n If the first byte of a group matches the\n pattern {@code 1111xxxx} or the pattern\n {@code 10xxxxxx}, then a {@code UTFDataFormatException}\n is thrown.\n <p>\n If end of file is encountered\n at any time during this entire process,\n then an {@code EOFException} is thrown.\n <p>\n After every group has been converted to\n a character by this process, the characters\n are gathered, in the same order in which\n their corresponding groups were read from\n the input stream, to form a {@code String},\n which is returned.\n <p>\n The {@code writeUTF}\n method of interface {@code DataOutput}\n may be used to write data that is suitable\n for reading by this method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a Unicode string.\n@exception EOFException            if this stream reaches the end\n               before reading all the bytes.\n@exception IOException             if an I/O error occurs.\n@exception UTFDataFormatException  if the bytes do not represent a\n               valid modified UTF-8 encoding of a string.</p>\n</div></li></ul></div></div></div><div id='method-readUnsignedByte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readUnsignedByte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readUnsignedByte' class='name expandable'>readUnsignedByte</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads one input byte, zero-extends\n it to type {@code int}, and returns\n the result, which is therefore in the range\n...</div><div class='long'><p>Reads one input byte, zero-extends\n it to type {@code int}, and returns\n the result, which is therefore in the range\n {@code 0}\n through {@code 255}.\n This method is suitable for reading\n the byte written by the {@code writeByte}\n method of interface {@code DataOutput}\n if the argument to {@code writeByte}\n was intended to be a value in the range\n {@code 0} through {@code 255}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the unsigned 8-bit value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readUnsignedShort' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-readUnsignedShort' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-readUnsignedShort' class='name expandable'>readUnsignedShort</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads two input bytes and returns\n an {@code int} value in the range {@code 0}\n through {@code 65535}. ...</div><div class='long'><p>Reads two input bytes and returns\n an {@code int} value in the range {@code 0}\n through {@code 65535}. Let {@code a}\n be the first byte read and\n {@code b}\n be the second byte. The value returned is:\n <pre>{@code (((a &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n }</pre>\n This method is suitable for reading the bytes\n written by the {@code writeShort} method\n of interface {@code DataOutput}  if\n the argument to {@code writeShort}\n was intended to be a value in the range\n {@code 0} through {@code 65535}.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the unsigned 16-bit value read.\n@exception EOFException  if this stream reaches the end before reading\n               all the bytes.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-skipBytes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.DataInput'>java.io.DataInput</span><br/><a href='source/DataInput.html#java-io-DataInput-method-skipBytes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.DataInput-method-skipBytes' class='name expandable'>skipBytes</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Makes an attempt to skip over\n {@code n} bytes\n of data from the input\n stream, discarding the skipped bytes. ...</div><div class='long'><p>Makes an attempt to skip over\n {@code n} bytes\n of data from the input\n stream, discarding the skipped bytes. However,\n it may skip\n over some smaller number of\n bytes, possibly zero. This may result from\n any of a\n number of conditions; reaching\n end of file before {@code n} bytes\n have been skipped is\n only one possibility.\n This method never throws an {@code EOFException}.\n The actual\n number of bytes skipped is returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>the number of bytes to be skipped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of bytes actually skipped.\n@exception IOException   if an I/O error occurs.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});