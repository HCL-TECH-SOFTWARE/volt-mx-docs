Ext.data.JsonP.java_io_FileOutputStream({"tagname":"class","name":"java.io.FileOutputStream","autodetected":{},"files":[{"filename":"FileOutputStream.js","href":"FileOutputStream.html#java-io-FileOutputStream"}],"extends":"java.io.OutputStream","author":[{"tagname":"author","name":"Arthur van Hoff","email":null}],"since":"JDK1.0","members":[{"name":"close","tagname":"method","owner":"java.io.FileOutputStream","id":"method-close","meta":{}},{"name":"flush","tagname":"method","owner":"java.io.OutputStream","id":"method-flush","meta":{}},{"name":"getChannel","tagname":"method","owner":"java.io.FileOutputStream","id":"method-getChannel","meta":{}},{"name":"getFD","tagname":"method","owner":"java.io.FileOutputStream","id":"method-getFD","meta":{}},{"name":"write","tagname":"method","owner":"java.io.FileOutputStream","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.FileOutputStream","short_doc":"A file output stream is an output stream for writing data to a\n File or to a FileDescriptor. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.OutputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.OutputStream' rel='java.io.OutputStream' class='docClass'>java.io.OutputStream</a><div class='subclass '><strong>java.io.FileOutputStream</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/FileOutputStream.html#java-io-FileOutputStream' target='_blank'>FileOutputStream.js</a></div></pre><div class='doc-contents'><p>A file output stream is an output stream for writing data to a\n <code>File</code> or to a <code>FileDescriptor</code>. Whether or not\n a file is available or may be created depends upon the underlying\n platform.  Some platforms, in particular, allow a file to be opened\n for writing by only one <tt>FileOutputStream</tt> (or other\n file-writing object) at a time.  In such situations the constructors in\n this class will fail if the file involved is already open.</p>\n\n<p> <p><code>FileOutputStream</code> is meant for writing streams of raw bytes\n such as image data. For writing streams of characters, consider using\n <code>FileWriter</code>.</p>\n\n<p> @see     <a href=\"#!/api/java.io.File\" rel=\"java.io.File\" class=\"docClass\">java.io.File</a>\n @see     <a href=\"#!/api/java.io.FileDescriptor\" rel=\"java.io.FileDescriptor\" class=\"docClass\">java.io.FileDescriptor</a>\n @see     <a href=\"#!/api/java.io.FileInputStream\" rel=\"java.io.FileInputStream\" class=\"docClass\">java.io.FileInputStream</a>\n @see     java.nio.file.Files#newOutputStream</p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.FileOutputStream'>java.io.FileOutputStream</span><br/><a href='source/FileOutputStream.html#java-io-FileOutputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.FileOutputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this file output stream and releases any system resources\n associated with this stream. ...</div><div class='long'><p>Closes this file output stream and releases any system resources\n associated with this stream. This file output stream may no longer\n be used for writing bytes.</p>\n\n<p> <p> If this stream has an associated channel then the channel is closed\n as well.\n@exception IOException  if an I/O error occurs.\n@revised 1.4\n@spec JSR-51</p>\n<p>Overrides: <a href=\"#!/api/java.io.OutputStream-method-close\" rel=\"java.io.OutputStream-method-close\" class=\"docClass\">java.io.OutputStream.close</a></p></div></div></div><div id='method-flush' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.OutputStream' rel='java.io.OutputStream' class='defined-in docClass'>java.io.OutputStream</a><br/><a href='source/OutputStream.html#java-io-OutputStream-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.OutputStream-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Flushes this output stream and forces any buffered output bytes\n to be written out. ...</div><div class='long'><p>Flushes this output stream and forces any buffered output bytes\n to be written out. The general contract of <code>flush</code> is\n that calling it is an indication that, if any bytes previously\n written have been buffered by the implementation of the output\n stream, such bytes should immediately be written to their\n intended destination.\n <p>\n If the intended destination of this stream is an abstraction provided by\n the underlying operating system, for example a file, then flushing the\n stream guarantees only that bytes previously written to the stream are\n passed to the operating system for writing; it does not guarantee that\n they are actually written to a physical device such as a disk drive.\n <p>\n The <code>flush</code> method of <code>OutputStream</code> does nothing.\n@exception IOException  if an I/O error occurs.</p>\n</div></div></div><div id='method-getChannel' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.FileOutputStream'>java.io.FileOutputStream</span><br/><a href='source/FileOutputStream.html#java-io-FileOutputStream-method-getChannel' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.FileOutputStream-method-getChannel' class='name expandable'>getChannel</a>( <span class='pre'></span> ) : Object {java.nio.channels.FileChannel}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the unique java.io.FileChannel\n object associated with this file output stream. ...</div><div class='long'><p>Returns the unique java.io.FileChannel\n object associated with this file output stream.</p>\n\n<p> <p> The initial position of the returned channel will be equal to the\n number of bytes written to the file so far unless this stream is in\n append mode, in which case it will be equal to the size of the file.\n Writing bytes to this stream will increment the channel's position\n accordingly.  Changing the channel's position, either explicitly or by\n writing, will change this stream's file position.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.nio.channels.FileChannel}</span><div class='sub-desc'><p>the file channel associated with this file output stream\n@spec JSR-51</p>\n</div></li></ul></div></div></div><div id='method-getFD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.FileOutputStream'>java.io.FileOutputStream</span><br/><a href='source/FileOutputStream.html#java-io-FileOutputStream-method-getFD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.FileOutputStream-method-getFD' class='name expandable'>getFD</a>( <span class='pre'></span> ) : Object {java.io.FileDescriptor}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the file descriptor associated with this stream. ...</div><div class='long'><p>Returns the file descriptor associated with this stream.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.FileDescriptor}</span><div class='sub-desc'><p>the <code>FileDescriptor</code> object that represents\n          the connection to the file in the file system being used\n          by this <code>FileOutputStream</code> object.\n@exception IOException  if an I/O error occurs.\n@see <a href=\"#!/api/java.io.FileDescriptor\" rel=\"java.io.FileDescriptor\" class=\"docClass\">java.io.FileDescriptor</a></p>\n</div></li></ul></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.FileOutputStream'>java.io.FileOutputStream</span><br/><a href='source/FileOutputStream.html#java-io-FileOutputStream-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.FileOutputStream-method-write' class='name expandable'>write</a>( <span class='pre'>b, off, len</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes len bytes from the specified byte array\n starting at offset off to this file output stream. ...</div><div class='long'><p>Writes <code>len</code> bytes from the specified byte array\n starting at offset <code>off</code> to this file output stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>the data.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset in the data.</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the number of bytes to write.\n@exception IOException  if an I/O error occurs.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.OutputStream-method-write\" rel=\"java.io.OutputStream-method-write\" class=\"docClass\">java.io.OutputStream.write</a></p></div></div></div></div></div></div></div>","meta":{}});