Ext.data.JsonP.java_io_StreamTokenizer({"tagname":"class","name":"java.io.StreamTokenizer","autodetected":{},"files":[{"filename":"StreamTokenizer.js","href":"StreamTokenizer.html#java-io-StreamTokenizer"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"James Gosling","email":null}],"since":"JDK1.0","members":[{"name":"TT_EOF","tagname":"property","owner":"java.io.StreamTokenizer","id":"property-TT_EOF","meta":{}},{"name":"TT_EOL","tagname":"property","owner":"java.io.StreamTokenizer","id":"property-TT_EOL","meta":{}},{"name":"TT_NUMBER","tagname":"property","owner":"java.io.StreamTokenizer","id":"property-TT_NUMBER","meta":{}},{"name":"TT_WORD","tagname":"property","owner":"java.io.StreamTokenizer","id":"property-TT_WORD","meta":{}},{"name":"nval","tagname":"property","owner":"java.io.StreamTokenizer","id":"property-nval","meta":{}},{"name":"sval","tagname":"property","owner":"java.io.StreamTokenizer","id":"property-sval","meta":{}},{"name":"ttype","tagname":"property","owner":"java.io.StreamTokenizer","id":"property-ttype","meta":{}},{"name":"commentChar","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-commentChar","meta":{}},{"name":"eolIsSignificant","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-eolIsSignificant","meta":{}},{"name":"lineno","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-lineno","meta":{}},{"name":"lowerCaseMode","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-lowerCaseMode","meta":{}},{"name":"nextToken","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-nextToken","meta":{}},{"name":"ordinaryChar","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-ordinaryChar","meta":{}},{"name":"ordinaryChars","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-ordinaryChars","meta":{}},{"name":"parseNumbers","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-parseNumbers","meta":{}},{"name":"pushBack","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-pushBack","meta":{}},{"name":"quoteChar","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-quoteChar","meta":{}},{"name":"resetSyntax","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-resetSyntax","meta":{}},{"name":"slashSlashComments","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-slashSlashComments","meta":{}},{"name":"slashStarComments","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-slashStarComments","meta":{}},{"name":"toString","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-toString","meta":{}},{"name":"whitespaceChars","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-whitespaceChars","meta":{}},{"name":"wordChars","tagname":"method","owner":"java.io.StreamTokenizer","id":"method-wordChars","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.StreamTokenizer","short_doc":"The {@code StreamTokenizer} class takes an input stream and\n parses it into \"tokens\", allowing the tokens to be\n read...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.io.StreamTokenizer</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/StreamTokenizer.html#java-io-StreamTokenizer' target='_blank'>StreamTokenizer.js</a></div></pre><div class='doc-contents'><p>The {@code StreamTokenizer} class takes an input stream and\n parses it into \"tokens\", allowing the tokens to be\n read one at a time. The parsing process is controlled by a table\n and a number of flags that can be set to various states. The\n stream tokenizer can recognize identifiers, numbers, quoted\n strings, and various comment styles.\n <p>\n Each byte read from the input stream is regarded as a character\n in the range {@code '\\u0000'} through {@code '\\u00FF'}.\n The character value is used to look up five possible attributes of\n the character: <i>white space</i>, <i>alphabetic</i>,\n <i>numeric</i>, <i>string quote</i>, and <i>comment character</i>.\n Each character can have zero or more of these attributes.\n <p>\n In addition, an instance has four flags. These flags indicate:\n <ul>\n <li>Whether line terminators are to be returned as tokens or treated\n     as white space that merely separates tokens.\n <li>Whether C-style comments are to be recognized and skipped.\n <li>Whether C++-style comments are to be recognized and skipped.\n <li>Whether the characters of identifiers are converted to lowercase.\n </li></li></li></li></ul>\n <p>\n A typical application first constructs an instance of this class,\n sets up the syntax tables, and then repeatedly loops calling the\n {@code nextToken} method in each iteration of the loop until\n it returns the value {@code TT_EOF}.</p>\n\n<p> @see     <a href=\"#!/api/java.io.StreamTokenizer-method-nextToken\" rel=\"java.io.StreamTokenizer-method-nextToken\" class=\"docClass\">java.io.StreamTokenizer.nextToken</a>()\n @see     <a href=\"#!/api/java.io.StreamTokenizer-property-TT_EOF\" rel=\"java.io.StreamTokenizer-property-TT_EOF\" class=\"docClass\">java.io.StreamTokenizer.TT_EOF</a></p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-TT_EOF' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-property-TT_EOF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-property-TT_EOF' class='name expandable'>TT_EOF</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A constant indicating that the end of the stream has been read. ...</div><div class='long'><p>A constant indicating that the end of the stream has been read.</p>\n<p>Defaults to: <code>&quot;-1&quot;</code></p></div></div></div><div id='property-TT_EOL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-property-TT_EOL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-property-TT_EOL' class='name expandable'>TT_EOL</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A constant indicating that the end of the line has been read. ...</div><div class='long'><p>A constant indicating that the end of the line has been read.</p>\n<p>Defaults to: <code>&quot;10&quot;</code></p></div></div></div><div id='property-TT_NUMBER' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-property-TT_NUMBER' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-property-TT_NUMBER' class='name expandable'>TT_NUMBER</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A constant indicating that a number token has been read. ...</div><div class='long'><p>A constant indicating that a number token has been read.</p>\n<p>Defaults to: <code>&quot;-2&quot;</code></p></div></div></div><div id='property-TT_WORD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-property-TT_WORD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-property-TT_WORD' class='name expandable'>TT_WORD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>A constant indicating that a word token has been read. ...</div><div class='long'><p>A constant indicating that a word token has been read.</p>\n<p>Defaults to: <code>&quot;-3&quot;</code></p></div></div></div><div id='property-nval' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-property-nval' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-property-nval' class='name expandable'>nval</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If the current token is a number, this field contains the value\nof that number. ...</div><div class='long'><p>If the current token is a number, this field contains the value\nof that number. The current token is a number when the value of\nthe {@code ttype} field is {@code TT_NUMBER}.</p>\n\n<p><p>\nThe initial value of this field is 0.0.</p>\n\n<p>@see     <a href=\"#!/api/java.io.StreamTokenizer-property-TT_NUMBER\" rel=\"java.io.StreamTokenizer-property-TT_NUMBER\" class=\"docClass\">java.io.StreamTokenizer.TT_NUMBER</a>\n@see     <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a></p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-sval' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-property-sval' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-property-sval' class='name expandable'>sval</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>If the current token is a word token, this field contains a\nstring giving the characters of the word token. ...</div><div class='long'><p>If the current token is a word token, this field contains a\nstring giving the characters of the word token. When the current\ntoken is a quoted string token, this field contains the body of\nthe string.</p>\n\n<p><p>\nThe current token is a word when the value of the\n{@code ttype} field is {@code TT_WORD}. The current token is\na quoted string token when the value of the {@code ttype} field is\na quote character.\n<p>\nThe initial value of this field is null.</p>\n\n<p>@see     <a href=\"#!/api/java.io.StreamTokenizer-method-quoteChar\" rel=\"java.io.StreamTokenizer-method-quoteChar\" class=\"docClass\">java.io.StreamTokenizer.quoteChar</a>(int)\n@see     <a href=\"#!/api/java.io.StreamTokenizer-property-TT_WORD\" rel=\"java.io.StreamTokenizer-property-TT_WORD\" class=\"docClass\">java.io.StreamTokenizer.TT_WORD</a>\n@see     <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a></p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div><div id='property-ttype' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-property-ttype' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-property-ttype' class='name expandable'>ttype</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>After a call to the {@code nextToken} method, this field\ncontains the type of the token just read. ...</div><div class='long'><p>After a call to the {@code nextToken} method, this field\ncontains the type of the token just read. For a single character\ntoken, its value is the single character, converted to an integer.\nFor a quoted string token, its value is the quote character.\nOtherwise, its value is one of the following:</p>\n\n<ul>\n<li>{@code TT_WORD} indicates that the token is a word.\n<li>{@code TT_NUMBER} indicates that the token is a number.\n<li>{@code TT_EOL} indicates that the end of line has been read.\n    The field can only have this value if the\n    {@code eolIsSignificant} method has been called with the\n    argument {@code true}.\n<li>{@code TT_EOF} indicates that the end of the input stream\n    has been reached.\n</li></li></li></li></ul>\n\n\n<p><p>\nThe initial value of this field is -4.</p>\n\n<p>@see     <a href=\"#!/api/java.io.StreamTokenizer-method-eolIsSignificant\" rel=\"java.io.StreamTokenizer-method-eolIsSignificant\" class=\"docClass\">java.io.StreamTokenizer.eolIsSignificant</a>(boolean)\n@see     <a href=\"#!/api/java.io.StreamTokenizer-method-nextToken\" rel=\"java.io.StreamTokenizer-method-nextToken\" class=\"docClass\">java.io.StreamTokenizer.nextToken</a>()\n@see     <a href=\"#!/api/java.io.StreamTokenizer-method-quoteChar\" rel=\"java.io.StreamTokenizer-method-quoteChar\" class=\"docClass\">java.io.StreamTokenizer.quoteChar</a>(int)\n@see     <a href=\"#!/api/java.io.StreamTokenizer-property-TT_EOF\" rel=\"java.io.StreamTokenizer-property-TT_EOF\" class=\"docClass\">java.io.StreamTokenizer.TT_EOF</a>\n@see     <a href=\"#!/api/java.io.StreamTokenizer-property-TT_EOL\" rel=\"java.io.StreamTokenizer-property-TT_EOL\" class=\"docClass\">java.io.StreamTokenizer.TT_EOL</a>\n@see     <a href=\"#!/api/java.io.StreamTokenizer-property-TT_NUMBER\" rel=\"java.io.StreamTokenizer-property-TT_NUMBER\" class=\"docClass\">java.io.StreamTokenizer.TT_NUMBER</a>\n@see     <a href=\"#!/api/java.io.StreamTokenizer-property-TT_WORD\" rel=\"java.io.StreamTokenizer-property-TT_WORD\" class=\"docClass\">java.io.StreamTokenizer.TT_WORD</a></p>\n<p>Defaults to: <code>&quot;null&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-commentChar' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-commentChar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-commentChar' class='name expandable'>commentChar</a>( <span class='pre'>ch</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specified that the character argument starts a single-line\n comment. ...</div><div class='long'><p>Specified that the character argument starts a single-line\n comment. All characters from the comment character to the end of\n the line are ignored by this stream tokenizer.</p>\n\n<p> <p>Any other attribute settings for the specified character are cleared.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ch</span> : Number<div class='sub-desc'><p>the character.</p>\n</div></li></ul></div></div></div><div id='method-eolIsSignificant' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-eolIsSignificant' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-eolIsSignificant' class='name expandable'>eolIsSignificant</a>( <span class='pre'>flag</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Determines whether or not ends of line are treated as tokens. ...</div><div class='long'><p>Determines whether or not ends of line are treated as tokens.\n If the flag argument is true, this tokenizer treats end of lines\n as tokens; the {@code nextToken} method returns\n {@code TT_EOL} and also sets the {@code ttype} field to\n this value when an end of line is read.\n <p>\n A line is a sequence of characters ending with either a\n carriage-return character ({@code '\\r'}) or a newline\n character ({@code '\\n'}). In addition, a carriage-return\n character followed immediately by a newline character is treated\n as a single end-of-line token.\n <p>\n If the {@code flag} is false, end-of-line characters are\n treated as white space and serve only to separate tokens.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flag</span> : Boolean<div class='sub-desc'><p>{@code true} indicates that end-of-line characters\n                 are separate tokens; {@code false} indicates that\n                 end-of-line characters are white space.\n@see <a href=\"#!/api/java.io.StreamTokenizer-method-nextToken\" rel=\"java.io.StreamTokenizer-method-nextToken\" class=\"docClass\">java.io.StreamTokenizer.nextToken</a>()\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-TT_EOL\" rel=\"java.io.StreamTokenizer-property-TT_EOL\" class=\"docClass\">java.io.StreamTokenizer.TT_EOL</a></p>\n</div></li></ul></div></div></div><div id='method-lineno' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-lineno' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-lineno' class='name expandable'>lineno</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Return the current line number. ...</div><div class='long'><p>Return the current line number.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current line number of this stream tokenizer.</p>\n</div></li></ul></div></div></div><div id='method-lowerCaseMode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-lowerCaseMode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-lowerCaseMode' class='name expandable'>lowerCaseMode</a>( <span class='pre'>fl</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Determines whether or not word token are automatically lowercased. ...</div><div class='long'><p>Determines whether or not word token are automatically lowercased.\n If the flag argument is {@code true}, then the value in the\n {@code sval} field is lowercased whenever a word token is\n returned (the {@code ttype} field has the\n value {@code TT_WORD} by the {@code nextToken} method\n of this tokenizer.\n <p>\n If the flag argument is {@code false}, then the\n {@code sval} field is not modified.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fl</span> : Boolean<div class='sub-desc'><p>{@code true} indicates that all word tokens should\n               be lowercased.\n@see <a href=\"#!/api/java.io.StreamTokenizer-method-nextToken\" rel=\"java.io.StreamTokenizer-method-nextToken\" class=\"docClass\">java.io.StreamTokenizer.nextToken</a>()\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-TT_WORD\" rel=\"java.io.StreamTokenizer-property-TT_WORD\" class=\"docClass\">java.io.StreamTokenizer.TT_WORD</a></p>\n</div></li></ul></div></div></div><div id='method-nextToken' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-nextToken' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-nextToken' class='name expandable'>nextToken</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Parses the next token from the input stream of this tokenizer. ...</div><div class='long'><p>Parses the next token from the input stream of this tokenizer.\n The type of the next token is returned in the {@code ttype}\n field. Additional information about the token may be in the\n {@code nval} field or the {@code sval} field of this\n tokenizer.\n <p>\n Typical clients of this\n class first set up the syntax tables and then sit in a loop\n calling nextToken to parse successive tokens until TT_EOF\n is returned.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value of the {@code ttype} field.\n@exception IOException  if an I/O error occurs.\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-nval\" rel=\"java.io.StreamTokenizer-property-nval\" class=\"docClass\">java.io.StreamTokenizer.nval</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-sval\" rel=\"java.io.StreamTokenizer-property-sval\" class=\"docClass\">java.io.StreamTokenizer.sval</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a></p>\n</div></li></ul></div></div></div><div id='method-ordinaryChar' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-ordinaryChar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-ordinaryChar' class='name expandable'>ordinaryChar</a>( <span class='pre'>ch</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that the character argument is \"ordinary\"\n in this tokenizer. ...</div><div class='long'><p>Specifies that the character argument is \"ordinary\"\n in this tokenizer. It removes any special significance the\n character has as a comment character, word component, string\n delimiter, white space, or number character. When such a character\n is encountered by the parser, the parser treats it as a\n single-character token and sets {@code ttype} field to the\n character value.</p>\n\n<p> <p>Making a line terminator character \"ordinary\" may interfere\n with the ability of a {@code StreamTokenizer} to count\n lines. The {@code lineno} method may no longer reflect\n the presence of such terminator characters in its line count.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ch</span> : Number<div class='sub-desc'><p>the character.\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a></p>\n</div></li></ul></div></div></div><div id='method-ordinaryChars' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-ordinaryChars' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-ordinaryChars' class='name expandable'>ordinaryChars</a>( <span class='pre'>low, hi</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that all characters c in the range\n low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high\n are \"ordinary\" in this toke...</div><div class='long'><p>Specifies that all characters <i>c</i> in the range\n <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\n are \"ordinary\" in this tokenizer. See the\n {@code ordinaryChar} method for more information on a\n character being ordinary.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>low</span> : Number<div class='sub-desc'><p>the low end of the range.</p>\n</div></li><li><span class='pre'>hi</span> : Number<div class='sub-desc'><p>the high end of the range.\n@see <a href=\"#!/api/java.io.StreamTokenizer-method-ordinaryChar\" rel=\"java.io.StreamTokenizer-method-ordinaryChar\" class=\"docClass\">java.io.StreamTokenizer.ordinaryChar</a>(int)</p>\n</div></li></ul></div></div></div><div id='method-parseNumbers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-parseNumbers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-parseNumbers' class='name expandable'>parseNumbers</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that numbers should be parsed by this tokenizer. ...</div><div class='long'><p>Specifies that numbers should be parsed by this tokenizer. The\n syntax table of this tokenizer is modified so that each of the twelve\n characters:\n <blockquote></blockquote></p>\n\n<pre>      0 1 2 3 4 5 6 7 8 9 . -\n </pre>\n\n\n<p>\n <p>\n has the \"numeric\" attribute.\n <p>\n When the parser encounters a word token that has the format of a\n double precision floating-point number, it treats the token as a\n number rather than a word, by setting the {@code ttype}\n field to the value {@code TT_NUMBER} and putting the numeric\n value of the token into the {@code nval} field.\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-nval\" rel=\"java.io.StreamTokenizer-property-nval\" class=\"docClass\">java.io.StreamTokenizer.nval</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-TT_NUMBER\" rel=\"java.io.StreamTokenizer-property-TT_NUMBER\" class=\"docClass\">java.io.StreamTokenizer.TT_NUMBER</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a></p>\n</div></div></div><div id='method-pushBack' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-pushBack' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-pushBack' class='name expandable'>pushBack</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes the next call to the {@code nextToken} method of this\n tokenizer to return the current value in the {@code tty...</div><div class='long'><p>Causes the next call to the {@code nextToken} method of this\n tokenizer to return the current value in the {@code ttype}\n field, and not to modify the value in the {@code nval} or\n {@code sval} field.\n@see <a href=\"#!/api/java.io.StreamTokenizer-method-nextToken\" rel=\"java.io.StreamTokenizer-method-nextToken\" class=\"docClass\">java.io.StreamTokenizer.nextToken</a>()\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-nval\" rel=\"java.io.StreamTokenizer-property-nval\" class=\"docClass\">java.io.StreamTokenizer.nval</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-sval\" rel=\"java.io.StreamTokenizer-property-sval\" class=\"docClass\">java.io.StreamTokenizer.sval</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a></p>\n</div></div></div><div id='method-quoteChar' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-quoteChar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-quoteChar' class='name expandable'>quoteChar</a>( <span class='pre'>ch</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that matching pairs of this character delimit string\n constants in this tokenizer. ...</div><div class='long'><p>Specifies that matching pairs of this character delimit string\n constants in this tokenizer.\n <p>\n When the {@code nextToken} method encounters a string\n constant, the {@code ttype} field is set to the string\n delimiter and the {@code sval} field is set to the body of\n the string.\n <p>\n If a string quote character is encountered, then a string is\n recognized, consisting of all characters after (but not including)\n the string quote character, up to (but not including) the next\n occurrence of that same string quote character, or a line\n terminator, or end of file. The usual escape sequences such as\n {@code \"\\n\"} and {@code \"\\t\"} are recognized and\n converted to single characters as the string is parsed.</p>\n\n<p> <p>Any other attribute settings for the specified character are cleared.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ch</span> : Number<div class='sub-desc'><p>the character.\n@see <a href=\"#!/api/java.io.StreamTokenizer-method-nextToken\" rel=\"java.io.StreamTokenizer-method-nextToken\" class=\"docClass\">java.io.StreamTokenizer.nextToken</a>()\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-sval\" rel=\"java.io.StreamTokenizer-property-sval\" class=\"docClass\">java.io.StreamTokenizer.sval</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a></p>\n</div></li></ul></div></div></div><div id='method-resetSyntax' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-resetSyntax' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-resetSyntax' class='name expandable'>resetSyntax</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets this tokenizer's syntax table so that all characters are\n \"ordinary.\" See the {@code ordinaryChar} method\n for...</div><div class='long'><p>Resets this tokenizer's syntax table so that all characters are\n \"ordinary.\" See the {@code ordinaryChar} method\n for more information on a character being ordinary.\n@see <a href=\"#!/api/java.io.StreamTokenizer-method-ordinaryChar\" rel=\"java.io.StreamTokenizer-method-ordinaryChar\" class=\"docClass\">java.io.StreamTokenizer.ordinaryChar</a>(int)</p>\n</div></div></div><div id='method-slashSlashComments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-slashSlashComments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-slashSlashComments' class='name expandable'>slashSlashComments</a>( <span class='pre'>flag</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Determines whether or not the tokenizer recognizes C++-style comments. ...</div><div class='long'><p>Determines whether or not the tokenizer recognizes C++-style comments.\n If the flag argument is {@code true}, this stream tokenizer\n recognizes C++-style comments. Any occurrence of two consecutive\n slash characters ({@code '/'}) is treated as the beginning of\n a comment that extends to the end of the line.\n <p>\n If the flag argument is {@code false}, then C++-style\n comments are not treated specially.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flag</span> : Boolean<div class='sub-desc'><p>{@code true} indicates to recognize and ignore\n                 C++-style comments.</p>\n</div></li></ul></div></div></div><div id='method-slashStarComments' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-slashStarComments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-slashStarComments' class='name expandable'>slashStarComments</a>( <span class='pre'>flag</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Determines whether or not the tokenizer recognizes C-style comments. ...</div><div class='long'><p>Determines whether or not the tokenizer recognizes C-style comments.\n If the flag argument is {@code true}, this stream tokenizer\n recognizes C-style comments. All text between successive\n occurrences of {@code /<em>} and <code></code></em>&#47; are discarded.\n <p>\n If the flag argument is {@code false}, then C-style comments\n are not treated specially.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>flag</span> : Boolean<div class='sub-desc'><p>{@code true} indicates to recognize and ignore\n                 C-style comments.</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the string representation of the current stream token and\n the line number it occurs on. ...</div><div class='long'><p>Returns the string representation of the current stream token and\n the line number it occurs on.</p>\n\n<p> <p>The precise string returned is unspecified, although the following\n example can be considered typical:</p>\n\n<p> <blockquote><pre>Token['a'], line 10</pre></blockquote></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a string representation of the token\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-nval\" rel=\"java.io.StreamTokenizer-property-nval\" class=\"docClass\">java.io.StreamTokenizer.nval</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-sval\" rel=\"java.io.StreamTokenizer-property-sval\" class=\"docClass\">java.io.StreamTokenizer.sval</a>\n@see <a href=\"#!/api/java.io.StreamTokenizer-property-ttype\" rel=\"java.io.StreamTokenizer-property-ttype\" class=\"docClass\">java.io.StreamTokenizer.ttype</a></p>\n</div></li></ul></div></div></div><div id='method-whitespaceChars' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-whitespaceChars' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-whitespaceChars' class='name expandable'>whitespaceChars</a>( <span class='pre'>low, hi</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that all characters c in the range\n low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high\n are white space characters. ...</div><div class='long'><p>Specifies that all characters <i>c</i> in the range\n <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\n are white space characters. White space characters serve only to\n separate tokens in the input stream.</p>\n\n<p> <p>Any other attribute settings for the characters in the specified\n range are cleared.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>low</span> : Number<div class='sub-desc'><p>the low end of the range.</p>\n</div></li><li><span class='pre'>hi</span> : Number<div class='sub-desc'><p>the high end of the range.</p>\n</div></li></ul></div></div></div><div id='method-wordChars' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.StreamTokenizer'>java.io.StreamTokenizer</span><br/><a href='source/StreamTokenizer.html#java-io-StreamTokenizer-method-wordChars' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.StreamTokenizer-method-wordChars' class='name expandable'>wordChars</a>( <span class='pre'>low, hi</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specifies that all characters c in the range\n low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high\n are word constituents. ...</div><div class='long'><p>Specifies that all characters <i>c</i> in the range\n <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\n are word constituents. A word token consists of a word constituent\n followed by zero or more word constituents or number constituents.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>low</span> : Number<div class='sub-desc'><p>the low end of the range.</p>\n</div></li><li><span class='pre'>hi</span> : Number<div class='sub-desc'><p>the high end of the range.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});