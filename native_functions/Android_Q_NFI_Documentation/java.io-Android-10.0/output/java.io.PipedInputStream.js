Ext.data.JsonP.java_io_PipedInputStream({"tagname":"class","name":"java.io.PipedInputStream","autodetected":{},"files":[{"filename":"PipedInputStream.js","href":"PipedInputStream.html#java-io-PipedInputStream"}],"extends":"java.io.InputStream","author":[{"tagname":"author","name":"James Gosling","email":null}],"since":"JDK1.0","members":[{"name":"available","tagname":"method","owner":"java.io.PipedInputStream","id":"method-available","meta":{}},{"name":"close","tagname":"method","owner":"java.io.PipedInputStream","id":"method-close","meta":{}},{"name":"connect","tagname":"method","owner":"java.io.PipedInputStream","id":"method-connect","meta":{}},{"name":"mark","tagname":"method","owner":"java.io.InputStream","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.io.InputStream","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.io.PipedInputStream","id":"method-read","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.InputStream","id":"method-reset","meta":{}},{"name":"skip","tagname":"method","owner":"java.io.InputStream","id":"method-skip","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.PipedInputStream","short_doc":"A piped input stream should be connected\n to a piped output stream; the piped  input\n stream then provides whatever d...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.InputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='docClass'>java.io.InputStream</a><div class='subclass '><strong>java.io.PipedInputStream</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/PipedInputStream.html#java-io-PipedInputStream' target='_blank'>PipedInputStream.js</a></div></pre><div class='doc-contents'><p>A piped input stream should be connected\n to a piped output stream; the piped  input\n stream then provides whatever data bytes\n are written to the piped output  stream.\n Typically, data is read from a <code>PipedInputStream</code>\n object by one thread  and data is written\n to the corresponding <code>PipedOutputStream</code>\n by some  other thread. Attempting to use\n both objects from a single thread is not\n recommended, as it may deadlock the thread.\n The piped input stream contains a buffer,\n decoupling read operations from write operations,\n within limits.\n A pipe is said to be <a name=\"BROKEN\"> <i>broken</i> </a> if a\n thread that was providing data bytes to the connected\n piped output stream is no longer alive.</p>\n\n<p> @see     <a href=\"#!/api/java.io.PipedOutputStream\" rel=\"java.io.PipedOutputStream\" class=\"docClass\">java.io.PipedOutputStream</a></p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-available' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedInputStream'>java.io.PipedInputStream</span><br/><a href='source/PipedInputStream.html#java-io-PipedInputStream-method-available' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedInputStream-method-available' class='name expandable'>available</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of bytes that can be read from this input\n stream without blocking. ...</div><div class='long'><p>Returns the number of bytes that can be read from this input\n stream without blocking.</p>\n        <p>Available since: <b>JDK1.0.2</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of bytes that can be read from this input stream\n         without blocking, or {@code 0} if this input stream has been\n         closed by invoking its close() method, or if the pipe\n         is unconnected, or\n          <a href=\"#BROKEN\"> <code>broken</code></a>.\n@exception IOException  if an I/O error occurs.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.InputStream-method-available\" rel=\"java.io.InputStream-method-available\" class=\"docClass\">java.io.InputStream.available</a></p></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedInputStream'>java.io.PipedInputStream</span><br/><a href='source/PipedInputStream.html#java-io-PipedInputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedInputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this piped input stream and releases any system resources\n associated with the stream. ...</div><div class='long'><p>Closes this piped input stream and releases any system resources\n associated with the stream.\n@exception IOException  if an I/O error occurs.</p>\n<p>Overrides: <a href=\"#!/api/java.io.InputStream-method-close\" rel=\"java.io.InputStream-method-close\" class=\"docClass\">java.io.InputStream.close</a></p></div></div></div><div id='method-connect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedInputStream'>java.io.PipedInputStream</span><br/><a href='source/PipedInputStream.html#java-io-PipedInputStream-method-connect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedInputStream-method-connect' class='name expandable'>connect</a>( <span class='pre'>src</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes this piped input stream to be connected\n to the piped  output stream src. ...</div><div class='long'><p>Causes this piped input stream to be connected\n to the piped  output stream <code>src</code>.\n If this object is already connected to some\n other piped output  stream, an <code>IOException</code>\n is thrown.\n <p>\n If <code>src</code> is an\n unconnected piped output stream and <code>snk</code>\n is an unconnected piped input stream, they\n may be connected by either the call:</p>\n\n<p> <pre><code>snk.connect(src)</code> </pre>\n <p>\n or the call:</p>\n\n<p> <pre><code>src.connect(snk)</code> </pre>\n <p>\n The two calls have the same effect.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object {PipedOutputStream}<div class='sub-desc'><p>The piped output stream to connect to.\n@exception IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-mark' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-mark' class='name expandable'>mark</a>( <span class='pre'>readlimit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Marks the current position in this input stream. ...</div><div class='long'><p>Marks the current position in this input stream. A subsequent call to\n the <code>reset</code> method repositions this stream at the last marked\n position so that subsequent reads re-read the same bytes.</p>\n\n<p> <p> The <code>readlimit</code> arguments tells this input stream to\n allow that many bytes to be read before the mark position gets\n invalidated.</p>\n\n<p> <p> The general contract of <code>mark</code> is that, if the method\n <code>markSupported</code> returns <code>true</code>, the stream somehow\n remembers all the bytes read after the call to <code>mark</code> and\n stands ready to supply those same bytes again if and whenever the method\n <code>reset</code> is called.  However, the stream is not required to\n remember any data at all if more than <code>readlimit</code> bytes are\n read from the stream before <code>reset</code> is called.</p>\n\n<p> <p> Marking a closed stream should not have any effect on the stream.</p>\n\n<p> <p> The <code>mark</code> method of <code>InputStream</code> does\n nothing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>readlimit</span> : Number<div class='sub-desc'><p>the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul></div></div></div><div id='method-markSupported' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if this input stream supports the mark and\n reset methods. ...</div><div class='long'><p>Tests if this input stream supports the <code>mark</code> and\n <code>reset</code> methods. Whether or not <code>mark</code> and\n <code>reset</code> are supported is an invariant property of a\n particular input stream instance. The <code>markSupported</code> method\n of <code>InputStream</code> returns <code>false</code>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if this stream instance supports the mark\n          and reset methods; <code>false</code> otherwise.\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedInputStream'>java.io.PipedInputStream</span><br/><a href='source/PipedInputStream.html#java-io-PipedInputStream-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedInputStream-method-read' class='name expandable'>read</a>( <span class='pre'>b, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads up to len bytes of data from this piped input\n stream into an array of bytes. ...</div><div class='long'><p>Reads up to <code>len</code> bytes of data from this piped input\n stream into an array of bytes. Less than <code>len</code> bytes\n will be read if the end of the data stream is reached or if\n <code>len</code> exceeds the pipe's buffer size.\n If <code>len </code> is zero, then no bytes are read and 0 is returned;\n otherwise, the method blocks until at least 1 byte of input is\n available, end of the stream has been detected, or an exception is\n thrown.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>the buffer into which the data is read.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset in the destination array <code>b</code></p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the maximum number of bytes read.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the stream has been reached.\n@exception NullPointerException If <code>b</code> is <code>null</code>.\n@exception IndexOutOfBoundsException If <code>off</code> is negative,\n <code>len</code> is negative, or <code>len</code> is greater than\n <code>b.length - off</code>\n@exception IOException if the pipe is <a href=\"#BROKEN\"> <code>broken</code></a>,\n           unconnected,\n           closed, or if an I/O error occurs.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.InputStream-method-read\" rel=\"java.io.InputStream-method-read\" class=\"docClass\">java.io.InputStream.read</a></p></div></div></div><div id='method-reset' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Repositions this stream to the position at the time the\n mark method was last called on this input stream. ...</div><div class='long'><p>Repositions this stream to the position at the time the\n <code>mark</code> method was last called on this input stream.</p>\n\n<p> <p> The general contract of <code>reset</code> is:</p>\n\n<p> <ul>\n <li> If the method <code>markSupported</code> returns\n <code>true</code>, then:</li></ul></p>\n\n<pre><code> &lt;ul&gt;&lt;li&gt; If the method &lt;code&gt;mark&lt;/code&gt; has not been called since\n the stream was created, or the number of bytes read from the stream\n since &lt;code&gt;mark&lt;/code&gt; was last called is larger than the argument\n to &lt;code&gt;mark&lt;/code&gt; at that last call, then an\n &lt;code&gt;IOException&lt;/code&gt; might be thrown.\n\n &lt;li&gt; If such an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the\n stream is reset to a state such that all the bytes read since the\n most recent call to &lt;code&gt;mark&lt;/code&gt; (or since the start of the\n file, if &lt;code&gt;mark&lt;/code&gt; has not been called) will be resupplied\n to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method, followed by\n any bytes that otherwise would have been the next input data as of\n the time of the call to &lt;code&gt;reset&lt;/code&gt;. &lt;/ul&gt;\n</code></pre>\n\n<p> <li> If the method <code>markSupported</code> returns\n <code>false</code>, then:</li></p>\n\n<pre><code> &lt;ul&gt;&lt;li&gt; The call to &lt;code&gt;reset&lt;/code&gt; may throw an\n &lt;code&gt;IOException&lt;/code&gt;.\n\n &lt;li&gt; If an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the stream\n is reset to a fixed state that depends on the particular type of the\n input stream and how it was created. The bytes that will be supplied\n to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method depend on the\n particular type of the input stream. &lt;/ul&gt;&lt;/ul&gt;\n</code></pre>\n\n<p> <p>The method <code>reset</code> for class <code>InputStream</code>\n does nothing except throw an <code>IOException</code>.\n@exception IOException  if this stream has not been marked or if the\n               mark has been invalidated.\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.IOException\" rel=\"java.io.IOException\" class=\"docClass\">java.io.IOException</a></p>\n</div></div></div><div id='method-skip' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips over and discards n bytes of data from this input\n stream. ...</div><div class='long'><p>Skips over and discards <code>n</code> bytes of data from this input\n stream. The <code>skip</code> method may, for a variety of reasons, end\n up skipping over some smaller number of bytes, possibly <code>0</code>.\n This may result from any of a number of conditions; reaching end of file\n before <code>n</code> bytes have been skipped is only one possibility.\n The actual number of bytes skipped is returned. If {@code n} is\n negative, the {@code skip} method for class {@code InputStream} always\n returns 0, and no bytes are skipped. Subclasses may handle the negative\n value differently.</p>\n\n<p> <p> The <code>skip</code> method of this class creates a\n byte array and then repeatedly reads into it until <code>n</code> bytes\n have been read or the end of the stream has been reached. Subclasses are\n encouraged to provide a more efficient implementation of this method.\n For instance, the implementation may depend on the ability to seek.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>the number of bytes to be skipped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes skipped.\n@exception IOException  if the stream does not support seek,\n                          or if some other I/O error occurs.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});