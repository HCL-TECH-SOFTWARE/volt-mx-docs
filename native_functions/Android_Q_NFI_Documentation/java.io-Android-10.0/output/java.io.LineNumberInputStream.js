Ext.data.JsonP.java_io_LineNumberInputStream({"tagname":"class","name":"java.io.LineNumberInputStream","autodetected":{},"files":[{"filename":"LineNumberInputStream.js","href":"LineNumberInputStream.html#java-io-LineNumberInputStream"}],"extends":"java.io.FilterInputStream","author":[{"tagname":"author","name":"Arthur van Hoff","email":null}],"since":"JDK1.0","deprecated":{"text":"<p>This class incorrectly assumes that bytes adequately represent\n             characters.  As of JDK&nbsp;1.1, the preferred way to operate on\n             character streams is via the new character-stream classes, which\n             include a class for counting line numbers.</p>\n"},"members":[{"name":"available","tagname":"method","owner":"java.io.LineNumberInputStream","id":"method-available","meta":{}},{"name":"close","tagname":"method","owner":"java.io.FilterInputStream","id":"method-close","meta":{}},{"name":"getLineNumber","tagname":"method","owner":"java.io.LineNumberInputStream","id":"method-getLineNumber","meta":{}},{"name":"mark","tagname":"method","owner":"java.io.LineNumberInputStream","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.io.FilterInputStream","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.io.LineNumberInputStream","id":"method-read","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.LineNumberInputStream","id":"method-reset","meta":{}},{"name":"setLineNumber","tagname":"method","owner":"java.io.LineNumberInputStream","id":"method-setLineNumber","meta":{}},{"name":"skip","tagname":"method","owner":"java.io.LineNumberInputStream","id":"method-skip","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.LineNumberInputStream","short_doc":"This class is an input stream filter that provides the added\n functionality of keeping track of the current line number. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.InputStream","java.io.FilterInputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='docClass'>java.io.InputStream</a><div class='subclass '><a href='#!/api/java.io.FilterInputStream' rel='java.io.FilterInputStream' class='docClass'>java.io.FilterInputStream</a><div class='subclass '><strong>java.io.LineNumberInputStream</strong></div></div></div></div><h4>Files</h4><div class='dependency'><a href='source/LineNumberInputStream.html#java-io-LineNumberInputStream' target='_blank'>LineNumberInputStream.js</a></div></pre><div class='doc-contents'><p>This class is an input stream filter that provides the added\n functionality of keeping track of the current line number.\n <p>\n A line is a sequence of bytes ending with a carriage return\n character ({@code '\\r'}), a newline character\n ({@code '\\n'}), or a carriage return character followed\n immediately by a linefeed character. In all three cases, the line\n terminating character(s) are returned as a single newline character.\n <p>\n The line number begins at {@code 0}, and is incremented by\n {@code 1} when a {@code read} returns a newline character.</p>\n\n<p> @see        <a href=\"#!/api/java.io.LineNumberReader\" rel=\"java.io.LineNumberReader\" class=\"docClass\">java.io.LineNumberReader</a></p>\n        <p>Available since: <b>JDK1.0</b></p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This class has been <strong>deprecated</strong> </p>\n        <p>This class incorrectly assumes that bytes adequately represent\n             characters.  As of JDK&nbsp;1.1, the preferred way to operate on\n             character streams is via the new character-stream classes, which\n             include a class for counting line numbers.</p>\n\n        </div>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-available' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberInputStream'>java.io.LineNumberInputStream</span><br/><a href='source/LineNumberInputStream.html#java-io-LineNumberInputStream-method-available' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberInputStream-method-available' class='name expandable'>available</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of bytes that can be read from this input\n stream without blocking. ...</div><div class='long'><p>Returns the number of bytes that can be read from this input\n stream without blocking.\n <p>\n Note that if the underlying input stream is able to supply\n <i>k</i> input characters without blocking, the\n {@code LineNumberInputStream} can guarantee only to provide\n <i>k</i>/2 characters without blocking, because the\n <i>k</i> characters from the underlying input stream might\n consist of <i>k</i>/2 pairs of {@code '\\r'} and\n {@code '\\n'}, which are converted to just\n <i>k</i>/2 {@code '\\n'} characters.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of bytes that can be read from this input stream\n             without blocking.\n@exception IOException  if an I/O error occurs.\n@see java.io.FilterInputStream#in</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.FilterInputStream-method-available\" rel=\"java.io.FilterInputStream-method-available\" class=\"docClass\">java.io.FilterInputStream.available</a></p></div></div></div><div id='method-close' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.FilterInputStream' rel='java.io.FilterInputStream' class='defined-in docClass'>java.io.FilterInputStream</a><br/><a href='source/FilterInputStream.html#java-io-FilterInputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.FilterInputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this input stream and releases any system resources\n associated with the stream. ...</div><div class='long'><p>Closes this input stream and releases any system resources\n associated with the stream.\n This\n method simply performs <code>in.close()</code>.\n@exception IOException  if an I/O error occurs.\n@see java.io.FilterInputStream#in</p>\n<p>Overrides: <a href=\"#!/api/java.io.InputStream-method-close\" rel=\"java.io.InputStream-method-close\" class=\"docClass\">java.io.InputStream.close</a></p></div></div></div><div id='method-getLineNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberInputStream'>java.io.LineNumberInputStream</span><br/><a href='source/LineNumberInputStream.html#java-io-LineNumberInputStream-method-getLineNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberInputStream-method-getLineNumber' class='name expandable'>getLineNumber</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current line number. ...</div><div class='long'><p>Returns the current line number.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the current line number.\n@see <a href=\"#!/api/java.io.LineNumberInputStream-method-setLineNumber\" rel=\"java.io.LineNumberInputStream-method-setLineNumber\" class=\"docClass\">setLineNumber</a></p>\n</div></li></ul></div></div></div><div id='method-mark' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberInputStream'>java.io.LineNumberInputStream</span><br/><a href='source/LineNumberInputStream.html#java-io-LineNumberInputStream-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberInputStream-method-mark' class='name expandable'>mark</a>( <span class='pre'>readlimit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Marks the current position in this input stream. ...</div><div class='long'><p>Marks the current position in this input stream. A subsequent\n call to the {@code reset} method repositions this stream at\n the last marked position so that subsequent reads re-read the same bytes.\n <p>\n The {@code mark} method of\n {@code LineNumberInputStream} remembers the current line\n number in a private variable, and then calls the {@code mark}\n method of the underlying input stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>readlimit</span> : Number<div class='sub-desc'><p>the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n@see java.io.FilterInputStream#in\n@see <a href=\"#!/api/java.io.LineNumberInputStream-method-reset\" rel=\"java.io.LineNumberInputStream-method-reset\" class=\"docClass\">java.io.LineNumberInputStream.reset</a>()</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.FilterInputStream-method-mark\" rel=\"java.io.FilterInputStream-method-mark\" class=\"docClass\">java.io.FilterInputStream.mark</a></p></div></div></div><div id='method-markSupported' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.FilterInputStream' rel='java.io.FilterInputStream' class='defined-in docClass'>java.io.FilterInputStream</a><br/><a href='source/FilterInputStream.html#java-io-FilterInputStream-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.FilterInputStream-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if this input stream supports the mark\n and reset methods. ...</div><div class='long'><p>Tests if this input stream supports the <code>mark</code>\n and <code>reset</code> methods.\n This method\n simply performs <code>in.markSupported()</code>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if this stream type supports the\n          <code>mark</code> and <code>reset</code> method;\n          <code>false</code> otherwise.\n@see java.io.FilterInputStream#in\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.InputStream-method-markSupported\" rel=\"java.io.InputStream-method-markSupported\" class=\"docClass\">java.io.InputStream.markSupported</a></p></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberInputStream'>java.io.LineNumberInputStream</span><br/><a href='source/LineNumberInputStream.html#java-io-LineNumberInputStream-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberInputStream-method-read' class='name expandable'>read</a>( <span class='pre'>b, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads up to {@code len} bytes of data from this input stream\n into an array of bytes. ...</div><div class='long'><p>Reads up to {@code len} bytes of data from this input stream\n into an array of bytes. This method blocks until some input is available.\n <p>\n The {@code read} method of\n {@code LineNumberInputStream} repeatedly calls the\n {@code read} method of zero arguments to fill in the byte array.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>the buffer into which the data is read.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset of the data.</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the maximum number of bytes read.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the total number of bytes read into the buffer, or\n             {@code -1} if there is no more data because the end of\n             this stream has been reached.\n@exception IOException  if an I/O error occurs.\n@see <a href=\"#!/api/java.io.LineNumberInputStream-method-read\" rel=\"java.io.LineNumberInputStream-method-read\" class=\"docClass\">java.io.LineNumberInputStream.read</a>()</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.FilterInputStream-method-read\" rel=\"java.io.FilterInputStream-method-read\" class=\"docClass\">java.io.FilterInputStream.read</a></p></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberInputStream'>java.io.LineNumberInputStream</span><br/><a href='source/LineNumberInputStream.html#java-io-LineNumberInputStream-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberInputStream-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Repositions this stream to the position at the time the\n {@code mark} method was last called on this input stream. ...</div><div class='long'><p>Repositions this stream to the position at the time the\n {@code mark} method was last called on this input stream.\n <p>\n The {@code reset} method of\n {@code LineNumberInputStream} resets the line number to be\n the line number at the time the {@code mark} method was\n called, and then calls the {@code reset} method of the\n underlying input stream.\n <p>\n Stream marks are intended to be used in\n situations where you need to read ahead a little to see what's in\n the stream. Often this is most easily done by invoking some\n general parser. If the stream is of the type handled by the\n parser, it just chugs along happily. If the stream is not of\n that type, the parser should toss an exception when it fails,\n which, if it happens within readlimit bytes, allows the outer\n code to reset the stream and try another parser.\n@exception IOException  if an I/O error occurs.\n@see java.io.FilterInputStream#in\n@see <a href=\"#!/api/java.io.LineNumberInputStream-method-mark\" rel=\"java.io.LineNumberInputStream-method-mark\" class=\"docClass\">java.io.LineNumberInputStream.mark</a>(int)</p>\n<p>Overrides: <a href=\"#!/api/java.io.FilterInputStream-method-reset\" rel=\"java.io.FilterInputStream-method-reset\" class=\"docClass\">java.io.FilterInputStream.reset</a></p></div></div></div><div id='method-setLineNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberInputStream'>java.io.LineNumberInputStream</span><br/><a href='source/LineNumberInputStream.html#java-io-LineNumberInputStream-method-setLineNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberInputStream-method-setLineNumber' class='name expandable'>setLineNumber</a>( <span class='pre'>lineNumber</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the line number to the specified argument. ...</div><div class='long'><p>Sets the line number to the specified argument.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>lineNumber</span> : Number<div class='sub-desc'><p>the new line number.\n@see <a href=\"#!/api/java.io.LineNumberInputStream-method-getLineNumber\" rel=\"java.io.LineNumberInputStream-method-getLineNumber\" class=\"docClass\">getLineNumber</a></p>\n</div></li></ul></div></div></div><div id='method-skip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.LineNumberInputStream'>java.io.LineNumberInputStream</span><br/><a href='source/LineNumberInputStream.html#java-io-LineNumberInputStream-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.LineNumberInputStream-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips over and discards {@code n} bytes of data from this\n input stream. ...</div><div class='long'><p>Skips over and discards {@code n} bytes of data from this\n input stream. The {@code skip} method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly {@code 0}. The actual number of bytes skipped is\n returned.  If {@code n} is negative, no bytes are skipped.\n <p>\n The {@code skip} method of {@code LineNumberInputStream} creates\n a byte array and then repeatedly reads into it until\n {@code n} bytes have been read or the end of the stream has\n been reached.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>the number of bytes to be skipped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes skipped.\n@exception IOException  if an I/O error occurs.\n@see java.io.FilterInputStream#in</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.FilterInputStream-method-skip\" rel=\"java.io.FilterInputStream-method-skip\" class=\"docClass\">java.io.FilterInputStream.skip</a></p></div></div></div></div></div></div></div>","meta":{"deprecated":{"text":"<p>This class incorrectly assumes that bytes adequately represent\n             characters.  As of JDK&nbsp;1.1, the preferred way to operate on\n             character streams is via the new character-stream classes, which\n             include a class for counting line numbers.</p>\n"}}});