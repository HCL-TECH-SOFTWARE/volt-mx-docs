Ext.data.JsonP.java_io_SequenceInputStream({"tagname":"class","name":"java.io.SequenceInputStream","autodetected":{},"files":[{"filename":"SequenceInputStream.js","href":"SequenceInputStream.html#java-io-SequenceInputStream"}],"extends":"java.io.InputStream","author":[{"tagname":"author","name":"Author van Hoff","email":null}],"since":"JDK1.0","members":[{"name":"available","tagname":"method","owner":"java.io.SequenceInputStream","id":"method-available","meta":{}},{"name":"close","tagname":"method","owner":"java.io.SequenceInputStream","id":"method-close","meta":{}},{"name":"mark","tagname":"method","owner":"java.io.InputStream","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.io.InputStream","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.io.SequenceInputStream","id":"method-read","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.InputStream","id":"method-reset","meta":{}},{"name":"skip","tagname":"method","owner":"java.io.InputStream","id":"method-skip","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.SequenceInputStream","short_doc":"A SequenceInputStream represents\n the logical concatenation of other input\n streams. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.InputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='docClass'>java.io.InputStream</a><div class='subclass '><strong>java.io.SequenceInputStream</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/SequenceInputStream.html#java-io-SequenceInputStream' target='_blank'>SequenceInputStream.js</a></div></pre><div class='doc-contents'><p>A <code>SequenceInputStream</code> represents\n the logical concatenation of other input\n streams. It starts out with an ordered\n collection of input streams and reads from\n the first one until end of file is reached,\n whereupon it reads from the second one,\n and so on, until end of file is reached\n on the last of the contained input streams.</p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-available' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.SequenceInputStream'>java.io.SequenceInputStream</span><br/><a href='source/SequenceInputStream.html#java-io-SequenceInputStream-method-available' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.SequenceInputStream-method-available' class='name expandable'>available</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of bytes that can be read (or\n skipped over) from the current underlying input stre...</div><div class='long'><p>Returns an estimate of the number of bytes that can be read (or\n skipped over) from the current underlying input stream without\n blocking by the next invocation of a method for the current\n underlying input stream. The next invocation might be\n the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.\n <p>\n This method simply calls {@code available} of the current underlying\n input stream and returns the result.</p>\n        <p>Available since: <b>JDK1.1</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>an estimate of the number of bytes that can be read (or\n         skipped over) from the current underlying input stream\n         without blocking or {@code 0} if this input stream\n         has been closed by invoking its close() method\n@exception IOException  if an I/O error occurs.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.InputStream-method-available\" rel=\"java.io.InputStream-method-available\" class=\"docClass\">java.io.InputStream.available</a></p></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.SequenceInputStream'>java.io.SequenceInputStream</span><br/><a href='source/SequenceInputStream.html#java-io-SequenceInputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.SequenceInputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this input stream and releases any system resources\n associated with the stream. ...</div><div class='long'><p>Closes this input stream and releases any system resources\n associated with the stream.\n A closed <code>SequenceInputStream</code>\n cannot  perform input operations and cannot\n be reopened.\n <p>\n If this stream was created\n from an enumeration, all remaining elements\n are requested from the enumeration and closed\n before the <code>close</code> method returns.\n@exception IOException  if an I/O error occurs.</p>\n<p>Overrides: <a href=\"#!/api/java.io.InputStream-method-close\" rel=\"java.io.InputStream-method-close\" class=\"docClass\">java.io.InputStream.close</a></p></div></div></div><div id='method-mark' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-mark' class='name expandable'>mark</a>( <span class='pre'>readlimit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Marks the current position in this input stream. ...</div><div class='long'><p>Marks the current position in this input stream. A subsequent call to\n the <code>reset</code> method repositions this stream at the last marked\n position so that subsequent reads re-read the same bytes.</p>\n\n<p> <p> The <code>readlimit</code> arguments tells this input stream to\n allow that many bytes to be read before the mark position gets\n invalidated.</p>\n\n<p> <p> The general contract of <code>mark</code> is that, if the method\n <code>markSupported</code> returns <code>true</code>, the stream somehow\n remembers all the bytes read after the call to <code>mark</code> and\n stands ready to supply those same bytes again if and whenever the method\n <code>reset</code> is called.  However, the stream is not required to\n remember any data at all if more than <code>readlimit</code> bytes are\n read from the stream before <code>reset</code> is called.</p>\n\n<p> <p> Marking a closed stream should not have any effect on the stream.</p>\n\n<p> <p> The <code>mark</code> method of <code>InputStream</code> does\n nothing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>readlimit</span> : Number<div class='sub-desc'><p>the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul></div></div></div><div id='method-markSupported' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if this input stream supports the mark and\n reset methods. ...</div><div class='long'><p>Tests if this input stream supports the <code>mark</code> and\n <code>reset</code> methods. Whether or not <code>mark</code> and\n <code>reset</code> are supported is an invariant property of a\n particular input stream instance. The <code>markSupported</code> method\n of <code>InputStream</code> returns <code>false</code>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if this stream instance supports the mark\n          and reset methods; <code>false</code> otherwise.\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.SequenceInputStream'>java.io.SequenceInputStream</span><br/><a href='source/SequenceInputStream.html#java-io-SequenceInputStream-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.SequenceInputStream-method-read' class='name expandable'>read</a>( <span class='pre'>b, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads up to len bytes of data from this input stream\n into an array of bytes. ...</div><div class='long'><p>Reads up to <code>len</code> bytes of data from this input stream\n into an array of bytes.  If <code>len</code> is not zero, the method\n blocks until at least 1 byte of input is available; otherwise, no\n bytes are read and <code>0</code> is returned.\n <p>\n The <code>read</code> method of <code>SequenceInputStream</code>\n tries to read the data from the current substream. If it fails to\n read any characters because the substream has reached the end of\n the stream, it calls the <code>close</code> method of the current\n substream and begins reading from the next substream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>the buffer into which the data is read.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset in array <code>b</code>\n                   at which the data is written.</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the maximum number of bytes read.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>int   the number of bytes read.\n@exception NullPointerException If <code>b</code> is <code>null</code>.\n@exception IndexOutOfBoundsException If <code>off</code> is negative,\n <code>len</code> is negative, or <code>len</code> is greater than\n <code>b.length - off</code>\n@exception IOException  if an I/O error occurs.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.InputStream-method-read\" rel=\"java.io.InputStream-method-read\" class=\"docClass\">java.io.InputStream.read</a></p></div></div></div><div id='method-reset' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Repositions this stream to the position at the time the\n mark method was last called on this input stream. ...</div><div class='long'><p>Repositions this stream to the position at the time the\n <code>mark</code> method was last called on this input stream.</p>\n\n<p> <p> The general contract of <code>reset</code> is:</p>\n\n<p> <ul>\n <li> If the method <code>markSupported</code> returns\n <code>true</code>, then:</li></ul></p>\n\n<pre><code> &lt;ul&gt;&lt;li&gt; If the method &lt;code&gt;mark&lt;/code&gt; has not been called since\n the stream was created, or the number of bytes read from the stream\n since &lt;code&gt;mark&lt;/code&gt; was last called is larger than the argument\n to &lt;code&gt;mark&lt;/code&gt; at that last call, then an\n &lt;code&gt;IOException&lt;/code&gt; might be thrown.\n\n &lt;li&gt; If such an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the\n stream is reset to a state such that all the bytes read since the\n most recent call to &lt;code&gt;mark&lt;/code&gt; (or since the start of the\n file, if &lt;code&gt;mark&lt;/code&gt; has not been called) will be resupplied\n to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method, followed by\n any bytes that otherwise would have been the next input data as of\n the time of the call to &lt;code&gt;reset&lt;/code&gt;. &lt;/ul&gt;\n</code></pre>\n\n<p> <li> If the method <code>markSupported</code> returns\n <code>false</code>, then:</li></p>\n\n<pre><code> &lt;ul&gt;&lt;li&gt; The call to &lt;code&gt;reset&lt;/code&gt; may throw an\n &lt;code&gt;IOException&lt;/code&gt;.\n\n &lt;li&gt; If an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the stream\n is reset to a fixed state that depends on the particular type of the\n input stream and how it was created. The bytes that will be supplied\n to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method depend on the\n particular type of the input stream. &lt;/ul&gt;&lt;/ul&gt;\n</code></pre>\n\n<p> <p>The method <code>reset</code> for class <code>InputStream</code>\n does nothing except throw an <code>IOException</code>.\n@exception IOException  if this stream has not been marked or if the\n               mark has been invalidated.\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.IOException\" rel=\"java.io.IOException\" class=\"docClass\">java.io.IOException</a></p>\n</div></div></div><div id='method-skip' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips over and discards n bytes of data from this input\n stream. ...</div><div class='long'><p>Skips over and discards <code>n</code> bytes of data from this input\n stream. The <code>skip</code> method may, for a variety of reasons, end\n up skipping over some smaller number of bytes, possibly <code>0</code>.\n This may result from any of a number of conditions; reaching end of file\n before <code>n</code> bytes have been skipped is only one possibility.\n The actual number of bytes skipped is returned. If {@code n} is\n negative, the {@code skip} method for class {@code InputStream} always\n returns 0, and no bytes are skipped. Subclasses may handle the negative\n value differently.</p>\n\n<p> <p> The <code>skip</code> method of this class creates a\n byte array and then repeatedly reads into it until <code>n</code> bytes\n have been read or the end of the stream has been reached. Subclasses are\n encouraged to provide a more efficient implementation of this method.\n For instance, the implementation may depend on the ability to seek.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>the number of bytes to be skipped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes skipped.\n@exception IOException  if the stream does not support seek,\n                          or if some other I/O error occurs.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});