Ext.data.JsonP.java_io_PipedOutputStream({"tagname":"class","name":"java.io.PipedOutputStream","autodetected":{},"files":[{"filename":"PipedOutputStream.js","href":"PipedOutputStream.html#java-io-PipedOutputStream"}],"extends":"java.io.OutputStream","author":[{"tagname":"author","name":"James Gosling","email":null}],"since":"JDK1.0","members":[{"name":"close","tagname":"method","owner":"java.io.PipedOutputStream","id":"method-close","meta":{}},{"name":"connect","tagname":"method","owner":"java.io.PipedOutputStream","id":"method-connect","meta":{}},{"name":"flush","tagname":"method","owner":"java.io.PipedOutputStream","id":"method-flush","meta":{}},{"name":"write","tagname":"method","owner":"java.io.PipedOutputStream","id":"method-write","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.PipedOutputStream","short_doc":"A piped output stream can be connected to a piped input stream\n to create a communications pipe. ...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.OutputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.OutputStream' rel='java.io.OutputStream' class='docClass'>java.io.OutputStream</a><div class='subclass '><strong>java.io.PipedOutputStream</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/PipedOutputStream.html#java-io-PipedOutputStream' target='_blank'>PipedOutputStream.js</a></div></pre><div class='doc-contents'><p>A piped output stream can be connected to a piped input stream\n to create a communications pipe. The piped output stream is the\n sending end of the pipe. Typically, data is written to a\n <code>PipedOutputStream</code> object by one thread and data is\n read from the connected <code>PipedInputStream</code> by some\n other thread. Attempting to use both objects from a single thread\n is not recommended as it may deadlock the thread.\n The pipe is said to be <a name=BROKEN> <i>broken</i> </a> if a\n thread that was reading data bytes from the connected piped input\n stream is no longer alive.</p>\n\n<p> @see     <a href=\"#!/api/java.io.PipedInputStream\" rel=\"java.io.PipedInputStream\" class=\"docClass\">java.io.PipedInputStream</a></p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedOutputStream'>java.io.PipedOutputStream</span><br/><a href='source/PipedOutputStream.html#java-io-PipedOutputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedOutputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this piped output stream and releases any system resources\n associated with this stream. ...</div><div class='long'><p>Closes this piped output stream and releases any system resources\n associated with this stream. This stream may no longer be used for\n writing bytes.\n@exception IOException  if an I/O error occurs.</p>\n<p>Overrides: <a href=\"#!/api/java.io.OutputStream-method-close\" rel=\"java.io.OutputStream-method-close\" class=\"docClass\">java.io.OutputStream.close</a></p></div></div></div><div id='method-connect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedOutputStream'>java.io.PipedOutputStream</span><br/><a href='source/PipedOutputStream.html#java-io-PipedOutputStream-method-connect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedOutputStream-method-connect' class='name expandable'>connect</a>( <span class='pre'>snk</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Connects this piped output stream to a receiver. ...</div><div class='long'><p>Connects this piped output stream to a receiver. If this object\n is already connected to some other piped input stream, an\n <code>IOException</code> is thrown.\n <p>\n If <code>snk</code> is an unconnected piped input stream and\n <code>src</code> is an unconnected piped output stream, they may\n be connected by either the call:\n <blockquote></blockquote></p>\n\n<pre> src.connect(snk)</pre>\n\n\n<p>\n or the call:\n <blockquote></blockquote></p>\n\n<pre> snk.connect(src)</pre>\n\n\n<p>\n The two calls have the same effect.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>snk</span> : Object {PipedInputStream}<div class='sub-desc'><p>the piped input stream to connect to.\n@exception IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-flush' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedOutputStream'>java.io.PipedOutputStream</span><br/><a href='source/PipedOutputStream.html#java-io-PipedOutputStream-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedOutputStream-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Flushes this output stream and forces any buffered output bytes\n to be written out. ...</div><div class='long'><p>Flushes this output stream and forces any buffered output bytes\n to be written out.\n This will notify any readers that bytes are waiting in the pipe.\n@exception IOException if an I/O error occurs.</p>\n<p>Overrides: <a href=\"#!/api/java.io.OutputStream-method-flush\" rel=\"java.io.OutputStream-method-flush\" class=\"docClass\">java.io.OutputStream.flush</a></p></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedOutputStream'>java.io.PipedOutputStream</span><br/><a href='source/PipedOutputStream.html#java-io-PipedOutputStream-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedOutputStream-method-write' class='name expandable'>write</a>( <span class='pre'>b, off, len</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes len bytes from the specified byte array\n starting at offset off to this piped output stream. ...</div><div class='long'><p>Writes <code>len</code> bytes from the specified byte array\n starting at offset <code>off</code> to this piped output stream.\n This method blocks until all the bytes are written to the output\n stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>the data.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset in the data.</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the number of bytes to write.\n@exception IOException if the pipe is <a href=#BROKEN> broken</a>,\n          unconnected,\n          closed, or if an I/O error occurs.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.OutputStream-method-write\" rel=\"java.io.OutputStream-method-write\" class=\"docClass\">java.io.OutputStream.write</a></p></div></div></div></div></div></div></div>","meta":{}});