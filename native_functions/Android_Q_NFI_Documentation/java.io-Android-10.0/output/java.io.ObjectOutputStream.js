Ext.data.JsonP.java_io_ObjectOutputStream({"tagname":"class","name":"java.io.ObjectOutputStream","autodetected":{},"files":[{"filename":"ObjectOutputStream.js","href":"ObjectOutputStream.html#java-io-ObjectOutputStream"}],"extends":"java.io.OutputStream","author":[{"tagname":"author","name":"Mike Warres","email":null},{"tagname":"author","name":"Roger Riggs","email":null}],"since":"JDK1.1","members":[{"name":"close","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-close","meta":{}},{"name":"defaultWriteObject","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-defaultWriteObject","meta":{}},{"name":"flush","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-flush","meta":{}},{"name":"putFields","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-putFields","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-reset","meta":{}},{"name":"useProtocolVersion","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-useProtocolVersion","meta":{}},{"name":"write","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-write","meta":{}},{"name":"writeBoolean","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeBoolean","meta":{}},{"name":"writeByte","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeByte","meta":{}},{"name":"writeBytes","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeBytes","meta":{}},{"name":"writeChar","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeChar","meta":{}},{"name":"writeChars","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeChars","meta":{}},{"name":"writeDouble","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeDouble","meta":{}},{"name":"writeFields","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeFields","meta":{}},{"name":"writeFloat","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeFloat","meta":{}},{"name":"writeInt","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeInt","meta":{}},{"name":"writeLong","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeLong","meta":{}},{"name":"writeObject","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeObject","meta":{}},{"name":"writeShort","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeShort","meta":{}},{"name":"writeUTF","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeUTF","meta":{}},{"name":"writeUnshared","tagname":"method","owner":"java.io.ObjectOutputStream","id":"method-writeUnshared","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.ObjectOutputStream","short_doc":"implements java.io.ObjectOutput\n\n implements java.io.ObjectStreamConstants\n\nAn ObjectOutputStream writes primitive da...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.OutputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.OutputStream' rel='java.io.OutputStream' class='docClass'>java.io.OutputStream</a><div class='subclass '><strong>java.io.ObjectOutputStream</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream' target='_blank'>ObjectOutputStream.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.io.ObjectOutput\" rel=\"java.io.ObjectOutput\" class=\"docClass\">java.io.ObjectOutput</a></p>\n\n<p> implements <a href=\"#!/api/java.io.ObjectStreamConstants\" rel=\"java.io.ObjectStreamConstants\" class=\"docClass\">java.io.ObjectStreamConstants</a></p>\n\n<p>An ObjectOutputStream writes primitive data types and graphs of Java objects\n to an OutputStream.  The objects can be read (reconstituted) using an\n ObjectInputStream.  Persistent storage of objects can be accomplished by\n using a file for the stream.  If the stream is a network socket stream, the\n objects can be reconstituted on another host or in another process.</p>\n\n<p> <p>Only objects that support the <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a> interface can be\n written to streams.  The class of each serializable object is encoded\n including the class name and signature of the class, the values of the\n object's fields and arrays, and the closure of any other objects referenced\n from the initial objects.</p>\n\n<p> <p>The method writeObject is used to write an object to the stream.  Any\n object, including Strings and arrays, is written with writeObject. Multiple\n objects or primitives can be written to the stream.  The objects must be\n read back from the corresponding ObjectInputstream with the same types and\n in the same order as they were written.</p>\n\n<p> <p>Primitive data types can also be written to the stream using the\n appropriate methods from DataOutput. Strings can also be written using the\n writeUTF method.</p>\n\n<p> <p>The default serialization mechanism for an object writes the class of the\n object, the class signature, and the values of all non-transient and\n non-static fields.  References to other objects (except in transient or\n static fields) cause those objects to be written also. Multiple references\n to a single object are encoded using a reference sharing mechanism so that\n graphs of objects can be restored to the same shape as when the original was\n written.</p>\n\n<p> <p>For example to write an object that can be read by the example in\n ObjectInputStream:\n <br></p>\n\n<pre>      FileOutputStream fos = new FileOutputStream(\"t.tmp\");\n      ObjectOutputStream oos = new ObjectOutputStream(fos);\n\n      oos.writeInt(12345);\n      oos.writeObject(\"Today\");\n      oos.writeObject(new Date());\n\n      oos.close();\n </pre>\n\n\n<p> <p>Classes that require special handling during the serialization and\n deserialization process must implement special methods with these exact\n signatures:\n <br></p>\n\n<pre> private void readObject(<a href=\"#!/api/java.io.ObjectInputStream\" rel=\"java.io.ObjectInputStream\" class=\"docClass\">java.io.ObjectInputStream</a> stream)\n     throws IOException, ClassNotFoundException;\n private void writeObject(<a href=\"#!/api/java.io.ObjectOutputStream\" rel=\"java.io.ObjectOutputStream\" class=\"docClass\">java.io.ObjectOutputStream</a> stream)\n     throws IOException\n private void readObjectNoData()\n     throws ObjectStreamException;\n </pre>\n\n\n<p> <p>The writeObject method is responsible for writing the state of the object\n for its particular class so that the corresponding readObject method can\n restore it.  The method does not need to concern itself with the state\n belonging to the object's superclasses or subclasses.  State is saved by\n writing the individual fields to the ObjectOutputStream using the\n writeObject method or by using the methods for primitive data types\n supported by DataOutput.</p>\n\n<p> <p>Serialization does not write out the fields of any object that does not\n implement the <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a> interface.  Subclasses of Objects that\n are not serializable can be serializable. In this case the non-serializable\n class must have a no-arg constructor to allow its fields to be initialized.\n In this case it is the responsibility of the subclass to save and restore\n the state of the non-serializable class. It is frequently the case that the\n fields of that class are accessible (public, package, or protected) or that\n there are get and set methods that can be used to restore the state.</p>\n\n<p> <p>Serialization of an object can be prevented by implementing writeObject\n and readObject methods that throw the NotSerializableException.  The\n exception will be caught by the ObjectOutputStream and abort the\n serialization process.</p>\n\n<p> <p>Implementing the Externalizable interface allows the object to assume\n complete control over the contents and format of the object's serialized\n form.  The methods of the Externalizable interface, writeExternal and\n readExternal, are called to save and restore the objects state.  When\n implemented by a class they can write and read their own state using all of\n the methods of ObjectOutput and ObjectInput.  It is the responsibility of\n the objects to handle any versioning that occurs.</p>\n\n<p> <p>Enum constants are serialized differently than ordinary serializable or\n externalizable objects.  The serialized form of an enum constant consists\n solely of its name; field values of the constant are not transmitted.  To\n serialize an enum constant, ObjectOutputStream writes the string returned by\n the constant's name method.  Like other serializable or externalizable\n objects, enum constants can function as the targets of back references\n appearing subsequently in the serialization stream.  The process by which\n enum constants are serialized cannot be customized; any class-specific\n writeObject and writeReplace methods defined by enum types are ignored\n during serialization.  Similarly, any serialPersistentFields or\n serialVersionUID field declarations are also ignored--all enum types have a\n fixed serialVersionUID of 0L.</p>\n\n<p> <p>Primitive data, excluding serializable fields and externalizable data, is\n written to the ObjectOutputStream in block-data records. A block data record\n is composed of a header and data. The block data header consists of a marker\n and the number of bytes to follow the header.  Consecutive primitive data\n writes are merged into one block-data record.  The blocking factor used for\n a block-data record will be 1024 bytes.  Each block-data record will be\n filled up to 1024 bytes, or be written whenever there is a termination of\n block-data mode.  Calls to the ObjectOutputStream methods writeObject,\n defaultWriteObject and writeFields initially terminate any existing\n block-data record.</p>\n\n<p> @see <a href=\"#!/api/java.io.DataOutput\" rel=\"java.io.DataOutput\" class=\"docClass\">java.io.DataOutput</a>\n @see <a href=\"#!/api/java.io.ObjectInputStream\" rel=\"java.io.ObjectInputStream\" class=\"docClass\">java.io.ObjectInputStream</a>\n @see <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a>\n @see <a href=\"#!/api/java.io.Externalizable\" rel=\"java.io.Externalizable\" class=\"docClass\">java.io.Externalizable</a>\n @see <a href=\"https://docs.oracle.com/javase/8/docs/platform/serialization/spec/output.html\">Object Serialization Specification, Section 2, Object Output Classes</a></p>\n        <p>Available since: <b>JDK1.1</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes the stream. ...</div><div class='long'><p>Closes the stream. This method must be called to release any resources\n associated with the stream.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If an I/O error has occurred.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.OutputStream-method-close\" rel=\"java.io.OutputStream-method-close\" class=\"docClass\">java.io.OutputStream.close</a></p></div></div></div><div id='method-defaultWriteObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-defaultWriteObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-defaultWriteObject' class='name expandable'>defaultWriteObject</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Write the non-static and non-transient fields of the current class to\n this stream. ...</div><div class='long'><p>Write the non-static and non-transient fields of the current class to\n this stream.  This may only be called from the writeObject method of the\n class being serialized. It will throw the NotActiveException if it is\n called otherwise.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          <code>OutputStream</code></p>\n</div></li></ul></div></div></div><div id='method-flush' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Flushes the stream. ...</div><div class='long'><p>Flushes the stream. This will write any buffered output bytes and flush\n through to the underlying stream.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If an I/O error has occurred.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.OutputStream-method-flush\" rel=\"java.io.OutputStream-method-flush\" class=\"docClass\">java.io.OutputStream.flush</a></p></div></div></div><div id='method-putFields' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-putFields' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-putFields' class='name expandable'>putFields</a>( <span class='pre'></span> ) : Object {java.io.ObjectOutputStream.PutField}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieve the object used to buffer persistent fields to be written to\n the stream. ...</div><div class='long'><p>Retrieve the object used to buffer persistent fields to be written to\n the stream.  The fields will be written to the stream when writeFields\n method is called.</p>\n        <p>Available since: <b>1.2</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.ObjectOutputStream.PutField}</span><div class='sub-desc'><p>an instance of the class Putfield that holds the serializable\n          fields</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reset will disregard the state of any objects already written to the\n stream. ...</div><div class='long'><p>Reset will disregard the state of any objects already written to the\n stream.  The state is reset to be the same as a new ObjectOutputStream.\n The current point in the stream is marked as reset so the corresponding\n ObjectInputStream will be reset at the same point.  Objects previously\n written to the stream will not be referred to as already being in the\n stream.  They will be written to the stream again.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if reset() is invoked while serializing an object.</p>\n</div></li></ul></div></div></div><div id='method-useProtocolVersion' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-useProtocolVersion' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-useProtocolVersion' class='name expandable'>useProtocolVersion</a>( <span class='pre'>version</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Specify stream protocol version to use when writing the stream. ...</div><div class='long'><p>Specify stream protocol version to use when writing the stream.</p>\n\n<p> <p>This routine provides a hook to enable the current version of\n Serialization to write in a format that is backwards compatible to a\n previous version of the stream format.</p>\n\n<p> <p>Every effort will be made to avoid introducing additional\n backwards incompatibilities; however, sometimes there is no\n other alternative.</p>\n        <p>Available since: <b>1.2</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>version</span> : Number<div class='sub-desc'><p>use ProtocolVersion from <a href=\"#!/api/java.io.ObjectStreamConstants\" rel=\"java.io.ObjectStreamConstants\" class=\"docClass\">java.io.ObjectStreamConstants</a>.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalStateException if called after any objects\n          have been serialized.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalArgumentException if invalid version is passed in.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur\n@see <a href=\"#!/api/java.io.ObjectStreamConstants-property-PROTOCOL_VERSION_1\" rel=\"java.io.ObjectStreamConstants-property-PROTOCOL_VERSION_1\" class=\"docClass\">java.io.ObjectStreamConstants.PROTOCOL_VERSION_1</a>\n@see <a href=\"#!/api/java.io.ObjectStreamConstants-property-PROTOCOL_VERSION_2\" rel=\"java.io.ObjectStreamConstants-property-PROTOCOL_VERSION_2\" class=\"docClass\">java.io.ObjectStreamConstants.PROTOCOL_VERSION_2</a></p>\n</div></li></ul></div></div></div><div id='method-write' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-write' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-write' class='name expandable'>write</a>( <span class='pre'>buf, off, len</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a sub array of bytes. ...</div><div class='long'><p>Writes a sub array of bytes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>buf</span> : Object {byte[]}<div class='sub-desc'><p>the data to be written</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset in the data</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the number of bytes that are written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If an I/O error has occurred.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.OutputStream-method-write\" rel=\"java.io.OutputStream-method-write\" class=\"docClass\">java.io.OutputStream.write</a></p></div></div></div><div id='method-writeBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeBoolean' class='name expandable'>writeBoolean</a>( <span class='pre'>val</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a boolean. ...</div><div class='long'><p>Writes a boolean.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Boolean<div class='sub-desc'><p>the boolean to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeByte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeByte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeByte' class='name expandable'>writeByte</a>( <span class='pre'>val</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes an 8 bit byte. ...</div><div class='long'><p>Writes an 8 bit byte.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Number<div class='sub-desc'><p>the byte value to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeBytes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeBytes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeBytes' class='name expandable'>writeBytes</a>( <span class='pre'>str</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a String as a sequence of bytes. ...</div><div class='long'><p>Writes a String as a sequence of bytes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>str</span> : String<div class='sub-desc'><p>the String of bytes to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeChar' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeChar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeChar' class='name expandable'>writeChar</a>( <span class='pre'>val</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a 16 bit char. ...</div><div class='long'><p>Writes a 16 bit char.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Number<div class='sub-desc'><p>the char value to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeChars' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeChars' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeChars' class='name expandable'>writeChars</a>( <span class='pre'>str</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a String as a sequence of chars. ...</div><div class='long'><p>Writes a String as a sequence of chars.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>str</span> : String<div class='sub-desc'><p>the String of chars to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeDouble' class='name expandable'>writeDouble</a>( <span class='pre'>val</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a 64 bit double. ...</div><div class='long'><p>Writes a 64 bit double.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Number<div class='sub-desc'><p>the double value to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeFields' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeFields' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeFields' class='name expandable'>writeFields</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Write the buffered fields to the stream. ...</div><div class='long'><p>Write the buffered fields to the stream.</p>\n        <p>Available since: <b>1.2</b></p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotActiveException Called when a classes writeObject method was\n          not called to write the state of the object.</p>\n</div></li></ul></div></div></div><div id='method-writeFloat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeFloat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeFloat' class='name expandable'>writeFloat</a>( <span class='pre'>val</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a 32 bit float. ...</div><div class='long'><p>Writes a 32 bit float.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Number<div class='sub-desc'><p>the float value to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeInt' class='name expandable'>writeInt</a>( <span class='pre'>val</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a 32 bit int. ...</div><div class='long'><p>Writes a 32 bit int.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Number<div class='sub-desc'><p>the integer value to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeLong' class='name expandable'>writeLong</a>( <span class='pre'>val</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a 64 bit long. ...</div><div class='long'><p>Writes a 64 bit long.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Number<div class='sub-desc'><p>the long value to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeObject' class='name expandable'>writeObject</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Write the specified object to the ObjectOutputStream. ...</div><div class='long'><p>Write the specified object to the ObjectOutputStream.  The class of the\n object, the signature of the class, and the values of the non-transient\n and non-static fields of the class and all of its supertypes are\n written.  Default serialization for a class can be overridden using the\n writeObject and the readObject methods.  Objects referenced by this\n object are written transitively so that a complete equivalent graph of\n objects can be reconstructed by an ObjectInputStream.</p>\n\n<p> <p>Exceptions are thrown for problems with the OutputStream and for\n classes that should not be serialized.  All exceptions are fatal to the\n OutputStream, which is left in an indeterminate state, and it is up to\n the caller to ignore or recover the stream state.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidClassException Something is wrong with a class used by\n          serialization.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotSerializableException Some object to be serialized does not\n          implement the <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a> interface.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException Any exception thrown by the underlying\n          OutputStream.</p>\n</div></li></ul></div></div></div><div id='method-writeShort' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeShort' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeShort' class='name expandable'>writeShort</a>( <span class='pre'>val</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a 16 bit short. ...</div><div class='long'><p>Writes a 16 bit short.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Number<div class='sub-desc'><p>the short value to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeUTF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeUTF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeUTF' class='name expandable'>writeUTF</a>( <span class='pre'>str</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Primitive data write of this String in\n modified UTF-8\n format. ...</div><div class='long'><p>Primitive data write of this String in\n <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n format.  Note that there is a\n significant difference between writing a String into the stream as\n primitive data or as an Object. A String instance written by writeObject\n is written into the stream as a String initially. Future writeObject()\n calls write references to the string into the stream.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>str</span> : String<div class='sub-desc'><p>the String to be written</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if I/O errors occur while writing to the underlying\n          stream</p>\n</div></li></ul></div></div></div><div id='method-writeUnshared' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectOutputStream'>java.io.ObjectOutputStream</span><br/><a href='source/ObjectOutputStream.html#java-io-ObjectOutputStream-method-writeUnshared' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectOutputStream-method-writeUnshared' class='name expandable'>writeUnshared</a>( <span class='pre'>obj</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes an \"unshared\" object to the ObjectOutputStream. ...</div><div class='long'><p>Writes an \"unshared\" object to the ObjectOutputStream.  This method is\n identical to writeObject, except that it always writes the given object\n as a new, unique object in the stream (as opposed to a back-reference\n pointing to a previously serialized instance).  Specifically:\n <ul>\n   <li>An object written via writeUnshared is always serialized in the\n       same manner as a newly appearing object (an object that has not\n       been written to the stream yet), regardless of whether or not the\n       object has been written previously.</li></ul></p>\n\n<p>   <li>If writeObject is used to write an object that has been previously\n       written with writeUnshared, the previous writeUnshared operation\n       is treated as if it were a write of a separate object.  In other\n       words, ObjectOutputStream will never generate back-references to\n       object data written by calls to writeUnshared.\n \n While writing an object via writeUnshared does not in itself guarantee a\n unique reference to the object when it is deserialized, it allows a\n single object to be defined multiple times in a stream, so that multiple\n calls to readUnshared by the receiver will not conflict.  Note that the\n rules described above only apply to the base-level object written with\n writeUnshared, and not to any transitively referenced sub-objects in the\n object graph to be serialized.</li></p>\n\n<p> <p>ObjectOutputStream subclasses which override this method can only be\n constructed in security contexts possessing the\n \"enableSubclassImplementation\" SerializablePermission; any attempt to\n instantiate such a subclass without this permission will cause a\n SecurityException to be thrown.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {Object}<div class='sub-desc'><p>object to write to stream</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NotSerializableException if an object in the graph to be\n          serialized does not implement the Serializable interface</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidClassException if a problem exists with the class of an\n          object to be serialized</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs during serialization</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});