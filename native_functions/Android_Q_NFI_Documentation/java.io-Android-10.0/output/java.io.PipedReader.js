Ext.data.JsonP.java_io_PipedReader({"tagname":"class","name":"java.io.PipedReader","autodetected":{},"files":[{"filename":"PipedReader.js","href":"PipedReader.html#java-io-PipedReader"}],"extends":"java.io.Reader","author":[{"tagname":"author","name":"Mark Reinhold","email":null}],"since":"JDK1.1","members":[{"name":"close","tagname":"method","owner":"java.io.PipedReader","id":"method-close","meta":{}},{"name":"connect","tagname":"method","owner":"java.io.PipedReader","id":"method-connect","meta":{}},{"name":"mark","tagname":"method","owner":"java.io.Reader","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.io.Reader","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.io.PipedReader","id":"method-read","meta":{}},{"name":"ready","tagname":"method","owner":"java.io.PipedReader","id":"method-ready","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.Reader","id":"method-reset","meta":{}},{"name":"skip","tagname":"method","owner":"java.io.Reader","id":"method-skip","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.PipedReader","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.Reader"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.Reader' rel='java.io.Reader' class='docClass'>java.io.Reader</a><div class='subclass '><strong>java.io.PipedReader</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/PipedReader.html#java-io-PipedReader' target='_blank'>PipedReader.js</a></div></pre><div class='doc-contents'><p>Piped character-input streams.</p>\n        <p>Available since: <b>JDK1.1</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedReader'>java.io.PipedReader</span><br/><a href='source/PipedReader.html#java-io-PipedReader-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedReader-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this piped stream and releases any system resources\n associated with the stream. ...</div><div class='long'><p>Closes this piped stream and releases any system resources\n associated with the stream.\n@exception IOException  if an I/O error occurs.</p>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-close\" rel=\"java.io.Reader-method-close\" class=\"docClass\">java.io.Reader.close</a></p></div></div></div><div id='method-connect' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedReader'>java.io.PipedReader</span><br/><a href='source/PipedReader.html#java-io-PipedReader-method-connect' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedReader-method-connect' class='name expandable'>connect</a>( <span class='pre'>src</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes this piped reader to be connected\n to the piped  writer src. ...</div><div class='long'><p>Causes this piped reader to be connected\n to the piped  writer <code>src</code>.\n If this object is already connected to some\n other piped writer, an <code>IOException</code>\n is thrown.\n <p>\n If <code>src</code> is an\n unconnected piped writer and <code>snk</code>\n is an unconnected piped reader, they\n may be connected by either the call:</p>\n\n<p> <pre><code>snk.connect(src)</code> </pre>\n <p>\n or the call:</p>\n\n<p> <pre><code>src.connect(snk)</code> </pre>\n <p>\n The two calls have the same effect.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>src</span> : Object {PipedWriter}<div class='sub-desc'><p>The piped writer to connect to.\n@exception IOException  if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-mark' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.Reader' rel='java.io.Reader' class='defined-in docClass'>java.io.Reader</a><br/><a href='source/Reader.html#java-io-Reader-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Reader-method-mark' class='name expandable'>mark</a>( <span class='pre'>readAheadLimit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Marks the present position in the stream. ...</div><div class='long'><p>Marks the present position in the stream.  Subsequent calls to reset()\n will attempt to reposition the stream to this point.  Not all\n character-input streams support the mark() operation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>readAheadLimit</span> : Number<div class='sub-desc'><p>Limit on the number of characters that may be\n                         read while still preserving the mark.  After\n                         reading this many characters, attempting to\n                         reset the stream may fail.\n@exception IOException  If the stream does not support mark(),\n                          or if some other I/O error occurs</p>\n</div></li></ul></div></div></div><div id='method-markSupported' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.Reader' rel='java.io.Reader' class='defined-in docClass'>java.io.Reader</a><br/><a href='source/Reader.html#java-io-Reader-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Reader-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tells whether this stream supports the mark() operation. ...</div><div class='long'><p>Tells whether this stream supports the mark() operation. The default\n implementation always returns false. Subclasses should override this\n method.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if and only if this stream supports the mark operation.</p>\n</div></li></ul></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedReader'>java.io.PipedReader</span><br/><a href='source/PipedReader.html#java-io-PipedReader-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedReader-method-read' class='name expandable'>read</a>( <span class='pre'>cbuf, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads up to len characters of data from this piped\n stream into an array of characters. ...</div><div class='long'><p>Reads up to <code>len</code> characters of data from this piped\n stream into an array of characters. Less than <code>len</code> characters\n will be read if the end of the data stream is reached or if\n <code>len</code> exceeds the pipe's buffer size. This method\n blocks until at least one character of input is available.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cbuf</span> : Object {char[]}<div class='sub-desc'><p>the buffer into which the data is read.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset of the data.</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the maximum number of characters read.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the total number of characters read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the stream has been reached.\n@exception IOException  if the pipe is\n                  <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,\n                  unconnected, closed,\n                  or an I/O error occurs.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.Reader-method-read\" rel=\"java.io.Reader-method-read\" class=\"docClass\">java.io.Reader.read</a></p></div></div></div><div id='method-ready' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.PipedReader'>java.io.PipedReader</span><br/><a href='source/PipedReader.html#java-io-PipedReader-method-ready' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.PipedReader-method-ready' class='name expandable'>ready</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tell whether this stream is ready to be read. ...</div><div class='long'><p>Tell whether this stream is ready to be read.  A piped character\n stream is ready if the circular buffer is not empty.\n@exception IOException  if the pipe is\n                  <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,\n                  unconnected, or closed.</p>\n<p>Overrides: <a href=\"#!/api/java.io.Reader-method-ready\" rel=\"java.io.Reader-method-ready\" class=\"docClass\">java.io.Reader.ready</a></p></div></div></div><div id='method-reset' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.Reader' rel='java.io.Reader' class='defined-in docClass'>java.io.Reader</a><br/><a href='source/Reader.html#java-io-Reader-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Reader-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Resets the stream. ...</div><div class='long'><p>Resets the stream.  If the stream has been marked, then attempt to\n reposition it at the mark.  If the stream has not been marked, then\n attempt to reset it in some way appropriate to the particular stream,\n for example by repositioning it to its starting point.  Not all\n character-input streams support the reset() operation, and some support\n reset() without supporting mark().\n@exception IOException  If the stream has not been marked,\n                          or if the mark has been invalidated,\n                          or if the stream does not support reset(),\n                          or if some other I/O error occurs</p>\n</div></div></div><div id='method-skip' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.Reader' rel='java.io.Reader' class='defined-in docClass'>java.io.Reader</a><br/><a href='source/Reader.html#java-io-Reader-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Reader-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips characters. ...</div><div class='long'><p>Skips characters.  This method will block until some characters are\n available, an I/O error occurs, or the end of the stream is reached.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>The number of characters to skip</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The number of characters actually skipped\n@exception IllegalArgumentException  If <code>n</code> is negative.\n@exception IOException  If an I/O error occurs</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});