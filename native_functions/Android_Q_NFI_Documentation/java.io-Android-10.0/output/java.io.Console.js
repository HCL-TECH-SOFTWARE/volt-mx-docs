Ext.data.JsonP.java_io_Console({"tagname":"class","name":"java.io.Console","autodetected":{},"files":[{"filename":"Console.js","href":"Console.html#java-io-Console"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Xueming Shen","email":null}],"since":"1.6","members":[{"name":"flush","tagname":"method","owner":"java.io.Console","id":"method-flush","meta":{}},{"name":"format","tagname":"method","owner":"java.io.Console","id":"method-format","meta":{}},{"name":"printf","tagname":"method","owner":"java.io.Console","id":"method-printf","meta":{}},{"name":"readLine","tagname":"method","owner":"java.io.Console","id":"method-readLine","meta":{}},{"name":"readPassword","tagname":"method","owner":"java.io.Console","id":"method-readPassword","meta":{}},{"name":"reader","tagname":"method","owner":"java.io.Console","id":"method-reader","meta":{}},{"name":"writer","tagname":"method","owner":"java.io.Console","id":"method-writer","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.Console","short_doc":"implements java.io.Flushable\n\nMethods to access the character-based console device, if any, associated\n with the curr...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.io.Console</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Console.html#java-io-Console' target='_blank'>Console.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.io.Flushable\" rel=\"java.io.Flushable\" class=\"docClass\">java.io.Flushable</a></p>\n\n<p>Methods to access the character-based console device, if any, associated\n with the current Java virtual machine.</p>\n\n<p> <p> Whether a virtual machine has a console is dependent upon the\n underlying platform and also upon the manner in which the virtual\n machine is invoked.  If the virtual machine is started from an\n interactive command line without redirecting the standard input and\n output streams then its console will exist and will typically be\n connected to the keyboard and display from which the virtual machine\n was launched.  If the virtual machine is started automatically, for\n example by a background job scheduler, then it will typically not\n have a console.\n <p>\n If this virtual machine has a console then it is represented by a\n unique instance of this class which can be obtained by invoking the\n java.lang.System.console() method.  If no console device is\n available then an invocation of that method will return <tt>null</tt>.\n <p>\n Read and write operations are synchronized to guarantee the atomic\n completion of critical operations; therefore invoking methods\n <a href=\"#!/api/java.io.Console-method-readLine\" rel=\"java.io.Console-method-readLine\" class=\"docClass\">readLine</a>(), <a href=\"#!/api/java.io.Console-method-readPassword\" rel=\"java.io.Console-method-readPassword\" class=\"docClass\">readPassword</a>(), <a href=\"#!/api/java.io.Console-method-format\" rel=\"java.io.Console-method-format\" class=\"docClass\">format()</a>,\n <a href=\"#!/api/java.io.Console-method-printf\" rel=\"java.io.Console-method-printf\" class=\"docClass\">printf()</a> as well as the read, format and write operations\n on the objects returned by <a href=\"#!/api/java.io.Console-method-reader\" rel=\"java.io.Console-method-reader\" class=\"docClass\">reader</a>() and <a href=\"#!/api/java.io.Console-method-writer\" rel=\"java.io.Console-method-writer\" class=\"docClass\">writer</a>() may\n block in multithreaded scenarios.\n <p>\n Invoking <tt>close()</tt> on the objects returned by the <a href=\"#!/api/java.io.Console-method-reader\" rel=\"java.io.Console-method-reader\" class=\"docClass\">reader</a>()\n and the <a href=\"#!/api/java.io.Console-method-writer\" rel=\"java.io.Console-method-writer\" class=\"docClass\">writer</a>() will not close the underlying stream of those\n objects.\n <p>\n The console-read methods return <tt>null</tt> when the end of the\n console input stream is reached, for example by typing control-D on\n Unix or control-Z on Windows.  Subsequent read operations will succeed\n if additional characters are later entered on the console's input\n device.\n <p>\n Unless otherwise specified, passing a <tt>null</tt> argument to any method\n in this class will cause a NullPointerException to be thrown.\n <p>\n <b>Security note:</b>\n If an application needs to read a password or other secure data, it should\n use <a href=\"#!/api/java.io.Console-method-readPassword\" rel=\"java.io.Console-method-readPassword\" class=\"docClass\">readPassword</a>() or Object...) and\n manually zero the returned character array after processing to minimize the\n lifetime of sensitive data in memory.</p>\n\n<p> <blockquote><pre>{@code\n Console cons;\n char[] passwd;\n if ((cons = System.console()) != null &amp;&amp;\n     (passwd = cons.readPassword(\"[%s]\", \"Password:\")) != null) {\n     ...\n     java.util.Arrays.fill(passwd, ' ');\n }\n }</pre></blockquote></p>\n        <p>Available since: <b>1.6</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-flush' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.Console'>java.io.Console</span><br/><a href='source/Console.html#java-io-Console-method-flush' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Console-method-flush' class='name expandable'>flush</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Flushes the console and forces any buffered output to be written\n immediately . ...</div><div class='long'><p>Flushes the console and forces any buffered output to be written\n immediately .</p>\n</div></div></div><div id='method-format' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.Console'>java.io.Console</span><br/><a href='source/Console.html#java-io-Console-method-format' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Console-method-format' class='name expandable'>format</a>( <span class='pre'>fmt, args</span> ) : Object {java.io.Console}<span class=\"signature\"></span></div><div class='description'><div class='short'>Writes a formatted string to this console's output stream using\n the specified format string and arguments. ...</div><div class='long'><p>Writes a formatted string to this console's output stream using\n the specified format string and arguments.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fmt</span> : String<div class='sub-desc'><p>A format string as described in <a\n         href=\"../util/Formatter.html#syntax\">Format string syntax</a></p>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         <cite>The Java&trade; Virtual Machine Specification</cite>.\n         The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href=\"../util/Formatter.html#syntax\">conversion</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.Console}</span><div class='sub-desc'><p>This console</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href=\"../util/Formatter.html#detail\">Details</a> section\n          of the formatter class specification.</p>\n</div></li></ul></div></div></div><div id='method-printf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.Console'>java.io.Console</span><br/><a href='source/Console.html#java-io-Console-method-printf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Console-method-printf' class='name expandable'>printf</a>( <span class='pre'>format, args</span> ) : Object {java.io.Console}<span class=\"signature\"></span></div><div class='description'><div class='short'>A convenience method to write a formatted string to this console's\n output stream using the specified format string a...</div><div class='long'><p>A convenience method to write a formatted string to this console's\n output stream using the specified format string and arguments.</p>\n\n<p> <p> An invocation of this method of the form <tt>con.printf(format,\n args)</tt> behaves in exactly the same way as the invocation of\n <pre>con.format(format, args)</pre>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>format</span> : String<div class='sub-desc'><p>A format string as described in <a\n         href=\"../util/Formatter.html#syntax\">Format string syntax</a>.</p>\n</div></li><li><span class='pre'>args</span> : Object {java.lang.Object[]}<div class='sub-desc'><p>Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         <cite>The Java&trade; Virtual Machine Specification</cite>.\n         The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href=\"../util/Formatter.html#syntax\">conversion</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.Console}</span><div class='sub-desc'><p>This console</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalFormatException\n          If a format string contains an illegal syntax, a format\n          specifier that is incompatible with the given arguments,\n          insufficient arguments given the format string, or other\n          illegal conditions.  For specification of all possible\n          formatting errors, see the <a\n          href=\"../util/Formatter.html#detail\">Details</a> section of the\n          formatter class specification.</p>\n</div></li></ul></div></div></div><div id='method-readLine' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.Console'>java.io.Console</span><br/><a href='source/Console.html#java-io-Console-method-readLine' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Console-method-readLine' class='name expandable'>readLine</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a single line of text from the console. ...</div><div class='long'><p>Reads a single line of text from the console.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>A string containing the line read from the console, not\n          including any line-termination characters, or <tt>null</tt>\n          if an end of stream has been reached.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOError\n         If an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-readPassword' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.Console'>java.io.Console</span><br/><a href='source/Console.html#java-io-Console-method-readPassword' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Console-method-readPassword' class='name expandable'>readPassword</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a password or passphrase from the console with echoing disabled ...</div><div class='long'><p>Reads a password or passphrase from the console with echoing disabled</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>A character array containing the password or passphrase read\n          from the console, not including any line-termination characters,\n          or <tt>null</tt> if an end of stream has been reached.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOError\n         If an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-reader' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.Console'>java.io.Console</span><br/><a href='source/Console.html#java-io-Console-method-reader' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Console-method-reader' class='name expandable'>reader</a>( <span class='pre'></span> ) : Object {java.io.Reader}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the unique Reader object associated\n with this console. ...</div><div class='long'><p>Retrieves the unique <a href=\"#!/api/java.io.Reader\" rel=\"java.io.Reader\" class=\"docClass\">Reader</a> object associated\n with this console.\n <p>\n This method is intended to be used by sophisticated applications, for\n example, a java.util.Scanner object which utilizes the rich\n parsing/scanning functionality provided by the <tt>Scanner</tt>:\n <blockquote></blockquote></p>\n\n<pre> Console con = System.console();\n if (con != null) {\n     Scanner sc = new Scanner(con.reader());\n     ...\n }\n </pre>\n\n\n<p>\n <p>\n For simple applications requiring only line-oriented reading, use\n <tt><a href=\"#!/api/java.io.Console-method-readLine\" rel=\"java.io.Console-method-readLine\" class=\"docClass\">readLine</a></tt>.\n <p>\n The bulk read operations read(char[]) ,\n int, int) read(char[], int, int)  and\n read(java.nio.CharBuffer)\n on the returned object will not read in characters beyond the line\n bound for each invocation, even if the destination buffer has space for\n more characters. The {@code Reader}'s {@code read} methods may block if a\n line bound has not been entered or reached on the console's input device.\n A line bound is considered to be any one of a line feed (<tt>'\\n'</tt>),\n a carriage return (<tt>'\\r'</tt>), a carriage return followed immediately\n by a linefeed, or an end of stream.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.Reader}</span><div class='sub-desc'><p>The reader associated with this console</p>\n</div></li></ul></div></div></div><div id='method-writer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.Console'>java.io.Console</span><br/><a href='source/Console.html#java-io-Console-method-writer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.Console-method-writer' class='name expandable'>writer</a>( <span class='pre'></span> ) : Object {java.io.PrintWriter}<span class=\"signature\"></span></div><div class='description'><div class='short'>Retrieves the unique PrintWriter object\n associated with this console. ...</div><div class='long'><p>Retrieves the unique <a href=\"#!/api/java.io.PrintWriter\" rel=\"java.io.PrintWriter\" class=\"docClass\">PrintWriter</a> object\n associated with this console.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.PrintWriter}</span><div class='sub-desc'><p>The printwriter associated with this console</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});