Ext.data.JsonP.java_io_Serializable({"tagname":"class","name":"java.io.Serializable","autodetected":{},"files":[{"filename":"Serializable.js","href":"Serializable.html#java-io-Serializable"}],"author":[{"tagname":"author","name":"unascribed","email":null}],"since":"JDK1.1","members":[],"alternateClassNames":[],"aliases":{},"id":"class-java.io.Serializable","short_doc":"Serializability of a class is enabled by the class implementing the\n java.io.Serializable interface. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Serializable.html#java-io-Serializable' target='_blank'>Serializable.js</a></div></pre><div class='doc-contents'><p>Serializability of a class is enabled by the class implementing the\n <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a> interface. Classes that do not implement this\n interface will not have any of their state serialized or\n deserialized.  All subtypes of a serializable class are themselves\n serializable.  The serialization interface has no methods or fields\n and serves only to identify the semantics of being serializable. <p></p>\n\n<p> To allow subtypes of non-serializable classes to be serialized, the\n subtype may assume responsibility for saving and restoring the\n state of the supertype's public, protected, and (if accessible)\n package fields.  The subtype may assume this responsibility only if\n the class it extends has an accessible no-arg constructor to\n initialize the class's state.  It is an error to declare a class\n Serializable if this is not the case.  The error will be detected at\n runtime. <p></p>\n\n<p> During deserialization, the fields of non-serializable classes will\n be initialized using the public or protected no-arg constructor of\n the class.  A no-arg constructor must be accessible to the subclass\n that is serializable.  The fields of serializable subclasses will\n be restored from the stream. <p></p>\n\n<p> When traversing a graph, an object may be encountered that does not\n support the Serializable interface. In this case the\n NotSerializableException will be thrown and will identify the class\n of the non-serializable object. <p></p>\n\n<p> Classes that require special handling during the serialization and\n deserialization process must implement special methods with these exact\n signatures:</p>\n\n<p> <PRE>\n private void writeObject(<a href=\"#!/api/java.io.ObjectOutputStream\" rel=\"java.io.ObjectOutputStream\" class=\"docClass\">java.io.ObjectOutputStream</a> out)\n     throws IOException\n private void readObject(<a href=\"#!/api/java.io.ObjectInputStream\" rel=\"java.io.ObjectInputStream\" class=\"docClass\">java.io.ObjectInputStream</a> in)\n     throws IOException, ClassNotFoundException;\n private void readObjectNoData()\n     throws ObjectStreamException;\n </PRE></p>\n\n<p> <p>The writeObject method is responsible for writing the state of the\n object for its particular class so that the corresponding\n readObject method can restore it.  The default mechanism for saving\n the Object's fields can be invoked by calling\n out.defaultWriteObject. The method does not need to concern\n itself with the state belonging to its superclasses or subclasses.\n State is saved by writing the individual fields to the\n ObjectOutputStream using the writeObject method or by using the\n methods for primitive data types supported by DataOutput.</p>\n\n<p> <p>The readObject method is responsible for reading from the stream and\n restoring the classes fields. It may call in.defaultReadObject to invoke\n the default mechanism for restoring the object's non-static and\n non-transient fields.  The defaultReadObject method uses information in\n the stream to assign the fields of the object saved in the stream with the\n correspondingly named fields in the current object.  This handles the case\n when the class has evolved to add new fields. The method does not need to\n concern itself with the state belonging to its superclasses or subclasses.\n State is saved by writing the individual fields to the\n ObjectOutputStream using the writeObject method or by using the\n methods for primitive data types supported by DataOutput.</p>\n\n<p> <p>The readObjectNoData method is responsible for initializing the state of\n the object for its particular class in the event that the serialization\n stream does not list the given class as a superclass of the object being\n deserialized.  This may occur in cases where the receiving party uses a\n different version of the deserialized instance's class than the sending\n party, and the receiver's version extends classes that are not extended by\n the sender's version.  This may also occur if the serialization stream has\n been tampered; hence, readObjectNoData is useful for initializing\n deserialized objects properly despite a \"hostile\" or incomplete source\n stream.</p>\n\n<p> <p>Serializable classes that need to designate an alternative object to be\n used when writing an object to the stream should implement this\n special method with the exact signature:</p>\n\n<p> <PRE>\n ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;\n </PRE><p></p>\n\n<p> This writeReplace method is invoked by serialization if the method\n exists and it would be accessible from a method defined within the\n class of the object being serialized. Thus, the method can have private,\n protected and package-private access. Subclass access to this method\n follows java accessibility rules. <p></p>\n\n<p> Classes that need to designate a replacement when an instance of it\n is read from the stream should implement this special method with the\n exact signature.</p>\n\n<p> <PRE>\n ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;\n </PRE><p></p>\n\n<p> This readResolve method follows the same invocation rules and\n accessibility rules as writeReplace.<p></p>\n\n<p> The serialization runtime associates with each serializable class a version\n number, called a serialVersionUID, which is used during deserialization to\n verify that the sender and receiver of a serialized object have loaded\n classes for that object that are compatible with respect to serialization.\n If the receiver has loaded a class for the object that has a different\n serialVersionUID than that of the corresponding sender's class, then\n deserialization will result in an <a href=\"#!/api/java.io.InvalidClassException\" rel=\"java.io.InvalidClassException\" class=\"docClass\">java.io.InvalidClassException</a>.  A\n serializable class can declare its own serialVersionUID explicitly by\n declaring a field named <code>\"serialVersionUID\"</code> that must be static,\n final, and of type <code>long</code>:</p>\n\n<p> <PRE>\n ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;\n </PRE></p>\n\n<p> If a serializable class does not explicitly declare a serialVersionUID, then\n the serialization runtime will calculate a default serialVersionUID value\n for that class based on various aspects of the class, as described in the\n Java(TM) Object Serialization Specification.  However, it is <em>strongly\n recommended</em> that all serializable classes explicitly declare\n serialVersionUID values, since the default serialVersionUID computation is\n highly sensitive to class details that may vary depending on compiler\n implementations, and can thus result in unexpected\n <code>InvalidClassException</code>s during deserialization.  Therefore, to\n guarantee a consistent serialVersionUID value across different java compiler\n implementations, a serializable class must declare an explicit\n serialVersionUID value.  It is also strongly advised that explicit\n serialVersionUID declarations use the <code>private</code> modifier where\n possible, since such declarations apply only to the immediately declaring\n class--serialVersionUID fields are not useful as inherited members. Array\n classes cannot declare an explicit serialVersionUID, so they always have\n the default computed value, but the requirement for matching\n serialVersionUID values is waived for array classes.</p>\n\n<p> Android implementation of serialVersionUID computation will change slightly\n for some classes if you're targeting android N. In order to preserve compatibility,\n this change is only enabled is the application target SDK version is set to\n 24 or higher. It is highly recommended to use an explicit serialVersionUID\n field to avoid compatibility issues.</p>\n\n<p> <h3>Implement Serializable Judiciously</h3>\n Refer to <i>Effective Java</i>'s chapter on serialization for thorough\n coverage of the serialization API. The book explains how to use this\n interface without harming your application's maintainability.</p>\n\n<p> <h3>Recommended Alternatives</h3>\n <strong>JSON</strong> is concise, human-readable and efficient. Android\n includes both a streaming API and a tree API to read and write JSON. Use a binding library\n like <a href=\"http://code.google.com/p/google-gson/\">GSON</a> to read and\n write Java objects directly.</p>\n\n<p> @see <a href=\"#!/api/java.io.ObjectOutputStream\" rel=\"java.io.ObjectOutputStream\" class=\"docClass\">java.io.ObjectOutputStream</a>\n @see <a href=\"#!/api/java.io.ObjectInputStream\" rel=\"java.io.ObjectInputStream\" class=\"docClass\">java.io.ObjectInputStream</a>\n @see <a href=\"#!/api/java.io.ObjectOutput\" rel=\"java.io.ObjectOutput\" class=\"docClass\">java.io.ObjectOutput</a>\n @see <a href=\"#!/api/java.io.ObjectInput\" rel=\"java.io.ObjectInput\" class=\"docClass\">java.io.ObjectInput</a>\n @see <a href=\"#!/api/java.io.Externalizable\" rel=\"java.io.Externalizable\" class=\"docClass\">java.io.Externalizable</a></p>\n        <p>Available since: <b>JDK1.1</b></p>\n</div><div class='members'></div></div>","meta":{}});