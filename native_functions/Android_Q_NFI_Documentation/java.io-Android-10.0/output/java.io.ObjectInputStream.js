Ext.data.JsonP.java_io_ObjectInputStream({"tagname":"class","name":"java.io.ObjectInputStream","autodetected":{},"files":[{"filename":"ObjectInputStream.js","href":"ObjectInputStream.html#java-io-ObjectInputStream"}],"extends":"java.io.InputStream","author":[{"tagname":"author","name":"Mike Warres","email":null},{"tagname":"author","name":"Roger Riggs","email":null}],"since":"JDK1.1","members":[{"name":"available","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-available","meta":{}},{"name":"close","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-close","meta":{}},{"name":"defaultReadObject","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-defaultReadObject","meta":{}},{"name":"mark","tagname":"method","owner":"java.io.InputStream","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.io.InputStream","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-read","meta":{}},{"name":"readBoolean","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readBoolean","meta":{}},{"name":"readByte","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readByte","meta":{}},{"name":"readChar","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readChar","meta":{}},{"name":"readDouble","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readDouble","meta":{}},{"name":"readFields","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readFields","meta":{}},{"name":"readFloat","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readFloat","meta":{}},{"name":"readFully","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readFully","meta":{}},{"name":"readInt","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readInt","meta":{}},{"name":"readLine","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readLine","meta":{"deprecated":{"text":"<p>This method does not properly convert bytes to characters.\n          see DataInputStream for the details and alternatives.</p>\n"}}},{"name":"readLong","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readLong","meta":{}},{"name":"readObject","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readObject","meta":{}},{"name":"readShort","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readShort","meta":{}},{"name":"readUTF","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readUTF","meta":{}},{"name":"readUnshared","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readUnshared","meta":{}},{"name":"readUnsignedByte","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readUnsignedByte","meta":{}},{"name":"readUnsignedShort","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-readUnsignedShort","meta":{}},{"name":"registerValidation","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-registerValidation","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.InputStream","id":"method-reset","meta":{}},{"name":"skip","tagname":"method","owner":"java.io.InputStream","id":"method-skip","meta":{}},{"name":"skipBytes","tagname":"method","owner":"java.io.ObjectInputStream","id":"method-skipBytes","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.ObjectInputStream","short_doc":"implements java.io.ObjectInput\n\n implements java.io.ObjectStreamConstants\n\nAn ObjectInputStream deserializes primitiv...","classIcon":"icon-class","superclasses":["java.lang.Object","java.io.InputStream"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='docClass'>java.io.InputStream</a><div class='subclass '><strong>java.io.ObjectInputStream</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/ObjectInputStream.html#java-io-ObjectInputStream' target='_blank'>ObjectInputStream.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.io.ObjectInput\" rel=\"java.io.ObjectInput\" class=\"docClass\">java.io.ObjectInput</a></p>\n\n<p> implements <a href=\"#!/api/java.io.ObjectStreamConstants\" rel=\"java.io.ObjectStreamConstants\" class=\"docClass\">java.io.ObjectStreamConstants</a></p>\n\n<p>An ObjectInputStream deserializes primitive data and objects previously\n written using an ObjectOutputStream.</p>\n\n<p> <p>ObjectOutputStream and ObjectInputStream can provide an application with\n persistent storage for graphs of objects when used with a FileOutputStream\n and FileInputStream respectively.  ObjectInputStream is used to recover\n those objects previously serialized. Other uses include passing objects\n between hosts using a socket stream or for marshaling and unmarshaling\n arguments and parameters in a remote communication system.</p>\n\n<p> <p>ObjectInputStream ensures that the types of all objects in the graph\n created from the stream match the classes present in the Java Virtual\n Machine.  Classes are loaded as required using the standard mechanisms.</p>\n\n<p> <p>Only objects that support the <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a> or\n <a href=\"#!/api/java.io.Externalizable\" rel=\"java.io.Externalizable\" class=\"docClass\">java.io.Externalizable</a> interface can be read from streams.</p>\n\n<p> <p>The method <code>readObject</code> is used to read an object from the\n stream.  Java's safe casting should be used to get the desired type.  In\n Java, strings and arrays are objects and are treated as objects during\n serialization. When read they need to be cast to the expected type.</p>\n\n<p> <p>Primitive data types can be read from the stream using the appropriate\n method on DataInput.</p>\n\n<p> <p>The default deserialization mechanism for objects restores the contents\n of each field to the value and type it had when it was written.  Fields\n declared as transient or static are ignored by the deserialization process.\n References to other objects cause those objects to be read from the stream\n as necessary.  Graphs of objects are restored correctly using a reference\n sharing mechanism.  New objects are always allocated when deserializing,\n which prevents existing objects from being overwritten.</p>\n\n<p> <p>Reading an object is analogous to running the constructors of a new\n object.  Memory is allocated for the object and initialized to zero (NULL).\n No-arg constructors are invoked for the non-serializable classes and then\n the fields of the serializable classes are restored from the stream starting\n with the serializable class closest to java.lang.object and finishing with\n the object's most specific class.</p>\n\n<p> <p>For example to read from a stream as written by the example in\n ObjectOutputStream:\n <br></p>\n\n<pre>      FileInputStream fis = new FileInputStream(\"t.tmp\");\n      ObjectInputStream ois = new ObjectInputStream(fis);\n\n      int i = ois.readInt();\n      String today = (String) ois.readObject();\n      Date date = (Date) ois.readObject();\n\n      ois.close();\n </pre>\n\n\n<p> <p>Classes control how they are serialized by implementing either the\n <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a> or <a href=\"#!/api/java.io.Externalizable\" rel=\"java.io.Externalizable\" class=\"docClass\">java.io.Externalizable</a> interfaces.</p>\n\n<p> <p>Implementing the Serializable interface allows object serialization to\n save and restore the entire state of the object and it allows classes to\n evolve between the time the stream is written and the time it is read.  It\n automatically traverses references between objects, saving and restoring\n entire graphs.</p>\n\n<p> <p>Serializable classes that require special handling during the\n serialization and deserialization process should implement the following\n methods:</p>\n\n<pre> private void writeObject(<a href=\"#!/api/java.io.ObjectOutputStream\" rel=\"java.io.ObjectOutputStream\" class=\"docClass\">java.io.ObjectOutputStream</a> stream)\n     throws IOException;\n private void readObject(<a href=\"#!/api/java.io.ObjectInputStream\" rel=\"java.io.ObjectInputStream\" class=\"docClass\">java.io.ObjectInputStream</a> stream)\n     throws IOException, ClassNotFoundException;\n private void readObjectNoData()\n     throws ObjectStreamException;\n </pre>\n\n\n<p> <p>The readObject method is responsible for reading and restoring the state\n of the object for its particular class using data written to the stream by\n the corresponding writeObject method.  The method does not need to concern\n itself with the state belonging to its superclasses or subclasses.  State is\n restored by reading data from the ObjectInputStream for the individual\n fields and making assignments to the appropriate fields of the object.\n Reading primitive data types is supported by DataInput.</p>\n\n<p> <p>Any attempt to read object data which exceeds the boundaries of the\n custom data written by the corresponding writeObject method will cause an\n OptionalDataException to be thrown with an eof field value of true.\n Non-object reads which exceed the end of the allotted data will reflect the\n end of data in the same way that they would indicate the end of the stream:\n bytewise reads will return -1 as the byte read or number of bytes read, and\n primitive reads will throw EOFExceptions.  If there is no corresponding\n writeObject method, then the end of default serialized data marks the end of\n the allotted data.</p>\n\n<p> <p>Primitive and object read calls issued from within a readExternal method\n behave in the same manner--if the stream is already positioned at the end of\n data written by the corresponding writeExternal method, object reads will\n throw OptionalDataExceptions with eof set to true, bytewise reads will\n return -1, and primitive reads will throw EOFExceptions.  Note that this\n behavior does not hold for streams written with the old\n <code>ObjectStreamConstants.PROTOCOL_VERSION_1</code> protocol, in which the\n end of data written by writeExternal methods is not demarcated, and hence\n cannot be detected.</p>\n\n<p> <p>The readObjectNoData method is responsible for initializing the state of\n the object for its particular class in the event that the serialization\n stream does not list the given class as a superclass of the object being\n deserialized.  This may occur in cases where the receiving party uses a\n different version of the deserialized instance's class than the sending\n party, and the receiver's version extends classes that are not extended by\n the sender's version.  This may also occur if the serialization stream has\n been tampered; hence, readObjectNoData is useful for initializing\n deserialized objects properly despite a \"hostile\" or incomplete source\n stream.</p>\n\n<p> <p>Serialization does not read or assign values to the fields of any object\n that does not implement the <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a> interface.  Subclasses of\n Objects that are not serializable can be serializable. In this case the\n non-serializable class must have a no-arg constructor to allow its fields to\n be initialized.  In this case it is the responsibility of the subclass to\n save and restore the state of the non-serializable class. It is frequently\n the case that the fields of that class are accessible (public, package, or\n protected) or that there are get and set methods that can be used to restore\n the state.</p>\n\n<p> <p>Any exception that occurs while deserializing an object will be caught by\n the ObjectInputStream and abort the reading process.</p>\n\n<p> <p>Implementing the Externalizable interface allows the object to assume\n complete control over the contents and format of the object's serialized\n form.  The methods of the Externalizable interface, writeExternal and\n readExternal, are called to save and restore the objects state.  When\n implemented by a class they can write and read their own state using all of\n the methods of ObjectOutput and ObjectInput.  It is the responsibility of\n the objects to handle any versioning that occurs.</p>\n\n<p> <p>Enum constants are deserialized differently than ordinary serializable or\n externalizable objects.  The serialized form of an enum constant consists\n solely of its name; field values of the constant are not transmitted.  To\n deserialize an enum constant, ObjectInputStream reads the constant name from\n the stream; the deserialized constant is then obtained by calling the static\n method <code>Enum.valueOf(Class, String)</code> with the enum constant's\n base type and the received constant name as arguments.  Like other\n serializable or externalizable objects, enum constants can function as the\n targets of back references appearing subsequently in the serialization\n stream.  The process by which enum constants are deserialized cannot be\n customized: any class-specific readObject, readObjectNoData, and readResolve\n methods defined by enum types are ignored during deserialization.\n Similarly, any serialPersistentFields or serialVersionUID field declarations\n are also ignored--all enum types have a fixed serialVersionUID of 0L.</p>\n\n<p> @see <a href=\"#!/api/java.io.DataInput\" rel=\"java.io.DataInput\" class=\"docClass\">java.io.DataInput</a>\n @see <a href=\"#!/api/java.io.ObjectOutputStream\" rel=\"java.io.ObjectOutputStream\" class=\"docClass\">java.io.ObjectOutputStream</a>\n @see <a href=\"#!/api/java.io.Serializable\" rel=\"java.io.Serializable\" class=\"docClass\">java.io.Serializable</a>\n @see <a href=\"https://docs.oracle.com/javase/8/docs/platform/serialization/spec/input.html\"> Object Serialization Specification, Section 3, Object Input Classes</a></p>\n        <p>Available since: <b>JDK1.1</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-available' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-available' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-available' class='name expandable'>available</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the number of bytes that can be read without blocking. ...</div><div class='long'><p>Returns the number of bytes that can be read without blocking.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the number of available bytes.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if there are I/O errors while reading from the\n          underlying <code>InputStream</code></p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.InputStream-method-available\" rel=\"java.io.InputStream-method-available\" class=\"docClass\">java.io.InputStream.available</a></p></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes the input stream. ...</div><div class='long'><p>Closes the input stream. Must be called to release any resources\n associated with the stream.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If an I/O error has occurred.</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.InputStream-method-close\" rel=\"java.io.InputStream-method-close\" class=\"docClass\">java.io.InputStream.close</a></p></div></div></div><div id='method-defaultReadObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-defaultReadObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-defaultReadObject' class='name expandable'>defaultReadObject</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Read the non-static and non-transient fields of the current class from\n this stream. ...</div><div class='long'><p>Read the non-static and non-transient fields of the current class from\n this stream.  This may only be called from the readObject method of the\n class being deserialized. It will throw the NotActiveException if it is\n called otherwise.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassNotFoundException if the class of a serialized object\n          could not be found.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotActiveException if the stream is not currently reading\n          objects.</p>\n</div></li></ul></div></div></div><div id='method-mark' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-mark' class='name expandable'>mark</a>( <span class='pre'>readlimit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Marks the current position in this input stream. ...</div><div class='long'><p>Marks the current position in this input stream. A subsequent call to\n the <code>reset</code> method repositions this stream at the last marked\n position so that subsequent reads re-read the same bytes.</p>\n\n<p> <p> The <code>readlimit</code> arguments tells this input stream to\n allow that many bytes to be read before the mark position gets\n invalidated.</p>\n\n<p> <p> The general contract of <code>mark</code> is that, if the method\n <code>markSupported</code> returns <code>true</code>, the stream somehow\n remembers all the bytes read after the call to <code>mark</code> and\n stands ready to supply those same bytes again if and whenever the method\n <code>reset</code> is called.  However, the stream is not required to\n remember any data at all if more than <code>readlimit</code> bytes are\n read from the stream before <code>reset</code> is called.</p>\n\n<p> <p> Marking a closed stream should not have any effect on the stream.</p>\n\n<p> <p> The <code>mark</code> method of <code>InputStream</code> does\n nothing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>readlimit</span> : Number<div class='sub-desc'><p>the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul></div></div></div><div id='method-markSupported' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if this input stream supports the mark and\n reset methods. ...</div><div class='long'><p>Tests if this input stream supports the <code>mark</code> and\n <code>reset</code> methods. Whether or not <code>mark</code> and\n <code>reset</code> are supported is an invariant property of a\n particular input stream instance. The <code>markSupported</code> method\n of <code>InputStream</code> returns <code>false</code>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if this stream instance supports the mark\n          and reset methods; <code>false</code> otherwise.\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-read' class='name expandable'>read</a>( <span class='pre'>buf, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads into an array of bytes. ...</div><div class='long'><p>Reads into an array of bytes.  This method will block until some input\n is available. Consider using <a href=\"#!/api/java.io.DataInputStream-method-readFully\" rel=\"java.io.DataInputStream-method-readFully\" class=\"docClass\">java.io.DataInputStream.readFully</a> to read\n exactly 'length' bytes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>buf</span> : Object {byte[]}<div class='sub-desc'><p>the buffer into which the data is read</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset of the data</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the maximum number of bytes read</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes read, -1 is returned when the end of\n          the stream is reached.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If an I/O error has occurred.\n@see <a href=\"#!/api/java.io.DataInputStream-method-readFully\" rel=\"java.io.DataInputStream-method-readFully\" class=\"docClass\">java.io.DataInputStream.readFully</a>(byte[],int,int)</p>\n</div></li></ul><p>Overrides: <a href=\"#!/api/java.io.InputStream-method-read\" rel=\"java.io.InputStream-method-read\" class=\"docClass\">java.io.InputStream.read</a></p></div></div></div><div id='method-readBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readBoolean' class='name expandable'>readBoolean</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads in a boolean. ...</div><div class='long'><p>Reads in a boolean.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>the boolean read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readByte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readByte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readByte' class='name expandable'>readByte</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads an 8 bit byte. ...</div><div class='long'><p>Reads an 8 bit byte.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 8 bit byte read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readChar' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readChar' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readChar' class='name expandable'>readChar</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a 16 bit char. ...</div><div class='long'><p>Reads a 16 bit char.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the 16 bit char read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readDouble' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readDouble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readDouble' class='name expandable'>readDouble</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a 64 bit double. ...</div><div class='long'><p>Reads a 64 bit double.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 64 bit double read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readFields' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readFields' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readFields' class='name expandable'>readFields</a>( <span class='pre'></span> ) : Object {java.io.ObjectInputStream.GetField}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads the persistent fields from the stream and makes them available by\n name. ...</div><div class='long'><p>Reads the persistent fields from the stream and makes them available by\n name.</p>\n        <p>Available since: <b>1.2</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.ObjectInputStream.GetField}</span><div class='sub-desc'><p>the <code>GetField</code> object representing the persistent\n          fields of the object being deserialized</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassNotFoundException if the class of a serialized object\n          could not be found.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NotActiveException if the stream is not currently reading\n          objects.</p>\n</div></li></ul></div></div></div><div id='method-readFloat' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readFloat' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readFloat' class='name expandable'>readFloat</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a 32 bit float. ...</div><div class='long'><p>Reads a 32 bit float.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 32 bit float read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readFully' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readFully' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readFully' class='name expandable'>readFully</a>( <span class='pre'>buf, off, len</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads bytes, blocking until all bytes are read. ...</div><div class='long'><p>Reads bytes, blocking until all bytes are read.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>buf</span> : Object {byte[]}<div class='sub-desc'><p>the buffer into which the data is read</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset of the data</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the maximum number of bytes to read</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readInt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readInt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readInt' class='name expandable'>readInt</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a 32 bit int. ...</div><div class='long'><p>Reads a 32 bit int.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 32 bit integer read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readLine' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readLine' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readLine' class='name expandable'>readLine</a>( <span class='pre'></span> ) : String<span class=\"signature\"><span class='deprecated' >deprecated</span></span></div><div class='description'><div class='short'>Reads in a line that has been terminated by a \\n, \\r, \\r\\n or EOF. ...</div><div class='long'><p>Reads in a line that has been terminated by a \\n, \\r, \\r\\n or EOF.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprecated</strong> </p>\n        <p>This method does not properly convert bytes to characters.\n          see DataInputStream for the details and alternatives.</p>\n\n        </div>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>a String copy of the line.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if there are I/O errors while reading from the\n          underlying <code>InputStream</code></p>\n</div></li></ul></div></div></div><div id='method-readLong' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readLong' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readLong' class='name expandable'>readLong</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a 64 bit long. ...</div><div class='long'><p>Reads a 64 bit long.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the read 64 bit long.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readObject' class='name expandable'>readObject</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Read an object from the ObjectInputStream. ...</div><div class='long'><p>Read an object from the ObjectInputStream.  The class of the object, the\n signature of the class, and the values of the non-transient and\n non-static fields of the class and all of its supertypes are read.\n Default deserializing for a class can be overridden using the writeObject\n and readObject methods.  Objects referenced by this object are read\n transitively so that a complete equivalent graph of objects is\n reconstructed by readObject.</p>\n\n<p> <p>The root object is completely restored when all of its fields and the\n objects it references are completely restored.  At this point the object\n validation callbacks are executed in order based on their registered\n priorities. The callbacks are registered by objects (in the readObject\n special methods) as they are individually restored.</p>\n\n<p> <p>Exceptions are thrown for problems with the InputStream and for\n classes that should not be deserialized.  All exceptions are fatal to\n the InputStream and leave it in an indeterminate state; it is up to the\n caller to ignore or recover the stream state.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassNotFoundException Class of a serialized object cannot be\n          found.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidClassException Something is wrong with a class used by\n          serialization.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>StreamCorruptedException Control information in the\n          stream is inconsistent.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>OptionalDataException Primitive data was found in the\n          stream instead of objects.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException Any of the usual Input/Output related exceptions.</p>\n</div></li></ul></div></div></div><div id='method-readShort' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readShort' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readShort' class='name expandable'>readShort</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a 16 bit short. ...</div><div class='long'><p>Reads a 16 bit short.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 16 bit short read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readUTF' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readUTF' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readUTF' class='name expandable'>readUTF</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads a String in\n modified UTF-8\n format. ...</div><div class='long'><p>Reads a String in\n <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n format.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the String.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if there are I/O errors while reading from the\n          underlying <code>InputStream</code></p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>UTFDataFormatException if read bytes do not represent a valid\n          modified UTF-8 encoding of a string</p>\n</div></li></ul></div></div></div><div id='method-readUnshared' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readUnshared' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readUnshared' class='name expandable'>readUnshared</a>( <span class='pre'></span> ) : Object {java.lang.Object}<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads an \"unshared\" object from the ObjectInputStream. ...</div><div class='long'><p>Reads an \"unshared\" object from the ObjectInputStream.  This method is\n identical to readObject, except that it prevents subsequent calls to\n readObject and readUnshared from returning additional references to the\n deserialized instance obtained via this call.  Specifically:\n <ul>\n   <li>If readUnshared is called to deserialize a back-reference (the\n       stream representation of an object which has been written\n       previously to the stream), an ObjectStreamException will be\n       thrown.</li></ul></p>\n\n<p>   <li>If readUnshared returns successfully, then any subsequent attempts\n       to deserialize back-references to the stream handle deserialized\n       by readUnshared will cause an ObjectStreamException to be thrown.\n \n Deserializing an object via readUnshared invalidates the stream handle\n associated with the returned object.  Note that this in itself does not\n always guarantee that the reference returned by readUnshared is unique;\n the deserialized object may define a readResolve method which returns an\n object visible to other parties, or readUnshared may return a Class\n object or enum constant obtainable elsewhere in the stream or through\n external means. If the deserialized object defines a readResolve method\n and the invocation of that method returns an array, then readUnshared\n returns a shallow clone of that array; this guarantees that the returned\n array object is unique and cannot be obtained a second time from an\n invocation of readObject or readUnshared on the ObjectInputStream,\n even if the underlying data stream has been manipulated.</li></p>\n\n<p> <p>ObjectInputStream subclasses which override this method can only be\n constructed in security contexts possessing the\n \"enableSubclassImplementation\" SerializablePermission; any attempt to\n instantiate such a subclass without this permission will cause a\n SecurityException to be thrown.</p>\n        <p>Available since: <b>1.4</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Object}</span><div class='sub-desc'><p>reference to deserialized object</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassNotFoundException if class of an object to deserialize\n          cannot be found</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>StreamCorruptedException if control information in the stream\n          is inconsistent</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ObjectStreamException if object to deserialize has already\n          appeared in stream</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>OptionalDataException if primitive data is next in stream</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs during deserialization</p>\n</div></li></ul></div></div></div><div id='method-readUnsignedByte' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readUnsignedByte' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readUnsignedByte' class='name expandable'>readUnsignedByte</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads an unsigned 8 bit byte. ...</div><div class='long'><p>Reads an unsigned 8 bit byte.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 8 bit byte read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-readUnsignedShort' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-readUnsignedShort' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-readUnsignedShort' class='name expandable'>readUnsignedShort</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads an unsigned 16 bit short. ...</div><div class='long'><p>Reads an unsigned 16 bit short.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the 16 bit short read.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>EOFException If end of file is reached.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If other I/O error has occurred.</p>\n</div></li></ul></div></div></div><div id='method-registerValidation' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-registerValidation' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-registerValidation' class='name expandable'>registerValidation</a>( <span class='pre'>obj, prio</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Register an object to be validated before the graph is returned. ...</div><div class='long'><p>Register an object to be validated before the graph is returned.  While\n similar to resolveObject these validations are called after the entire\n graph has been reconstituted.  Typically, a readObject method will\n register the object with the stream so that when all of the objects are\n restored a final set of validations can be performed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object {ObjectInputValidation}<div class='sub-desc'><p>the object to receive the validation callback.</p>\n</div></li><li><span class='pre'>prio</span> : Number<div class='sub-desc'><p>controls the order of callbacks;zero is a good default.\n          Use higher numbers to be called back earlier, lower numbers for\n          later callbacks. Within a priority, callbacks are processed in\n          no particular order.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NotActiveException The stream is not currently reading objects\n          so it is invalid to register a callback.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>InvalidObjectException The validation object is null.</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Repositions this stream to the position at the time the\n mark method was last called on this input stream. ...</div><div class='long'><p>Repositions this stream to the position at the time the\n <code>mark</code> method was last called on this input stream.</p>\n\n<p> <p> The general contract of <code>reset</code> is:</p>\n\n<p> <ul>\n <li> If the method <code>markSupported</code> returns\n <code>true</code>, then:</li></ul></p>\n\n<pre><code> &lt;ul&gt;&lt;li&gt; If the method &lt;code&gt;mark&lt;/code&gt; has not been called since\n the stream was created, or the number of bytes read from the stream\n since &lt;code&gt;mark&lt;/code&gt; was last called is larger than the argument\n to &lt;code&gt;mark&lt;/code&gt; at that last call, then an\n &lt;code&gt;IOException&lt;/code&gt; might be thrown.\n\n &lt;li&gt; If such an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the\n stream is reset to a state such that all the bytes read since the\n most recent call to &lt;code&gt;mark&lt;/code&gt; (or since the start of the\n file, if &lt;code&gt;mark&lt;/code&gt; has not been called) will be resupplied\n to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method, followed by\n any bytes that otherwise would have been the next input data as of\n the time of the call to &lt;code&gt;reset&lt;/code&gt;. &lt;/ul&gt;\n</code></pre>\n\n<p> <li> If the method <code>markSupported</code> returns\n <code>false</code>, then:</li></p>\n\n<pre><code> &lt;ul&gt;&lt;li&gt; The call to &lt;code&gt;reset&lt;/code&gt; may throw an\n &lt;code&gt;IOException&lt;/code&gt;.\n\n &lt;li&gt; If an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the stream\n is reset to a fixed state that depends on the particular type of the\n input stream and how it was created. The bytes that will be supplied\n to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method depend on the\n particular type of the input stream. &lt;/ul&gt;&lt;/ul&gt;\n</code></pre>\n\n<p> <p>The method <code>reset</code> for class <code>InputStream</code>\n does nothing except throw an <code>IOException</code>.\n@exception IOException  if this stream has not been marked or if the\n               mark has been invalidated.\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.IOException\" rel=\"java.io.IOException\" class=\"docClass\">java.io.IOException</a></p>\n</div></div></div><div id='method-skip' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.io.InputStream' rel='java.io.InputStream' class='defined-in docClass'>java.io.InputStream</a><br/><a href='source/InputStream.html#java-io-InputStream-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips over and discards n bytes of data from this input\n stream. ...</div><div class='long'><p>Skips over and discards <code>n</code> bytes of data from this input\n stream. The <code>skip</code> method may, for a variety of reasons, end\n up skipping over some smaller number of bytes, possibly <code>0</code>.\n This may result from any of a number of conditions; reaching end of file\n before <code>n</code> bytes have been skipped is only one possibility.\n The actual number of bytes skipped is returned. If {@code n} is\n negative, the {@code skip} method for class {@code InputStream} always\n returns 0, and no bytes are skipped. Subclasses may handle the negative\n value differently.</p>\n\n<p> <p> The <code>skip</code> method of this class creates a\n byte array and then repeatedly reads into it until <code>n</code> bytes\n have been read or the end of the stream has been reached. Subclasses are\n encouraged to provide a more efficient implementation of this method.\n For instance, the implementation may depend on the ability to seek.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>the number of bytes to be skipped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes skipped.\n@exception IOException  if the stream does not support seek,\n                          or if some other I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-skipBytes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.ObjectInputStream'>java.io.ObjectInputStream</span><br/><a href='source/ObjectInputStream.html#java-io-ObjectInputStream-method-skipBytes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.ObjectInputStream-method-skipBytes' class='name expandable'>skipBytes</a>( <span class='pre'>len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips bytes. ...</div><div class='long'><p>Skips bytes.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the number of bytes to be skipped</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes skipped.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException If an I/O error has occurred.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});