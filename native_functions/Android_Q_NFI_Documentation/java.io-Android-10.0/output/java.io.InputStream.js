Ext.data.JsonP.java_io_InputStream({"tagname":"class","name":"java.io.InputStream","autodetected":{},"files":[{"filename":"InputStream.js","href":"InputStream.html#java-io-InputStream"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Arthur van Hoff","email":null}],"since":"JDK1.0","members":[{"name":"available","tagname":"method","owner":"java.io.InputStream","id":"method-available","meta":{}},{"name":"close","tagname":"method","owner":"java.io.InputStream","id":"method-close","meta":{}},{"name":"mark","tagname":"method","owner":"java.io.InputStream","id":"method-mark","meta":{}},{"name":"markSupported","tagname":"method","owner":"java.io.InputStream","id":"method-markSupported","meta":{}},{"name":"read","tagname":"method","owner":"java.io.InputStream","id":"method-read","meta":{}},{"name":"reset","tagname":"method","owner":"java.io.InputStream","id":"method-reset","meta":{}},{"name":"skip","tagname":"method","owner":"java.io.InputStream","id":"method-skip","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.io.InputStream","short_doc":"implements java.io.Closeable\n\nThis abstract class is the superclass of all classes representing\n an input stream of b...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":["java.io.ByteArrayInputStream","java.io.FileInputStream","java.io.FilterInputStream","java.io.ObjectInputStream","java.io.PipedInputStream","java.io.SequenceInputStream","java.io.StringBufferInputStream"],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>java.io.InputStream</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/java.io.ByteArrayInputStream' rel='java.io.ByteArrayInputStream' class='docClass'>java.io.ByteArrayInputStream</a></div><div class='dependency'><a href='#!/api/java.io.FileInputStream' rel='java.io.FileInputStream' class='docClass'>java.io.FileInputStream</a></div><div class='dependency'><a href='#!/api/java.io.FilterInputStream' rel='java.io.FilterInputStream' class='docClass'>java.io.FilterInputStream</a></div><div class='dependency'><a href='#!/api/java.io.ObjectInputStream' rel='java.io.ObjectInputStream' class='docClass'>java.io.ObjectInputStream</a></div><div class='dependency'><a href='#!/api/java.io.PipedInputStream' rel='java.io.PipedInputStream' class='docClass'>java.io.PipedInputStream</a></div><div class='dependency'><a href='#!/api/java.io.SequenceInputStream' rel='java.io.SequenceInputStream' class='docClass'>java.io.SequenceInputStream</a></div><div class='dependency'><a href='#!/api/java.io.StringBufferInputStream' rel='java.io.StringBufferInputStream' class='docClass'>java.io.StringBufferInputStream</a></div><h4>Files</h4><div class='dependency'><a href='source/InputStream.html#java-io-InputStream' target='_blank'>InputStream.js</a></div></pre><div class='doc-contents'><p>implements <a href=\"#!/api/java.io.Closeable\" rel=\"java.io.Closeable\" class=\"docClass\">java.io.Closeable</a></p>\n\n<p>This abstract class is the superclass of all classes representing\n an input stream of bytes.</p>\n\n<p> <p> Applications that need to define a subclass of <code>InputStream</code>\n must always provide a method that returns the next byte of input.</p>\n\n<p> @see     <a href=\"#!/api/java.io.BufferedInputStream\" rel=\"java.io.BufferedInputStream\" class=\"docClass\">java.io.BufferedInputStream</a>\n @see     <a href=\"#!/api/java.io.ByteArrayInputStream\" rel=\"java.io.ByteArrayInputStream\" class=\"docClass\">java.io.ByteArrayInputStream</a>\n @see     <a href=\"#!/api/java.io.DataInputStream\" rel=\"java.io.DataInputStream\" class=\"docClass\">java.io.DataInputStream</a>\n @see     <a href=\"#!/api/java.io.FilterInputStream\" rel=\"java.io.FilterInputStream\" class=\"docClass\">java.io.FilterInputStream</a>\n @see     <a href=\"#!/api/java.io.InputStream-method-read\" rel=\"java.io.InputStream-method-read\" class=\"docClass\">java.io.InputStream.read</a>()\n @see     <a href=\"#!/api/java.io.OutputStream\" rel=\"java.io.OutputStream\" class=\"docClass\">java.io.OutputStream</a>\n @see     <a href=\"#!/api/java.io.PushbackInputStream\" rel=\"java.io.PushbackInputStream\" class=\"docClass\">java.io.PushbackInputStream</a></p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-available' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.InputStream'>java.io.InputStream</span><br/><a href='source/InputStream.html#java-io-InputStream-method-available' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-available' class='name expandable'>available</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blockin...</div><div class='long'><p>Returns an estimate of the number of bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. The next invocation\n might be the same thread or another thread.  A single read or skip of this\n many bytes will not block, but may read or skip fewer bytes.</p>\n\n<p> <p> Note that while some implementations of {@code InputStream} will return\n the total number of bytes in the stream, many will not.  It is\n never correct to use the return value of this method to allocate\n a buffer intended to hold all data in this stream.</p>\n\n<p> <p> A subclass' implementation of this method may choose to throw an\n <a href=\"#!/api/java.io.IOException\" rel=\"java.io.IOException\" class=\"docClass\">java.io.IOException</a> if this input stream has been closed by\n invoking the <a href=\"#!/api/java.io.InputStream-method-close\" rel=\"java.io.InputStream-method-close\" class=\"docClass\">close</a>() method.</p>\n\n<p> <p> The {@code available} method for class {@code InputStream} always\n returns {@code 0}.</p>\n\n<p> <p> This method should be overridden by subclasses.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>an estimate of the number of bytes that can be read (or skipped\n             over) from this input stream without blocking or {@code 0} when\n             it reaches the end of the input stream.\n@exception IOException if an I/O error occurs.</p>\n</div></li></ul></div></div></div><div id='method-close' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.InputStream'>java.io.InputStream</span><br/><a href='source/InputStream.html#java-io-InputStream-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this input stream and releases any system resources associated\n with the stream. ...</div><div class='long'><p>Closes this input stream and releases any system resources associated\n with the stream.</p>\n\n<p> <p> The <code>close</code> method of <code>InputStream</code> does\n nothing.\n@exception IOException  if an I/O error occurs.</p>\n</div></div></div><div id='method-mark' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.InputStream'>java.io.InputStream</span><br/><a href='source/InputStream.html#java-io-InputStream-method-mark' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-mark' class='name expandable'>mark</a>( <span class='pre'>readlimit</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Marks the current position in this input stream. ...</div><div class='long'><p>Marks the current position in this input stream. A subsequent call to\n the <code>reset</code> method repositions this stream at the last marked\n position so that subsequent reads re-read the same bytes.</p>\n\n<p> <p> The <code>readlimit</code> arguments tells this input stream to\n allow that many bytes to be read before the mark position gets\n invalidated.</p>\n\n<p> <p> The general contract of <code>mark</code> is that, if the method\n <code>markSupported</code> returns <code>true</code>, the stream somehow\n remembers all the bytes read after the call to <code>mark</code> and\n stands ready to supply those same bytes again if and whenever the method\n <code>reset</code> is called.  However, the stream is not required to\n remember any data at all if more than <code>readlimit</code> bytes are\n read from the stream before <code>reset</code> is called.</p>\n\n<p> <p> Marking a closed stream should not have any effect on the stream.</p>\n\n<p> <p> The <code>mark</code> method of <code>InputStream</code> does\n nothing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>readlimit</span> : Number<div class='sub-desc'><p>the maximum limit of bytes that can be read before\n                      the mark position becomes invalid.\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul></div></div></div><div id='method-markSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.InputStream'>java.io.InputStream</span><br/><a href='source/InputStream.html#java-io-InputStream-method-markSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-markSupported' class='name expandable'>markSupported</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests if this input stream supports the mark and\n reset methods. ...</div><div class='long'><p>Tests if this input stream supports the <code>mark</code> and\n <code>reset</code> methods. Whether or not <code>mark</code> and\n <code>reset</code> are supported is an invariant property of a\n particular input stream instance. The <code>markSupported</code> method\n of <code>InputStream</code> returns <code>false</code>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if this stream instance supports the mark\n          and reset methods; <code>false</code> otherwise.\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.InputStream-method-reset\" rel=\"java.io.InputStream-method-reset\" class=\"docClass\">java.io.InputStream.reset</a>()</p>\n</div></li></ul></div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.InputStream'>java.io.InputStream</span><br/><a href='source/InputStream.html#java-io-InputStream-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-read' class='name expandable'>read</a>( <span class='pre'>b, off, len</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Reads up to len bytes of data from the input stream into\n an array of bytes. ...</div><div class='long'><p>Reads up to <code>len</code> bytes of data from the input stream into\n an array of bytes.  An attempt is made to read as many as\n <code>len</code> bytes, but a smaller number may be read.\n The number of bytes actually read is returned as an integer.</p>\n\n<p> <p> This method blocks until input data is available, end of file is\n detected, or an exception is thrown.</p>\n\n<p> <p> If <code>len</code> is zero, then no bytes are read and\n <code>0</code> is returned; otherwise, there is an attempt to read at\n least one byte. If no byte is available because the stream is at end of\n file, the value <code>-1</code> is returned; otherwise, at least one\n byte is read and stored into <code>b</code>.</p>\n\n<p> <p> The first byte read is stored into element <code>b[off]</code>, the\n next one into <code>b[off+1]</code>, and so on. The number of bytes read\n is, at most, equal to <code>len</code>. Let <i>k</i> be the number of\n bytes actually read; these bytes will be stored in elements\n <code>b[off]</code> through <code>b[off+</code><i>k</i><code>-1]</code>,\n leaving elements <code>b[off+</code><i>k</i><code>]</code> through\n <code>b[off+len-1]</code> unaffected.</p>\n\n<p> <p> In every case, elements <code>b[0]</code> through\n <code>b[off]</code> and elements <code>b[off+len]</code> through\n <code>b[b.length-1]</code> are unaffected.</p>\n\n<p> <p> The <code>read(b,</code> <code>off,</code> <code>len)</code> method\n for class <code>InputStream</code> simply calls the method\n <code>read()</code> repeatedly. If the first such call results in an\n <code>IOException</code>, that exception is returned from the call to\n the <code>read(b,</code> <code>off,</code> <code>len)</code> method.  If\n any subsequent call to <code>read()</code> results in a\n <code>IOException</code>, the exception is caught and treated as if it\n were end of file; the bytes read up to that point are stored into\n <code>b</code> and the number of bytes read before the exception\n occurred is returned. The default implementation of this method blocks\n until the requested amount of input data <code>len</code> has been read,\n end of file is detected, or an exception is thrown. Subclasses are encouraged\n to provide a more efficient implementation of this method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>b</span> : Object {byte[]}<div class='sub-desc'><p>the buffer into which the data is read.</p>\n</div></li><li><span class='pre'>off</span> : Number<div class='sub-desc'><p>the start offset in array <code>b</code>\n                   at which the data is written.</p>\n</div></li><li><span class='pre'>len</span> : Number<div class='sub-desc'><p>the maximum number of bytes to read.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             the stream has been reached.\n@exception IOException If the first byte cannot be read for any reason\n other than end of file, or if the input stream has been closed, or if\n some other I/O error occurs.\n@exception NullPointerException If <code>b</code> is <code>null</code>.\n@exception IndexOutOfBoundsException If <code>off</code> is negative,\n <code>len</code> is negative, or <code>len</code> is greater than\n <code>b.length - off</code>\n@see <a href=\"#!/api/java.io.InputStream-method-read\" rel=\"java.io.InputStream-method-read\" class=\"docClass\">java.io.InputStream.read</a>()</p>\n</div></li></ul></div></div></div><div id='method-reset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.InputStream'>java.io.InputStream</span><br/><a href='source/InputStream.html#java-io-InputStream-method-reset' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-reset' class='name expandable'>reset</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Repositions this stream to the position at the time the\n mark method was last called on this input stream. ...</div><div class='long'><p>Repositions this stream to the position at the time the\n <code>mark</code> method was last called on this input stream.</p>\n\n<p> <p> The general contract of <code>reset</code> is:</p>\n\n<p> <ul>\n <li> If the method <code>markSupported</code> returns\n <code>true</code>, then:</li></ul></p>\n\n<pre><code> &lt;ul&gt;&lt;li&gt; If the method &lt;code&gt;mark&lt;/code&gt; has not been called since\n the stream was created, or the number of bytes read from the stream\n since &lt;code&gt;mark&lt;/code&gt; was last called is larger than the argument\n to &lt;code&gt;mark&lt;/code&gt; at that last call, then an\n &lt;code&gt;IOException&lt;/code&gt; might be thrown.\n\n &lt;li&gt; If such an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the\n stream is reset to a state such that all the bytes read since the\n most recent call to &lt;code&gt;mark&lt;/code&gt; (or since the start of the\n file, if &lt;code&gt;mark&lt;/code&gt; has not been called) will be resupplied\n to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method, followed by\n any bytes that otherwise would have been the next input data as of\n the time of the call to &lt;code&gt;reset&lt;/code&gt;. &lt;/ul&gt;\n</code></pre>\n\n<p> <li> If the method <code>markSupported</code> returns\n <code>false</code>, then:</li></p>\n\n<pre><code> &lt;ul&gt;&lt;li&gt; The call to &lt;code&gt;reset&lt;/code&gt; may throw an\n &lt;code&gt;IOException&lt;/code&gt;.\n\n &lt;li&gt; If an &lt;code&gt;IOException&lt;/code&gt; is not thrown, then the stream\n is reset to a fixed state that depends on the particular type of the\n input stream and how it was created. The bytes that will be supplied\n to subsequent callers of the &lt;code&gt;read&lt;/code&gt; method depend on the\n particular type of the input stream. &lt;/ul&gt;&lt;/ul&gt;\n</code></pre>\n\n<p> <p>The method <code>reset</code> for class <code>InputStream</code>\n does nothing except throw an <code>IOException</code>.\n@exception IOException  if this stream has not been marked or if the\n               mark has been invalidated.\n@see <a href=\"#!/api/java.io.InputStream-method-mark\" rel=\"java.io.InputStream-method-mark\" class=\"docClass\">java.io.InputStream.mark</a>(int)\n@see <a href=\"#!/api/java.io.IOException\" rel=\"java.io.IOException\" class=\"docClass\">java.io.IOException</a></p>\n</div></div></div><div id='method-skip' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.io.InputStream'>java.io.InputStream</span><br/><a href='source/InputStream.html#java-io-InputStream-method-skip' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.io.InputStream-method-skip' class='name expandable'>skip</a>( <span class='pre'>n</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Skips over and discards n bytes of data from this input\n stream. ...</div><div class='long'><p>Skips over and discards <code>n</code> bytes of data from this input\n stream. The <code>skip</code> method may, for a variety of reasons, end\n up skipping over some smaller number of bytes, possibly <code>0</code>.\n This may result from any of a number of conditions; reaching end of file\n before <code>n</code> bytes have been skipped is only one possibility.\n The actual number of bytes skipped is returned. If {@code n} is\n negative, the {@code skip} method for class {@code InputStream} always\n returns 0, and no bytes are skipped. Subclasses may handle the negative\n value differently.</p>\n\n<p> <p> The <code>skip</code> method of this class creates a\n byte array and then repeatedly reads into it until <code>n</code> bytes\n have been read or the end of the stream has been reached. Subclasses are\n encouraged to provide a more efficient implementation of this method.\n For instance, the implementation may depend on the ability to seek.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>the number of bytes to be skipped.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the actual number of bytes skipped.\n@exception IOException  if the stream does not support seek,\n                          or if some other I/O error occurs.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});