Ext.data.JsonP.android_net_sip_SipManager({"tagname":"class","name":"android.net.sip.SipManager","autodetected":{},"files":[{"filename":"SipManager.js","href":"SipManager.html#android-net-sip-SipManager"}],"extends":"java.lang.Object","members":[{"name":"EXTRA_CALL_ID","tagname":"property","owner":"android.net.sip.SipManager","id":"property-EXTRA_CALL_ID","meta":{}},{"name":"EXTRA_OFFER_SD","tagname":"property","owner":"android.net.sip.SipManager","id":"property-EXTRA_OFFER_SD","meta":{}},{"name":"INCOMING_CALL_RESULT_CODE","tagname":"property","owner":"android.net.sip.SipManager","id":"property-INCOMING_CALL_RESULT_CODE","meta":{}},{"name":"close","tagname":"method","owner":"android.net.sip.SipManager","id":"method-close","meta":{}},{"name":"createSipSession","tagname":"method","owner":"android.net.sip.SipManager","id":"method-createSipSession","meta":{}},{"name":"getCallId","tagname":"method","owner":"android.net.sip.SipManager","id":"method-getCallId","meta":{}},{"name":"getOfferSessionDescription","tagname":"method","owner":"android.net.sip.SipManager","id":"method-getOfferSessionDescription","meta":{}},{"name":"getSessionFor","tagname":"method","owner":"android.net.sip.SipManager","id":"method-getSessionFor","meta":{}},{"name":"isApiSupported","tagname":"method","owner":"android.net.sip.SipManager","id":"method-isApiSupported","meta":{}},{"name":"isIncomingCallIntent","tagname":"method","owner":"android.net.sip.SipManager","id":"method-isIncomingCallIntent","meta":{}},{"name":"isOpened","tagname":"method","owner":"android.net.sip.SipManager","id":"method-isOpened","meta":{}},{"name":"isRegistered","tagname":"method","owner":"android.net.sip.SipManager","id":"method-isRegistered","meta":{}},{"name":"isSipWifiOnly","tagname":"method","owner":"android.net.sip.SipManager","id":"method-isSipWifiOnly","meta":{}},{"name":"isVoipSupported","tagname":"method","owner":"android.net.sip.SipManager","id":"method-isVoipSupported","meta":{}},{"name":"makeAudioCall","tagname":"method","owner":"android.net.sip.SipManager","id":"method-makeAudioCall","meta":{}},{"name":"newInstance","tagname":"method","owner":"android.net.sip.SipManager","id":"method-newInstance","meta":{}},{"name":"open","tagname":"method","owner":"android.net.sip.SipManager","id":"method-open","meta":{}},{"name":"register","tagname":"method","owner":"android.net.sip.SipManager","id":"method-register","meta":{}},{"name":"setRegistrationListener","tagname":"method","owner":"android.net.sip.SipManager","id":"method-setRegistrationListener","meta":{}},{"name":"takeAudioCall","tagname":"method","owner":"android.net.sip.SipManager","id":"method-takeAudioCall","meta":{}},{"name":"unregister","tagname":"method","owner":"android.net.sip.SipManager","id":"method-unregister","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-android.net.sip.SipManager","short_doc":"Provides APIs for SIP tasks, such as initiating SIP connections, and provides access to related\n SIP services. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>java.lang.Object<div class='subclass '><strong>android.net.sip.SipManager</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/SipManager.html#android-net-sip-SipManager' target='_blank'>SipManager.js</a></div></pre><div class='doc-contents'><p>Provides APIs for SIP tasks, such as initiating SIP connections, and provides access to related\n SIP services. This class is the starting point for any SIP actions. You can acquire an instance\n of it with <a href=\"#!/api/android.net.sip.SipManager-method-newInstance\" rel=\"android.net.sip.SipManager-method-newInstance\" class=\"docClass\">newInstance()</a>.</p>\n <p>The APIs in this class allows you to:</p>\n <ul>\n <li>Create a <a href=\"#!/api/android.net.sip.SipSession\" rel=\"android.net.sip.SipSession\" class=\"docClass\">android.net.sip.SipSession</a> to get ready for making calls or listen for incoming calls. See\n <a href=\"#!/api/android.net.sip.SipManager-method-createSipSession\" rel=\"android.net.sip.SipManager-method-createSipSession\" class=\"docClass\">createSipSession()</a> and <a href=\"#!/api/android.net.sip.SipManager-method-getSessionFor\" rel=\"android.net.sip.SipManager-method-getSessionFor\" class=\"docClass\">getSessionFor()</a>.</li>\n <li>Initiate and receive generic SIP calls or audio-only SIP calls. Generic SIP calls may\n be video, audio, or other, and are initiated with <a href=\"#!/api/android.net.sip.SipManager-method-open\" rel=\"android.net.sip.SipManager-method-open\" class=\"docClass\">open()</a>. Audio-only SIP calls\n should be handled with a <a href=\"#!/api/android.net.sip.SipAudioCall\" rel=\"android.net.sip.SipAudioCall\" class=\"docClass\">android.net.sip.SipAudioCall</a>, which you can acquire with <a href=\"#!/api/android.net.sip.SipManager-method-makeAudioCall\" rel=\"android.net.sip.SipManager-method-makeAudioCall\" class=\"docClass\">makeAudioCall()</a> and <a href=\"#!/api/android.net.sip.SipManager-method-takeAudioCall\" rel=\"android.net.sip.SipManager-method-takeAudioCall\" class=\"docClass\">takeAudioCall()</a>.</li>\n <li>Register and unregister with a SIP service provider, with\n      <a href=\"#!/api/android.net.sip.SipManager-method-register\" rel=\"android.net.sip.SipManager-method-register\" class=\"docClass\">register()</a> and <a href=\"#!/api/android.net.sip.SipManager-method-unregister\" rel=\"android.net.sip.SipManager-method-unregister\" class=\"docClass\">unregister()</a>.</li>\n <li>Verify session connectivity, with <a href=\"#!/api/android.net.sip.SipManager-method-isOpened\" rel=\"android.net.sip.SipManager-method-isOpened\" class=\"docClass\">isOpened()</a> and\n      <a href=\"#!/api/android.net.sip.SipManager-method-isRegistered\" rel=\"android.net.sip.SipManager-method-isRegistered\" class=\"docClass\">isRegistered()</a>.</li>\n </ul>\n <p class=\"note\"><strong>Note:</strong> Not all Android-powered devices support VOIP calls using\n SIP. You should always call <a href=\"#!/api/android.net.sip.SipManager-method-isVoipSupported\" rel=\"android.net.sip.SipManager-method-isVoipSupported\" class=\"docClass\">isVoipSupported()</a> to verify that the device supports VOIP calling and <a href=\"#!/api/android.net.sip.SipManager-method-isApiSupported\" rel=\"android.net.sip.SipManager-method-isApiSupported\" class=\"docClass\">isApiSupported()</a> to verify that the device supports\n the SIP APIs. Your application must also request the android.Manifest.permission.INTERNET and android.Manifest.permission.USE_SIP\n permissions.</p>\n\n<p> <div class=\"special reference\">\n <h3>Developer Guides</h3>\n <p>For more information about using SIP, read the\n <a href=\"{@docRoot}guide/topics/network/sip.html\">Session Initiation Protocol</a>\n developer guide.</p>\n </div></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-EXTRA_CALL_ID' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-property-EXTRA_CALL_ID' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-property-EXTRA_CALL_ID' class='name expandable'>EXTRA_CALL_ID</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Key to retrieve the call ID from an incoming call intent. ...</div><div class='long'><p>Key to retrieve the call ID from an incoming call intent.\n@see <a href=\"#!/api/android.net.sip.SipManager-method-open\" rel=\"android.net.sip.SipManager-method-open\" class=\"docClass\">open</a>(SipProfile, PendingIntent, SipRegistrationListener)</p>\n<p>Defaults to: <code>&quot;android:sipCallID&quot;</code></p></div></div></div><div id='property-EXTRA_OFFER_SD' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-property-EXTRA_OFFER_SD' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-property-EXTRA_OFFER_SD' class='name expandable'>EXTRA_OFFER_SD</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Key to retrieve the offered session description from an incoming call\nintent. ...</div><div class='long'><p>Key to retrieve the offered session description from an incoming call\nintent.\n@see <a href=\"#!/api/android.net.sip.SipManager-method-open\" rel=\"android.net.sip.SipManager-method-open\" class=\"docClass\">open</a>(SipProfile, PendingIntent, SipRegistrationListener)</p>\n<p>Defaults to: <code>&quot;android:sipOfferSD&quot;</code></p></div></div></div><div id='property-INCOMING_CALL_RESULT_CODE' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-property-INCOMING_CALL_RESULT_CODE' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-property-INCOMING_CALL_RESULT_CODE' class='name expandable'>INCOMING_CALL_RESULT_CODE</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The result code to be sent back with the incoming call\nPendingIntent. ...</div><div class='long'><p>The result code to be sent back with the incoming call\nPendingIntent.\n@see <a href=\"#!/api/android.net.sip.SipManager-method-open\" rel=\"android.net.sip.SipManager-method-open\" class=\"docClass\">open</a>(SipProfile, PendingIntent, SipRegistrationListener)</p>\n<p>Defaults to: <code>&quot;101&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-close' class='name expandable'>close</a>( <span class='pre'>localProfileUri</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes the specified profile to not make/receive calls. ...</div><div class='long'><p>Closes the specified profile to not make/receive calls. All the resources\n that were allocated to the profile are also released.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfileUri</span> : String<div class='sub-desc'><p>the URI of the profile to close</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if calling the SIP service results in an error</p>\n</div></li></ul></div></div></div><div id='method-createSipSession' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-createSipSession' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-createSipSession' class='name expandable'>createSipSession</a>( <span class='pre'>localProfile, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a android.net.sip.SipSession with the specified profile. ...</div><div class='long'><p>Creates a <a href=\"#!/api/android.net.sip.SipSession\" rel=\"android.net.sip.SipSession\" class=\"docClass\">android.net.sip.SipSession</a> with the specified profile. Use other\n methods, if applicable, instead of interacting with <a href=\"#!/api/android.net.sip.SipSession\" rel=\"android.net.sip.SipSession\" class=\"docClass\">android.net.sip.SipSession</a>\n directly.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfile</span> : Object {SipProfile}<div class='sub-desc'><p>the SIP profile the session is associated with</p>\n</div></li><li><span class='pre'>listener</span> : Object {SipSession.Listener}<div class='sub-desc'><p>to listen to SIP session events</p>\n</div></li></ul></div></div></div><div id='method-getCallId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-getCallId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-getCallId' class='name expandable'>getCallId</a>( <span class='pre'>incomingCallIntent</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the call ID from the specified incoming call broadcast intent. ...</div><div class='long'><p>Gets the call ID from the specified incoming call broadcast intent.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>incomingCallIntent</span> : Object {Intent}<div class='sub-desc'><p>the incoming call broadcast intent</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the call ID or null if the intent does not contain it</p>\n</div></li></ul></div></div></div><div id='method-getOfferSessionDescription' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-getOfferSessionDescription' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-getOfferSessionDescription' class='name expandable'>getOfferSessionDescription</a>( <span class='pre'>incomingCallIntent</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the offer session description from the specified incoming call\n broadcast intent. ...</div><div class='long'><p>Gets the offer session description from the specified incoming call\n broadcast intent.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>incomingCallIntent</span> : Object {Intent}<div class='sub-desc'><p>the incoming call broadcast intent</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the offer session description or null if the intent does not\n      have it</p>\n</div></li></ul></div></div></div><div id='method-getSessionFor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-getSessionFor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-getSessionFor' class='name expandable'>getSessionFor</a>( <span class='pre'>incomingCallIntent</span> ) : Object {android.net.sip.SipSession}<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the android.net.sip.SipSession that handles the incoming call. ...</div><div class='long'><p>Gets the <a href=\"#!/api/android.net.sip.SipSession\" rel=\"android.net.sip.SipSession\" class=\"docClass\">android.net.sip.SipSession</a> that handles the incoming call. For audio\n calls, consider to use <a href=\"#!/api/android.net.sip.SipAudioCall\" rel=\"android.net.sip.SipAudioCall\" class=\"docClass\">android.net.sip.SipAudioCall</a> to handle the incoming call.\n See <a href=\"#!/api/android.net.sip.SipManager-method-takeAudioCall\" rel=\"android.net.sip.SipManager-method-takeAudioCall\" class=\"docClass\">takeAudioCall</a>. Note that the method may be called only once\n for the same intent. For subsequent calls on the same intent, the method\n returns null.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>incomingCallIntent</span> : Object {Intent}<div class='sub-desc'><p>the incoming call broadcast intent</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.sip.SipSession}</span><div class='sub-desc'><p>the session object that handles the incoming call</p>\n</div></li></ul></div></div></div><div id='method-isApiSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-isApiSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-isApiSupported' class='name expandable'>isApiSupported</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the SIP API is supported by the system. ...</div><div class='long'><p>Returns true if the SIP API is supported by the system.</p>\n</div></div></div><div id='method-isIncomingCallIntent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-isIncomingCallIntent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-isIncomingCallIntent' class='name expandable'>isIncomingCallIntent</a>( <span class='pre'>intent</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the intent is an incoming call broadcast intent. ...</div><div class='long'><p>Checks if the intent is an incoming call broadcast intent.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>intent</span> : Object {Intent}<div class='sub-desc'><p>the intent in question</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the intent is an incoming call broadcast intent</p>\n</div></li></ul></div></div></div><div id='method-isOpened' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-isOpened' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-isOpened' class='name expandable'>isOpened</a>( <span class='pre'>localProfileUri</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the specified profile is opened in the SIP service for\n making and/or receiving calls. ...</div><div class='long'><p>Checks if the specified profile is opened in the SIP service for\n making and/or receiving calls.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfileUri</span> : String<div class='sub-desc'><p>the URI of the profile in question</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the profile is enabled to receive calls</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if calling the SIP service results in an error</p>\n</div></li></ul></div></div></div><div id='method-isRegistered' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-isRegistered' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-isRegistered' class='name expandable'>isRegistered</a>( <span class='pre'>localProfileUri</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Checks if the SIP service has successfully registered the profile to the\n SIP provider (specified in the profile) for...</div><div class='long'><p>Checks if the SIP service has successfully registered the profile to the\n SIP provider (specified in the profile) for receiving calls. Returning\n true from this method also implies the profile is opened\n (<a href=\"#!/api/android.net.sip.SipManager-method-isOpened\" rel=\"android.net.sip.SipManager-method-isOpened\" class=\"docClass\">isOpened</a>).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfileUri</span> : String<div class='sub-desc'><p>the URI of the profile in question</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the profile is registered to the SIP provider; false if\n        the profile has not been opened in the SIP service or the SIP\n        service has not yet successfully registered the profile to the SIP\n        provider</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if calling the SIP service results in an error</p>\n</div></li></ul></div></div></div><div id='method-isSipWifiOnly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-isSipWifiOnly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-isSipWifiOnly' class='name expandable'>isSipWifiOnly</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if SIP is only available on WIFI. ...</div><div class='long'><p>Returns true if SIP is only available on WIFI.</p>\n</div></div></div><div id='method-isVoipSupported' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-isVoipSupported' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-isVoipSupported' class='name expandable'>isVoipSupported</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the system supports SIP-based VOIP API. ...</div><div class='long'><p>Returns true if the system supports SIP-based VOIP API.</p>\n</div></div></div><div id='method-makeAudioCall' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-makeAudioCall' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-makeAudioCall' class='name expandable'>makeAudioCall</a>( <span class='pre'>localProfileUri, peerProfileUri, listener, timeout</span> ) : Object {android.net.sip.SipAudioCall}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a android.net.sip.SipAudioCall to make an audio call. ...</div><div class='long'><p>Creates a <a href=\"#!/api/android.net.sip.SipAudioCall\" rel=\"android.net.sip.SipAudioCall\" class=\"docClass\">android.net.sip.SipAudioCall</a> to make an audio call. The attempt will be\n timed out if the call is not established within {@code timeout} seconds\n and\n onError(SipAudioCall, android.net.sip.SipErrorCode.TIME_OUT, String)\n will be called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfileUri</span> : String<div class='sub-desc'><p>URI of the SIP profile to make the call from</p>\n</div></li><li><span class='pre'>peerProfileUri</span> : String<div class='sub-desc'><p>URI of the SIP profile to make the call to</p>\n</div></li><li><span class='pre'>listener</span> : Object {SipAudioCall.Listener}<div class='sub-desc'><p>to listen to the call events from SipAudioCall;\n      can be null</p>\n</div></li><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the timeout value in seconds. Default value (defined by\n        SIP protocol) is used if {@code timeout} is zero or negative.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.sip.SipAudioCall}</span><div class='sub-desc'><p>a SipAudioCall object</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if calling the SIP service results in an error or\n      VOIP API is not supported by the device\n@see SipAudioCall.Listener#onError\n@see <a href=\"#!/api/android.net.sip.SipManager-method-isVoipSupported\" rel=\"android.net.sip.SipManager-method-isVoipSupported\" class=\"docClass\">isVoipSupported</a></p>\n</div></li></ul></div></div></div><div id='method-newInstance' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-newInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-newInstance' class='name expandable'>newInstance</a>( <span class='pre'>context</span> ) : Object {android.net.sip.SipManager}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a manager instance. ...</div><div class='long'><p>Creates a manager instance. Returns null if SIP API is not supported.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>context</span> : Object {Context}<div class='sub-desc'><p>application context for creating the manager object</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.sip.SipManager}</span><div class='sub-desc'><p>the manager instance or null if SIP API is not supported</p>\n</div></li></ul></div></div></div><div id='method-open' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-open' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-open' class='name expandable'>open</a>( <span class='pre'>localProfile, incomingCallPendingIntent, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Opens the profile for making calls and/or receiving generic SIP calls. ...</div><div class='long'><p>Opens the profile for making calls and/or receiving generic SIP calls. The caller may\n make subsequent calls through <a href=\"#!/api/android.net.sip.SipManager-method-makeAudioCall\" rel=\"android.net.sip.SipManager-method-makeAudioCall\" class=\"docClass\">makeAudioCall</a>. If the\n auto-registration option is enabled in the profile, the SIP service\n will register the profile to the corresponding SIP provider periodically\n in order to receive calls from the provider. When the SIP service\n receives a new call, it will send out an intent with the provided action\n string. The intent contains a call ID extra and an offer session\n description string extra. Use <a href=\"#!/api/android.net.sip.SipManager-method-getCallId\" rel=\"android.net.sip.SipManager-method-getCallId\" class=\"docClass\">getCallId</a> and\n <a href=\"#!/api/android.net.sip.SipManager-method-getOfferSessionDescription\" rel=\"android.net.sip.SipManager-method-getOfferSessionDescription\" class=\"docClass\">getOfferSessionDescription</a> to retrieve those extras.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfile</span> : Object {SipProfile}<div class='sub-desc'><p>the SIP profile to receive incoming calls for</p>\n</div></li><li><span class='pre'>incomingCallPendingIntent</span> : Object {PendingIntent}<div class='sub-desc'><p>When an incoming call is received, the\n      SIP service will call\n      int, Intent) to send back the\n      intent to the caller with <a href=\"#!/api/android.net.sip.SipManager-property-INCOMING_CALL_RESULT_CODE\" rel=\"android.net.sip.SipManager-property-INCOMING_CALL_RESULT_CODE\" class=\"docClass\">INCOMING_CALL_RESULT_CODE</a> as the\n      result code and the intent to fill in the call ID and session\n      description information. It cannot be null.</p>\n</div></li><li><span class='pre'>listener</span> : Object {SipRegistrationListener}<div class='sub-desc'><p>to listen to registration events; can be null\n@see <a href=\"#!/api/android.net.sip.SipManager-method-getCallId\" rel=\"android.net.sip.SipManager-method-getCallId\" class=\"docClass\">getCallId</a>\n@see <a href=\"#!/api/android.net.sip.SipManager-method-getOfferSessionDescription\" rel=\"android.net.sip.SipManager-method-getOfferSessionDescription\" class=\"docClass\">getOfferSessionDescription</a>\n@see <a href=\"#!/api/android.net.sip.SipManager-method-takeAudioCall\" rel=\"android.net.sip.SipManager-method-takeAudioCall\" class=\"docClass\">takeAudioCall</a></p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if {@code incomingCallPendingIntent} is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if the profile contains incorrect settings or\n      calling the SIP service results in an error\n@see <a href=\"#!/api/android.net.sip.SipManager-method-isIncomingCallIntent\" rel=\"android.net.sip.SipManager-method-isIncomingCallIntent\" class=\"docClass\">isIncomingCallIntent</a>\n@see <a href=\"#!/api/android.net.sip.SipManager-method-getCallId\" rel=\"android.net.sip.SipManager-method-getCallId\" class=\"docClass\">getCallId</a>\n@see <a href=\"#!/api/android.net.sip.SipManager-method-getOfferSessionDescription\" rel=\"android.net.sip.SipManager-method-getOfferSessionDescription\" class=\"docClass\">getOfferSessionDescription</a></p>\n</div></li></ul></div></div></div><div id='method-register' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-register' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-register' class='name expandable'>register</a>( <span class='pre'>localProfile, expiryTime, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Manually registers the profile to the corresponding SIP provider for\n receiving calls. ...</div><div class='long'><p>Manually registers the profile to the corresponding SIP provider for\n receiving calls.\n PendingIntent, android.net.sip.SipRegistrationListener) is\n still needed to be called at least once in order for the SIP service to\n notify the caller with the android.app.PendingIntent when an incoming call is\n received.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfile</span> : Object {SipProfile}<div class='sub-desc'><p>the SIP profile to register with</p>\n</div></li><li><span class='pre'>expiryTime</span> : Number<div class='sub-desc'><p>registration expiration time (in seconds)</p>\n</div></li><li><span class='pre'>listener</span> : Object {SipRegistrationListener}<div class='sub-desc'><p>to listen to the registration events</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if calling the SIP service results in an error</p>\n</div></li></ul></div></div></div><div id='method-setRegistrationListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-setRegistrationListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-setRegistrationListener' class='name expandable'>setRegistrationListener</a>( <span class='pre'>localProfileUri, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the listener to listen to registration events. ...</div><div class='long'><p>Sets the listener to listen to registration events. No effect if the\n profile has not been opened to receive calls (see\n PendingIntent, android.net.sip.SipRegistrationListener)).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfileUri</span> : String<div class='sub-desc'><p>the URI of the profile</p>\n</div></li><li><span class='pre'>listener</span> : Object {SipRegistrationListener}<div class='sub-desc'><p>to listen to registration events; can be null</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if calling the SIP service results in an error</p>\n</div></li></ul></div></div></div><div id='method-takeAudioCall' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-takeAudioCall' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-takeAudioCall' class='name expandable'>takeAudioCall</a>( <span class='pre'>incomingCallIntent, listener</span> ) : Object {android.net.sip.SipAudioCall}<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a android.net.sip.SipAudioCall to take an incoming call. ...</div><div class='long'><p>Creates a <a href=\"#!/api/android.net.sip.SipAudioCall\" rel=\"android.net.sip.SipAudioCall\" class=\"docClass\">android.net.sip.SipAudioCall</a> to take an incoming call. Before the call\n is returned, the listener will receive a\n <a href=\"#!/api/android.net.sip.SipAudioCall.Listener-method-onRinging\" rel=\"android.net.sip.SipAudioCall.Listener-method-onRinging\" class=\"docClass\">android.net.sip.SipAudioCall.Listener.onRinging</a>\n callback.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>incomingCallIntent</span> : Object {Intent}<div class='sub-desc'><p>the incoming call broadcast intent</p>\n</div></li><li><span class='pre'>listener</span> : Object {SipAudioCall.Listener}<div class='sub-desc'><p>to listen to the call events from SipAudioCall;\n      can be null</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {android.net.sip.SipAudioCall}</span><div class='sub-desc'><p>a SipAudioCall object</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if calling the SIP service results in an error</p>\n</div></li></ul></div></div></div><div id='method-unregister' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='android.net.sip.SipManager'>android.net.sip.SipManager</span><br/><a href='source/SipManager.html#android-net-sip-SipManager-method-unregister' target='_blank' class='view-source'>view source</a></div><a href='#!/api/android.net.sip.SipManager-method-unregister' class='name expandable'>unregister</a>( <span class='pre'>localProfile, listener</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Manually unregisters the profile from the corresponding SIP provider for\n stop receiving further calls. ...</div><div class='long'><p>Manually unregisters the profile from the corresponding SIP provider for\n stop receiving further calls. This may interference with the auto\n registration process in the SIP service if the auto-registration option\n in the profile is enabled.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>localProfile</span> : Object {SipProfile}<div class='sub-desc'><p>the SIP profile to register with</p>\n</div></li><li><span class='pre'>listener</span> : Object {SipRegistrationListener}<div class='sub-desc'><p>to listen to the registration events</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SipException if calling the SIP service results in an error</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});