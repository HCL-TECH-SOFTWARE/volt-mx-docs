Ext.data.JsonP.javax_xml_transform_Templates({"tagname":"class","name":"javax.xml.transform.Templates","autodetected":{},"files":[{"filename":"Templates.js","href":"Templates.html#javax-xml-transform-Templates"}],"members":[{"name":"getOutputProperties","tagname":"method","owner":"javax.xml.transform.Templates","id":"method-getOutputProperties","meta":{}},{"name":"newTransformer","tagname":"method","owner":"javax.xml.transform.Templates","id":"method-newTransformer","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-javax.xml.transform.Templates","short_doc":"An object that implements this interface is the runtime representation of processed\n transformation instructions. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Templates.html#javax-xml-transform-Templates' target='_blank'>Templates.js</a></div></pre><div class='doc-contents'><p>An object that implements this interface is the runtime representation of processed\n transformation instructions.</p>\n\n<p> <p>Templates must be thread-safe for a given instance\n over multiple threads running concurrently, and may\n be used multiple times in a given session.</p></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getOutputProperties' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.xml.transform.Templates'>javax.xml.transform.Templates</span><br/><a href='source/Templates.html#javax-xml-transform-Templates-method-getOutputProperties' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.xml.transform.Templates-method-getOutputProperties' class='name expandable'>getOutputProperties</a>( <span class='pre'></span> ) : Object {java.util.Properties}<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the properties corresponding to the effective xsl:output element. ...</div><div class='long'><p>Get the properties corresponding to the effective xsl:output element.\n The object returned will\n be a clone of the internal values. Accordingly, it can be mutated\n without mutating the Templates object, and then handed in to\n <a href=\"#!/api/javax.xml.transform.Transformer-method-setOutputProperties\" rel=\"javax.xml.transform.Transformer-method-setOutputProperties\" class=\"docClass\">javax.xml.transform.Transformer.setOutputProperties</a>.</p>\n\n<p> <p>The properties returned should contain properties set by the stylesheet,\n and these properties are \"defaulted\" by default properties specified by\n <a href=\"http://www.w3.org/TR/xslt#output\">section 16 of the\n XSL Transformations (XSLT) W3C Recommendation</a>.  The properties that\n were specifically set by the stylesheet should be in the base\n Properties list, while the XSLT default properties that were not\n specifically set should be in the \"default\" Properties list.  Thus,\n getOutputProperties().getProperty(String key) will obtain any\n property in that was set by the stylesheet, <em>or</em> the default\n properties, while\n getOutputProperties().get(String key) will only retrieve properties\n that were explicitly set in the stylesheet.</p></p>\n\n<p> <p>For XSLT,\n <a href=\"http://www.w3.org/TR/xslt#attribute-value-templates\">Attribute\n Value Templates</a> attribute values will\n be returned unexpanded (since there is no context at this point).  The\n namespace prefixes inside Attribute Value Templates will be unexpanded,\n so that they remain valid XPath values.</p></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Properties}</span><div class='sub-desc'><p>A Properties object, never null.</p>\n</div></li></ul></div></div></div><div id='method-newTransformer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='javax.xml.transform.Templates'>javax.xml.transform.Templates</span><br/><a href='source/Templates.html#javax-xml-transform-Templates-method-newTransformer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/javax.xml.transform.Templates-method-newTransformer' class='name expandable'>newTransformer</a>( <span class='pre'></span> ) : Object {javax.xml.transform.Transformer}<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new transformation context for this Templates object. ...</div><div class='long'><p>Create a new transformation context for this Templates object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {javax.xml.transform.Transformer}</span><div class='sub-desc'><p>A valid non-null instance of a Transformer.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>TransformerConfigurationException if a Transformer can not be created.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});