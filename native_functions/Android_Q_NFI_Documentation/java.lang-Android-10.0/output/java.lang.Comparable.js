Ext.data.JsonP.java_lang_Comparable({"tagname":"class","name":"java.lang.Comparable","autodetected":{},"files":[{"filename":"Comparable.js","href":"Comparable.html#java-lang-Comparable"}],"params":[{"tagname":"params","doc":"<p><T> the type of objects that this object may be compared to</T></p>\n\n<p> @see java.util.Comparator</p>\n"}],"author":[{"tagname":"author","name":"Josh Bloch","email":null}],"since":"1.2","members":[{"name":"compareTo","tagname":"method","owner":"java.lang.Comparable","id":"method-compareTo","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.Comparable","short_doc":"This interface imposes a total ordering on the objects of each class that\n implements it. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Comparable.html#java-lang-Comparable' target='_blank'>Comparable.js</a></div></pre><div class='doc-contents'><p>This interface imposes a total ordering on the objects of each class that\n implements it.  This ordering is referred to as the class's <i>natural\n ordering</i>, and the class's <tt>compareTo</tt> method is referred to as\n its <i>natural comparison method</i>.<p></p>\n\n<p> Lists (and arrays) of objects that implement this interface can be sorted\n automatically by Collections.sort (and\n Arrays.sort).  Objects that implement this\n interface can be used as keys in a {@linkplain SortedMap sorted map} or as\n elements in a {@linkplain SortedSet sorted set}, without the need to\n specify a {@linkplain Comparator comparator}.<p></p>\n\n<p> The natural ordering for a class <tt>C</tt> is said to be <i>consistent\n with equals</i> if and only if <tt>e1.compareTo(e2) == 0</tt> has\n the same boolean value as <tt>e1.equals(e2)</tt> for every\n <tt>e1</tt> and <tt>e2</tt> of class <tt>C</tt>.  Note that <tt>null</tt>\n is not an instance of any class, and <tt>e.compareTo(null)</tt> should\n throw a <tt>NullPointerException</tt> even though <tt>e.equals(null)</tt>\n returns <tt>false</tt>.<p></p>\n\n<p> It is strongly recommended (though not required) that natural orderings be\n consistent with equals.  This is so because sorted sets (and sorted maps)\n without explicit comparators behave \"strangely\" when they are used with\n elements (or keys) whose natural ordering is inconsistent with equals.  In\n particular, such a sorted set (or sorted map) violates the general contract\n for set (or map), which is defined in terms of the <tt>equals</tt>\n method.<p></p>\n\n<p> For example, if one adds two keys <tt>a</tt> and <tt>b</tt> such that\n {@code (!a.equals(b) &amp;&amp; a.compareTo(b) == 0)} to a sorted\n set that does not use an explicit comparator, the second <tt>add</tt>\n operation returns false (and the size of the sorted set does not increase)\n because <tt>a</tt> and <tt>b</tt> are equivalent from the sorted set's\n perspective.<p></p>\n\n<p> Virtually all Java core classes that implement <tt>Comparable</tt> have natural\n orderings that are consistent with equals.  One exception is\n <tt>java.math.BigDecimal</tt>, whose natural ordering equates\n <tt>BigDecimal</tt> objects with equal values and different precisions\n (such as 4.0 and 4.00).<p></p>\n\n<p> For the mathematically inclined, the <i>relation</i> that defines\n the natural ordering on a given class C is:</p>\n\n<pre>       {(x, y) such that x.compareTo(y) &lt;= 0}.\n </pre>\n\n\n<p> The <i>quotient</i> for this total order is:</p>\n\n<pre>       {(x, y) such that x.compareTo(y) == 0}.\n </pre>\n\n\n<p> It follows immediately from the contract for <tt>compareTo</tt> that the\n quotient is an <i>equivalence relation</i> on <tt>C</tt>, and that the\n natural ordering is a <i>total order</i> on <tt>C</tt>.  When we say that a\n class's natural ordering is <i>consistent with equals</i>, we mean that the\n quotient for the natural ordering is the equivalence relation defined by\n the class's equals(java.lang.Object) method:</p>\n\n<pre>     {(x, y) such that x.equals(y)}. </pre>\n\n\n<p><p></p>\n\n<p> This interface is a member of the\n <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/collections/index.html\">\n Java Collections Framework</a>.</p>\n        <p>Available since: <b>1.2</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : <div class='sub-desc'><p><T> the type of objects that this object may be compared to</T></p>\n\n<p> @see java.util.Comparator</p>\n</div></li></ul></div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-compareTo' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Comparable'>java.lang.Comparable</span><br/><a href='source/Comparable.html#java-lang-Comparable-method-compareTo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Comparable-method-compareTo' class='name expandable'>compareTo</a>( <span class='pre'>o</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Compares this object with the specified object for order. ...</div><div class='long'><p>Compares this object with the specified object for order.  Returns a\n negative integer, zero, or a positive integer as this object is less\n than, equal to, or greater than the specified object.</p>\n\n<p> <p>The implementor must ensure <tt>sgn(x.compareTo(y)) ==\n -sgn(y.compareTo(x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This\n implies that <tt>x.compareTo(y)</tt> must throw an exception iff\n <tt>y.compareTo(x)</tt> throws an exception.)</p>\n\n<p> <p>The implementor must also ensure that the relation is transitive:\n <tt>(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)</tt> implies\n <tt>x.compareTo(z)&gt;0</tt>.</p>\n\n<p> <p>Finally, the implementor must ensure that <tt>x.compareTo(y)==0</tt>\n implies that <tt>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</tt>, for\n all <tt>z</tt>.</p>\n\n<p> <p>It is strongly recommended, but <i>not</i> strictly required that\n <tt>(x.compareTo(y)==0) == (x.equals(y))</tt>.  Generally speaking, any\n class that implements the <tt>Comparable</tt> interface and violates\n this condition should clearly indicate this fact.  The recommended\n language is \"Note: this class has a natural ordering that is\n inconsistent with equals.\"</p>\n\n<p> <p>In the foregoing description, the notation\n <tt>sgn(</tt><i>expression</i><tt>)</tt> designates the mathematical\n <i>signum</i> function, which is defined to return one of <tt>-1</tt>,\n <tt>0</tt>, or <tt>1</tt> according to whether the value of\n <i>expression</i> is negative, zero or positive.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object {Object}<div class='sub-desc'><p>the object to be compared.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a negative integer, zero, or a positive integer as this object\n          is less than, equal to, or greater than the specified object.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if the specified object is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>ClassCastException if the specified object's type prevents it\n         from being compared to this object.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});