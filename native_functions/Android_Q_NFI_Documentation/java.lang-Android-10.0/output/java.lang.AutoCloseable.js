Ext.data.JsonP.java_lang_AutoCloseable({"tagname":"class","name":"java.lang.AutoCloseable","autodetected":{},"files":[{"filename":"AutoCloseable.js","href":"AutoCloseable.html#java-lang-AutoCloseable"}],"author":[{"tagname":"author","name":"Josh Bloch","email":null}],"since":"1.7","members":[{"name":"close","tagname":"method","owner":"java.lang.AutoCloseable","id":"method-close","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.AutoCloseable","short_doc":"An object that may hold resources (such as file or socket handles)\n until it is closed. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/AutoCloseable.html#java-lang-AutoCloseable' target='_blank'>AutoCloseable.js</a></div></pre><div class='doc-contents'><p>An object that may hold resources (such as file or socket handles)\n until it is closed. The <a href=\"#!/api/java.lang.AutoCloseable-method-close\" rel=\"java.lang.AutoCloseable-method-close\" class=\"docClass\">close</a>() method of an {@code AutoCloseable}\n object is called automatically when exiting a {@code\n try}-with-resources block for which the object has been declared in\n the resource specification header. This construction ensures prompt\n release, avoiding resource exhaustion exceptions and errors that\n may otherwise occur.</p>\n\n<p> @apiNote\n <p>It is possible, and in fact common, for a base class to\n implement AutoCloseable even though not all of its subclasses or\n instances will hold releasable resources.  For code that must operate\n in complete generality, or when it is known that the {@code AutoCloseable}\n instance requires resource release, it is recommended to use {@code\n try}-with-resources constructions. However, when using facilities such as\n java.util.stream.Stream that support both I/O-based and\n non-I/O-based forms, {@code try}-with-resources blocks are in\n general unnecessary when using non-I/O-based forms.</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-close' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.AutoCloseable'>java.lang.AutoCloseable</span><br/><a href='source/AutoCloseable.html#java-lang-AutoCloseable-method-close' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.AutoCloseable-method-close' class='name expandable'>close</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Closes this resource, relinquishing any underlying resources. ...</div><div class='long'><p>Closes this resource, relinquishing any underlying resources.\n This method is invoked automatically on objects managed by the\n {@code try}-with-resources statement.</p>\n\n<p> <p>While this interface method is declared to throw {@code\n Exception}, implementers are <em>strongly</em> encouraged to\n declare concrete implementations of the {@code close} method to\n throw more specific exceptions, or to throw no exception at all\n if the close operation cannot fail.</p>\n\n<p> <p> Cases where the close operation may fail require careful\n attention by implementers. It is strongly advised to relinquish\n the underlying resources and to internally <em>mark</em> the\n resource as closed, prior to throwing the exception. The {@code\n close} method is unlikely to be invoked more than once and so\n this ensures that the resources are released in a timely manner.\n Furthermore it reduces problems that could arise when the resource\n wraps, or is wrapped, by another resource.</p>\n\n<p> <p><em>Implementers of this interface are also strongly advised\n to not have the {@code close} method throw <a href=\"#!/api/java.lang.InterruptedException\" rel=\"java.lang.InterruptedException\" class=\"docClass\">java.lang.InterruptedException</a>.</em></p>\n\n<p> This exception interacts with a thread's interrupted status,\n and runtime misbehavior is likely to occur if an {@code\n InterruptedException} is {@linkplain <a href=\"#!/api/java.lang.Throwable-method-addSuppressed\" rel=\"java.lang.Throwable-method-addSuppressed\" class=\"docClass\">java.lang.Throwable.addSuppressed</a>\n suppressed}.</p>\n\n<p> More generally, if it would cause problems for an\n exception to be suppressed, the {@code AutoCloseable.close}\n method should not throw it.</p>\n\n<p> <p>Note that unlike the close\n method of java.io.Closeable, this {@code close} method\n is <em>not</em> required to be idempotent.  In other words,\n calling this {@code close} method more than once may have some\n visible side effect, unlike {@code Closeable.close} which is\n required to have no effect if called more than once.</p>\n\n<p> However, implementers of this interface are strongly encouraged\n to make their {@code close} methods idempotent.</p>\n<h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Exception if this resource cannot be closed</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});