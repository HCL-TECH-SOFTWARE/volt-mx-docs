Ext.data.JsonP.java_lang_StrictMath({"tagname":"class","name":"java.lang.StrictMath","autodetected":{},"files":[{"filename":"StrictMath.js","href":"StrictMath.html#java-lang-StrictMath"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"unascribed","email":null},{"tagname":"author","name":"Joseph D. Darcy","email":null}],"since":"1.3","members":[{"name":"E","tagname":"property","owner":"java.lang.StrictMath","id":"property-E","meta":{}},{"name":"PI","tagname":"property","owner":"java.lang.StrictMath","id":"property-PI","meta":{}},{"name":"IEEEremainder","tagname":"method","owner":"java.lang.StrictMath","id":"method-IEEEremainder","meta":{}},{"name":"abs","tagname":"method","owner":"java.lang.StrictMath","id":"method-abs","meta":{}},{"name":"acos","tagname":"method","owner":"java.lang.StrictMath","id":"method-acos","meta":{}},{"name":"addExact","tagname":"method","owner":"java.lang.StrictMath","id":"method-addExact","meta":{}},{"name":"asin","tagname":"method","owner":"java.lang.StrictMath","id":"method-asin","meta":{}},{"name":"atan","tagname":"method","owner":"java.lang.StrictMath","id":"method-atan","meta":{}},{"name":"atan2","tagname":"method","owner":"java.lang.StrictMath","id":"method-atan2","meta":{}},{"name":"cbrt","tagname":"method","owner":"java.lang.StrictMath","id":"method-cbrt","meta":{}},{"name":"ceil","tagname":"method","owner":"java.lang.StrictMath","id":"method-ceil","meta":{}},{"name":"copySign","tagname":"method","owner":"java.lang.StrictMath","id":"method-copySign","meta":{}},{"name":"cos","tagname":"method","owner":"java.lang.StrictMath","id":"method-cos","meta":{}},{"name":"cosh","tagname":"method","owner":"java.lang.StrictMath","id":"method-cosh","meta":{}},{"name":"equals","tagname":"method","owner":"java.lang.Object","id":"method-equals","meta":{}},{"name":"exp","tagname":"method","owner":"java.lang.StrictMath","id":"method-exp","meta":{}},{"name":"expm1","tagname":"method","owner":"java.lang.StrictMath","id":"method-expm1","meta":{}},{"name":"floor","tagname":"method","owner":"java.lang.StrictMath","id":"method-floor","meta":{}},{"name":"floorDiv","tagname":"method","owner":"java.lang.StrictMath","id":"method-floorDiv","meta":{}},{"name":"floorMod","tagname":"method","owner":"java.lang.StrictMath","id":"method-floorMod","meta":{}},{"name":"getClass","tagname":"method","owner":"java.lang.Object","id":"method-getClass","meta":{}},{"name":"getExponent","tagname":"method","owner":"java.lang.StrictMath","id":"method-getExponent","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.lang.Object","id":"method-hashCode","meta":{}},{"name":"hypot","tagname":"method","owner":"java.lang.StrictMath","id":"method-hypot","meta":{}},{"name":"log","tagname":"method","owner":"java.lang.StrictMath","id":"method-log","meta":{}},{"name":"log10","tagname":"method","owner":"java.lang.StrictMath","id":"method-log10","meta":{}},{"name":"log1p","tagname":"method","owner":"java.lang.StrictMath","id":"method-log1p","meta":{}},{"name":"max","tagname":"method","owner":"java.lang.StrictMath","id":"method-max","meta":{}},{"name":"min","tagname":"method","owner":"java.lang.StrictMath","id":"method-min","meta":{}},{"name":"multiplyExact","tagname":"method","owner":"java.lang.StrictMath","id":"method-multiplyExact","meta":{}},{"name":"nextAfter","tagname":"method","owner":"java.lang.StrictMath","id":"method-nextAfter","meta":{}},{"name":"nextDown","tagname":"method","owner":"java.lang.StrictMath","id":"method-nextDown","meta":{}},{"name":"nextUp","tagname":"method","owner":"java.lang.StrictMath","id":"method-nextUp","meta":{}},{"name":"notify","tagname":"method","owner":"java.lang.Object","id":"method-notify","meta":{}},{"name":"notifyAll","tagname":"method","owner":"java.lang.Object","id":"method-notifyAll","meta":{}},{"name":"pow","tagname":"method","owner":"java.lang.StrictMath","id":"method-pow","meta":{}},{"name":"random","tagname":"method","owner":"java.lang.StrictMath","id":"method-random","meta":{}},{"name":"rint","tagname":"method","owner":"java.lang.StrictMath","id":"method-rint","meta":{}},{"name":"round","tagname":"method","owner":"java.lang.StrictMath","id":"method-round","meta":{}},{"name":"scalb","tagname":"method","owner":"java.lang.StrictMath","id":"method-scalb","meta":{}},{"name":"signum","tagname":"method","owner":"java.lang.StrictMath","id":"method-signum","meta":{}},{"name":"sin","tagname":"method","owner":"java.lang.StrictMath","id":"method-sin","meta":{}},{"name":"sinh","tagname":"method","owner":"java.lang.StrictMath","id":"method-sinh","meta":{}},{"name":"sqrt","tagname":"method","owner":"java.lang.StrictMath","id":"method-sqrt","meta":{}},{"name":"subtractExact","tagname":"method","owner":"java.lang.StrictMath","id":"method-subtractExact","meta":{}},{"name":"tan","tagname":"method","owner":"java.lang.StrictMath","id":"method-tan","meta":{}},{"name":"tanh","tagname":"method","owner":"java.lang.StrictMath","id":"method-tanh","meta":{}},{"name":"toDegrees","tagname":"method","owner":"java.lang.StrictMath","id":"method-toDegrees","meta":{}},{"name":"toIntExact","tagname":"method","owner":"java.lang.StrictMath","id":"method-toIntExact","meta":{}},{"name":"toRadians","tagname":"method","owner":"java.lang.StrictMath","id":"method-toRadians","meta":{}},{"name":"toString","tagname":"method","owner":"java.lang.Object","id":"method-toString","meta":{}},{"name":"ulp","tagname":"method","owner":"java.lang.StrictMath","id":"method-ulp","meta":{}},{"name":"wait","tagname":"method","owner":"java.lang.Object","id":"method-wait","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.StrictMath","short_doc":"The class {@code StrictMath} contains methods for performing basic\n numeric operations such as the elementary exponen...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='docClass'>java.lang.Object</a><div class='subclass '><strong>java.lang.StrictMath</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/StrictMath.html#java-lang-StrictMath' target='_blank'>StrictMath.js</a></div></pre><div class='doc-contents'><p>The class {@code StrictMath} contains methods for performing basic\n numeric operations such as the elementary exponential, logarithm,\n square root, and trigonometric functions.</p>\n\n<p> <p>To help ensure portability of Java programs, the definitions of\n some of the numeric functions in this package require that they\n produce the same results as certain published algorithms. These\n algorithms are available from the well-known network library\n {@code netlib} as the package \"Freely Distributable Math\n Library,\" <a\n href=\"ftp://ftp.netlib.org/fdlibm.tar\">{@code fdlibm}</a>. These\n algorithms, which are written in the C programming language, are\n then to be understood as executed with all floating-point\n operations following the rules of Java floating-point arithmetic.</p>\n\n<p> <p>The Java math library is defined with respect to\n {@code fdlibm} version 5.3. Where {@code fdlibm} provides\n more than one definition for a function (such as\n {@code acos}), use the \"IEEE 754 core function\" version\n (residing in a file whose name begins with the letter\n {@code e}).  The methods which require {@code fdlibm}\n semantics are {@code sin}, {@code cos}, {@code tan},\n {@code asin}, {@code acos}, {@code atan},\n {@code exp}, {@code log}, {@code log10},\n {@code cbrt}, {@code atan2}, {@code pow},\n {@code sinh}, {@code cosh}, {@code tanh},\n {@code hypot}, {@code expm1}, and {@code log1p}.</p>\n\n<p> <p>\n The platform uses signed two's complement integer arithmetic with\n int and long primitive types.  The developer should choose\n the primitive type to ensure that arithmetic operations consistently\n produce correct results, which in some cases means the operations\n will not overflow the range of values of the computation.\n The best practice is to choose the primitive type and algorithm to avoid\n overflow. In cases where the size is {@code int} or {@code long} and\n overflow errors need to be detected, the methods {@code addExact},\n {@code subtractExact}, {@code multiplyExact}, and {@code toIntExact}\n throw an {@code ArithmeticException} when the results overflow.\n For other arithmetic operations such as divide, absolute value,\n increment, decrement, and negation overflow occurs only with\n a specific minimum or maximum value and should be checked against\n the minimum or maximum as appropriate.</p>\n        <p>Available since: <b>1.3</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-E' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-property-E' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-property-E' class='name expandable'>E</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The {@code double} value that is closer than any other to\ne, the base of the natural logarithms. ...</div><div class='long'><p>The {@code double} value that is closer than any other to\n<i>e</i>, the base of the natural logarithms.</p>\n<p>Defaults to: <code>&quot;2.718281828459045&quot;</code></p></div></div></div><div id='property-PI' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-property-PI' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-property-PI' class='name expandable'>PI</a> : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The {@code double} value that is closer than any other to\npi, the ratio of the circumference of a circle to its\ndiame...</div><div class='long'><p>The {@code double} value that is closer than any other to\n<i>pi</i>, the ratio of the circumference of a circle to its\ndiameter.</p>\n<p>Defaults to: <code>&quot;3.141592653589793&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-IEEEremainder' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-IEEEremainder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-IEEEremainder' class='name expandable'>IEEEremainder</a>( <span class='pre'>f1, f2</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Computes the remainder operation on two arguments as prescribed\n by the IEEE 754 standard. ...</div><div class='long'><p>Computes the remainder operation on two arguments as prescribed\n by the IEEE 754 standard.\n The remainder value is mathematically equal to\n <code>f1&nbsp;-&nbsp;f2</code>&nbsp;&times;&nbsp;<i>n</i>,\n where <i>n</i> is the mathematical integer closest to the exact\n mathematical value of the quotient {@code f1/f2}, and if two\n mathematical integers are equally close to {@code f1/f2},\n then <i>n</i> is the integer that is even. If the remainder is\n zero, its sign is the same as the sign of the first argument.\n Special cases:\n <ul><li>If either argument is NaN, or the first argument is infinite,\n or the second argument is positive zero or negative zero, then the\n result is NaN.\n <li>If the first argument is finite and the second argument is\n infinite, then the result is the same as the first argument.</li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f1</span> : Number<div class='sub-desc'><p>the dividend.</p>\n</div></li><li><span class='pre'>f2</span> : Number<div class='sub-desc'><p>the divisor.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the remainder when {@code f1} is divided by\n          {@code f2}.</p>\n</div></li></ul></div></div></div><div id='method-abs' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-abs' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-abs' class='name expandable'>abs</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the absolute value of a {@code double} value. ...</div><div class='long'><p>Returns the absolute value of a {@code double} value.\n If the argument is not negative, the argument is returned.\n If the argument is negative, the negation of the argument is returned.\n Special cases:\n <ul><li>If the argument is positive zero or negative zero, the result\n is positive zero.\n <li>If the argument is infinite, the result is positive infinity.\n <li>If the argument is NaN, the result is NaN.</li></li></li></ul>\n In other words, the result is the same as the value of the expression:\n <p>{@code Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)>>>1)}</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>the argument whose absolute value is to be determined</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the absolute value of the argument.</p>\n</div></li></ul></div></div></div><div id='method-acos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-acos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-acos' class='name expandable'>acos</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the arc cosine of a value; the returned angle is in the\n range 0.0 through pi. ...</div><div class='long'><p>Returns the arc cosine of a value; the returned angle is in the\n range 0.0 through <i>pi</i>.  Special case:\n <ul><li>If the argument is NaN or its absolute value is greater\n than 1, then the result is NaN.</li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>the value whose arc cosine is to be returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arc cosine of the argument.</p>\n</div></li></ul></div></div></div><div id='method-addExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-addExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-addExact' class='name expandable'>addExact</a>( <span class='pre'>x, y</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the sum of its arguments,\n throwing an exception if the result overflows a {@code long}. ...</div><div class='long'><p>Returns the sum of its arguments,\n throwing an exception if the result overflows a {@code long}.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the first value</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>the second value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if the result overflows a long\n@see Math#addExact(long,long)</p>\n</div></li></ul></div></div></div><div id='method-asin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-asin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-asin' class='name expandable'>asin</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the arc sine of a value; the returned angle is in the\n range -pi/2 through pi/2. ...</div><div class='long'><p>Returns the arc sine of a value; the returned angle is in the\n range -<i>pi</i>/2 through <i>pi</i>/2.  Special cases:\n <ul><li>If the argument is NaN or its absolute value is greater\n than 1, then the result is NaN.\n <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>the value whose arc sine is to be returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arc sine of the argument.</p>\n</div></li></ul></div></div></div><div id='method-atan' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-atan' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-atan' class='name expandable'>atan</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the arc tangent of a value; the returned angle is in the\n range -pi/2 through pi/2. ...</div><div class='long'><p>Returns the arc tangent of a value; the returned angle is in the\n range -<i>pi</i>/2 through <i>pi</i>/2.  Special cases:\n <ul><li>If the argument is NaN, then the result is NaN.\n <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>the value whose arc tangent is to be returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the arc tangent of the argument.</p>\n</div></li></ul></div></div></div><div id='method-atan2' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-atan2' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-atan2' class='name expandable'>atan2</a>( <span class='pre'>y, x</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the angle theta from the conversion of rectangular\n coordinates ({@code x},&nbsp;{@code y}) to polar\n coordin...</div><div class='long'><p>Returns the angle <i>theta</i> from the conversion of rectangular\n coordinates ({@code x},&nbsp;{@code y}) to polar\n coordinates (r,&nbsp;<i>theta</i>).\n This method computes the phase <i>theta</i> by computing an arc tangent\n of {@code y/x} in the range of -<i>pi</i> to <i>pi</i>. Special\n cases:\n <ul><li>If either argument is NaN, then the result is NaN.\n <li>If the first argument is positive zero and the second argument\n is positive, or the first argument is positive and finite and the\n second argument is positive infinity, then the result is positive\n zero.\n <li>If the first argument is negative zero and the second argument\n is positive, or the first argument is negative and finite and the\n second argument is positive infinity, then the result is negative zero.\n <li>If the first argument is positive zero and the second argument\n is negative, or the first argument is positive and finite and the\n second argument is negative infinity, then the result is the\n {@code double} value closest to <i>pi</i>.\n <li>If the first argument is negative zero and the second argument\n is negative, or the first argument is negative and finite and the\n second argument is negative infinity, then the result is the\n {@code double} value closest to -<i>pi</i>.\n <li>If the first argument is positive and the second argument is\n positive zero or negative zero, or the first argument is positive\n infinity and the second argument is finite, then the result is the\n {@code double} value closest to <i>pi</i>/2.\n <li>If the first argument is negative and the second argument is\n positive zero or negative zero, or the first argument is negative\n infinity and the second argument is finite, then the result is the\n {@code double} value closest to -<i>pi</i>/2.\n <li>If both arguments are positive infinity, then the result is the\n {@code double} value closest to <i>pi</i>/4.\n <li>If the first argument is positive infinity and the second argument\n is negative infinity, then the result is the {@code double}\n value closest to 3<em><i>pi</i>/4.\n <li>If the first argument is negative infinity and the second argument\n is positive infinity, then the result is the {@code double} value\n closest to -<i>pi</i>/4.\n <li>If both arguments are negative infinity, then the result is the\n {@code double} value closest to -3</li></li></em><i>pi</i>/4.</li></li></li></li></li></li></li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>the ordinate coordinate</p>\n</div></li><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the abscissa coordinate</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the <i>theta</i> component of the point\n          (<i>r</i>,&nbsp;<i>theta</i>)\n          in polar coordinates that corresponds to the point\n          (<i>x</i>,&nbsp;<i>y</i>) in Cartesian coordinates.</p>\n</div></li></ul></div></div></div><div id='method-cbrt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-cbrt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-cbrt' class='name expandable'>cbrt</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the cube root of a {@code double} value. ...</div><div class='long'><p>Returns the cube root of a {@code double} value.  For\n positive finite {@code x}, {@code cbrt(-x) ==\n -cbrt(x)}; that is, the cube root of a negative value is\n the negative of the cube root of that value's magnitude.\n Special cases:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>If the argument is NaN, then the result is NaN.</li></p>\n\n<p> <li>If the argument is infinite, then the result is an infinity\n with the same sign as the argument.</li></p>\n\n<p> <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></p>\n\n<p> </p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>a value.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the cube root of {@code a}.</p>\n</div></li></ul></div></div></div><div id='method-ceil' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-ceil' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-ceil' class='name expandable'>ceil</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the smallest (closest to negative infinity)\n {@code double} value that is greater than or equal to the\n argum...</div><div class='long'><p>Returns the smallest (closest to negative infinity)\n {@code double} value that is greater than or equal to the\n argument and is equal to a mathematical integer. Special cases:\n <ul><li>If the argument value is already equal to a\n mathematical integer, then the result is the same as the\n argument.  <li>If the argument is NaN or an infinity or\n positive zero or negative zero, then the result is the same as\n the argument.  <li>If the argument value is less than zero but\n greater than -1.0, then the result is negative zero.</li></li></li></ul> Note\n that the value of {@code StrictMath.ceil(x)} is exactly the\n value of {@code -StrictMath.floor(-x)}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>a value.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the smallest (closest to negative infinity)\n          floating-point value that is greater than or equal to\n          the argument and is equal to a mathematical integer.</p>\n</div></li></ul></div></div></div><div id='method-copySign' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-copySign' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-copySign' class='name expandable'>copySign</a>( <span class='pre'>magnitude, sign</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the first floating-point argument with the sign of the\n second floating-point argument. ...</div><div class='long'><p>Returns the first floating-point argument with the sign of the\n second floating-point argument.  For this method, a NaN\n {@code sign} argument is always treated as if it were\n positive.</p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>magnitude</span> : Number<div class='sub-desc'><p>the parameter providing the magnitude of the result</p>\n</div></li><li><span class='pre'>sign</span> : Number<div class='sub-desc'><p>the parameter providing the sign of the result</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a value with the magnitude of {@code magnitude}\n and the sign of {@code sign}.</p>\n</div></li></ul></div></div></div><div id='method-cos' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-cos' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-cos' class='name expandable'>cos</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the trigonometric cosine of an angle. ...</div><div class='long'><p>Returns the trigonometric cosine of an angle. Special cases:\n <ul><li>If the argument is NaN or an infinity, then the\n result is NaN.</li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>an angle, in radians.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the cosine of the argument.</p>\n</div></li></ul></div></div></div><div id='method-cosh' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-cosh' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-cosh' class='name expandable'>cosh</a>( <span class='pre'>x</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the hyperbolic cosine of a {@code double} value. ...</div><div class='long'><p>Returns the hyperbolic cosine of a {@code double} value.\n The hyperbolic cosine of <i>x</i> is defined to be\n (<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>)/2\n where <i>e</i> is {@linkplain <a href=\"#!/api/java.lang.Math-property-E\" rel=\"java.lang.Math-property-E\" class=\"docClass\">java.lang.Math.E</a> Euler's number}.</p>\n\n<p> <p>Special cases:\n <ul></ul></p>\n\n<p> <li>If the argument is NaN, then the result is NaN.</li></p>\n\n<p> <li>If the argument is infinite, then the result is positive\n infinity.</li></p>\n\n<p> <li>If the argument is zero, then the result is {@code 1.0}.</li></p>\n\n<p> </p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The number whose hyperbolic cosine is to be returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The hyperbolic cosine of {@code x}.</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-equals' class='name expandable'>equals</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-exp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-exp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-exp' class='name expandable'>exp</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns Euler's number e raised to the power of a\n {@code double} value. ...</div><div class='long'><p>Returns Euler's number <i>e</i> raised to the power of a\n {@code double} value. Special cases:\n <ul><li>If the argument is NaN, the result is NaN.\n <li>If the argument is positive infinity, then the result is\n positive infinity.\n <li>If the argument is negative infinity, then the result is\n positive zero.</li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>the exponent to raise <i>e</i> to.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value <i>e</i><sup>{@code a}</sup>,\n          where <i>e</i> is the base of the natural logarithms.</p>\n</div></li></ul></div></div></div><div id='method-expm1' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-expm1' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-expm1' class='name expandable'>expm1</a>( <span class='pre'>x</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns ex&nbsp;-1. ...</div><div class='long'><p>Returns <i>e</i><sup>x</sup>&nbsp;-1.  Note that for values of\n <i>x</i> near 0, the exact sum of\n {@code expm1(x)}&nbsp;+&nbsp;1 is much closer to the true\n result of <i>e</i><sup>x</sup> than {@code exp(x)}.</p>\n\n<p> <p>Special cases:\n <ul>\n <li>If the argument is NaN, the result is NaN.</li></ul></p>\n\n<p> <li>If the argument is positive infinity, then the result is\n positive infinity.</li></p>\n\n<p> <li>If the argument is negative infinity, then the result is\n -1.0.</li></p>\n\n<p> <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></p>\n\n<p> </p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the exponent to raise <i>e</i> to in the computation of\n              <i>e</i><sup>{@code x}</sup>&nbsp;-1.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value <i>e</i><sup>{@code x}</sup>&nbsp;-&nbsp;1.</p>\n</div></li></ul></div></div></div><div id='method-floor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-floor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-floor' class='name expandable'>floor</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the largest (closest to positive infinity)\n {@code double} value that is less than or equal to the\n argument ...</div><div class='long'><p>Returns the largest (closest to positive infinity)\n {@code double} value that is less than or equal to the\n argument and is equal to a mathematical integer. Special cases:\n <ul><li>If the argument value is already equal to a\n mathematical integer, then the result is the same as the\n argument.  <li>If the argument is NaN or an infinity or\n positive zero or negative zero, then the result is the same as\n the argument.</li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>a value.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the largest (closest to positive infinity)\n          floating-point value that less than or equal to the argument\n          and is equal to a mathematical integer.</p>\n</div></li></ul></div></div></div><div id='method-floorDiv' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-floorDiv' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-floorDiv' class='name expandable'>floorDiv</a>( <span class='pre'>x, y</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the largest (closest to positive infinity)\n {@code long} value that is less than or equal to the algebraic qu...</div><div class='long'><p>Returns the largest (closest to positive infinity)\n {@code long} value that is less than or equal to the algebraic quotient.\n There is one special case, if the dividend is the\n {@linkplain <a href=\"#!/api/java.lang.Long-property-MIN_VALUE\" rel=\"java.lang.Long-property-MIN_VALUE\" class=\"docClass\">java.lang.Long.MIN_VALUE</a> <a href=\"#!/api/java.lang.Long-property-MIN_VALUE\" rel=\"java.lang.Long-property-MIN_VALUE\" class=\"docClass\">java.lang.Long.MIN_VALUE</a>} and the divisor is {@code -1},\n then integer overflow occurs and\n the result is equal to the {@code Long.MIN_VALUE}.\n <p>\n See int) java.lang.Math.floorDiv for examples and\n a comparison to the integer division {@code /} operator.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the dividend</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>the divisor</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the largest (closest to positive infinity)\n {@code long} value that is less than or equal to the algebraic quotient.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if the divisor {@code y} is zero\n@see Math#floorDiv(long, long)\n@see Math#floor(double)</p>\n</div></li></ul></div></div></div><div id='method-floorMod' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-floorMod' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-floorMod' class='name expandable'>floorMod</a>( <span class='pre'>x, y</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the floor modulus of the {@code long} arguments. ...</div><div class='long'><p>Returns the floor modulus of the {@code long} arguments.\n <p>\n The floor modulus is {@code x - (floorDiv(x, y) * y)},\n has the same sign as the divisor {@code y}, and\n is in the range of {@code -abs(y) &lt; r &lt; +abs(y)}.\n <p>\n The relationship between {@code floorDiv} and {@code floorMod} is such that:\n <ul>\n   <li>{@code floorDiv(x, y) * y + floorMod(x, y) == x}\n </li></ul>\n <p>\n See int) java.lang.Math.floorMod for examples and\n a comparison to the {@code %} operator.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the dividend</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>the divisor</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the floor modulus {@code x - (floorDiv(x, y) * y)}</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if the divisor {@code y} is zero\n@see Math#floorMod(long, long)\n@see StrictMath#floorDiv(long, long)</p>\n</div></li></ul></div></div></div><div id='method-getClass' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-getClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-getClass' class='name expandable'>getClass</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getExponent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-getExponent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-getExponent' class='name expandable'>getExponent</a>( <span class='pre'>d</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the unbiased exponent used in the representation of a\n {@code double}. ...</div><div class='long'><p>Returns the unbiased exponent used in the representation of a\n {@code double}.  Special cases:</p>\n\n<p> <ul>\n <li>If the argument is NaN or infinite, then the result is\n <a href=\"#!/api/java.lang.Double-property-MAX_EXPONENT\" rel=\"java.lang.Double-property-MAX_EXPONENT\" class=\"docClass\">java.lang.Double.MAX_EXPONENT</a> + 1.\n <li>If the argument is zero or subnormal, then the result is\n <a href=\"#!/api/java.lang.Double-property-MIN_EXPONENT\" rel=\"java.lang.Double-property-MIN_EXPONENT\" class=\"docClass\">java.lang.Double.MIN_EXPONENT</a> -1.\n </li></li></ul></p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>d</span> : Number<div class='sub-desc'><p>a {@code double} value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the unbiased exponent of the argument</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-hypot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-hypot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-hypot' class='name expandable'>hypot</a>( <span class='pre'>x, y</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns sqrt(x2&nbsp;+y2)\n without intermediate overflow or underflow. ...</div><div class='long'><p>Returns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n without intermediate overflow or underflow.</p>\n\n<p> <p>Special cases:\n <ul></ul></p>\n\n<p> <li> If either argument is infinite, then the result\n is positive infinity.</li></p>\n\n<p> <li> If either argument is NaN and neither argument is infinite,\n then the result is NaN.</li></p>\n\n<p> </p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>a value</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>a value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)\n without intermediate overflow or underflow</p>\n</div></li></ul></div></div></div><div id='method-log' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-log' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-log' class='name expandable'>log</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the natural logarithm (base e) of a {@code double}\n value. ...</div><div class='long'><p>Returns the natural logarithm (base <i>e</i>) of a {@code double}\n value. Special cases:\n <ul><li>If the argument is NaN or less than zero, then the result\n is NaN.\n <li>If the argument is positive infinity, then the result is\n positive infinity.\n <li>If the argument is positive zero or negative zero, then the\n result is negative infinity.</li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>a value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value ln&nbsp;{@code a}, the natural logarithm of\n          {@code a}.</p>\n</div></li></ul></div></div></div><div id='method-log10' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-log10' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-log10' class='name expandable'>log10</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the base 10 logarithm of a {@code double} value. ...</div><div class='long'><p>Returns the base 10 logarithm of a {@code double} value.\n Special cases:</p>\n\n<p> <ul><li>If the argument is NaN or less than zero, then the result\n is NaN.\n <li>If the argument is positive infinity, then the result is\n positive infinity.\n <li>If the argument is positive zero or negative zero, then the\n result is negative infinity.\n <li> If the argument is equal to 10<sup><i>n</i></sup> for\n integer <i>n</i>, then the result is <i>n</i>.\n </li></li></li></li></ul></p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>a value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the base 10 logarithm of  {@code a}.</p>\n</div></li></ul></div></div></div><div id='method-log1p' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-log1p' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-log1p' class='name expandable'>log1p</a>( <span class='pre'>x</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the natural logarithm of the sum of the argument and 1. ...</div><div class='long'><p>Returns the natural logarithm of the sum of the argument and 1.\n Note that for small values {@code x}, the result of\n {@code log1p(x)} is much closer to the true result of ln(1\n + {@code x}) than the floating-point evaluation of\n {@code log(1.0+x)}.</p>\n\n<p> <p>Special cases:\n <ul></ul></p>\n\n<p> <li>If the argument is NaN or less than -1, then the result is\n NaN.</li></p>\n\n<p> <li>If the argument is positive infinity, then the result is\n positive infinity.</li></p>\n\n<p> <li>If the argument is negative one, then the result is\n negative infinity.</li></p>\n\n<p> <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></p>\n\n<p> </p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>a value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value ln({@code x}&nbsp;+&nbsp;1), the natural\n log of {@code x}&nbsp;+&nbsp;1</p>\n</div></li></ul></div></div></div><div id='method-max' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-max' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-max' class='name expandable'>max</a>( <span class='pre'>a, b</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the greater of two {@code double} values. ...</div><div class='long'><p>Returns the greater of two {@code double} values.  That\n is, the result is the argument closer to positive infinity. If\n the arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other negative zero, the\n result is positive zero.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>an argument.</p>\n</div></li><li><span class='pre'>b</span> : Number<div class='sub-desc'><p>another argument.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the larger of {@code a} and {@code b}.</p>\n</div></li></ul></div></div></div><div id='method-min' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-min' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-min' class='name expandable'>min</a>( <span class='pre'>a, b</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the smaller of two {@code double} values. ...</div><div class='long'><p>Returns the smaller of two {@code double} values.  That\n is, the result is the value closer to negative infinity. If the\n arguments have the same value, the result is that same\n value. If either value is NaN, then the result is NaN.  Unlike\n the numerical comparison operators, this method considers\n negative zero to be strictly smaller than positive zero. If one\n argument is positive zero and the other is negative zero, the\n result is negative zero.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>an argument.</p>\n</div></li><li><span class='pre'>b</span> : Number<div class='sub-desc'><p>another argument.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the smaller of {@code a} and {@code b}.</p>\n</div></li></ul></div></div></div><div id='method-multiplyExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-multiplyExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-multiplyExact' class='name expandable'>multiplyExact</a>( <span class='pre'>x, y</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the product of the arguments,\n throwing an exception if the result overflows a {@code long}. ...</div><div class='long'><p>Returns the product of the arguments,\n throwing an exception if the result overflows a {@code long}.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the first value</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>the second value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if the result overflows a long\n@see Math#multiplyExact(long,long)</p>\n</div></li></ul></div></div></div><div id='method-nextAfter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-nextAfter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-nextAfter' class='name expandable'>nextAfter</a>( <span class='pre'>start, direction</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the floating-point number adjacent to the first\n argument in the direction of the second argument. ...</div><div class='long'><p>Returns the floating-point number adjacent to the first\n argument in the direction of the second argument.  If both\n arguments compare as equal a value equivalent to the second argument\n is returned.</p>\n\n<p> <p>Special cases:\n <ul>\n <li> If either argument is a NaN, then NaN is returned.</li></ul></p>\n\n<p> <li> If both arguments are signed zeros, a value equivalent\n to {@code direction} is returned.</li></p>\n\n<p> <li> If {@code start} is\n &plusmn;<a href=\"#!/api/java.lang.Float-property-MIN_VALUE\" rel=\"java.lang.Float-property-MIN_VALUE\" class=\"docClass\">java.lang.Float.MIN_VALUE</a> and {@code direction}\n has a value such that the result should have a smaller\n magnitude, then a zero with the same sign as {@code start}\n is returned.</li></p>\n\n<p> <li> If {@code start} is infinite and\n {@code direction} has a value such that the result should\n have a smaller magnitude, <a href=\"#!/api/java.lang.Float-property-MAX_VALUE\" rel=\"java.lang.Float-property-MAX_VALUE\" class=\"docClass\">java.lang.Float.MAX_VALUE</a> with the\n same sign as {@code start} is returned.</li></p>\n\n<p> <li> If {@code start} is equal to &plusmn;\n <a href=\"#!/api/java.lang.Float-property-MAX_VALUE\" rel=\"java.lang.Float-property-MAX_VALUE\" class=\"docClass\">java.lang.Float.MAX_VALUE</a> and {@code direction} has a\n value such that the result should have a larger magnitude, an\n infinity with same sign as {@code start} is returned.\n </li></p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>start</span> : Number<div class='sub-desc'><p>starting floating-point value</p>\n</div></li><li><span class='pre'>direction</span> : Number<div class='sub-desc'><p>value indicating which of\n {@code start}'s neighbors or {@code start} should\n be returned</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The floating-point number adjacent to {@code start} in the\n direction of {@code direction}.</p>\n</div></li></ul></div></div></div><div id='method-nextDown' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-nextDown' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-nextDown' class='name expandable'>nextDown</a>( <span class='pre'>f</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the floating-point value adjacent to {@code f} in\n the direction of negative infinity. ...</div><div class='long'><p>Returns the floating-point value adjacent to {@code f} in\n the direction of negative infinity.  This method is\n semantically equivalent to {@code nextAfter(f,\n Float.NEGATIVE_INFINITY)}; however, a\n {@code nextDown} implementation may run faster than its\n equivalent {@code nextAfter} call.</p>\n\n<p> <p>Special Cases:\n <ul>\n <li> If the argument is NaN, the result is NaN.</li></ul></p>\n\n<p> <li> If the argument is negative infinity, the result is\n negative infinity.</li></p>\n\n<p> <li> If the argument is zero, the result is\n {@code -Float.MIN_VALUE}</li></p>\n\n<p> </p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f</span> : Number<div class='sub-desc'><p>starting floating-point value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The adjacent floating-point value closer to negative\n infinity.</p>\n</div></li></ul></div></div></div><div id='method-nextUp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-nextUp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-nextUp' class='name expandable'>nextUp</a>( <span class='pre'>f</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the floating-point value adjacent to {@code f} in\n the direction of positive infinity. ...</div><div class='long'><p>Returns the floating-point value adjacent to {@code f} in\n the direction of positive infinity.  This method is\n semantically equivalent to {@code nextAfter(f,\n Float.POSITIVE_INFINITY)}; however, a {@code nextUp}\n implementation may run faster than its equivalent\n {@code nextAfter} call.</p>\n\n<p> <p>Special Cases:\n <ul>\n <li> If the argument is NaN, the result is NaN.</li></ul></p>\n\n<p> <li> If the argument is positive infinity, the result is\n positive infinity.</li></p>\n\n<p> <li> If the argument is zero, the result is\n <a href=\"#!/api/java.lang.Float-property-MIN_VALUE\" rel=\"java.lang.Float-property-MIN_VALUE\" class=\"docClass\">java.lang.Float.MIN_VALUE</a></li></p>\n\n<p> </p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f</span> : Number<div class='sub-desc'><p>starting floating-point value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The adjacent floating-point value closer to positive\n infinity.</p>\n</div></li></ul></div></div></div><div id='method-notify' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-notify' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-notify' class='name expandable'>notify</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-notifyAll' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-notifyAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-notifyAll' class='name expandable'>notifyAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-pow' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-pow' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-pow' class='name expandable'>pow</a>( <span class='pre'>a, b</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of the first argument raised to the power of the\n second argument. ...</div><div class='long'><p>Returns the value of the first argument raised to the power of the\n second argument. Special cases:</p>\n\n<p> <ul><li>If the second argument is positive or negative zero, then the\n result is 1.0.\n <li>If the second argument is 1.0, then the result is the same as the\n first argument.\n <li>If the second argument is NaN, then the result is NaN.\n <li>If the first argument is NaN and the second argument is nonzero,\n then the result is NaN.</li></li></li></li></ul></p>\n\n<p> <li>If\n <ul>\n <li>the absolute value of the first argument is greater than 1\n and the second argument is positive infinity, or\n <li>the absolute value of the first argument is less than 1 and\n the second argument is negative infinity,\n </li></li></ul>\n then the result is positive infinity.</li></p>\n\n<p> <li>If\n <ul>\n <li>the absolute value of the first argument is greater than 1 and\n the second argument is negative infinity, or\n <li>the absolute value of the\n first argument is less than 1 and the second argument is positive\n infinity,\n </li></li></ul>\n then the result is positive zero.</li></p>\n\n<p> <li>If the absolute value of the first argument equals 1 and the\n second argument is infinite, then the result is NaN.</li></p>\n\n<p> <li>If\n <ul>\n <li>the first argument is positive zero and the second argument\n is greater than zero, or\n <li>the first argument is positive infinity and the second\n argument is less than zero,\n </li></li></ul>\n then the result is positive zero.</li></p>\n\n<p> <li>If\n <ul>\n <li>the first argument is positive zero and the second argument\n is less than zero, or\n <li>the first argument is positive infinity and the second\n argument is greater than zero,\n </li></li></ul>\n then the result is positive infinity.</li></p>\n\n<p> <li>If\n <ul>\n <li>the first argument is negative zero and the second argument\n is greater than zero but not a finite odd integer, or\n <li>the first argument is negative infinity and the second\n argument is less than zero but not a finite odd integer,\n </li></li></ul>\n then the result is positive zero.</li></p>\n\n<p> <li>If\n <ul>\n <li>the first argument is negative zero and the second argument\n is a positive finite odd integer, or\n <li>the first argument is negative infinity and the second\n argument is a negative finite odd integer,\n </li></li></ul>\n then the result is negative zero.</li></p>\n\n<p> <li>If\n <ul>\n <li>the first argument is negative zero and the second argument\n is less than zero but not a finite odd integer, or\n <li>the first argument is negative infinity and the second\n argument is greater than zero but not a finite odd integer,\n </li></li></ul>\n then the result is positive infinity.</li></p>\n\n<p> <li>If\n <ul>\n <li>the first argument is negative zero and the second argument\n is a negative finite odd integer, or\n <li>the first argument is negative infinity and the second\n argument is a positive finite odd integer,\n </li></li></ul>\n then the result is negative infinity.</li></p>\n\n<p> <li>If the first argument is finite and less than zero\n <ul>\n <li> if the second argument is a finite even integer, the\n result is equal to the result of raising the absolute value of\n the first argument to the power of the second argument</li></ul></li></p>\n\n<p> <li>if the second argument is a finite odd integer, the result\n is equal to the negative of the result of raising the absolute\n value of the first argument to the power of the second\n argument</li></p>\n\n<p> <li>if the second argument is finite and not an integer, then\n the result is NaN.\n </li></p>\n\n<p> <li>If both arguments are integers, then the result is exactly equal\n to the mathematical result of raising the first argument to the power\n of the second argument if that result can in fact be represented\n exactly as a {@code double} value.</li></p>\n\n<p> <p>(In the foregoing descriptions, a floating-point value is\n considered to be an integer if and only if it is finite and a\n fixed point of the method <a href=\"#!/api/java.lang.StrictMath-method-ceil\" rel=\"java.lang.StrictMath-method-ceil\" class=\"docClass\">ceil</a> or,\n equivalently, a fixed point of the method <a href=\"#!/api/java.lang.StrictMath-method-floor\" rel=\"java.lang.StrictMath-method-floor\" class=\"docClass\">floor</a>. A value is a fixed point of a one-argument\n method if and only if the result of applying the method to the\n value is equal to the value.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>base.</p>\n</div></li><li><span class='pre'>b</span> : Number<div class='sub-desc'><p>the exponent.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value {@code a}<sup>{@code b}</sup>.</p>\n</div></li></ul></div></div></div><div id='method-random' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-random' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-random' class='name expandable'>random</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a {@code double} value with a positive sign, greater\n than or equal to {@code 0.0} and less than {@code 1.0}. ...</div><div class='long'><p>Returns a {@code double} value with a positive sign, greater\n than or equal to {@code 0.0} and less than {@code 1.0}.\n Returned values are chosen pseudorandomly with (approximately)\n uniform distribution from that range.</p>\n\n<p> <p>When this method is first called, it creates a single new\n pseudorandom-number generator, exactly as if by the expression</p>\n\n<p> <blockquote>{@code new java.util.Random()}</blockquote></p>\n\n<p> This new pseudorandom-number generator is used thereafter for\n all calls to this method and is used nowhere else.</p>\n\n<p> <p>This method is properly synchronized to allow correct use by\n more than one thread. However, if many threads need to generate\n pseudorandom numbers at a great rate, it may reduce contention\n for each thread to have its own pseudorandom-number generator.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>a pseudorandom {@code double} greater than or equal\n to {@code 0.0} and less than {@code 1.0}.\n@see Random#nextDouble()</p>\n</div></li></ul></div></div></div><div id='method-rint' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-rint' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-rint' class='name expandable'>rint</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the {@code double} value that is closest in value\n to the argument and is equal to a mathematical integer. ...</div><div class='long'><p>Returns the {@code double} value that is closest in value\n to the argument and is equal to a mathematical integer. If two\n {@code double} values that are mathematical integers are\n equally close to the value of the argument, the result is the\n integer value that is even. Special cases:\n <ul><li>If the argument value is already equal to a mathematical\n integer, then the result is the same as the argument.\n <li>If the argument is NaN or an infinity or positive zero or negative\n zero, then the result is the same as the argument.</li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>a value.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the closest floating-point value to {@code a} that is\n          equal to a mathematical integer.</p>\n</div></li></ul></div></div></div><div id='method-round' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-round' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-round' class='name expandable'>round</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the closest {@code long} to the argument, with ties\n rounding to positive infinity. ...</div><div class='long'><p>Returns the closest {@code long} to the argument, with ties\n rounding to positive infinity.</p>\n\n<p> <p>Special cases:\n <ul><li>If the argument is NaN, the result is 0.\n <li>If the argument is negative infinity or any value less than or\n equal to the value of {@code Long.MIN_VALUE}, the result is\n equal to the value of {@code Long.MIN_VALUE}.\n <li>If the argument is positive infinity or any value greater than or\n equal to the value of {@code Long.MAX_VALUE}, the result is\n equal to the value of {@code Long.MAX_VALUE}.</li></li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>a floating-point value to be rounded to a\n          {@code long}.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the value of the argument rounded to the nearest\n          {@code long} value.\n@see <a href=\"#!/api/java.lang.Long-property-MAX_VALUE\" rel=\"java.lang.Long-property-MAX_VALUE\" class=\"docClass\">java.lang.Long.MAX_VALUE</a>\n@see <a href=\"#!/api/java.lang.Long-property-MIN_VALUE\" rel=\"java.lang.Long-property-MIN_VALUE\" class=\"docClass\">java.lang.Long.MIN_VALUE</a></p>\n</div></li></ul></div></div></div><div id='method-scalb' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-scalb' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-scalb' class='name expandable'>scalb</a>( <span class='pre'>f, scaleFactor</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns {@code f} &times;\n 2{@code scaleFactor} rounded as if performed\n by a single correctly rounded floating-point...</div><div class='long'><p>Returns {@code f} &times;\n 2<sup>{@code scaleFactor}</sup> rounded as if performed\n by a single correctly rounded floating-point multiply to a\n member of the float value set.  See the Java\n Language Specification for a discussion of floating-point\n value sets.  If the exponent of the result is between <a href=\"#!/api/java.lang.Float-property-MIN_EXPONENT\" rel=\"java.lang.Float-property-MIN_EXPONENT\" class=\"docClass\">java.lang.Float.MIN_EXPONENT</a> and <a href=\"#!/api/java.lang.Float-property-MAX_EXPONENT\" rel=\"java.lang.Float-property-MAX_EXPONENT\" class=\"docClass\">java.lang.Float.MAX_EXPONENT</a>, the\n answer is calculated exactly.  If the exponent of the result\n would be larger than {@code Float.MAX_EXPONENT}, an\n infinity is returned.  Note that if the result is subnormal,\n precision may be lost; that is, when {@code scalb(x, n)}\n is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n <i>x</i>.  When the result is non-NaN, the result has the same\n sign as {@code f}.</p>\n\n<p> <p>Special cases:\n <ul>\n <li> If the first argument is NaN, NaN is returned.\n <li> If the first argument is infinite, then an infinity of the\n same sign is returned.\n <li> If the first argument is zero, then a zero of the same\n sign is returned.\n </li></li></li></ul></p>\n        <p>Available since: <b>1.6</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f</span> : Number<div class='sub-desc'><p>number to be scaled by a power of two.</p>\n</div></li><li><span class='pre'>scaleFactor</span> : Number<div class='sub-desc'><p>power of 2 used to scale {@code f}</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>{@code f} &times; 2<sup>{@code scaleFactor}</sup></p>\n</div></li></ul></div></div></div><div id='method-signum' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-signum' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-signum' class='name expandable'>signum</a>( <span class='pre'>f</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the signum function of the argument; zero if the argument\n is zero, 1.0f if the argument is greater than zero...</div><div class='long'><p>Returns the signum function of the argument; zero if the argument\n is zero, 1.0f if the argument is greater than zero, -1.0f if the\n argument is less than zero.</p>\n\n<p> <p>Special Cases:\n <ul>\n <li> If the argument is NaN, then the result is NaN.\n <li> If the argument is positive zero or negative zero, then the\n      result is the same as the argument.\n </li></li></ul></p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f</span> : Number<div class='sub-desc'><p>the floating-point value whose signum is to be returned</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the signum function of the argument</p>\n</div></li></ul></div></div></div><div id='method-sin' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-sin' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-sin' class='name expandable'>sin</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the trigonometric sine of an angle. ...</div><div class='long'><p>Returns the trigonometric sine of an angle. Special cases:\n <ul><li>If the argument is NaN or an infinity, then the\n result is NaN.\n <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>an angle, in radians.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the sine of the argument.</p>\n</div></li></ul></div></div></div><div id='method-sinh' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-sinh' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-sinh' class='name expandable'>sinh</a>( <span class='pre'>x</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the hyperbolic sine of a {@code double} value. ...</div><div class='long'><p>Returns the hyperbolic sine of a {@code double} value.\n The hyperbolic sine of <i>x</i> is defined to be\n (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/2\n where <i>e</i> is {@linkplain <a href=\"#!/api/java.lang.Math-property-E\" rel=\"java.lang.Math-property-E\" class=\"docClass\">java.lang.Math.E</a> Euler's number}.</p>\n\n<p> <p>Special cases:\n <ul></ul></p>\n\n<p> <li>If the argument is NaN, then the result is NaN.</li></p>\n\n<p> <li>If the argument is infinite, then the result is an infinity\n with the same sign as the argument.</li></p>\n\n<p> <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></p>\n\n<p> </p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The number whose hyperbolic sine is to be returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The hyperbolic sine of {@code x}.</p>\n</div></li></ul></div></div></div><div id='method-sqrt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-sqrt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-sqrt' class='name expandable'>sqrt</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the correctly rounded positive square root of a\n {@code double} value. ...</div><div class='long'><p>Returns the correctly rounded positive square root of a\n {@code double} value.\n Special cases:\n <ul><li>If the argument is NaN or less than zero, then the result\n is NaN.\n <li>If the argument is positive infinity, then the result is positive\n infinity.\n <li>If the argument is positive zero or negative zero, then the\n result is the same as the argument.</li></li></li></ul>\n Otherwise, the result is the {@code double} value closest to\n the true mathematical square root of the argument value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>a value.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the positive square root of {@code a}.</p>\n</div></li></ul></div></div></div><div id='method-subtractExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-subtractExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-subtractExact' class='name expandable'>subtractExact</a>( <span class='pre'>x, y</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the difference of the arguments,\n throwing an exception if the result overflows a {@code long}. ...</div><div class='long'><p>Returns the difference of the arguments,\n throwing an exception if the result overflows a {@code long}.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>the first value</p>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'><p>the second value to subtract from the first</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the result</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if the result overflows a long\n@see Math#subtractExact(long,long)</p>\n</div></li></ul></div></div></div><div id='method-tan' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-tan' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-tan' class='name expandable'>tan</a>( <span class='pre'>a</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the trigonometric tangent of an angle. ...</div><div class='long'><p>Returns the trigonometric tangent of an angle. Special cases:\n <ul><li>If the argument is NaN or an infinity, then the result\n is NaN.\n <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></li></ul></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : Number<div class='sub-desc'><p>an angle, in radians.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the tangent of the argument.</p>\n</div></li></ul></div></div></div><div id='method-tanh' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-tanh' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-tanh' class='name expandable'>tanh</a>( <span class='pre'>x</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the hyperbolic tangent of a {@code double} value. ...</div><div class='long'><p>Returns the hyperbolic tangent of a {@code double} value.\n The hyperbolic tangent of <i>x</i> is defined to be\n (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>),\n in other words, {@linkplain Math#sinh\n sinh(<i>x</i>)}/{@linkplain Math#cosh cosh(<i>x</i>)}.  Note\n that the absolute value of the exact tanh is always less than\n 1.</p>\n\n<p> <p>Special cases:\n <ul></ul></p>\n\n<p> <li>If the argument is NaN, then the result is NaN.</li></p>\n\n<p> <li>If the argument is zero, then the result is a zero with the\n same sign as the argument.</li></p>\n\n<p> <li>If the argument is positive infinity, then the result is\n {@code +1.0}.</li></p>\n\n<p> <li>If the argument is negative infinity, then the result is\n {@code -1.0}.</li></p>\n\n<p> </p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>x</span> : Number<div class='sub-desc'><p>The number whose hyperbolic tangent is to be returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>The hyperbolic tangent of {@code x}.</p>\n</div></li></ul></div></div></div><div id='method-toDegrees' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-toDegrees' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-toDegrees' class='name expandable'>toDegrees</a>( <span class='pre'>angrad</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts an angle measured in radians to an approximately\n equivalent angle measured in degrees. ...</div><div class='long'><p>Converts an angle measured in radians to an approximately\n equivalent angle measured in degrees.  The conversion from\n radians to degrees is generally inexact; users should\n <i>not</i> expect {@code cos(toRadians(90.0))} to exactly\n equal {@code 0.0}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>angrad</span> : Number<div class='sub-desc'><p>an angle, in radians</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the measurement of the angle {@code angrad}\n          in degrees.</p>\n</div></li></ul></div></div></div><div id='method-toIntExact' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-toIntExact' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-toIntExact' class='name expandable'>toIntExact</a>( <span class='pre'>value</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the value of the {@code long} argument;\n throwing an exception if the value overflows an {@code int}. ...</div><div class='long'><p>Returns the value of the {@code long} argument;\n throwing an exception if the value overflows an {@code int}.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Number<div class='sub-desc'><p>the long value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the argument as an int</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>ArithmeticException if the {@code argument} overflows an int\n@see Math#toIntExact(long)</p>\n</div></li></ul></div></div></div><div id='method-toRadians' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-toRadians' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-toRadians' class='name expandable'>toRadians</a>( <span class='pre'>angdeg</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Converts an angle measured in degrees to an approximately\n equivalent angle measured in radians. ...</div><div class='long'><p>Converts an angle measured in degrees to an approximately\n equivalent angle measured in radians.  The conversion from\n degrees to radians is generally inexact.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>angdeg</span> : Number<div class='sub-desc'><p>an angle, in degrees</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the measurement of the angle {@code angdeg}\n          in radians.</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-ulp' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.StrictMath'>java.lang.StrictMath</span><br/><a href='source/StrictMath.html#java-lang-StrictMath-method-ulp' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.StrictMath-method-ulp' class='name expandable'>ulp</a>( <span class='pre'>f</span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the size of an ulp of the argument. ...</div><div class='long'><p>Returns the size of an ulp of the argument.  An ulp, unit in\n the last place, of a {@code float} value is the positive\n distance between this floating-point value and the {@code\n float} value next larger in magnitude.  Note that for non-NaN\n <i>x</i>, <code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.</p>\n\n<p> <p>Special Cases:\n <ul>\n <li> If the argument is NaN, then the result is NaN.\n <li> If the argument is positive or negative infinity, then the\n result is positive infinity.\n <li> If the argument is positive or negative zero, then the result is\n {@code Float.MIN_VALUE}.\n <li> If the argument is &plusmn;{@code Float.MAX_VALUE}, then\n the result is equal to 2<sup>104</sup>.\n </li></li></li></li></ul></p>\n        <p>Available since: <b>1.5</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>f</span> : Number<div class='sub-desc'><p>the floating-point value whose ulp is to be returned</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the size of an ulp of the argument</p>\n</div></li></ul></div></div></div><div id='method-wait' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-wait' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-wait' class='name expandable'>wait</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});