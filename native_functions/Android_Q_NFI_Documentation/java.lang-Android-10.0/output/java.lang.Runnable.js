Ext.data.JsonP.java_lang_Runnable({"tagname":"class","name":"java.lang.Runnable","autodetected":{},"files":[{"filename":"Runnable.js","href":"Runnable.html#java-lang-Runnable"}],"author":[{"tagname":"author","name":"Arthur van Hoff","email":null}],"since":"JDK1.0","members":[{"name":"run","tagname":"method","owner":"java.lang.Runnable","id":"method-run","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.Runnable","short_doc":"The Runnable interface should be implemented by any\n class whose instances are intended to be executed by a thread. ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Runnable.html#java-lang-Runnable' target='_blank'>Runnable.js</a></div></pre><div class='doc-contents'><p>The <code>Runnable</code> interface should be implemented by any\n class whose instances are intended to be executed by a thread. The\n class must define a method of no arguments called <code>run</code>.\n <p>\n This interface is designed to provide a common protocol for objects that\n wish to execute code while they are active. For example,\n <code>Runnable</code> is implemented by class <code>Thread</code>.\n Being active simply means that a thread has been started and has not\n yet been stopped.\n <p>\n In addition, <code>Runnable</code> provides the means for a class to be\n active while not subclassing <code>Thread</code>. A class that implements\n <code>Runnable</code> can run without subclassing <code>Thread</code>\n by instantiating a <code>Thread</code> instance and passing itself in\n as the target.  In most cases, the <code>Runnable</code> interface should\n be used if you are only planning to override the <code>run()</code>\n method and no other <code>Thread</code> methods.\n This is important because classes should not be subclassed\n unless the programmer intends on modifying or enhancing the fundamental\n behavior of the class.</p>\n\n<p> @see     <a href=\"#!/api/java.lang.Thread\" rel=\"java.lang.Thread\" class=\"docClass\">java.lang.Thread</a>\n @see     java.util.concurrent.Callable</p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-run' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Runnable'>java.lang.Runnable</span><br/><a href='source/Runnable.html#java-lang-Runnable-method-run' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Runnable-method-run' class='name expandable'>run</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>When an object implementing interface Runnable is used\n to create a thread, starting the thread causes the object's\n ...</div><div class='long'><p>When an object implementing interface <code>Runnable</code> is used\n to create a thread, starting the thread causes the object's\n <code>run</code> method to be called in that separately executing\n thread.\n <p>\n The general contract of the method <code>run</code> is that it may\n take any action whatsoever.\n@see <a href=\"#!/api/java.lang.Thread-method-run\" rel=\"java.lang.Thread-method-run\" class=\"docClass\">java.lang.Thread.run</a>()</p>\n</div></div></div></div></div></div></div>","meta":{}});