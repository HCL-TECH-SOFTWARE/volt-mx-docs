Ext.data.JsonP.java_lang_SuppressWarnings({"tagname":"class","name":"java.lang.SuppressWarnings","autodetected":{},"files":[{"filename":"SuppressWarnings.js","href":"SuppressWarnings.html#java-lang-SuppressWarnings"}],"author":[{"tagname":"author","name":"Josh Bloch","email":null}],"since":"1.5","members":[{"name":"value","tagname":"method","owner":"java.lang.SuppressWarnings","id":"method-value","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.SuppressWarnings","short_doc":"implements java.lang.annotation.Annotation\n\n Indicates that the named compiler warnings should be suppressed in the\n ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/SuppressWarnings.html#java-lang-SuppressWarnings' target='_blank'>SuppressWarnings.js</a></div></pre><div class='doc-contents'><p>implements java.lang.annotation.Annotation</p>\n\n<p> Indicates that the named compiler warnings should be suppressed in the\n annotated element (and in all program elements contained in the annotated\n element).  Note that the set of warnings suppressed in a given element is\n a superset of the warnings suppressed in all containing elements.  For\n example, if you annotate a class to suppress one warning and annotate a\n method to suppress another, both warnings will be suppressed in the method.</p>\n\n<p> <p>As a matter of style, programmers should always use this annotation\n on the most deeply nested element where it is effective.  If you want to\n suppress a warning in a particular method, you should annotate that\n method rather than its class.</p>\n\n<p> @jls 4.8 Raw Types\n @jls 4.12.2 Variables of Reference Type\n @jls 5.1.9 Unchecked Conversion\n @jls 5.5.2 Checked Casts and Unchecked Casts\n @jls 9.6.3.5 @SuppressWarnings</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-value' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.SuppressWarnings'>java.lang.SuppressWarnings</span><br/><a href='source/SuppressWarnings.html#java-lang-SuppressWarnings-method-value' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.SuppressWarnings-method-value' class='name expandable'>value</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>The set of warnings that are to be suppressed by the compiler in the\n annotated element. ...</div><div class='long'><p>The set of warnings that are to be suppressed by the compiler in the\n annotated element.  Duplicate names are permitted.  The second and\n successive occurrences of a name are ignored.  The presence of\n unrecognized warning names is <i>not</i> an error: Compilers must\n ignore any warning names they do not recognize.  They are, however,\n free to emit a warning if an annotation contains an unrecognized\n warning name.</p>\n\n<p> <p> The string {@code \"unchecked\"} is used to suppress\n unchecked warnings. Compiler vendors should document the\n additional warning names they support in conjunction with this\n annotation type. They are encouraged to cooperate to ensure\n that the same names work across multiple compilers.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>the set of warnings to be suppressed</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});