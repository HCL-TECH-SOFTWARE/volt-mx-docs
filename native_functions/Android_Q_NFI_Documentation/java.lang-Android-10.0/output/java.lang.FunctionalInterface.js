Ext.data.JsonP.java_lang_FunctionalInterface({"tagname":"class","name":"java.lang.FunctionalInterface","autodetected":{},"files":[{"filename":"FunctionalInterface.js","href":"FunctionalInterface.html#java-lang-FunctionalInterface"}],"since":"1.8","members":[],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.FunctionalInterface","short_doc":"implements java.lang.annotation.Annotation\n\n An informative annotation type used to indicate that an interface\n type ...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/FunctionalInterface.html#java-lang-FunctionalInterface' target='_blank'>FunctionalInterface.js</a></div></pre><div class='doc-contents'><p>implements java.lang.annotation.Annotation</p>\n\n<p> An informative annotation type used to indicate that an interface\n type declaration is intended to be a <i>functional interface</i> as\n defined by the Java Language Specification.</p>\n\n<p> Conceptually, a functional interface has exactly one abstract\n method.  Since {@linkplain java.lang.reflect.Method#isDefault()\n default methods} have an implementation, they are not abstract.  If\n an interface declares an abstract method overriding one of the\n public methods of {@code <a href=\"#!/api/java.lang.Object\" rel=\"java.lang.Object\" class=\"docClass\">java.lang.Object</a>}, that also does\n <em>not</em> count toward the interface's abstract method count\n since any implementation of the interface will have an\n implementation from {@code <a href=\"#!/api/java.lang.Object\" rel=\"java.lang.Object\" class=\"docClass\">java.lang.Object</a>} or elsewhere.</p>\n\n<p> <p>Note that instances of functional interfaces can be created with\n lambda expressions, method references, or constructor references.</p>\n\n<p> <p>If a type is annotated with this annotation type, compilers are\n required to generate an error message unless:</p>\n\n<p> <ul>\n <li> The type is an interface type and not an annotation type, enum, or class.\n <li> The annotated type satisfies the requirements of a functional interface.\n </li></li></ul></p>\n\n<p> <p>However, the compiler will treat any interface meeting the\n definition of a functional interface as a functional interface\n regardless of whether or not a {@code FunctionalInterface}\n annotation is present on the interface declaration.</p>\n\n<p> @jls 4.3.2. The Class Object\n @jls 9.8 Functional Interfaces\n @jls 9.4.3 Interface Method Body</p>\n        <p>Available since: <b>1.8</b></p>\n</div><div class='members'></div></div>","meta":{}});