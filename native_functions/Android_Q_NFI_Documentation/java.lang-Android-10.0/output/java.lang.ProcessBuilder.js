Ext.data.JsonP.java_lang_ProcessBuilder({"tagname":"class","name":"java.lang.ProcessBuilder","autodetected":{},"files":[{"filename":"ProcessBuilder.js","href":"ProcessBuilder.html#java-lang-ProcessBuilder"}],"extends":"java.lang.Object","author":[{"tagname":"author","name":"Martin Buchholz","email":null}],"since":"1.5","members":[{"name":"command","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-command","meta":{}},{"name":"directory","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-directory","meta":{}},{"name":"environment","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-environment","meta":{}},{"name":"equals","tagname":"method","owner":"java.lang.Object","id":"method-equals","meta":{}},{"name":"getClass","tagname":"method","owner":"java.lang.Object","id":"method-getClass","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.lang.Object","id":"method-hashCode","meta":{}},{"name":"inheritIO","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-inheritIO","meta":{}},{"name":"notify","tagname":"method","owner":"java.lang.Object","id":"method-notify","meta":{}},{"name":"notifyAll","tagname":"method","owner":"java.lang.Object","id":"method-notifyAll","meta":{}},{"name":"redirectError","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-redirectError","meta":{}},{"name":"redirectErrorStream","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-redirectErrorStream","meta":{}},{"name":"redirectInput","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-redirectInput","meta":{}},{"name":"redirectOutput","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-redirectOutput","meta":{}},{"name":"start","tagname":"method","owner":"java.lang.ProcessBuilder","id":"method-start","meta":{}},{"name":"toString","tagname":"method","owner":"java.lang.Object","id":"method-toString","meta":{}},{"name":"wait","tagname":"method","owner":"java.lang.Object","id":"method-wait","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.ProcessBuilder","short_doc":"This class is used to create operating system processes. ...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='docClass'>java.lang.Object</a><div class='subclass '><strong>java.lang.ProcessBuilder</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder' target='_blank'>ProcessBuilder.js</a></div></pre><div class='doc-contents'><p>This class is used to create operating system processes.</p>\n\n<p> <p>Each {@code ProcessBuilder} instance manages a collection\n of process attributes.  The <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>() method creates a new\n <a href=\"#!/api/java.lang.Process\" rel=\"java.lang.Process\" class=\"docClass\">java.lang.Process</a> instance with those attributes.  The <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>() method can be invoked repeatedly from the same instance\n to create new subprocesses with identical or related attributes.</p>\n\n<p> <p>Each process builder manages these process attributes:</p>\n\n<p> <ul></ul></p>\n\n<p> <li>a <i>command</i>, a list of strings which signifies the\n external program file to be invoked and its arguments, if any.\n Which string lists represent a valid operating system command is\n system-dependent.  For example, it is common for each conceptual\n argument to be an element in this list, but there are operating\n systems where programs are expected to tokenize command line\n strings themselves - on such a system a Java implementation might\n require commands to contain exactly two elements.</li></p>\n\n<p> <li>an <i>environment</i>, which is a system-dependent mapping from\n <i>variables</i> to <i>values</i>.  The initial value is a copy of\n the environment of the current process (see java.lang.System.getenv()).</li></p>\n\n<p> <li>a <i>working directory</i>.  The default value is the current\n working directory of the current process, usually the directory\n named by the system property {@code user.dir}.</li></p>\n\n<p> <li><a name=\"redirect-input\">a source of <i>standard input</i></a>.\n By default, the subprocess reads input from a pipe.  Java code\n can access this pipe via the output stream returned by\n java.lang.Process.getOutputStream().  However, standard input may\n be redirected to another source using\n redirectInput.\n In this case, java.lang.Process.getOutputStream() will return a\n <i>null output stream</i>, for which:</li></p>\n\n<p> <ul>\n <li>the write methods always\n throw {@code IOException}\n <li>the close method does nothing\n </li></li></ul></p>\n\n<p> <li><a name=\"redirect-output\">a destination for <i>standard output</i>\n and <i>standard error</i></a>.  By default, the subprocess writes standard\n output and standard error to pipes.  Java code can access these pipes\n via the input streams returned by java.lang.Process.getInputStream() and\n java.lang.Process.getErrorStream().  However, standard output and\n standard error may be redirected to other destinations using\n redirectOutput and\n redirectError.\n In this case, java.lang.Process.getInputStream() and/or\n java.lang.Process.getErrorStream() will return a <i>null input\n stream</i>, for which:</li></p>\n\n<p> <ul>\n <li>the read methods always return\n {@code -1}\n <li>the available method always returns\n {@code 0}\n <li>the close method does nothing\n </li></li></li></ul></p>\n\n<p> <li>a <i>redirectErrorStream</i> property.  Initially, this property\n is {@code false}, meaning that the standard output and error\n output of a subprocess are sent to two separate streams, which can\n be accessed using the java.lang.Process.getInputStream() and java.lang.Process.getErrorStream() methods.</li></p>\n\n<p> <p>If the value is set to {@code true}, then:</p>\n\n<p> <ul>\n <li>standard error is merged with the standard output and always sent\n to the same destination (this makes it easier to correlate error\n messages with the corresponding output)\n <li>the common destination of standard error and standard output can be\n redirected using\n redirectOutput\n <li>any redirection set by the\n redirectError\n method is ignored when creating a subprocess\n <li>the stream returned from java.lang.Process.getErrorStream() will\n always be a <a href=\"#redirect-output\">null input stream</a>\n </li></li></li></li></ul></p>\n\n<p> </p>\n\n<p> <p>Modifying a process builder's attributes will affect processes\n subsequently started by that object's <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>() method, but\n will never affect previously started processes or the Java process\n itself.</p>\n\n<p> <p>Most error checking is performed by the <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>() method.\n It is possible to modify the state of an object so that <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>() will fail.  For example, setting the command attribute to\n an empty list will not throw an exception unless <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>()\n is invoked.</p>\n\n<p> <p><strong>Note that this class is not synchronized.</strong>\n If multiple threads access a {@code ProcessBuilder} instance\n concurrently, and at least one of the threads modifies one of the\n attributes structurally, it <i>must</i> be synchronized externally.</p>\n\n<p> <p>Starting a new process which uses the default working directory\n and environment is easy:</p>\n\n<p> <pre> {@code\n Process p = new ProcessBuilder(\"myCommand\", \"myArg\").start();\n }</pre></p>\n\n<p> <p>Here is an example that starts a process with a modified working\n directory and environment, and redirects standard output and error\n to be appended to a log file:</p>\n\n<p> <pre> {@code\n ProcessBuilder pb =\n   new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\n Map&lt;String, String> env = pb.environment();\n env.put(\"VAR1\", \"myValue\");\n env.remove(\"OTHERVAR\");\n env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n pb.directory(new File(\"myDir\"));\n File log = new File(\"log\");\n pb.redirectErrorStream(true);\n pb.redirectOutput(Redirect.appendTo(log));\n Process p = pb.start();\n assert pb.redirectInput() == Redirect.PIPE;\n assert pb.redirectOutput().file() == log;\n assert p.getInputStream().read() == -1;\n }</pre></p>\n\n<p> <p>To start a process with an explicit set of environment\n variables, first call Map.clear()\n before adding environment variables.</p>\n        <p>Available since: <b>1.5</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-command' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-command' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-command' class='name expandable'>command</a>( <span class='pre'></span> ) : Object {java.util.List}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this process builder's operating system program and\n arguments. ...</div><div class='long'><p>Returns this process builder's operating system program and\n arguments.  The returned list is <i>not</i> a copy.  Subsequent\n updates to the list will be reflected in the state of this\n process builder.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.List}</span><div class='sub-desc'><p>this process builder's program and its arguments</p>\n</div></li></ul></div></div></div><div id='method-directory' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-directory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-directory' class='name expandable'>directory</a>( <span class='pre'>directory</span> ) : Object {java.lang.ProcessBuilder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets this process builder's working directory. ...</div><div class='long'><p>Sets this process builder's working directory.</p>\n\n<p> Subprocesses subsequently started by this object's <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>() method will use this as their working directory.\n The argument may be {@code null} -- this means to use the\n working directory of the current Java process, usually the\n directory named by the system property {@code user.dir},\n as the working directory of the child process.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>directory</span> : Object {File}<div class='sub-desc'><p>the new working directory</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.ProcessBuilder}</span><div class='sub-desc'><p>this process builder</p>\n</div></li></ul></div></div></div><div id='method-environment' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-environment' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-environment' class='name expandable'>environment</a>( <span class='pre'></span> ) : Object {java.util.Map}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns a string map view of this process builder's environment. ...</div><div class='long'><p>Returns a string map view of this process builder's environment.</p>\n\n<p> Whenever a process builder is created, the environment is\n initialized to a copy of the current process environment (see\n java.lang.System.getenv()).  Subprocesses subsequently started by\n this object's <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>() method will use this map as\n their environment.</p>\n\n<p> <p>The returned object may be modified using ordinary Map operations.  These modifications will be\n visible to subprocesses started via the <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>()\n method.  Two {@code ProcessBuilder} instances always\n contain independent process environments, so changes to the\n returned map will never be reflected in any other\n {@code ProcessBuilder} instance or the values returned by\n <a href=\"#!/api/java.lang.System-method-getenv\" rel=\"java.lang.System-method-getenv\" class=\"docClass\">java.lang.System.getenv</a>.</p>\n\n<p> <p>If the system does not support environment variables, an\n empty map is returned.</p>\n\n<p> <p>The returned map does not permit null keys or values.\n Attempting to insert or query the presence of a null key or\n value will throw a <a href=\"#!/api/java.lang.NullPointerException\" rel=\"java.lang.NullPointerException\" class=\"docClass\">java.lang.NullPointerException</a>.\n Attempting to query the presence of a key or value which is not\n of type <a href=\"#!/api/java.lang.String\" rel=\"java.lang.String\" class=\"docClass\">java.lang.String</a> will throw a <a href=\"#!/api/java.lang.ClassCastException\" rel=\"java.lang.ClassCastException\" class=\"docClass\">java.lang.ClassCastException</a>.</p>\n\n<p> <p>The behavior of the returned map is system-dependent.  A\n system may not allow modifications to environment variables or\n may forbid certain variable names or values.  For this reason,\n attempts to modify the map may fail with\n <a href=\"#!/api/java.lang.UnsupportedOperationException\" rel=\"java.lang.UnsupportedOperationException\" class=\"docClass\">java.lang.UnsupportedOperationException</a> or\n <a href=\"#!/api/java.lang.IllegalArgumentException\" rel=\"java.lang.IllegalArgumentException\" class=\"docClass\">java.lang.IllegalArgumentException</a>\n if the modification is not permitted by the operating system.</p>\n\n<p> <p>Since the external format of environment variable names and\n values is system-dependent, there may not be a one-to-one\n mapping between them and Java's Unicode strings.  Nevertheless,\n the map is implemented in such a way that environment variables\n which are not modified by Java code will have an unmodified\n native representation in the subprocess.</p>\n\n<p> <p>The returned map and its collection views may not obey the\n general contract of the <a href=\"#!/api/java.lang.Object-method-equals\" rel=\"java.lang.Object-method-equals\" class=\"docClass\">java.lang.Object.equals</a> and\n <a href=\"#!/api/java.lang.Object-method-hashCode\" rel=\"java.lang.Object-method-hashCode\" class=\"docClass\">java.lang.Object.hashCode</a> methods.</p>\n\n<p> <p>The returned map is typically case-sensitive on all platforms.</p>\n\n<p> <p>If a security manager exists, its\n <a href=\"#!/api/java.lang.SecurityManager-method-checkPermission\" rel=\"java.lang.SecurityManager-method-checkPermission\" class=\"docClass\">checkPermission</a> method\n is called with a\n <a href=\"#!/api/java.lang.RuntimePermission\" rel=\"java.lang.RuntimePermission\" class=\"docClass\">java.lang.RuntimePermission</a>{@code (\"getenv.*\")} permission.\n This may result in a <a href=\"#!/api/java.lang.SecurityException\" rel=\"java.lang.SecurityException\" class=\"docClass\">java.lang.SecurityException</a> being thrown.</p>\n\n<p> <p>When passing information to a Java subprocess,\n <a href=System.html#EnvironmentVSSystemProperties>system properties</a>\n are generally preferred over environment variables.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.util.Map}</span><div class='sub-desc'><p>this process builder's environment</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n         if a security manager exists and its\n         checkPermission\n         method doesn't allow access to the process environment\n@see Runtime#exec(String[],String[],java.io.File)\n@see System#getenv()</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-equals' class='name expandable'>equals</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getClass' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-getClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-getClass' class='name expandable'>getClass</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-hashCode' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-inheritIO' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-inheritIO' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-inheritIO' class='name expandable'>inheritIO</a>( <span class='pre'></span> ) : Object {java.lang.ProcessBuilder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets the source and destination for subprocess standard I/O\n to be the same as those of the current Java process. ...</div><div class='long'><p>Sets the source and destination for subprocess standard I/O\n to be the same as those of the current Java process.</p>\n\n<p> <p>This is a convenience method.  An invocation of the form\n  <pre> {@code\n pb.inheritIO()\n }</pre>\n behaves in exactly the same way as the invocation\n  <pre> {@code\n pb.redirectInput(Redirect.INHERIT)\n   .redirectOutput(Redirect.INHERIT)\n   .redirectError(Redirect.INHERIT)\n }</pre></p>\n\n<p> This gives behavior equivalent to most operating system\n command interpreters, or the standard C library function\n {@code system()}.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.ProcessBuilder}</span><div class='sub-desc'><p>this process builder</p>\n</div></li></ul></div></div></div><div id='method-notify' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-notify' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-notify' class='name expandable'>notify</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-notifyAll' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-notifyAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-notifyAll' class='name expandable'>notifyAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-redirectError' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-redirectError' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-redirectError' class='name expandable'>redirectError</a>( <span class='pre'></span> ) : Object {java.lang.ProcessBuilder.Redirect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this process builder's standard error destination. ...</div><div class='long'><p>Returns this process builder's standard error destination.</p>\n\n<p> Subprocesses subsequently started by this object's <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>()\n method redirect their standard error to this destination.\n The initial value is <a href=\"#!/api/java.lang.ProcessBuilder.Redirect-property-PIPE\" rel=\"java.lang.ProcessBuilder.Redirect-property-PIPE\" class=\"docClass\">java.lang.ProcessBuilder.Redirect.PIPE</a>.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.ProcessBuilder.Redirect}</span><div class='sub-desc'><p>this process builder's standard error destination</p>\n</div></li></ul></div></div></div><div id='method-redirectErrorStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-redirectErrorStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-redirectErrorStream' class='name expandable'>redirectErrorStream</a>( <span class='pre'>redirectErrorStream</span> ) : Object {java.lang.ProcessBuilder}<span class=\"signature\"></span></div><div class='description'><div class='short'>Sets this process builder's {@code redirectErrorStream} property. ...</div><div class='long'><p>Sets this process builder's {@code redirectErrorStream} property.</p>\n\n<p> <p>If this property is {@code true}, then any error output\n generated by subprocesses subsequently started by this object's\n <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>() method will be merged with the standard\n output, so that both can be read using the\n java.lang.Process.getInputStream() method.  This makes it easier\n to correlate error messages with the corresponding output.\n The initial value is {@code false}.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>redirectErrorStream</span> : Boolean<div class='sub-desc'><p>the new property value</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.ProcessBuilder}</span><div class='sub-desc'><p>this process builder</p>\n</div></li></ul></div></div></div><div id='method-redirectInput' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-redirectInput' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-redirectInput' class='name expandable'>redirectInput</a>( <span class='pre'></span> ) : Object {java.lang.ProcessBuilder.Redirect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this process builder's standard input source. ...</div><div class='long'><p>Returns this process builder's standard input source.</p>\n\n<p> Subprocesses subsequently started by this object's <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>()\n method obtain their standard input from this source.\n The initial value is <a href=\"#!/api/java.lang.ProcessBuilder.Redirect-property-PIPE\" rel=\"java.lang.ProcessBuilder.Redirect-property-PIPE\" class=\"docClass\">java.lang.ProcessBuilder.Redirect.PIPE</a>.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.ProcessBuilder.Redirect}</span><div class='sub-desc'><p>this process builder's standard input source</p>\n</div></li></ul></div></div></div><div id='method-redirectOutput' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-redirectOutput' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-redirectOutput' class='name expandable'>redirectOutput</a>( <span class='pre'></span> ) : Object {java.lang.ProcessBuilder.Redirect}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns this process builder's standard output destination. ...</div><div class='long'><p>Returns this process builder's standard output destination.</p>\n\n<p> Subprocesses subsequently started by this object's <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">start</a>()\n method redirect their standard output to this destination.\n The initial value is <a href=\"#!/api/java.lang.ProcessBuilder.Redirect-property-PIPE\" rel=\"java.lang.ProcessBuilder.Redirect-property-PIPE\" class=\"docClass\">java.lang.ProcessBuilder.Redirect.PIPE</a>.</p>\n        <p>Available since: <b>1.7</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.ProcessBuilder.Redirect}</span><div class='sub-desc'><p>this process builder's standard output destination</p>\n</div></li></ul></div></div></div><div id='method-start' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.ProcessBuilder'>java.lang.ProcessBuilder</span><br/><a href='source/ProcessBuilder.html#java-lang-ProcessBuilder-method-start' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.ProcessBuilder-method-start' class='name expandable'>start</a>( <span class='pre'></span> ) : Object {java.lang.Process}<span class=\"signature\"></span></div><div class='description'><div class='short'>Starts a new process using the attributes of this process builder. ...</div><div class='long'><p>Starts a new process using the attributes of this process builder.</p>\n\n<p> <p>The new process will\n invoke the command and arguments given by <a href=\"#!/api/java.lang.ProcessBuilder-method-command\" rel=\"java.lang.ProcessBuilder-method-command\" class=\"docClass\">command</a>(),\n in a working directory as given by <a href=\"#!/api/java.lang.ProcessBuilder-method-directory\" rel=\"java.lang.ProcessBuilder-method-directory\" class=\"docClass\">directory</a>(),\n with a process environment as given by <a href=\"#!/api/java.lang.ProcessBuilder-method-environment\" rel=\"java.lang.ProcessBuilder-method-environment\" class=\"docClass\">environment</a>().</p>\n\n<p> <p>This method checks that the command is a valid operating\n system command.  Which commands are valid is system-dependent,\n but at the very least the command must be a non-empty list of\n non-null strings.</p>\n\n<p> <p>A minimal set of system dependent environment variables may\n be required to start a process on some operating systems.\n As a result, the subprocess may inherit additional environment variable\n settings beyond those in the process builder's <a href=\"#!/api/java.lang.ProcessBuilder-method-environment\" rel=\"java.lang.ProcessBuilder-method-environment\" class=\"docClass\">environment</a>().</p>\n\n<p> <p>If there is a security manager, its\n <a href=\"#!/api/java.lang.SecurityManager-method-checkExec\" rel=\"java.lang.SecurityManager-method-checkExec\" class=\"docClass\">checkExec</a>\n method is called with the first component of this object's\n {@code command} array as its argument. This may result in\n a <a href=\"#!/api/java.lang.SecurityException\" rel=\"java.lang.SecurityException\" class=\"docClass\">java.lang.SecurityException</a> being thrown.</p>\n\n<p> <p>Starting an operating system process is highly system-dependent.\n Among the many things that can go wrong are:\n <ul>\n <li>The operating system program file was not found.\n <li>Access to the program file was denied.\n <li>The working directory does not exist.\n </li></li></li></ul></p>\n\n<p> <p>In such cases an exception will be thrown.  The exact nature\n of the exception is system-dependent, but it will always be a\n subclass of IOException.</p>\n\n<p> <p>Subsequent modifications to this process builder will not\n affect the returned <a href=\"#!/api/java.lang.Process\" rel=\"java.lang.Process\" class=\"docClass\">java.lang.Process</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Process}</span><div class='sub-desc'><p>a new Process object for managing the subprocess</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException\n         if an element of the command list is null</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IndexOutOfBoundsException\n         if the command is an empty list (has size {@code 0})</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>SecurityException\n         if a security manager exists and\n         <ul></ul></p>\n\n<pre><code>     &lt;li&gt;its\n     checkExec\n     method doesn't allow creation of the subprocess, or\n\n     &lt;li&gt;the standard input to the subprocess was\n     {@linkplain <a href=\"#!/api/java.lang.ProcessBuilder-method-redirectInput\" rel=\"java.lang.ProcessBuilder-method-redirectInput\" class=\"docClass\">redirectInput</a> redirected from a file}\n     and the security manager's\n     checkRead method\n     denies read access to the file, or\n\n     &lt;li&gt;the standard output or standard error of the\n     subprocess was\n     {@linkplain <a href=\"#!/api/java.lang.ProcessBuilder-method-redirectOutput\" rel=\"java.lang.ProcessBuilder-method-redirectOutput\" class=\"docClass\">redirectOutput</a> redirected to a file}\n     and the security manager's\n     checkWrite method\n     denies write access to the file\n\n     &lt;/ul&gt;\n</code></pre>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>IOException if an I/O error occurs\n@see Runtime#exec(String[], String[], java.io.File)</p>\n</div></li></ul></div></div></div><div id='method-toString' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-wait' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-wait' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-wait' class='name expandable'>wait</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div></div></div></div></div>","meta":{}});