Ext.data.JsonP.java_lang_Process({"tagname":"class","name":"java.lang.Process","autodetected":{},"files":[{"filename":"Process.js","href":"Process.html#java-lang-Process"}],"extends":"java.lang.Object","since":"JDK1.0","members":[{"name":"destroy","tagname":"method","owner":"java.lang.Process","id":"method-destroy","meta":{}},{"name":"destroyForcibly","tagname":"method","owner":"java.lang.Process","id":"method-destroyForcibly","meta":{}},{"name":"equals","tagname":"method","owner":"java.lang.Object","id":"method-equals","meta":{}},{"name":"exitValue","tagname":"method","owner":"java.lang.Process","id":"method-exitValue","meta":{}},{"name":"getClass","tagname":"method","owner":"java.lang.Object","id":"method-getClass","meta":{}},{"name":"getErrorStream","tagname":"method","owner":"java.lang.Process","id":"method-getErrorStream","meta":{}},{"name":"getInputStream","tagname":"method","owner":"java.lang.Process","id":"method-getInputStream","meta":{}},{"name":"getOutputStream","tagname":"method","owner":"java.lang.Process","id":"method-getOutputStream","meta":{}},{"name":"hashCode","tagname":"method","owner":"java.lang.Object","id":"method-hashCode","meta":{}},{"name":"isAlive","tagname":"method","owner":"java.lang.Process","id":"method-isAlive","meta":{}},{"name":"notify","tagname":"method","owner":"java.lang.Object","id":"method-notify","meta":{}},{"name":"notifyAll","tagname":"method","owner":"java.lang.Object","id":"method-notifyAll","meta":{}},{"name":"toString","tagname":"method","owner":"java.lang.Object","id":"method-toString","meta":{}},{"name":"wait","tagname":"method","owner":"java.lang.Object","id":"method-wait","meta":{}},{"name":"waitFor","tagname":"method","owner":"java.lang.Process","id":"method-waitFor","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.Process","short_doc":"The java.lang.ProcessBuilder.start() and\n java.lang.Runtime.exec\n methods create a native process and return an insta...","classIcon":"icon-class","superclasses":["java.lang.Object"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='docClass'>java.lang.Object</a><div class='subclass '><strong>java.lang.Process</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Process.html#java-lang-Process' target='_blank'>Process.js</a></div></pre><div class='doc-contents'><p>The java.lang.ProcessBuilder.start() and\n java.lang.Runtime.exec\n methods create a native process and return an instance of a\n subclass of {@code Process} that can be used to control the process\n and obtain information about it.  The class {@code Process}\n provides methods for performing input from the process, performing\n output to the process, waiting for the process to complete,\n checking the exit status of the process, and destroying (killing)\n the process.</p>\n\n<p> <p>The methods that create processes may not work well for special\n processes on certain native platforms, such as native windowing\n processes, daemon processes, Win16/DOS processes on Microsoft\n Windows, or shell scripts.</p>\n\n<p> <p>By default, the created subprocess does not have its own terminal\n or console.  All its standard I/O (i.e. stdin, stdout, stderr)\n operations will be redirected to the parent process, where they can\n be accessed via the streams obtained using the methods\n <a href=\"#!/api/java.lang.Process-method-getOutputStream\" rel=\"java.lang.Process-method-getOutputStream\" class=\"docClass\">getOutputStream</a>(),\n <a href=\"#!/api/java.lang.Process-method-getInputStream\" rel=\"java.lang.Process-method-getInputStream\" class=\"docClass\">getInputStream</a>(), and\n <a href=\"#!/api/java.lang.Process-method-getErrorStream\" rel=\"java.lang.Process-method-getErrorStream\" class=\"docClass\">getErrorStream</a>().\n The parent process uses these streams to feed input to and get output\n from the subprocess.  Because some native platforms only provide\n limited buffer size for standard input and output streams, failure\n to promptly write the input stream or read the output stream of\n the subprocess may cause the subprocess to block, or even deadlock.</p>\n\n<p> <p>Where desired, <a href=\"ProcessBuilder.html#redirect-input\">\n subprocess I/O can also be redirected</a>\n using methods of the <a href=\"#!/api/java.lang.ProcessBuilder\" rel=\"java.lang.ProcessBuilder\" class=\"docClass\">java.lang.ProcessBuilder</a> class.</p>\n\n<p> <p>The subprocess is not killed when there are no more references to\n the {@code Process} object, but rather the subprocess\n continues executing asynchronously.</p>\n\n<p> <p>There is no requirement that a process represented by a {@code\n Process} object execute asynchronously or concurrently with respect\n to the Java process that owns the {@code Process} object.</p>\n\n<p> <p>As of 1.5, java.lang.ProcessBuilder.start() is the preferred way\n to create a {@code Process}.</p>\n        <p>Available since: <b>JDK1.0</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-destroy' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Process'>java.lang.Process</span><br/><a href='source/Process.html#java-lang-Process-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Process-method-destroy' class='name expandable'>destroy</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Kills the subprocess. ...</div><div class='long'><p>Kills the subprocess. Whether the subprocess represented by this\n {@code Process} object is forcibly terminated or not is\n implementation dependent.</p>\n</div></div></div><div id='method-destroyForcibly' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Process'>java.lang.Process</span><br/><a href='source/Process.html#java-lang-Process-method-destroyForcibly' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Process-method-destroyForcibly' class='name expandable'>destroyForcibly</a>( <span class='pre'></span> ) : Object {java.lang.Process}<span class=\"signature\"></span></div><div class='description'><div class='short'>Kills the subprocess. ...</div><div class='long'><p>Kills the subprocess. The subprocess represented by this\n {@code Process} object is forcibly terminated.</p>\n\n<p> <p>The default implementation of this method invokes <a href=\"#!/api/java.lang.Process-method-destroy\" rel=\"java.lang.Process-method-destroy\" class=\"docClass\">destroy</a>\n and so may not forcibly terminate the process. Concrete implementations\n of this class are strongly encouraged to override this method with a\n compliant implementation.  Invoking this method on {@code Process}\n objects returned by <a href=\"#!/api/java.lang.ProcessBuilder-method-start\" rel=\"java.lang.ProcessBuilder-method-start\" class=\"docClass\">java.lang.ProcessBuilder.start</a> and\n <a href=\"#!/api/java.lang.Runtime-method-exec\" rel=\"java.lang.Runtime-method-exec\" class=\"docClass\">java.lang.Runtime.exec</a> will forcibly terminate the process.</p>\n\n<p> <p>Note: The subprocess may not terminate immediately.\n i.e. {@code isAlive()} may return true for a brief period\n after {@code destroyForcibly()} is called. This method\n may be chained to {@code waitFor()} if needed.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.lang.Process}</span><div class='sub-desc'><p>the {@code Process} object representing the\n         subprocess to be forcibly destroyed.</p>\n</div></li></ul></div></div></div><div id='method-equals' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-equals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-equals' class='name expandable'>equals</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-exitValue' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Process'>java.lang.Process</span><br/><a href='source/Process.html#java-lang-Process-method-exitValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Process-method-exitValue' class='name expandable'>exitValue</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the exit value for the subprocess. ...</div><div class='long'><p>Returns the exit value for the subprocess.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>the exit value of the subprocess represented by this\n         {@code Process} object.  By convention, the value\n         {@code 0} indicates normal termination.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>IllegalThreadStateException if the subprocess represented\n         by this {@code Process} object has not yet terminated</p>\n</div></li></ul></div></div></div><div id='method-getClass' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-getClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-getClass' class='name expandable'>getClass</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-getErrorStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Process'>java.lang.Process</span><br/><a href='source/Process.html#java-lang-Process-method-getErrorStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Process-method-getErrorStream' class='name expandable'>getErrorStream</a>( <span class='pre'></span> ) : Object {java.io.InputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the input stream connected to the error output of the\n subprocess. ...</div><div class='long'><p>Returns the input stream connected to the error output of the\n subprocess.  The stream obtains data piped from the error output\n of the process represented by this {@code Process} object.</p>\n\n<p> <p>If the standard error of the subprocess has been redirected using\n java.lang.ProcessBuilder.redirectError or\n java.lang.ProcessBuilder.redirectErrorStream\n then this method will return a\n <a href=\"ProcessBuilder.html#redirect-output\">null input stream</a>.</p>\n\n<p> <p>Implementation note: It is a good idea for the returned\n input stream to be buffered.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.InputStream}</span><div class='sub-desc'><p>the input stream connected to the error output of\n         the subprocess</p>\n</div></li></ul></div></div></div><div id='method-getInputStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Process'>java.lang.Process</span><br/><a href='source/Process.html#java-lang-Process-method-getInputStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Process-method-getInputStream' class='name expandable'>getInputStream</a>( <span class='pre'></span> ) : Object {java.io.InputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the input stream connected to the normal output of the\n subprocess. ...</div><div class='long'><p>Returns the input stream connected to the normal output of the\n subprocess.  The stream obtains data piped from the standard\n output of the process represented by this {@code Process} object.</p>\n\n<p> <p>If the standard output of the subprocess has been redirected using\n java.lang.ProcessBuilder.redirectOutput\n then this method will return a\n <a href=\"ProcessBuilder.html#redirect-output\">null input stream</a>.</p>\n\n<p> <p>Otherwise, if the standard error of the subprocess has been\n redirected using\n java.lang.ProcessBuilder.redirectErrorStream\n then the input stream returned by this method will receive the\n merged standard output and the standard error of the subprocess.</p>\n\n<p> <p>Implementation note: It is a good idea for the returned\n input stream to be buffered.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.InputStream}</span><div class='sub-desc'><p>the input stream connected to the normal output of the\n         subprocess</p>\n</div></li></ul></div></div></div><div id='method-getOutputStream' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Process'>java.lang.Process</span><br/><a href='source/Process.html#java-lang-Process-method-getOutputStream' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Process-method-getOutputStream' class='name expandable'>getOutputStream</a>( <span class='pre'></span> ) : Object {java.io.OutputStream}<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the output stream connected to the normal input of the\n subprocess. ...</div><div class='long'><p>Returns the output stream connected to the normal input of the\n subprocess.  Output to the stream is piped into the standard\n input of the process represented by this {@code Process} object.</p>\n\n<p> <p>If the standard input of the subprocess has been redirected using\n java.lang.ProcessBuilder.redirectInput\n then this method will return a\n <a href=\"ProcessBuilder.html#redirect-input\">null output stream</a>.</p>\n\n<p> <p>Implementation note: It is a good idea for the returned\n output stream to be buffered.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object {java.io.OutputStream}</span><div class='sub-desc'><p>the output stream connected to the normal input of the\n         subprocess</p>\n</div></li></ul></div></div></div><div id='method-hashCode' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-hashCode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-hashCode' class='name expandable'>hashCode</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-isAlive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Process'>java.lang.Process</span><br/><a href='source/Process.html#java-lang-Process-method-isAlive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Process-method-isAlive' class='name expandable'>isAlive</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Tests whether the subprocess represented by this {@code Process} is\n alive. ...</div><div class='long'><p>Tests whether the subprocess represented by this {@code Process} is\n alive.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the subprocess represented by this\n         {@code Process} object has not yet terminated.</p>\n</div></li></ul></div></div></div><div id='method-notify' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-notify' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-notify' class='name expandable'>notify</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-notifyAll' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-notifyAll' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-notifyAll' class='name expandable'>notifyAll</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-toString' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-wait' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/java.lang.Object' rel='java.lang.Object' class='defined-in docClass'>java.lang.Object</a><br/><a href='source/Object.html#java-lang-Object-method-wait' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Object-method-wait' class='name expandable'>wait</a>( <span class='pre'></span> )<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n</div></div></div><div id='method-waitFor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='java.lang.Process'>java.lang.Process</span><br/><a href='source/Process.html#java-lang-Process-method-waitFor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/java.lang.Process-method-waitFor' class='name expandable'>waitFor</a>( <span class='pre'>timeout, unit</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Causes the current thread to wait, if necessary, until the\n subprocess represented by this {@code Process} object has...</div><div class='long'><p>Causes the current thread to wait, if necessary, until the\n subprocess represented by this {@code Process} object has\n terminated, or the specified waiting time elapses.</p>\n\n<p> <p>If the subprocess has already terminated then this method returns\n immediately with the value {@code true}.  If the process has not\n terminated and the timeout value is less than, or equal to, zero, then\n this method returns immediately with the value {@code false}.</p>\n\n<p> <p>The default implementation of this methods polls the {@code exitValue}\n to check if the process has terminated. Concrete implementations of this\n class are strongly encouraged to override this method with a more\n efficient implementation.</p>\n        <p>Available since: <b>1.8</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>timeout</span> : Number<div class='sub-desc'><p>the maximum time to wait</p>\n</div></li><li><span class='pre'>unit</span> : Object {TimeUnit}<div class='sub-desc'><p>the time unit of the {@code timeout} argument</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>{@code true} if the subprocess has exited and {@code false} if\n         the waiting time elapsed before the subprocess has exited.</p>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>InterruptedException if the current thread is interrupted\n         while waiting.</p>\n</div></li><li><span class='pre'>Object</span><div class='sub-desc'><p>NullPointerException if unit is null</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});