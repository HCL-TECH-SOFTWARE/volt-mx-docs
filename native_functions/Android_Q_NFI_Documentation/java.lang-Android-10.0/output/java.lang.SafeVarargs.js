Ext.data.JsonP.java_lang_SafeVarargs({"tagname":"class","name":"java.lang.SafeVarargs","autodetected":{},"files":[{"filename":"SafeVarargs.js","href":"SafeVarargs.html#java-lang-SafeVarargs"}],"since":"1.7","members":[],"alternateClassNames":[],"aliases":{},"id":"class-java.lang.SafeVarargs","short_doc":"implements java.lang.annotation.Annotation\n\n A programmer assertion that the body of the annotated method or\n constru...","classIcon":"icon-class","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/SafeVarargs.html#java-lang-SafeVarargs' target='_blank'>SafeVarargs.js</a></div></pre><div class='doc-contents'><p>implements java.lang.annotation.Annotation</p>\n\n<p> A programmer assertion that the body of the annotated method or\n constructor does not perform potentially unsafe operations on its\n varargs parameter.  Applying this annotation to a method or\n constructor suppresses unchecked warnings about a\n <i>non-reifiable</i> variable arity (vararg) type and suppresses\n unchecked warnings about parameterized array creation at call\n sites.</p>\n\n<p> <p> In addition to the usage restrictions imposed by its @Target meta-annotation, compilers are required to implement\n additional usage restrictions on this annotation type; it is a\n compile-time error if a method or constructor declaration is\n annotated with a {@code @SafeVarargs} annotation, and either:\n <ul>\n <li>  the declaration is a fixed arity method or constructor</li></ul></p>\n\n<p> <li> the declaration is a variable arity method that is neither\n {@code static} nor {@code final}.</li></p>\n\n<p> </p>\n\n<p> <p> Compilers are encouraged to issue warnings when this annotation\n type is applied to a method or constructor declaration where:</p>\n\n<p> <ul></ul></p>\n\n<p> <li> The variable arity parameter has a reifiable element type,\n which includes primitive types, {@code Object}, and {@code String}.\n (The unchecked warnings this annotation type suppresses already do\n not occur for a reifiable element type.)</li></p>\n\n<p> <li> The body of the method or constructor declaration performs\n potentially unsafe operations, such as an assignment to an element\n of the variable arity parameter's array that generates an unchecked\n warning.  Some unsafe operations do not trigger an unchecked\n warning.  For example, the aliasing in</li></p>\n\n<p> <blockquote></blockquote></p>\n\n<pre> &#64;SafeVarargs // Not actually safe!\n static void m(List&lt;String&gt;... stringLists) {\n   Object[] array = stringLists;\n   List&lt;Integer&gt; tmpList = Arrays.asList(42);\n   array[0] = tmpList; // Semantically invalid, but compiles without warnings\n   String s = stringLists[0].get(0); // Oh no, ClassCastException at runtime!\n }\n </pre>\n\n\n<p></p>\n\n<p> leads to a {@code ClassCastException} at runtime.</p>\n\n<p> <p>Future versions of the platform may mandate compiler errors for\n such unsafe operations.</p>\n\n<p> </p>\n\n<p> @jls 4.7 Reifiable Types\n @jls 8.4.1 Formal Parameters\n @jls 9.6.3.7 @SafeVarargs</p>\n        <p>Available since: <b>1.7</b></p>\n</div><div class='members'></div></div>","meta":{}});