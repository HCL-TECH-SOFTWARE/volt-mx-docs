properties([parameters([choice(choices: ['buildDocs_95.sh', 'buildDocs.sh'], description: '[Mandatory] Select a Version to Build. For V9.5 - buildDocs_95.sh, V9.2 - buildDocs.sh ', name: 'Doc_Version'), choice(choices: ['release-mkdocs'], description: '[Mandatory] Selected the release branch', name: 'Release_Branch'), choice(choices: ['feature/HPHX'], description: '[Mandatory] Selected new branch', name: 'New_Branch'), string(description: '[Mandatory] Enter the commit summary. (Eg: HPHX-1234: change summary) ', name: 'Commit_Summary', trim: true), string(description: '[Mandatory] Enter the commit description. (Eg: HPHX-1234: change description) ', name: 'Commit_Description', trim: true), string(description: '[Mandatory] Enter the Release. (Eg: 9.5.X.X) ', name: 'Release')])])
pipeline{

// Consider any agent
//agent any

agent {
label 'agent2'
} 


// Consider only agent
// agent {
//   label 'agent95'
// } 

// Exclude an agent
// agent {
//   label '!agent1'
// } 


environment{
  PROJECT_NAME = "HCL Volt MX Document External (Open-Source) Server"
}

options{
     buildDiscarder(logRotator(numToKeepStr: "10"))    
  }

  stages{
      stage('Build'){
        steps{
          echo "volt-mx-doc-opnsrc - repository is clonned from git scm to local"
          echo "workspace used in this job is: ${env.WORKSPACE}"
          sh "echo present working directory"
          sh "pwd"
          sh "git status"              
          


          // ------- Release Build -------
          
          sh "git status"
          sh "git checkout ${params.Release_Branch}"         // git checkout release-mkdocs
          sh "git fetch origin ${params.Release_Branch}"     // git fetch origin release-mkdocs   
          sh "git pull origin ${params.Release_Branch}"      // git pull origin release-mkdocs   
		      // rd mkdocs.yml
          echo "Building Volt MX Docs Site..." 
          
          // 9.2 - buildDocs.sh , 9.5 -  buildDocs_95.sh
          
          sh "sh ${params.Doc_Version}"  
          echo "Build completed Successfully..."
          echo "Staging and Committing the Changes..."
          sh "git add ."
          sh "git commit --allow-empty -am 'Release Build'"
          sh "git pull origin ${params.Release_Branch}"
          sh "git push origin ${params.Release_Branch}"  
          
          //creating tags/versions
          echo "Tagging Versions"
          sh "git tag ${params.Release}"
          sh "git tag"
          sh "git push --tags"
          // ----------------------Merge changes from Feature-Release to External-Remote-Master ------------------------------//
          
          // -----
          sh "git status"
          // sh "git branch -d feature/HPHX"
          sh "git checkout -b ${params.New_Branch}"       // git checkout -b feature/HPHX
          // sh "git pull volt-mx-docs master"
          sh "git push volt-mx-docs ${params.New_Branch}"   // git push volt-mx-docs feature/HPHX
          sh "gh pr create -t '${params.Commit_Summary}' -b '${params.Commit_Description}'"
          sh "gh pr status"
          sh "gh pr merge --merge"
          sh "git checkout ${params.Release_Branch}"      // git checkout release-mkdocs
          sh "git status"
          sh "git branch -D ${params.New_Branch}"       // git branch -D feature/HPHX
          sh "git status"  
          // -----

        }
      }
  }
  post {
        success{
            echo "Build result is ${currentBuild.currentResult} !"
        }
        failure{
            echo "Build result is ${currentBuild.currentResult}. Please check the console logs to re-run the build"
        }
        always{
          echo " ----------- Build Details ----------- "
          echo "Build Number: ${env.BUILD_NUMBER}"
          echo "Build Result: ${currentBuild.currentResult}"
           script{
             def author_name = sh script: "git show -s --pretty=\"%an\" ${GIT_COMMIT}", returnStdout: true  
             def author_email_id = sh script: "git show -s --pretty=\"%ae\" ${GIT_COMMIT}", returnStdout: true  		 
             def commit_hash = sh script: "git show -s --pretty=\"%h\" ${GIT_COMMIT}", returnStdout: true  		 
             def commit_date = sh script: "git show -s --pretty=\"%ar\" ${GIT_COMMIT}", returnStdout: true 		 
             def commit_message = sh script: "git show -s --pretty=\"%s\" ${GIT_COMMIT}", returnStdout: true     
             def commit_message2 = sh script: "git show -s --pretty=\"%b\" ${GIT_COMMIT}", returnStdout: true     
             println("${author_email_id}")
             sh "echo 'Last 5 commit/change history'"
             //def n1 = sh script: "git show -s --pretty=format:'Author_Name: %an, Author_Email_Id: %ae, Committed_Time: %ar, Changes: %s, Change_Description: %b, Commit_Hash_Id: %h .' ${GIT_COMMIT} -5 ", returnStdout: true 
             def n1 = sh script: "git show -s --pretty=format:'Author_Name: %an, Author_Email_Id: %ae, Committed_Time: %ar, Changes: %s, Commit_Hash_Id: %h.' ${GIT_COMMIT} -5 ", returnStdout: true 
             println("${n1}")
             println("Datatype of n1 is :")
             println(n1.getClass().getName())
             def (h1,h2,h3,h4,h5) = "${n1}".tokenize('\n')
             println("Commit History 1: ${h1}")            
             println("Commit History 2: ${h2}")             
             println("Commit History 3: ${h3}")             
             println("Commit History 4: ${h4}")             
             println("Commit History 5: ${h5}")
            emailext attachLog: true, compressLog:true, body:"<p>***********************************************************************************</p><h2>${env.PROJECT_NAME} - Build Status: </h2><h3><u>Present Build Updates:</u></h3><table><tr><th>Build Number: </th><td><code>${env.BUILD_NUMBER}</code></td></tr><tr><th>Build Status: </th><td><code>${currentBuild.currentResult}</code></td></tr><tr><th>Build Duration: </th><td><code>${currentBuild.durationString}</code></td></tr></table><h3><u>Last 5 ChangeSets/History:</u></h3><table><tr><th>Commit History-1:</th><td><code>${h1}</code></td></tr><tr><th>Commit History-2:</th><td><code>${h2}</code></td></tr><tr><th>Commit History-3:</th><td><code>${h3}</code></td></tr><tr><th>Commit History-4:</th><td><code>${h4}</code></td></tr><tr><th>Commit History-5:</th><td><code>${h5}</code></td></tr></table><p>Please check the attached build logs and output to view the results in detail.</p><p>Verify your changes published externally from this latest base URL: <br>https://opensource.hcltechsw.com/volt-mx-docs/95/docs/documentation/ .</p><p>***********************************************************************************</p>", replyTo: 'vishwanathan.m@hcl.com',  subject: "${env.PROJECT_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}!", to: 'vishwanathan.m@hcl.com' 
            //emailext attachLog: true, compressLog:true, body:"<p>***********************************************************************************</p><h2>${env.PROJECT_NAME} - Build Status: </h2><h3><u>Present Build Updates:</u></h3><table><tr><th>Build Number: </th><td><code>${env.BUILD_NUMBER}</code></td></tr><tr><th>Build Status: </th><td><code>${currentBuild.currentResult}</code></td></tr><tr><th>Build Duration: </th><td><code>${currentBuild.durationString}</code></td></tr></table><h3><u>Last 5 ChangeSets/History:</u></h3><table><tr><th>Commit History-1:</th><td><code>${h1}</code></td></tr><tr><th>Commit History-2:</th><td><code>${h2}</code></td></tr><tr><th>Commit History-3:</th><td><code>${h3}</code></td></tr><tr><th>Commit History-4:</th><td><code>${h4}</code></td></tr><tr><th>Commit History-5:</th><td><code>${h5}</code></td></tr></table><p>Please check the attached build logs and output to view the results in detail.</p><p>Verify your changes published externally from this latest base URL: <br>https://opensource.hcltechsw.com/volt-mx-docs/95/docs/documentation/ .</p><p>***********************************************************************************</p>", replyTo: 'michael.stewart@hcl.com, david.sayer@hcl.com, amita.g@hcl.com, kumari.h@hcl.com, sanjay-c@hcl.com, vishwanathan.m@hcl.com',  subject: "${env.PROJECT_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}!", to: 'michael.stewart@hcl.com, david.sayer@hcl.com, amita.g@hcl.com, kumari.h@hcl.com, sanjay-c@hcl.com, vishwanathan.m@hcl.com' 
           }  
        }
    }
}
