{# Original Copyright (c) 2016-2021 Martin Donath martin.donath@squidfunk.com
Modifications Copyright (c) 2022 HCL Technologies 

Permission is hereby granted,
free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the
following conditions: The above copyright notice and this permission notice
shall be included in all copies or substantial portions of the Software. THE
SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. #} {%
macro render(nav_item, path, level) %} {# 3 Determine class according to state
#} {% set class = "md-nav__item" %} {% if nav_item.active %} {% set class =
class ~ " md-nav__item--active" %} {% endif %} {# We render children only if
they exist AND if we are below top level nav #} {# 4 Main navigation item with
nested items #} {% if nav_item.children and (nav_item.active or level > 1 ) %}
{# 5 Determine whether to render item as a section #} {% if
"navigation.sections" in features and level == 1 + ( "navigation.tabs" in
features ) %} {% set class = class ~ " md-nav__item--section" %} {% endif %} {#
6 Render item with nested items #}
<li class="{{ class }} md-nav__item--nested">
  {# 7 Active checkbox expands items contained within nested section #} {% set
  checked = "checked" if nav_item.active %} {% if "navigation.expand" in
  features and not checked %}
  <input
    class="md-nav__toggle md-toggle md-toggle--indeterminate"
    data-md-toggle="{{ path }}"
    type="checkbox"
    id="{{ path }}"
    checked
  />
  {% else %}
  <input
    class="md-nav__toggle md-toggle"
    data-md-toggle="{{ path }}"
    type="checkbox"
    id="{{ path }}"
    {{
    checked
    }}
  />
  {% endif %} {# 8 Determine all nested items that are index pages #} {% set
  indexes = [] %} {% if "navigation.indexes" in features %} {% for nav_item in
  nav_item.children %} {% if nav_item.is_index and not index is defined %} {%
  set _ = indexes.append(nav_item) %} {% endif %} {% endfor %} {% endif %} {# 9
  Render item if it is not an index page #} {% if not indexes %} {# For
  everything below top level, recurse and find the first page with a URL #} {%
  if level > 1 %} {% set ns = namespace(found=false) %} {% set ns =
  namespace(nav_item_child_url="") %} {% for nav_item_child in nav_item.children
  recursive %} {% if nav_item_child.url and not ns.found %} {% set
  ns.nav_item_child_url = nav_item_child.url %} {% set ns.found = true %} {%
  endif %} {% if nav_item_child.children %} {{ loop(nav_item_child.children) }}
  {%- endif %} {% endfor %}

  <div class="md-nav__link md-nav__link--index">
    <a href="{{ ns.nav_item_child_url | url }}"> {{ nav_item.title }} </a>
    <label for="{{ path }}">
      <span class="md-nav__icon md-icon"></span>
    </label>
  </div>

  {% endif %} {# 10 Render link to index page + toggle #} {% else %} {% set
  index = indexes | first %} {% set class = "md-nav__link--active" if index ==
  page %}
  <div class="md-nav__link md-nav__link--index {{ class }}">
    <a href="{{ index.url | url }}">{{ nav_item.title }}</a>

    {# 11 Only render toggle if there's at least one more page #} {% if
    nav_item.children | length > 1 %}
    <label for="{{ path }}">
      <span class="md-nav__icon md-icon"></span>
    </label>
    {% endif %}
  </div>
  {% endif %} {# 12 Render nested navigation #} {% if nav_item.active %}
  <nav
    class="md-nav md-nested-nav"
    aria-label="{{ nav_item.title }}"
    data-md-level="{{ level }}"
  >
    <label class="md-nav__title" for="{{ path }}">
      <span class="md-nav__icon md-icon"></span>
      {{ nav_item.title }}
    </label>
    <ul class="md-nav__list" data-md-scrollfix>
      {# 13 Render nested item list #} {% for nav_item in nav_item.children %}
      {% if not indexes or nav_item != indexes | first %} {{ render(nav_item,
      path ~ "_" ~ loop.index, level + 1) }} {% endif %} {% endfor %}
    </ul>
  </nav>
  {% endif %}
</li>

{% elif nav_item == page %} {# 14 Currently active page #}
<li class="{{ class }}">
  {% set toc = page.toc %} {# 15 Active checkbox expands items contained within
  nested section #}
  <input
    class="md-nav__toggle md-toggle"
    data-md-toggle="toc"
    type="checkbox"
    id="__toc"
  />

  {# 16 Hack: see partials/toc.html for more information #} {% set first = toc |
  first %} {% if first and first.level == 1 %} {% set toc = first.children %} {%
  endif %} {% if toc %} {# 17 Render table of contents, if not empty #}
  <label class="md-nav__link md-nav__link--active" for="__toc">
    {{ nav_item.title }}
    <span class="md-nav__icon md-icon"></span>
  </label>
  {% endif %}
  <a href="{{ nav_item.url | url }}" class="md-nav__link md-nav__link--active">
    {{ nav_item.title }}
  </a>

  {% if toc %} {# 18 Show table of contents #} {% include "partials/toc.html" %}
  {% endif %}
</li>

{% else %} {# 19 Main navigation item #} {# In the original logic, this was for
items that had no children, and therefore for whom the URL was going to be
present. In the new logic, the blocks above are ONLY called if either the items
(have children and are level >1), else if they're just a page. This section to
render the main nav needs to have some logic to deal with being a section not a
page. #} {% if not nav_item.children %}
<li class="{{ class }}">
  <a href="{{ nav_item.url | url }}" class="md-nav__link">
    {{ nav_item.title }}
  </a>
</li>
{% elif not nav_item.children[0].children %}
<li class="{{ class }}">
  <a href="{{ nav_item.children[0].url | url }}" class="md-nav__link">
    {{ nav_item.title }}
  </a>
</li>
{% elif not nav_item.children[0].children[0].children %}
<li class="{{ class }}">
  <a
    href="{{ nav_item.children[0].children[0].url | url }}"
    class="md-nav__link"
  >
    {{ nav_item.title }}
  </a>
</li>
{% endif %} {% endif %} {% endmacro %} {# 20 Render current and nested
navigation items #} {{ render(nav_item, path, level) }}
